/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_yz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_23(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46743 = ae + be;
    const double C46742 = yA - yB;
    const double C46750 = zA - zB;
    const double C46764 = ae * be;
    const double C46762 = 0 * be;
    const double C46781 = 0 * be;
    const double C46796 = std::pow(ae, 2);
    const double C46795 = zP - zQ;
    const double C46794 = yP - yQ;
    const double C46793 = p + q;
    const double C46792 = p * q;
    const double C46804 = bs[4];
    const double C46802 = xP - xQ;
    const double C46809 = bs[5];
    const double C46816 = bs[6];
    const double C46824 = bs[7];
    const double C46838 = bs[3];
    const double C47204 = bs[2];
    const double C115 = bs[0];
    const double C47562 = xA - xB;
    const double C47581 = ce + de;
    const double C47580 = ce * de;
    const double C47579 = xC - xD;
    const double C47613 = yC - yD;
    const double C47631 = zC - zD;
    const double C46763 = std::pow(C46743, 2);
    const double C47572 = 2 * C46743;
    const double C47817 = std::pow(C46742, 2);
    const double C47899 = C46742 * be;
    const double C47897 = C46742 * ae;
    const double C47834 = std::pow(C46750, 2);
    const double C47900 = C46750 * be;
    const double C47898 = C46750 * ae;
    const double C46766 = C46764 * C46742;
    const double C46782 = C46764 * C46750;
    const double C46833 = C46795 * ae;
    const double C46989 = std::pow(C46795, 2);
    const double C46798 = C46794 * C46795;
    const double C46874 = C46794 * ae;
    const double C46929 = std::pow(C46794, 2);
    const double C46797 = 2 * C46792;
    const double C46810 = std::pow(C46802, 2);
    const double C47563 = std::pow(C47562, 2);
    const double C47865 = C47562 * be;
    const double C47864 = C47562 * ae;
    const double C47585 = 2 * C47581;
    const double C47584 = std::pow(C47581, 2);
    const double C47586 = C47579 * de;
    const double C47583 = C47579 * ce;
    const double C47582 = std::pow(C47579, 2);
    const double C47614 = std::pow(C47613, 2);
    const double C47673 = C47613 * de;
    const double C47671 = C47613 * ce;
    const double C47632 = std::pow(C47631, 2);
    const double C47715 = C47631 * de;
    const double C47713 = C47631 * ce;
    const double C46765 = 2 * C46763;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C46763;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (yP - yQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C46763;
    const double C47866 = std::pow(C47572, -1);
    const double C47818 = C47817 * C46764;
    const double C47835 = C47834 * C46764;
    const double C46839 = C46838 * C46833;
    const double C46842 = C46804 * C46833;
    const double C46846 = C46809 * C46833;
    const double C46853 = C46816 * C46833;
    const double C46864 = C46824 * C46833;
    const double C46800 = C46798 * C46796;
    const double C46878 = C46838 * C46874;
    const double C46881 = C46804 * C46874;
    const double C46885 = C46809 * C46874;
    const double C46892 = C46816 * C46874;
    const double C46903 = C46824 * C46874;
    const double C46799 = C46797 / C46793;
    const double C122 = (-(bs[1] * C46833 * C46797) / C46793) / C46743;
    const double C123 = (-(bs[1] * C46874 * C46797) / C46793) / C46743;
    const double C116 = -(C46802 * bs[1] * C46797) / C46793;
    const double C304 = -(C46794 * bs[1] * C46797) / C46793;
    const double C507 = -(C46795 * bs[1] * C46797) / C46793;
    const double C47564 = C47563 * C46764;
    const double C47598 = std::pow(C47585, -1);
    const double C47874 = std::pow(C47585, -2);
    const double C47599 = 2 * C47584;
    const double C47878 = C47584 * C47585;
    const double C47877 = 4 * C47584;
    const double C47867 = std::pow(C47583, 2);
    const double C47587 = C47582 * C47580;
    const double C47615 = C47614 * C47580;
    const double C47879 = std::pow(C47671, 2);
    const double C47633 = C47632 * C47580;
    const double C47881 = std::pow(C47713, 2);
    const double C47819 = C47818 / C46743;
    const double C47836 = C47835 / C46743;
    const double C46805 = C46804 * C46800;
    const double C46812 = C46809 * C46800;
    const double C46817 = C46816 * C46800;
    const double C46826 = C46824 * C46800;
    const double C46803 = std::pow(C46799, 4);
    const double C46808 = -C46799;
    const double C46815 = std::pow(C46799, 6);
    const double C138 =
        (std::pow(-C46799, 3) * bs[3] * C46800 +
         std::pow(C46799, 4) * bs[4] * C46800 * std::pow(xP - xQ, 2)) /
        C46763;
    const double C47203 = std::pow(C46799, 2);
    const double C124 =
        (C46802 * std::pow(C46799, 2) * bs[2] * C46833) / C46743;
    const double C125 =
        (C46802 * std::pow(C46799, 2) * bs[2] * C46874) / C46743;
    const double C316 =
        (C46794 * std::pow(C46799, 2) * bs[2] * C46874) / C46743 -
        (ae * bs[1] * C46797) / (C46793 * C46743);
    const double C317 =
        (C46794 * std::pow(C46799, 2) * bs[2] * C46833) / C46743;
    const double C47565 = C47564 / C46743;
    const double C47912 = 4 * C47878;
    const double C47911 = C47581 * C47877;
    const double C47588 = C47587 / C47581;
    const double C47616 = C47615 / C47581;
    const double C47634 = C47633 / C47581;
    const double C47820 = -C47819;
    const double C47837 = -C47836;
    const double C46806 = C46803 * C46805;
    const double C46843 = C46803 * C46842;
    const double C46882 = C46803 * C46881;
    const double C46918 = C46804 * C46803;
    const double C46811 = std::pow(C46808, 5);
    const double C46823 = std::pow(C46808, 7);
    const double C46837 = std::pow(C46808, 3);
    const double C334 = (ae * std::pow(C46799, 2) * bs[2] * C46833 +
                         C46794 * std::pow(C46808, 3) * bs[3] * C46800) /
                        C46763;
    const double C46818 = C46815 * C46817;
    const double C46855 = C46815 * C46853;
    const double C46894 = C46815 * C46892;
    const double C46963 = C46816 * C46815;
    const double C47205 = C47204 * C47203;
    const double C519 = (C46795 * C47203 * C47204 * C46874) / C46743;
    const double C520 = (C46795 * C47203 * C47204 * C46833) / C46743 -
                        (ae * bs[1] * C46797) / (C46793 * C46743);
    const double C47566 = -C47565;
    const double C47589 = -C47588;
    const double C47617 = -C47616;
    const double C47635 = -C47634;
    const double C47821 = std::exp(C47820);
    const double C47838 = std::exp(C47837);
    const double C139 = (2 * C46802 * C46806 +
                         C46802 * (C46806 + std::pow(-C46799, 5) * bs[5] *
                                                C46800 * std::pow(C46802, 2))) /
                        C46763;
    const double C333 = (ae * C46802 * std::pow(C46808, 3) * bs[3] * C46833 +
                         C46794 * C46802 * C46806) /
                        C46763;
    const double C46844 = C46802 * C46843;
    const double C46927 = ae * C46843;
    const double C46926 = C46794 * C46843;
    const double C47326 = C46795 * C46843;
    const double C46883 = C46802 * C46882;
    const double C46973 = ae * C46882;
    const double C46988 = C46795 * C46882;
    const double C47269 = C46794 * C46882;
    const double C46951 = C46802 * C46918;
    const double C46958 = C46794 * C46918;
    const double C47063 = C46918 * ae;
    const double C47076 = C46795 * C46918;
    const double C47211 = C46918 * C46810;
    const double C47272 = C46918 * C46929;
    const double C47328 = C46918 * C46989;
    const double C46813 = C46811 * C46812;
    const double C46847 = C46811 * C46846;
    const double C46886 = C46811 * C46885;
    const double C46920 = C46809 * C46811;
    const double C46827 = C46823 * C46826;
    const double C46866 = C46823 * C46864;
    const double C46905 = C46823 * C46903;
    const double C46840 = C46837 * C46839;
    const double C46879 = C46837 * C46878;
    const double C46953 = C46838 * C46837;
    const double C536 =
        (ae * C46802 * C46837 * C46838 * C46874 + C46795 * C46802 * C46806) /
        C46763;
    const double C537 = (ae * std::pow(C46799, 2) * bs[2] * C46874 +
                         C46795 * C46837 * C46838 * C46800) /
                        C46763;
    const double C46819 = C46818 * C46810;
    const double C46822 = C46802 * C46818;
    const double C47008 = C46794 * C46818;
    const double C47038 = C46795 * C46818;
    const double C46856 = C46855 * C46810;
    const double C46863 = C46802 * C46855;
    const double C47009 = C46855 * C46929;
    const double C47101 = ae * C46855;
    const double C47100 = C46794 * C46855;
    const double C47120 = C46795 * C46855;
    const double C46895 = C46894 * C46810;
    const double C46902 = C46802 * C46894;
    const double C47078 = C46894 * C46989;
    const double C47124 = ae * C46894;
    const double C47123 = C46795 * C46894;
    const double C47426 = C46794 * C46894;
    const double C46964 = C46963 * C46810;
    const double C47051 = C46802 * C46963;
    const double C47128 = C46794 * C46963;
    const double C47127 = C46963 * C46929;
    const double C47159 = C46963 * C46989;
    const double C117 = C47205 * C46810 - (bs[1] * C46797) / C46793;
    const double C303 = C46794 * C46802 * C47205;
    const double C305 = C47205 * C46929 - (bs[1] * C46797) / C46793;
    const double C506 = C46795 * C46802 * C47205;
    const double C508 = C47205 * C46989 - (bs[1] * C46797) / C46793;
    const double C971 = C46795 * C46794 * C47205;
    const double C47567 = std::exp(C47566);
    const double C47590 = std::exp(C47589);
    const double C47618 = std::exp(C47617);
    const double C47636 = std::exp(C47635);
    const double C46767 = C46766 * C47821;
    const double C114 = -(2 * ae * be * (yA - yB) * C47821) / (ae + be);
    const double C4827 =
        ((C47821 - (C46742 * 2 * ae * be * C46742 * C47821) / C46743) * ae) /
            C46743 -
        (0 * be) / (2 * std::pow(C46743, 2));
    const double C4828 =
        (0 * ae) / C46743 - (ae * be * C46742 * C47821) / std::pow(C46743, 2);
    const double C16185 =
        (-(0 * be) / C46743) / (2 * C46743) -
        ((C47821 - (C46742 * 2 * ae * be * C46742 * C47821) / C46743) * be) /
            C46743;
    const double C16186 =
        (-(2 * ae * be * C46742 * C47821) / C46743) / (2 * C46743) -
        (0 * be) / C46743;
    const double C47933 = C47866 * C47821;
    const double C47932 = C47821 * C47897;
    const double C16181 = -(C47821 * C47899) / C46743;
    const double C151 = C47838 * C138;
    const double C147 = C47838 * C137;
    const double C145 = C47838 * C124;
    const double C4995 = C47838 * C334;
    const double C4993 = C47838 * C317;
    const double C46783 = C46782 * C47838;
    const double C113 = -(2 * ae * be * (zA - zB) * C47838) / (ae + be);
    const double C10483 =
        ((C47838 - (C46750 * 2 * ae * be * C46750 * C47838) / C46743) * ae) /
            C46743 -
        (0 * be) / (2 * std::pow(C46743, 2));
    const double C10484 =
        (0 * ae) / C46743 - (ae * be * C46750 * C47838) / std::pow(C46743, 2);
    const double C31444 =
        (-(0 * be) / C46743) / (2 * C46743) -
        ((C47838 - (C46750 * 2 * C46764 * C46750 * C47838) / C46743) * be) /
            C46743;
    const double C31445 =
        (-(2 * C46764 * C46750 * C47838) / C46743) / (2 * C46743) -
        (0 * be) / C46743;
    const double C47935 = C47866 * C47838;
    const double C47934 = C47838 * C47898;
    const double C31442 = -(C47838 * C47900) / C46743;
    const double C153 = C47838 * C139;
    const double C348 = C47838 * C333;
    const double C47216 = 2 * C46951;
    const double C47279 = C46794 * C46951;
    const double C47278 = C46951 * ae;
    const double C47334 = C46795 * C46951;
    const double C47361 = 2 * C46958;
    const double C47360 = C46958 * ae;
    const double C47389 = C46795 * C46958;
    const double C47408 = 2 * C47076;
    const double C47407 = C47076 * ae;
    const double C46923 = C46802 * C46813;
    const double C46928 = C46794 * C46813;
    const double C46974 = C46795 * C46813;
    const double C140 =
        (3 * (C46806 + C46813 * C46810) +
         C46802 * (2 * C46802 * C46813 +
                   C46802 * (C46813 +
                             std::pow(C46799, 6) * bs[6] * C46800 * C46810))) /
        C46763;
    const double C332 = (ae * (std::pow(C46808, 3) * bs[3] * C46833 +
                               C46803 * C46804 * C46833 * C46810) +
                         C46794 * (C46806 + C46813 * C46810)) /
                        C46763;
    const double C336 = (C46802 * C46806 + ae * C46794 * C46844 +
                         C46794 * (ae * C46844 + C46794 * C46802 * C46813)) /
                        C46763;
    const double C535 =
        (ae * (C46837 * C46838 * C46874 + C46803 * C46804 * C46874 * C46810) +
         C46795 * (C46806 + C46813 * C46810)) /
        C46763;
    const double C539 = (C46802 * C46806 + ae * C46795 * C46883 +
                         C46795 * (ae * C46883 + C46795 * C46802 * C46813)) /
                        C46763;
    const double C987 =
        (ae * (C46795 * C46844 + C46802 * C46838 * C46837 * ae) +
         C46794 * (ae * C46883 + C46795 * C46802 * C46813)) /
        C46763;
    const double C46848 = C46847 * C46810;
    const double C46852 = C46802 * C46847;
    const double C46931 = C46847 * C46929;
    const double C47007 = ae * C46847;
    const double C47006 = C46794 * C46847;
    const double C47062 = C46795 * C46847;
    const double C46887 = C46886 * C46810;
    const double C46891 = C46802 * C46886;
    const double C46990 = C46886 * C46989;
    const double C47037 = ae * C46886;
    const double C47036 = C46795 * C46886;
    const double C1367 =
        (C46806 + ae * C46795 * C46882 +
         C46795 * (ae * C46882 + C46795 * C46813) +
         ae * (C46926 + C46795 * (C46795 * C46794 * C46847 + C46958 * ae) +
               C46795 * C46958 * ae) +
         C46794 * (ae * (C46843 + C46795 * (C46795 * C46847 + C46918 * ae) +
                         C46795 * C46918 * ae) +
                   C46794 * (C46813 + ae * C46795 * C46886 +
                             C46795 * (ae * C46886 + C46795 * C46818)))) /
        C46763;
    const double C47359 = C46794 * C46886;
    const double C46948 = C46920 * C46810;
    const double C46960 = C46802 * C46920;
    const double C47040 = C46794 * C46920;
    const double C47039 = C46920 * C46929;
    const double C47077 = C46920 * C46989;
    const double C47122 = C46795 * C46920;
    const double C47121 = C46920 * ae;
    const double C46828 = C46827 * C46810;
    const double C47022 = C46802 * C46827;
    const double C47102 = C46794 * C46827;
    const double C47125 = C46795 * C46827;
    const double C46867 = C46866 * C46810;
    const double C47023 = C46802 * C46866;
    const double C47104 = C46866 * C46929;
    const double C46906 = C46905 * C46810;
    const double C47052 = C46802 * C46905;
    const double C47160 = C46905 * C46989;
    const double C335 = (C46837 * C46838 * C46800 + ae * C46794 * C46840 +
                         C46794 * (ae * C46840 + C46794 * C46806)) /
                        C46763;
    const double C1220 = (2 * (ae * C46840 + C46794 * C46806) +
                          ae * (C46840 + C46843 * std::pow(C46794, 2)) +
                          C46794 * (C46806 + ae * C46794 * C46843 +
                                    C46794 * (ae * C46843 + C46794 * C46813))) /
                         C46763;
    const double C126 =
        (std::pow(C46799, 2) * bs[2] * C46833 + C46840 * C46810) / C46743;
    const double C129 =
        (2 * C46802 * C46840 + C46802 * (C46840 + C46843 * C46810)) / C46743;
    const double C313 = (C46794 * (C46840 + C46843 * C46810)) / C46743;
    const double C315 = (C46794 * C46802 * C46840) / C46743;
    const double C318 =
        (std::pow(C46799, 2) * bs[2] * C46833 + C46840 * C46929) / C46743;
    const double C320 = (C46802 * C46840 + C46844 * C46929) / C46743;
    const double C518 =
        (C46795 * C46802 * C46840 + C46802 * C47205 * ae) / C46743;
    const double C521 =
        (C47203 * C47204 * C46833 + C46795 * (C46795 * C46840 + C47205 * ae) +
         C46795 * C47205 * ae) /
        C46743;
    const double C976 =
        (C46795 * C46794 * C46840 + C46794 * C47205 * ae) / C46743;
    const double C1211 =
        (2 * C46794 * C46840 + C46794 * (C46840 + C46843 * C46929)) / C46743;
    const double C538 = (C46837 * C46838 * C46800 + ae * C46795 * C46879 +
                         C46795 * (ae * C46879 + C46795 * C46806)) /
                        C46763;
    const double C986 =
        (ae * (C46795 * C46840 + bs[2] * std::pow(C46799, 2) * ae) +
         C46794 * (ae * C46879 + C46795 * C46806)) /
        C46763;
    const double C127 =
        (std::pow(C46799, 2) * bs[2] * C46874 + C46879 * C46810) / C46743;
    const double C128 =
        (2 * C46802 * C46879 + C46802 * (C46879 + C46882 * C46810)) / C46743;
    const double C314 =
        (C46794 * C46802 * C46879 + C46802 * bs[2] * std::pow(C46799, 2) * ae) /
        C46743;
    const double C319 =
        (C47203 * C47204 * C46874 + C46794 * (C46794 * C46879 + C47205 * ae) +
         C46794 * C47205 * ae) /
        C46743;
    const double C515 = (C46795 * (C46879 + C46882 * C46810)) / C46743;
    const double C517 = (C46795 * C46802 * C46879) / C46743;
    const double C522 = (C47203 * C47204 * C46874 + C46879 * C46989) / C46743;
    const double C524 = (C46802 * C46879 + C46883 * C46989) / C46743;
    const double C977 = (C46795 * (C46794 * C46879 + C47205 * ae)) / C46743;
    const double C2070 =
        (2 * C46795 * C46879 + C46795 * (C46879 + C46882 * C46989)) / C46743;
    const double C1363 =
        (ae * (C46840 + C46795 * (C46795 * C46843 + C46953 * ae) +
               C46795 * C46953 * ae) +
         C46794 * (C46806 + ae * C46795 * C46882 +
                   C46795 * (ae * C46882 + C46795 * C46813))) /
        C46763;
    const double C1366 = (ae * C46879 + C46795 * C46806 +
                          ae * (C46795 * C46926 + C46794 * C46953 * ae) +
                          C46794 * (ae * (C46795 * C46843 + C46953 * ae) +
                                    C46794 * (ae * C46882 + C46795 * C46813))) /
                         C46763;
    const double C47208 = C46802 * C46953;
    const double C47212 = C46953 + C47211;
    const double C47271 = C46794 * C46953;
    const double C47270 = C46953 * ae;
    const double C47274 = C46953 + C47272;
    const double C47327 = C46795 * C46953;
    const double C47330 = C46953 + C47328;
    const double C312 = (C46794 * (C46879 + C46882 * C46810) +
                         (bs[2] * std::pow(C46799, 2) + C46953 * C46810) * ae) /
                        C46743;
    const double C516 = (C46795 * (C46840 + C46843 * C46810) +
                         (C47205 + C46953 * C46810) * ae) /
                        C46743;
    const double C1210 =
        (2 * (C46794 * C46879 + C47205 * ae) +
         C46794 * (C46879 + C46794 * (C46794 * C46882 + C46953 * ae) +
                   C46794 * C46953 * ae) +
         (C47205 + C46953 * C46929) * ae) /
        C46743;
    const double C1354 = (C46795 * (C46840 + C46843 * C46929) +
                          (C47205 + C46953 * C46929) * ae) /
                         C46743;
    const double C118 =
        2 * C46802 * C47205 + C46802 * (C47205 + C46953 * C46810);
    const double C302 = C46794 * (C47205 + C46953 * C46810);
    const double C505 = C46795 * (C47205 + C46953 * C46810);
    const double C1202 =
        2 * C46794 * C47205 + C46794 * (C47205 + C46953 * C46929);
    const double C1339 = C46795 * (C47205 + C46953 * C46929);
    const double C2062 =
        2 * C46795 * C47205 + C46795 * (C47205 + C46953 * C46989);
    const double C551 = C47838 * C536;
    const double C46820 = C46813 + C46819;
    const double C46825 = 2 * C46822;
    const double C46936 = C46794 * C46822;
    const double C46978 = C46795 * C46822;
    const double C46857 = C46847 + C46856;
    const double C46865 = 2 * C46863;
    const double C46937 = C46863 * C46929;
    const double C47021 = ae * C46863;
    const double C47020 = C46794 * C46863;
    const double C47069 = C46795 * C46863;
    const double C47013 = C46847 + C47009;
    const double C47108 = 2 * C47100;
    const double C47106 = ae * C47100;
    const double C47146 = C46795 * C47100;
    const double C46896 = C46886 + C46895;
    const double C46904 = 2 * C46902;
    const double C46994 = C46902 * C46989;
    const double C47049 = ae * C46902;
    const double C47048 = C46795 * C46902;
    const double C47370 = C46794 * C46902;
    const double C47080 = C46886 + C47078;
    const double C47131 = ae * C47123;
    const double C47173 = 2 * C47123;
    const double C46965 = C46920 + C46964;
    const double C47056 = C46794 * C47051;
    const double C47055 = C47051 * C46929;
    const double C47083 = C47051 * C46989;
    const double C47158 = C47128 * C46989;
    const double C47133 = C46920 + C47127;
    const double C47162 = C46920 + C47159;
    const double C47902 = C47866 * C47567;
    const double C47901 = C47567 * C47864;
    const double C4825 = -(C47567 * C47865) / C46743;
    const double C47592 = C47590 * C47583;
    const double C47591 = C47590 / C47585;
    const double C47601 = C47598 * C47590;
    const double C47870 = C47590 * C47586;
    const double C47909 = C47874 * C47590;
    const double C47903 = C47590 * C47867;
    const double C47672 = C47618 / C47585;
    const double C47674 = C47618 * C47671;
    const double C47681 = C47598 * C47618;
    const double C47885 = C47618 * C47673;
    const double C47915 = C47874 * C47618;
    const double C47913 = C47618 * C47879;
    const double C47714 = C47636 / C47585;
    const double C47716 = C47636 * C47713;
    const double C47723 = C47598 * C47636;
    const double C47891 = C47636 * C47715;
    const double C47918 = C47874 * C47636;
    const double C47916 = C47636 * C47881;
    const double C21701 = ((0 * ae) / C46743 - C46767 / C46763) / (2 * C46743) -
                          (0 * be) / C46743;
    const double C21700 =
        (((C47821 - (C46742 * 2 * C46767) / C46743) * ae) / C46743 -
         C46762 / C46765) /
            (2 * C46743) -
        ((C46742 * ((0 * ae) / C46743 - C46767 / C46763) + C47933) * be) /
            C46743;
    const double C21697 = C47933 / C47572;
    const double C4823 = C47932 / C46743;
    const double C21695 = C47821 / C47572 - (C47932 * C47899) / C46763;
    const double C21696 = C47932 / C46765 - (C47933 * C47899) / C46743;
    const double C42687 = ((0 * ae) / C46743 - C46783 / C46763) / (2 * C46743) -
                          (0 * be) / C46743;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C349 = C113 * C303;
    const double C552 = C113 * C506;
    const double C5002 = C113 * C305;
    const double C4994 = C113 * C316;
    const double C4992 = C113 * C304;
    const double C5646 = C113 * C971;
    const double C10500 = C10483 * C117;
    const double C10490 = C10483 * C125;
    const double C10486 = C10483 * C116;
    const double C10686 = C10483 * C303;
    const double C10880 = C10483 * C506;
    const double C26031 = C10483 * C305;
    const double C26021 = C10483 * C316;
    const double C26017 = C10483 * C304;
    const double C26647 = C10483 * C971;
    const double C10488 = C10484 * C506;
    const double C26019 = C10484 * C971;
    const double C31461 = C31444 * C117;
    const double C31451 = C31444 * C125;
    const double C31447 = C31444 * C116;
    const double C31647 = C31444 * C303;
    const double C31841 = C31444 * C506;
    const double C37295 = C31444 * C305;
    const double C37285 = C31444 * C316;
    const double C37281 = C31444 * C304;
    const double C37911 = C31444 * C971;
    const double C31449 = C31445 * C506;
    const double C37283 = C31445 * C971;
    const double C10493 = C47935 * C536;
    const double C31454 = C47935 * C536;
    const double C42686 =
        (((C47838 - (C46750 * 2 * C46783) / C46743) * ae) / C46743 -
         C46781 / C46765) /
            (2 * C46743) -
        ((C46750 * ((0 * ae) / C46743 - C46783 / C46763) + C47935) * be) /
            C46743;
    const double C42684 = C47935 / C47572;
    const double C10481 = C47934 / C46743;
    const double C42682 = C47838 / C47572 - (C47934 * C47900) / C46763;
    const double C42683 = C47934 / C46765 - (C47935 * C47900) / C46743;
    const double C31468 = C31442 * C139;
    const double C31458 = C31442 * C138;
    const double C31452 = C31442 * C137;
    const double C31448 = C31442 * C124;
    const double C31644 = C31442 * C333;
    const double C31838 = C31442 * C536;
    const double C37286 = C31442 * C334;
    const double C37282 = C31442 * C317;
    const double C46930 = C46927 + C46928;
    const double C46975 = C46973 + C46974;
    const double C159 = C47838 * C140;
    const double C31474 = C31442 * C140;
    const double C344 = C47838 * C332;
    const double C31662 = C31442 * C332;
    const double C354 = C47838 * C336;
    const double C31654 = C31442 * C336;
    const double C547 = C47838 * C535;
    const double C10495 = C47935 * C535;
    const double C31456 = C47935 * C535;
    const double C31856 = C31442 * C535;
    const double C557 = C47838 * C539;
    const double C10875 = C47935 * C539;
    const double C31848 = C31442 * C539;
    const double C31836 = C47935 * C539;
    const double C995 = C47838 * C987;
    const double C10681 = C47935 * C987;
    const double C31642 = C47935 * C987;
    const double C32366 = C31442 * C987;
    const double C46849 = C46843 + C46848;
    const double C46854 = 2 * C46852;
    const double C46935 = ae * C46852;
    const double C46934 = C46794 * C46852;
    const double C1219 = (2 * (ae * C46844 + C46794 * C46923) +
                          ae * (C46844 + C46852 * std::pow(C46794, 2)) +
                          C46794 * (C46923 + ae * C46794 * C46852 +
                                    C46794 * (ae * C46852 + C46794 * C46822))) /
                         C46763;
    const double C47333 = C46795 * C46852;
    const double C1209 =
        (2 * C46794 * C46844 + C46794 * (C46844 + C46852 * C46929)) / C46743;
    const double C46932 = C46843 + C46931;
    const double C47011 = C47007 + C47008;
    const double C47012 = 2 * C47006;
    const double C47010 = ae * C47006;
    const double C47388 = C46795 * C47006;
    const double C47065 = C47062 + C47063;
    const double C46888 = C46882 + C46887;
    const double C46893 = 2 * C46891;
    const double C46977 = ae * C46891;
    const double C46993 = C46795 * C46891;
    const double C1362 =
        (ae * (C46844 + C46795 * (C46795 * C46852 + C46951 * ae) +
               C46795 * C46951 * ae) +
         C46794 * (C46923 + ae * C46795 * C46891 +
                   C46795 * (ae * C46891 + C46795 * C46822))) /
        C46763;
    const double C47277 = C46794 * C46891;
    const double C2068 =
        (2 * C46795 * C46883 + C46795 * (C46883 + C46891 * C46989)) / C46743;
    const double C46991 = C46882 + C46990;
    const double C47042 = C47037 + C47038;
    const double C47041 = ae * C47036;
    const double C47090 = 2 * C47036;
    const double C6079 = C47838 * C1367;
    const double C27066 = C47935 * C1367;
    const double C38334 = C31442 * C1367;
    const double C38330 = C47935 * C1367;
    const double C47363 = C47359 + C47063;
    const double C46949 = C46918 + C46948;
    const double C46961 = C46794 * C46960;
    const double C46969 = 2 * C46960;
    const double C47070 = C46960 * ae;
    const double C47082 = C46795 * C46960;
    const double C47280 = C46960 * C46929;
    const double C47335 = C46960 * C46989;
    const double C47126 = 2 * C47040;
    const double C47147 = C47040 * ae;
    const double C47157 = C46795 * C47040;
    const double C47390 = C47040 * C46989;
    const double C47043 = C46918 + C47039;
    const double C47079 = C46918 + C47077;
    const double C47130 = C47122 * ae;
    const double C47171 = 2 * C47122;
    const double C47129 = C47120 + C47121;
    const double C47430 = C47426 + C47121;
    const double C46829 = C46818 + C46828;
    const double C47025 = C46794 * C47022;
    const double C47050 = C46795 * C47022;
    const double C47107 = C47101 + C47102;
    const double C47132 = C47124 + C47125;
    const double C46868 = C46855 + C46867;
    const double C47027 = C47023 * C46929;
    const double C47109 = C46855 + C47104;
    const double C46907 = C46894 + C46906;
    const double C47084 = C47052 * C46989;
    const double C47163 = C46894 + C47160;
    const double C5001 = C47838 * C335;
    const double C37292 = C31442 * C335;
    const double C5897 = C47838 * C1220;
    const double C38150 = C31442 * C1220;
    const double C149 = C47838 * C126;
    const double C31462 = C31442 * C126;
    const double C155 = C47838 * C129;
    const double C31464 = C31442 * C129;
    const double C346 = C47838 * C313;
    const double C31658 = C31442 * C313;
    const double C350 = C47838 * C315;
    const double C31648 = C31442 * C315;
    const double C5003 = C47838 * C318;
    const double C37296 = C31442 * C318;
    const double C352 = C47838 * C320;
    const double C31650 = C31442 * C320;
    const double C553 = C47838 * C518;
    const double C10489 = C47935 * C518;
    const double C31450 = C47935 * C518;
    const double C31842 = C31442 * C518;
    const double C5647 = C47838 * C976;
    const double C26020 = C47935 * C976;
    const double C37284 = C47935 * C976;
    const double C37912 = C31442 * C976;
    const double C5895 = C47838 * C1211;
    const double C38146 = C31442 * C1211;
    const double C5645 = C47838 * C986;
    const double C26024 = C47935 * C986;
    const double C37288 = C47935 * C986;
    const double C37908 = C31442 * C986;
    const double C150 = C113 * C127;
    const double C10496 = C10483 * C127;
    const double C31457 = C31444 * C127;
    const double C152 = C113 * C128;
    const double C10506 = C10483 * C128;
    const double C31467 = C31444 * C128;
    const double C347 = C113 * C314;
    const double C10682 = C10483 * C314;
    const double C31643 = C31444 * C314;
    const double C5000 = C113 * C319;
    const double C26027 = C10483 * C319;
    const double C37291 = C31444 * C319;
    const double C546 = C113 * C515;
    const double C10494 = C10484 * C515;
    const double C10894 = C10483 * C515;
    const double C31455 = C31445 * C515;
    const double C31855 = C31444 * C515;
    const double C550 = C113 * C517;
    const double C10492 = C10484 * C517;
    const double C10876 = C10483 * C517;
    const double C31453 = C31445 * C517;
    const double C31837 = C31444 * C517;
    const double C556 = C113 * C524;
    const double C10886 = C10483 * C524;
    const double C10874 = C10484 * C524;
    const double C31847 = C31444 * C524;
    const double C31835 = C31445 * C524;
    const double C5644 = C113 * C977;
    const double C26023 = C10484 * C977;
    const double C26643 = C10483 * C977;
    const double C37287 = C31445 * C977;
    const double C37907 = C31444 * C977;
    const double C6069 = C47838 * C1363;
    const double C26642 = C47935 * C1363;
    const double C37906 = C47935 * C1363;
    const double C38320 = C31442 * C1363;
    const double C6073 = C47838 * C1366;
    const double C26026 = C47935 * C1366;
    const double C37290 = C47935 * C1366;
    const double C38328 = C31442 * C1366;
    const double C321 =
        (C46802 * C46879 + C46794 * (C46794 * C46883 + C47208 * ae) +
         C46794 * C47208 * ae) /
        C46743;
    const double C523 =
        (C46802 * C46840 + C46795 * (C46795 * C46844 + C47208 * ae) +
         C46795 * C47208 * ae) /
        C46743;
    const double C978 =
        (C46795 * C46794 * C46844 + C46794 * C47208 * ae) / C46743;
    const double C979 = (C46795 * (C46794 * C46883 + C47208 * ae)) / C46743;
    const double C1208 =
        (2 * (C46794 * C46883 + C47208 * ae) +
         C46794 * (C46883 + C46794 * (C46794 * C46891 + C46951 * ae) +
                   C46794 * C46951 * ae) +
         (C47208 + C46951 * C46929) * ae) /
        C46743;
    const double C1352 = (C46795 * (C46844 + C46852 * C46929) +
                          (C47208 + C46951 * C46929) * ae) /
                         C46743;
    const double C2069 =
        (2 * (C46795 * C46844 + C47208 * ae) +
         C46795 * (C46844 + C46795 * (C46795 * C46852 + C47278) +
                   C46795 * C46951 * ae) +
         (C47208 + C46951 * C46989) * ae) /
        C46743;
    const double C306 = C46802 * C47205 + C47208 * C46929;
    const double C509 = C46802 * C47205 + C47208 * C46989;
    const double C972 = C46795 * C46794 * C47208;
    const double C1201 =
        2 * C46794 * C47208 + C46794 * (C47208 + C46951 * C46929);
    const double C1335 = C46794 * C47208 + C47279 * C46989;
    const double C1338 = C46795 * (C47208 + C46951 * C46929);
    const double C2061 =
        2 * C46795 * C47208 + C46795 * (C47208 + C46951 * C46989);
    const double C119 = 3 * (C47205 + C46953 * C46810) +
                        C46802 * (2 * C47208 + C46802 * C47212);
    const double C307 = C47205 + C46953 * C46810 + C47212 * C46929;
    const double C308 = C46794 * (2 * C47208 + C46802 * C47212);
    const double C510 = C47205 + C46953 * C46810 + C47212 * C46989;
    const double C511 = C46795 * (2 * C47208 + C46802 * C47212);
    const double C973 = C46795 * C46794 * C47212;
    const double C1348 =
        (C46794 * C46840 + C46795 * (C46795 * C46926 + C47271 * ae) +
         C46795 * C47271 * ae) /
        C46743;
    const double C2473 =
        (2 * (C46795 * C46926 + C47271 * ae) +
         C46795 * (C46926 + C46795 * (C46795 * C47006 + C46958 * ae) +
                   C46795 * C46958 * ae) +
         (C47271 + C46958 * C46989) * ae) /
        C46743;
    const double C1336 = C46794 * C47205 + C47271 * C46989;
    const double C2470 =
        2 * C46795 * C47271 + C46795 * (C47271 + C46958 * C46989);
    const double C47273 = C47269 + C47270;
    const double C47329 = C47326 + C47270;
    const double C2071 =
        (2 * (C46795 * C46840 + C47205 * ae) +
         C46795 * (C46840 + C46795 * (C46795 * C46843 + C47270) +
                   C46795 * C46953 * ae) +
         (C47205 + C46953 * C46989) * ae) /
        C46743;
    const double C1203 = 3 * (C47205 + C46953 * C46929) +
                         C46794 * (2 * C47271 + C46794 * C47274);
    const double C1340 = C47205 + C46953 * C46929 + C47274 * C46989;
    const double C1758 = C46795 * (2 * C47271 + C46794 * C47274);
    const double C2063 = 3 * (C47205 + C46953 * C46989) +
                         C46795 * (2 * C47327 + C46795 * C47330);
    const double C343 = C113 * C312;
    const double C10700 = C10483 * C312;
    const double C31661 = C31444 * C312;
    const double C549 = C47838 * C516;
    const double C10499 = C47935 * C516;
    const double C31460 = C47935 * C516;
    const double C31852 = C31442 * C516;
    const double C5896 = C113 * C1210;
    const double C26885 = C10483 * C1210;
    const double C38149 = C31444 * C1210;
    const double C6071 = C47838 * C1354;
    const double C26030 = C47935 * C1354;
    const double C37294 = C47935 * C1354;
    const double C38324 = C31442 * C1354;
    const double C154 = C113 * C118;
    const double C10502 = C10483 * C118;
    const double C31463 = C31444 * C118;
    const double C345 = C113 * C302;
    const double C10696 = C10483 * C302;
    const double C31657 = C31444 * C302;
    const double C548 = C113 * C505;
    const double C10498 = C10484 * C505;
    const double C10890 = C10483 * C505;
    const double C31459 = C31445 * C505;
    const double C31851 = C31444 * C505;
    const double C5894 = C113 * C1202;
    const double C26881 = C10483 * C1202;
    const double C38145 = C31444 * C1202;
    const double C6070 = C113 * C1339;
    const double C26029 = C10484 * C1339;
    const double C27059 = C10483 * C1339;
    const double C37293 = C31445 * C1339;
    const double C38323 = C31444 * C1339;
    const double C141 =
        (4 * (2 * C46802 * C46813 + C46802 * C46820) +
         C46802 * (3 * C46820 +
                   C46802 * (2 * C46802 * C46818 +
                             C46802 * (C46818 + std::pow(C46808, 7) * bs[7] *
                                                    C46800 * C46810)))) /
        C46763;
    const double C46858 = C46802 * C46857;
    const double C46862 = 3 * C46857;
    const double C46942 = ae * C46857;
    const double C46941 = C46794 * C46857;
    const double C47340 = C46795 * C46857;
    const double C46939 = C46852 + C46937;
    const double C47026 = 2 * C47020;
    const double C47024 = ae * C47020;
    const double C47395 = C46795 * C47020;
    const double C47016 = C46794 * C47013;
    const double C47103 = 3 * C47013;
    const double C47099 = ae * C47013;
    const double C47443 = C46795 * C47013;
    const double C47110 = C46818 + C47106;
    const double C46897 = C46802 * C46896;
    const double C46901 = 3 * C46896;
    const double C46981 = ae * C46896;
    const double C46997 = C46795 * C46896;
    const double C47285 = C46794 * C46896;
    const double C46995 = C46891 + C46994;
    const double C47053 = ae * C47048;
    const double C47094 = 2 * C47048;
    const double C47091 = C46795 * C47080;
    const double C47166 = ae * C47080;
    const double C47178 = 3 * C47080;
    const double C47135 = C46818 + C47131;
    const double C46966 = C46794 * C46965;
    const double C46970 = C46802 * C46965;
    const double C47288 = C46965 * C46929;
    const double C47342 = C46965 * C46989;
    const double C47397 = C47056 * C46989;
    const double C47059 = C46960 + C47055;
    const double C47085 = C46960 + C47083;
    const double C47161 = C47040 + C47158;
    const double C47137 = C46794 * C47133;
    const double C47445 = C47133 * C46989;
    const double C47172 = C46795 * C47162;
    const double C105 = C47902 / C47572;
    const double C103 = C47567 / C47572 - (C47901 * C47865) / C46763;
    const double C104 = C47901 / C46765 - (C47902 * C47865) / C46743;
    const double C16183 = C47901 / C46743;
    const double C47593 = C47592 * C47586;
    const double C47600 = C47592 / C47599;
    const double C47871 = C47598 * C47592;
    const double C47869 = C47592 / C47581;
    const double C299 = (C47590 * std::pow(C47586, 2)) / C47584 + C47591;
    const double C47602 = C47601 * C47586;
    const double C47875 = C47583 * C47601;
    const double C47873 = 2 * C47601;
    const double C47919 = C47601 / C47877;
    const double C112 = C47601 / C47912;
    const double C2951 = C47601 / C47585;
    const double C47905 = C47870 / C47581;
    const double C300 = (-2 * C47598 * C47870) / C47581;
    const double C47936 = C47903 / C47584;
    const double C1126 = (C47618 * std::pow(C47673, 2)) / C47584 + C47672;
    const double C47675 = C47674 * C47673;
    const double C47680 = C47674 / C47599;
    const double C47883 = C47674 / C47581;
    const double C47880 = C47598 * C47674;
    const double C47682 = C47681 * C47673;
    const double C47889 = C47671 * C47681;
    const double C47888 = 2 * C47681;
    const double C47925 = C47681 / C47877;
    const double C1198 = C47681 / C47912;
    const double C2948 = C47681 / C47585;
    const double C47921 = C47885 / C47581;
    const double C1127 = (-2 * C47598 * C47885) / C47581;
    const double C47941 = C47913 / C47584;
    const double C1880 = (C47636 * std::pow(C47715, 2)) / C47584 + C47714;
    const double C47717 = C47716 * C47715;
    const double C47722 = C47716 / C47599;
    const double C47884 = C47716 / C47581;
    const double C47882 = C47598 * C47716;
    const double C47724 = C47723 * C47715;
    const double C47895 = C47713 * C47723;
    const double C47894 = 2 * C47723;
    const double C47931 = C47723 / C47877;
    const double C2059 = C47723 / C47912;
    const double C3850 = C47723 / C47585;
    const double C47927 = C47891 / C47581;
    const double C1881 = (-2 * C47598 * C47891) / C47581;
    const double C47943 = C47916 / C47584;
    const double C21699 =
        (((0 - (C46742 * C46762) / C46743) * ae) / C46743 - (0 * be) / C46765) /
            (2 * C46743) -
        ((C46742 * (((C47821 - (C46742 * 2 * C46767) / C46743) * ae) / C46743 -
                    C46762 / C46765) +
          C4823) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46767 / C46763;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C5017 = C4994 + C4995;
    const double C5016 = C4992 + C4993;
    const double C10513 = C10481 * C140;
    const double C10507 = C10481 * C139;
    const double C10503 = C10481 * C129;
    const double C10501 = C10481 * C126;
    const double C10497 = C10481 * C138;
    const double C10491 = C10481 * C137;
    const double C10487 = C10481 * C124;
    const double C10701 = C10481 * C332;
    const double C10697 = C10481 * C313;
    const double C10693 = C10481 * C336;
    const double C10689 = C10481 * C320;
    const double C10687 = C10481 * C315;
    const double C10683 = C10481 * C333;
    const double C10895 = C10481 * C535;
    const double C10891 = C10481 * C516;
    const double C10887 = C10481 * C539;
    const double C10881 = C10481 * C518;
    const double C10877 = C10481 * C536;
    const double C11405 = C10481 * C987;
    const double C26032 = C10481 * C318;
    const double C26028 = C10481 * C335;
    const double C26022 = C10481 * C334;
    const double C26018 = C10481 * C317;
    const double C26648 = C10481 * C976;
    const double C26644 = C10481 * C986;
    const double C26886 = C10481 * C1220;
    const double C26882 = C10481 * C1211;
    const double C27070 = C10481 * C1367;
    const double C27064 = C10481 * C1366;
    const double C27060 = C10481 * C1354;
    const double C27056 = C10481 * C1363;
    const double C42685 =
        (((0 - (C46750 * C46781) / C46743) * ae) / C46743 - (0 * be) / C46765) /
            (2 * C46743) -
        ((C46750 * (((C47838 - (C46750 * 2 * C46783) / C46743) * ae) / C46743 -
                    C46781 / C46765) +
          C10481) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46783 / C46763;
    const double C31481 = C31451 + C31452;
    const double C31479 = C31447 + C31448;
    const double C37299 = C37285 + C37286;
    const double C37297 = C37281 + C37282;
    const double C2080 =
        (2 * (ae * C46879 + C46795 * C46806) +
         ae * (C46879 + C46882 * std::pow(C46795, 2)) +
         C46795 * (C46806 + ae * C46795 * C46882 + C46795 * C46975)) /
        C46763;
    const double C337 = (C46806 + C46813 * C46810 + ae * C46794 * C46849 +
                         C46794 * (ae * C46849 + C46794 * C46820)) /
                        C46763;
    const double C338 = (ae * (2 * C46844 + C46802 * C46849) +
                         C46794 * (2 * C46802 * C46813 + C46802 * C46820)) /
                        C46763;
    const double C130 = (3 * (C46840 + C46843 * C46810) +
                         C46802 * (2 * C46844 + C46802 * C46849)) /
                        C46743;
    const double C322 = (C46840 + C46843 * C46810 + C46849 * C46929) / C46743;
    const double C324 = (C46794 * (2 * C46844 + C46802 * C46849)) / C46743;
    const double C525 =
        (C46840 + C46843 * C46810 + C46795 * (C46795 * C46849 + C47212 * ae) +
         C46795 * C47212 * ae) /
        C46743;
    const double C527 = (C46795 * (2 * C46844 + C46802 * C46849) +
                         (2 * C47208 + C46802 * C47212) * ae) /
                        C46743;
    const double C980 =
        (C46795 * C46794 * C46849 + C46794 * C47212 * ae) / C46743;
    const double C1207 =
        (2 * C46794 * C46849 + C46794 * (C46849 + C46857 * C46929)) / C46743;
    const double C46938 = C46935 + C46936;
    const double C1365 = (ae * C46883 + C46795 * C46923 +
                          ae * (C46795 * C46934 + C46794 * C46951 * ae) +
                          C46794 * (ae * (C46795 * C46852 + C46951 * ae) +
                                    C46794 * (ae * C46891 + C46795 * C46822))) /
                         C46763;
    const double C1346 =
        (C46794 * C46844 + C46795 * (C46795 * C46934 + C47279 * ae) +
         C46795 * C47279 * ae) /
        C46743;
    const double C1484 = C47838 * C1219;
    const double C11931 = C10481 * C1219;
    const double C32892 = C31442 * C1219;
    const double C47336 = C47333 + C47278;
    const double C1486 = C47838 * C1209;
    const double C11935 = C10481 * C1209;
    const double C32896 = C31442 * C1209;
    const double C1221 =
        (3 * (C46806 + ae * C46926 + C46794 * C46930) +
         ae * (2 * C46926 + C46794 * C46932) +
         C46794 * (2 * C46930 + ae * C46932 +
                   C46794 * (C46813 + ae * C46794 * C46847 +
                             C46794 * (ae * C46847 + C46794 * C46818)))) /
        C46763;
    const double C1767 =
        (2 * (ae * (C46795 * C46843 + C46953 * ae) + C46794 * C46975) +
         ae * (C46795 * C46932 + (C46953 + C46918 * C46929) * ae) +
         C46794 * (C46975 + ae * (C46795 * C46794 * C46847 + C46958 * ae) +
                   C46794 * (ae * (C46795 * C46847 + C46918 * ae) +
                             C46794 * (ae * C46886 + C46795 * C46818)))) /
        C46763;
    const double C1212 = (3 * (C46840 + C46843 * C46929) +
                          C46794 * (2 * C46926 + C46794 * C46932)) /
                         C46743;
    const double C1355 =
        (C46840 + C46843 * C46929 + C46795 * (C46795 * C46932 + C47274 * ae) +
         C46795 * C47274 * ae) /
        C46743;
    const double C1761 = (C46795 * (2 * C46926 + C46794 * C46932) +
                          (2 * C47271 + C46794 * C47274) * ae) /
                         C46743;
    const double C47015 = C46794 * C47011;
    const double C47098 = 2 * C47011;
    const double C47014 = C46813 + C47010;
    const double C47391 = C47388 + C47360;
    const double C47066 = ae * C47065;
    const double C47406 = C46795 * C47065;
    const double C47463 = 2 * C47065;
    const double C540 = (C46806 + C46813 * C46810 + ae * C46795 * C46888 +
                         C46795 * (ae * C46888 + C46795 * C46820)) /
                        C46763;
    const double C541 = (ae * (2 * C46883 + C46802 * C46888) +
                         C46795 * (2 * C46802 * C46813 + C46802 * C46820)) /
                        C46763;
    const double C988 =
        (ae * (C46795 * C46849 +
               (C46838 * C46837 + C46804 * C46803 * C46810) * ae) +
         C46794 * (ae * C46888 + C46795 * C46820)) /
        C46763;
    const double C131 = (3 * (C46879 + C46882 * C46810) +
                         C46802 * (2 * C46883 + C46802 * C46888)) /
                        C46743;
    const double C323 =
        (C46879 + C46882 * C46810 + C46794 * (C46794 * C46888 + C47212 * ae) +
         C46794 * C47212 * ae) /
        C46743;
    const double C325 = (C46794 * (2 * C46883 + C46802 * C46888) +
                         (2 * C47208 + C46802 * C47212) * ae) /
                        C46743;
    const double C526 = (C46879 + C46882 * C46810 + C46888 * C46989) / C46743;
    const double C528 = (C46795 * (2 * C46883 + C46802 * C46888)) / C46743;
    const double C981 = (C46795 * (C46794 * C46888 + C47212 * ae)) / C46743;
    const double C2066 =
        (2 * C46795 * C46888 + C46795 * (C46888 + C46896 * C46989)) / C46743;
    const double C46979 = C46977 + C46978;
    const double C2240 = C47838 * C1362;
    const double C11407 = C47935 * C1362;
    const double C12855 = C10481 * C1362;
    const double C32368 = C47935 * C1362;
    const double C33808 = C31442 * C1362;
    const double C47281 = C47277 + C47278;
    const double C2361 = C113 * C2068;
    const double C10888 = C10484 * C2068;
    const double C12996 = C10483 * C2068;
    const double C31849 = C31445 * C2068;
    const double C33949 = C31444 * C2068;
    const double C2081 =
        (3 * (C46806 + ae * C46988 + C46795 * C46975) +
         ae * (2 * C46988 + C46795 * C46991) +
         C46795 * (2 * C46975 + ae * C46991 +
                   C46795 * (C46813 + ae * C46795 * C46886 +
                             C46795 * (ae * C46886 + C46795 * C46818)))) /
        C46763;
    const double C2479 =
        (ae * (2 * (C46795 * C46843 + C46953 * ae) +
               C46795 * (C46843 + C46795 * (C46795 * C46847 + C46918 * ae) +
                         C46795 * C46918 * ae) +
               (C46953 + C46918 * C46989) * ae) +
         C46794 * (2 * C46975 + ae * C46991 +
                   C46795 * (C46813 + ae * C46795 * C46886 +
                             C46795 * (ae * C46886 + C46795 * C46818)))) /
        C46763;
    const double C2073 = (3 * (C46879 + C46882 * C46989) +
                          C46795 * (2 * C46988 + C46795 * C46991)) /
                         C46743;
    const double C47045 = C46795 * C47042;
    const double C47064 = C46794 * C47042;
    const double C47165 = 2 * C47042;
    const double C47044 = C46813 + C47041;
    const double C47365 = C46794 * C47363;
    const double C47425 = 2 * C47363;
    const double C47217 = C46802 * C46949;
    const double C47224 = 3 * C46949;
    const double C47287 = C46794 * C46949;
    const double C47286 = C46949 * ae;
    const double C47341 = C46795 * C46949;
    const double C1206 =
        (2 * (C46794 * C46888 + C47212 * ae) +
         C46794 * (C46888 + C46794 * (C46794 * C46896 + C46949 * ae) +
                   C46794 * C46949 * ae) +
         (C47212 + C46949 * C46929) * ae) /
        C46743;
    const double C1350 = (C46795 * (C46849 + C46857 * C46929) +
                          (C47212 + C46949 * C46929) * ae) /
                         C46743;
    const double C1200 =
        2 * C46794 * C47212 + C46794 * (C47212 + C46949 * C46929);
    const double C1337 = C46795 * (C47212 + C46949 * C46929);
    const double C2060 =
        2 * C46795 * C47212 + C46795 * (C47212 + C46949 * C46989);
    const double C1368 =
        (C46923 + ae * C46795 * C46891 +
         C46795 * (ae * C46891 + C46795 * C46822) +
         ae * (C46934 + C46795 * (C46795 * C46794 * C46863 + C46961 * ae) +
               C46795 * C46961 * ae) +
         C46794 *
             (ae * (C46852 + C46795 * (C46795 * C46863 + C46960 * ae) +
                    C46795 * C46960 * ae) +
              C46794 * (C46822 + ae * C46795 * C46902 +
                        C46795 * (ae * C46902 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C47372 = 2 * C46961;
    const double C47371 = C46961 * ae;
    const double C47396 = C46795 * C46961;
    const double C2475 =
        (2 * (C46795 * C46934 + C47279 * ae) +
         C46795 * (C46934 + C46795 * (C46795 * C47020 + C46961 * ae) +
                   C46795 * C46961 * ae) +
         (C47279 + C46961 * C46989) * ae) /
        C46743;
    const double C2471 =
        2 * C46795 * C47279 + C46795 * (C47279 + C46961 * C46989);
    const double C47072 = C47069 + C47070;
    const double C47374 = C47370 + C47070;
    const double C47417 = 2 * C47082;
    const double C47416 = C47082 * ae;
    const double C47282 = C46951 + C47280;
    const double C47337 = C46951 + C47335;
    const double C47150 = C47146 + C47147;
    const double C47454 = 2 * C47157;
    const double C47453 = C47157 * ae;
    const double C47392 = C46958 + C47390;
    const double C47362 = C46794 * C47043;
    const double C47428 = 3 * C47043;
    const double C47427 = C47043 * ae;
    const double C47444 = C46795 * C47043;
    const double C7423 =
        (2 * (C46795 * C46932 + C47274 * ae) +
         C46795 * (C46932 + C46795 * (C46795 * C47013 + C47043 * ae) +
                   C46795 * C47043 * ae) +
         (C47274 + C47043 * C46989) * ae) /
        C46743;
    const double C7421 =
        2 * C46795 * C47274 + C46795 * (C47274 + C47043 * C46989);
    const double C47409 = C46795 * C47079;
    const double C47466 = 3 * C47079;
    const double C47465 = C47079 * ae;
    const double C47134 = C46795 * C47129;
    const double C47148 = ae * C47129;
    const double C47432 = C46794 * C47430;
    const double C47460 = C47430 * C46989;
    const double C46830 = C46802 * C46829;
    const double C46943 = C46794 * C46829;
    const double C46982 = C46795 * C46829;
    const double C1218 = (2 * (ae * C46849 + C46794 * C46820) +
                          ae * (C46849 + C46857 * std::pow(C46794, 2)) +
                          C46794 * (C46820 + ae * C46794 * C46857 +
                                    C46794 * (ae * C46857 + C46794 * C46829))) /
                         C46763;
    const double C1361 =
        (ae * (C46849 + C46795 * (C46795 * C46857 + C46949 * ae) +
               C46795 * C46949 * ae) +
         C46794 * (C46820 + ae * C46795 * C46896 +
                   C46795 * (ae * C46896 + C46795 * C46829))) /
        C46763;
    const double C47029 = C47021 + C47025;
    const double C47054 = C47049 + C47050;
    const double C47111 = C46794 * C47107;
    const double C47136 = C46795 * C47132;
    const double C47149 = C46794 * C47132;
    const double C46869 = C46802 * C46868;
    const double C46944 = C46868 * C46929;
    const double C47030 = C46863 + C47027;
    const double C47112 = C46794 * C47109;
    const double C46908 = C46802 * C46907;
    const double C46998 = C46907 * C46989;
    const double C47086 = C46902 + C47084;
    const double C47174 = C46795 * C47163;
    const double C166 = C148 + C149;
    const double C31486 = C31461 + C31462;
    const double C370 = C349 + C350;
    const double C31676 = C31647 + C31648;
    const double C5019 = C5002 + C5003;
    const double C37304 = C37295 + C37296;
    const double C573 = C552 + C553;
    const double C10519 = C10488 + C10489;
    const double C31480 = C31449 + C31450;
    const double C31870 = C31841 + C31842;
    const double C5657 = C5646 + C5647;
    const double C26034 = C26019 + C26020;
    const double C37298 = C37283 + C37284;
    const double C37916 = C37911 + C37912;
    const double C167 = C150 + C151;
    const double C31484 = C31457 + C31458;
    const double C168 = C152 + C153;
    const double C31489 = C31467 + C31468;
    const double C369 = C347 + C348;
    const double C31674 = C31643 + C31644;
    const double C5018 = C5000 + C5001;
    const double C37302 = C37291 + C37292;
    const double C570 = C546 + C547;
    const double C10522 = C10494 + C10495;
    const double C31483 = C31455 + C31456;
    const double C31877 = C31855 + C31856;
    const double C572 = C550 + C551;
    const double C10521 = C10492 + C10493;
    const double C31482 = C31453 + C31454;
    const double C31868 = C31837 + C31838;
    const double C575 = C556 + C557;
    const double C10906 = C10874 + C10875;
    const double C31873 = C31847 + C31848;
    const double C31867 = C31835 + C31836;
    const double C5656 = C5644 + C5645;
    const double C26036 = C26023 + C26024;
    const double C37300 = C37287 + C37288;
    const double C37914 = C37907 + C37908;
    const double C353 = C113 * C321;
    const double C10692 = C10483 * C321;
    const double C31653 = C31444 * C321;
    const double C555 = C47838 * C523;
    const double C10883 = C10481 * C523;
    const double C10879 = C47935 * C523;
    const double C31844 = C31442 * C523;
    const double C31840 = C47935 * C523;
    const double C993 = C47838 * C978;
    const double C10685 = C47935 * C978;
    const double C11401 = C10481 * C978;
    const double C31646 = C47935 * C978;
    const double C32362 = C31442 * C978;
    const double C994 = C113 * C979;
    const double C10680 = C10484 * C979;
    const double C11404 = C10483 * C979;
    const double C31641 = C31445 * C979;
    const double C32365 = C31444 * C979;
    const double C1483 = C113 * C1208;
    const double C11930 = C10483 * C1208;
    const double C32891 = C31444 * C1208;
    const double C1652 = C47838 * C1352;
    const double C10691 = C47935 * C1352;
    const double C12141 = C10481 * C1352;
    const double C31652 = C47935 * C1352;
    const double C33102 = C31442 * C1352;
    const double C2364 = C47838 * C2069;
    const double C10885 = C47935 * C2069;
    const double C13001 = C10481 * C2069;
    const double C31846 = C47935 * C2069;
    const double C33954 = C31442 * C2069;
    const double C351 = C113 * C306;
    const double C10688 = C10483 * C306;
    const double C31649 = C31444 * C306;
    const double C554 = C113 * C509;
    const double C10882 = C10483 * C509;
    const double C10878 = C10484 * C509;
    const double C31843 = C31444 * C509;
    const double C31839 = C31445 * C509;
    const double C992 = C113 * C972;
    const double C10684 = C10484 * C972;
    const double C11400 = C10483 * C972;
    const double C31645 = C31445 * C972;
    const double C32361 = C31444 * C972;
    const double C1485 = C113 * C1201;
    const double C11934 = C10483 * C1201;
    const double C32895 = C31444 * C1201;
    const double C2241 = C113 * C1335;
    const double C11402 = C10484 * C1335;
    const double C12858 = C10483 * C1335;
    const double C32363 = C31445 * C1335;
    const double C33811 = C31444 * C1335;
    const double C1651 = C113 * C1338;
    const double C10690 = C10484 * C1338;
    const double C12140 = C10483 * C1338;
    const double C31651 = C31445 * C1338;
    const double C33101 = C31444 * C1338;
    const double C2363 = C113 * C2061;
    const double C10884 = C10484 * C2061;
    const double C13000 = C10483 * C2061;
    const double C31845 = C31445 * C2061;
    const double C33953 = C31444 * C2061;
    const double C156 = C113 * C119;
    const double C10516 = C10483 * C119;
    const double C31477 = C31444 * C119;
    const double C355 = C113 * C307;
    const double C10710 = C10483 * C307;
    const double C31671 = C31444 * C307;
    const double C359 = C113 * C308;
    const double C11058 = C10483 * C308;
    const double C32019 = C31444 * C308;
    const double C558 = C113 * C510;
    const double C10904 = C10483 * C510;
    const double C10892 = C10484 * C510;
    const double C31865 = C31444 * C510;
    const double C31853 = C31445 * C510;
    const double C562 = C113 * C511;
    const double C10504 = C10484 * C511;
    const double C11200 = C10483 * C511;
    const double C31465 = C31445 * C511;
    const double C32161 = C31444 * C511;
    const double C996 = C113 * C973;
    const double C10698 = C10484 * C973;
    const double C11414 = C10483 * C973;
    const double C31659 = C31445 * C973;
    const double C32375 = C31444 * C973;
    const double C6067 = C47838 * C1348;
    const double C26646 = C47935 * C1348;
    const double C27052 = C10481 * C1348;
    const double C37910 = C47935 * C1348;
    const double C38316 = C31442 * C1348;
    const double C7433 = C47838 * C2473;
    const double C27054 = C47935 * C2473;
    const double C28392 = C10481 * C2473;
    const double C38318 = C47935 * C2473;
    const double C39652 = C31442 * C2473;
    const double C6066 = C113 * C1336;
    const double C26645 = C10484 * C1336;
    const double C27051 = C10483 * C1336;
    const double C37909 = C31445 * C1336;
    const double C38315 = C31444 * C1336;
    const double C7432 = C113 * C2470;
    const double C27053 = C10484 * C2470;
    const double C28391 = C10483 * C2470;
    const double C38317 = C31445 * C2470;
    const double C39651 = C31444 * C2470;
    const double C1213 =
        (3 * (C46879 + C46794 * C47273 + C47271 * ae) +
         C46794 * (2 * C47273 +
                   C46794 * (C46882 + C46794 * (C46794 * C46886 + C47063) +
                             C46958 * ae) +
                   C47274 * ae) +
         (2 * C47271 + C46794 * C47274) * ae) /
        C46743;
    const double C1347 =
        (C46794 * C46879 + C47205 * ae + C47273 * C46989) / C46743;
    const double C1353 =
        (C46795 * (C46879 + C46794 * C47273 + C47271 * ae)) / C46743;
    const double C1356 =
        (C46879 + C46794 * C47273 + C47271 * ae +
         (C46882 + C46794 * (C46794 * C46886 + C47063) + C46958 * ae) *
             C46989) /
        C46743;
    const double C1762 =
        (C46795 * (2 * C47273 +
                   C46794 * (C46882 + C46794 * (C46794 * C46886 + C47063) +
                             C46958 * ae) +
                   C47274 * ae)) /
        C46743;
    const double C2474 =
        (2 * C46795 * C47273 +
         C46795 * (C47273 + (C46794 * C46886 + C47063) * C46989)) /
        C46743;
    const double C6948 =
        (3 * (C47273 + C47363 * C46989) +
         C46795 * (2 * C46795 * C47363 +
                   C46795 * (C47363 + (C46794 * C46894 + C47121) * C46989))) /
        C46743;
    const double C2072 =
        (3 * (C46840 + C46795 * C47329 + C47327 * ae) +
         C46795 *
             (2 * C47329 + C46795 * (C46843 + C46795 * C47065 + C47076 * ae) +
              C47330 * ae) +
         (2 * C47327 + C46795 * C47330) * ae) /
        C46743;
    const double C5904 = C113 * C1203;
    const double C26895 = C10483 * C1203;
    const double C38159 = C31444 * C1203;
    const double C6080 = C113 * C1340;
    const double C27073 = C10483 * C1340;
    const double C27061 = C10484 * C1340;
    const double C38337 = C31444 * C1340;
    const double C38325 = C31445 * C1340;
    const double C6568 = C113 * C1758;
    const double C26883 = C10484 * C1758;
    const double C27547 = C10483 * C1758;
    const double C38147 = C31445 * C1758;
    const double C38811 = C31444 * C1758;
    const double C367 = C343 + C344;
    const double C31683 = C31661 + C31662;
    const double C5907 = C5896 + C5897;
    const double C38163 = C38149 + C38150;
    const double C169 = C154 + C155;
    const double C31487 = C31463 + C31464;
    const double C368 = C345 + C346;
    const double C31681 = C31657 + C31658;
    const double C571 = C548 + C549;
    const double C10524 = C10498 + C10499;
    const double C31485 = C31459 + C31460;
    const double C31875 = C31851 + C31852;
    const double C5906 = C5894 + C5895;
    const double C38161 = C38145 + C38146;
    const double C6084 = C6070 + C6071;
    const double C26039 = C26029 + C26030;
    const double C37303 = C37293 + C37294;
    const double C38343 = C38323 + C38324;
    const double C161 = C47838 * C141;
    const double C46859 = C46854 + C46858;
    const double C1364 = (ae * C46888 + C46795 * C46820 +
                          ae * (C46795 * C46941 + C46794 * C46949 * ae) +
                          C46794 * (ae * (C46795 * C46857 + C46949 * ae) +
                                    C46794 * (ae * C46896 + C46795 * C46829))) /
                         C46763;
    const double C1214 = (3 * (C46844 + C46852 * C46929) +
                          C46794 * (2 * C46934 + C46794 * C46939)) /
                         C46743;
    const double C47028 = C46822 + C47024;
    const double C47018 = C47012 + C47016;
    const double C46898 = C46893 + C46897;
    const double C2075 = (3 * (C46883 + C46891 * C46989) +
                          C46795 * (2 * C46993 + C46795 * C46995)) /
                         C46743;
    const double C47057 = C46822 + C47053;
    const double C47092 = C47090 + C47091;
    const double C1369 =
        (C46820 + ae * C46795 * C46896 +
         C46795 * (ae * C46896 + C46795 * C46829) +
         ae * (C46941 + C46795 * (C46795 * C46794 * C46868 + C46966 * ae) +
               C46795 * C46966 * ae) +
         C46794 * (ae * (C46857 + C46795 * (C46795 * C46868 + C46965 * ae) +
                         C46795 * C46965 * ae) +
                   C46794 * (C46829 + ae * C46795 * C46907 +
                             C46795 * (ae * C46907 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C46971 = C46969 + C46970;
    const double C47290 = C46949 + C47288;
    const double C47344 = C46949 + C47342;
    const double C47399 = C46961 + C47397;
    const double C47373 = C46794 * C47059;
    const double C47418 = C46795 * C47085;
    const double C47455 = C46795 * C47161;
    const double C47140 = C47126 + C47137;
    const double C47447 = C47043 + C47445;
    const double C47175 = C47171 + C47172;
    const double C47594 = C47593 / C47584;
    const double C47906 = 2 * C47871;
    const double C47603 = C47602 / C47581;
    const double C47910 = C47875 / C47599;
    const double C47937 = C47869 - C47905;
    const double C2688 = -C47905;
    const double C47951 = C47936 + C47591;
    const double C47676 = C47675 / C47584;
    const double C47914 = 2 * C47880;
    const double C47683 = C47682 / C47581;
    const double C47924 = C47889 / C47599;
    const double C47945 = C47883 - C47921;
    const double C2580 = -C47921;
    const double C47954 = C47941 + C47672;
    const double C47718 = C47717 / C47584;
    const double C47917 = 2 * C47882;
    const double C47725 = C47724 / C47581;
    const double C47930 = C47895 / C47599;
    const double C47948 = C47884 - C47927;
    const double C3342 = -C47927;
    const double C47955 = C47943 + C47714;
    const double C175 = C165 * C47821;
    const double C4831 = C165 * C4823;
    const double C16189 = C165 * C16181;
    const double C174 = C164 * C114;
    const double C4830 = C164 * C4827;
    const double C16188 = C164 * C16185;
    const double C10528 = C10506 + C10507;
    const double C10526 = C10502 + C10503;
    const double C10525 = C10500 + C10501;
    const double C10523 = C10496 + C10497;
    const double C10520 = C10490 + C10491;
    const double C10518 = C10486 + C10487;
    const double C10722 = C10700 + C10701;
    const double C10720 = C10696 + C10697;
    const double C10715 = C10686 + C10687;
    const double C10713 = C10682 + C10683;
    const double C10916 = C10894 + C10895;
    const double C10914 = C10890 + C10891;
    const double C10912 = C10886 + C10887;
    const double C10909 = C10880 + C10881;
    const double C10907 = C10876 + C10877;
    const double C26040 = C26031 + C26032;
    const double C26038 = C26027 + C26028;
    const double C26035 = C26021 + C26022;
    const double C26033 = C26017 + C26018;
    const double C26652 = C26647 + C26648;
    const double C26650 = C26643 + C26644;
    const double C26899 = C26885 + C26886;
    const double C26897 = C26881 + C26882;
    const double C27079 = C27059 + C27060;
    const double C358 = C47838 * C337;
    const double C10707 = C10481 * C337;
    const double C31668 = C31442 * C337;
    const double C362 = C47838 * C338;
    const double C11055 = C10481 * C338;
    const double C32016 = C31442 * C338;
    const double C157 = C47838 * C130;
    const double C10517 = C10481 * C130;
    const double C31478 = C31442 * C130;
    const double C356 = C47838 * C322;
    const double C10711 = C10481 * C322;
    const double C31672 = C31442 * C322;
    const double C360 = C47838 * C324;
    const double C11059 = C10481 * C324;
    const double C32020 = C31442 * C324;
    const double C559 = C47838 * C525;
    const double C10905 = C10481 * C525;
    const double C10893 = C47935 * C525;
    const double C31866 = C31442 * C525;
    const double C31854 = C47935 * C525;
    const double C563 = C47838 * C527;
    const double C10505 = C47935 * C527;
    const double C11201 = C10481 * C527;
    const double C31466 = C47935 * C527;
    const double C32162 = C31442 * C527;
    const double C997 = C47838 * C980;
    const double C10699 = C47935 * C980;
    const double C11415 = C10481 * C980;
    const double C31660 = C47935 * C980;
    const double C32376 = C31442 * C980;
    const double C1482 = C47838 * C1207;
    const double C1222 =
        (3 * (C46923 + ae * C46934 + C46794 * C46938) +
         ae * (2 * C46934 + C46794 * C46939) +
         C46794 *
             (2 * C46938 + ae * C46939 +
              C46794 * (C46822 + ae * C46794 * C46863 +
                        C46794 * (ae * C46863 + C46794 * C46802 * C46827)))) /
        C46763;
    const double C1650 = C47838 * C1365;
    const double C10695 = C47935 * C1365;
    const double C12137 = C10481 * C1365;
    const double C31656 = C47935 * C1365;
    const double C33098 = C31442 * C1365;
    const double C2242 = C47838 * C1346;
    const double C11403 = C47935 * C1346;
    const double C12859 = C10481 * C1346;
    const double C32364 = C47935 * C1346;
    const double C33812 = C31442 * C1346;
    const double C5903 = C47838 * C1221;
    const double C26892 = C10481 * C1221;
    const double C38156 = C31442 * C1221;
    const double C6567 = C47838 * C1767;
    const double C26888 = C47935 * C1767;
    const double C27544 = C10481 * C1767;
    const double C38152 = C47935 * C1767;
    const double C38808 = C31442 * C1767;
    const double C5905 = C47838 * C1212;
    const double C26896 = C10481 * C1212;
    const double C38160 = C31442 * C1212;
    const double C6081 = C47838 * C1355;
    const double C27074 = C10481 * C1355;
    const double C27062 = C47935 * C1355;
    const double C38338 = C31442 * C1355;
    const double C38326 = C47935 * C1355;
    const double C6569 = C47838 * C1761;
    const double C26884 = C47935 * C1761;
    const double C27548 = C10481 * C1761;
    const double C38148 = C47935 * C1761;
    const double C38812 = C31442 * C1761;
    const double C47105 = C47098 + C47099;
    const double C47017 = C47014 + C47015;
    const double C47410 = C46843 + C47406;
    const double C561 = C47838 * C540;
    const double C10901 = C10481 * C540;
    const double C10897 = C47935 * C540;
    const double C31862 = C31442 * C540;
    const double C31858 = C47935 * C540;
    const double C565 = C47838 * C541;
    const double C10509 = C47935 * C541;
    const double C11197 = C10481 * C541;
    const double C31470 = C47935 * C541;
    const double C32158 = C31442 * C541;
    const double C999 = C47838 * C988;
    const double C10703 = C47935 * C988;
    const double C11411 = C10481 * C988;
    const double C31664 = C47935 * C988;
    const double C32372 = C31442 * C988;
    const double C158 = C113 * C131;
    const double C10512 = C10483 * C131;
    const double C31473 = C31444 * C131;
    const double C357 = C113 * C323;
    const double C10706 = C10483 * C323;
    const double C31667 = C31444 * C323;
    const double C361 = C113 * C325;
    const double C11054 = C10483 * C325;
    const double C32015 = C31444 * C325;
    const double C560 = C113 * C526;
    const double C10900 = C10483 * C526;
    const double C10896 = C10484 * C526;
    const double C31861 = C31444 * C526;
    const double C31857 = C31445 * C526;
    const double C564 = C113 * C528;
    const double C10508 = C10484 * C528;
    const double C11196 = C10483 * C528;
    const double C31469 = C31445 * C528;
    const double C32157 = C31444 * C528;
    const double C998 = C113 * C981;
    const double C10702 = C10484 * C981;
    const double C11410 = C10483 * C981;
    const double C31663 = C31445 * C981;
    const double C32371 = C31444 * C981;
    const double C2357 = C113 * C2066;
    const double C10898 = C10484 * C2066;
    const double C31859 = C31445 * C2066;
    const double C1768 =
        (2 * (ae * (C46795 * C46852 + C46951 * ae) + C46794 * C46979) +
         ae * (C46795 * C46939 + (C46951 + C46960 * C46929) * ae) +
         C46794 *
             (C46979 + ae * (C46795 * C46794 * C46863 + C46961 * ae) +
              C46794 * (ae * (C46795 * C46863 + C46960 * ae) +
                        C46794 * (ae * C46902 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C2079 =
        (2 * (ae * C46883 + C46795 * C46923) +
         ae * (C46883 + C46891 * std::pow(C46795, 2)) +
         C46795 * (C46923 + ae * C46795 * C46891 + C46795 * C46979)) /
        C46763;
    const double C2082 =
        (3 * (C46923 + ae * C46993 + C46795 * C46979) +
         ae * (2 * C46993 + C46795 * C46995) +
         C46795 *
             (2 * C46979 + ae * C46995 +
              C46795 * (C46822 + ae * C46795 * C46902 +
                        C46795 * (ae * C46902 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C2480 =
        (ae * (2 * (C46795 * C46852 + C46951 * ae) +
               C46795 * (C46852 + C46795 * (C46795 * C46863 + C46960 * ae) +
                         C46795 * C46960 * ae) +
               (C46951 + C46960 * C46989) * ae) +
         C46794 *
             (2 * C46979 + ae * C46995 +
              C46795 * (C46822 + ae * C46795 * C46902 +
                        C46795 * (ae * C46902 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C1345 =
        (C46794 * C46883 + C47208 * ae + C47281 * C46989) / C46743;
    const double C1351 =
        (C46795 * (C46883 + C46794 * C47281 + C47279 * ae)) / C46743;
    const double C1358 =
        (C46883 + C46794 * C47281 + C47279 * ae +
         (C46891 + C46794 * (C46794 * C46902 + C47070) + C46961 * ae) *
             C46989) /
        C46743;
    const double C2476 =
        (2 * C46795 * C47281 +
         C46795 * (C47281 + (C46794 * C46902 + C47070) * C46989)) /
        C46743;
    const double C7431 = C47838 * C2479;
    const double C27058 = C47935 * C2479;
    const double C28388 = C10481 * C2479;
    const double C38322 = C47935 * C2479;
    const double C39648 = C31442 * C2479;
    const double C47067 = C47066 + C47064;
    const double C47168 = C47165 + C47166;
    const double C47046 = C47044 + C47045;
    const double C47366 = C46882 + C47365;
    const double C47218 = C47216 + C47217;
    const double C1344 =
        (C46794 * C46849 + C46795 * (C46795 * C46941 + C47287 * ae) +
         C46795 * C47287 * ae) /
        C46743;
    const double C2477 =
        (2 * (C46795 * C46941 + C47287 * ae) +
         C46795 * (C46941 + C46795 * (C46795 * C46794 * C46868 + C46966 * ae) +
                   C46795 * C46966 * ae) +
         (C47287 + C46966 * C46989) * ae) /
        C46743;
    const double C1334 = C46794 * C47212 + C47287 * C46989;
    const double C2472 =
        2 * C46795 * C47287 + C46795 * (C47287 + C46966 * C46989);
    const double C47289 = C47285 + C47286;
    const double C47343 = C47340 + C47286;
    const double C2067 =
        (2 * (C46795 * C46849 + C47212 * ae) +
         C46795 * (C46849 + C46795 * (C46795 * C46857 + C47286) +
                   C46795 * C46949 * ae) +
         (C47212 + C46949 * C46989) * ae) /
        C46743;
    const double C1479 = C113 * C1206;
    const double C1648 = C47838 * C1350;
    const double C10709 = C47935 * C1350;
    const double C31670 = C47935 * C1350;
    const double C1481 = C113 * C1200;
    const double C1647 = C113 * C1337;
    const double C10708 = C10484 * C1337;
    const double C31669 = C31445 * C1337;
    const double C2359 = C113 * C2060;
    const double C10902 = C10484 * C2060;
    const double C31863 = C31445 * C2060;
    const double C6075 = C47838 * C1368;
    const double C12135 = C47935 * C1368;
    const double C33096 = C47935 * C1368;
    const double C47398 = C47395 + C47371;
    const double C7285 = C47838 * C2475;
    const double C12857 = C47935 * C2475;
    const double C33810 = C47935 * C2475;
    const double C7284 = C113 * C2471;
    const double C12856 = C10484 * C2471;
    const double C33809 = C31445 * C2471;
    const double C47073 = ae * C47072;
    const double C47415 = C46795 * C47072;
    const double C47376 = C46794 * C47374;
    const double C6950 =
        (3 * (C47281 + C47374 * C46989) +
         C46795 *
             (2 * C46795 * C47374 +
              C46795 * (C47374 + (C46794 * C47052 + C47051 * ae) * C46989))) /
        C46743;
    const double C1215 =
        (3 * (C46883 + C46794 * C47281 + C47279 * ae) +
         C46794 * (2 * C47281 +
                   C46794 * (C46891 + C46794 * (C46794 * C46902 + C47070) +
                             C46961 * ae) +
                   C47282 * ae) +
         (2 * C47279 + C46794 * C47282) * ae) /
        C46743;
    const double C1357 =
        (C46844 + C46852 * C46929 + C46795 * (C46795 * C46939 + C47282 * ae) +
         C46795 * C47282 * ae) /
        C46743;
    const double C1763 = (C46795 * (2 * C46934 + C46794 * C46939) +
                          (2 * C47279 + C46794 * C47282) * ae) /
                         C46743;
    const double C1764 =
        (C46795 * (2 * C47281 +
                   C46794 * (C46891 + C46794 * (C46794 * C46902 + C47070) +
                             C46961 * ae) +
                   C47282 * ae)) /
        C46743;
    const double C1204 = 3 * (C47208 + C46951 * C46929) +
                         C46794 * (2 * C47279 + C46794 * C47282);
    const double C1341 = C47208 + C46951 * C46929 + C47282 * C46989;
    const double C1759 = C46795 * (2 * C47279 + C46794 * C47282);
    const double C7422 =
        2 * C46795 * C47282 + C46795 * (C47282 + C47059 * C46989);
    const double C2074 =
        (3 * (C46844 + C46795 * C47336 + C47334 * ae) +
         C46795 *
             (2 * C47336 + C46795 * (C46852 + C46795 * C47072 + C47082 * ae) +
              C47337 * ae) +
         (2 * C47334 + C46795 * C47337) * ae) /
        C46743;
    const double C2064 = 3 * (C47208 + C46951 * C46989) +
                         C46795 * (2 * C47334 + C46795 * C47337);
    const double C47152 = ae * C47150;
    const double C47452 = C46795 * C47150;
    const double C6947 =
        (3 * (C46926 + C46795 * C47391 + C47389 * ae) +
         C46795 *
             (2 * C47391 + C46795 * (C47006 + C46795 * C47150 + C47157 * ae) +
              C47392 * ae) +
         (2 * C47389 + C46795 * C47392) * ae) /
        C46743;
    const double C6945 = 3 * (C47271 + C46958 * C46989) +
                         C46795 * (2 * C47389 + C46795 * C47392);
    const double C47364 = C47361 + C47362;
    const double C47446 = C47443 + C47427;
    const double C23554 = C47838 * C7423;
    const double C27072 = C47935 * C7423;
    const double C38336 = C47935 * C7423;
    const double C23553 = C113 * C7421;
    const double C27071 = C10484 * C7421;
    const double C38335 = C31445 * C7421;
    const double C47411 = C47408 + C47409;
    const double C47138 = C46847 + C47134;
    const double C47433 = C46886 + C47432;
    const double C47461 = C47363 + C47460;
    const double C46831 = C46825 + C46830;
    const double C46945 = C46942 + C46943;
    const double C46983 = C46981 + C46982;
    const double C1480 = C47838 * C1218;
    const double C2236 = C47838 * C1361;
    const double C11409 = C47935 * C1361;
    const double C32370 = C47935 * C1361;
    const double C47031 = C46794 * C47029;
    const double C47058 = C46795 * C47054;
    const double C47071 = C46794 * C47054;
    const double C47113 = C47110 + C47111;
    const double C47139 = C47135 + C47136;
    const double C47151 = C47148 + C47149;
    const double C46870 = C46865 + C46869;
    const double C46946 = C46857 + C46944;
    const double C47032 = C46794 * C47030;
    const double C7425 =
        (2 * (C46795 * C46939 + C47282 * ae) +
         C46795 * (C46939 + C46795 * (C46795 * C47030 + C47059 * ae) +
                   C46795 * C47059 * ae) +
         (C47282 + C47059 * C46989) * ae) /
        C46743;
    const double C47114 = C47108 + C47112;
    const double C46909 = C46904 + C46908;
    const double C46999 = C46896 + C46998;
    const double C47095 = C46795 * C47086;
    const double C47176 = C47173 + C47174;
    const double C176 = C166 * C114;
    const double C4837 = C166 * C4827;
    const double C16195 = C166 * C16185;
    const double C382 = C370 * C114;
    const double C4832 = C370 * C4828;
    const double C4999 = C370 * C4827;
    const double C16190 = C370 * C16186;
    const double C16353 = C370 * C16185;
    const double C585 = C573 * C114;
    const double C5169 = C573 * C4827;
    const double C16515 = C573 * C16185;
    const double C177 = C167 * C47821;
    const double C4836 = C167 * C4823;
    const double C16194 = C167 * C16181;
    const double C178 = C168 * C47821;
    const double C4839 = C168 * C4823;
    const double C16197 = C168 * C16181;
    const double C381 = C369 * C47821;
    const double C4833 = C369 * C47933;
    const double C4998 = C369 * C4823;
    const double C16191 = C369 * C47933;
    const double C16352 = C369 * C16181;
    const double C582 = C570 * C47821;
    const double C5175 = C570 * C4823;
    const double C16521 = C570 * C16181;
    const double C584 = C572 * C47821;
    const double C5168 = C572 * C4823;
    const double C16514 = C572 * C16181;
    const double C587 = C575 * C47821;
    const double C5171 = C575 * C4823;
    const double C16517 = C575 * C16181;
    const double C372 = C353 + C354;
    const double C10718 = C10692 + C10693;
    const double C31679 = C31653 + C31654;
    const double C1005 = C994 + C995;
    const double C10712 = C10680 + C10681;
    const double C11418 = C11404 + C11405;
    const double C31673 = C31641 + C31642;
    const double C32379 = C32365 + C32366;
    const double C1489 = C1483 + C1484;
    const double C11937 = C11930 + C11931;
    const double C32898 = C32891 + C32892;
    const double C371 = C351 + C352;
    const double C10716 = C10688 + C10689;
    const double C31677 = C31649 + C31650;
    const double C574 = C554 + C555;
    const double C10910 = C10882 + C10883;
    const double C10908 = C10878 + C10879;
    const double C31871 = C31843 + C31844;
    const double C31869 = C31839 + C31840;
    const double C1004 = C992 + C993;
    const double C10714 = C10684 + C10685;
    const double C11416 = C11400 + C11401;
    const double C31675 = C31645 + C31646;
    const double C32377 = C32361 + C32362;
    const double C1490 = C1485 + C1486;
    const double C11939 = C11934 + C11935;
    const double C32900 = C32895 + C32896;
    const double C1656 = C1651 + C1652;
    const double C10717 = C10690 + C10691;
    const double C12145 = C12140 + C12141;
    const double C31678 = C31651 + C31652;
    const double C33106 = C33101 + C33102;
    const double C2368 = C2363 + C2364;
    const double C10911 = C10884 + C10885;
    const double C13005 = C13000 + C13001;
    const double C31872 = C31845 + C31846;
    const double C33958 = C33953 + C33954;
    const double C6082 = C6066 + C6067;
    const double C26651 = C26645 + C26646;
    const double C27075 = C27051 + C27052;
    const double C37915 = C37909 + C37910;
    const double C38339 = C38315 + C38316;
    const double C7435 = C7432 + C7433;
    const double C27076 = C27053 + C27054;
    const double C28396 = C28391 + C28392;
    const double C38340 = C38317 + C38318;
    const double C39656 = C39651 + C39652;
    const double C5902 = C113 * C1213;
    const double C26891 = C10483 * C1213;
    const double C38155 = C31444 * C1213;
    const double C6068 = C113 * C1347;
    const double C26641 = C10484 * C1347;
    const double C27055 = C10483 * C1347;
    const double C37905 = C31445 * C1347;
    const double C38319 = C31444 * C1347;
    const double C6072 = C113 * C1353;
    const double C26025 = C10484 * C1353;
    const double C27063 = C10483 * C1353;
    const double C37289 = C31445 * C1353;
    const double C38327 = C31444 * C1353;
    const double C6078 = C113 * C1356;
    const double C27069 = C10483 * C1356;
    const double C27065 = C10484 * C1356;
    const double C38333 = C31444 * C1356;
    const double C38329 = C31445 * C1356;
    const double C6566 = C113 * C1762;
    const double C26887 = C10484 * C1762;
    const double C27543 = C10483 * C1762;
    const double C38151 = C31445 * C1762;
    const double C38807 = C31444 * C1762;
    const double C7430 = C113 * C2474;
    const double C27057 = C10484 * C2474;
    const double C28387 = C10483 * C2474;
    const double C38321 = C31445 * C2474;
    const double C39647 = C31444 * C2474;
    const double C28385 = C10484 * C6948;
    const double C39645 = C31445 * C6948;
    const double C379 = C367 * C47821;
    const double C4834 = C367 * C47933;
    const double C5009 = C367 * C4823;
    const double C16192 = C367 * C47933;
    const double C16359 = C367 * C16181;
    const double C179 = C169 * C114;
    const double C4838 = C169 * C4827;
    const double C16196 = C169 * C16185;
    const double C380 = C368 * C114;
    const double C4835 = C368 * C4828;
    const double C5008 = C368 * C4827;
    const double C16193 = C368 * C16186;
    const double C16358 = C368 * C16185;
    const double C583 = C571 * C114;
    const double C5174 = C571 * C4827;
    const double C16520 = C571 * C16185;
    const double C133 = (4 * (2 * C46844 + C46802 * C46849) +
                         C46802 * (3 * C46849 + C46802 * C46859)) /
                        C46743;
    const double C327 =
        (2 * C46844 + C46802 * C46849 + C46859 * C46929) / C46743;
    const double C329 = (C46794 * (3 * C46849 + C46802 * C46859)) / C46743;
    const double C1646 = C47838 * C1364;
    const double C10705 = C47935 * C1364;
    const double C31666 = C47935 * C1364;
    const double C5901 = C47838 * C1214;
    const double C5887 = (4 * (2 * C46926 + C46794 * C46932) +
                          C46794 * (3 * C46932 + C46794 * C47018)) /
                         C46743;
    const double C132 = (4 * (2 * C46883 + C46802 * C46888) +
                         C46802 * (3 * C46888 + C46802 * C46898)) /
                        C46743;
    const double C529 =
        (2 * C46883 + C46802 * C46888 + C46898 * C46989) / C46743;
    const double C531 = (C46795 * (3 * C46888 + C46802 * C46898)) / C46743;
    const double C12994 = C10484 * C2075;
    const double C33947 = C31445 * C2075;
    const double C12652 = (4 * (2 * C46988 + C46795 * C46991) +
                           C46795 * (3 * C46991 + C46795 * C47092)) /
                          C46743;
    const double C47225 = C46802 * C46971;
    const double C47347 = C46794 * C46971;
    const double C1205 = 3 * (C47212 + C46949 * C46929) +
                         C46794 * (2 * C47287 + C46794 * C47290);
    const double C1342 = C47212 + C46949 * C46929 + C47290 * C46989;
    const double C1760 = C46795 * (2 * C47287 + C46794 * C47290);
    const double C2065 = 3 * (C47212 + C46949 * C46989) +
                         C46795 * (2 * C47341 + C46795 * C47344);
    const double C6946 = 3 * (C47279 + C46961 * C46989) +
                         C46795 * (2 * C47396 + C46795 * C47399);
    const double C47375 = C47372 + C47373;
    const double C47420 = C47417 + C47418;
    const double C47457 = C47454 + C47455;
    const double C47429 = C46794 * C47140;
    const double C23200 = 3 * (C47274 + C47043 * C46989) +
                          C46795 * (2 * C47444 + C46795 * C47447);
    const double C47467 = C46795 * C47175;
    const double C47595 = C47591 - C47594;
    const double C47938 = C47906 / C47581;
    const double C47604 = C47600 - C47603;
    const double C47952 = C47937 / C47585;
    const double C47677 = C47672 - C47676;
    const double C47942 = C47914 / C47581;
    const double C47684 = C47680 - C47683;
    const double C47956 = C47945 / C47585;
    const double C47719 = C47714 - C47718;
    const double C47944 = C47917 / C47581;
    const double C47726 = C47722 - C47725;
    const double C47958 = C47948 / C47585;
    const double C170 = C156 + C157;
    const double C10533 = C10516 + C10517;
    const double C31494 = C31477 + C31478;
    const double C373 = C355 + C356;
    const double C10727 = C10710 + C10711;
    const double C31688 = C31671 + C31672;
    const double C375 = C359 + C360;
    const double C11063 = C11058 + C11059;
    const double C32024 = C32019 + C32020;
    const double C576 = C558 + C559;
    const double C10921 = C10904 + C10905;
    const double C10915 = C10892 + C10893;
    const double C31882 = C31865 + C31866;
    const double C31876 = C31853 + C31854;
    const double C578 = C562 + C563;
    const double C10527 = C10504 + C10505;
    const double C11205 = C11200 + C11201;
    const double C31488 = C31465 + C31466;
    const double C32166 = C32161 + C32162;
    const double C1006 = C996 + C997;
    const double C10721 = C10698 + C10699;
    const double C11423 = C11414 + C11415;
    const double C31682 = C31659 + C31660;
    const double C32384 = C32375 + C32376;
    const double C5899 = C47838 * C1222;
    const double C2246 = C2241 + C2242;
    const double C11417 = C11402 + C11403;
    const double C12863 = C12858 + C12859;
    const double C32378 = C32363 + C32364;
    const double C33816 = C33811 + C33812;
    const double C5911 = C5904 + C5905;
    const double C26904 = C26895 + C26896;
    const double C38168 = C38159 + C38160;
    const double C6089 = C6080 + C6081;
    const double C27086 = C27073 + C27074;
    const double C27080 = C27061 + C27062;
    const double C38350 = C38337 + C38338;
    const double C38344 = C38325 + C38326;
    const double C6571 = C6568 + C6569;
    const double C26898 = C26883 + C26884;
    const double C27552 = C27547 + C27548;
    const double C38162 = C38147 + C38148;
    const double C38816 = C38811 + C38812;
    const double C5891 =
        (4 * (2 * C46930 + ae * C46932 + C46794 * C47017) +
         ae * (3 * C46932 + C46794 * C47018) +
         C46794 *
             (3 * C47017 + ae * C47018 +
              C46794 * (2 * C47011 + ae * C47013 +
                        C46794 * (C46818 + ae * C46794 * C46855 +
                                  C46794 * (ae * C46855 + C46794 * C46827))))) /
        C46763;
    const double C47412 = C47410 + C47407;
    const double C171 = C158 + C159;
    const double C10531 = C10512 + C10513;
    const double C31492 = C31473 + C31474;
    const double C374 = C357 + C358;
    const double C10725 = C10706 + C10707;
    const double C31686 = C31667 + C31668;
    const double C376 = C361 + C362;
    const double C11061 = C11054 + C11055;
    const double C32022 = C32015 + C32016;
    const double C577 = C560 + C561;
    const double C10919 = C10900 + C10901;
    const double C10917 = C10896 + C10897;
    const double C31880 = C31861 + C31862;
    const double C31878 = C31857 + C31858;
    const double C579 = C564 + C565;
    const double C10529 = C10508 + C10509;
    const double C11203 = C11196 + C11197;
    const double C31490 = C31469 + C31470;
    const double C32164 = C32157 + C32158;
    const double C1007 = C998 + C999;
    const double C10723 = C10702 + C10703;
    const double C11421 = C11410 + C11411;
    const double C31684 = C31663 + C31664;
    const double C32382 = C32371 + C32372;
    const double C6419 = C47838 * C1768;
    const double C11929 = C47935 * C1768;
    const double C32890 = C47935 * C1768;
    const double C2362 = C47838 * C2079;
    const double C10889 = C47935 * C2079;
    const double C12997 = C10481 * C2079;
    const double C31850 = C47935 * C2079;
    const double C33950 = C31442 * C2079;
    const double C12995 = C47935 * C2082;
    const double C33948 = C47935 * C2082;
    const double C7283 = C47838 * C2480;
    const double C12853 = C47935 * C2480;
    const double C33806 = C47935 * C2480;
    const double C2239 = C113 * C1345;
    const double C11406 = C10484 * C1345;
    const double C12854 = C10483 * C1345;
    const double C32367 = C31445 * C1345;
    const double C33807 = C31444 * C1345;
    const double C1649 = C113 * C1351;
    const double C10694 = C10484 * C1351;
    const double C12136 = C10483 * C1351;
    const double C31655 = C31445 * C1351;
    const double C33097 = C31444 * C1351;
    const double C6074 = C113 * C1358;
    const double C12134 = C10484 * C1358;
    const double C33095 = C31445 * C1358;
    const double C7282 = C113 * C2476;
    const double C12852 = C10484 * C2476;
    const double C33805 = C31445 * C2476;
    const double C6563 =
        (3 * (C46975 + ae * (C46795 * C47006 + C46958 * ae) + C46794 * C47067) +
         ae * (C46795 * C47018 + (2 * C46958 + C46794 * C47043) * ae) +
         C46794 *
             (2 * C47067 + ae * (C46795 * C47013 + C47043 * ae) +
              C46794 * (C47042 + ae * (C46795 * C46794 * C46855 + C47040 * ae) +
                        C46794 * (ae * (C46795 * C46855 + C46920 * ae) +
                                  C46794 * (ae * C46894 + C46795 * C46827))))) /
        C46763;
    const double C6063 =
        (2 * (ae * (C46843 + C46795 * (C46795 * C46847 + C46918 * ae) +
                    C46795 * C46918 * ae) +
              C46794 * C47046) +
         ae * (C46932 + C46795 * (C46795 * C47013 + C47043 * ae) +
               C46795 * C47043 * ae) +
         C46794 *
             (C47046 +
              ae * (C47006 + C46795 * (C46795 * C46794 * C46855 + C47040 * ae) +
                    C46795 * C47040 * ae) +
              C46794 *
                  (ae * (C46847 + C46795 * (C46795 * C46855 + C46920 * ae) +
                         C46795 * C46920 * ae) +
                   C46794 * (C46818 + ae * C46795 * C46894 +
                             C46795 * (ae * C46894 + C46795 * C46827))))) /
        C46763;
    const double C6951 =
        (ae * (3 * (C46843 + C46795 * C47065 + C47076 * ae) +
               C46795 * (2 * C47065 +
                         C46795 * (C46847 +
                                   C46795 * (C46795 * C46855 + C46920 * ae) +
                                   C46795 * C46920 * ae) +
                         C47079 * ae) +
               (2 * C47076 + C46795 * C47079) * ae) +
         C46794 *
             (3 * C47046 + ae * (2 * C47036 + C46795 * C47080) +
              C46795 * (2 * C47042 + ae * C47080 +
                        C46795 * (C46818 + ae * C46795 * C46894 +
                                  C46795 * (ae * C46894 + C46795 * C46827))))) /
        C46763;
    const double C7427 =
        (2 * C46975 + ae * C46991 + C46795 * C47046 +
         ae * (2 * (C46795 * C47006 + C46958 * ae) +
               C46795 *
                   (C47006 + C46795 * (C46795 * C46794 * C46855 + C47040 * ae) +
                    C46795 * C47040 * ae) +
               (C46958 + C47040 * C46989) * ae) +
         C46794 *
             (ae *
                  (2 * C47065 +
                   C46795 * (C46847 + C46795 * (C46795 * C46855 + C46920 * ae) +
                             C46795 * C46920 * ae) +
                   C47079 * ae) +
              C46794 * (2 * C47042 + ae * C47080 +
                        C46795 * (C46818 + ae * C46795 * C46894 +
                                  C46795 * (ae * C46894 + C46795 * C46827))))) /
        C46763;
    const double C12655 =
        (4 * (2 * C46975 + ae * C46991 + C46795 * C47046) +
         ae * (3 * C46991 + C46795 * C47092) +
         C46795 *
             (3 * C47046 + ae * C47092 +
              C46795 * (2 * C47042 + ae * C47080 +
                        C46795 * (C46818 + ae * C46795 * C46894 +
                                  C46795 * (ae * C46894 + C46795 * C46827))))) /
        C46763;
    const double C47367 = C47366 + C47360;
    const double C326 =
        (2 * C46883 + C46802 * C46888 +
         C46794 * (C46794 * C46898 + C47218 * ae) + C46794 * C47218 * ae) /
        C46743;
    const double C328 = (C46794 * (3 * C46888 + C46802 * C46898) +
                         (3 * C47212 + C46802 * C47218) * ae) /
                        C46743;
    const double C530 =
        (2 * C46844 + C46802 * C46849 +
         C46795 * (C46795 * C46859 + C47218 * ae) + C46795 * C47218 * ae) /
        C46743;
    const double C532 = (C46795 * (3 * C46849 + C46802 * C46859) +
                         (3 * C47212 + C46802 * C47218) * ae) /
                        C46743;
    const double C982 = (C46795 * (C46794 * C46898 + C47218 * ae)) / C46743;
    const double C983 =
        (C46795 * C46794 * C46859 + C46794 * C47218 * ae) / C46743;
    const double C120 = 4 * (2 * C47208 + C46802 * C47212) +
                        C46802 * (3 * C47212 + C46802 * C47218);
    const double C309 = 2 * C47208 + C46802 * C47212 + C47218 * C46929;
    const double C310 = C46794 * (3 * C47212 + C46802 * C47218);
    const double C512 = 2 * C47208 + C46802 * C47212 + C47218 * C46989;
    const double C513 = C46795 * (3 * C47212 + C46802 * C47218);
    const double C974 = C46795 * C46794 * C47218;
    const double C1474 =
        2 * C46794 * C47218 + C46794 * (C47218 + C46971 * C46929);
    const double C1640 = C46795 * (C47218 + C46971 * C46929);
    const double C2352 =
        2 * C46795 * C47218 + C46795 * (C47218 + C46971 * C46989);
    const double C2238 = C47838 * C1344;
    const double C11413 = C47935 * C1344;
    const double C32374 = C47935 * C1344;
    const double C2237 = C113 * C1334;
    const double C11412 = C10484 * C1334;
    const double C32373 = C31445 * C1334;
    const double C1217 =
        (3 * (C46888 + C46794 * C47289 + C47287 * ae) +
         C46794 * (2 * C47289 +
                   C46794 * (C46896 + C46794 * (C46794 * C46907 + C46965 * ae) +
                             C46966 * ae) +
                   C47290 * ae) +
         (2 * C47287 + C46794 * C47290) * ae) /
        C46743;
    const double C1343 =
        (C46794 * C46888 + C47212 * ae + C47289 * C46989) / C46743;
    const double C1349 =
        (C46795 * (C46888 + C46794 * C47289 + C47287 * ae)) / C46743;
    const double C1360 =
        (C46888 + C46794 * C47289 + C47287 * ae +
         (C46896 + C46794 * (C46794 * C46907 + C46965 * ae) + C46966 * ae) *
             C46989) /
        C46743;
    const double C1766 =
        (C46795 * (2 * C47289 +
                   C46794 * (C46896 + C46794 * (C46794 * C46907 + C46965 * ae) +
                             C46966 * ae) +
                   C47290 * ae)) /
        C46743;
    const double C2478 =
        (2 * C46795 * C47289 +
         C46795 * (C47289 + (C46794 * C46907 + C46965 * ae) * C46989)) /
        C46743;
    const double C2076 =
        (3 * (C46849 + C46795 * C47343 + C47341 * ae) +
         C46795 * (2 * C47343 +
                   C46795 * (C46857 + C46795 * (C46795 * C46868 + C46965 * ae) +
                             C46795 * C46965 * ae) +
                   C47344 * ae) +
         (2 * C47341 + C46795 * C47344) * ae) /
        C46743;
    const double C2360 = C47838 * C2067;
    const double C10903 = C47935 * C2067;
    const double C31864 = C47935 * C2067;
    const double C1488 = C1481 + C1482;
    const double C1654 = C1647 + C1648;
    const double C10726 = C10708 + C10709;
    const double C31687 = C31669 + C31670;
    const double C6949 =
        (3 * (C46934 + C46795 * C47398 + C47396 * ae) +
         C46795 * (2 * C47398 +
                   C46795 * (C47020 +
                             C46795 * (C46795 * C46794 * C47023 + C47056 * ae) +
                             C46795 * C47056 * ae) +
                   C47399 * ae) +
         (2 * C47396 + C46795 * C47399) * ae) /
        C46743;
    const double C7289 = C7284 + C7285;
    const double C12862 = C12856 + C12857;
    const double C33815 = C33809 + C33810;
    const double C47419 = C46852 + C47415;
    const double C47377 = C46891 + C47376;
    const double C5898 = C113 * C1215;
    const double C6077 = C47838 * C1357;
    const double C12139 = C47935 * C1357;
    const double C33100 = C47935 * C1357;
    const double C6421 = C47838 * C1763;
    const double C11933 = C47935 * C1763;
    const double C32894 = C47935 * C1763;
    const double C6418 = C113 * C1764;
    const double C11928 = C10484 * C1764;
    const double C32889 = C31445 * C1764;
    const double C5900 = C113 * C1204;
    const double C6076 = C113 * C1341;
    const double C12138 = C10484 * C1341;
    const double C33099 = C31445 * C1341;
    const double C6420 = C113 * C1759;
    const double C11932 = C10484 * C1759;
    const double C32893 = C31445 * C1759;
    const double C12999 = C47935 * C2074;
    const double C33952 = C47935 * C2074;
    const double C12998 = C10484 * C2064;
    const double C33951 = C31445 * C2064;
    const double C47154 = C47042 + C47152;
    const double C47456 = C47006 + C47452;
    const double C28390 = C47935 * C6947;
    const double C39650 = C47935 * C6947;
    const double C28389 = C10484 * C6945;
    const double C39649 = C31445 * C6945;
    const double C6059 =
        (2 * C46926 + C46794 * C46932 +
         C46795 * (C46795 * C47018 + C47364 * ae) + C46795 * C47364 * ae) /
        C46743;
    const double C6559 = (C46795 * (3 * C46932 + C46794 * C47018) +
                          (3 * C47274 + C46794 * C47364) * ae) /
                         C46743;
    const double C5885 = 4 * (2 * C47271 + C46794 * C47274) +
                         C46794 * (3 * C47274 + C46794 * C47364);
    const double C6057 = 2 * C47271 + C46794 * C47274 + C47364 * C46989;
    const double C6557 = C46795 * (3 * C47274 + C46794 * C47364);
    const double C23546 =
        2 * C46795 * C47364 + C46795 * (C47364 + C47140 * C46989);
    const double C23201 =
        (3 * (C46932 + C46795 * C47446 + C47444 * ae) +
         C46795 * (2 * C47446 +
                   C46795 * (C47013 + C46795 * (C46795 * C47109 + C47133 * ae) +
                             C46795 * C47133 * ae) +
                   C47447 * ae) +
         (2 * C47444 + C46795 * C47447) * ae) /
        C46743;
    const double C23556 = C23553 + C23554;
    const double C27085 = C27071 + C27072;
    const double C38349 = C38335 + C38336;
    const double C12649 = 4 * (2 * C47327 + C46795 * C47330) +
                          C46795 * (3 * C47330 + C46795 * C47411);
    const double C47141 = C47138 + C47130;
    const double C47434 = C47433 + C47147;
    const double C27928 =
        (4 * (2 * C46795 * C47363 + C46795 * C47461) +
         C46795 * (3 * C47461 + C46795 * (2 * C46795 * C47430 +
                                          C46795 * (C47430 + (C46794 * C46905 +
                                                              C46963 * ae) *
                                                                 C46989)))) /
        C46743;
    const double C142 =
        (5 * (3 * C46820 + C46802 * C46831) +
         C46802 * (4 * C46831 +
                   C46802 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C339 =
        (2 * C46802 * C46813 + C46802 * C46820 + ae * C46794 * C46859 +
         C46794 * (ae * C46859 + C46794 * C46831)) /
        C46763;
    const double C340 = (ae * (3 * C46849 + C46802 * C46859) +
                         C46794 * (3 * C46820 + C46802 * C46831)) /
                        C46763;
    const double C542 =
        (2 * C46802 * C46813 + C46802 * C46820 + ae * C46795 * C46898 +
         C46795 * (ae * C46898 + C46795 * C46831)) /
        C46763;
    const double C543 = (ae * (3 * C46888 + C46802 * C46898) +
                         C46795 * (3 * C46820 + C46802 * C46831)) /
                        C46763;
    const double C989 = (ae * (C46795 * C46859 +
                               (2 * C46802 * C46918 +
                                C46802 * (C46918 + C46809 * C46811 * C46810)) *
                                   ae) +
                         C46794 * (ae * C46898 + C46795 * C46831)) /
                        C46763;
    const double C2078 =
        (2 * (ae * C46888 + C46795 * C46820) +
         ae * (C46888 + C46896 * std::pow(C46795, 2)) +
         C46795 * (C46820 + ae * C46795 * C46896 + C46795 * C46983)) /
        C46763;
    const double C1487 = C1479 + C1480;
    const double C47033 = C47028 + C47031;
    const double C47060 = C47057 + C47058;
    const double C47074 = C47073 + C47071;
    const double C47115 = C46794 * C47113;
    const double C47142 = C46794 * C47139;
    const double C47167 = C46795 * C47139;
    const double C47153 = C46794 * C47151;
    const double C46871 = C46802 * C46870;
    const double C1477 =
        (2 * (ae * C46859 + C46794 * C46831) + ae * (C46859 + C46870 * C46929) +
         C46794 * (C46831 + ae * C46794 * C46870 +
                   C46794 * (ae * C46870 +
                             C46794 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1475 =
        (2 * C46794 * C46859 + C46794 * (C46859 + C46870 * C46929)) / C46743;
    const double C1641 = (C46795 * (C46859 + C46870 * C46929) +
                          (C47218 + C46971 * C46929) * ae) /
                         C46743;
    const double C2353 =
        (2 * (C46795 * C46859 + C47218 * ae) +
         C46795 * (C46859 + C46795 * (C46795 * C46870 + C46971 * ae) +
                   C46795 * C46971 * ae) +
         (C47218 + C46971 * C46989) * ae) /
        C46743;
    const double C1223 =
        (3 * (C46820 + ae * C46941 + C46794 * C46945) +
         ae * (2 * C46941 + C46794 * C46946) +
         C46794 * (2 * C46945 + ae * C46946 +
                   C46794 * (C46829 + ae * C46794 * C46868 +
                             C46794 * (ae * C46868 +
                                       C46794 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1769 =
        (2 * (ae * (C46795 * C46857 + C46949 * ae) + C46794 * C46983) +
         ae * (C46795 * C46946 + (C46949 + C46965 * C46929) * ae) +
         C46794 * (C46983 + ae * (C46795 * C46794 * C46868 + C46966 * ae) +
                   C46794 * (ae * (C46795 * C46868 + C46965 * ae) +
                             C46794 * (ae * C46907 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1216 = (3 * (C46849 + C46857 * C46929) +
                          C46794 * (2 * C46941 + C46794 * C46946)) /
                         C46743;
    const double C1359 =
        (C46849 + C46857 * C46929 + C46795 * (C46795 * C46946 + C47290 * ae) +
         C46795 * C47290 * ae) /
        C46743;
    const double C1765 = (C46795 * (2 * C46941 + C46794 * C46946) +
                          (2 * C47287 + C46794 * C47290) * ae) /
                         C46743;
    const double C47034 = C47026 + C47032;
    const double C47116 = C46794 * C47114;
    const double C23547 =
        (2 * (C46795 * C47018 + C47364 * ae) +
         C46795 * (C47018 + C46795 * (C46795 * C47114 + C47140 * ae) +
                   C46795 * C47140 * ae) +
         (C47364 + C47140 * C46989) * ae) /
        C46743;
    const double C46910 = C46802 * C46909;
    const double C1643 =
        (ae * C46898 + C46795 * C46831 +
         ae * (C46795 * C46794 * C46870 + C46794 * C46971 * ae) +
         C46794 * (ae * (C46795 * C46870 + C46971 * ae) +
                   C46794 * (ae * C46909 +
                             C46795 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2233 =
        (ae * (C46859 + C46795 * (C46795 * C46870 + C46971 * ae) +
               C46795 * C46971 * ae) +
         C46794 * (C46831 + ae * C46795 * C46909 +
                   C46795 * (ae * C46909 +
                             C46795 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2355 =
        (2 * (ae * C46898 + C46795 * C46831) + ae * (C46898 + C46909 * C46989) +
         C46795 * (C46831 + ae * C46795 * C46909 +
                   C46795 * (ae * C46909 +
                             C46795 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1476 =
        (2 * (C46794 * C46898 + C47218 * ae) +
         C46794 * (C46898 + C46794 * (C46794 * C46909 + C46971 * ae) +
                   C46794 * C46971 * ae) +
         (C47218 + C46971 * C46929) * ae) /
        C46743;
    const double C1642 =
        (C46795 * (C46898 + C46794 * (C46794 * C46909 + C46971 * ae) +
                   C46794 * C46971 * ae)) /
        C46743;
    const double C2232 = (C46794 * C46898 + C47218 * ae +
                          (C46794 * C46909 + C46971 * ae) * C46989) /
                         C46743;
    const double C2354 =
        (2 * C46795 * C46898 + C46795 * (C46898 + C46909 * C46989)) / C46743;
    const double C2083 =
        (3 * (C46820 + ae * C46997 + C46795 * C46983) +
         ae * (2 * C46997 + C46795 * C46999) +
         C46795 * (2 * C46983 + ae * C46999 +
                   C46795 * (C46829 + ae * C46795 * C46907 +
                             C46795 * (ae * C46907 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2481 =
        (ae * (2 * (C46795 * C46857 + C46949 * ae) +
               C46795 * (C46857 + C46795 * (C46795 * C46868 + C46965 * ae) +
                         C46795 * C46965 * ae) +
               (C46949 + C46965 * C46989) * ae) +
         C46794 * (2 * C46983 + ae * C46999 +
                   C46795 * (C46829 + ae * C46795 * C46907 +
                             C46795 * (ae * C46907 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2077 = (3 * (C46888 + C46896 * C46989) +
                          C46795 * (2 * C46997 + C46795 * C46999)) /
                         C46743;
    const double C47096 = C47094 + C47095;
    const double C47179 = C46795 * C47176;
    const double C184 = C176 + C177;
    const double C384 = C372 * C47821;
    const double C5005 = C372 * C4823;
    const double C4996 = C372 * C47933;
    const double C16355 = C372 * C16181;
    const double C16350 = C372 * C47933;
    const double C1011 = C1005 * C47821;
    const double C5166 = C1005 * C47933;
    const double C5649 = C1005 * C4823;
    const double C16512 = C1005 * C47933;
    const double C16991 = C1005 * C16181;
    const double C1493 = C1489 * C47821;
    const double C5007 = C1489 * C47933;
    const double C6222 = C1489 * C4823;
    const double C16357 = C1489 * C47933;
    const double C17504 = C1489 * C16181;
    const double C383 = C371 * C114;
    const double C5004 = C371 * C4827;
    const double C4997 = C371 * C4828;
    const double C16354 = C371 * C16185;
    const double C16351 = C371 * C16186;
    const double C586 = C574 * C114;
    const double C5170 = C574 * C4827;
    const double C16516 = C574 * C16185;
    const double C1010 = C1004 * C114;
    const double C5167 = C1004 * C4828;
    const double C5648 = C1004 * C4827;
    const double C16513 = C1004 * C16186;
    const double C16990 = C1004 * C16185;
    const double C1494 = C1490 * C114;
    const double C5006 = C1490 * C4828;
    const double C6223 = C1490 * C4827;
    const double C16356 = C1490 * C16186;
    const double C17505 = C1490 * C16185;
    const double C1660 = C1656 * C114;
    const double C5650 = C1656 * C4828;
    const double C6423 = C1656 * C4827;
    const double C16992 = C1656 * C16186;
    const double C17703 = C1656 * C16185;
    const double C2372 = C2368 * C114;
    const double C7287 = C2368 * C4827;
    const double C18539 = C2368 * C16185;
    const double C5910 = C5902 + C5903;
    const double C26902 = C26891 + C26892;
    const double C38166 = C38155 + C38156;
    const double C6083 = C6068 + C6069;
    const double C26649 = C26641 + C26642;
    const double C27077 = C27055 + C27056;
    const double C37913 = C37905 + C37906;
    const double C38341 = C38319 + C38320;
    const double C6085 = C6072 + C6073;
    const double C26037 = C26025 + C26026;
    const double C27081 = C27063 + C27064;
    const double C37301 = C37289 + C37290;
    const double C38345 = C38327 + C38328;
    const double C6088 = C6078 + C6079;
    const double C27084 = C27069 + C27070;
    const double C27082 = C27065 + C27066;
    const double C38348 = C38333 + C38334;
    const double C38346 = C38329 + C38330;
    const double C6570 = C6566 + C6567;
    const double C26900 = C26887 + C26888;
    const double C27550 = C27543 + C27544;
    const double C38164 = C38151 + C38152;
    const double C38814 = C38807 + C38808;
    const double C7434 = C7430 + C7431;
    const double C27078 = C27057 + C27058;
    const double C28394 = C28387 + C28388;
    const double C38342 = C38321 + C38322;
    const double C39654 = C39647 + C39648;
    const double C185 = C178 + C179;
    const double C391 = C379 + C380;
    const double C594 = C582 + C583;
    const double C163 = C47838 * C133;
    const double C366 = C47838 * C327;
    const double C708 = C47838 * C329;
    const double C22444 = C47838 * C5887;
    const double C160 = C113 * C132;
    const double C566 = C113 * C529;
    const double C11194 = C10484 * C529;
    const double C32155 = C31445 * C529;
    const double C818 = C113 * C531;
    const double C10510 = C10484 * C531;
    const double C31471 = C31445 * C531;
    const double C47226 = C47224 + C47225;
    const double C2231 =
        (C46794 * C46859 + C46795 * (C46795 * C46794 * C46870 + C47347 * ae) +
         C46795 * C47347 * ae) /
        C46743;
    const double C2230 = C46794 * C47218 + C47347 * C46989;
    const double C5886 = 4 * (2 * C47279 + C46794 * C47282) +
                         C46794 * (3 * C47282 + C46794 * C47375);
    const double C6058 = 2 * C47279 + C46794 * C47282 + C47375 * C46989;
    const double C6558 = C46795 * (3 * C47282 + C46794 * C47375);
    const double C12650 = 4 * (2 * C47334 + C46795 * C47337) +
                          C46795 * (3 * C47337 + C46795 * C47420);
    const double C27926 = 4 * (2 * C47389 + C46795 * C47392) +
                          C46795 * (3 * C47392 + C46795 * C47457);
    const double C47431 = C47428 + C47429;
    const double C47469 = C47466 + C47467;
    const double C47868 = C47595 * C47583;
    const double C47908 = C47873 + C47595;
    const double C47876 = C47604 / C47585;
    const double C47872 = C47604 * C47583;
    const double C695 = C47952 - (C47595 * C47586) / C47581;
    const double C47886 = C47677 * C47671;
    const double C47923 = C47888 + C47677;
    const double C47890 = C47684 / C47585;
    const double C47887 = C47684 * C47671;
    const double C1468 = C47956 - (C47677 * C47673) / C47581;
    const double C47892 = C47719 * C47713;
    const double C47929 = C47894 + C47719;
    const double C47896 = C47726 / C47585;
    const double C47893 = C47726 * C47713;
    const double C2348 = C47958 - (C47719 * C47715) / C47581;
    const double C180 = C170 * C114;
    const double C4845 = C170 * C4827;
    const double C16203 = C170 * C16185;
    const double C385 = C373 * C114;
    const double C5015 = C373 * C4827;
    const double C5010 = C373 * C4828;
    const double C16365 = C373 * C16185;
    const double C16360 = C373 * C16186;
    const double C387 = C375 * C114;
    const double C4840 = C375 * C4828;
    const double C5315 = C375 * C4827;
    const double C16198 = C375 * C16186;
    const double C16661 = C375 * C16185;
    const double C588 = C576 * C114;
    const double C5181 = C576 * C4827;
    const double C16527 = C576 * C16185;
    const double C590 = C578 * C114;
    const double C5449 = C578 * C4827;
    const double C16795 = C578 * C16185;
    const double C1012 = C1006 * C114;
    const double C5176 = C1006 * C4828;
    const double C5655 = C1006 * C4827;
    const double C16522 = C1006 * C16186;
    const double C16997 = C1006 * C16185;
    const double C2250 = C2246 * C114;
    const double C5172 = C2246 * C4828;
    const double C7151 = C2246 * C4827;
    const double C16518 = C2246 * C16186;
    const double C18405 = C2246 * C16185;
    const double C22442 = C47838 * C5891;
    const double C181 = C171 * C47821;
    const double C4844 = C171 * C4823;
    const double C16202 = C171 * C16181;
    const double C386 = C374 * C47821;
    const double C5014 = C374 * C4823;
    const double C5011 = C374 * C47933;
    const double C16364 = C374 * C16181;
    const double C16361 = C374 * C47933;
    const double C388 = C376 * C47821;
    const double C4841 = C376 * C47933;
    const double C5314 = C376 * C4823;
    const double C16199 = C376 * C47933;
    const double C16660 = C376 * C16181;
    const double C589 = C577 * C47821;
    const double C5180 = C577 * C4823;
    const double C16526 = C577 * C16181;
    const double C591 = C579 * C47821;
    const double C5448 = C579 * C4823;
    const double C16794 = C579 * C16181;
    const double C1013 = C1007 * C47821;
    const double C5177 = C1007 * C47933;
    const double C5654 = C1007 * C4823;
    const double C16523 = C1007 * C47933;
    const double C16996 = C1007 * C16181;
    const double C2367 = C2361 + C2362;
    const double C10913 = C10888 + C10889;
    const double C13003 = C12996 + C12997;
    const double C31874 = C31849 + C31850;
    const double C33956 = C33949 + C33950;
    const double C13002 = C12994 + C12995;
    const double C33955 = C33947 + C33948;
    const double C2245 = C2239 + C2240;
    const double C11419 = C11406 + C11407;
    const double C12861 = C12854 + C12855;
    const double C32380 = C32367 + C32368;
    const double C33814 = C33807 + C33808;
    const double C1655 = C1649 + C1650;
    const double C10719 = C10694 + C10695;
    const double C12143 = C12136 + C12137;
    const double C31680 = C31655 + C31656;
    const double C33104 = C33097 + C33098;
    const double C6086 = C6074 + C6075;
    const double C12142 = C12134 + C12135;
    const double C33103 = C33095 + C33096;
    const double C7288 = C7282 + C7283;
    const double C12860 = C12852 + C12853;
    const double C33813 = C33805 + C33806;
    const double C22914 = C47838 * C6563;
    const double C26890 = C47935 * C6563;
    const double C38154 = C47935 * C6563;
    const double C22562 = C47838 * C6063;
    const double C27542 = C47935 * C6063;
    const double C38806 = C47935 * C6063;
    const double C28386 = C47935 * C6951;
    const double C39646 = C47935 * C6951;
    const double C23552 = C47838 * C7427;
    const double C27068 = C47935 * C7427;
    const double C38332 = C47935 * C7427;
    const double C5888 =
        (4 * (2 * C47273 + C46794 * C47367 + C47274 * ae) +
         C46794 *
             (3 * C47367 +
              C46794 * (2 * C47363 +
                        C46794 * (C46886 + C46794 * (C46794 * C46894 + C47121) +
                                  C47147) +
                        C47043 * ae) +
              C47364 * ae) +
         (3 * C47274 + C46794 * C47364) * ae) /
        C46743;
    const double C6060 =
        (2 * C47273 + C46794 * C47367 + C47274 * ae +
         (2 * C47363 +
          C46794 * (C46886 + C46794 * (C46794 * C46894 + C47121) + C47147) +
          C47043 * ae) *
             C46989) /
        C46743;
    const double C6560 =
        (C46795 *
         (3 * C47367 +
          C46794 * (2 * C47363 +
                    C46794 * (C46886 + C46794 * (C46794 * C46894 + C47121) +
                              C47147) +
                    C47043 * ae) +
          C47364 * ae)) /
        C46743;
    const double C7424 =
        (2 * C46795 * C47367 +
         C46795 *
             (C47367 + (C46886 + C46794 * (C46794 * C46894 + C47121) + C47147) *
                           C46989)) /
        C46743;
    const double C363 = C113 * C326;
    const double C705 = C113 * C328;
    const double C569 = C47838 * C530;
    const double C11199 = C47935 * C530;
    const double C32160 = C47935 * C530;
    const double C821 = C47838 * C532;
    const double C10515 = C47935 * C532;
    const double C31476 = C47935 * C532;
    const double C1000 = C113 * C982;
    const double C11052 = C10484 * C982;
    const double C32013 = C31445 * C982;
    const double C1003 = C47838 * C983;
    const double C11057 = C47935 * C983;
    const double C32018 = C47935 * C983;
    const double C162 = C113 * C120;
    const double C365 = C113 * C309;
    const double C707 = C113 * C310;
    const double C568 = C113 * C512;
    const double C11198 = C10484 * C512;
    const double C32159 = C31445 * C512;
    const double C820 = C113 * C513;
    const double C10514 = C10484 * C513;
    const double C31475 = C31445 * C513;
    const double C1002 = C113 * C974;
    const double C11056 = C10484 * C974;
    const double C32017 = C31445 * C974;
    const double C2244 = C2237 + C2238;
    const double C11422 = C11412 + C11413;
    const double C32383 = C32373 + C32374;
    const double C2235 = C113 * C1343;
    const double C11408 = C10484 * C1343;
    const double C32369 = C31445 * C1343;
    const double C1645 = C113 * C1349;
    const double C10704 = C10484 * C1349;
    const double C31665 = C31445 * C1349;
    const double C2366 = C2359 + C2360;
    const double C10920 = C10902 + C10903;
    const double C31881 = C31863 + C31864;
    const double C1492 = C1488 * C114;
    const double C5013 = C1488 * C4828;
    const double C16363 = C1488 * C16186;
    const double C1658 = C1654 * C114;
    const double C5653 = C1654 * C4828;
    const double C16995 = C1654 * C16186;
    const double C7291 = C7289 * C4828;
    const double C18537 = C7289 * C16186;
    const double C47421 = C47419 + C47416;
    const double C47378 = C47377 + C47371;
    const double C5908 = C5898 + C5899;
    const double C6424 = C6418 + C6419;
    const double C11936 = C11928 + C11929;
    const double C32897 = C32889 + C32890;
    const double C5909 = C5900 + C5901;
    const double C6087 = C6076 + C6077;
    const double C12144 = C12138 + C12139;
    const double C33105 = C33099 + C33100;
    const double C6425 = C6420 + C6421;
    const double C11938 = C11932 + C11933;
    const double C32899 = C32893 + C32894;
    const double C13004 = C12998 + C12999;
    const double C33957 = C33951 + C33952;
    const double C47458 = C47456 + C47453;
    const double C28395 = C28389 + C28390;
    const double C39655 = C39649 + C39650;
    const double C22564 = C47838 * C6059;
    const double C27546 = C47935 * C6059;
    const double C38810 = C47935 * C6059;
    const double C22916 = C47838 * C6559;
    const double C26894 = C47935 * C6559;
    const double C38158 = C47935 * C6559;
    const double C22443 = C113 * C5885;
    const double C22563 = C113 * C6057;
    const double C27545 = C10484 * C6057;
    const double C38809 = C31445 * C6057;
    const double C22915 = C113 * C6557;
    const double C26893 = C10484 * C6557;
    const double C38157 = C31445 * C6557;
    const double C47143 = ae * C47141;
    const double C23203 =
        (3 * C47046 + ae * C47092 +
         C46795 * (2 * C47042 + ae * C47080 + C46795 * C47139) +
         ae * (3 * (C47006 + C46795 * C47150 + C47157 * ae) +
               C46795 * (2 * C47150 +
                         C46795 * (C47100 +
                                   C46795 * (C46795 * C46794 * C46866 +
                                             C47128 * ae) +
                                   C46795 * C47128 * ae) +
                         C47161 * ae) +
               (2 * C47157 + C46795 * C47161) * ae) +
         C46794 *
             (ae * (3 * C47141 +
                    C46795 *
                        (2 * C47129 +
                         C46795 * (C46855 +
                                   C46795 * (C46795 * C46866 + C46963 * ae) +
                                   C46795 * C46963 * ae) +
                         C47162 * ae) +
                    (2 * C47122 + C46795 * C47162) * ae) +
              C46794 *
                  (3 * C47139 + ae * (2 * C47123 + C46795 * C47163) +
                   C46795 * (2 * C47132 + ae * C47163 +
                             C46795 * (C46827 + ae * C46795 * C46905 +
                                       C46795 * (ae * C46905 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C47464 = C46795 * C47141;
    const double C12651 =
        (4 * (2 * C47329 + C46795 * C47412 + C47330 * ae) +
         C46795 * (3 * C47412 +
                   C46795 * (2 * C47065 + C46795 * C47141 + C47079 * ae) +
                   C47411 * ae) +
         (3 * C47330 + C46795 * C47411) * ae) /
        C46743;
    const double C47435 = C46794 * C47434;
    const double C23202 =
        (3 * (C47367 + C47434 * C46989) +
         C46795 *
             (2 * C46795 * C47434 +
              C46795 *
                  (C47434 + (C46894 + C46794 * (C46794 * C46905 + C46963 * ae) +
                             C47128 * ae) *
                                C46989))) /
        C46743;
    const double C364 = C47838 * C339;
    const double C706 = C47838 * C340;
    const double C567 = C47838 * C542;
    const double C11195 = C47935 * C542;
    const double C32156 = C47935 * C542;
    const double C819 = C47838 * C543;
    const double C10511 = C47935 * C543;
    const double C31472 = C47935 * C543;
    const double C1001 = C47838 * C989;
    const double C11053 = C47935 * C989;
    const double C32014 = C47935 * C989;
    const double C2358 = C47838 * C2078;
    const double C10899 = C47935 * C2078;
    const double C31860 = C47935 * C2078;
    const double C1491 = C1487 * C47821;
    const double C5012 = C1487 * C47933;
    const double C16362 = C1487 * C47933;
    const double C6064 =
        (2 * (ae * (C46852 + C46795 * (C46795 * C46863 + C46960 * ae) +
                    C46795 * C46960 * ae) +
              C46794 * C47060) +
         ae * (C46939 + C46795 * (C46795 * C47030 + C47059 * ae) +
               C46795 * C47059 * ae) +
         C46794 *
             (C47060 +
              ae * (C47020 + C46795 * (C46795 * C46794 * C47023 + C47056 * ae) +
                    C46795 * C47056 * ae) +
              C46794 *
                  (ae * (C46863 + C46795 * (C46795 * C47023 + C47051 * ae) +
                         C46795 * C47051 * ae) +
                   C46794 * (C47022 + ae * C46795 * C47052 +
                             C46795 * (ae * C47052 + C46795 * C46802 *
                                                         std::pow(C46799, 8) *
                                                         bs[8] * C46800))))) /
        C46763;
    const double C6952 =
        (ae * (3 * (C46852 + C46795 * C47072 + C47082 * ae) +
               C46795 * (2 * C47072 +
                         C46795 * (C46863 +
                                   C46795 * (C46795 * C47023 + C47051 * ae) +
                                   C46795 * C47051 * ae) +
                         C47085 * ae) +
               (2 * C47082 + C46795 * C47085) * ae) +
         C46794 * (3 * C47060 + ae * (2 * C47048 + C46795 * C47086) +
                   C46795 * (2 * C47054 + ae * C47086 +
                             C46795 * (C47022 + ae * C46795 * C47052 +
                                       C46795 * (ae * C47052 +
                                                 C46795 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C7428 =
        (2 * C46979 + ae * C46995 + C46795 * C47060 +
         ae * (2 * (C46795 * C47020 + C46961 * ae) +
               C46795 *
                   (C47020 + C46795 * (C46795 * C46794 * C47023 + C47056 * ae) +
                    C46795 * C47056 * ae) +
               (C46961 + C47056 * C46989) * ae) +
         C46794 *
             (ae *
                  (2 * C47072 +
                   C46795 * (C46863 + C46795 * (C46795 * C47023 + C47051 * ae) +
                             C46795 * C47051 * ae) +
                   C47085 * ae) +
              C46794 *
                  (2 * C47054 + ae * C47086 +
                   C46795 * (C47022 + ae * C46795 * C47052 +
                             C46795 * (ae * C47052 + C46795 * C46802 *
                                                         std::pow(C46799, 8) *
                                                         bs[8] * C46800))))) /
        C46763;
    const double C47117 = C47105 + C47115;
    const double C47169 = C47168 + C47167;
    const double C47155 = C47154 + C47153;
    const double C46872 = C46862 + C46871;
    const double C5892 =
        (4 * (2 * C46938 + ae * C46939 + C46794 * C47033) +
         ae * (3 * C46939 + C46794 * C47034) +
         C46794 * (3 * C47033 + ae * C47034 +
                   C46794 * (2 * C47029 + ae * C47030 +
                             C46794 * (C47022 + ae * C46794 * C47023 +
                                       C46794 * (ae * C47023 +
                                                 C46794 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C6564 =
        (3 * (C46979 + ae * (C46795 * C47020 + C46961 * ae) + C46794 * C47074) +
         ae * (C46795 * C47034 + (2 * C46961 + C46794 * C47059) * ae) +
         C46794 *
             (2 * C47074 + ae * (C46795 * C47030 + C47059 * ae) +
              C46794 *
                  (C47054 + ae * (C46795 * C46794 * C47023 + C47056 * ae) +
                   C46794 * (ae * (C46795 * C47023 + C47051 * ae) +
                             C46794 * (ae * C47052 + C46795 * C46802 *
                                                         std::pow(C46799, 8) *
                                                         bs[8] * C46800))))) /
        C46763;
    const double C5889 = (4 * (2 * C46934 + C46794 * C46939) +
                          C46794 * (3 * C46939 + C46794 * C47034)) /
                         C46743;
    const double C6061 =
        (2 * C46934 + C46794 * C46939 +
         C46795 * (C46795 * C47034 + C47375 * ae) + C46795 * C47375 * ae) /
        C46743;
    const double C6561 = (C46795 * (3 * C46939 + C46794 * C47034) +
                          (3 * C47282 + C46794 * C47375) * ae) /
                         C46743;
    const double C47118 = C47103 + C47116;
    const double C46911 = C46901 + C46910;
    const double C12656 =
        (4 * (2 * C46979 + ae * C46995 + C46795 * C47060) +
         ae * (3 * C46995 + C46795 * C47096) +
         C46795 * (3 * C47060 + ae * C47096 +
                   C46795 * (2 * C47054 + ae * C47086 +
                             C46795 * (C47022 + ae * C46795 * C47052 +
                                       C46795 * (ae * C47052 +
                                                 C46795 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C12654 = (4 * (2 * C46993 + C46795 * C46995) +
                           C46795 * (3 * C46995 + C46795 * C47096)) /
                          C46743;
    const double C47180 = C47178 + C47179;
    const double C172 = C160 + C161;
    const double C121 = 5 * (3 * C47212 + C46802 * C47218) +
                        C46802 * (4 * C47218 + C46802 * C47226);
    const double C311 = 3 * C47212 + C46802 * C47218 + C47226 * C46929;
    const double C514 = 3 * C47212 + C46802 * C47218 + C47226 * C46989;
    const double C699 = C46794 * (4 * C47218 + C46802 * C47226);
    const double C812 = C46795 * (4 * C47218 + C46802 * C47226);
    const double C975 = C46795 * C46794 * C47226;
    const double C22436 = 5 * (3 * C47274 + C46794 * C47364) +
                          C46794 * (4 * C47364 + C46794 * C47431);
    const double C22556 = 3 * C47274 + C46794 * C47364 + C47431 * C46989;
    const double C22908 = C46795 * (4 * C47364 + C46794 * C47431);
    const double C44156 = 5 * (3 * C47330 + C46795 * C47411) +
                          C46795 * (4 * C47411 + C46795 * C47469);
    const double C47904 = C47868 / C47581;
    const double C47939 = C47908 / C47585;
    const double C47940 = C47910 + C47876;
    const double C697 = C47876 - C47602 / C47599;
    const double C47907 = C47872 / C47581;
    const double C47920 = C47886 / C47581;
    const double C47946 = C47923 / C47585;
    const double C47947 = C47924 + C47890;
    const double C1470 = C47890 - C47682 / C47599;
    const double C47922 = C47887 / C47581;
    const double C47926 = C47892 / C47581;
    const double C47949 = C47929 / C47585;
    const double C47950 = C47930 + C47896;
    const double C2350 = C47896 - C47724 / C47599;
    const double C47928 = C47893 / C47581;
    const double C186 = C180 + C181;
    const double C392 = C385 + C386;
    const double C704 = C387 + C388;
    const double C595 = C588 + C589;
    const double C817 = C590 + C591;
    const double C1016 = C1012 + C1013;
    const double C2371 = C2367 * C47821;
    const double C7286 = C2367 * C4823;
    const double C18538 = C2367 * C16181;
    const double C2249 = C2245 * C47821;
    const double C5173 = C2245 * C47933;
    const double C7150 = C2245 * C4823;
    const double C16519 = C2245 * C47933;
    const double C18404 = C2245 * C16181;
    const double C1659 = C1655 * C47821;
    const double C5651 = C1655 * C47933;
    const double C6422 = C1655 * C4823;
    const double C16993 = C1655 * C47933;
    const double C17702 = C1655 * C16181;
    const double C7148 = C6086 * C47933;
    const double C18402 = C6086 * C47933;
    const double C7290 = C7288 * C47933;
    const double C18536 = C7288 * C47933;
    const double C28393 = C28385 + C28386;
    const double C39653 = C39645 + C39646;
    const double C22441 = C113 * C5888;
    const double C22561 = C113 * C6060;
    const double C27541 = C10484 * C6060;
    const double C38805 = C31445 * C6060;
    const double C22913 = C113 * C6560;
    const double C26889 = C10484 * C6560;
    const double C38153 = C31445 * C6560;
    const double C23551 = C113 * C7424;
    const double C27067 = C10484 * C7424;
    const double C38331 = C31445 * C7424;
    const double C173 = C162 + C163;
    const double C378 = C365 + C366;
    const double C710 = C707 + C708;
    const double C581 = C568 + C569;
    const double C11204 = C11198 + C11199;
    const double C32165 = C32159 + C32160;
    const double C823 = C820 + C821;
    const double C10532 = C10514 + C10515;
    const double C31493 = C31475 + C31476;
    const double C1009 = C1002 + C1003;
    const double C11062 = C11056 + C11057;
    const double C32023 = C32017 + C32018;
    const double C2248 = C2244 * C114;
    const double C5179 = C2244 * C4828;
    const double C16525 = C2244 * C16186;
    const double C2243 = C2235 + C2236;
    const double C11420 = C11408 + C11409;
    const double C32381 = C32369 + C32370;
    const double C1653 = C1645 + C1646;
    const double C10724 = C10704 + C10705;
    const double C31685 = C31665 + C31666;
    const double C2370 = C2366 * C114;
    const double C12653 =
        (4 * (2 * C47336 + C46795 * C47421 + C47337 * ae) +
         C46795 *
             (3 * C47421 +
              C46795 *
                  (2 * C47072 +
                   C46795 * (C46863 + C46795 * (C46795 * C47023 + C47051 * ae) +
                             C46795 * C47051 * ae) +
                   C47085 * ae) +
              C47420 * ae) +
         (3 * C47337 + C46795 * C47420) * ae) /
        C46743;
    const double C5890 =
        (4 * (2 * C47281 + C46794 * C47378 + C47282 * ae) +
         C46794 *
             (3 * C47378 +
              C46794 *
                  (2 * C47374 +
                   C46794 * (C46902 + C46794 * (C46794 * C47052 + C47051 * ae) +
                             C47056 * ae) +
                   C47059 * ae) +
              C47375 * ae) +
         (3 * C47282 + C46794 * C47375) * ae) /
        C46743;
    const double C6062 =
        (2 * C47281 + C46794 * C47378 + C47282 * ae +
         (2 * C47374 +
          C46794 * (C46902 + C46794 * (C46794 * C47052 + C47051 * ae) +
                    C47056 * ae) +
          C47059 * ae) *
             C46989) /
        C46743;
    const double C6562 =
        (C46795 *
         (3 * C47378 +
          C46794 *
              (2 * C47374 +
               C46794 * (C46902 + C46794 * (C46794 * C47052 + C47051 * ae) +
                         C47056 * ae) +
               C47059 * ae) +
          C47375 * ae)) /
        C46743;
    const double C7426 =
        (2 * C46795 * C47378 +
         C46795 * (C47378 + (C46902 + C46794 * (C46794 * C47052 + C47051 * ae) +
                             C47056 * ae) *
                                C46989)) /
        C46743;
    const double C6220 = C5908 * C47933;
    const double C17502 = C5908 * C47933;
    const double C6426 = C6424 * C47933;
    const double C17700 = C6424 * C47933;
    const double C6221 = C5909 * C4828;
    const double C17503 = C5909 * C16186;
    const double C7149 = C6087 * C4828;
    const double C18403 = C6087 * C16186;
    const double C6427 = C6425 * C4828;
    const double C17701 = C6425 * C16186;
    const double C27927 =
        (4 * (2 * C47391 + C46795 * C47458 + C47392 * ae) +
         C46795 * (3 * C47458 +
                   C46795 * (2 * C47150 +
                             C46795 * (C47100 +
                                       C46795 * (C46795 * C46794 * C46866 +
                                                 C47128 * ae) +
                                       C46795 * C47128 * ae) +
                             C47161 * ae) +
                   C47457 * ae) +
         (3 * C47392 + C46795 * C47457) * ae) /
        C46743;
    const double C22446 = C22443 + C22444;
    const double C22566 = C22563 + C22564;
    const double C27551 = C27545 + C27546;
    const double C38815 = C38809 + C38810;
    const double C22918 = C22915 + C22916;
    const double C26903 = C26893 + C26894;
    const double C38167 = C38157 + C38158;
    const double C47144 = C47143 + C47142;
    const double C47468 = C47463 + C47464;
    const double C47436 = C47425 + C47435;
    const double C377 = C363 + C364;
    const double C709 = C705 + C706;
    const double C580 = C566 + C567;
    const double C11202 = C11194 + C11195;
    const double C32163 = C32155 + C32156;
    const double C822 = C818 + C819;
    const double C10530 = C10510 + C10511;
    const double C31491 = C31471 + C31472;
    const double C1008 = C1000 + C1001;
    const double C11060 = C11052 + C11053;
    const double C32021 = C32013 + C32014;
    const double C2365 = C2357 + C2358;
    const double C10918 = C10898 + C10899;
    const double C31879 = C31859 + C31860;
    const double C23549 =
        (2 * (ae * (2 * C47065 + C46795 * C47141 + C47079 * ae) +
              C46794 * C47169) +
         ae * (2 * (C46795 * C47013 + C47043 * ae) +
               C46795 * (C47013 + C46795 * (C46795 * C47109 + C47133 * ae) +
                         C46795 * C47133 * ae) +
               (C47043 + C47133 * C46989) * ae) +
         C46794 *
             (C47169 +
              ae *
                  (2 * C47150 +
                   C46795 * (C47100 +
                             C46795 * (C46795 * C46794 * C46866 + C47128 * ae) +
                             C46795 * C47128 * ae) +
                   C47161 * ae) +
              C46794 *
                  (ae * (2 * C47129 +
                         C46795 * (C46855 +
                                   C46795 * (C46795 * C46866 + C46963 * ae) +
                                   C46795 * C46963 * ae) +
                         C47162 * ae) +
                   C46794 * (2 * C47132 + ae * C47163 +
                             C46795 * (C46827 + ae * C46795 * C46905 +
                                       C46795 * (ae * C46905 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C27929 =
        (ae * (4 * (2 * C47065 + C46795 * C47141 + C47079 * ae) +
               C46795 * (3 * C47141 +
                         C46795 * (2 * C47129 +
                                   C46795 * (C46855 +
                                             C46795 * (C46795 * C46866 +
                                                       C46963 * ae) +
                                             C46795 * C46963 * ae) +
                                   C47162 * ae) +
                         C47175 * ae) +
               (3 * C47079 + C46795 * C47175) * ae) +
         C46794 *
             (4 * C47169 + ae * (3 * C47080 + C46795 * C47176) +
              C46795 *
                  (3 * C47139 + ae * C47176 +
                   C46795 * (2 * C47132 + ae * C47163 +
                             C46795 * (C46827 + ae * C46795 * C46905 +
                                       C46795 * (ae * C46905 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C341 =
        (3 * C46820 + C46802 * C46831 + ae * C46794 * C46872 +
         C46794 * (ae * C46872 +
                   C46794 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C702 =
        (ae * (4 * C46859 + C46802 * C46872) +
         C46794 * (4 * C46831 +
                   C46802 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C134 = (5 * (3 * C46849 + C46802 * C46859) +
                         C46802 * (4 * C46859 + C46802 * C46872)) /
                        C46743;
    const double C330 =
        (3 * C46849 + C46802 * C46859 + C46872 * C46929) / C46743;
    const double C533 =
        (3 * C46849 + C46802 * C46859 +
         C46795 * (C46795 * C46872 + C47226 * ae) + C46795 * C47226 * ae) /
        C46743;
    const double C700 = (C46794 * (4 * C46859 + C46802 * C46872)) / C46743;
    const double C813 = (C46795 * (4 * C46859 + C46802 * C46872) +
                         (4 * C47218 + C46802 * C47226) * ae) /
                        C46743;
    const double C984 =
        (C46795 * C46794 * C46872 + C46794 * C47226 * ae) / C46743;
    const double C22439 =
        (5 * (3 * C47017 + ae * C47018 + C46794 * C47117) +
         ae * (4 * C47018 + C46794 * C47118) +
         C46794 *
             (4 * C47117 + ae * C47118 +
              C46794 *
                  (3 * C47113 + ae * C47114 +
                   C46794 * (2 * C47107 + ae * C47109 +
                             C46794 * (C46827 + ae * C46794 * C46866 +
                                       C46794 * (ae * C46866 +
                                                 C46794 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C22911 =
        (4 * (2 * C47067 + ae * (C46795 * C47013 + C47043 * ae) +
              C46794 * C47155) +
         ae * (C46795 * C47118 + (3 * C47043 + C46794 * C47140) * ae) +
         C46794 *
             (3 * C47155 + ae * (C46795 * C47114 + C47140 * ae) +
              C46794 *
                  (2 * C47151 + ae * (C46795 * C47109 + C47133 * ae) +
                   C46794 *
                       (C47132 + ae * (C46795 * C46794 * C46866 + C47128 * ae) +
                        C46794 * (ae * (C46795 * C46866 + C46963 * ae) +
                                  C46794 * (ae * C46905 +
                                            C46795 * std::pow(C46799, 8) *
                                                bs[8] * C46800)))))) /
        C46763;
    const double C22437 = (5 * (3 * C46932 + C46794 * C47018) +
                           C46794 * (4 * C47018 + C46794 * C47118)) /
                          C46743;
    const double C22557 =
        (3 * C46932 + C46794 * C47018 +
         C46795 * (C46795 * C47118 + C47431 * ae) + C46795 * C47431 * ae) /
        C46743;
    const double C22909 = (C46795 * (4 * C47018 + C46794 * C47118) +
                           (4 * C47364 + C46794 * C47431) * ae) /
                          C46743;
    const double C544 =
        (3 * C46820 + C46802 * C46831 + ae * C46795 * C46911 +
         C46795 * (ae * C46911 +
                   C46795 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C815 =
        (ae * (4 * C46898 + C46802 * C46911) +
         C46795 * (4 * C46831 +
                   C46802 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C990 =
        (ae * (C46795 * C46872 +
               (3 * (C46918 + C46920 * C46810) +
                C46802 * (2 * C46802 * C46920 +
                          C46802 * (C46920 + C46816 * C46815 * C46810))) *
                   ae) +
         C46794 * (ae * C46911 +
                   C46795 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C135 = (5 * (3 * C46888 + C46802 * C46898) +
                         C46802 * (4 * C46898 + C46802 * C46911)) /
                        C46743;
    const double C331 =
        (3 * C46888 + C46802 * C46898 +
         C46794 * (C46794 * C46911 + C47226 * ae) + C46794 * C47226 * ae) /
        C46743;
    const double C534 =
        (3 * C46888 + C46802 * C46898 + C46911 * C46989) / C46743;
    const double C701 = (C46794 * (4 * C46898 + C46802 * C46911) +
                         (4 * C47218 + C46802 * C47226) * ae) /
                        C46743;
    const double C814 = (C46795 * (4 * C46898 + C46802 * C46911)) / C46743;
    const double C985 = (C46795 * (C46794 * C46911 + C47226 * ae)) / C46743;
    const double C44159 =
        (5 * (3 * C47046 + ae * C47092 + C46795 * C47169) +
         ae * (4 * C47092 + C46795 * C47180) +
         C46795 *
             (4 * C47169 + ae * C47180 +
              C46795 *
                  (3 * C47139 + ae * C47176 +
                   C46795 * (2 * C47132 + ae * C47163 +
                             C46795 * (C46827 + ae * C46795 * C46905 +
                                       C46795 * (ae * C46905 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C44158 = (5 * (3 * C46991 + C46795 * C47092) +
                           C46795 * (4 * C47092 + C46795 * C47180)) /
                          C46743;
    const double C182 = C172 * C47821;
    const double C47960 = C47904 + C47952;
    const double C696 = C47939 - (C47604 * C47586) / C47581;
    const double C111 = C47940 / C47585 - C47602 / C47911;
    const double C47953 = C47907 + C47939;
    const double C47961 = C47920 + C47956;
    const double C1469 = C47946 - (C47684 * C47673) / C47581;
    const double C1197 = C47947 / C47585 - C47682 / C47911;
    const double C47957 = C47922 + C47946;
    const double C47962 = C47926 + C47958;
    const double C2349 = C47949 - (C47726 * C47715) / C47581;
    const double C2058 = C47950 / C47585 - C47724 / C47911;
    const double C47959 = C47928 + C47949;
    const double C22445 = C22441 + C22442;
    const double C22565 = C22561 + C22562;
    const double C27549 = C27541 + C27542;
    const double C38813 = C38805 + C38806;
    const double C22917 = C22913 + C22914;
    const double C26901 = C26889 + C26890;
    const double C38165 = C38153 + C38154;
    const double C23555 = C23551 + C23552;
    const double C27083 = C27067 + C27068;
    const double C38347 = C38331 + C38332;
    const double C183 = C173 * C114;
    const double C390 = C378 * C114;
    const double C5313 = C378 * C4828;
    const double C16659 = C378 * C16186;
    const double C712 = C710 * C114;
    const double C4843 = C710 * C4828;
    const double C16201 = C710 * C16186;
    const double C593 = C581 * C114;
    const double C825 = C823 * C114;
    const double C1015 = C1009 * C114;
    const double C5447 = C1009 * C4828;
    const double C16793 = C1009 * C16186;
    const double C2247 = C2243 * C47821;
    const double C5178 = C2243 * C47933;
    const double C16524 = C2243 * C47933;
    const double C1657 = C1653 * C47821;
    const double C5652 = C1653 * C47933;
    const double C16994 = C1653 * C47933;
    const double C22559 =
        (3 * (C47046 +
              ae * (C47006 + C46795 * (C46795 * C47100 + C47040 * ae) +
                    C46795 * C47040 * ae) +
              C46794 * C47144) +
         ae * (C47018 + C46795 * (C46795 * C47114 + C47140 * ae) +
               C46795 * C47140 * ae) +
         C46794 *
             (2 * C47144 +
              ae * (C47013 + C46795 * (C46795 * C47109 + C47133 * ae) +
                    C46795 * C47133 * ae) +
              C46794 *
                  (C47139 +
                   ae * (C47100 +
                         C46795 * (C46795 * C46794 * C46866 + C47128 * ae) +
                         C46795 * C47128 * ae) +
                   C46794 * (ae * (C46855 +
                                   C46795 * (C46795 * C46866 + C46963 * ae) +
                                   C46795 * C46963 * ae) +
                             C46794 * (C46827 + ae * C46795 * C46905 +
                                       C46795 * (ae * C46905 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C47470 = C47468 + C47465;
    const double C47437 = C47436 + C47427;
    const double C389 = C377 * C47821;
    const double C5312 = C377 * C47933;
    const double C16658 = C377 * C47933;
    const double C711 = C709 * C47821;
    const double C4842 = C709 * C47933;
    const double C16200 = C709 * C47933;
    const double C592 = C580 * C47821;
    const double C824 = C822 * C47821;
    const double C1014 = C1008 * C47821;
    const double C5446 = C1008 * C47933;
    const double C16792 = C1008 * C47933;
    const double C2369 = C2365 * C47821;
    const double C108 =
        (C47951 + 2 * C47595) / C47585 - (C47960 * C47586) / C47581;
    const double C109 =
        (C47938 + 2 * C47604 + C47960) / C47585 - (C47953 * C47586) / C47581;
    const double C110 = (C47909 + C47601 / C47581 + C47953) / C47585 -
                        (C47940 * C47586) / C47581;
    const double C1194 =
        (C47954 + 2 * C47677) / C47585 - (C47961 * C47673) / C47581;
    const double C1195 =
        (C47942 + 2 * C47684 + C47961) / C47585 - (C47957 * C47673) / C47581;
    const double C1196 = (C47915 + C47681 / C47581 + C47957) / C47585 -
                         (C47947 * C47673) / C47581;
    const double C2055 =
        (C47955 + 2 * C47719) / C47585 - (C47962 * C47715) / C47581;
    const double C2056 =
        (C47944 + 2 * C47726 + C47962) / C47585 - (C47959 * C47715) / C47581;
    const double C2057 = (C47918 + C47723 / C47581 + C47959) / C47585 -
                         (C47950 * C47715) / C47581;
    const double C44157 =
        (5 * (3 * C47412 + C46795 * C47470 + C47411 * ae) +
         C46795 * (4 * C47470 +
                   C46795 * (3 * C47141 +
                             C46795 * (2 * C47129 +
                                       C46795 * (C46855 +
                                                 C46795 * (C46795 * C46866 +
                                                           C46963 * ae) +
                                                 C46795 * C46963 * ae) +
                                       C47162 * ae) +
                             C47175 * ae) +
                   C47469 * ae) +
         (4 * C47411 + C46795 * C47469) * ae) /
        C46743;
    const double C22438 =
        (5 * (3 * C47367 + C46794 * C47437 + C47364 * ae) +
         C46794 * (4 * C47437 +
                   C46794 * (3 * C47434 +
                             C46794 * (2 * C47430 +
                                       C46794 * (C46894 +
                                                 C46794 * (C46794 * C46905 +
                                                           C46963 * ae) +
                                                 C47128 * ae) +
                                       C47133 * ae) +
                             C47140 * ae) +
                   C47431 * ae) +
         (4 * C47364 + C46794 * C47431) * ae) /
        C46743;
    const double C22558 =
        (3 * C47367 + C46794 * C47437 + C47364 * ae +
         (3 * C47434 +
          C46794 *
              (2 * C47430 +
               C46794 * (C46894 + C46794 * (C46794 * C46905 + C46963 * ae) +
                         C47128 * ae) +
               C47133 * ae) +
          C47140 * ae) *
             C46989) /
        C46743;
    const double C22910 =
        (C46795 *
         (4 * C47437 +
          C46794 *
              (3 * C47434 +
               C46794 * (2 * C47430 +
                         C46794 * (C46894 +
                                   C46794 * (C46794 * C46905 + C46963 * ae) +
                                   C47128 * ae) +
                         C47133 * ae) +
               C47140 * ae) +
          C47431 * ae)) /
        C46743;
    const double C23548 =
        (2 * C46795 * C47437 +
         C46795 *
             (C47437 +
              (2 * C47430 +
               C46794 * (C46894 + C46794 * (C46794 * C46905 + C46963 * ae) +
                         C47128 * ae) +
               C47133 * ae) *
                  C46989)) /
        C46743;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47838 * C122) * C114 +
                    (C113 * C123 + C47838 * C136) * C47821) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C47636 * C47677 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47838 * C334) * C47821 +
                    (C113 * C304 + C47838 * C317) * C114) *
                       C103) *
                      C47636 * C47684 +
                  (((C113 * C305 + C47838 * C318) * C114 +
                    (C113 * C319 + C47838 * C335) * C47821) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C47636 * C2948) *
                     C47595 +
                 (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                      C47636 * C47684 -
                  (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                      C47636 * C47677 -
                  ((C389 + C390) * C105 + (C386 + C385) * C104 +
                   (C384 + C383) * C103) *
                      C47636 * C2948) *
                     C47604 +
                 ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
                      C47677 -
                  ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                      C47636 * C47684 +
                  (C392 * C103 + (C390 + C389) * C104 +
                   ((C113 * C311 + C47838 * C330) * C114 +
                    (C113 * C331 + C47838 * C341) * C47821) *
                       C105) *
                      C47636 * C2948) *
                     C2951)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47884 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47838 * C537) * C47821 +
                     (C113 * C507 + C47838 * C520) * C114) *
                        C103) *
                       C47723) *
                      C47677 +
                  ((((C113 * C971 + C47838 * C976) * C114 +
                     (C113 * C977 + C47838 * C986) * C47821) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47723 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C47884) *
                      C47684 +
                  ((((C113 * C305 + C47838 * C318) * C114 +
                     (C113 * C319 + C47838 * C335) * C47821) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C47884 -
                   ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                    ((C113 * C1353 + C47838 * C1366) * C47821 +
                     (C113 * C1339 + C47838 * C1354) * C114) *
                        C103) *
                       C47723) *
                      C2948) *
                     C2688 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47723 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47884) *
                      C47677 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47884 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47723) *
                      C47684 +
                  (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
                    ((C113 * C1640 + C47838 * C1641) * C114 +
                     (C113 * C1642 + C47838 * C1643) * C47821) *
                        C105) *
                       C47723 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C47884) *
                      C2948) *
                     C47601)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C47961 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47957 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47947 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47838 * C1220) * C47821 +
             (C113 * C1202 + C47838 * C1211) * C114) *
                C103) *
               C47636 * C47925) *
              C2688 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C47957 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C47961 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47947 +
           ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
            ((C113 * C1474 + C47838 * C1475) * C114 +
             (C113 * C1476 + C47838 * C1477) * C47821) *
                C105) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C2580 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47681) *
              C47960 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C47681 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C2580) *
              C47953 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C2580 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47636 * C47681) *
              C47940 +
          ((C704 * C103 + (C712 + C711) * C104 +
            ((C113 * C699 + C47838 * C700) * C114 +
             (C113 * C701 + C47838 * C702) * C47821) *
                C105) *
               C47636 * C47681 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47955 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47944 +
            (((C113 * C508 + C47838 * C521) * C114 +
              (C113 * C522 + C47838 * C538) * C47821) *
                 C103 +
             (C586 + C587) * C104 + C595 * C105) *
                C47918) *
               C2580 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47944 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C47955 -
            ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
             ((C113 * C1347 + C47838 * C1363) * C47821 +
              (C113 * C1336 + C47838 * C1348) * C114) *
                 C103) *
                C47918) *
               C47681) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47944 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47955 -
            ((C592 + C593) * C105 + (C589 + C588) * C104 +
             (C587 + C586) * C103) *
                C47918) *
               C2580 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47955 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47944 +
            ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
             ((C113 * C2230 + C47838 * C2231) * C114 +
              (C113 * C2232 + C47838 * C2233) * C47821) *
                 C105) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47884 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47838 * C537) * C47821 +
                     (C113 * C507 + C47838 * C520) * C114) *
                        C103) *
                       C47723) *
                      C2580 +
                  ((((C113 * C971 + C47838 * C976) * C114 +
                     (C113 * C977 + C47838 * C986) * C47821) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47723 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C47884) *
                      C47681) *
                     C47595 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47723 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47884) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47884 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47723) *
                      C47681) *
                     C47604 +
                 (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47884 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47723) *
                      C2580 +
                  ((C1016 * C103 + (C1015 + C1014) * C104 +
                    ((C113 * C975 + C47838 * C984) * C114 +
                     (C113 * C985 + C47838 * C990) * C47821) *
                        C105) *
                       C47723 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C47884) *
                      C47681) *
                     C2951)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C2580 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47681) *
              C47960 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C47681 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C2580) *
              C47953 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C2580 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47636 * C47681) *
              C47940 +
          ((C704 * C103 + (C712 + C711) * C104 +
            ((C113 * C699 + C47838 * C700) * C114 +
             (C113 * C701 + C47838 * C702) * C47821) *
                C105) *
               C47636 * C47681 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C47961 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47957 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47947 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47838 * C1220) * C47821 +
             (C113 * C1202 + C47838 * C1211) * C114) *
                C103) *
               C47636 * C47925) *
              C2688 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C47957 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C47961 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47947 +
           ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
            ((C113 * C1474 + C47838 * C1475) * C114 +
             (C113 * C1476 + C47838 * C1477) * C47821) *
                C105) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C3342 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47838 * C537) * C47821 +
                     (C113 * C507 + C47838 * C520) * C114) *
                        C103) *
                       C47723) *
                      C47677 +
                  ((((C113 * C971 + C47838 * C976) * C114 +
                     (C113 * C977 + C47838 * C986) * C47821) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47723 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C3342) *
                      C47684 +
                  ((((C113 * C305 + C47838 * C318) * C114 +
                     (C113 * C319 + C47838 * C335) * C47821) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C3342 -
                   ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                    ((C113 * C1353 + C47838 * C1366) * C47821 +
                     (C113 * C1339 + C47838 * C1354) * C114) *
                        C103) *
                       C47723) *
                      C2948) *
                     C47869 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47723 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C3342) *
                      C47677 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C3342 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47723) *
                      C47684 +
                  (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
                    ((C113 * C1640 + C47838 * C1641) * C114 +
                     (C113 * C1642 + C47838 * C1643) * C47821) *
                        C105) *
                       C47723 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C3342) *
                      C2948) *
                     C47601)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47838 * C122) * C114 +
                    (C113 * C123 + C47838 * C136) * C47821) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C47719 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47838 * C537) * C47821 +
                    (C113 * C507 + C47838 * C520) * C114) *
                       C103) *
                      C47726 +
                  (((C113 * C508 + C47838 * C521) * C114 +
                    (C113 * C522 + C47838 * C538) * C47821) *
                       C103 +
                   (C586 + C587) * C104 + C595 * C105) *
                      C3850) *
                     C47677 +
                 ((((C113 * C971 + C47838 * C976) * C114 +
                    (C113 * C977 + C47838 * C986) * C47821) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C47726 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47838 * C334) * C47821 +
                    (C113 * C304 + C47838 * C317) * C114) *
                       C103) *
                      C47719 -
                  ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
                   ((C113 * C1347 + C47838 * C1363) * C47821 +
                    (C113 * C1336 + C47838 * C1348) * C114) *
                       C103) *
                      C3850) *
                     C47684 +
                 ((((C113 * C305 + C47838 * C318) * C114 +
                    (C113 * C319 + C47838 * C335) * C47821) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C47719 -
                  ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                   ((C113 * C1353 + C47838 * C1366) * C47821 +
                    (C113 * C1339 + C47838 * C1354) * C114) *
                       C103) *
                      C47726 +
                  (((C113 * C1340 + C47838 * C1355) * C114 +
                    (C113 * C1356 + C47838 * C1367) * C47821) *
                       C103 +
                   ((C113 * C1341 + C47838 * C1357) * C114 +
                    (C113 * C1358 + C47838 * C1368) * C47821) *
                       C104 +
                   ((C113 * C1342 + C47838 * C1359) * C114 +
                    (C113 * C1360 + C47838 * C1369) * C47821) *
                       C105) *
                      C3850) *
                     C2948) *
                C47590) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47838 * C122) * C114 +
                    (C113 * C123 + C47838 * C136) * C47821) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C3342 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47838 * C537) * C47821 +
                    (C113 * C507 + C47838 * C520) * C114) *
                       C103) *
                      C47723) *
                     C47961 +
                 ((((C113 * C971 + C47838 * C976) * C114 +
                    (C113 * C977 + C47838 * C986) * C47821) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C47723 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47838 * C334) * C47821 +
                    (C113 * C304 + C47838 * C317) * C114) *
                       C103) *
                      C3342) *
                     C47957 +
                 ((((C113 * C305 + C47838 * C318) * C114 +
                    (C113 * C319 + C47838 * C335) * C47821) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C3342 -
                  ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                   ((C113 * C1353 + C47838 * C1366) * C47821 +
                    (C113 * C1339 + C47838 * C1354) * C114) *
                       C103) *
                      C47723) *
                     C47947 +
                 ((((C113 * C1758 + C47838 * C1761) * C114 +
                    (C113 * C1762 + C47838 * C1767) * C47821) *
                       C103 +
                   ((C113 * C1759 + C47838 * C1763) * C114 +
                    (C113 * C1764 + C47838 * C1768) * C47821) *
                       C104 +
                   ((C113 * C1760 + C47838 * C1765) * C114 +
                    (C113 * C1766 + C47838 * C1769) * C47821) *
                       C105) *
                      C47723 -
                  ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
                   ((C113 * C1210 + C47838 * C1220) * C47821 +
                    (C113 * C1202 + C47838 * C1211) * C114) *
                       C103) *
                      C3342) *
                     C47925) *
                C47590) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C3342 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47838 * C537) * C47821 +
                     (C113 * C507 + C47838 * C520) * C114) *
                        C103) *
                       C47723) *
                      C2580 +
                  ((((C113 * C971 + C47838 * C976) * C114 +
                     (C113 * C977 + C47838 * C986) * C47821) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47723 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C3342) *
                      C47681) *
                     C47951 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47723 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C3342) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C3342 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47723) *
                      C47681) *
                     C47938 +
                 (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47723) *
                      C2580 +
                  ((C1016 * C103 + (C1015 + C1014) * C104 +
                    ((C113 * C975 + C47838 * C984) * C114 +
                     (C113 * C985 + C47838 * C990) * C47821) *
                        C105) *
                       C47723 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C3342) *
                      C47681) *
                     C47909)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47838 * C122) * C114 +
                    (C113 * C123 + C47838 * C136) * C47821) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C47962 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47838 * C537) * C47821 +
                    (C113 * C507 + C47838 * C520) * C114) *
                       C103) *
                      C47959 +
                  (((C113 * C508 + C47838 * C521) * C114 +
                    (C113 * C522 + C47838 * C538) * C47821) *
                       C103 +
                   (C586 + C587) * C104 + C595 * C105) *
                      C47950 -
                  ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
                   ((C113 * C2070 + C47838 * C2080) * C47821 +
                    (C113 * C2062 + C47838 * C2071) * C114) *
                       C103) *
                      C47931) *
                     C2580 +
                 ((((C113 * C971 + C47838 * C976) * C114 +
                    (C113 * C977 + C47838 * C986) * C47821) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C47959 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47838 * C334) * C47821 +
                    (C113 * C304 + C47838 * C317) * C114) *
                       C103) *
                      C47962 -
                  ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
                   ((C113 * C1347 + C47838 * C1363) * C47821 +
                    (C113 * C1336 + C47838 * C1348) * C114) *
                       C103) *
                      C47950 +
                  (((C113 * C2470 + C47838 * C2473) * C114 +
                    (C113 * C2474 + C47838 * C2479) * C47821) *
                       C103 +
                   ((C113 * C2471 + C47838 * C2475) * C114 +
                    (C113 * C2476 + C47838 * C2480) * C47821) *
                       C104 +
                   ((C113 * C2472 + C47838 * C2477) * C114 +
                    (C113 * C2478 + C47838 * C2481) * C47821) *
                       C105) *
                      C47931) *
                     C47681) *
                C47590) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47719 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47838 * C537) * C47821 +
                     (C113 * C507 + C47838 * C520) * C114) *
                        C103) *
                       C47726 +
                   (((C113 * C508 + C47838 * C521) * C114 +
                     (C113 * C522 + C47838 * C538) * C47821) *
                        C103 +
                    (C586 + C587) * C104 + C595 * C105) *
                       C3850) *
                      C2580 +
                  ((((C113 * C971 + C47838 * C976) * C114 +
                     (C113 * C977 + C47838 * C986) * C47821) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47726 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C47719 -
                   ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
                    ((C113 * C1347 + C47838 * C1363) * C47821 +
                     (C113 * C1336 + C47838 * C1348) * C114) *
                        C103) *
                       C3850) *
                      C47681) *
                     C47869 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47726 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47719 -
                   ((C592 + C593) * C105 + (C589 + C588) * C104 +
                    (C587 + C586) * C103) *
                       C3850) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47719 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47726 +
                   ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
                    ((C113 * C2230 + C47838 * C2231) * C114 +
                     (C113 * C2232 + C47838 * C2233) * C47821) *
                        C105) *
                       C3850) *
                      C47681) *
                     C47601)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C3342 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47838 * C537) * C47821 +
                     (C113 * C507 + C47838 * C520) * C114) *
                        C103) *
                       C47723) *
                      C2580 +
                  ((((C113 * C971 + C47838 * C976) * C114 +
                     (C113 * C977 + C47838 * C986) * C47821) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47723 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C3342) *
                      C47681) *
                     C47951 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47723 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C3342) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C3342 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47723) *
                      C47681) *
                     C47938 +
                 (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47723) *
                      C2580 +
                  ((C1016 * C103 + (C1015 + C1014) * C104 +
                    ((C113 * C975 + C47838 * C984) * C114 +
                     (C113 * C985 + C47838 * C990) * C47821) *
                        C105) *
                       C47723 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C3342) *
                      C47681) *
                     C47909)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47838 * C122) * C114 +
                    (C113 * C123 + C47838 * C136) * C47821) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C3342 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47838 * C537) * C47821 +
                    (C113 * C507 + C47838 * C520) * C114) *
                       C103) *
                      C47723) *
                     C47961 +
                 ((((C113 * C971 + C47838 * C976) * C114 +
                    (C113 * C977 + C47838 * C986) * C47821) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C47723 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47838 * C334) * C47821 +
                    (C113 * C304 + C47838 * C317) * C114) *
                       C103) *
                      C3342) *
                     C47957 +
                 ((((C113 * C305 + C47838 * C318) * C114 +
                    (C113 * C319 + C47838 * C335) * C47821) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C3342 -
                  ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                   ((C113 * C1353 + C47838 * C1366) * C47821 +
                    (C113 * C1339 + C47838 * C1354) * C114) *
                       C103) *
                      C47723) *
                     C47947 +
                 ((((C113 * C1758 + C47838 * C1761) * C114 +
                    (C113 * C1762 + C47838 * C1767) * C47821) *
                       C103 +
                   ((C113 * C1759 + C47838 * C1763) * C114 +
                    (C113 * C1764 + C47838 * C1768) * C47821) *
                       C104 +
                   ((C113 * C1760 + C47838 * C1765) * C114 +
                    (C113 * C1766 + C47838 * C1769) * C47821) *
                       C105) *
                      C47723 -
                  ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
                   ((C113 * C1210 + C47838 * C1220) * C47821 +
                    (C113 * C1202 + C47838 * C1211) * C114) *
                       C103) *
                      C3342) *
                     C47925) *
                C47590) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C1468 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C1469 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C1470 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47838 * C1220) * C47821 +
             (C113 * C1202 + C47838 * C1211) * C114) *
                C103) *
               C47636 * C47925) *
              C47869 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C1469 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C1468 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C1470 +
           ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
            ((C113 * C1474 + C47838 * C1475) * C114 +
             (C113 * C1476 + C47838 * C1477) * C47821) *
                C105) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C47883 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47681) *
              C695 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C47681 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C47883) *
              C696 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
               C47883 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47636 * C47681) *
              C697 +
          ((C704 * C103 + (C712 + C711) * C104 +
            ((C113 * C699 + C47838 * C700) * C114 +
             (C113 * C701 + C47838 * C702) * C47821) *
                C105) *
               C47636 * C47681 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C1880 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C1881 +
            (((C113 * C508 + C47838 * C521) * C114 +
              (C113 * C522 + C47838 * C538) * C47821) *
                 C103 +
             (C586 + C587) * C104 + C595 * C105) *
                C47918) *
               C47883 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C1881 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C1880 -
            ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
             ((C113 * C1347 + C47838 * C1363) * C47821 +
              (C113 * C1336 + C47838 * C1348) * C114) *
                 C103) *
                C47918) *
               C47681) *
              C47869 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C1881 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C1880 -
            ((C592 + C593) * C105 + (C589 + C588) * C104 +
             (C587 + C586) * C103) *
                C47918) *
               C47883 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C1880 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C1881 +
            ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
             ((C113 * C2230 + C47838 * C2231) * C114 +
              (C113 * C2232 + C47838 * C2233) * C47821) *
                 C105) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47884 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47723) *
              C1468 +
          ((((C113 * C971 + C47838 * C976) * C114 +
             (C113 * C977 + C47838 * C986) * C47821) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47723 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47884) *
              C1469 +
          ((((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47884 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47838 * C1366) * C47821 +
             (C113 * C1339 + C47838 * C1354) * C114) *
                C103) *
               C47723) *
              C1470 +
          ((((C113 * C1758 + C47838 * C1761) * C114 +
             (C113 * C1762 + C47838 * C1767) * C47821) *
                C103 +
            ((C113 * C1759 + C47838 * C1763) * C114 +
             (C113 * C1764 + C47838 * C1768) * C47821) *
                C104 +
            ((C113 * C1760 + C47838 * C1765) * C114 +
             (C113 * C1766 + C47838 * C1769) * C47821) *
                C105) *
               C47723 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47838 * C1220) * C47821 +
             (C113 * C1202 + C47838 * C1211) * C114) *
                C103) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47884 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47723) *
               C47883 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47723 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C47884) *
               C47681) *
              C299 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47723 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47884) *
               C47883 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47884 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47723) *
               C47681) *
              C300 +
          (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47884 -
            ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                C47723) *
               C47883 +
           ((C1016 * C103 + (C1015 + C1014) * C104 +
             ((C113 * C975 + C47838 * C984) * C114 +
              (C113 * C985 + C47838 * C990) * C47821) *
                 C105) *
                C47723 -
            ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C2348 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C2349 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C2350 -
           ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
            ((C113 * C2070 + C47838 * C2080) * C47821 +
             (C113 * C2062 + C47838 * C2071) * C114) *
                C103) *
               C47931) *
              C47883 +
          ((((C113 * C971 + C47838 * C976) * C114 +
             (C113 * C977 + C47838 * C986) * C47821) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C2349 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C2348 -
           ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
            ((C113 * C1347 + C47838 * C1363) * C47821 +
             (C113 * C1336 + C47838 * C1348) * C114) *
                C103) *
               C2350 +
           (((C113 * C2470 + C47838 * C2473) * C114 +
             (C113 * C2474 + C47838 * C2479) * C47821) *
                C103 +
            ((C113 * C2471 + C47838 * C2475) * C114 +
             (C113 * C2476 + C47838 * C2480) * C47821) *
                C104 +
            ((C113 * C2472 + C47838 * C2477) * C114 +
             (C113 * C2478 + C47838 * C2481) * C47821) *
                C105) *
               C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47838 * C122) * C114 +
                (C113 * C123 + C47838 * C136) * C47821) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105) *
                  C47636 * C47618 * C108 -
              (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                  C47636 * C47618 * C109 +
              (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
                  C47618 * C110 -
              ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                  C47636 * C47618 * C111 +
              (C186 * C103 + (C183 + C182) * C104 +
               ((C113 * C121 + C47838 * C134) * C114 +
                (C113 * C135 + C47838 * C142) * C47821) *
                   C105) *
                  C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C47838 * C122) * C114 +
                 (C113 * C123 + C47838 * C136) * C47821) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105) *
                   C47636 * C47954 -
               (C391 * C105 + (C381 + C382) * C104 +
                ((C113 * C316 + C47838 * C334) * C47821 +
                 (C113 * C304 + C47838 * C317) * C114) *
                    C103) *
                   C47636 * C47942 +
               (((C113 * C305 + C47838 * C318) * C114 +
                 (C113 * C319 + C47838 * C335) * C47821) *
                    C103 +
                (C383 + C384) * C104 + C392 * C105) *
                   C47636 * C47915) *
                  C299 +
              (((C382 + C381) * C103 + (C380 + C379) * C104 +
                (C387 + C388) * C105) *
                   C47636 * C47942 -
               (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                   C47636 * C47954 -
               ((C389 + C390) * C105 + (C386 + C385) * C104 +
                (C384 + C383) * C103) *
                   C47636 * C47915) *
                  C300 +
              ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
                   C47954 -
               (((C113 * C328 + C47838 * C340) * C47821 +
                 (C113 * C310 + C47838 * C329) * C114) *
                    C105 +
                (C388 + C387) * C104 + C391 * C103) *
                   C47636 * C47942 +
               (C392 * C103 + (C390 + C389) * C104 +
                ((C113 * C311 + C47838 * C330) * C114 +
                 (C113 * C331 + C47838 * C341) * C47821) *
                    C105) *
                   C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47955 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C47618 * C299 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 +
            (C590 + C591) * C105) *
               C47944 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47955 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47918) *
              C47618 * C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47955 -
           (((C113 * C531 + C47838 * C543) * C47821 +
             (C113 * C513 + C47838 * C532) * C114) *
                C105 +
            (C591 + C590) * C104 + C594 * C103) *
               C47944 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47838 * C533) * C114 +
             (C113 * C534 + C47838 * C544) * C47821) *
                C105) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C1127 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47915) *
              C47951 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47915) *
              C47938 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47636 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47838 * C330) * C114 +
             (C113 * C331 + C47838 * C341) * C47821) *
                C105) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47636 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47838 * C334) * C47821 +
            (C113 * C304 + C47838 * C317) * C114) *
               C103) *
              C47636 * C1195 +
          (((C113 * C305 + C47838 * C318) * C114 +
            (C113 * C319 + C47838 * C335) * C47821) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47636 * C1196 -
          (((C113 * C1206 + C47838 * C1218) * C47821 +
            (C113 * C1200 + C47838 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47838 * C1219) * C47821 +
            (C113 * C1201 + C47838 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47838 * C1220) * C47821 +
            (C113 * C1202 + C47838 * C1211) * C114) *
               C103) *
              C47636 * C1197 +
          (((C113 * C1203 + C47838 * C1212) * C114 +
            (C113 * C1213 + C47838 * C1221) * C47821) *
               C103 +
           ((C113 * C1204 + C47838 * C1214) * C114 +
            (C113 * C1215 + C47838 * C1222) * C47821) *
               C104 +
           ((C113 * C1205 + C47838 * C1216) * C114 +
            (C113 * C1217 + C47838 * C1223) * C47821) *
               C105) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47955 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C1126 +
          ((((C113 * C971 + C47838 * C976) * C114 +
             (C113 * C977 + C47838 * C986) * C47821) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47944 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47955 -
           (((C113 * C1343 + C47838 * C1361) * C47821 +
             (C113 * C1334 + C47838 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47838 * C1362) * C47821 +
             (C113 * C1335 + C47838 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47838 * C1363) * C47821 +
             (C113 * C1336 + C47838 * C1348) * C114) *
                C103) *
               C47918) *
              C1127 +
          ((((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47955 -
           (((C113 * C1349 + C47838 * C1364) * C47821 +
             (C113 * C1337 + C47838 * C1350) * C114) *
                C105 +
            ((C113 * C1351 + C47838 * C1365) * C47821 +
             (C113 * C1338 + C47838 * C1352) * C114) *
                C104 +
            ((C113 * C1353 + C47838 * C1366) * C47821 +
             (C113 * C1339 + C47838 * C1354) * C114) *
                C103) *
               C47944 +
           (((C113 * C1340 + C47838 * C1355) * C114 +
             (C113 * C1356 + C47838 * C1367) * C47821) *
                C103 +
            ((C113 * C1341 + C47838 * C1357) * C114 +
             (C113 * C1358 + C47838 * C1368) * C47821) *
                C104 +
            ((C113 * C1342 + C47838 * C1359) * C114 +
             (C113 * C1360 + C47838 * C1369) * C47821) *
                C105) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C47618 * C47951 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) * C1881 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C1880 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47918) *
              C47618 * C47938 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C1880 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) * C1881 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47838 * C533) * C114 +
             (C113 * C534 + C47838 * C544) * C47821) *
                C105) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C47954 +
          ((((C113 * C971 + C47838 * C976) * C114 +
             (C113 * C977 + C47838 * C986) * C47821) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C1881 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C1880 -
           (((C113 * C1343 + C47838 * C1361) * C47821 +
             (C113 * C1334 + C47838 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47838 * C1362) * C47821 +
             (C113 * C1335 + C47838 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47838 * C1363) * C47821 +
             (C113 * C1336 + C47838 * C1348) * C114) *
                C103) *
               C47918) *
              C47942 +
          ((((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C1880 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47838 * C1366) * C47821 +
             (C113 * C1339 + C47838 * C1354) * C114) *
                C103) *
               C1881 +
           (((C113 * C1340 + C47838 * C1355) * C114 +
             (C113 * C1356 + C47838 * C1367) * C47821) *
                C103 +
            ((C113 * C1341 + C47838 * C1357) * C114 +
             (C113 * C1358 + C47838 * C1368) * C47821) *
                C104 +
            ((C113 * C1342 + C47838 * C1359) * C114 +
             (C113 * C1360 + C47838 * C1369) * C47821) *
                C105) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C2055 -
          (C594 * C105 + (C584 + C585) * C104 +
           ((C113 * C519 + C47838 * C537) * C47821 +
            (C113 * C507 + C47838 * C520) * C114) *
               C103) *
              C2056 +
          (((C113 * C508 + C47838 * C521) * C114 +
            (C113 * C522 + C47838 * C538) * C47821) *
               C103 +
           (C586 + C587) * C104 + C595 * C105) *
              C2057 -
          (((C113 * C2066 + C47838 * C2078) * C47821 +
            (C113 * C2060 + C47838 * C2067) * C114) *
               C105 +
           ((C113 * C2068 + C47838 * C2079) * C47821 +
            (C113 * C2061 + C47838 * C2069) * C114) *
               C104 +
           ((C113 * C2070 + C47838 * C2080) * C47821 +
            (C113 * C2062 + C47838 * C2071) * C114) *
               C103) *
              C2058 +
          (((C113 * C2063 + C47838 * C2072) * C114 +
            (C113 * C2073 + C47838 * C2081) * C47821) *
               C103 +
           ((C113 * C2064 + C47838 * C2074) * C114 +
            (C113 * C2075 + C47838 * C2082) * C47821) *
               C104 +
           ((C113 * C2065 + C47838 * C2076) * C114 +
            (C113 * C2077 + C47838 * C2083) * C47821) *
               C105) *
              C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47884 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47723) *
               C1126 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47723 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C47884) *
               C1127 +
           ((((C113 * C305 + C47838 * C318) * C114 +
              (C113 * C319 + C47838 * C335) * C47821) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C47884 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47838 * C1366) * C47821 +
              (C113 * C1339 + C47838 * C1354) * C114) *
                 C103) *
                C47723) *
               C47915) *
              C47869 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47723 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47884) *
               C1126 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47884 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47723) *
               C1127 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47838 * C1641) * C114 +
              (C113 * C1642 + C47838 * C1643) * C47821) *
                 C105) *
                C47723 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47884 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47723) *
              C47618 * C695 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47723 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47884) *
              C47618 * C696 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47884 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47723) *
              C47618 * C697 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47838 * C813) * C114 +
             (C113 * C814 + C47838 * C815) * C47821) *
                C105) *
               C47723 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C2348 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C2349 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C2350 -
           ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
            ((C113 * C2070 + C47838 * C2080) * C47821 +
             (C113 * C2062 + C47838 * C2071) * C114) *
                C103) *
               C47931) *
              C47618 * C47869 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) * C2349 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C2348 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C2350 +
           ((C2372 + C2371) * C103 + (C2370 + C2369) * C104 +
            ((C113 * C2352 + C47838 * C2353) * C114 +
             (C113 * C2354 + C47838 * C2355) * C47821) *
                C105) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C47954 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47942 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47915) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C47636 * C47942 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C47954 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47915) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
               C47954 -
           (((C113 * C328 + C47838 * C340) * C47821 +
             (C113 * C310 + C47838 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C47636 * C47942 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47838 * C330) * C114 +
             (C113 * C331 + C47838 * C341) * C47821) *
                C105) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47636 * C47618 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C47636 *
              C47618 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C47618 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C47636 *
              C47618 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C47838 * C134) * C114 +
            (C113 * C135 + C47838 * C142) * C47821) *
               C105) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C1127 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47915) *
              C47951 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47915) *
              C47938 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47636 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47838 * C330) * C114 +
             (C113 * C331 + C47838 * C341) * C47821) *
                C105) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47636 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47838 * C334) * C47821 +
            (C113 * C304 + C47838 * C317) * C114) *
               C103) *
              C47636 * C1195 +
          (((C113 * C305 + C47838 * C318) * C114 +
            (C113 * C319 + C47838 * C335) * C47821) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47636 * C1196 -
          (((C113 * C1206 + C47838 * C1218) * C47821 +
            (C113 * C1200 + C47838 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47838 * C1219) * C47821 +
            (C113 * C1201 + C47838 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47838 * C1220) * C47821 +
            (C113 * C1202 + C47838 * C1211) * C114) *
               C103) *
              C47636 * C1197 +
          (((C113 * C1203 + C47838 * C1212) * C114 +
            (C113 * C1213 + C47838 * C1221) * C47821) *
               C103 +
           ((C113 * C1204 + C47838 * C1214) * C114 +
            (C113 * C1215 + C47838 * C1222) * C47821) *
               C104 +
           ((C113 * C1205 + C47838 * C1216) * C114 +
            (C113 * C1217 + C47838 * C1223) * C47821) *
               C105) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C47618 * C47951 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) * C1881 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C1880 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47918) *
              C47618 * C47938 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C1880 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) * C1881 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47838 * C533) * C114 +
             (C113 * C534 + C47838 * C544) * C47821) *
                C105) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C47954 +
          ((((C113 * C971 + C47838 * C976) * C114 +
             (C113 * C977 + C47838 * C986) * C47821) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C1881 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C1880 -
           (((C113 * C1343 + C47838 * C1361) * C47821 +
             (C113 * C1334 + C47838 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47838 * C1362) * C47821 +
             (C113 * C1335 + C47838 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47838 * C1363) * C47821 +
             (C113 * C1336 + C47838 * C1348) * C114) *
                C103) *
               C47918) *
              C47942 +
          ((((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C1880 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47838 * C1366) * C47821 +
             (C113 * C1339 + C47838 * C1354) * C114) *
                C103) *
               C1881 +
           (((C113 * C1340 + C47838 * C1355) * C114 +
             (C113 * C1356 + C47838 * C1367) * C47821) *
                C103 +
            ((C113 * C1341 + C47838 * C1357) * C114 +
             (C113 * C1358 + C47838 * C1368) * C47821) *
                C104 +
            ((C113 * C1342 + C47838 * C1359) * C114 +
             (C113 * C1360 + C47838 * C1369) * C47821) *
                C105) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C3342 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47723) *
               C47883 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47723 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C3342) *
               C47681) *
              C47595 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47723 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C3342) *
               C47883 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C3342 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47723) *
               C47681) *
              C47604 +
          (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
            ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                C47723) *
               C47883 +
           ((C1016 * C103 + (C1015 + C1014) * C104 +
             ((C113 * C975 + C47838 * C984) * C114 +
              (C113 * C985 + C47838 * C990) * C47821) *
                 C105) *
                C47723 -
            ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                C3342) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47719 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47726 +
            (((C113 * C508 + C47838 * C521) * C114 +
              (C113 * C522 + C47838 * C538) * C47821) *
                 C103 +
             (C586 + C587) * C104 + C595 * C105) *
                C3850) *
               C47883 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47726 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C47719 -
            ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
             ((C113 * C1347 + C47838 * C1363) * C47821 +
              (C113 * C1336 + C47838 * C1348) * C114) *
                 C103) *
                C3850) *
               C47681) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47726 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47719 -
            ((C592 + C593) * C105 + (C589 + C588) * C104 +
             (C587 + C586) * C103) *
                C3850) *
               C47883 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47719 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47726 +
            ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
             ((C113 * C2230 + C47838 * C2231) * C114 +
              (C113 * C2232 + C47838 * C2233) * C47821) *
                 C105) *
                C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C3342 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47723) *
               C47954 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47723 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C3342) *
               C47942 +
           ((((C113 * C305 + C47838 * C318) * C114 +
              (C113 * C319 + C47838 * C335) * C47821) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C3342 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47838 * C1366) * C47821 +
              (C113 * C1339 + C47838 * C1354) * C114) *
                 C103) *
                C47723) *
               C47915) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47723 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C3342) *
               C47954 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C3342 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47723) *
               C47942 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47838 * C1641) * C114 +
              (C113 * C1642 + C47838 * C1643) * C47821) *
                 C105) *
                C47723 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C3342 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47723) *
              C47618 * C47960 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47723 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C3342) *
              C47618 * C47953 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47723) *
              C47618 * C47940 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47838 * C813) * C114 +
             (C113 * C814 + C47838 * C815) * C47821) *
                C105) *
               C47723 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47962 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47959 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47950 -
           ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
            ((C113 * C2070 + C47838 * C2080) * C47821 +
             (C113 * C2062 + C47838 * C2071) * C114) *
                C103) *
               C47931) *
              C47618 * C2688 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47959 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47962 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47950 +
           ((C2372 + C2371) * C103 + (C2370 + C2369) * C104 +
            ((C113 * C2352 + C47838 * C2353) * C114 +
             (C113 * C2354 + C47838 * C2355) * C47821) *
                C105) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47719 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47838 * C537) * C47821 +
                     (C113 * C507 + C47838 * C520) * C114) *
                        C103) *
                       C47726 +
                   (((C113 * C508 + C47838 * C521) * C114 +
                     (C113 * C522 + C47838 * C538) * C47821) *
                        C103 +
                    (C586 + C587) * C104 + C595 * C105) *
                       C3850) *
                      C47618 * C47595 +
                  (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47726 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47719 -
                   ((C592 + C593) * C105 + (C589 + C588) * C104 +
                    (C587 + C586) * C103) *
                       C3850) *
                      C47618 * C47604 +
                  ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47719 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47726 +
                   (C595 * C103 + (C593 + C592) * C104 +
                    ((C113 * C514 + C47838 * C533) * C114 +
                     (C113 * C534 + C47838 * C544) * C47821) *
                        C105) *
                       C3850) *
                      C47618 * C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C3342 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47723) *
              C47618 * C47960 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47723 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C3342) *
              C47618 * C47953 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47723) *
              C47618 * C47940 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47838 * C813) * C114 +
             (C113 * C814 + C47838 * C815) * C47821) *
                C105) *
               C47723 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C3342 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47723) *
               C47954 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47723 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C3342) *
               C47942 +
           ((((C113 * C305 + C47838 * C318) * C114 +
              (C113 * C319 + C47838 * C335) * C47821) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C3342 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47838 * C1366) * C47821 +
              (C113 * C1339 + C47838 * C1354) * C114) *
                 C103) *
                C47723) *
               C47915) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47723 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C3342) *
               C47954 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C3342 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47723) *
               C47942 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47838 * C1641) * C114 +
              (C113 * C1642 + C47838 * C1643) * C47821) *
                 C105) *
                C47723 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47636 * C47883 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C47636 * C47681) *
                      C695 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47636 * C47681 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47636 * C47883) *
                      C696 +
                  ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
                       C47883 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C47636 * C47681) *
                      C697 +
                  ((C704 * C103 + (C712 + C711) * C104 +
                    ((C113 * C699 + C47838 * C700) * C114 +
                     (C113 * C701 + C47838 * C702) * C47821) *
                        C105) *
                       C47636 * C47681 -
                   ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                       C47636 * C47883) *
                      C47919)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C114 +
                     (C113 * C123 + C47838 * C136) * C47821) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47636 * C1468 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47838 * C334) * C47821 +
                     (C113 * C304 + C47838 * C317) * C114) *
                        C103) *
                       C47636 * C1469 +
                   (((C113 * C305 + C47838 * C318) * C114 +
                     (C113 * C319 + C47838 * C335) * C47821) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C47636 * C1470 -
                   ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
                    ((C113 * C1210 + C47838 * C1220) * C47821 +
                     (C113 * C1202 + C47838 * C1211) * C114) *
                        C103) *
                       C47636 * C47925) *
                      C47869 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47636 * C1469 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47636 * C1468 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C47636 * C1470 +
                   ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
                    ((C113 * C1474 + C47838 * C1475) * C114 +
                     (C113 * C1476 + C47838 * C1477) * C47821) *
                        C105) *
                       C47636 * C47925) *
                      C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47884 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47723) *
               C47883 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47723 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C47884) *
               C47681) *
              C299 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47723 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47884) *
               C47883 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47884 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47723) *
               C47681) *
              C300 +
          (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47884 -
            ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                C47723) *
               C47883 +
           ((C1016 * C103 + (C1015 + C1014) * C104 +
             ((C113 * C975 + C47838 * C984) * C114 +
              (C113 * C985 + C47838 * C990) * C47821) *
                 C105) *
                C47723 -
            ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47884 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47723) *
              C1468 +
          ((((C113 * C971 + C47838 * C976) * C114 +
             (C113 * C977 + C47838 * C986) * C47821) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47723 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47884) *
              C1469 +
          ((((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47884 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47838 * C1366) * C47821 +
             (C113 * C1339 + C47838 * C1354) * C114) *
                C103) *
               C47723) *
              C1470 +
          ((((C113 * C1758 + C47838 * C1761) * C114 +
             (C113 * C1762 + C47838 * C1767) * C47821) *
                C103 +
            ((C113 * C1759 + C47838 * C1763) * C114 +
             (C113 * C1764 + C47838 * C1768) * C47821) *
                C104 +
            ((C113 * C1760 + C47838 * C1765) * C114 +
             (C113 * C1766 + C47838 * C1769) * C47821) *
                C105) *
               C47723 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47838 * C1220) * C47821 +
             (C113 * C1202 + C47838 * C1211) * C114) *
                C103) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C47954 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47942 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47915) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C47636 * C47942 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C47954 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47915) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
               C47954 -
           (((C113 * C328 + C47838 * C340) * C47821 +
             (C113 * C310 + C47838 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C47636 * C47942 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47838 * C330) * C114 +
             (C113 * C331 + C47838 * C341) * C47821) *
                C105) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47636 * C47618 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C47636 *
              C47618 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C47618 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C47636 *
              C47618 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C47838 * C134) * C114 +
            (C113 * C135 + C47838 * C142) * C47821) *
               C105) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47955 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C47618 * C299 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 +
            (C590 + C591) * C105) *
               C47944 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47955 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47918) *
              C47618 * C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47955 -
           (((C113 * C531 + C47838 * C543) * C47821 +
             (C113 * C513 + C47838 * C532) * C114) *
                C105 +
            (C591 + C590) * C104 + C594 * C103) *
               C47944 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47838 * C533) * C114 +
             (C113 * C534 + C47838 * C544) * C47821) *
                C105) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C1127 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47915) *
              C47951 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47915) *
              C47938 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47636 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47838 * C330) * C114 +
             (C113 * C331 + C47838 * C341) * C47821) *
                C105) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47636 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47838 * C334) * C47821 +
            (C113 * C304 + C47838 * C317) * C114) *
               C103) *
              C47636 * C1195 +
          (((C113 * C305 + C47838 * C318) * C114 +
            (C113 * C319 + C47838 * C335) * C47821) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47636 * C1196 -
          (((C113 * C1206 + C47838 * C1218) * C47821 +
            (C113 * C1200 + C47838 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47838 * C1219) * C47821 +
            (C113 * C1201 + C47838 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47838 * C1220) * C47821 +
            (C113 * C1202 + C47838 * C1211) * C114) *
               C103) *
              C47636 * C1197 +
          (((C113 * C1203 + C47838 * C1212) * C114 +
            (C113 * C1213 + C47838 * C1221) * C47821) *
               C103 +
           ((C113 * C1204 + C47838 * C1214) * C114 +
            (C113 * C1215 + C47838 * C1222) * C47821) *
               C104 +
           ((C113 * C1205 + C47838 * C1216) * C114 +
            (C113 * C1217 + C47838 * C1223) * C47821) *
               C105) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47955 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C114 +
             (C113 * C522 + C47838 * C538) * C47821) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47918) *
              C1126 +
          ((((C113 * C971 + C47838 * C976) * C114 +
             (C113 * C977 + C47838 * C986) * C47821) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47944 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47955 -
           (((C113 * C1343 + C47838 * C1361) * C47821 +
             (C113 * C1334 + C47838 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47838 * C1362) * C47821 +
             (C113 * C1335 + C47838 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47838 * C1363) * C47821 +
             (C113 * C1336 + C47838 * C1348) * C114) *
                C103) *
               C47918) *
              C1127 +
          ((((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47955 -
           (((C113 * C1349 + C47838 * C1364) * C47821 +
             (C113 * C1337 + C47838 * C1350) * C114) *
                C105 +
            ((C113 * C1351 + C47838 * C1365) * C47821 +
             (C113 * C1338 + C47838 * C1352) * C114) *
                C104 +
            ((C113 * C1353 + C47838 * C1366) * C47821 +
             (C113 * C1339 + C47838 * C1354) * C114) *
                C103) *
               C47944 +
           (((C113 * C1340 + C47838 * C1355) * C114 +
             (C113 * C1356 + C47838 * C1367) * C47821) *
                C103 +
            ((C113 * C1341 + C47838 * C1357) * C114 +
             (C113 * C1358 + C47838 * C1368) * C47821) *
                C104 +
            ((C113 * C1342 + C47838 * C1359) * C114 +
             (C113 * C1360 + C47838 * C1369) * C47821) *
                C105) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47884 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47838 * C537) * C47821 +
             (C113 * C507 + C47838 * C520) * C114) *
                C103) *
               C47723) *
              C47618 * C695 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47723 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47884) *
              C47618 * C696 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47884 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47723) *
              C47618 * C697 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47838 * C813) * C114 +
             (C113 * C814 + C47838 * C815) * C47821) *
                C105) *
               C47723 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C114 +
              (C113 * C123 + C47838 * C136) * C47821) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47884 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47838 * C537) * C47821 +
              (C113 * C507 + C47838 * C520) * C114) *
                 C103) *
                C47723) *
               C1126 +
           ((((C113 * C971 + C47838 * C976) * C114 +
              (C113 * C977 + C47838 * C986) * C47821) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47723 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47838 * C334) * C47821 +
              (C113 * C304 + C47838 * C317) * C114) *
                 C103) *
                C47884) *
               C1127 +
           ((((C113 * C305 + C47838 * C318) * C114 +
              (C113 * C319 + C47838 * C335) * C47821) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C47884 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47838 * C1366) * C47821 +
              (C113 * C1339 + C47838 * C1354) * C114) *
                 C103) *
                C47723) *
               C47915) *
              C47869 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47723 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47884) *
               C1126 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47884 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47723) *
               C1127 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47838 * C1641) * C114 +
              (C113 * C1642 + C47838 * C1643) * C47821) *
                 C105) *
                C47723 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47636 * C47618 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C47636 *
              C47618 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C47618 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C47636 *
              C47618 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C47838 * C134) * C114 +
            (C113 * C135 + C47838 * C142) * C47821) *
               C105) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C47954 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C47942 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47915) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C47636 * C47942 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C47954 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47915) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 *
               C47954 -
           (((C113 * C328 + C47838 * C340) * C47821 +
             (C113 * C310 + C47838 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C47636 * C47942 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47838 * C330) * C114 +
             (C113 * C331 + C47838 * C341) * C47821) *
                C105) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C114 +
             (C113 * C123 + C47838 * C136) * C47821) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47636 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47838 * C334) * C47821 +
             (C113 * C304 + C47838 * C317) * C114) *
                C103) *
               C47636 * C1127 +
           (((C113 * C305 + C47838 * C318) * C114 +
             (C113 * C319 + C47838 * C335) * C47821) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47636 * C47915) *
              C47951 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47636 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47636 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47636 * C47915) *
              C47938 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47636 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47636 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47838 * C330) * C114 +
             (C113 * C331 + C47838 * C341) * C47821) *
                C105) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C114 +
            (C113 * C123 + C47838 * C136) * C47821) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47636 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47838 * C334) * C47821 +
            (C113 * C304 + C47838 * C317) * C114) *
               C103) *
              C47636 * C1195 +
          (((C113 * C305 + C47838 * C318) * C114 +
            (C113 * C319 + C47838 * C335) * C47821) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47636 * C1196 -
          (((C113 * C1206 + C47838 * C1218) * C47821 +
            (C113 * C1200 + C47838 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47838 * C1219) * C47821 +
            (C113 * C1201 + C47838 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47838 * C1220) * C47821 +
            (C113 * C1202 + C47838 * C1211) * C114) *
               C103) *
              C47636 * C1197 +
          (((C113 * C1203 + C47838 * C1212) * C114 +
            (C113 * C1213 + C47838 * C1221) * C47821) *
               C103 +
           ((C113 * C1204 + C47838 * C1214) * C114 +
            (C113 * C1215 + C47838 * C1222) * C47821) *
               C104 +
           ((C113 * C1205 + C47838 * C1216) * C114 +
            (C113 * C1217 + C47838 * C1223) * C47821) *
               C105) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47677 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47684 +
           ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C2948) *
              C47595 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47684 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47677 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C2948) *
              C47604 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C47677 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47684 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47884 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C47677 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47884) *
               C47684 +
           (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                 C4825 +
             (C5004 + C5005 + C5006 + C5007) * C47902) *
                C47884 -
            ((C6426 + C6427 + C6422 + C6423) * C47902 +
             (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                 C4825) *
                C47723) *
               C2948) *
              C2688 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47884) *
               C47677 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47884 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47684 +
           (((C6423 + C6422 + C6427 + C6426) * C4825 +
             (C1654 * C4827 + C1653 * C4823 +
              (C113 * C1760 + C47838 * C1765) * C4828 +
              (C113 * C1766 + C47838 * C1769) * C47933) *
                 C47902) *
                C47723 -
            ((C5012 + C5013 + C5014 + C5015) * C47902 +
             (C5007 + C5006 + C5005 + C5004) * C4825) *
                C47884) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47961 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47957 +
           ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47947 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C47636 * C47925) *
              C2688 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47957 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47961 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47947 +
           ((C6223 + C6222 + C6221 + C6220) * C4825 +
            (C1488 * C4827 + C1487 * C4823 +
             (C113 * C1205 + C47838 * C1216) * C4828 +
             (C113 * C1217 + C47838 * C1223) * C47933) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C2580 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47681) *
              C47960 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47681 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C2580) *
              C47953 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C2580 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47681) *
              C47940 +
          (((C5315 + C5314 + C5313 + C5312) * C4825 +
            (C710 * C4827 + C709 * C4823 +
             (C113 * C311 + C47838 * C330) * C4828 +
             (C113 * C331 + C47838 * C341) * C47933) *
                C47902) *
               C47636 * C47681 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47955 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47944 +
            (((C113 * C508 + C47838 * C521) * C4827 +
              (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
              C6083 * C47933) *
                 C4825 +
             (C5170 + C5171 + C5172 + C5173) * C47902) *
                C47918) *
               C2580 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47944 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47955 -
            ((C7148 + C7149 + C7150 + C7151) * C47902 +
             (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                 C4825) *
                C47918) *
               C47681) *
              C2688 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47944 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47955 -
            ((C5178 + C5179 + C5180 + C5181) * C47902 +
             (C5173 + C5172 + C5171 + C5170) * C4825) *
                C47918) *
               C2580 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47955 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47944 +
            ((C7151 + C7150 + C7149 + C7148) * C4825 +
             (C2244 * C4827 + C2243 * C4823 +
              (C113 * C1342 + C47838 * C1359) * C4828 +
              (C113 * C1360 + C47838 * C1369) * C47933) *
                 C47902) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47884 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C2580 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47884) *
               C47681) *
              C47595 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47884) *
               C2580 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47884 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47681) *
              C47604 +
          ((((C4837 + C4836 + C4835 + C4834) * C4825 +
             (C4838 + C4839 + C4840 + C4841) * C47902) *
                C47884 -
            ((C5446 + C5447 + C5448 + C5449) * C47902 +
             (C5177 + C5176 + C5175 + C5174) * C4825) *
                C47723) *
               C2580 +
           (((C5655 + C5654 + C5653 + C5652) * C4825 +
             (C1009 * C4827 + C1008 * C4823 +
              (C113 * C1640 + C47838 * C1641) * C4828 +
              (C113 * C1642 + C47838 * C1643) * C47933) *
                 C47902) *
                C47723 -
            ((C5312 + C5313 + C5314 + C5315) * C47902 +
             (C5011 + C5010 + C5009 + C5008) * C4825) *
                C47884) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C2580 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47681) *
              C47960 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47681 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C2580) *
              C47953 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C2580 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47681) *
              C47940 +
          (((C5315 + C5314 + C5313 + C5312) * C4825 +
            (C710 * C4827 + C709 * C4823 +
             (C113 * C311 + C47838 * C330) * C4828 +
             (C113 * C331 + C47838 * C341) * C47933) *
                C47902) *
               C47636 * C47681 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47961 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47957 +
           ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47947 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C47636 * C47925) *
              C2688 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47957 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47961 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47947 +
           ((C6223 + C6222 + C6221 + C6220) * C4825 +
            (C1488 * C4827 + C1487 * C4823 +
             (C113 * C1205 + C47838 * C1216) * C4828 +
             (C113 * C1217 + C47838 * C1223) * C47933) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C3342 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C47677 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C3342) *
               C47684 +
           (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                 C4825 +
             (C5004 + C5005 + C5006 + C5007) * C47902) *
                C3342 -
            ((C6426 + C6427 + C6422 + C6423) * C47902 +
             (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                 C4825) *
                C47723) *
               C2948) *
              C47869 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C3342) *
               C47677 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C3342 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47684 +
           (((C6423 + C6422 + C6427 + C6426) * C4825 +
             (C1654 * C4827 + C1653 * C4823 +
              (C113 * C1760 + C47838 * C1765) * C4828 +
              (C113 * C1766 + C47838 * C1769) * C47933) *
                 C47902) *
                C47723 -
            ((C5012 + C5013 + C5014 + C5015) * C47902 +
             (C5007 + C5006 + C5005 + C5004) * C4825) *
                C3342) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47719 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47726 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C3850) *
              C47677 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47726 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47719 -
           ((C7148 + C7149 + C7150 + C7151) * C47902 +
            (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                C4825) *
               C3850) *
              C47684 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47719 -
           ((C6426 + C6427 + C6422 + C6423) * C47902 +
            (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                C4825) *
               C47726 +
           ((C6089 * C4827 + C6088 * C4823 +
             (C113 * C6057 + C47838 * C6059) * C4828 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C4825 +
            (C6087 * C4827 + C6086 * C4823 +
             (C113 * C6058 + C47838 * C6061) * C4828 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C3850) *
              C2948) *
         C47590) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C3342 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C47961 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47723 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C3342) *
              C47957 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C3342 -
           ((C6426 + C6427 + C6422 + C6423) * C47902 +
            (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                C4825) *
               C47723) *
              C47947 +
          (((C6571 * C4827 + C6570 * C4823 +
             (C113 * C6557 + C47838 * C6559) * C4828 +
             (C113 * C6560 + C47838 * C6563) * C47933) *
                C4825 +
            (C6425 * C4827 + C6424 * C4823 +
             (C113 * C6558 + C47838 * C6561) * C4828 +
             (C113 * C6562 + C47838 * C6564) * C47933) *
                C47902) *
               C47723 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C3342 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C2580 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C3342) *
               C47681) *
              C47951 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C3342) *
               C2580 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C3342 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47681) *
              C47938 +
          ((((C4837 + C4836 + C4835 + C4834) * C4825 +
             (C4838 + C4839 + C4840 + C4841) * C47902) *
                C3342 -
            ((C5446 + C5447 + C5448 + C5449) * C47902 +
             (C5177 + C5176 + C5175 + C5174) * C4825) *
                C47723) *
               C2580 +
           (((C5655 + C5654 + C5653 + C5652) * C4825 +
             (C1009 * C4827 + C1008 * C4823 +
              (C113 * C1640 + C47838 * C1641) * C4828 +
              (C113 * C1642 + C47838 * C1643) * C47933) *
                 C47902) *
                C47723 -
            ((C5312 + C5313 + C5314 + C5315) * C47902 +
             (C5011 + C5010 + C5009 + C5008) * C4825) *
                C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47962 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47959 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47950 -
           ((C7290 + C7291 + C7286 + C7287) * C47902 +
            (C7434 * C47933 + C7435 * C4828 +
             (C113 * C2070 + C47838 * C2080) * C4823 +
             (C113 * C2062 + C47838 * C2071) * C4827) *
                C4825) *
               C47931) *
              C2580 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47959 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47962 -
           ((C7148 + C7149 + C7150 + C7151) * C47902 +
            (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                C4825) *
               C47950 +
           ((C7435 * C4827 + C7434 * C4823 +
             (C113 * C7421 + C47838 * C7423) * C4828 +
             (C113 * C7424 + C47838 * C7427) * C47933) *
                C4825 +
            (C7289 * C4827 + C7288 * C4823 +
             (C113 * C7422 + C47838 * C7425) * C4828 +
             (C113 * C7426 + C47838 * C7428) * C47933) *
                C47902) *
               C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47719 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47726 +
            (((C113 * C508 + C47838 * C521) * C4827 +
              (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
              C6083 * C47933) *
                 C4825 +
             (C5170 + C5171 + C5172 + C5173) * C47902) *
                C3850) *
               C2580 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47726 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47719 -
            ((C7148 + C7149 + C7150 + C7151) * C47902 +
             (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                 C4825) *
                C3850) *
               C47681) *
              C47869 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47726 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47719 -
            ((C5178 + C5179 + C5180 + C5181) * C47902 +
             (C5173 + C5172 + C5171 + C5170) * C4825) *
                C3850) *
               C2580 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47719 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47726 +
            ((C7151 + C7150 + C7149 + C7148) * C4825 +
             (C2244 * C4827 + C2243 * C4823 +
              (C113 * C1342 + C47838 * C1359) * C4828 +
              (C113 * C1360 + C47838 * C1369) * C47933) *
                 C47902) *
                C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C3342 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C2580 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C3342) *
               C47681) *
              C47951 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C3342) *
               C2580 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C3342 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47681) *
              C47938 +
          ((((C4837 + C4836 + C4835 + C4834) * C4825 +
             (C4838 + C4839 + C4840 + C4841) * C47902) *
                C3342 -
            ((C5446 + C5447 + C5448 + C5449) * C47902 +
             (C5177 + C5176 + C5175 + C5174) * C4825) *
                C47723) *
               C2580 +
           (((C5655 + C5654 + C5653 + C5652) * C4825 +
             (C1009 * C4827 + C1008 * C4823 +
              (C113 * C1640 + C47838 * C1641) * C4828 +
              (C113 * C1642 + C47838 * C1643) * C47933) *
                 C47902) *
                C47723 -
            ((C5312 + C5313 + C5314 + C5315) * C47902 +
             (C5011 + C5010 + C5009 + C5008) * C4825) *
                C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C3342 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C47961 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47723 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C3342) *
              C47957 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C3342 -
           ((C6426 + C6427 + C6422 + C6423) * C47902 +
            (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                C4825) *
               C47723) *
              C47947 +
          (((C6571 * C4827 + C6570 * C4823 +
             (C113 * C6557 + C47838 * C6559) * C4828 +
             (C113 * C6560 + C47838 * C6563) * C47933) *
                C4825 +
            (C6425 * C4827 + C6424 * C4823 +
             (C113 * C6558 + C47838 * C6561) * C4828 +
             (C113 * C6562 + C47838 * C6564) * C47933) *
                C47902) *
               C47723 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C1468 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C1469 +
           ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C1470 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C47636 * C47925) *
              C47869 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C1469 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C1468 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C1470 +
           ((C6223 + C6222 + C6221 + C6220) * C4825 +
            (C1488 * C4827 + C1487 * C4823 +
             (C113 * C1205 + C47838 * C1216) * C4828 +
             (C113 * C1217 + C47838 * C1223) * C47933) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47883 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47681) *
              C695 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47681 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47883) *
              C696 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C47883 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47681) *
              C697 +
          (((C5315 + C5314 + C5313 + C5312) * C4825 +
            (C710 * C4827 + C709 * C4823 +
             (C113 * C311 + C47838 * C330) * C4828 +
             (C113 * C331 + C47838 * C341) * C47933) *
                C47902) *
               C47636 * C47681 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C1880 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C1881 +
            (((C113 * C508 + C47838 * C521) * C4827 +
              (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
              C6083 * C47933) *
                 C4825 +
             (C5170 + C5171 + C5172 + C5173) * C47902) *
                C47918) *
               C47883 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C1881 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C1880 -
            ((C7148 + C7149 + C7150 + C7151) * C47902 +
             (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                 C4825) *
                C47918) *
               C47681) *
              C47869 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C1881 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C1880 -
            ((C5178 + C5179 + C5180 + C5181) * C47902 +
             (C5173 + C5172 + C5171 + C5170) * C4825) *
                C47918) *
               C47883 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C1880 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C1881 +
            ((C7151 + C7150 + C7149 + C7148) * C4825 +
             (C2244 * C4827 + C2243 * C4823 +
              (C113 * C1342 + C47838 * C1359) * C4828 +
              (C113 * C1360 + C47838 * C1369) * C47933) *
                 C47902) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47884 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C1468 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47723 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47884) *
              C1469 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47884 -
           ((C6426 + C6427 + C6422 + C6423) * C47902 +
            (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                C4825) *
               C47723) *
              C1470 +
          (((C6571 * C4827 + C6570 * C4823 +
             (C113 * C6557 + C47838 * C6559) * C4828 +
             (C113 * C6560 + C47838 * C6563) * C47933) *
                C4825 +
            (C6425 * C4827 + C6424 * C4823 +
             (C113 * C6558 + C47838 * C6561) * C4828 +
             (C113 * C6562 + C47838 * C6564) * C47933) *
                C47902) *
               C47723 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47884 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C47883 +
           (((C5657 * C4827 + C5656 * C4823 +
              (C113 * C1339 + C47838 * C1354) * C4828 +
              (C113 * C1353 + C47838 * C1366) * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47884) *
               C47681) *
              C299 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47884) *
               C47883 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47884 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47681) *
              C300 +
          ((((C4837 + C4836 + C4835 + C4834) * C4825 +
             (C4838 + C4839 + C4840 + C4841) * C47902) *
                C47884 -
            ((C5446 + C5447 + C5448 + C5449) * C47902 +
             (C5177 + C5176 + C5175 + C5174) * C4825) *
                C47723) *
               C47883 +
           (((C5655 + C5654 + C5653 + C5652) * C4825 +
             (C1009 * C4827 + C1008 * C4823 +
              (C113 * C1640 + C47838 * C1641) * C4828 +
              (C113 * C1642 + C47838 * C1643) * C47933) *
                 C47902) *
                C47723 -
            ((C5312 + C5313 + C5314 + C5315) * C47902 +
             (C5011 + C5010 + C5009 + C5008) * C4825) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C2348 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C2349 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C2350 -
           ((C7290 + C7291 + C7286 + C7287) * C47902 +
            (C7434 * C47933 + C7435 * C4828 +
             (C113 * C2070 + C47838 * C2080) * C4823 +
             (C113 * C2062 + C47838 * C2071) * C4827) *
                C4825) *
               C47931) *
              C47883 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C2349 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C2348 -
           ((C7148 + C7149 + C7150 + C7151) * C47902 +
            (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                C4825) *
               C2350 +
           ((C7435 * C4827 + C7434 * C4823 +
             (C113 * C7421 + C47838 * C7423) * C4828 +
             (C113 * C7424 + C47838 * C7427) * C47933) *
                C4825 +
            (C7289 * C4827 + C7288 * C4823 +
             (C113 * C7422 + C47838 * C7425) * C4828 +
             (C113 * C7426 + C47838 * C7428) * C47933) *
                C47902) *
               C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47838 * C122) * C4827 +
                (C113 * C123 + C47838 * C136) * C4823 +
                (C113 * C304 + C47838 * C317) * C4828 +
                (C113 * C316 + C47838 * C334) * C47933) *
                   C4825 +
               (C4830 + C4831 + C4832 + C4833) * C47902) *
                  C47636 * C47618 * C108 -
              ((C4834 + C4835 + C4836 + C4837) * C47902 +
               (C4833 + C4832 + C4831 + C4830) * C4825) *
                  C47636 * C47618 * C109 +
              ((C4837 + C4836 + C4835 + C4834) * C4825 +
               (C4838 + C4839 + C4840 + C4841) * C47902) *
                  C47636 * C47618 * C110 -
              ((C4842 + C4843 + C4844 + C4845) * C47902 +
               (C4841 + C4840 + C4839 + C4838) * C4825) *
                  C47636 * C47618 * C111 +
              ((C4845 + C4844 + C4843 + C4842) * C4825 +
               (C173 * C4827 + C172 * C4823 +
                (C113 * C699 + C47838 * C700) * C4828 +
                (C113 * C701 + C47838 * C702) * C47933) *
                   C47902) *
                  C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C47838 * C122) * C4827 +
                 (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
                 C5017 * C47933) *
                    C4825 +
                (C4830 + C4831 + C4832 + C4833) * C47902) *
                   C47636 * C47954 -
               ((C4996 + C4997 + C4998 + C4999) * C47902 +
                (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 +
                 C5016 * C4827) *
                    C4825) *
                   C47636 * C47942 +
               ((C5019 * C4827 + C5018 * C4823 +
                 (C113 * C1202 + C47838 * C1211) * C4828 +
                 (C113 * C1210 + C47838 * C1220) * C47933) *
                    C4825 +
                (C5004 + C5005 + C5006 + C5007) * C47902) *
                   C47636 * C47915) *
                  C299 +
              (((C4999 + C4998 + C4997 + C4996) * C4825 +
                (C5008 + C5009 + C5010 + C5011) * C47902) *
                   C47636 * C47942 -
               ((C4834 + C4835 + C4836 + C4837) * C47902 +
                (C4833 + C4832 + C4831 + C4830) * C4825) *
                   C47636 * C47954 -
               ((C5012 + C5013 + C5014 + C5015) * C47902 +
                (C5007 + C5006 + C5005 + C5004) * C4825) *
                   C47636 * C47915) *
                  C300 +
              (((C4837 + C4836 + C4835 + C4834) * C4825 +
                (C4838 + C4839 + C4840 + C4841) * C47902) *
                   C47636 * C47954 -
               ((C377 * C47933 + C378 * C4828 + C376 * C4823 + C375 * C4827) *
                    C47902 +
                (C5011 + C5010 + C5009 + C5008) * C4825) *
                   C47636 * C47942 +
               ((C5015 + C5014 + C5013 + C5012) * C4825 +
                (C378 * C4827 + C377 * C4823 +
                 (C113 * C1474 + C47838 * C1475) * C4828 +
                 (C113 * C1476 + C47838 * C1477) * C47933) *
                    C47902) *
                   C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47955 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            ((C113 * C977 + C47838 * C986) * C47933 +
             (C113 * C971 + C47838 * C976) * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 +
             (C113 * C1336 + C47838 * C1348) * C4828 +
             (C113 * C1347 + C47838 * C1363) * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47918) *
              C47618 * C299 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C47944 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47955 -
           ((C5178 + C5179 + C5180 + C5181) * C47902 +
            (C5173 + C5172 + C5171 + C5170) * C4825) *
               C47918) *
              C47618 * C300 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47955 -
           ((C1008 * C47933 + C1009 * C4828 + C579 * C4823 + C578 * C4827) *
                C47902 +
            (C5177 + C5176 + C5175 + C5174) * C4825) *
               C47944 +
           ((C5181 + C5180 + C5179 + C5178) * C4825 +
            (C581 * C4827 + C580 * C4823 +
             (C113 * C2230 + C47838 * C2231) * C4828 +
             (C113 * C2232 + C47838 * C2233) * C47933) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C1126 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C1127 +
           ((C5019 * C4827 + C5018 * C4823 +
             (C113 * C1202 + C47838 * C1211) * C4828 +
             (C113 * C1210 + C47838 * C1220) * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C1127 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C1126 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47915) *
              C47938 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C1126 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C1127 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
            C5017 * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C47636 * C1194 -
          ((C4996 + C4997 + C4998 + C4999) * C47902 +
           (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
               C4825) *
              C47636 * C1195 +
          ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
               C4825 +
           (C5004 + C5005 + C5006 + C5007) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C4828 + C1489 * C4823 + C1490 * C4827) *
               C47902 +
           (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
               C4825) *
              C47636 * C1197 +
          ((C5911 * C4827 + C5910 * C4823 +
            (C113 * C5885 + C47838 * C5887) * C4828 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C4825 +
           (C5909 * C4827 + C5908 * C4823 +
            (C113 * C5886 + C47838 * C5889) * C4828 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47955 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47918) *
              C1126 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47944 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47955 -
           ((C6086 * C47933 + C6087 * C4828 + C2245 * C4823 + C2246 * C4827) *
                C47902 +
            (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                C4825) *
               C47918) *
              C1127 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47955 -
           (((C113 * C1764 + C47838 * C1768) * C47933 +
             (C113 * C1759 + C47838 * C1763) * C4828 + C1655 * C4823 +
             C1656 * C4827) *
                C47902 +
            ((C113 * C1762 + C47838 * C1767) * C47933 +
             (C113 * C1758 + C47838 * C1761) * C4828 + C6085 * C4823 +
             C6084 * C4827) *
                C4825) *
               C47944 +
           ((C6089 * C4827 + C6088 * C4823 +
             (C113 * C6057 + C47838 * C6059) * C4828 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C4825 +
            (C6087 * C4827 + C6086 * C4823 +
             (C113 * C6058 + C47838 * C6061) * C4828 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C113 * C115 + C47838 * C122) * C4827 +
                                 (C113 * C123 + C47838 * C136) * C4823 +
                                 C5016 * C4828 + C5017 * C47933) *
                                    C4825 +
                                (C4830 + C4831 + C4832 + C4833) * C47902) *
                                   C1880 -
                               ((C5166 + C5167 + C5168 + C5169) * C47902 +
                                (C5656 * C47933 + C5657 * C4828 +
                                 (C113 * C519 + C47838 * C537) * C4823 +
                                 (C113 * C507 + C47838 * C520) * C4827) *
                                    C4825) *
                                   C1881 +
                               (((C113 * C508 + C47838 * C521) * C4827 +
                                 (C113 * C522 + C47838 * C538) * C4823 +
                                 C6082 * C4828 + C6083 * C47933) *
                                    C4825 +
                                (C5170 + C5171 + C5172 + C5173) * C47902) *
                                   C47918) *
                                  C47618 * C47951 +
                              (((C5169 + C5168 + C5167 + C5166) * C4825 +
                                (C5174 + C5175 + C5176 + C5177) * C47902) *
                                   C1881 -
                               ((C4834 + C4835 + C4836 + C4837) * C47902 +
                                (C4833 + C4832 + C4831 + C4830) * C4825) *
                                   C1880 -
                               ((C5178 + C5179 + C5180 + C5181) * C47902 +
                                (C5173 + C5172 + C5171 + C5170) * C4825) *
                                   C47918) *
                                  C47618 * C47938 +
                              (((C4837 + C4836 + C4835 + C4834) * C4825 +
                                (C4838 + C4839 + C4840 + C4841) * C47902) *
                                   C1880 -
                               ((C5446 + C5447 + C5448 + C5449) * C47902 +
                                (C5177 + C5176 + C5175 + C5174) * C4825) *
                                   C1881 +
                               ((C5181 + C5180 + C5179 + C5178) * C4825 +
                                (C581 * C4827 + C580 * C4823 +
                                 (C113 * C2230 + C47838 * C2231) * C4828 +
                                 (C113 * C2232 + C47838 * C2233) * C47933) *
                                    C47902) *
                                   C47918) *
                                  C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C1880 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47918) *
              C47954 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C1881 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C1880 -
           ((C6086 * C47933 + C6087 * C4828 + C2245 * C4823 + C2246 * C4827) *
                C47902 +
            (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                C4825) *
               C47918) *
              C47942 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C1880 -
           ((C6426 + C6427 + C6422 + C6423) * C47902 +
            (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                C4825) *
               C1881 +
           ((C6089 * C4827 + C6088 * C4823 +
             (C113 * C6057 + C47838 * C6059) * C4828 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C4825 +
            (C6087 * C4827 + C6086 * C4823 +
             (C113 * C6058 + C47838 * C6061) * C4828 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
            C5017 * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C2055 -
          ((C5166 + C5167 + C5168 + C5169) * C47902 +
           (C5656 * C47933 + C5657 * C4828 +
            (C113 * C519 + C47838 * C537) * C4823 +
            (C113 * C507 + C47838 * C520) * C4827) *
               C4825) *
              C2056 +
          (((C113 * C508 + C47838 * C521) * C4827 +
            (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
            C6083 * C47933) *
               C4825 +
           (C5170 + C5171 + C5172 + C5173) * C47902) *
              C2057 -
          (((C113 * C2476 + C47838 * C2480) * C47933 +
            (C113 * C2471 + C47838 * C2475) * C4828 + C2367 * C4823 +
            C2368 * C4827) *
               C47902 +
           ((C113 * C2474 + C47838 * C2479) * C47933 +
            (C113 * C2470 + C47838 * C2473) * C4828 +
            (C113 * C2070 + C47838 * C2080) * C4823 +
            (C113 * C2062 + C47838 * C2071) * C4827) *
               C4825) *
              C2058 +
          (((C113 * C2063 + C47838 * C2072) * C4827 +
            (C113 * C2073 + C47838 * C2081) * C4823 +
            (C113 * C6945 + C47838 * C6947) * C4828 +
            (C113 * C6948 + C47838 * C6951) * C47933) *
               C4825 +
           ((C113 * C2064 + C47838 * C2074) * C4827 +
            (C113 * C2075 + C47838 * C2082) * C4823 +
            (C113 * C6946 + C47838 * C6949) * C4828 +
            (C113 * C6950 + C47838 * C6952) * C47933) *
               C47902) *
              C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47884 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C1126 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47884) *
               C1127 +
           (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                 C4825 +
             (C5004 + C5005 + C5006 + C5007) * C47902) *
                C47884 -
            ((C6426 + C6427 + C6422 + C6423) * C47902 +
             ((C113 * C1762 + C47838 * C1767) * C47933 +
              (C113 * C1758 + C47838 * C1761) * C4828 + C6085 * C4823 +
              C6084 * C4827) *
                 C4825) *
                C47723) *
               C47915) *
              C47869 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47884) *
               C1126 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47884 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C1127 +
           (((C6423 + C6422 + C6427 + C6426) * C4825 +
             (C1654 * C4827 + C1653 * C4823 +
              (C113 * C1760 + C47838 * C1765) * C4828 +
              (C113 * C1766 + C47838 * C1769) * C47933) *
                 C47902) *
                C47723 -
            ((C5012 + C5013 + C5014 + C5015) * C47902 +
             (C5007 + C5006 + C5005 + C5004) * C4825) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47884 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            ((C113 * C977 + C47838 * C986) * C47933 +
             (C113 * C971 + C47838 * C976) * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C47618 * C695 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C47723 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47884) *
              C47618 * C696 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47884 -
           ((C5446 + C5447 + C5448 + C5449) * C47902 +
            (C5177 + C5176 + C5175 + C5174) * C4825) *
               C47723) *
              C47618 * C697 +
          (((C5449 + C5448 + C5447 + C5446) * C4825 +
            (C823 * C4827 + C822 * C4823 +
             (C113 * C975 + C47838 * C984) * C4828 +
             (C113 * C985 + C47838 * C990) * C47933) *
                C47902) *
               C47723 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C2348 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C2349 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C2350 -
           ((C7290 + C7291 + C7286 + C7287) * C47902 +
            ((C113 * C2474 + C47838 * C2479) * C47933 +
             (C113 * C2470 + C47838 * C2473) * C4828 +
             (C113 * C2070 + C47838 * C2080) * C4823 +
             (C113 * C2062 + C47838 * C2071) * C4827) *
                C4825) *
               C47931) *
              C47618 * C47869 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C2349 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C2348 -
           ((C5178 + C5179 + C5180 + C5181) * C47902 +
            (C5173 + C5172 + C5171 + C5170) * C4825) *
               C2350 +
           ((C7287 + C7286 + C7291 + C7290) * C4825 +
            (C2366 * C4827 + C2365 * C4823 +
             (C113 * C2472 + C47838 * C2477) * C4828 +
             (C113 * C2478 + C47838 * C2481) * C47933) *
                C47902) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47954 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47942 +
           ((C5019 * C4827 + C5018 * C4823 +
             (C113 * C1202 + C47838 * C1211) * C4828 +
             (C113 * C1210 + C47838 * C1220) * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47915) *
              C299 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47942 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47954 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47915) *
              C300 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C47954 -
           ((C377 * C47933 + C378 * C4828 + C376 * C4823 + C375 * C4827) *
                C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47942 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 +
            (C113 * C304 + C47838 * C317) * C4828 +
            (C113 * C316 + C47838 * C334) * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C47636 * C47618 * C108 -
          ((C4834 + C4835 + C4836 + C4837) * C47902 +
           (C4833 + C4832 + C4831 + C4830) * C4825) *
              C47636 * C47618 * C109 +
          ((C4837 + C4836 + C4835 + C4834) * C4825 +
           (C4838 + C4839 + C4840 + C4841) * C47902) *
              C47636 * C47618 * C110 -
          ((C4842 + C4843 + C4844 + C4845) * C47902 +
           (C4841 + C4840 + C4839 + C4838) * C4825) *
              C47636 * C47618 * C111 +
          ((C4845 + C4844 + C4843 + C4842) * C4825 +
           (C173 * C4827 + C172 * C4823 +
            (C113 * C699 + C47838 * C700) * C4828 +
            (C113 * C701 + C47838 * C702) * C47933) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C1126 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C1127 +
           ((C5019 * C4827 + C5018 * C4823 +
             (C113 * C1202 + C47838 * C1211) * C4828 +
             (C113 * C1210 + C47838 * C1220) * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C1127 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C1126 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47915) *
              C47938 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C1126 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C1127 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
            C5017 * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C47636 * C1194 -
          ((C4996 + C4997 + C4998 + C4999) * C47902 +
           (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
               C4825) *
              C47636 * C1195 +
          ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
               C4825 +
           (C5004 + C5005 + C5006 + C5007) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C4828 + C1489 * C4823 + C1490 * C4827) *
               C47902 +
           (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
               C4825) *
              C47636 * C1197 +
          ((C5911 * C4827 + C5910 * C4823 +
            (C113 * C5885 + C47838 * C5887) * C4828 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C4825 +
           (C5909 * C4827 + C5908 * C4823 +
            (C113 * C5886 + C47838 * C5889) * C4828 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C1880 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47918) *
              C47618 * C47951 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C1881 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C1880 -
           ((C5178 + C5179 + C5180 + C5181) * C47902 +
            (C5173 + C5172 + C5171 + C5170) * C4825) *
               C47918) *
              C47618 * C47938 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C1880 -
           ((C5446 + C5447 + C5448 + C5449) * C47902 +
            (C5177 + C5176 + C5175 + C5174) * C4825) *
               C1881 +
           ((C5181 + C5180 + C5179 + C5178) * C4825 +
            (C581 * C4827 + C580 * C4823 +
             (C113 * C2230 + C47838 * C2231) * C4828 +
             (C113 * C2232 + C47838 * C2233) * C47933) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C1880 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47918) *
              C47954 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C1881 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C1880 -
           ((C6086 * C47933 + C6087 * C4828 + C2245 * C4823 + C2246 * C4827) *
                C47902 +
            (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                C4825) *
               C47918) *
              C47942 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C1880 -
           ((C6426 + C6427 + C6422 + C6423) * C47902 +
            (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                C4825) *
               C1881 +
           ((C6089 * C4827 + C6088 * C4823 +
             (C113 * C6057 + C47838 * C6059) * C4828 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C4825 +
            (C6087 * C4827 + C6086 * C4823 +
             (C113 * C6058 + C47838 * C6061) * C4828 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C3342 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C47883 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C3342) *
               C47681) *
              C47595 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C3342) *
               C47883 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C3342 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47681) *
              C47604 +
          ((((C4837 + C4836 + C4835 + C4834) * C4825 +
             (C4838 + C4839 + C4840 + C4841) * C47902) *
                C3342 -
            ((C5446 + C5447 + C5448 + C5449) * C47902 +
             (C5177 + C5176 + C5175 + C5174) * C4825) *
                C47723) *
               C47883 +
           (((C5655 + C5654 + C5653 + C5652) * C4825 +
             (C1009 * C4827 + C1008 * C4823 +
              (C113 * C1640 + C47838 * C1641) * C4828 +
              (C113 * C1642 + C47838 * C1643) * C47933) *
                 C47902) *
                C47723 -
            ((C5312 + C5313 + C5314 + C5315) * C47902 +
             (C5011 + C5010 + C5009 + C5008) * C4825) *
                C3342) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47719 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47726 +
            (((C113 * C508 + C47838 * C521) * C4827 +
              (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
              C6083 * C47933) *
                 C4825 +
             (C5170 + C5171 + C5172 + C5173) * C47902) *
                C3850) *
               C47883 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47726 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47719 -
            ((C7148 + C7149 + C7150 + C7151) * C47902 +
             (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                 C4825) *
                C3850) *
               C47681) *
              C2688 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47726 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47719 -
            ((C5178 + C5179 + C5180 + C5181) * C47902 +
             (C5173 + C5172 + C5171 + C5170) * C4825) *
                C3850) *
               C47883 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47719 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47726 +
            ((C7151 + C7150 + C7149 + C7148) * C4825 +
             (C2244 * C4827 + C2243 * C4823 +
              (C113 * C1342 + C47838 * C1359) * C4828 +
              (C113 * C1360 + C47838 * C1369) * C47933) *
                 C47902) *
                C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C3342 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C47954 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C3342) *
               C47942 +
           (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                 C4825 +
             (C5004 + C5005 + C5006 + C5007) * C47902) *
                C3342 -
            ((C6426 + C6427 + C6422 + C6423) * C47902 +
             (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                 C4825) *
                C47723) *
               C47915) *
              C2688 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C3342) *
               C47954 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C3342 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47942 +
           (((C6423 + C6422 + C6427 + C6426) * C4825 +
             (C1654 * C4827 + C1653 * C4823 +
              (C113 * C1760 + C47838 * C1765) * C4828 +
              (C113 * C1766 + C47838 * C1769) * C47933) *
                 C47902) *
                C47723 -
            ((C5012 + C5013 + C5014 + C5015) * C47902 +
             (C5007 + C5006 + C5005 + C5004) * C4825) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C3342 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C47618 * C47960 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C47723 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C3342) *
              C47618 * C47953 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C3342 -
           ((C5446 + C5447 + C5448 + C5449) * C47902 +
            (C5177 + C5176 + C5175 + C5174) * C4825) *
               C47723) *
              C47618 * C47940 +
          (((C5449 + C5448 + C5447 + C5446) * C4825 +
            (C823 * C4827 + C822 * C4823 +
             (C113 * C975 + C47838 * C984) * C4828 +
             (C113 * C985 + C47838 * C990) * C47933) *
                C47902) *
               C47723 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47962 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47959 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47950 -
           ((C7290 + C7291 + C7286 + C7287) * C47902 +
            (C7434 * C47933 + C7435 * C4828 +
             (C113 * C2070 + C47838 * C2080) * C4823 +
             (C113 * C2062 + C47838 * C2071) * C4827) *
                C4825) *
               C47931) *
              C47618 * C2688 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C47959 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47962 -
           ((C5178 + C5179 + C5180 + C5181) * C47902 +
            (C5173 + C5172 + C5171 + C5170) * C4825) *
               C47950 +
           ((C7287 + C7286 + C7291 + C7290) * C4825 +
            (C2366 * C4827 + C2365 * C4823 +
             (C113 * C2472 + C47838 * C2477) * C4828 +
             (C113 * C2478 + C47838 * C2481) * C47933) *
                C47902) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C4827 +
                     (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
                     C5017 * C47933) *
                        C4825 +
                    (C4830 + C4831 + C4832 + C4833) * C47902) *
                       C47719 -
                   ((C5166 + C5167 + C5168 + C5169) * C47902 +
                    (C5656 * C47933 + C5657 * C4828 +
                     (C113 * C519 + C47838 * C537) * C4823 +
                     (C113 * C507 + C47838 * C520) * C4827) *
                        C4825) *
                       C47726 +
                   (((C113 * C508 + C47838 * C521) * C4827 +
                     (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
                     C6083 * C47933) *
                        C4825 +
                    (C5170 + C5171 + C5172 + C5173) * C47902) *
                       C3850) *
                      C47618 * C47595 +
                  (((C5169 + C5168 + C5167 + C5166) * C4825 +
                    (C5174 + C5175 + C5176 + C5177) * C47902) *
                       C47726 -
                   ((C4834 + C4835 + C4836 + C4837) * C47902 +
                    (C4833 + C4832 + C4831 + C4830) * C4825) *
                       C47719 -
                   ((C5178 + C5179 + C5180 + C5181) * C47902 +
                    (C5173 + C5172 + C5171 + C5170) * C4825) *
                       C3850) *
                      C47618 * C47604 +
                  (((C4837 + C4836 + C4835 + C4834) * C4825 +
                    (C4838 + C4839 + C4840 + C4841) * C47902) *
                       C47719 -
                   ((C5446 + C5447 + C5448 + C5449) * C47902 +
                    (C5177 + C5176 + C5175 + C5174) * C4825) *
                       C47726 +
                   ((C5181 + C5180 + C5179 + C5178) * C4825 +
                    (C581 * C4827 + C580 * C4823 +
                     (C113 * C2230 + C47838 * C2231) * C4828 +
                     (C113 * C2232 + C47838 * C2233) * C47933) *
                        C47902) *
                       C3850) *
                      C47618 * C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C3342 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C47618 * C47960 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C47723 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C3342) *
              C47618 * C47953 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C3342 -
           ((C5446 + C5447 + C5448 + C5449) * C47902 +
            (C5177 + C5176 + C5175 + C5174) * C4825) *
               C47723) *
              C47618 * C47940 +
          (((C5449 + C5448 + C5447 + C5446) * C4825 +
            (C823 * C4827 + C822 * C4823 +
             (C113 * C975 + C47838 * C984) * C4828 +
             (C113 * C985 + C47838 * C990) * C47933) *
                C47902) *
               C47723 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C3342 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C47954 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C3342) *
               C47942 +
           (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                 C4825 +
             (C5004 + C5005 + C5006 + C5007) * C47902) *
                C3342 -
            ((C6426 + C6427 + C6422 + C6423) * C47902 +
             (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                 C4825) *
                C47723) *
               C47915) *
              C2688 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C3342) *
               C47954 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C3342 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47942 +
           (((C6423 + C6422 + C6427 + C6426) * C4825 +
             (C1654 * C4827 + C1653 * C4823 +
              (C113 * C1760 + C47838 * C1765) * C4828 +
              (C113 * C1766 + C47838 * C1769) * C47933) *
                 C47902) *
                C47723 -
            ((C5012 + C5013 + C5014 + C5015) * C47902 +
             (C5007 + C5006 + C5005 + C5004) * C4825) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47883 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47681) *
              C695 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47681 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47883) *
              C696 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C47883 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47681) *
              C697 +
          (((C5315 + C5314 + C5313 + C5312) * C4825 +
            (C710 * C4827 + C709 * C4823 +
             (C113 * C311 + C47838 * C330) * C4828 +
             (C113 * C331 + C47838 * C341) * C47933) *
                C47902) *
               C47636 * C47681 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C1468 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C1469 +
           ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C1470 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C47636 * C47925) *
              C47869 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C1469 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C1468 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C1470 +
           ((C6223 + C6222 + C6221 + C6220) * C4825 +
            (C1488 * C4827 + C1487 * C4823 +
             (C113 * C1205 + C47838 * C1216) * C4828 +
             (C113 * C1217 + C47838 * C1223) * C47933) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47884 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C47883 +
           (((C5657 * C4827 + C5656 * C4823 +
              (C113 * C1339 + C47838 * C1354) * C4828 +
              (C113 * C1353 + C47838 * C1366) * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47884) *
               C47681) *
              C299 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47884) *
               C47883 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47884 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C47681) *
              C300 +
          ((((C4837 + C4836 + C4835 + C4834) * C4825 +
             (C4838 + C4839 + C4840 + C4841) * C47902) *
                C47884 -
            ((C5446 + C5447 + C5448 + C5449) * C47902 +
             (C5177 + C5176 + C5175 + C5174) * C4825) *
                C47723) *
               C47883 +
           (((C5655 + C5654 + C5653 + C5652) * C4825 +
             (C1009 * C4827 + C1008 * C4823 +
              (C113 * C1640 + C47838 * C1641) * C4828 +
              (C113 * C1642 + C47838 * C1643) * C47933) *
                 C47902) *
                C47723 -
            ((C5312 + C5313 + C5314 + C5315) * C47902 +
             (C5011 + C5010 + C5009 + C5008) * C4825) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47884 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C1468 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47723 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47884) *
              C1469 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47884 -
           ((C6426 + C6427 + C6422 + C6423) * C47902 +
            (C6570 * C47933 + C6571 * C4828 + C6085 * C4823 + C6084 * C4827) *
                C4825) *
               C47723) *
              C1470 +
          (((C6571 * C4827 + C6570 * C4823 +
             (C113 * C6557 + C47838 * C6559) * C4828 +
             (C113 * C6560 + C47838 * C6563) * C47933) *
                C4825 +
            (C6425 * C4827 + C6424 * C4823 +
             (C113 * C6558 + C47838 * C6561) * C4828 +
             (C113 * C6562 + C47838 * C6564) * C47933) *
                C47902) *
               C47723 -
           ((C6220 + C6221 + C6222 + C6223) * C47902 +
            (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
                C4825) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47954 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47942 +
           ((C5019 * C4827 + C5018 * C4823 +
             (C113 * C1202 + C47838 * C1211) * C4828 +
             (C113 * C1210 + C47838 * C1220) * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47915) *
              C299 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47942 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47954 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47915) *
              C300 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C47954 -
           ((C377 * C47933 + C378 * C4828 + C376 * C4823 + C375 * C4827) *
                C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47942 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 +
            (C113 * C304 + C47838 * C317) * C4828 +
            (C113 * C316 + C47838 * C334) * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C47636 * C47618 * C108 -
          ((C4834 + C4835 + C4836 + C4837) * C47902 +
           (C4833 + C4832 + C4831 + C4830) * C4825) *
              C47636 * C47618 * C109 +
          ((C4837 + C4836 + C4835 + C4834) * C4825 +
           (C4838 + C4839 + C4840 + C4841) * C47902) *
              C47636 * C47618 * C110 -
          ((C4842 + C4843 + C4844 + C4845) * C47902 +
           (C4841 + C4840 + C4839 + C4838) * C4825) *
              C47636 * C47618 * C111 +
          ((C4845 + C4844 + C4843 + C4842) * C4825 +
           (C173 * C4827 + C172 * C4823 +
            (C113 * C699 + C47838 * C700) * C4828 +
            (C113 * C701 + C47838 * C702) * C47933) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47955 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            ((C113 * C977 + C47838 * C986) * C47933 +
             (C113 * C971 + C47838 * C976) * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 +
             (C113 * C1336 + C47838 * C1348) * C4828 +
             (C113 * C1347 + C47838 * C1363) * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47918) *
              C47618 * C299 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C47944 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47955 -
           ((C5178 + C5179 + C5180 + C5181) * C47902 +
            (C5173 + C5172 + C5171 + C5170) * C4825) *
               C47918) *
              C47618 * C300 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47955 -
           ((C1008 * C47933 + C1009 * C4828 + C579 * C4823 + C578 * C4827) *
                C47902 +
            (C5177 + C5176 + C5175 + C5174) * C4825) *
               C47944 +
           ((C5181 + C5180 + C5179 + C5178) * C4825 +
            (C581 * C4827 + C580 * C4823 +
             (C113 * C2230 + C47838 * C2231) * C4828 +
             (C113 * C2232 + C47838 * C2233) * C47933) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C1126 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C1127 +
           ((C5019 * C4827 + C5018 * C4823 +
             (C113 * C1202 + C47838 * C1211) * C4828 +
             (C113 * C1210 + C47838 * C1220) * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C1127 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C1126 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47915) *
              C47938 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C1126 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C1127 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
            C5017 * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C47636 * C1194 -
          ((C4996 + C4997 + C4998 + C4999) * C47902 +
           (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
               C4825) *
              C47636 * C1195 +
          ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
               C4825 +
           (C5004 + C5005 + C5006 + C5007) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C4828 + C1489 * C4823 + C1490 * C4827) *
               C47902 +
           (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
               C4825) *
              C47636 * C1197 +
          ((C5911 * C4827 + C5910 * C4823 +
            (C113 * C5885 + C47838 * C5887) * C4828 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C4825 +
           (C5909 * C4827 + C5908 * C4823 +
            (C113 * C5886 + C47838 * C5889) * C4828 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47955 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            (C5656 * C47933 + C5657 * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C4827 +
             (C113 * C522 + C47838 * C538) * C4823 + C6082 * C4828 +
             C6083 * C47933) *
                C4825 +
            (C5170 + C5171 + C5172 + C5173) * C47902) *
               C47918) *
              C1126 +
          (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                C4825 +
            (C5648 + C5649 + C5650 + C5651) * C47902) *
               C47944 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47955 -
           ((C6086 * C47933 + C6087 * C4828 + C2245 * C4823 + C2246 * C4827) *
                C47902 +
            (C6088 * C47933 + C6089 * C4828 + C6083 * C4823 + C6082 * C4827) *
                C4825) *
               C47918) *
              C1127 +
          (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47955 -
           (((C113 * C1764 + C47838 * C1768) * C47933 +
             (C113 * C1759 + C47838 * C1763) * C4828 + C1655 * C4823 +
             C1656 * C4827) *
                C47902 +
            ((C113 * C1762 + C47838 * C1767) * C47933 +
             (C113 * C1758 + C47838 * C1761) * C4828 + C6085 * C4823 +
             C6084 * C4827) *
                C4825) *
               C47944 +
           ((C6089 * C4827 + C6088 * C4823 +
             (C113 * C6057 + C47838 * C6059) * C4828 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C4825 +
            (C6087 * C4827 + C6086 * C4823 +
             (C113 * C6058 + C47838 * C6061) * C4828 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47884 -
           ((C5166 + C5167 + C5168 + C5169) * C47902 +
            ((C113 * C977 + C47838 * C986) * C47933 +
             (C113 * C971 + C47838 * C976) * C4828 +
             (C113 * C519 + C47838 * C537) * C4823 +
             (C113 * C507 + C47838 * C520) * C4827) *
                C4825) *
               C47723) *
              C47618 * C695 +
          (((C5169 + C5168 + C5167 + C5166) * C4825 +
            (C5174 + C5175 + C5176 + C5177) * C47902) *
               C47723 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47884) *
              C47618 * C696 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47884 -
           ((C5446 + C5447 + C5448 + C5449) * C47902 +
            (C5177 + C5176 + C5175 + C5174) * C4825) *
               C47723) *
              C47618 * C697 +
          (((C5449 + C5448 + C5447 + C5446) * C4825 +
            (C823 * C4827 + C822 * C4823 +
             (C113 * C975 + C47838 * C984) * C4828 +
             (C113 * C985 + C47838 * C990) * C47933) *
                C47902) *
               C47723 -
           ((C4842 + C4843 + C4844 + C4845) * C47902 +
            (C4841 + C4840 + C4839 + C4838) * C4825) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47838 * C122) * C4827 +
              (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
              C5017 * C47933) *
                 C4825 +
             (C4830 + C4831 + C4832 + C4833) * C47902) *
                C47884 -
            ((C5166 + C5167 + C5168 + C5169) * C47902 +
             (C5656 * C47933 + C5657 * C4828 +
              (C113 * C519 + C47838 * C537) * C4823 +
              (C113 * C507 + C47838 * C520) * C4827) *
                 C4825) *
                C47723) *
               C1126 +
           (((C5657 * C4827 + C5656 * C4823 + C6084 * C4828 + C6085 * C47933) *
                 C4825 +
             (C5648 + C5649 + C5650 + C5651) * C47902) *
                C47723 -
            ((C4996 + C4997 + C4998 + C4999) * C47902 +
             (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                 C4825) *
                C47884) *
               C1127 +
           (((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
                 C4825 +
             (C5004 + C5005 + C5006 + C5007) * C47902) *
                C47884 -
            ((C6426 + C6427 + C6422 + C6423) * C47902 +
             ((C113 * C1762 + C47838 * C1767) * C47933 +
              (C113 * C1758 + C47838 * C1761) * C4828 + C6085 * C4823 +
              C6084 * C4827) *
                 C4825) *
                C47723) *
               C47915) *
              C47869 +
          ((((C5169 + C5168 + C5167 + C5166) * C4825 +
             (C5174 + C5175 + C5176 + C5177) * C47902) *
                C47723 -
            ((C4834 + C4835 + C4836 + C4837) * C47902 +
             (C4833 + C4832 + C4831 + C4830) * C4825) *
                C47884) *
               C1126 +
           (((C4999 + C4998 + C4997 + C4996) * C4825 +
             (C5008 + C5009 + C5010 + C5011) * C47902) *
                C47884 -
            ((C5652 + C5653 + C5654 + C5655) * C47902 +
             (C5651 + C5650 + C5649 + C5648) * C4825) *
                C47723) *
               C1127 +
           (((C6423 + C6422 + C6427 + C6426) * C4825 +
             (C1654 * C4827 + C1653 * C4823 +
              (C113 * C1760 + C47838 * C1765) * C4828 +
              (C113 * C1766 + C47838 * C1769) * C47933) *
                 C47902) *
                C47723 -
            ((C5012 + C5013 + C5014 + C5015) * C47902 +
             (C5007 + C5006 + C5005 + C5004) * C4825) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 +
            (C113 * C304 + C47838 * C317) * C4828 +
            (C113 * C316 + C47838 * C334) * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C47636 * C47618 * C108 -
          ((C4834 + C4835 + C4836 + C4837) * C47902 +
           (C4833 + C4832 + C4831 + C4830) * C4825) *
              C47636 * C47618 * C109 +
          ((C4837 + C4836 + C4835 + C4834) * C4825 +
           (C4838 + C4839 + C4840 + C4841) * C47902) *
              C47636 * C47618 * C110 -
          ((C4842 + C4843 + C4844 + C4845) * C47902 +
           (C4841 + C4840 + C4839 + C4838) * C4825) *
              C47636 * C47618 * C111 +
          ((C4845 + C4844 + C4843 + C4842) * C4825 +
           (C173 * C4827 + C172 * C4823 +
            (C113 * C699 + C47838 * C700) * C4828 +
            (C113 * C701 + C47838 * C702) * C47933) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C47954 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C47942 +
           ((C5019 * C4827 + C5018 * C4823 +
             (C113 * C1202 + C47838 * C1211) * C4828 +
             (C113 * C1210 + C47838 * C1220) * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47915) *
              C299 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C47942 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C47954 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47915) *
              C300 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C47954 -
           ((C377 * C47933 + C378 * C4828 + C376 * C4823 + C375 * C4827) *
                C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C47942 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C4827 +
             (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
             C5017 * C47933) *
                C4825 +
            (C4830 + C4831 + C4832 + C4833) * C47902) *
               C47636 * C1126 -
           ((C4996 + C4997 + C4998 + C4999) * C47902 +
            (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
                C4825) *
               C47636 * C1127 +
           ((C5019 * C4827 + C5018 * C4823 +
             (C113 * C1202 + C47838 * C1211) * C4828 +
             (C113 * C1210 + C47838 * C1220) * C47933) *
                C4825 +
            (C5004 + C5005 + C5006 + C5007) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C4999 + C4998 + C4997 + C4996) * C4825 +
            (C5008 + C5009 + C5010 + C5011) * C47902) *
               C47636 * C1127 -
           ((C4834 + C4835 + C4836 + C4837) * C47902 +
            (C4833 + C4832 + C4831 + C4830) * C4825) *
               C47636 * C1126 -
           ((C5012 + C5013 + C5014 + C5015) * C47902 +
            (C5007 + C5006 + C5005 + C5004) * C4825) *
               C47636 * C47915) *
              C47938 +
          (((C4837 + C4836 + C4835 + C4834) * C4825 +
            (C4838 + C4839 + C4840 + C4841) * C47902) *
               C47636 * C1126 -
           ((C5312 + C5313 + C5314 + C5315) * C47902 +
            (C5011 + C5010 + C5009 + C5008) * C4825) *
               C47636 * C1127 +
           ((C5015 + C5014 + C5013 + C5012) * C4825 +
            (C378 * C4827 + C377 * C4823 +
             (C113 * C1474 + C47838 * C1475) * C4828 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C4827 +
            (C113 * C123 + C47838 * C136) * C4823 + C5016 * C4828 +
            C5017 * C47933) *
               C4825 +
           (C4830 + C4831 + C4832 + C4833) * C47902) *
              C47636 * C1194 -
          ((C4996 + C4997 + C4998 + C4999) * C47902 +
           (C5018 * C47933 + C5019 * C4828 + C5017 * C4823 + C5016 * C4827) *
               C4825) *
              C47636 * C1195 +
          ((C5019 * C4827 + C5018 * C4823 + C5906 * C4828 + C5907 * C47933) *
               C4825 +
           (C5004 + C5005 + C5006 + C5007) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C4828 + C1489 * C4823 + C1490 * C4827) *
               C47902 +
           (C5910 * C47933 + C5911 * C4828 + C5907 * C4823 + C5906 * C4827) *
               C4825) *
              C47636 * C1197 +
          ((C5911 * C4827 + C5910 * C4823 +
            (C113 * C5885 + C47838 * C5887) * C4828 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C4825 +
           (C5909 * C4827 + C5908 * C4823 +
            (C113 * C5886 + C47838 * C5889) * C4828 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47677 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47684 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C2948) *
              C47595 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47684 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47677 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C2948) *
              C47604 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C47677 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47684 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47884 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C47677 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47884) *
               C47684 +
           ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C10483 * C319 + C10481 * C335 + C10484 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C4825 +
             ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
                C47884 -
            (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
             ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
               C10481 * C1366) *
                  C47821 +
              (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
               C10481 * C1354) *
                  C114) *
                 C4825) *
                C47723) *
               C2948) *
              C2688 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47884) *
               C47677 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47884 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47684 +
           ((((C12145 + C12144) * C114 + (C12143 + C12142) * C47821) * C4825 +
             ((C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
             ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
                C47884) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47961 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47957 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47947 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C47636 * C47925) *
              C2688 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47957 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47961 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47947 +
           (((C11939 + C11938) * C114 + (C11937 + C11936) * C47821) * C4825 +
            ((C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C2580 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47681) *
              C47960 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47681 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C2580) *
              C47953 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C2580 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47681) *
              C47940 +
          ((((C11063 + C11062) * C114 + (C11061 + C11060) * C47821) * C4825 +
            ((C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
                 C114 +
             (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47955 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47944 +
            (((C10483 * C508 + C10481 * C521 + C10484 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C10483 * C522 + C10481 * C538 + C10484 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C4825 +
             ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
                C47918) *
               C2580 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47944 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47955 -
            (((C12860 + C12861) * C47821 + (C12862 + C12863) * C114) * C47902 +
             ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
               C10481 * C1363) *
                  C47821 +
              (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
               C10481 * C1348) *
                  C114) *
                 C4825) *
                C47918) *
               C47681) *
              C2688 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47944 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47955 -
            (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
             ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
                C47918) *
               C2580 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47955 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47944 +
            (((C12863 + C12862) * C114 + (C12861 + C12860) * C47821) * C4825 +
             ((C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47884 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C2580 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47884) *
               C47681) *
              C47595 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47884) *
               C2580 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47884 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47681) *
              C47604 +
          (((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
             ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
                C47884 -
            (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
             ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
                C47723) *
               C2580 +
           ((((C11423 + C11422) * C114 + (C11421 + C11420) * C47821) * C4825 +
             ((C10483 * C974 + C10481 * C983 + C10484 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C10483 * C982 + C10481 * C989 + C10484 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
             ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
                C47884) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C2580 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47681) *
              C47960 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47681 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C2580) *
              C47953 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C2580 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47681) *
              C47940 +
          ((((C11063 + C11062) * C114 + (C11061 + C11060) * C47821) * C4825 +
            ((C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
                 C114 +
             (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47961 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47957 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47947 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C47636 * C47925) *
              C2688 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47957 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47961 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47947 +
           (((C11939 + C11938) * C114 + (C11937 + C11936) * C47821) * C4825 +
            ((C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C3342 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C47677 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47684 +
           ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C10483 * C319 + C10481 * C335 + C10484 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C4825 +
             ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
                C3342 -
            (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
             ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
               C10481 * C1366) *
                  C47821 +
              (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
               C10481 * C1354) *
                  C114) *
                 C4825) *
                C47723) *
               C2948) *
              C47869 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C3342) *
               C47677 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C3342 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47684 +
           ((((C12145 + C12144) * C114 + (C12143 + C12142) * C47821) * C4825 +
             ((C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
             ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
                C3342) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47719 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47726 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C3850) *
              C47677 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47726 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47719 -
           (((C12860 + C12861) * C47821 + (C12862 + C12863) * C114) * C47902 +
            ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
              C10481 * C1363) *
                 C47821 +
             (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
              C10481 * C1348) *
                 C114) *
                C4825) *
               C3850) *
              C47684 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47719 -
           (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C47726 +
           (((C10483 * C1340 + C10481 * C1355 + C10484 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C10483 * C1356 + C10481 * C1367 + C10484 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C4825 +
            ((C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C3850) *
              C2948) *
         C47590) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C3342 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C47961 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47723 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C3342) *
              C47957 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C3342 -
           (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C47723) *
              C47947 +
          ((((C10483 * C1758 + C10481 * C1761 + C10484 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C10483 * C1762 + C10481 * C1767 + C10484 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C4825 +
            ((C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C3342 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C2580 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47681) *
              C47951 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C3342) *
               C2580 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C3342 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47681) *
              C47938 +
          (((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
             ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
                C3342 -
            (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
             ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
                C47723) *
               C2580 +
           ((((C11423 + C11422) * C114 + (C11421 + C11420) * C47821) * C4825 +
             ((C10483 * C974 + C10481 * C983 + C10484 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C10483 * C982 + C10481 * C989 + C10484 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
             ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
                C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47962 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47959 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47950 -
           (((C13002 + C13003) * C47821 + (C13004 + C13005) * C114) * C47902 +
            ((C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
              C10481 * C2080) *
                 C47821 +
             (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
              C10481 * C2071) *
                 C114) *
                C4825) *
               C47931) *
              C2580 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47959 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47962 -
           (((C12860 + C12861) * C47821 + (C12862 + C12863) * C114) * C47902 +
            ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
              C10481 * C1363) *
                 C47821 +
             (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
              C10481 * C1348) *
                 C114) *
                C4825) *
               C47950 +
           (((C10483 * C2470 + C10481 * C2473 + C10484 * C6945 +
              C47935 * C6947) *
                 C114 +
             (C10483 * C2474 + C10481 * C2479 + C10484 * C6948 +
              C47935 * C6951) *
                 C47821) *
                C4825 +
            ((C10483 * C2471 + C10481 * C2475 + C10484 * C6946 +
              C47935 * C6949) *
                 C114 +
             (C10483 * C2476 + C10481 * C2480 + C10484 * C6950 +
              C47935 * C6952) *
                 C47821) *
                C47902) *
               C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47719 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47726 +
            (((C10483 * C508 + C10481 * C521 + C10484 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C10483 * C522 + C10481 * C538 + C10484 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C4825 +
             ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
                C3850) *
               C2580 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47726 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47719 -
            (((C12860 + C12861) * C47821 + (C12862 + C12863) * C114) * C47902 +
             ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
               C10481 * C1363) *
                  C47821 +
              (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
               C10481 * C1348) *
                  C114) *
                 C4825) *
                C3850) *
               C47681) *
              C47869 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47726 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47719 -
            (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
             ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
                C3850) *
               C2580 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47719 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47726 +
            (((C12863 + C12862) * C114 + (C12861 + C12860) * C47821) * C4825 +
             ((C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C3342 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C2580 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47681) *
              C47951 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C3342) *
               C2580 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C3342 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47681) *
              C47938 +
          (((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
             ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
                C3342 -
            (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
             ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
                C47723) *
               C2580 +
           ((((C11423 + C11422) * C114 + (C11421 + C11420) * C47821) * C4825 +
             ((C10483 * C974 + C10481 * C983 + C10484 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C10483 * C982 + C10481 * C989 + C10484 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
             ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
                C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C3342 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C47961 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47723 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C3342) *
              C47957 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C3342 -
           (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C47723) *
              C47947 +
          ((((C10483 * C1758 + C10481 * C1761 + C10484 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C10483 * C1762 + C10481 * C1767 + C10484 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C4825 +
            ((C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C1468 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C1469 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C1470 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C47636 * C47925) *
              C47869 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C1469 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C1468 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C1470 +
           (((C11939 + C11938) * C114 + (C11937 + C11936) * C47821) * C4825 +
            ((C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47883 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47681) *
              C695 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47681 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47883) *
              C696 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C47883 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47681) *
              C697 +
          ((((C11063 + C11062) * C114 + (C11061 + C11060) * C47821) * C4825 +
            ((C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
                 C114 +
             (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C1880 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C1881 +
            (((C10483 * C508 + C10481 * C521 + C10484 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C10483 * C522 + C10481 * C538 + C10484 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C4825 +
             ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
                C47918) *
               C47883 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C1881 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C1880 -
            (((C12860 + C12861) * C47821 + (C12862 + C12863) * C114) * C47902 +
             ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
               C10481 * C1363) *
                  C47821 +
              (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
               C10481 * C1348) *
                  C114) *
                 C4825) *
                C47918) *
               C47681) *
              C47869 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C1881 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C1880 -
            (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
             ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
                C47918) *
               C47883 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C1880 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C1881 +
            (((C12863 + C12862) * C114 + (C12861 + C12860) * C47821) * C4825 +
             ((C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47884 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C1468 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47723 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47884) *
              C1469 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47884 -
           (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C47723) *
              C1470 +
          ((((C10483 * C1758 + C10481 * C1761 + C10484 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C10483 * C1762 + C10481 * C1767 + C10484 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C4825 +
            ((C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47884 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C47883 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47884) *
               C47681) *
              C299 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47884) *
               C47883 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47884 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47681) *
              C300 +
          (((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
             ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
                C47884 -
            (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
             ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
                C47723) *
               C47883 +
           ((((C11423 + C11422) * C114 + (C11421 + C11420) * C47821) * C4825 +
             ((C10483 * C974 + C10481 * C983 + C10484 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C10483 * C982 + C10481 * C989 + C10484 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
             ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C2348 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C2349 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C2350 -
           (((C13002 + C13003) * C47821 + (C13004 + C13005) * C114) * C47902 +
            ((C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
              C10481 * C2080) *
                 C47821 +
             (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
              C10481 * C2071) *
                 C114) *
                C4825) *
               C47931) *
              C47883 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C2349 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C2348 -
           (((C12860 + C12861) * C47821 + (C12862 + C12863) * C114) * C47902 +
            ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
              C10481 * C1363) *
                 C47821 +
             (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
              C10481 * C1348) *
                 C114) *
                C4825) *
               C2350 +
           (((C10483 * C2470 + C10481 * C2473 + C10484 * C6945 +
              C47935 * C6947) *
                 C114 +
             (C10483 * C2474 + C10481 * C2479 + C10484 * C6948 +
              C47935 * C6951) *
                 C47821) *
                C4825 +
            ((C10483 * C2471 + C10481 * C2475 + C10484 * C6946 +
              C47935 * C6949) *
                 C114 +
             (C10483 * C2476 + C10481 * C2480 + C10484 * C6950 +
              C47935 * C6952) *
                 C47821) *
                C47902) *
               C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10483 * C115 + C10481 * C122 + C10484 * C507 +
                 C47935 * C520) *
                    C114 +
                (C10483 * C123 + C10481 * C136 + C10484 * C519 +
                 C47935 * C537) *
                    C47821) *
                   C4825 +
               ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) *
                   C47902) *
                  C47636 * C47618 * C108 -
              (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) *
                   C47902 +
               ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) *
                   C4825) *
                  C47636 * C47618 * C109 +
              (((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
               ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) *
                   C47902) *
                  C47636 * C47618 * C110 -
              (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) *
                   C47902 +
               ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) *
                   C4825) *
                  C47636 * C47618 * C111 +
              (((C10533 + C10532) * C114 + (C10531 + C10530) * C47821) * C4825 +
               ((C10483 * C120 + C10481 * C133 + C10484 * C812 +
                 C47935 * C813) *
                    C114 +
                (C10483 * C132 + C10481 * C141 + C10484 * C814 +
                 C47935 * C815) *
                    C47821) *
                   C47902) *
                  C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C10483 * C115 + C10481 * C122 + C10484 * C507 +
                  C47935 * C520) *
                     C114 +
                 (C10483 * C123 + C10481 * C136 + C10484 * C519 +
                  C47935 * C537) *
                     C47821) *
                    C4825 +
                ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) *
                    C47902) *
                   C47636 * C47954 -
               (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) *
                    C47902 +
                ((C10484 * C977 + C47935 * C986 + C10483 * C316 +
                  C10481 * C334) *
                     C47821 +
                 (C10484 * C971 + C47935 * C976 + C10483 * C304 +
                  C10481 * C317) *
                     C114) *
                    C4825) *
                   C47636 * C47942 +
               (((C10483 * C305 + C10481 * C318 + C10484 * C1339 +
                  C47935 * C1354) *
                     C114 +
                 (C10483 * C319 + C10481 * C335 + C10484 * C1353 +
                  C47935 * C1366) *
                     C47821) *
                    C4825 +
                ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) *
                    C47902) *
                   C47636 * C47915) *
                  C299 +
              ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) *
                    C4825 +
                ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) *
                    C47902) *
                   C47636 * C47942 -
               (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) *
                    C47902 +
                ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) *
                    C4825) *
                   C47636 * C47954 -
               (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) *
                    C47902 +
                ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) *
                    C4825) *
                   C47636 * C47915) *
                  C300 +
              ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) *
                    C4825 +
                ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) *
                    C47902) *
                   C47636 * C47954 -
               (((C10484 * C982 + C47935 * C989 + C10483 * C325 +
                  C10481 * C338) *
                     C47821 +
                 (C10484 * C974 + C47935 * C983 + C10483 * C308 +
                  C10481 * C324) *
                     C114) *
                    C47902 +
                ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) *
                    C4825) *
                   C47636 * C47942 +
               (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) *
                    C4825 +
                ((C10483 * C309 + C10481 * C327 + C10484 * C1640 +
                  C47935 * C1641) *
                     C114 +
                 (C10483 * C326 + C10481 * C339 + C10484 * C1642 +
                  C47935 * C1643) *
                     C47821) *
                    C47902) *
                   C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47955 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47944 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C47618 * C299 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47944 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47955 -
           (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
            ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
               C47918) *
              C47618 * C300 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47955 -
           (((C10484 * C529 + C47935 * C542 + C10483 * C528 + C10481 * C541) *
                 C47821 +
             (C10484 * C512 + C47935 * C530 + C10483 * C511 + C10481 * C527) *
                 C114) *
                C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C47944 +
           (((C10921 + C10920) * C114 + (C10919 + C10918) * C47821) * C4825 +
            ((C10483 * C512 + C10481 * C530 + C10484 * C2352 + C47935 * C2353) *
                 C114 +
             (C10483 * C529 + C10481 * C542 + C10484 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C1126 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C1127 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C1127 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C1126 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47915) *
              C47938 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C1126 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C1127 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C47636 * C1194 -
          (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
           ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                C47821 +
            (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                C114) *
               C4825) *
              C47636 * C1195 +
          (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                C114 +
            (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                C47821) *
               C4825 +
           ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
              C47636 * C1196 -
          (((C10484 * C1764 + C47935 * C1768 + C10483 * C1208 +
             C10481 * C1219) *
                C47821 +
            (C10484 * C1759 + C47935 * C1763 + C10483 * C1201 +
             C10481 * C1209) *
                C114) *
               C47902 +
           ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
             C10481 * C1220) *
                C47821 +
            (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
             C10481 * C1211) *
                C114) *
               C4825) *
              C47636 * C1197 +
          (((C10483 * C1203 + C10481 * C1212 + C10484 * C6557 +
             C47935 * C6559) *
                C114 +
            (C10483 * C1213 + C10481 * C1221 + C10484 * C6560 +
             C47935 * C6563) *
                C47821) *
               C4825 +
           ((C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C114 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47955 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47944 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C1126 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47944 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47955 -
           (((C10484 * C2476 + C47935 * C2480 + C10483 * C1345 +
              C10481 * C1362) *
                 C47821 +
             (C10484 * C2471 + C47935 * C2475 + C10483 * C1335 +
              C10481 * C1346) *
                 C114) *
                C47902 +
            ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
              C10481 * C1363) *
                 C47821 +
             (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
              C10481 * C1348) *
                 C114) *
                C4825) *
               C47918) *
              C1127 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47955 -
           (((C10484 * C1358 + C47935 * C1368 + C10483 * C1351 +
              C10481 * C1365) *
                 C47821 +
             (C10484 * C1341 + C47935 * C1357 + C10483 * C1338 +
              C10481 * C1352) *
                 C114) *
                C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C47944 +
           (((C10483 * C1340 + C10481 * C1355 + C10484 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C10483 * C1356 + C10481 * C1367 + C10484 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C4825 +
            ((C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C1880 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C47618 * C47951 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C1881 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C1880 -
           (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
            ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
               C47918) *
              C47618 * C47938 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C1880 -
           (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C1881 +
           (((C10921 + C10920) * C114 + (C10919 + C10918) * C47821) * C4825 +
            ((C10483 * C512 + C10481 * C530 + C10484 * C2352 + C47935 * C2353) *
                 C114 +
             (C10483 * C529 + C10481 * C542 + C10484 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C1880 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C47954 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C1881 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C1880 -
           (((C10484 * C2476 + C47935 * C2480 + C10483 * C1345 +
              C10481 * C1362) *
                 C47821 +
             (C10484 * C2471 + C47935 * C2475 + C10483 * C1335 +
              C10481 * C1346) *
                 C114) *
                C47902 +
            ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
              C10481 * C1363) *
                 C47821 +
             (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
              C10481 * C1348) *
                 C114) *
                C4825) *
               C47918) *
              C47942 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C1880 -
           (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C1881 +
           (((C10483 * C1340 + C10481 * C1355 + C10484 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C10483 * C1356 + C10481 * C1367 + C10484 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C4825 +
            ((C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C2055 -
          (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
           ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C47821 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C114) *
               C4825) *
              C2056 +
          (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C114 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C47821) *
               C4825 +
           ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
              C2057 -
          (((C10484 * C2075 + C47935 * C2082 + C10483 * C2068 +
             C10481 * C2079) *
                C47821 +
            (C10484 * C2064 + C47935 * C2074 + C10483 * C2061 +
             C10481 * C2069) *
                C114) *
               C47902 +
           ((C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
             C10481 * C2080) *
                C47821 +
            (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
             C10481 * C2071) *
                C114) *
               C4825) *
              C2058 +
          (((C10483 * C2063 + C10481 * C2072 + C10484 * C12649 +
             C47935 * C12651) *
                C114 +
            (C10483 * C2073 + C10481 * C2081 + C10484 * C12652 +
             C47935 * C12655) *
                C47821) *
               C4825 +
           ((C10483 * C2064 + C10481 * C2074 + C10484 * C12650 +
             C47935 * C12653) *
                C114 +
            (C10483 * C2075 + C10481 * C2082 + C10484 * C12654 +
             C47935 * C12656) *
                C47821) *
               C47902) *
              C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47884 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C1126 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47884) *
               C1127 +
           ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C10483 * C319 + C10481 * C335 + C10484 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C4825 +
             ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
                C47884 -
            (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
             ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
               C10481 * C1366) *
                  C47821 +
              (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
               C10481 * C1354) *
                  C114) *
                 C4825) *
                C47723) *
               C47915) *
              C47869 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47884) *
               C1126 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47884 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C1127 +
           ((((C12145 + C12144) * C114 + (C12143 + C12142) * C47821) * C4825 +
             ((C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
             ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47884 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C47618 * C695 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47723 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47884) *
              C47618 * C696 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47884 -
           (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C47723) *
              C47618 * C697 +
          ((((C11205 + C11204) * C114 + (C11203 + C11202) * C47821) * C4825 +
            ((C10483 * C513 + C10481 * C532 + C10484 * C514 + C47935 * C533) *
                 C114 +
             (C10483 * C531 + C10481 * C543 + C10484 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C2348 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C2349 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C2350 -
           (((C13002 + C13003) * C47821 + (C13004 + C13005) * C114) * C47902 +
            ((C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
              C10481 * C2080) *
                 C47821 +
             (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
              C10481 * C2071) *
                 C114) *
                C4825) *
               C47931) *
              C47618 * C47869 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C2349 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C2348 -
           (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
            ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
               C2350 +
           (((C13005 + C13004) * C114 + (C13003 + C13002) * C47821) * C4825 +
            ((C10483 * C2060 + C10481 * C2067 + C10484 * C2065 +
              C47935 * C2076) *
                 C114 +
             (C10483 * C2066 + C10481 * C2078 + C10484 * C2077 +
              C47935 * C2083) *
                 C47821) *
                C47902) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47954 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47942 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47915) *
              C299 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47942 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47954 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47915) *
              C300 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C47954 -
           (((C10484 * C982 + C47935 * C989 + C10483 * C325 + C10481 * C338) *
                 C47821 +
             (C10484 * C974 + C47935 * C983 + C10483 * C308 + C10481 * C324) *
                 C114) *
                C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47942 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C47636 * C47618 * C108 -
          (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
           ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
              C47636 * C47618 * C109 +
          (((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
           ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
              C47636 * C47618 * C110 -
          (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
           ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
              C47636 * C47618 * C111 +
          (((C10533 + C10532) * C114 + (C10531 + C10530) * C47821) * C4825 +
           ((C10483 * C120 + C10481 * C133 + C10484 * C812 + C47935 * C813) *
                C114 +
            (C10483 * C132 + C10481 * C141 + C10484 * C814 + C47935 * C815) *
                C47821) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C1126 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C1127 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C1127 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C1126 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47915) *
              C47938 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C1126 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C1127 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C47636 * C1194 -
          (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
           ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                C47821 +
            (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                C114) *
               C4825) *
              C47636 * C1195 +
          (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                C114 +
            (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                C47821) *
               C4825 +
           ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
              C47636 * C1196 -
          (((C10484 * C1764 + C47935 * C1768 + C10483 * C1208 +
             C10481 * C1219) *
                C47821 +
            (C10484 * C1759 + C47935 * C1763 + C10483 * C1201 +
             C10481 * C1209) *
                C114) *
               C47902 +
           ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
             C10481 * C1220) *
                C47821 +
            (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
             C10481 * C1211) *
                C114) *
               C4825) *
              C47636 * C1197 +
          (((C10483 * C1203 + C10481 * C1212 + C10484 * C6557 +
             C47935 * C6559) *
                C114 +
            (C10483 * C1213 + C10481 * C1221 + C10484 * C6560 +
             C47935 * C6563) *
                C47821) *
               C4825 +
           ((C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C114 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C1880 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C47618 * C47951 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C1881 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C1880 -
           (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
            ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
               C47918) *
              C47618 * C47938 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C1880 -
           (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C1881 +
           (((C10921 + C10920) * C114 + (C10919 + C10918) * C47821) * C4825 +
            ((C10483 * C512 + C10481 * C530 + C10484 * C2352 + C47935 * C2353) *
                 C114 +
             (C10483 * C529 + C10481 * C542 + C10484 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C1880 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C47954 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C1881 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C1880 -
           (((C10484 * C2476 + C47935 * C2480 + C10483 * C1345 +
              C10481 * C1362) *
                 C47821 +
             (C10484 * C2471 + C47935 * C2475 + C10483 * C1335 +
              C10481 * C1346) *
                 C114) *
                C47902 +
            ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
              C10481 * C1363) *
                 C47821 +
             (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
              C10481 * C1348) *
                 C114) *
                C4825) *
               C47918) *
              C47942 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C1880 -
           (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C1881 +
           (((C10483 * C1340 + C10481 * C1355 + C10484 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C10483 * C1356 + C10481 * C1367 + C10484 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C4825 +
            ((C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C3342 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C47883 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47681) *
              C47595 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C3342) *
               C47883 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C3342 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47681) *
              C47604 +
          (((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
             ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
                C3342 -
            (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
             ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
                C47723) *
               C47883 +
           ((((C11423 + C11422) * C114 + (C11421 + C11420) * C47821) * C4825 +
             ((C10483 * C974 + C10481 * C983 + C10484 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C10483 * C982 + C10481 * C989 + C10484 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
             ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
                C3342) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47719 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47726 +
            (((C10483 * C508 + C10481 * C521 + C10484 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C10483 * C522 + C10481 * C538 + C10484 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C4825 +
             ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
                C3850) *
               C47883 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47726 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47719 -
            (((C12860 + C12861) * C47821 + (C12862 + C12863) * C114) * C47902 +
             ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
               C10481 * C1363) *
                  C47821 +
              (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
               C10481 * C1348) *
                  C114) *
                 C4825) *
                C3850) *
               C47681) *
              C2688 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47726 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47719 -
            (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
             ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
                C3850) *
               C47883 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47719 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47726 +
            (((C12863 + C12862) * C114 + (C12861 + C12860) * C47821) * C4825 +
             ((C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C3342 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C47954 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47942 +
           ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C10483 * C319 + C10481 * C335 + C10484 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C4825 +
             ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
                C3342 -
            (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
             ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
               C10481 * C1366) *
                  C47821 +
              (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
               C10481 * C1354) *
                  C114) *
                 C4825) *
                C47723) *
               C47915) *
              C2688 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C3342) *
               C47954 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C3342 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47942 +
           ((((C12145 + C12144) * C114 + (C12143 + C12142) * C47821) * C4825 +
             ((C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
             ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C3342 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C47618 * C47960 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47723 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C3342) *
              C47618 * C47953 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C3342 -
           (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C47723) *
              C47618 * C47940 +
          ((((C11205 + C11204) * C114 + (C11203 + C11202) * C47821) * C4825 +
            ((C10483 * C513 + C10481 * C532 + C10484 * C514 + C47935 * C533) *
                 C114 +
             (C10483 * C531 + C10481 * C543 + C10484 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47962 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47959 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47950 -
           (((C13002 + C13003) * C47821 + (C13004 + C13005) * C114) * C47902 +
            ((C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
              C10481 * C2080) *
                 C47821 +
             (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
              C10481 * C2071) *
                 C114) *
                C4825) *
               C47931) *
              C47618 * C2688 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47959 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47962 -
           (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
            ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
               C47950 +
           (((C13005 + C13004) * C114 + (C13003 + C13002) * C47821) * C4825 +
            ((C10483 * C2060 + C10481 * C2067 + C10484 * C2065 +
              C47935 * C2076) *
                 C114 +
             (C10483 * C2066 + C10481 * C2078 + C10484 * C2077 +
              C47935 * C2083) *
                 C47821) *
                C47902) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47719 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47726 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C3850) *
              C47618 * C47595 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47726 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47719 -
           (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
            ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
               C3850) *
              C47618 * C47604 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47719 -
           (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C47726 +
           (((C10921 + C10920) * C114 + (C10919 + C10918) * C47821) * C4825 +
            ((C10483 * C512 + C10481 * C530 + C10484 * C2352 + C47935 * C2353) *
                 C114 +
             (C10483 * C529 + C10481 * C542 + C10484 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C3850) *
              C47618 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C3342 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C47618 * C47960 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47723 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C3342) *
              C47618 * C47953 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C3342 -
           (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C47723) *
              C47618 * C47940 +
          ((((C11205 + C11204) * C114 + (C11203 + C11202) * C47821) * C4825 +
            ((C10483 * C513 + C10481 * C532 + C10484 * C514 + C47935 * C533) *
                 C114 +
             (C10483 * C531 + C10481 * C543 + C10484 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C3342 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C47954 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47942 +
           ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C10483 * C319 + C10481 * C335 + C10484 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C4825 +
             ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
                C3342 -
            (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
             ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
               C10481 * C1366) *
                  C47821 +
              (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
               C10481 * C1354) *
                  C114) *
                 C4825) *
                C47723) *
               C47915) *
              C2688 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C3342) *
               C47954 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C3342 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47942 +
           ((((C12145 + C12144) * C114 + (C12143 + C12142) * C47821) * C4825 +
             ((C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
             ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47883 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47681) *
              C695 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47681 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47883) *
              C696 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C47883 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47681) *
              C697 +
          ((((C11063 + C11062) * C114 + (C11061 + C11060) * C47821) * C4825 +
            ((C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
                 C114 +
             (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C1468 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C1469 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C1470 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C47636 * C47925) *
              C47869 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C1469 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C1468 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C1470 +
           (((C11939 + C11938) * C114 + (C11937 + C11936) * C47821) * C4825 +
            ((C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47884 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C47883 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47884) *
               C47681) *
              C299 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47884) *
               C47883 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47884 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C47681) *
              C300 +
          (((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
             ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
                C47884 -
            (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
             ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
                C47723) *
               C47883 +
           ((((C11423 + C11422) * C114 + (C11421 + C11420) * C47821) * C4825 +
             ((C10483 * C974 + C10481 * C983 + C10484 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C10483 * C982 + C10481 * C989 + C10484 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
             ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47884 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C1468 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47723 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47884) *
              C1469 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47884 -
           (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C47723) *
              C1470 +
          ((((C10483 * C1758 + C10481 * C1761 + C10484 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C10483 * C1762 + C10481 * C1767 + C10484 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C4825 +
            ((C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C11936 + C11937) * C47821 + (C11938 + C11939) * C114) * C47902 +
            ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
              C10481 * C1220) *
                 C47821 +
             (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
              C10481 * C1211) *
                 C114) *
                C4825) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47954 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47942 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47915) *
              C299 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47942 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47954 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47915) *
              C300 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C47954 -
           (((C10484 * C982 + C47935 * C989 + C10483 * C325 + C10481 * C338) *
                 C47821 +
             (C10484 * C974 + C47935 * C983 + C10483 * C308 + C10481 * C324) *
                 C114) *
                C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47942 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C47636 * C47618 * C108 -
          (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
           ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
              C47636 * C47618 * C109 +
          (((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
           ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
              C47636 * C47618 * C110 -
          (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
           ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
              C47636 * C47618 * C111 +
          (((C10533 + C10532) * C114 + (C10531 + C10530) * C47821) * C4825 +
           ((C10483 * C120 + C10481 * C133 + C10484 * C812 + C47935 * C813) *
                C114 +
            (C10483 * C132 + C10481 * C141 + C10484 * C814 + C47935 * C815) *
                C47821) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47955 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47944 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C47618 * C299 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47944 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47955 -
           (((C10918 + C10919) * C47821 + (C10920 + C10921) * C114) * C47902 +
            ((C10913 + C10912) * C47821 + (C10911 + C10910) * C114) * C4825) *
               C47918) *
              C47618 * C300 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47955 -
           (((C10484 * C529 + C47935 * C542 + C10483 * C528 + C10481 * C541) *
                 C47821 +
             (C10484 * C512 + C47935 * C530 + C10483 * C511 + C10481 * C527) *
                 C114) *
                C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C47944 +
           (((C10921 + C10920) * C114 + (C10919 + C10918) * C47821) * C4825 +
            ((C10483 * C512 + C10481 * C530 + C10484 * C2352 + C47935 * C2353) *
                 C114 +
             (C10483 * C529 + C10481 * C542 + C10484 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C1126 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C1127 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C1127 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C1126 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47915) *
              C47938 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C1126 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C1127 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C47636 * C1194 -
          (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
           ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                C47821 +
            (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                C114) *
               C4825) *
              C47636 * C1195 +
          (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                C114 +
            (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                C47821) *
               C4825 +
           ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
              C47636 * C1196 -
          (((C10484 * C1764 + C47935 * C1768 + C10483 * C1208 +
             C10481 * C1219) *
                C47821 +
            (C10484 * C1759 + C47935 * C1763 + C10483 * C1201 +
             C10481 * C1209) *
                C114) *
               C47902 +
           ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
             C10481 * C1220) *
                C47821 +
            (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
             C10481 * C1211) *
                C114) *
               C4825) *
              C47636 * C1197 +
          (((C10483 * C1203 + C10481 * C1212 + C10484 * C6557 +
             C47935 * C6559) *
                C114 +
            (C10483 * C1213 + C10481 * C1221 + C10484 * C6560 +
             C47935 * C6563) *
                C47821) *
               C4825 +
           ((C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C114 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47955 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47944 +
           (((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C114 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C47821) *
                C4825 +
            ((C10910 + C10911) * C114 + (C10912 + C10913) * C47821) * C47902) *
               C47918) *
              C1126 +
          ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 + C47935 * C1348) *
                 C114 +
             (C10483 * C977 + C10481 * C986 + C10484 * C1347 + C47935 * C1363) *
                 C47821) *
                C4825 +
            ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
               C47944 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47955 -
           (((C10484 * C2476 + C47935 * C2480 + C10483 * C1345 +
              C10481 * C1362) *
                 C47821 +
             (C10484 * C2471 + C47935 * C2475 + C10483 * C1335 +
              C10481 * C1346) *
                 C114) *
                C47902 +
            ((C10484 * C2474 + C47935 * C2479 + C10483 * C1347 +
              C10481 * C1363) *
                 C47821 +
             (C10484 * C2470 + C47935 * C2473 + C10483 * C1336 +
              C10481 * C1348) *
                 C114) *
                C4825) *
               C47918) *
              C1127 +
          ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47955 -
           (((C10484 * C1358 + C47935 * C1368 + C10483 * C1351 +
              C10481 * C1365) *
                 C47821 +
             (C10484 * C1341 + C47935 * C1357 + C10483 * C1338 +
              C10481 * C1352) *
                 C114) *
                C47902 +
            ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
              C10481 * C1366) *
                 C47821 +
             (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
              C10481 * C1354) *
                 C114) *
                C4825) *
               C47944 +
           (((C10483 * C1340 + C10481 * C1355 + C10484 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C10483 * C1356 + C10481 * C1367 + C10484 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C4825 +
            ((C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47884 -
           (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
            ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C47821 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C114) *
                C4825) *
               C47723) *
              C47618 * C695 +
          ((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
            ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
               C47723 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47884) *
              C47618 * C696 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47884 -
           (((C11202 + C11203) * C47821 + (C11204 + C11205) * C114) * C47902 +
            ((C10917 + C10916) * C47821 + (C10915 + C10914) * C114) * C4825) *
               C47723) *
              C47618 * C697 +
          ((((C11205 + C11204) * C114 + (C11203 + C11202) * C47821) * C4825 +
            ((C10483 * C513 + C10481 * C532 + C10484 * C514 + C47935 * C533) *
                 C114 +
             (C10483 * C531 + C10481 * C543 + C10484 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
            ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                  C114 +
              (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                  C47821) *
                 C4825 +
             ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
                C47884 -
            (((C10906 + C10907) * C47821 + (C10908 + C10909) * C114) * C47902 +
             ((C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                  C47821 +
              (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                  C114) *
                 C4825) *
                C47723) *
               C1126 +
           ((((C10483 * C971 + C10481 * C976 + C10484 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C10483 * C977 + C10481 * C986 + C10484 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C4825 +
             ((C11416 + C11417) * C114 + (C11418 + C11419) * C47821) * C47902) *
                C47723 -
            (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
             ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                  C47821 +
              (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                  C114) *
                 C4825) *
                C47884) *
               C1127 +
           ((((C10483 * C305 + C10481 * C318 + C10484 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C10483 * C319 + C10481 * C335 + C10484 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C4825 +
             ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
                C47884 -
            (((C12142 + C12143) * C47821 + (C12144 + C12145) * C114) * C47902 +
             ((C10484 * C1356 + C47935 * C1367 + C10483 * C1353 +
               C10481 * C1366) *
                  C47821 +
              (C10484 * C1340 + C47935 * C1355 + C10483 * C1339 +
               C10481 * C1354) *
                  C114) *
                 C4825) *
                C47723) *
               C47915) *
              C47869 +
          (((((C10909 + C10908) * C114 + (C10907 + C10906) * C47821) * C4825 +
             ((C10914 + C10915) * C114 + (C10916 + C10917) * C47821) * C47902) *
                C47723 -
            (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
             ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
                C47884) *
               C1126 +
           ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
             ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
                C47884 -
            (((C11420 + C11421) * C47821 + (C11422 + C11423) * C114) * C47902 +
             ((C11419 + C11418) * C47821 + (C11417 + C11416) * C114) * C4825) *
                C47723) *
               C1127 +
           ((((C12145 + C12144) * C114 + (C12143 + C12142) * C47821) * C4825 +
             ((C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
             ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C47636 * C47618 * C108 -
          (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
           ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
              C47636 * C47618 * C109 +
          (((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
           ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
              C47636 * C47618 * C110 -
          (((C10530 + C10531) * C47821 + (C10532 + C10533) * C114) * C47902 +
           ((C10529 + C10528) * C47821 + (C10527 + C10526) * C114) * C4825) *
              C47636 * C47618 * C111 +
          (((C10533 + C10532) * C114 + (C10531 + C10530) * C47821) * C4825 +
           ((C10483 * C120 + C10481 * C133 + C10484 * C812 + C47935 * C813) *
                C114 +
            (C10483 * C132 + C10481 * C141 + C10484 * C814 + C47935 * C815) *
                C47821) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C47954 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C47942 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47915) *
              C299 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C47942 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C47954 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47915) *
              C300 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C47954 -
           (((C10484 * C982 + C47935 * C989 + C10483 * C325 + C10481 * C338) *
                 C47821 +
             (C10484 * C974 + C47935 * C983 + C10483 * C308 + C10481 * C324) *
                 C114) *
                C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C47942 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C114 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C47821) *
                C4825 +
            ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
               C47636 * C1126 -
           (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
            ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                 C47821 +
             (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                 C114) *
                C4825) *
               C47636 * C1127 +
           (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                 C114 +
             (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                 C47821) *
                C4825 +
            ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C10715 + C10714) * C114 + (C10713 + C10712) * C47821) * C4825 +
            ((C10720 + C10721) * C114 + (C10722 + C10723) * C47821) * C47902) *
               C47636 * C1127 -
           (((C10522 + C10523) * C47821 + (C10524 + C10525) * C114) * C47902 +
            ((C10521 + C10520) * C47821 + (C10519 + C10518) * C114) * C4825) *
               C47636 * C1126 -
           (((C10724 + C10725) * C47821 + (C10726 + C10727) * C114) * C47902 +
            ((C10719 + C10718) * C47821 + (C10717 + C10716) * C114) * C4825) *
               C47636 * C47915) *
              C47938 +
          ((((C10525 + C10524) * C114 + (C10523 + C10522) * C47821) * C4825 +
            ((C10526 + C10527) * C114 + (C10528 + C10529) * C47821) * C47902) *
               C47636 * C1126 -
           (((C11060 + C11061) * C47821 + (C11062 + C11063) * C114) * C47902 +
            ((C10723 + C10722) * C47821 + (C10721 + C10720) * C114) * C4825) *
               C47636 * C1127 +
           (((C10727 + C10726) * C114 + (C10725 + C10724) * C47821) * C4825 +
            ((C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                 C114 +
             (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C114 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C47821) *
               C4825 +
           ((C10518 + C10519) * C114 + (C10520 + C10521) * C47821) * C47902) *
              C47636 * C1194 -
          (((C10712 + C10713) * C47821 + (C10714 + C10715) * C114) * C47902 +
           ((C10484 * C977 + C47935 * C986 + C10483 * C316 + C10481 * C334) *
                C47821 +
            (C10484 * C971 + C47935 * C976 + C10483 * C304 + C10481 * C317) *
                C114) *
               C4825) *
              C47636 * C1195 +
          (((C10483 * C305 + C10481 * C318 + C10484 * C1339 + C47935 * C1354) *
                C114 +
            (C10483 * C319 + C10481 * C335 + C10484 * C1353 + C47935 * C1366) *
                C47821) *
               C4825 +
           ((C10716 + C10717) * C114 + (C10718 + C10719) * C47821) * C47902) *
              C47636 * C1196 -
          (((C10484 * C1764 + C47935 * C1768 + C10483 * C1208 +
             C10481 * C1219) *
                C47821 +
            (C10484 * C1759 + C47935 * C1763 + C10483 * C1201 +
             C10481 * C1209) *
                C114) *
               C47902 +
           ((C10484 * C1762 + C47935 * C1767 + C10483 * C1210 +
             C10481 * C1220) *
                C47821 +
            (C10484 * C1758 + C47935 * C1761 + C10483 * C1202 +
             C10481 * C1211) *
                C114) *
               C4825) *
              C47636 * C1197 +
          (((C10483 * C1203 + C10481 * C1212 + C10484 * C6557 +
             C47935 * C6559) *
                C114 +
            (C10483 * C1213 + C10481 * C1221 + C10484 * C6560 +
             C47935 * C6563) *
                C47821) *
               C4825 +
           ((C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C114 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C47677 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C47684 +
                   ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47636 * C2948) *
                      C47595 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C47684 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C47677 -
                   ((C16362 + C16363 + C16364 + C16365) * C47902 +
                    (C16357 + C16356 + C16355 + C16354) * C16183) *
                       C47636 * C2948) *
                      C47604 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47636 * C47677 -
                   ((C16658 + C16659 + C16660 + C16661) * C47902 +
                    (C16361 + C16360 + C16359 + C16358) * C16183) *
                       C47636 * C47684 +
                   ((C16365 + C16364 + C16363 + C16362) * C16183 +
                    (C378 * C16185 + C377 * C16181 +
                     (C113 * C1474 + C47838 * C1475) * C16186 +
                     (C113 * C1476 + C47838 * C1477) * C47933) *
                        C47902) *
                       C47636 * C2948) *
                      C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47884 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C47677 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47884) *
                       C47684 +
                   (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                      C5907 * C47933) *
                         C16183 +
                     (C16354 + C16355 + C16356 + C16357) * C47902) *
                        C47884 -
                    ((C17700 + C17701 + C17702 + C17703) * C47902 +
                     (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                      C6084 * C16185) *
                         C16183) *
                        C47723) *
                       C2948) *
                      C2688 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47884) *
                       C47677 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47884 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47684 +
                   (((C17703 + C17702 + C17701 + C17700) * C16183 +
                     (C1654 * C16185 + C1653 * C16181 +
                      (C113 * C1760 + C47838 * C1765) * C16186 +
                      (C113 * C1766 + C47838 * C1769) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16362 + C16363 + C16364 + C16365) * C47902 +
                     (C16357 + C16356 + C16355 + C16354) * C16183) *
                        C47884) *
                       C2948) *
                      C47601)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C47961 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C47957 +
                   ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47636 * C47947 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C47636 * C47925) *
                      C2688 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C47957 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C47961 -
                   ((C16362 + C16363 + C16364 + C16365) * C47902 +
                    (C16357 + C16356 + C16355 + C16354) * C16183) *
                       C47636 * C47947 +
                   ((C17505 + C17504 + C17503 + C17502) * C16183 +
                    (C1488 * C16185 + C1487 * C16181 +
                     (C113 * C1205 + C47838 * C1216) * C16186 +
                     (C113 * C1217 + C47838 * C1223) * C47933) *
                        C47902) *
                       C47636 * C47925) *
                      C47601)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C2580 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C47681) *
                      C47960 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C47681 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C2580) *
                      C47953 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47636 * C2580 -
                   ((C16658 + C16659 + C16660 + C16661) * C47902 +
                    (C16361 + C16360 + C16359 + C16358) * C16183) *
                       C47636 * C47681) *
                      C47940 +
                  (((C16661 + C16660 + C16659 + C16658) * C16183 +
                    (C710 * C16185 + C709 * C16181 +
                     (C113 * C311 + C47838 * C330) * C16186 +
                     (C113 * C331 + C47838 * C341) * C47933) *
                        C47902) *
                       C47636 * C47681 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C47636 * C2580) *
                      C47919)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47955 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47944 +
                    (((C113 * C508 + C47838 * C521) * C16185 +
                      (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                      C6083 * C47933) *
                         C16183 +
                     (C16516 + C16517 + C16518 + C16519) * C47902) *
                        C47918) *
                       C2580 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47944 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47955 -
                    ((C18402 + C18403 + C18404 + C18405) * C47902 +
                     (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
                      C6082 * C16185) *
                         C16183) *
                        C47918) *
                       C47681) *
                      C2688 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47944 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47955 -
                    ((C16524 + C16525 + C16526 + C16527) * C47902 +
                     (C16519 + C16518 + C16517 + C16516) * C16183) *
                        C47918) *
                       C2580 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47955 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47944 +
                    ((C18405 + C18404 + C18403 + C18402) * C16183 +
                     (C2244 * C16185 + C2243 * C16181 +
                      (C113 * C1342 + C47838 * C1359) * C16186 +
                      (C113 * C1360 + C47838 * C1369) * C47933) *
                         C47902) *
                        C47918) *
                       C47681) *
                      C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47884 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C2580 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47884) *
                       C47681) *
                      C47595 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47884) *
                       C2580 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47884 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47681) *
                      C47604 +
                  ((((C16195 + C16194 + C16193 + C16192) * C16183 +
                     (C16196 + C16197 + C16198 + C16199) * C47902) *
                        C47884 -
                    ((C16792 + C16793 + C16794 + C16795) * C47902 +
                     (C16523 + C16522 + C16521 + C16520) * C16183) *
                        C47723) *
                       C2580 +
                   (((C16997 + C16996 + C16995 + C16994) * C16183 +
                     (C1009 * C16185 + C1008 * C16181 +
                      (C113 * C1640 + C47838 * C1641) * C16186 +
                      (C113 * C1642 + C47838 * C1643) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16658 + C16659 + C16660 + C16661) * C47902 +
                     (C16361 + C16360 + C16359 + C16358) * C16183) *
                        C47884) *
                       C47681) *
                      C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C2580 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C47681) *
                      C47960 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C47681 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C2580) *
                      C47953 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47636 * C2580 -
                   ((C16658 + C16659 + C16660 + C16661) * C47902 +
                    (C16361 + C16360 + C16359 + C16358) * C16183) *
                       C47636 * C47681) *
                      C47940 +
                  (((C16661 + C16660 + C16659 + C16658) * C16183 +
                    (C710 * C16185 + C709 * C16181 +
                     (C113 * C311 + C47838 * C330) * C16186 +
                     (C113 * C331 + C47838 * C341) * C47933) *
                        C47902) *
                       C47636 * C47681 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C47636 * C2580) *
                      C47919)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C47961 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C47957 +
                   ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47636 * C47947 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C47636 * C47925) *
                      C2688 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C47957 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C47961 -
                   ((C16362 + C16363 + C16364 + C16365) * C47902 +
                    (C16357 + C16356 + C16355 + C16354) * C16183) *
                       C47636 * C47947 +
                   ((C17505 + C17504 + C17503 + C17502) * C16183 +
                    (C1488 * C16185 + C1487 * C16181 +
                     (C113 * C1205 + C47838 * C1216) * C16186 +
                     (C113 * C1217 + C47838 * C1223) * C47933) *
                        C47902) *
                       C47636 * C47925) *
                      C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C3342 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C47677 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C3342) *
                       C47684 +
                   (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                      C5907 * C47933) *
                         C16183 +
                     (C16354 + C16355 + C16356 + C16357) * C47902) *
                        C3342 -
                    ((C17700 + C17701 + C17702 + C17703) * C47902 +
                     (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                      C6084 * C16185) *
                         C16183) *
                        C47723) *
                       C2948) *
                      C47869 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C3342) *
                       C47677 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C3342 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47684 +
                   (((C17703 + C17702 + C17701 + C17700) * C16183 +
                     (C1654 * C16185 + C1653 * C16181 +
                      (C113 * C1760 + C47838 * C1765) * C16186 +
                      (C113 * C1766 + C47838 * C1769) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16362 + C16363 + C16364 + C16365) * C47902 +
                     (C16357 + C16356 + C16355 + C16354) * C16183) *
                        C3342) *
                       C2948) *
                      C47601)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47719 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47726 +
                   (((C113 * C508 + C47838 * C521) * C16185 +
                     (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                     C6083 * C47933) *
                        C16183 +
                    (C16516 + C16517 + C16518 + C16519) * C47902) *
                       C3850) *
                      C47677 +
                  (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                     C6085 * C47933) *
                        C16183 +
                    (C16990 + C16991 + C16992 + C16993) * C47902) *
                       C47726 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47719 -
                   ((C18402 + C18403 + C18404 + C18405) * C47902 +
                    (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
                     C6082 * C16185) *
                        C16183) *
                       C3850) *
                      C47684 +
                  (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47719 -
                   ((C17700 + C17701 + C17702 + C17703) * C47902 +
                    (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                     C6084 * C16185) *
                        C16183) *
                       C47726 +
                   ((C6089 * C16185 + C6088 * C16181 +
                     (C113 * C6057 + C47838 * C6059) * C16186 +
                     (C113 * C6060 + C47838 * C6063) * C47933) *
                        C16183 +
                    (C6087 * C16185 + C6086 * C16181 +
                     (C113 * C6058 + C47838 * C6061) * C16186 +
                     (C113 * C6062 + C47838 * C6064) * C47933) *
                        C47902) *
                       C3850) *
                      C2948) *
                 C47590) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C3342 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C47961 +
                  (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                     C6085 * C47933) *
                        C16183 +
                    (C16990 + C16991 + C16992 + C16993) * C47902) *
                       C47723 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C3342) *
                      C47957 +
                  (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C3342 -
                   ((C17700 + C17701 + C17702 + C17703) * C47902 +
                    (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                     C6084 * C16185) *
                        C16183) *
                       C47723) *
                      C47947 +
                  (((C6571 * C16185 + C6570 * C16181 +
                     (C113 * C6557 + C47838 * C6559) * C16186 +
                     (C113 * C6560 + C47838 * C6563) * C47933) *
                        C16183 +
                    (C6425 * C16185 + C6424 * C16181 +
                     (C113 * C6558 + C47838 * C6561) * C16186 +
                     (C113 * C6562 + C47838 * C6564) * C47933) *
                        C47902) *
                       C47723 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C3342) *
                      C47925) *
                 C47590) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C3342 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C2580 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C3342) *
                       C47681) *
                      C47951 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C3342) *
                       C2580 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C3342 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47681) *
                      C47938 +
                  ((((C16195 + C16194 + C16193 + C16192) * C16183 +
                     (C16196 + C16197 + C16198 + C16199) * C47902) *
                        C3342 -
                    ((C16792 + C16793 + C16794 + C16795) * C47902 +
                     (C16523 + C16522 + C16521 + C16520) * C16183) *
                        C47723) *
                       C2580 +
                   (((C16997 + C16996 + C16995 + C16994) * C16183 +
                     (C1009 * C16185 + C1008 * C16181 +
                      (C113 * C1640 + C47838 * C1641) * C16186 +
                      (C113 * C1642 + C47838 * C1643) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16658 + C16659 + C16660 + C16661) * C47902 +
                     (C16361 + C16360 + C16359 + C16358) * C16183) *
                        C3342) *
                       C47681) *
                      C47909)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47962 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47959 +
                   (((C113 * C508 + C47838 * C521) * C16185 +
                     (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                     C6083 * C47933) *
                        C16183 +
                    (C16516 + C16517 + C16518 + C16519) * C47902) *
                       C47950 -
                   ((C18536 + C18537 + C18538 + C18539) * C47902 +
                    (C7434 * C47933 + C7435 * C16186 +
                     (C113 * C2070 + C47838 * C2080) * C16181 +
                     (C113 * C2062 + C47838 * C2071) * C16185) *
                        C16183) *
                       C47931) *
                      C2580 +
                  (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                     C6085 * C47933) *
                        C16183 +
                    (C16990 + C16991 + C16992 + C16993) * C47902) *
                       C47959 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47962 -
                   ((C18402 + C18403 + C18404 + C18405) * C47902 +
                    (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
                     C6082 * C16185) *
                        C16183) *
                       C47950 +
                   ((C7435 * C16185 + C7434 * C16181 +
                     (C113 * C7421 + C47838 * C7423) * C16186 +
                     (C113 * C7424 + C47838 * C7427) * C47933) *
                        C16183 +
                    (C7289 * C16185 + C7288 * C16181 +
                     (C113 * C7422 + C47838 * C7425) * C16186 +
                     (C113 * C7426 + C47838 * C7428) * C47933) *
                        C47902) *
                       C47931) *
                      C47681) *
                 C47590) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47719 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47726 +
                    (((C113 * C508 + C47838 * C521) * C16185 +
                      (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                      C6083 * C47933) *
                         C16183 +
                     (C16516 + C16517 + C16518 + C16519) * C47902) *
                        C3850) *
                       C2580 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47726 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47719 -
                    ((C18402 + C18403 + C18404 + C18405) * C47902 +
                     (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
                      C6082 * C16185) *
                         C16183) *
                        C3850) *
                       C47681) *
                      C47869 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47726 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47719 -
                    ((C16524 + C16525 + C16526 + C16527) * C47902 +
                     (C16519 + C16518 + C16517 + C16516) * C16183) *
                        C3850) *
                       C2580 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47719 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47726 +
                    ((C18405 + C18404 + C18403 + C18402) * C16183 +
                     (C2244 * C16185 + C2243 * C16181 +
                      (C113 * C1342 + C47838 * C1359) * C16186 +
                      (C113 * C1360 + C47838 * C1369) * C47933) *
                         C47902) *
                        C3850) *
                       C47681) *
                      C47601)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C3342 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C2580 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C3342) *
                       C47681) *
                      C47951 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C3342) *
                       C2580 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C3342 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47681) *
                      C47938 +
                  ((((C16195 + C16194 + C16193 + C16192) * C16183 +
                     (C16196 + C16197 + C16198 + C16199) * C47902) *
                        C3342 -
                    ((C16792 + C16793 + C16794 + C16795) * C47902 +
                     (C16523 + C16522 + C16521 + C16520) * C16183) *
                        C47723) *
                       C2580 +
                   (((C16997 + C16996 + C16995 + C16994) * C16183 +
                     (C1009 * C16185 + C1008 * C16181 +
                      (C113 * C1640 + C47838 * C1641) * C16186 +
                      (C113 * C1642 + C47838 * C1643) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16658 + C16659 + C16660 + C16661) * C47902 +
                     (C16361 + C16360 + C16359 + C16358) * C16183) *
                        C3342) *
                       C47681) *
                      C47909)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C3342 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C47961 +
                  (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                     C6085 * C47933) *
                        C16183 +
                    (C16990 + C16991 + C16992 + C16993) * C47902) *
                       C47723 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C3342) *
                      C47957 +
                  (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C3342 -
                   ((C17700 + C17701 + C17702 + C17703) * C47902 +
                    (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                     C6084 * C16185) *
                        C16183) *
                       C47723) *
                      C47947 +
                  (((C6571 * C16185 + C6570 * C16181 +
                     (C113 * C6557 + C47838 * C6559) * C16186 +
                     (C113 * C6560 + C47838 * C6563) * C47933) *
                        C16183 +
                    (C6425 * C16185 + C6424 * C16181 +
                     (C113 * C6558 + C47838 * C6561) * C16186 +
                     (C113 * C6562 + C47838 * C6564) * C47933) *
                        C47902) *
                       C47723 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C3342) *
                      C47925) *
                 C47590) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C1468 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C1469 +
                   ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47636 * C1470 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C47636 * C47925) *
                      C47869 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C1469 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C1468 -
                   ((C16362 + C16363 + C16364 + C16365) * C47902 +
                    (C16357 + C16356 + C16355 + C16354) * C16183) *
                       C47636 * C1470 +
                   ((C17505 + C17504 + C17503 + C17502) * C16183 +
                    (C1488 * C16185 + C1487 * C16181 +
                     (C113 * C1205 + C47838 * C1216) * C16186 +
                     (C113 * C1217 + C47838 * C1223) * C47933) *
                        C47902) *
                       C47636 * C47925) *
                      C47601)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C47883 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C47681) *
                      C695 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C47681 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C47883) *
                      C696 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47636 * C47883 -
                   ((C16658 + C16659 + C16660 + C16661) * C47902 +
                    (C16361 + C16360 + C16359 + C16358) * C16183) *
                       C47636 * C47681) *
                      C697 +
                  (((C16661 + C16660 + C16659 + C16658) * C16183 +
                    (C710 * C16185 + C709 * C16181 +
                     (C113 * C311 + C47838 * C330) * C16186 +
                     (C113 * C331 + C47838 * C341) * C47933) *
                        C47902) *
                       C47636 * C47681 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C47636 * C47883) *
                      C47919)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C1880 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C1881 +
                    (((C113 * C508 + C47838 * C521) * C16185 +
                      (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                      C6083 * C47933) *
                         C16183 +
                     (C16516 + C16517 + C16518 + C16519) * C47902) *
                        C47918) *
                       C47883 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C1881 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C1880 -
                    ((C18402 + C18403 + C18404 + C18405) * C47902 +
                     (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
                      C6082 * C16185) *
                         C16183) *
                        C47918) *
                       C47681) *
                      C47869 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C1881 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C1880 -
                    ((C16524 + C16525 + C16526 + C16527) * C47902 +
                     (C16519 + C16518 + C16517 + C16516) * C16183) *
                        C47918) *
                       C47883 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C1880 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C1881 +
                    ((C18405 + C18404 + C18403 + C18402) * C16183 +
                     (C2244 * C16185 + C2243 * C16181 +
                      (C113 * C1342 + C47838 * C1359) * C16186 +
                      (C113 * C1360 + C47838 * C1369) * C47933) *
                         C47902) *
                        C47918) *
                       C47681) *
                      C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[86] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47884 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C1468 +
                  (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                     C6085 * C47933) *
                        C16183 +
                    (C16990 + C16991 + C16992 + C16993) * C47902) *
                       C47723 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47884) *
                      C1469 +
                  (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47884 -
                   ((C17700 + C17701 + C17702 + C17703) * C47902 +
                    (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                     C6084 * C16185) *
                        C16183) *
                       C47723) *
                      C1470 +
                  (((C6571 * C16185 + C6570 * C16181 +
                     (C113 * C6557 + C47838 * C6559) * C16186 +
                     (C113 * C6560 + C47838 * C6563) * C47933) *
                        C16183 +
                    (C6425 * C16185 + C6424 * C16181 +
                     (C113 * C6558 + C47838 * C6561) * C16186 +
                     (C113 * C6562 + C47838 * C6564) * C47933) *
                        C47902) *
                       C47723 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C47884) *
                      C47925) *
                 C47590) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47884 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C47883 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47884) *
                       C47681) *
                      C299 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47884) *
                       C47883 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47884 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47681) *
                      C300 +
                  ((((C16195 + C16194 + C16193 + C16192) * C16183 +
                     (C16196 + C16197 + C16198 + C16199) * C47902) *
                        C47884 -
                    ((C16792 + C16793 + C16794 + C16795) * C47902 +
                     (C16523 + C16522 + C16521 + C16520) * C16183) *
                        C47723) *
                       C47883 +
                   (((C16997 + C16996 + C16995 + C16994) * C16183 +
                     (C1009 * C16185 + C1008 * C16181 +
                      (C113 * C1640 + C47838 * C1641) * C16186 +
                      (C113 * C1642 + C47838 * C1643) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16658 + C16659 + C16660 + C16661) * C47902 +
                     (C16361 + C16360 + C16359 + C16358) * C16183) *
                        C47884) *
                       C47681) *
                      C47909)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C2348 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C2349 +
                   (((C113 * C508 + C47838 * C521) * C16185 +
                     (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                     C6083 * C47933) *
                        C16183 +
                    (C16516 + C16517 + C16518 + C16519) * C47902) *
                       C2350 -
                   ((C18536 + C18537 + C18538 + C18539) * C47902 +
                    (C7434 * C47933 + C7435 * C16186 +
                     (C113 * C2070 + C47838 * C2080) * C16181 +
                     (C113 * C2062 + C47838 * C2071) * C16185) *
                        C16183) *
                       C47931) *
                      C47883 +
                  (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                     C6085 * C47933) *
                        C16183 +
                    (C16990 + C16991 + C16992 + C16993) * C47902) *
                       C2349 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C2348 -
                   ((C18402 + C18403 + C18404 + C18405) * C47902 +
                    (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
                     C6082 * C16185) *
                        C16183) *
                       C2350 +
                   ((C7435 * C16185 + C7434 * C16181 +
                     (C113 * C7421 + C47838 * C7423) * C16186 +
                     (C113 * C7424 + C47838 * C7427) * C47933) *
                        C16183 +
                    (C7289 * C16185 + C7288 * C16181 +
                     (C113 * C7422 + C47838 * C7425) * C16186 +
                     (C113 * C7426 + C47838 * C7428) * C47933) *
                        C47902) *
                       C47931) *
                      C47681) *
                 C47590) /
                    (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47838 * C122) * C16185 +
                (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                C5017 * C47933) *
                   C16183 +
               (C16188 + C16189 + C16190 + C16191) * C47902) *
                  C47636 * C47618 * C108 -
              ((C16192 + C16193 + C16194 + C16195) * C47902 +
               (C16191 + C16190 + C16189 + C16188) * C16183) *
                  C47636 * C47618 * C109 +
              ((C16195 + C16194 + C16193 + C16192) * C16183 +
               (C16196 + C16197 + C16198 + C16199) * C47902) *
                  C47636 * C47618 * C110 -
              ((C16200 + C16201 + C16202 + C16203) * C47902 +
               (C16199 + C16198 + C16197 + C16196) * C16183) *
                  C47636 * C47618 * C111 +
              ((C16203 + C16202 + C16201 + C16200) * C16183 +
               (C173 * C16185 + C172 * C16181 +
                (C113 * C699 + C47838 * C700) * C16186 +
                (C113 * C701 + C47838 * C702) * C47933) *
                   C47902) *
                  C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C47838 * C122) * C16185 +
                 (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                 C5017 * C47933) *
                    C16183 +
                (C16188 + C16189 + C16190 + C16191) * C47902) *
                   C47636 * C47954 -
               ((C16350 + C16351 + C16352 + C16353) * C47902 +
                (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                 C5016 * C16185) *
                    C16183) *
                   C47636 * C47942 +
               ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                 C5907 * C47933) *
                    C16183 +
                (C16354 + C16355 + C16356 + C16357) * C47902) *
                   C47636 * C47915) *
                  C299 +
              (((C16353 + C16352 + C16351 + C16350) * C16183 +
                (C16358 + C16359 + C16360 + C16361) * C47902) *
                   C47636 * C47942 -
               ((C16192 + C16193 + C16194 + C16195) * C47902 +
                (C16191 + C16190 + C16189 + C16188) * C16183) *
                   C47636 * C47954 -
               ((C16362 + C16363 + C16364 + C16365) * C47902 +
                (C16357 + C16356 + C16355 + C16354) * C16183) *
                   C47636 * C47915) *
                  C300 +
              (((C16195 + C16194 + C16193 + C16192) * C16183 +
                (C16196 + C16197 + C16198 + C16199) * C47902) *
                   C47636 * C47954 -
               ((C377 * C47933 + C378 * C16186 + C376 * C16181 +
                 C375 * C16185) *
                    C47902 +
                (C16361 + C16360 + C16359 + C16358) * C16183) *
                   C47636 * C47942 +
               ((C16365 + C16364 + C16363 + C16362) * C16183 +
                (C378 * C16185 + C377 * C16181 +
                 (C113 * C1474 + C47838 * C1475) * C16186 +
                 (C113 * C1476 + C47838 * C1477) * C47933) *
                    C47902) *
                   C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47955 -
           ((C16512 + C16513 + C16514 + C16515) * C47902 +
            (C5656 * C47933 + C5657 * C16186 +
             (C113 * C519 + C47838 * C537) * C16181 +
             (C113 * C507 + C47838 * C520) * C16185) *
                C16183) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C16185 +
             (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
             C6083 * C47933) *
                C16183 +
            (C16516 + C16517 + C16518 + C16519) * C47902) *
               C47918) *
              C47618 * C299 +
          (((C16515 + C16514 + C16513 + C16512) * C16183 +
            (C16520 + C16521 + C16522 + C16523) * C47902) *
               C47944 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47955 -
           ((C16524 + C16525 + C16526 + C16527) * C47902 +
            (C16519 + C16518 + C16517 + C16516) * C16183) *
               C47918) *
              C47618 * C300 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47955 -
           ((C1008 * C47933 + C1009 * C16186 + C579 * C16181 + C578 * C16185) *
                C47902 +
            (C16523 + C16522 + C16521 + C16520) * C16183) *
               C47944 +
           ((C16527 + C16526 + C16525 + C16524) * C16183 +
            (C581 * C16185 + C580 * C16181 +
             (C113 * C2230 + C47838 * C2231) * C16186 +
             (C113 * C2232 + C47838 * C2233) * C47933) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47636 * C1126 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47636 * C1127 +
           ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C16353 + C16352 + C16351 + C16350) * C16183 +
            (C16358 + C16359 + C16360 + C16361) * C47902) *
               C47636 * C1127 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47636 * C1126 -
           ((C16362 + C16363 + C16364 + C16365) * C47902 +
            (C16357 + C16356 + C16355 + C16354) * C16183) *
               C47636 * C47915) *
              C47938 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47636 * C1126 -
           ((C16658 + C16659 + C16660 + C16661) * C47902 +
            (C16361 + C16360 + C16359 + C16358) * C16183) *
               C47636 * C1127 +
           ((C16365 + C16364 + C16363 + C16362) * C16183 +
            (C378 * C16185 + C377 * C16181 +
             (C113 * C1474 + C47838 * C1475) * C16186 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C47636 * C1194 -
          ((C16350 + C16351 + C16352 + C16353) * C47902 +
           (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 + C5016 * C16185) *
               C16183) *
              C47636 * C1195 +
          ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 + C5907 * C47933) *
               C16183 +
           (C16354 + C16355 + C16356 + C16357) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C16186 + C1489 * C16181 + C1490 * C16185) *
               C47902 +
           (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 + C5906 * C16185) *
               C16183) *
              C47636 * C1197 +
          ((C5911 * C16185 + C5910 * C16181 +
            (C113 * C5885 + C47838 * C5887) * C16186 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C16183 +
           (C5909 * C16185 + C5908 * C16181 +
            (C113 * C5886 + C47838 * C5889) * C16186 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47955 -
           ((C16512 + C16513 + C16514 + C16515) * C47902 +
            (C5656 * C47933 + C5657 * C16186 +
             (C113 * C519 + C47838 * C537) * C16181 +
             (C113 * C507 + C47838 * C520) * C16185) *
                C16183) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C16185 +
             (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
             C6083 * C47933) *
                C16183 +
            (C16516 + C16517 + C16518 + C16519) * C47902) *
               C47918) *
              C1126 +
          (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
             C6085 * C47933) *
                C16183 +
            (C16990 + C16991 + C16992 + C16993) * C47902) *
               C47944 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47955 -
           ((C6086 * C47933 + C6087 * C16186 + C2245 * C16181 +
             C2246 * C16185) *
                C47902 +
            (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
             C6082 * C16185) *
                C16183) *
               C47918) *
              C1127 +
          (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47955 -
           ((C6424 * C47933 + C6425 * C16186 + C1655 * C16181 +
             C1656 * C16185) *
                C47902 +
            (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
             C6084 * C16185) *
                C16183) *
               C47944 +
           ((C6089 * C16185 + C6088 * C16181 +
             (C113 * C6057 + C47838 * C6059) * C16186 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C16183 +
            (C6087 * C16185 + C6086 * C16181 +
             (C113 * C6058 + C47838 * C6061) * C16186 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C113 * C115 + C47838 * C122) * C16185 +
                                 (C113 * C123 + C47838 * C136) * C16181 +
                                 C5016 * C16186 + C5017 * C47933) *
                                    C16183 +
                                (C16188 + C16189 + C16190 + C16191) * C47902) *
                                   C1880 -
                               ((C16512 + C16513 + C16514 + C16515) * C47902 +
                                (C5656 * C47933 + C5657 * C16186 +
                                 (C113 * C519 + C47838 * C537) * C16181 +
                                 (C113 * C507 + C47838 * C520) * C16185) *
                                    C16183) *
                                   C1881 +
                               (((C113 * C508 + C47838 * C521) * C16185 +
                                 (C113 * C522 + C47838 * C538) * C16181 +
                                 C6082 * C16186 + C6083 * C47933) *
                                    C16183 +
                                (C16516 + C16517 + C16518 + C16519) * C47902) *
                                   C47918) *
                                  C47618 * C47951 +
                              (((C16515 + C16514 + C16513 + C16512) * C16183 +
                                (C16520 + C16521 + C16522 + C16523) * C47902) *
                                   C1881 -
                               ((C16192 + C16193 + C16194 + C16195) * C47902 +
                                (C16191 + C16190 + C16189 + C16188) * C16183) *
                                   C1880 -
                               ((C16524 + C16525 + C16526 + C16527) * C47902 +
                                (C16519 + C16518 + C16517 + C16516) * C16183) *
                                   C47918) *
                                  C47618 * C47938 +
                              (((C16195 + C16194 + C16193 + C16192) * C16183 +
                                (C16196 + C16197 + C16198 + C16199) * C47902) *
                                   C1880 -
                               ((C16792 + C16793 + C16794 + C16795) * C47902 +
                                (C16523 + C16522 + C16521 + C16520) * C16183) *
                                   C1881 +
                               ((C16527 + C16526 + C16525 + C16524) * C16183 +
                                (C581 * C16185 + C580 * C16181 +
                                 (C113 * C2230 + C47838 * C2231) * C16186 +
                                 (C113 * C2232 + C47838 * C2233) * C47933) *
                                    C47902) *
                                   C47918) *
                                  C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C1880 -
           ((C16512 + C16513 + C16514 + C16515) * C47902 +
            (C5656 * C47933 + C5657 * C16186 +
             (C113 * C519 + C47838 * C537) * C16181 +
             (C113 * C507 + C47838 * C520) * C16185) *
                C16183) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C16185 +
             (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
             C6083 * C47933) *
                C16183 +
            (C16516 + C16517 + C16518 + C16519) * C47902) *
               C47918) *
              C47954 +
          (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
             C6085 * C47933) *
                C16183 +
            (C16990 + C16991 + C16992 + C16993) * C47902) *
               C1881 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C1880 -
           ((C6086 * C47933 + C6087 * C16186 + C2245 * C16181 +
             C2246 * C16185) *
                C47902 +
            (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
             C6082 * C16185) *
                C16183) *
               C47918) *
              C47942 +
          (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C1880 -
           ((C17700 + C17701 + C17702 + C17703) * C47902 +
            (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
             C6084 * C16185) *
                C16183) *
               C1881 +
           ((C6089 * C16185 + C6088 * C16181 +
             (C113 * C6057 + C47838 * C6059) * C16186 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C16183 +
            (C6087 * C16185 + C6086 * C16181 +
             (C113 * C6058 + C47838 * C6061) * C16186 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C2055 -
          ((C16512 + C16513 + C16514 + C16515) * C47902 +
           (C5656 * C47933 + C5657 * C16186 +
            (C113 * C519 + C47838 * C537) * C16181 +
            (C113 * C507 + C47838 * C520) * C16185) *
               C16183) *
              C2056 +
          (((C113 * C508 + C47838 * C521) * C16185 +
            (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
            C6083 * C47933) *
               C16183 +
           (C16516 + C16517 + C16518 + C16519) * C47902) *
              C2057 -
          ((C7288 * C47933 + C7289 * C16186 + C2367 * C16181 + C2368 * C16185) *
               C47902 +
           (C7434 * C47933 + C7435 * C16186 +
            (C113 * C2070 + C47838 * C2080) * C16181 +
            (C113 * C2062 + C47838 * C2071) * C16185) *
               C16183) *
              C2058 +
          (((C113 * C2063 + C47838 * C2072) * C16185 +
            (C113 * C2073 + C47838 * C2081) * C16181 +
            (C113 * C6945 + C47838 * C6947) * C16186 +
            (C113 * C6948 + C47838 * C6951) * C47933) *
               C16183 +
           ((C113 * C2064 + C47838 * C2074) * C16185 +
            (C113 * C2075 + C47838 * C2082) * C16181 +
            (C113 * C6946 + C47838 * C6949) * C16186 +
            (C113 * C6950 + C47838 * C6952) * C47933) *
               C47902) *
              C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[88] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47884 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C1126 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47884) *
                       C1127 +
                   (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                      C5907 * C47933) *
                         C16183 +
                     (C16354 + C16355 + C16356 + C16357) * C47902) *
                        C47884 -
                    ((C17700 + C17701 + C17702 + C17703) * C47902 +
                     (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                      C6084 * C16185) *
                         C16183) *
                        C47723) *
                       C47915) *
                      C47869 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47884) *
                       C1126 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47884 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C1127 +
                   (((C17703 + C17702 + C17701 + C17700) * C16183 +
                     (C1654 * C16185 + C1653 * C16181 +
                      (C113 * C1760 + C47838 * C1765) * C16186 +
                      (C113 * C1766 + C47838 * C1769) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16362 + C16363 + C16364 + C16365) * C47902 +
                     (C16357 + C16356 + C16355 + C16354) * C16183) *
                        C47884) *
                       C47915) *
                      C47601)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47884 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C47618 * C695 +
                  (((C16515 + C16514 + C16513 + C16512) * C16183 +
                    (C16520 + C16521 + C16522 + C16523) * C47902) *
                       C47723 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47884) *
                      C47618 * C696 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47884 -
                   ((C16792 + C16793 + C16794 + C16795) * C47902 +
                    (C16523 + C16522 + C16521 + C16520) * C16183) *
                       C47723) *
                      C47618 * C697 +
                  (((C16795 + C16794 + C16793 + C16792) * C16183 +
                    (C823 * C16185 + C822 * C16181 +
                     (C113 * C975 + C47838 * C984) * C16186 +
                     (C113 * C985 + C47838 * C990) * C47933) *
                        C47902) *
                       C47723 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C47884) *
                      C47618 * C47919)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C2348 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C2349 +
                   (((C113 * C508 + C47838 * C521) * C16185 +
                     (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                     C6083 * C47933) *
                        C16183 +
                    (C16516 + C16517 + C16518 + C16519) * C47902) *
                       C2350 -
                   ((C18536 + C18537 + C18538 + C18539) * C47902 +
                    (C7434 * C47933 + C7435 * C16186 +
                     (C113 * C2070 + C47838 * C2080) * C16181 +
                     (C113 * C2062 + C47838 * C2071) * C16185) *
                        C16183) *
                       C47931) *
                      C47618 * C47869 +
                  (((C16515 + C16514 + C16513 + C16512) * C16183 +
                    (C16520 + C16521 + C16522 + C16523) * C47902) *
                       C2349 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C2348 -
                   ((C16524 + C16525 + C16526 + C16527) * C47902 +
                    (C16519 + C16518 + C16517 + C16516) * C16183) *
                       C2350 +
                   ((C18539 + C18538 + C18537 + C18536) * C16183 +
                    (C2366 * C16185 + C2365 * C16181 +
                     (C113 * C2472 + C47838 * C2477) * C16186 +
                     (C113 * C2478 + C47838 * C2481) * C47933) *
                        C47902) *
                       C47931) *
                      C47618 * C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47636 * C47954 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47636 * C47942 +
           ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47636 * C47915) *
              C299 +
          (((C16353 + C16352 + C16351 + C16350) * C16183 +
            (C16358 + C16359 + C16360 + C16361) * C47902) *
               C47636 * C47942 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47636 * C47954 -
           ((C16362 + C16363 + C16364 + C16365) * C47902 +
            (C16357 + C16356 + C16355 + C16354) * C16183) *
               C47636 * C47915) *
              C300 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47636 * C47954 -
           ((C377 * C47933 + C378 * C16186 + C376 * C16181 + C375 * C16185) *
                C47902 +
            (C16361 + C16360 + C16359 + C16358) * C16183) *
               C47636 * C47942 +
           ((C16365 + C16364 + C16363 + C16362) * C16183 +
            (C378 * C16185 + C377 * C16181 +
             (C113 * C1474 + C47838 * C1475) * C16186 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C47636 * C47618 * C108 -
          ((C16192 + C16193 + C16194 + C16195) * C47902 +
           (C16191 + C16190 + C16189 + C16188) * C16183) *
              C47636 * C47618 * C109 +
          ((C16195 + C16194 + C16193 + C16192) * C16183 +
           (C16196 + C16197 + C16198 + C16199) * C47902) *
              C47636 * C47618 * C110 -
          ((C16200 + C16201 + C16202 + C16203) * C47902 +
           (C16199 + C16198 + C16197 + C16196) * C16183) *
              C47636 * C47618 * C111 +
          ((C16203 + C16202 + C16201 + C16200) * C16183 +
           (C173 * C16185 + C172 * C16181 +
            (C113 * C699 + C47838 * C700) * C16186 +
            (C113 * C701 + C47838 * C702) * C47933) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47636 * C1126 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47636 * C1127 +
           ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C16353 + C16352 + C16351 + C16350) * C16183 +
            (C16358 + C16359 + C16360 + C16361) * C47902) *
               C47636 * C1127 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47636 * C1126 -
           ((C16362 + C16363 + C16364 + C16365) * C47902 +
            (C16357 + C16356 + C16355 + C16354) * C16183) *
               C47636 * C47915) *
              C47938 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47636 * C1126 -
           ((C16658 + C16659 + C16660 + C16661) * C47902 +
            (C16361 + C16360 + C16359 + C16358) * C16183) *
               C47636 * C1127 +
           ((C16365 + C16364 + C16363 + C16362) * C16183 +
            (C378 * C16185 + C377 * C16181 +
             (C113 * C1474 + C47838 * C1475) * C16186 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C47636 * C1194 -
          ((C16350 + C16351 + C16352 + C16353) * C47902 +
           (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 + C5016 * C16185) *
               C16183) *
              C47636 * C1195 +
          ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 + C5907 * C47933) *
               C16183 +
           (C16354 + C16355 + C16356 + C16357) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C16186 + C1489 * C16181 + C1490 * C16185) *
               C47902 +
           (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 + C5906 * C16185) *
               C16183) *
              C47636 * C1197 +
          ((C5911 * C16185 + C5910 * C16181 +
            (C113 * C5885 + C47838 * C5887) * C16186 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C16183 +
           (C5909 * C16185 + C5908 * C16181 +
            (C113 * C5886 + C47838 * C5889) * C16186 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C1880 -
           ((C16512 + C16513 + C16514 + C16515) * C47902 +
            (C5656 * C47933 + C5657 * C16186 +
             (C113 * C519 + C47838 * C537) * C16181 +
             (C113 * C507 + C47838 * C520) * C16185) *
                C16183) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C16185 +
             (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
             C6083 * C47933) *
                C16183 +
            (C16516 + C16517 + C16518 + C16519) * C47902) *
               C47918) *
              C47618 * C47951 +
          (((C16515 + C16514 + C16513 + C16512) * C16183 +
            (C16520 + C16521 + C16522 + C16523) * C47902) *
               C1881 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C1880 -
           ((C16524 + C16525 + C16526 + C16527) * C47902 +
            (C16519 + C16518 + C16517 + C16516) * C16183) *
               C47918) *
              C47618 * C47938 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C1880 -
           ((C16792 + C16793 + C16794 + C16795) * C47902 +
            (C16523 + C16522 + C16521 + C16520) * C16183) *
               C1881 +
           ((C16527 + C16526 + C16525 + C16524) * C16183 +
            (C581 * C16185 + C580 * C16181 +
             (C113 * C2230 + C47838 * C2231) * C16186 +
             (C113 * C2232 + C47838 * C2233) * C47933) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C1880 -
           ((C16512 + C16513 + C16514 + C16515) * C47902 +
            (C5656 * C47933 + C5657 * C16186 +
             (C113 * C519 + C47838 * C537) * C16181 +
             (C113 * C507 + C47838 * C520) * C16185) *
                C16183) *
               C1881 +
           (((C113 * C508 + C47838 * C521) * C16185 +
             (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
             C6083 * C47933) *
                C16183 +
            (C16516 + C16517 + C16518 + C16519) * C47902) *
               C47918) *
              C47954 +
          (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
             C6085 * C47933) *
                C16183 +
            (C16990 + C16991 + C16992 + C16993) * C47902) *
               C1881 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C1880 -
           ((C6086 * C47933 + C6087 * C16186 + C2245 * C16181 +
             C2246 * C16185) *
                C47902 +
            (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
             C6082 * C16185) *
                C16183) *
               C47918) *
              C47942 +
          (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C1880 -
           ((C17700 + C17701 + C17702 + C17703) * C47902 +
            (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
             C6084 * C16185) *
                C16183) *
               C1881 +
           ((C6089 * C16185 + C6088 * C16181 +
             (C113 * C6057 + C47838 * C6059) * C16186 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C16183 +
            (C6087 * C16185 + C6086 * C16181 +
             (C113 * C6058 + C47838 * C6061) * C16186 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C3342 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C47883 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C3342) *
                       C47681) *
                      C47595 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C3342) *
                       C47883 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C3342 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47681) *
                      C47604 +
                  ((((C16195 + C16194 + C16193 + C16192) * C16183 +
                     (C16196 + C16197 + C16198 + C16199) * C47902) *
                        C3342 -
                    ((C16792 + C16793 + C16794 + C16795) * C47902 +
                     (C16523 + C16522 + C16521 + C16520) * C16183) *
                        C47723) *
                       C47883 +
                   (((C16997 + C16996 + C16995 + C16994) * C16183 +
                     (C1009 * C16185 + C1008 * C16181 +
                      (C113 * C1640 + C47838 * C1641) * C16186 +
                      (C113 * C1642 + C47838 * C1643) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16658 + C16659 + C16660 + C16661) * C47902 +
                     (C16361 + C16360 + C16359 + C16358) * C16183) *
                        C3342) *
                       C47681) *
                      C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47719 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47726 +
                    (((C113 * C508 + C47838 * C521) * C16185 +
                      (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                      C6083 * C47933) *
                         C16183 +
                     (C16516 + C16517 + C16518 + C16519) * C47902) *
                        C3850) *
                       C47883 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47726 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47719 -
                    ((C18402 + C18403 + C18404 + C18405) * C47902 +
                     (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
                      C6082 * C16185) *
                         C16183) *
                        C3850) *
                       C47681) *
                      C2688 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47726 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47719 -
                    ((C16524 + C16525 + C16526 + C16527) * C47902 +
                     (C16519 + C16518 + C16517 + C16516) * C16183) *
                        C3850) *
                       C47883 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47719 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47726 +
                    ((C18405 + C18404 + C18403 + C18402) * C16183 +
                     (C2244 * C16185 + C2243 * C16181 +
                      (C113 * C1342 + C47838 * C1359) * C16186 +
                      (C113 * C1360 + C47838 * C1369) * C47933) *
                         C47902) *
                        C3850) *
                       C47681) *
                      C47601)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C3342 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C47954 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C3342) *
                       C47942 +
                   (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                      C5907 * C47933) *
                         C16183 +
                     (C16354 + C16355 + C16356 + C16357) * C47902) *
                        C3342 -
                    ((C17700 + C17701 + C17702 + C17703) * C47902 +
                     (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                      C6084 * C16185) *
                         C16183) *
                        C47723) *
                       C47915) *
                      C2688 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C3342) *
                       C47954 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C3342 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47942 +
                   (((C17703 + C17702 + C17701 + C17700) * C16183 +
                     (C1654 * C16185 + C1653 * C16181 +
                      (C113 * C1760 + C47838 * C1765) * C16186 +
                      (C113 * C1766 + C47838 * C1769) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16362 + C16363 + C16364 + C16365) * C47902 +
                     (C16357 + C16356 + C16355 + C16354) * C16183) *
                        C3342) *
                       C47915) *
                      C47601)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C3342 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C47618 * C47960 +
                  (((C16515 + C16514 + C16513 + C16512) * C16183 +
                    (C16520 + C16521 + C16522 + C16523) * C47902) *
                       C47723 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C3342) *
                      C47618 * C47953 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C3342 -
                   ((C16792 + C16793 + C16794 + C16795) * C47902 +
                    (C16523 + C16522 + C16521 + C16520) * C16183) *
                       C47723) *
                      C47618 * C47940 +
                  (((C16795 + C16794 + C16793 + C16792) * C16183 +
                    (C823 * C16185 + C822 * C16181 +
                     (C113 * C975 + C47838 * C984) * C16186 +
                     (C113 * C985 + C47838 * C990) * C47933) *
                        C47902) *
                       C47723 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C3342) *
                      C47618 * C47919)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47962 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47959 +
                   (((C113 * C508 + C47838 * C521) * C16185 +
                     (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                     C6083 * C47933) *
                        C16183 +
                    (C16516 + C16517 + C16518 + C16519) * C47902) *
                       C47950 -
                   ((C18536 + C18537 + C18538 + C18539) * C47902 +
                    (C7434 * C47933 + C7435 * C16186 +
                     (C113 * C2070 + C47838 * C2080) * C16181 +
                     (C113 * C2062 + C47838 * C2071) * C16185) *
                        C16183) *
                       C47931) *
                      C47618 * C2688 +
                  (((C16515 + C16514 + C16513 + C16512) * C16183 +
                    (C16520 + C16521 + C16522 + C16523) * C47902) *
                       C47959 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47962 -
                   ((C16524 + C16525 + C16526 + C16527) * C47902 +
                    (C16519 + C16518 + C16517 + C16516) * C16183) *
                       C47950 +
                   ((C18539 + C18538 + C18537 + C18536) * C16183 +
                    (C2366 * C16185 + C2365 * C16181 +
                     (C113 * C2472 + C47838 * C2477) * C16186 +
                     (C113 * C2478 + C47838 * C2481) * C47933) *
                        C47902) *
                       C47931) *
                      C47618 * C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47719 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47726 +
                   (((C113 * C508 + C47838 * C521) * C16185 +
                     (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
                     C6083 * C47933) *
                        C16183 +
                    (C16516 + C16517 + C16518 + C16519) * C47902) *
                       C3850) *
                      C47618 * C47595 +
                  (((C16515 + C16514 + C16513 + C16512) * C16183 +
                    (C16520 + C16521 + C16522 + C16523) * C47902) *
                       C47726 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47719 -
                   ((C16524 + C16525 + C16526 + C16527) * C47902 +
                    (C16519 + C16518 + C16517 + C16516) * C16183) *
                       C3850) *
                      C47618 * C47604 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47719 -
                   ((C16792 + C16793 + C16794 + C16795) * C47902 +
                    (C16523 + C16522 + C16521 + C16520) * C16183) *
                       C47726 +
                   ((C16527 + C16526 + C16525 + C16524) * C16183 +
                    (C581 * C16185 + C580 * C16181 +
                     (C113 * C2230 + C47838 * C2231) * C16186 +
                     (C113 * C2232 + C47838 * C2233) * C47933) *
                        C47902) *
                       C3850) *
                      C47618 * C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C3342 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C47618 * C47960 +
                  (((C16515 + C16514 + C16513 + C16512) * C16183 +
                    (C16520 + C16521 + C16522 + C16523) * C47902) *
                       C47723 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C3342) *
                      C47618 * C47953 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C3342 -
                   ((C16792 + C16793 + C16794 + C16795) * C47902 +
                    (C16523 + C16522 + C16521 + C16520) * C16183) *
                       C47723) *
                      C47618 * C47940 +
                  (((C16795 + C16794 + C16793 + C16792) * C16183 +
                    (C823 * C16185 + C822 * C16181 +
                     (C113 * C975 + C47838 * C984) * C16186 +
                     (C113 * C985 + C47838 * C990) * C47933) *
                        C47902) *
                       C47723 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C3342) *
                      C47618 * C47919)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C3342 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C47954 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C3342) *
                       C47942 +
                   (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                      C5907 * C47933) *
                         C16183 +
                     (C16354 + C16355 + C16356 + C16357) * C47902) *
                        C3342 -
                    ((C17700 + C17701 + C17702 + C17703) * C47902 +
                     (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                      C6084 * C16185) *
                         C16183) *
                        C47723) *
                       C47915) *
                      C2688 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C3342) *
                       C47954 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C3342 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47942 +
                   (((C17703 + C17702 + C17701 + C17700) * C16183 +
                     (C1654 * C16185 + C1653 * C16181 +
                      (C113 * C1760 + C47838 * C1765) * C16186 +
                      (C113 * C1766 + C47838 * C1769) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16362 + C16363 + C16364 + C16365) * C47902 +
                     (C16357 + C16356 + C16355 + C16354) * C16183) *
                        C3342) *
                       C47915) *
                      C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C47883 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C47681) *
                      C695 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C47681 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C47883) *
                      C696 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47636 * C47883 -
                   ((C16658 + C16659 + C16660 + C16661) * C47902 +
                    (C16361 + C16360 + C16359 + C16358) * C16183) *
                       C47636 * C47681) *
                      C697 +
                  (((C16661 + C16660 + C16659 + C16658) * C16183 +
                    (C710 * C16185 + C709 * C16181 +
                     (C113 * C311 + C47838 * C330) * C16186 +
                     (C113 * C331 + C47838 * C341) * C47933) *
                        C47902) *
                       C47636 * C47681 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C47636 * C47883) *
                      C47919)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47636 * C1468 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47636 * C1469 +
                   ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47636 * C1470 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C47636 * C47925) *
                      C47869 +
                  (((C16353 + C16352 + C16351 + C16350) * C16183 +
                    (C16358 + C16359 + C16360 + C16361) * C47902) *
                       C47636 * C1469 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47636 * C1468 -
                   ((C16362 + C16363 + C16364 + C16365) * C47902 +
                    (C16357 + C16356 + C16355 + C16354) * C16183) *
                       C47636 * C1470 +
                   ((C17505 + C17504 + C17503 + C17502) * C16183 +
                    (C1488 * C16185 + C1487 * C16181 +
                     (C113 * C1205 + C47838 * C1216) * C16186 +
                     (C113 * C1217 + C47838 * C1223) * C47933) *
                        C47902) *
                       C47636 * C47925) *
                      C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47884 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C47883 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47884) *
                       C47681) *
                      C299 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47884) *
                       C47883 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47884 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C47681) *
                      C300 +
                  ((((C16195 + C16194 + C16193 + C16192) * C16183 +
                     (C16196 + C16197 + C16198 + C16199) * C47902) *
                        C47884 -
                    ((C16792 + C16793 + C16794 + C16795) * C47902 +
                     (C16523 + C16522 + C16521 + C16520) * C16183) *
                        C47723) *
                       C47883 +
                   (((C16997 + C16996 + C16995 + C16994) * C16183 +
                     (C1009 * C16185 + C1008 * C16181 +
                      (C113 * C1640 + C47838 * C1641) * C16186 +
                      (C113 * C1642 + C47838 * C1643) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16658 + C16659 + C16660 + C16661) * C47902 +
                     (C16361 + C16360 + C16359 + C16358) * C16183) *
                        C47884) *
                       C47681) *
                      C47909)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47884 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C1468 +
                  (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                     C6085 * C47933) *
                        C16183 +
                    (C16990 + C16991 + C16992 + C16993) * C47902) *
                       C47723 -
                   ((C16350 + C16351 + C16352 + C16353) * C47902 +
                    (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                     C5016 * C16185) *
                        C16183) *
                       C47884) *
                      C1469 +
                  (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                     C5907 * C47933) *
                        C16183 +
                    (C16354 + C16355 + C16356 + C16357) * C47902) *
                       C47884 -
                   ((C17700 + C17701 + C17702 + C17703) * C47902 +
                    (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                     C6084 * C16185) *
                        C16183) *
                       C47723) *
                      C1470 +
                  (((C6571 * C16185 + C6570 * C16181 +
                     (C113 * C6557 + C47838 * C6559) * C16186 +
                     (C113 * C6560 + C47838 * C6563) * C47933) *
                        C16183 +
                    (C6425 * C16185 + C6424 * C16181 +
                     (C113 * C6558 + C47838 * C6561) * C16186 +
                     (C113 * C6562 + C47838 * C6564) * C47933) *
                        C47902) *
                       C47723 -
                   ((C17502 + C17503 + C17504 + C17505) * C47902 +
                    (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 +
                     C5906 * C16185) *
                        C16183) *
                       C47884) *
                      C47925) *
                 C47590) /
                    (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47636 * C47954 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47636 * C47942 +
           ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47636 * C47915) *
              C299 +
          (((C16353 + C16352 + C16351 + C16350) * C16183 +
            (C16358 + C16359 + C16360 + C16361) * C47902) *
               C47636 * C47942 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47636 * C47954 -
           ((C16362 + C16363 + C16364 + C16365) * C47902 +
            (C16357 + C16356 + C16355 + C16354) * C16183) *
               C47636 * C47915) *
              C300 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47636 * C47954 -
           ((C377 * C47933 + C378 * C16186 + C376 * C16181 + C375 * C16185) *
                C47902 +
            (C16361 + C16360 + C16359 + C16358) * C16183) *
               C47636 * C47942 +
           ((C16365 + C16364 + C16363 + C16362) * C16183 +
            (C378 * C16185 + C377 * C16181 +
             (C113 * C1474 + C47838 * C1475) * C16186 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C47636 * C47618 * C108 -
          ((C16192 + C16193 + C16194 + C16195) * C47902 +
           (C16191 + C16190 + C16189 + C16188) * C16183) *
              C47636 * C47618 * C109 +
          ((C16195 + C16194 + C16193 + C16192) * C16183 +
           (C16196 + C16197 + C16198 + C16199) * C47902) *
              C47636 * C47618 * C110 -
          ((C16200 + C16201 + C16202 + C16203) * C47902 +
           (C16199 + C16198 + C16197 + C16196) * C16183) *
              C47636 * C47618 * C111 +
          ((C16203 + C16202 + C16201 + C16200) * C16183 +
           (C173 * C16185 + C172 * C16181 +
            (C113 * C699 + C47838 * C700) * C16186 +
            (C113 * C701 + C47838 * C702) * C47933) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47955 -
           ((C16512 + C16513 + C16514 + C16515) * C47902 +
            (C5656 * C47933 + C5657 * C16186 +
             (C113 * C519 + C47838 * C537) * C16181 +
             (C113 * C507 + C47838 * C520) * C16185) *
                C16183) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C16185 +
             (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
             C6083 * C47933) *
                C16183 +
            (C16516 + C16517 + C16518 + C16519) * C47902) *
               C47918) *
              C47618 * C299 +
          (((C16515 + C16514 + C16513 + C16512) * C16183 +
            (C16520 + C16521 + C16522 + C16523) * C47902) *
               C47944 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47955 -
           ((C16524 + C16525 + C16526 + C16527) * C47902 +
            (C16519 + C16518 + C16517 + C16516) * C16183) *
               C47918) *
              C47618 * C300 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47955 -
           ((C1008 * C47933 + C1009 * C16186 + C579 * C16181 + C578 * C16185) *
                C47902 +
            (C16523 + C16522 + C16521 + C16520) * C16183) *
               C47944 +
           ((C16527 + C16526 + C16525 + C16524) * C16183 +
            (C581 * C16185 + C580 * C16181 +
             (C113 * C2230 + C47838 * C2231) * C16186 +
             (C113 * C2232 + C47838 * C2233) * C47933) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47636 * C1126 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47636 * C1127 +
           ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C16353 + C16352 + C16351 + C16350) * C16183 +
            (C16358 + C16359 + C16360 + C16361) * C47902) *
               C47636 * C1127 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47636 * C1126 -
           ((C16362 + C16363 + C16364 + C16365) * C47902 +
            (C16357 + C16356 + C16355 + C16354) * C16183) *
               C47636 * C47915) *
              C47938 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47636 * C1126 -
           ((C16658 + C16659 + C16660 + C16661) * C47902 +
            (C16361 + C16360 + C16359 + C16358) * C16183) *
               C47636 * C1127 +
           ((C16365 + C16364 + C16363 + C16362) * C16183 +
            (C378 * C16185 + C377 * C16181 +
             (C113 * C1474 + C47838 * C1475) * C16186 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C47636 * C1194 -
          ((C16350 + C16351 + C16352 + C16353) * C47902 +
           (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 + C5016 * C16185) *
               C16183) *
              C47636 * C1195 +
          ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 + C5907 * C47933) *
               C16183 +
           (C16354 + C16355 + C16356 + C16357) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C16186 + C1489 * C16181 + C1490 * C16185) *
               C47902 +
           (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 + C5906 * C16185) *
               C16183) *
              C47636 * C1197 +
          ((C5911 * C16185 + C5910 * C16181 +
            (C113 * C5885 + C47838 * C5887) * C16186 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C16183 +
           (C5909 * C16185 + C5908 * C16181 +
            (C113 * C5886 + C47838 * C5889) * C16186 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47955 -
           ((C16512 + C16513 + C16514 + C16515) * C47902 +
            (C5656 * C47933 + C5657 * C16186 +
             (C113 * C519 + C47838 * C537) * C16181 +
             (C113 * C507 + C47838 * C520) * C16185) *
                C16183) *
               C47944 +
           (((C113 * C508 + C47838 * C521) * C16185 +
             (C113 * C522 + C47838 * C538) * C16181 + C6082 * C16186 +
             C6083 * C47933) *
                C16183 +
            (C16516 + C16517 + C16518 + C16519) * C47902) *
               C47918) *
              C1126 +
          (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
             C6085 * C47933) *
                C16183 +
            (C16990 + C16991 + C16992 + C16993) * C47902) *
               C47944 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47955 -
           ((C6086 * C47933 + C6087 * C16186 + C2245 * C16181 +
             C2246 * C16185) *
                C47902 +
            (C6088 * C47933 + C6089 * C16186 + C6083 * C16181 +
             C6082 * C16185) *
                C16183) *
               C47918) *
              C1127 +
          (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47955 -
           ((C6424 * C47933 + C6425 * C16186 + C1655 * C16181 +
             C1656 * C16185) *
                C47902 +
            (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
             C6084 * C16185) *
                C16183) *
               C47944 +
           ((C6089 * C16185 + C6088 * C16181 +
             (C113 * C6057 + C47838 * C6059) * C16186 +
             (C113 * C6060 + C47838 * C6063) * C47933) *
                C16183 +
            (C6087 * C16185 + C6086 * C16181 +
             (C113 * C6058 + C47838 * C6061) * C16186 +
             (C113 * C6062 + C47838 * C6064) * C47933) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47838 * C122) * C16185 +
                     (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                     C5017 * C47933) *
                        C16183 +
                    (C16188 + C16189 + C16190 + C16191) * C47902) *
                       C47884 -
                   ((C16512 + C16513 + C16514 + C16515) * C47902 +
                    (C5656 * C47933 + C5657 * C16186 +
                     (C113 * C519 + C47838 * C537) * C16181 +
                     (C113 * C507 + C47838 * C520) * C16185) *
                        C16183) *
                       C47723) *
                      C47618 * C695 +
                  (((C16515 + C16514 + C16513 + C16512) * C16183 +
                    (C16520 + C16521 + C16522 + C16523) * C47902) *
                       C47723 -
                   ((C16192 + C16193 + C16194 + C16195) * C47902 +
                    (C16191 + C16190 + C16189 + C16188) * C16183) *
                       C47884) *
                      C47618 * C696 +
                  (((C16195 + C16194 + C16193 + C16192) * C16183 +
                    (C16196 + C16197 + C16198 + C16199) * C47902) *
                       C47884 -
                   ((C16792 + C16793 + C16794 + C16795) * C47902 +
                    (C16523 + C16522 + C16521 + C16520) * C16183) *
                       C47723) *
                      C47618 * C697 +
                  (((C16795 + C16794 + C16793 + C16792) * C16183 +
                    (C823 * C16185 + C822 * C16181 +
                     (C113 * C975 + C47838 * C984) * C16186 +
                     (C113 * C985 + C47838 * C990) * C47933) *
                        C47902) *
                       C47723 -
                   ((C16200 + C16201 + C16202 + C16203) * C47902 +
                    (C16199 + C16198 + C16197 + C16196) * C16183) *
                       C47884) *
                      C47618 * C47919)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47838 * C122) * C16185 +
                      (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
                      C5017 * C47933) *
                         C16183 +
                     (C16188 + C16189 + C16190 + C16191) * C47902) *
                        C47884 -
                    ((C16512 + C16513 + C16514 + C16515) * C47902 +
                     (C5656 * C47933 + C5657 * C16186 +
                      (C113 * C519 + C47838 * C537) * C16181 +
                      (C113 * C507 + C47838 * C520) * C16185) *
                         C16183) *
                        C47723) *
                       C1126 +
                   (((C5657 * C16185 + C5656 * C16181 + C6084 * C16186 +
                      C6085 * C47933) *
                         C16183 +
                     (C16990 + C16991 + C16992 + C16993) * C47902) *
                        C47723 -
                    ((C16350 + C16351 + C16352 + C16353) * C47902 +
                     (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
                      C5016 * C16185) *
                         C16183) *
                        C47884) *
                       C1127 +
                   (((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
                      C5907 * C47933) *
                         C16183 +
                     (C16354 + C16355 + C16356 + C16357) * C47902) *
                        C47884 -
                    ((C17700 + C17701 + C17702 + C17703) * C47902 +
                     (C6570 * C47933 + C6571 * C16186 + C6085 * C16181 +
                      C6084 * C16185) *
                         C16183) *
                        C47723) *
                       C47915) *
                      C47869 +
                  ((((C16515 + C16514 + C16513 + C16512) * C16183 +
                     (C16520 + C16521 + C16522 + C16523) * C47902) *
                        C47723 -
                    ((C16192 + C16193 + C16194 + C16195) * C47902 +
                     (C16191 + C16190 + C16189 + C16188) * C16183) *
                        C47884) *
                       C1126 +
                   (((C16353 + C16352 + C16351 + C16350) * C16183 +
                     (C16358 + C16359 + C16360 + C16361) * C47902) *
                        C47884 -
                    ((C16994 + C16995 + C16996 + C16997) * C47902 +
                     (C16993 + C16992 + C16991 + C16990) * C16183) *
                        C47723) *
                       C1127 +
                   (((C17703 + C17702 + C17701 + C17700) * C16183 +
                     (C1654 * C16185 + C1653 * C16181 +
                      (C113 * C1760 + C47838 * C1765) * C16186 +
                      (C113 * C1766 + C47838 * C1769) * C47933) *
                         C47902) *
                        C47723 -
                    ((C16362 + C16363 + C16364 + C16365) * C47902 +
                     (C16357 + C16356 + C16355 + C16354) * C16183) *
                        C47884) *
                       C47915) *
                      C47601)) /
                    (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C47636 * C47618 * C108 -
          ((C16192 + C16193 + C16194 + C16195) * C47902 +
           (C16191 + C16190 + C16189 + C16188) * C16183) *
              C47636 * C47618 * C109 +
          ((C16195 + C16194 + C16193 + C16192) * C16183 +
           (C16196 + C16197 + C16198 + C16199) * C47902) *
              C47636 * C47618 * C110 -
          ((C16200 + C16201 + C16202 + C16203) * C47902 +
           (C16199 + C16198 + C16197 + C16196) * C16183) *
              C47636 * C47618 * C111 +
          ((C16203 + C16202 + C16201 + C16200) * C16183 +
           (C173 * C16185 + C172 * C16181 +
            (C113 * C699 + C47838 * C700) * C16186 +
            (C113 * C701 + C47838 * C702) * C47933) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47636 * C47954 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47636 * C47942 +
           ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47636 * C47915) *
              C299 +
          (((C16353 + C16352 + C16351 + C16350) * C16183 +
            (C16358 + C16359 + C16360 + C16361) * C47902) *
               C47636 * C47942 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47636 * C47954 -
           ((C16362 + C16363 + C16364 + C16365) * C47902 +
            (C16357 + C16356 + C16355 + C16354) * C16183) *
               C47636 * C47915) *
              C300 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47636 * C47954 -
           ((C377 * C47933 + C378 * C16186 + C376 * C16181 + C375 * C16185) *
                C47902 +
            (C16361 + C16360 + C16359 + C16358) * C16183) *
               C47636 * C47942 +
           ((C16365 + C16364 + C16363 + C16362) * C16183 +
            (C378 * C16185 + C377 * C16181 +
             (C113 * C1474 + C47838 * C1475) * C16186 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C16185 +
             (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
             C5017 * C47933) *
                C16183 +
            (C16188 + C16189 + C16190 + C16191) * C47902) *
               C47636 * C1126 -
           ((C16350 + C16351 + C16352 + C16353) * C47902 +
            (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 +
             C5016 * C16185) *
                C16183) *
               C47636 * C1127 +
           ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 +
             C5907 * C47933) *
                C16183 +
            (C16354 + C16355 + C16356 + C16357) * C47902) *
               C47636 * C47915) *
              C47951 +
          (((C16353 + C16352 + C16351 + C16350) * C16183 +
            (C16358 + C16359 + C16360 + C16361) * C47902) *
               C47636 * C1127 -
           ((C16192 + C16193 + C16194 + C16195) * C47902 +
            (C16191 + C16190 + C16189 + C16188) * C16183) *
               C47636 * C1126 -
           ((C16362 + C16363 + C16364 + C16365) * C47902 +
            (C16357 + C16356 + C16355 + C16354) * C16183) *
               C47636 * C47915) *
              C47938 +
          (((C16195 + C16194 + C16193 + C16192) * C16183 +
            (C16196 + C16197 + C16198 + C16199) * C47902) *
               C47636 * C1126 -
           ((C16658 + C16659 + C16660 + C16661) * C47902 +
            (C16361 + C16360 + C16359 + C16358) * C16183) *
               C47636 * C1127 +
           ((C16365 + C16364 + C16363 + C16362) * C16183 +
            (C378 * C16185 + C377 * C16181 +
             (C113 * C1474 + C47838 * C1475) * C16186 +
             (C113 * C1476 + C47838 * C1477) * C47933) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C16185 +
            (C113 * C123 + C47838 * C136) * C16181 + C5016 * C16186 +
            C5017 * C47933) *
               C16183 +
           (C16188 + C16189 + C16190 + C16191) * C47902) *
              C47636 * C1194 -
          ((C16350 + C16351 + C16352 + C16353) * C47902 +
           (C5018 * C47933 + C5019 * C16186 + C5017 * C16181 + C5016 * C16185) *
               C16183) *
              C47636 * C1195 +
          ((C5019 * C16185 + C5018 * C16181 + C5906 * C16186 + C5907 * C47933) *
               C16183 +
           (C16354 + C16355 + C16356 + C16357) * C47902) *
              C47636 * C1196 -
          ((C5908 * C47933 + C5909 * C16186 + C1489 * C16181 + C1490 * C16185) *
               C47902 +
           (C5910 * C47933 + C5911 * C16186 + C5907 * C16181 + C5906 * C16185) *
               C16183) *
              C47636 * C1197 +
          ((C5911 * C16185 + C5910 * C16181 +
            (C113 * C5885 + C47838 * C5887) * C16186 +
            (C113 * C5888 + C47838 * C5891) * C47933) *
               C16183 +
           (C5909 * C16185 + C5908 * C16181 +
            (C113 * C5886 + C47838 * C5889) * C16186 +
            (C113 * C5890 + C47838 * C5892) * C47933) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47838 * C122) * C21699 +
                     (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
                     C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                        C47567 * C47636 * C47677 -
                    (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 +
                     C5019 * C21700 + C5017 * C21695 + C5016 * C21699) *
                        C47567 * C47636 * C47684 +
                    (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 +
                     C5907 * C21696 + C5911 * C21701 + C5910 * C21697) *
                        C47567 * C47636 * C2948) *
                       C47595 +
                   ((C370 * C21699 + C369 * C21695 + C371 * C21700 +
                     C372 * C21696 + C1490 * C21701 + C1489 * C21697) *
                        C47567 * C47636 * C47684 -
                    (C372 * C21697 + C371 * C21701 + C369 * C21696 +
                     C370 * C21700 + C165 * C21695 + C164 * C21699) *
                        C47567 * C47636 * C47677 -
                    (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 +
                     C1490 * C21700 + C372 * C21695 + C371 * C21699) *
                        C47567 * C47636 * C2948) *
                       C47604 +
                   ((C166 * C21699 + C167 * C21695 + C368 * C21700 +
                     C367 * C21696 + C373 * C21701 + C374 * C21697) *
                        C47567 * C47636 * C47677 -
                    (C1487 * C21697 + C1488 * C21701 + C374 * C21696 +
                     C373 * C21700 + C367 * C21695 + C368 * C21699) *
                        C47567 * C47636 * C47684 +
                    (C373 * C21699 + C374 * C21695 + C1488 * C21700 +
                     C1487 * C21696 + (C113 * C1205 + C47838 * C1216) * C21701 +
                     (C113 * C1217 + C47838 * C1223) * C21697) *
                        C47567 * C47636 * C2948) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47884 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C47677 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47884) *
               C47684 +
           ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
             C5911 * C21701 + C5910 * C21697) *
                C47567 * C47884 -
            (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
             C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
                C47567 * C47723) *
               C2948) *
              C2688 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47884) *
               C47677 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47884 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47684 +
           ((C1656 * C21699 + C1655 * C21695 + C6425 * C21700 + C6424 * C21696 +
             (C113 * C6558 + C47838 * C6561) * C21701 +
             (C113 * C6562 + C47838 * C6564) * C21697) *
                C47567 * C47723 -
            (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
             C372 * C21695 + C371 * C21699) *
                C47567 * C47884) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C47961 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C47957 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47947 -
           (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
            C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
               C47567 * C47636 * C47925) *
              C2688 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C47957 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C47961 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47947 +
           (C1490 * C21699 + C1489 * C21695 + C5909 * C21700 + C5908 * C21696 +
            (C113 * C5886 + C47838 * C5889) * C21701 +
            (C113 * C5890 + C47838 * C5892) * C21697) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C2580 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C47681) *
              C47960 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C47681 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C2580) *
              C47953 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C2580 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C47681) *
              C47940 +
          ((C375 * C21699 + C376 * C21695 + C378 * C21700 + C377 * C21696 +
            (C113 * C1474 + C47838 * C1475) * C21701 +
            (C113 * C1476 + C47838 * C1477) * C21697) *
               C47567 * C47636 * C47681 -
           (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
            C168 * C21695 + C169 * C21699) *
               C47567 * C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47955 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47944 +
            ((C113 * C508 + C47838 * C521) * C21699 +
             (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
             C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
                C47567 * C47918) *
               C2580 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47944 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47955 -
            (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
             C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
                C47567 * C47918) *
               C47681) *
              C2688 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47944 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47955 -
            (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
             C575 * C21695 + C574 * C21699) *
                C47567 * C47918) *
               C2580 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47955 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47944 +
            (C2246 * C21699 + C2245 * C21695 + C6087 * C21700 + C6086 * C21696 +
             (C113 * C6058 + C47838 * C6061) * C21701 +
             (C113 * C6062 + C47838 * C6064) * C21697) *
                C47567 * C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47884 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C2580 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47884) *
               C47681) *
              C47595 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47884) *
               C2580 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47884 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47681) *
              C47604 +
          (((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
             C373 * C21701 + C374 * C21697) *
                C47567 * C47884 -
            (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
             C570 * C21695 + C571 * C21699) *
                C47567 * C47723) *
               C2580 +
           ((C1006 * C21699 + C1007 * C21695 + C1654 * C21700 + C1653 * C21696 +
             (C113 * C1760 + C47838 * C1765) * C21701 +
             (C113 * C1766 + C47838 * C1769) * C21697) *
                C47567 * C47723 -
            (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
             C367 * C21695 + C368 * C21699) *
                C47567 * C47884) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47838 * C122) * C21699 +
                     (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
                     C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                        C47567 * C47636 * C2580 -
                    (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 +
                     C5019 * C21700 + C5017 * C21695 + C5016 * C21699) *
                        C47567 * C47636 * C47681) *
                       C47960 +
                   ((C370 * C21699 + C369 * C21695 + C371 * C21700 +
                     C372 * C21696 + C1490 * C21701 + C1489 * C21697) *
                        C47567 * C47636 * C47681 -
                    (C372 * C21697 + C371 * C21701 + C369 * C21696 +
                     C370 * C21700 + C165 * C21695 + C164 * C21699) *
                        C47567 * C47636 * C2580) *
                       C47953 +
                   ((C166 * C21699 + C167 * C21695 + C368 * C21700 +
                     C367 * C21696 + C373 * C21701 + C374 * C21697) *
                        C47567 * C47636 * C2580 -
                    (C1487 * C21697 + C1488 * C21701 + C374 * C21696 +
                     C373 * C21700 + C367 * C21695 + C368 * C21699) *
                        C47567 * C47636 * C47681) *
                       C47940 +
                   ((C375 * C21699 + C376 * C21695 + C378 * C21700 +
                     C377 * C21696 + (C113 * C1474 + C47838 * C1475) * C21701 +
                     (C113 * C1476 + C47838 * C1477) * C21697) *
                        C47567 * C47636 * C47681 -
                    (C377 * C21697 + C378 * C21701 + C376 * C21696 +
                     C375 * C21700 + C168 * C21695 + C169 * C21699) *
                        C47567 * C47636 * C2580) *
                       C47919)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47838 * C122) * C21699 +
                     (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
                     C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                        C47567 * C47636 * C47961 -
                    (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 +
                     C5019 * C21700 + C5017 * C21695 + C5016 * C21699) *
                        C47567 * C47636 * C47957 +
                    (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 +
                     C5907 * C21696 + C5911 * C21701 + C5910 * C21697) *
                        C47567 * C47636 * C47947 -
                    (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
                     C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
                        C47567 * C47636 * C47925) *
                       C2688 +
                   ((C370 * C21699 + C369 * C21695 + C371 * C21700 +
                     C372 * C21696 + C1490 * C21701 + C1489 * C21697) *
                        C47567 * C47636 * C47957 -
                    (C372 * C21697 + C371 * C21701 + C369 * C21696 +
                     C370 * C21700 + C165 * C21695 + C164 * C21699) *
                        C47567 * C47636 * C47961 -
                    (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 +
                     C1490 * C21700 + C372 * C21695 + C371 * C21699) *
                        C47567 * C47636 * C47947 +
                    (C1490 * C21699 + C1489 * C21695 + C5909 * C21700 +
                     C5908 * C21696 + (C113 * C5886 + C47838 * C5889) * C21701 +
                     (C113 * C5890 + C47838 * C5892) * C21697) *
                        C47567 * C47636 * C47925) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C3342 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C47677 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C3342) *
               C47684 +
           ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
             C5911 * C21701 + C5910 * C21697) *
                C47567 * C3342 -
            (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
             C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
                C47567 * C47723) *
               C2948) *
              C47869 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C3342) *
               C47677 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C3342 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47684 +
           ((C1656 * C21699 + C1655 * C21695 + C6425 * C21700 + C6424 * C21696 +
             (C113 * C6558 + C47838 * C6561) * C21701 +
             (C113 * C6562 + C47838 * C6564) * C21697) *
                C47567 * C47723 -
            (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
             C372 * C21695 + C371 * C21699) *
                C47567 * C3342) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47719 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47726 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C3850) *
              C47677 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47726 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47719 -
           (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
            C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
               C47567 * C3850) *
              C47684 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47719 -
           (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C47726 +
           (C6089 * C21699 + C6088 * C21695 + C22566 * C21700 +
            C22565 * C21696 + (C113 * C22556 + C47838 * C22557) * C21701 +
            (C113 * C22558 + C47838 * C22559) * C21697) *
               C47567 * C3850) *
              C2948) *
         C47590) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C3342 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C47961 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47723 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C3342) *
              C47957 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C3342 -
           (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C47723) *
              C47947 +
          ((C6571 * C21699 + C6570 * C21695 + C22918 * C21700 +
            C22917 * C21696 + (C113 * C22908 + C47838 * C22909) * C21701 +
            (C113 * C22910 + C47838 * C22911) * C21697) *
               C47567 * C47723 -
           (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
            C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
               C47567 * C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C3342 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C2580 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C3342) *
               C47681) *
              C47951 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C3342) *
               C2580 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C3342 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47681) *
              C47938 +
          (((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
             C373 * C21701 + C374 * C21697) *
                C47567 * C3342 -
            (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
             C570 * C21695 + C571 * C21699) *
                C47567 * C47723) *
               C2580 +
           ((C1006 * C21699 + C1007 * C21695 + C1654 * C21700 + C1653 * C21696 +
             (C113 * C1760 + C47838 * C1765) * C21701 +
             (C113 * C1766 + C47838 * C1769) * C21697) *
                C47567 * C47723 -
            (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
             C367 * C21695 + C368 * C21699) *
                C47567 * C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47962 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47959 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47950 -
           (C23555 * C21697 + C23556 * C21701 + C7434 * C21696 +
            C7435 * C21700 + (C113 * C2070 + C47838 * C2080) * C21695 +
            (C113 * C2062 + C47838 * C2071) * C21699) *
               C47567 * C47931) *
              C2580 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47959 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47962 -
           (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
            C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
               C47567 * C47950 +
           (C7435 * C21699 + C7434 * C21695 + C23556 * C21700 +
            C23555 * C21696 + (C113 * C23546 + C47838 * C23547) * C21701 +
            (C113 * C23548 + C47838 * C23549) * C21697) *
               C47567 * C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47719 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47726 +
            ((C113 * C508 + C47838 * C521) * C21699 +
             (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
             C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
                C47567 * C3850) *
               C2580 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47726 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47719 -
            (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
             C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
                C47567 * C3850) *
               C47681) *
              C47869 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47726 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47719 -
            (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
             C575 * C21695 + C574 * C21699) *
                C47567 * C3850) *
               C2580 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47719 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47726 +
            (C2246 * C21699 + C2245 * C21695 + C6087 * C21700 + C6086 * C21696 +
             (C113 * C6058 + C47838 * C6061) * C21701 +
             (C113 * C6062 + C47838 * C6064) * C21697) *
                C47567 * C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C3342 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C2580 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C3342) *
               C47681) *
              C47951 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C3342) *
               C2580 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C3342 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47681) *
              C47938 +
          (((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
             C373 * C21701 + C374 * C21697) *
                C47567 * C3342 -
            (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
             C570 * C21695 + C571 * C21699) *
                C47567 * C47723) *
               C2580 +
           ((C1006 * C21699 + C1007 * C21695 + C1654 * C21700 + C1653 * C21696 +
             (C113 * C1760 + C47838 * C1765) * C21701 +
             (C113 * C1766 + C47838 * C1769) * C21697) *
                C47567 * C47723 -
            (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
             C367 * C21695 + C368 * C21699) *
                C47567 * C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C3342 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C47961 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47723 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C3342) *
              C47957 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C3342 -
           (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C47723) *
              C47947 +
          ((C6571 * C21699 + C6570 * C21695 + C22918 * C21700 +
            C22917 * C21696 + (C113 * C22908 + C47838 * C22909) * C21701 +
            (C113 * C22910 + C47838 * C22911) * C21697) *
               C47567 * C47723 -
           (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
            C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
               C47567 * C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C1468 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C1469 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C1470 -
           (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
            C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
               C47567 * C47636 * C47925) *
              C47869 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C1469 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C1468 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C1470 +
           (C1490 * C21699 + C1489 * C21695 + C5909 * C21700 + C5908 * C21696 +
            (C113 * C5886 + C47838 * C5889) * C21701 +
            (C113 * C5890 + C47838 * C5892) * C21697) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C47883 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C47681) *
              C695 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C47681 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C47883) *
              C696 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C47883 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C47681) *
              C697 +
          ((C375 * C21699 + C376 * C21695 + C378 * C21700 + C377 * C21696 +
            (C113 * C1474 + C47838 * C1475) * C21701 +
            (C113 * C1476 + C47838 * C1477) * C21697) *
               C47567 * C47636 * C47681 -
           (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
            C168 * C21695 + C169 * C21699) *
               C47567 * C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C1880 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C1881 +
            ((C113 * C508 + C47838 * C521) * C21699 +
             (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
             C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
                C47567 * C47918) *
               C47883 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C1881 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C1880 -
            (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
             C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
                C47567 * C47918) *
               C47681) *
              C47869 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C1881 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C1880 -
            (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
             C575 * C21695 + C574 * C21699) *
                C47567 * C47918) *
               C47883 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C1880 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C1881 +
            (C2246 * C21699 + C2245 * C21695 + C6087 * C21700 + C6086 * C21696 +
             (C113 * C6058 + C47838 * C6061) * C21701 +
             (C113 * C6062 + C47838 * C6064) * C21697) *
                C47567 * C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47884 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C1468 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47723 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47884) *
              C1469 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47884 -
           (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C47723) *
              C1470 +
          ((C6571 * C21699 + C6570 * C21695 + C22918 * C21700 +
            C22917 * C21696 + (C113 * C22908 + C47838 * C22909) * C21701 +
            (C113 * C22910 + C47838 * C22911) * C21697) *
               C47567 * C47723 -
           (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
            C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
               C47567 * C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47884 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C47883 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47884) *
               C47681) *
              C299 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47884) *
               C47883 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47884 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47681) *
              C300 +
          (((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
             C373 * C21701 + C374 * C21697) *
                C47567 * C47884 -
            (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
             C570 * C21695 + C571 * C21699) *
                C47567 * C47723) *
               C47883 +
           ((C1006 * C21699 + C1007 * C21695 + C1654 * C21700 + C1653 * C21696 +
             (C113 * C1760 + C47838 * C1765) * C21701 +
             (C113 * C1766 + C47838 * C1769) * C21697) *
                C47567 * C47723 -
            (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
             C367 * C21695 + C368 * C21699) *
                C47567 * C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C2348 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C2349 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C2350 -
           (C23555 * C21697 + C23556 * C21701 + C7434 * C21696 +
            C7435 * C21700 + (C113 * C2070 + C47838 * C2080) * C21695 +
            (C113 * C2062 + C47838 * C2071) * C21699) *
               C47567 * C47931) *
              C47883 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C2349 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C2348 -
           (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
            C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
               C47567 * C2350 +
           (C7435 * C21699 + C7434 * C21695 + C23556 * C21700 +
            C23555 * C21696 + (C113 * C23546 + C47838 * C23547) * C21701 +
            (C113 * C23548 + C47838 * C23549) * C21697) *
               C47567 * C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C47838 * C122) * C21699 +
               (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
               C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                  C47567 * C47636 * C47618 * C108 -
              (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
               C165 * C21695 + C164 * C21699) *
                  C47567 * C47636 * C47618 * C109 +
              (C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
               C373 * C21701 + C374 * C21697) *
                  C47567 * C47636 * C47618 * C110 -
              (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
               C168 * C21695 + C169 * C21699) *
                  C47567 * C47636 * C47618 * C111 +
              (C170 * C21699 + C171 * C21695 + C710 * C21700 + C709 * C21696 +
               (C113 * C311 + C47838 * C330) * C21701 +
               (C113 * C331 + C47838 * C341) * C21697) *
                  C47567 * C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47838 * C122) * C21699 +
                (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
                C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                   C47567 * C47636 * C47954 -
               (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 +
                C5019 * C21700 + C5017 * C21695 + C5016 * C21699) *
                   C47567 * C47636 * C47942 +
               (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 +
                C5907 * C21696 + C5911 * C21701 + C5910 * C21697) *
                   C47567 * C47636 * C47915) *
                  C299 +
              ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
                C1490 * C21701 + C1489 * C21697) *
                   C47567 * C47636 * C47942 -
               (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
                C165 * C21695 + C164 * C21699) *
                   C47567 * C47636 * C47954 -
               (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 +
                C1490 * C21700 + C372 * C21695 + C371 * C21699) *
                   C47567 * C47636 * C47915) *
                  C300 +
              ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
                C373 * C21701 + C374 * C21697) *
                   C47567 * C47636 * C47954 -
               (C1487 * C21697 + C1488 * C21701 + C374 * C21696 +
                C373 * C21700 + C367 * C21695 + C368 * C21699) *
                   C47567 * C47636 * C47942 +
               (C373 * C21699 + C374 * C21695 + C1488 * C21700 +
                C1487 * C21696 + (C113 * C1205 + C47838 * C1216) * C21701 +
                (C113 * C1217 + C47838 * C1223) * C21697) *
                   C47567 * C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47955 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47944 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C47618 * C299 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C47944 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47955 -
           (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
            C575 * C21695 + C574 * C21699) *
               C47567 * C47918) *
              C47618 * C300 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47955 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C47944 +
           (C576 * C21699 + C577 * C21695 + C2244 * C21700 + C2243 * C21696 +
            (C113 * C1342 + C47838 * C1359) * C21701 +
            (C113 * C1360 + C47838 * C1369) * C21697) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C1126 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C1127 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47915) *
              C47951 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C1127 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C1126 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47915) *
              C47938 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C1126 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C1127 +
           (C373 * C21699 + C374 * C21695 + C1488 * C21700 + C1487 * C21696 +
            (C113 * C1205 + C47838 * C1216) * C21701 +
            (C113 * C1217 + C47838 * C1223) * C21697) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C47636 * C1194 -
          (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
           C5017 * C21695 + C5016 * C21699) *
              C47567 * C47636 * C1195 +
          (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
           C5911 * C21701 + C5910 * C21697) *
              C47567 * C47636 * C1196 -
          (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 + C5911 * C21700 +
           C5907 * C21695 + C5906 * C21699) *
              C47567 * C47636 * C1197 +
          (C5911 * C21699 + C5910 * C21695 + C22446 * C21700 + C22445 * C21696 +
           (C113 * C22436 + C47838 * C22437) * C21701 +
           (C113 * C22438 + C47838 * C22439) * C21697) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47955 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47944 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C1126 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47944 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47955 -
           (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
            C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
               C47567 * C47918) *
              C1127 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47955 -
           ((C113 * C6560 + C47838 * C6563) * C21697 +
            (C113 * C6557 + C47838 * C6559) * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C47944 +
           (C6089 * C21699 + C6088 * C21695 + C22566 * C21700 +
            C22565 * C21696 + (C113 * C22556 + C47838 * C22557) * C21701 +
            (C113 * C22558 + C47838 * C22559) * C21697) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C1880 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C1881 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C47618 * C47951 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C1881 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C1880 -
           (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
            C575 * C21695 + C574 * C21699) *
               C47567 * C47918) *
              C47618 * C47938 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C1880 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C1881 +
           (C576 * C21699 + C577 * C21695 + C2244 * C21700 + C2243 * C21696 +
            (C113 * C1342 + C47838 * C1359) * C21701 +
            (C113 * C1360 + C47838 * C1369) * C21697) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C1880 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C1881 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C47954 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C1881 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C1880 -
           (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
            C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
               C47567 * C47918) *
              C47942 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C1880 -
           (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C1881 +
           (C6089 * C21699 + C6088 * C21695 + C22566 * C21700 +
            C22565 * C21696 + (C113 * C22556 + C47838 * C22557) * C21701 +
            (C113 * C22558 + C47838 * C22559) * C21697) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C2055 -
          (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
           (C113 * C519 + C47838 * C537) * C21695 +
           (C113 * C507 + C47838 * C520) * C21699) *
              C47567 * C2056 +
          ((C113 * C508 + C47838 * C521) * C21699 +
           (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
           C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
              C47567 * C2057 -
          ((C113 * C7424 + C47838 * C7427) * C21697 +
           (C113 * C7421 + C47838 * C7423) * C21701 + C7434 * C21696 +
           C7435 * C21700 + (C113 * C2070 + C47838 * C2080) * C21695 +
           (C113 * C2062 + C47838 * C2071) * C21699) *
              C47567 * C2058 +
          ((C113 * C2063 + C47838 * C2072) * C21699 +
           (C113 * C2073 + C47838 * C2081) * C21695 +
           (C113 * C6945 + C47838 * C6947) * C21700 +
           (C113 * C6948 + C47838 * C6951) * C21696 +
           (C113 * C23200 + C47838 * C23201) * C21701 +
           (C113 * C23202 + C47838 * C23203) * C21697) *
              C47567 * C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47884 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C1126 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47884) *
               C1127 +
           ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
             C5911 * C21701 + C5910 * C21697) *
                C47567 * C47884 -
            ((C113 * C6560 + C47838 * C6563) * C21697 +
             (C113 * C6557 + C47838 * C6559) * C21701 + C6570 * C21696 +
             C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
                C47567 * C47723) *
               C47915) *
              C47869 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47884) *
               C1126 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47884 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C1127 +
           ((C1656 * C21699 + C1655 * C21695 + C6425 * C21700 + C6424 * C21696 +
             (C113 * C6558 + C47838 * C6561) * C21701 +
             (C113 * C6562 + C47838 * C6564) * C21697) *
                C47567 * C47723 -
            (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
             C372 * C21695 + C371 * C21699) *
                C47567 * C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47884 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C47618 * C695 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C47723 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47884) *
              C47618 * C696 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47884 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C47723) *
              C47618 * C697 +
          ((C578 * C21699 + C579 * C21695 + C1009 * C21700 + C1008 * C21696 +
            (C113 * C1640 + C47838 * C1641) * C21701 +
            (C113 * C1642 + C47838 * C1643) * C21697) *
               C47567 * C47723 -
           (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
            C168 * C21695 + C169 * C21699) *
               C47567 * C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C2348 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C2349 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C2350 -
           ((C113 * C7424 + C47838 * C7427) * C21697 +
            (C113 * C7421 + C47838 * C7423) * C21701 + C7434 * C21696 +
            C7435 * C21700 + (C113 * C2070 + C47838 * C2080) * C21695 +
            (C113 * C2062 + C47838 * C2071) * C21699) *
               C47567 * C47931) *
              C47618 * C47869 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C2349 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C2348 -
           (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
            C575 * C21695 + C574 * C21699) *
               C47567 * C2350 +
           (C2368 * C21699 + C2367 * C21695 + C7289 * C21700 + C7288 * C21696 +
            (C113 * C7422 + C47838 * C7425) * C21701 +
            (C113 * C7426 + C47838 * C7428) * C21697) *
               C47567 * C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C47954 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C47942 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47915) *
              C299 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C47942 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C47954 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47915) *
              C300 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C47954 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C47942 +
           (C373 * C21699 + C374 * C21695 + C1488 * C21700 + C1487 * C21696 +
            (C113 * C1205 + C47838 * C1216) * C21701 +
            (C113 * C1217 + C47838 * C1223) * C21697) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C47636 * C47618 * C108 -
          (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
           C165 * C21695 + C164 * C21699) *
              C47567 * C47636 * C47618 * C109 +
          (C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
           C373 * C21701 + C374 * C21697) *
              C47567 * C47636 * C47618 * C110 -
          (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
           C168 * C21695 + C169 * C21699) *
              C47567 * C47636 * C47618 * C111 +
          (C170 * C21699 + C171 * C21695 + C710 * C21700 + C709 * C21696 +
           (C113 * C311 + C47838 * C330) * C21701 +
           (C113 * C331 + C47838 * C341) * C21697) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C1126 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C1127 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47915) *
              C47951 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C1127 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C1126 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47915) *
              C47938 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C1126 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C1127 +
           (C373 * C21699 + C374 * C21695 + C1488 * C21700 + C1487 * C21696 +
            (C113 * C1205 + C47838 * C1216) * C21701 +
            (C113 * C1217 + C47838 * C1223) * C21697) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C47636 * C1194 -
          (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
           C5017 * C21695 + C5016 * C21699) *
              C47567 * C47636 * C1195 +
          (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
           C5911 * C21701 + C5910 * C21697) *
              C47567 * C47636 * C1196 -
          (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 + C5911 * C21700 +
           C5907 * C21695 + C5906 * C21699) *
              C47567 * C47636 * C1197 +
          (C5911 * C21699 + C5910 * C21695 + C22446 * C21700 + C22445 * C21696 +
           (C113 * C22436 + C47838 * C22437) * C21701 +
           (C113 * C22438 + C47838 * C22439) * C21697) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C1880 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C1881 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C47618 * C47951 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C1881 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C1880 -
           (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
            C575 * C21695 + C574 * C21699) *
               C47567 * C47918) *
              C47618 * C47938 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C1880 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C1881 +
           (C576 * C21699 + C577 * C21695 + C2244 * C21700 + C2243 * C21696 +
            (C113 * C1342 + C47838 * C1359) * C21701 +
            (C113 * C1360 + C47838 * C1369) * C21697) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C1880 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C1881 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C47954 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C1881 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C1880 -
           (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
            C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
               C47567 * C47918) *
              C47942 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C1880 -
           (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C1881 +
           (C6089 * C21699 + C6088 * C21695 + C22566 * C21700 +
            C22565 * C21696 + (C113 * C22556 + C47838 * C22557) * C21701 +
            (C113 * C22558 + C47838 * C22559) * C21697) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C3342 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C47883 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C3342) *
               C47681) *
              C47595 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C3342) *
               C47883 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C3342 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47681) *
              C47604 +
          (((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
             C373 * C21701 + C374 * C21697) *
                C47567 * C3342 -
            (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
             C570 * C21695 + C571 * C21699) *
                C47567 * C47723) *
               C47883 +
           ((C1006 * C21699 + C1007 * C21695 + C1654 * C21700 + C1653 * C21696 +
             (C113 * C1760 + C47838 * C1765) * C21701 +
             (C113 * C1766 + C47838 * C1769) * C21697) *
                C47567 * C47723 -
            (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
             C367 * C21695 + C368 * C21699) *
                C47567 * C3342) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47719 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47726 +
            ((C113 * C508 + C47838 * C521) * C21699 +
             (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
             C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
                C47567 * C3850) *
               C47883 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47726 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47719 -
            (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
             C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
                C47567 * C3850) *
               C47681) *
              C2688 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47726 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47719 -
            (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
             C575 * C21695 + C574 * C21699) *
                C47567 * C3850) *
               C47883 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47719 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47726 +
            (C2246 * C21699 + C2245 * C21695 + C6087 * C21700 + C6086 * C21696 +
             (C113 * C6058 + C47838 * C6061) * C21701 +
             (C113 * C6062 + C47838 * C6064) * C21697) *
                C47567 * C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C3342 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C47954 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C3342) *
               C47942 +
           ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
             C5911 * C21701 + C5910 * C21697) *
                C47567 * C3342 -
            (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
             C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
                C47567 * C47723) *
               C47915) *
              C2688 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C3342) *
               C47954 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C3342 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47942 +
           ((C1656 * C21699 + C1655 * C21695 + C6425 * C21700 + C6424 * C21696 +
             (C113 * C6558 + C47838 * C6561) * C21701 +
             (C113 * C6562 + C47838 * C6564) * C21697) *
                C47567 * C47723 -
            (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
             C372 * C21695 + C371 * C21699) *
                C47567 * C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C3342 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C47618 * C47960 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C47723 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C3342) *
              C47618 * C47953 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C3342 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C47723) *
              C47618 * C47940 +
          ((C578 * C21699 + C579 * C21695 + C1009 * C21700 + C1008 * C21696 +
            (C113 * C1640 + C47838 * C1641) * C21701 +
            (C113 * C1642 + C47838 * C1643) * C21697) *
               C47567 * C47723 -
           (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
            C168 * C21695 + C169 * C21699) *
               C47567 * C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47962 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47959 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47950 -
           (C23555 * C21697 + C23556 * C21701 + C7434 * C21696 +
            C7435 * C21700 + (C113 * C2070 + C47838 * C2080) * C21695 +
            (C113 * C2062 + C47838 * C2071) * C21699) *
               C47567 * C47931) *
              C47618 * C2688 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C47959 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47962 -
           (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
            C575 * C21695 + C574 * C21699) *
               C47567 * C47950 +
           (C2368 * C21699 + C2367 * C21695 + C7289 * C21700 + C7288 * C21696 +
            (C113 * C7422 + C47838 * C7425) * C21701 +
            (C113 * C7426 + C47838 * C7428) * C21697) *
               C47567 * C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47838 * C122) * C21699 +
                     (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
                     C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                        C47567 * C47719 -
                    (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 +
                     C5657 * C21700 + (C113 * C519 + C47838 * C537) * C21695 +
                     (C113 * C507 + C47838 * C520) * C21699) *
                        C47567 * C47726 +
                    ((C113 * C508 + C47838 * C521) * C21699 +
                     (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
                     C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
                        C47567 * C3850) *
                       C47618 * C47595 +
                   ((C573 * C21699 + C572 * C21695 + C1004 * C21700 +
                     C1005 * C21696 + C1656 * C21701 + C1655 * C21697) *
                        C47567 * C47726 -
                    (C372 * C21697 + C371 * C21701 + C369 * C21696 +
                     C370 * C21700 + C165 * C21695 + C164 * C21699) *
                        C47567 * C47719 -
                    (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 +
                     C2246 * C21700 + C575 * C21695 + C574 * C21699) *
                        C47567 * C3850) *
                       C47618 * C47604 +
                   ((C166 * C21699 + C167 * C21695 + C368 * C21700 +
                     C367 * C21696 + C373 * C21701 + C374 * C21697) *
                        C47567 * C47719 -
                    (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 +
                     C1006 * C21700 + C570 * C21695 + C571 * C21699) *
                        C47567 * C47726 +
                    (C576 * C21699 + C577 * C21695 + C2244 * C21700 +
                     C2243 * C21696 + (C113 * C1342 + C47838 * C1359) * C21701 +
                     (C113 * C1360 + C47838 * C1369) * C21697) *
                        C47567 * C3850) *
                       C47618 * C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C3342 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C47618 * C47960 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C47723 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C3342) *
              C47618 * C47953 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C3342 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C47723) *
              C47618 * C47940 +
          ((C578 * C21699 + C579 * C21695 + C1009 * C21700 + C1008 * C21696 +
            (C113 * C1640 + C47838 * C1641) * C21701 +
            (C113 * C1642 + C47838 * C1643) * C21697) *
               C47567 * C47723 -
           (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
            C168 * C21695 + C169 * C21699) *
               C47567 * C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C3342 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C47954 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C3342) *
               C47942 +
           ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
             C5911 * C21701 + C5910 * C21697) *
                C47567 * C3342 -
            (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
             C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
                C47567 * C47723) *
               C47915) *
              C2688 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C3342) *
               C47954 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C3342 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47942 +
           ((C1656 * C21699 + C1655 * C21695 + C6425 * C21700 + C6424 * C21696 +
             (C113 * C6558 + C47838 * C6561) * C21701 +
             (C113 * C6562 + C47838 * C6564) * C21697) *
                C47567 * C47723 -
            (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
             C372 * C21695 + C371 * C21699) *
                C47567 * C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47838 * C122) * C21699 +
                     (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
                     C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                        C47567 * C47636 * C47883 -
                    (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 +
                     C5019 * C21700 + C5017 * C21695 + C5016 * C21699) *
                        C47567 * C47636 * C47681) *
                       C695 +
                   ((C370 * C21699 + C369 * C21695 + C371 * C21700 +
                     C372 * C21696 + C1490 * C21701 + C1489 * C21697) *
                        C47567 * C47636 * C47681 -
                    (C372 * C21697 + C371 * C21701 + C369 * C21696 +
                     C370 * C21700 + C165 * C21695 + C164 * C21699) *
                        C47567 * C47636 * C47883) *
                       C696 +
                   ((C166 * C21699 + C167 * C21695 + C368 * C21700 +
                     C367 * C21696 + C373 * C21701 + C374 * C21697) *
                        C47567 * C47636 * C47883 -
                    (C1487 * C21697 + C1488 * C21701 + C374 * C21696 +
                     C373 * C21700 + C367 * C21695 + C368 * C21699) *
                        C47567 * C47636 * C47681) *
                       C697 +
                   ((C375 * C21699 + C376 * C21695 + C378 * C21700 +
                     C377 * C21696 + (C113 * C1474 + C47838 * C1475) * C21701 +
                     (C113 * C1476 + C47838 * C1477) * C21697) *
                        C47567 * C47636 * C47681 -
                    (C377 * C21697 + C378 * C21701 + C376 * C21696 +
                     C375 * C21700 + C168 * C21695 + C169 * C21699) *
                        C47567 * C47636 * C47883) *
                       C47919)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47838 * C122) * C21699 +
                     (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
                     C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                        C47567 * C47636 * C1468 -
                    (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 +
                     C5019 * C21700 + C5017 * C21695 + C5016 * C21699) *
                        C47567 * C47636 * C1469 +
                    (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 +
                     C5907 * C21696 + C5911 * C21701 + C5910 * C21697) *
                        C47567 * C47636 * C1470 -
                    (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
                     C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
                        C47567 * C47636 * C47925) *
                       C47869 +
                   ((C370 * C21699 + C369 * C21695 + C371 * C21700 +
                     C372 * C21696 + C1490 * C21701 + C1489 * C21697) *
                        C47567 * C47636 * C1469 -
                    (C372 * C21697 + C371 * C21701 + C369 * C21696 +
                     C370 * C21700 + C165 * C21695 + C164 * C21699) *
                        C47567 * C47636 * C1468 -
                    (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 +
                     C1490 * C21700 + C372 * C21695 + C371 * C21699) *
                        C47567 * C47636 * C1470 +
                    (C1490 * C21699 + C1489 * C21695 + C5909 * C21700 +
                     C5908 * C21696 + (C113 * C5886 + C47838 * C5889) * C21701 +
                     (C113 * C5890 + C47838 * C5892) * C21697) *
                        C47567 * C47636 * C47925) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47884 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C47883 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47884) *
               C47681) *
              C299 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47884) *
               C47883 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47884 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C47681) *
              C300 +
          (((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
             C373 * C21701 + C374 * C21697) *
                C47567 * C47884 -
            (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
             C570 * C21695 + C571 * C21699) *
                C47567 * C47723) *
               C47883 +
           ((C1006 * C21699 + C1007 * C21695 + C1654 * C21700 + C1653 * C21696 +
             (C113 * C1760 + C47838 * C1765) * C21701 +
             (C113 * C1766 + C47838 * C1769) * C21697) *
                C47567 * C47723 -
            (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
             C367 * C21695 + C368 * C21699) *
                C47567 * C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47884 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C1468 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47723 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47884) *
              C1469 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47884 -
           (C22917 * C21697 + C22918 * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C47723) *
              C1470 +
          ((C6571 * C21699 + C6570 * C21695 + C22918 * C21700 +
            C22917 * C21696 + (C113 * C22908 + C47838 * C22909) * C21701 +
            (C113 * C22910 + C47838 * C22911) * C21697) *
               C47567 * C47723 -
           (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 +
            C5911 * C21700 + C5907 * C21695 + C5906 * C21699) *
               C47567 * C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C47954 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C47942 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47915) *
              C299 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C47942 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C47954 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47915) *
              C300 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C47954 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C47942 +
           (C373 * C21699 + C374 * C21695 + C1488 * C21700 + C1487 * C21696 +
            (C113 * C1205 + C47838 * C1216) * C21701 +
            (C113 * C1217 + C47838 * C1223) * C21697) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C47636 * C47618 * C108 -
          (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
           C165 * C21695 + C164 * C21699) *
              C47567 * C47636 * C47618 * C109 +
          (C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
           C373 * C21701 + C374 * C21697) *
              C47567 * C47636 * C47618 * C110 -
          (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
           C168 * C21695 + C169 * C21699) *
              C47567 * C47636 * C47618 * C111 +
          (C170 * C21699 + C171 * C21695 + C710 * C21700 + C709 * C21696 +
           (C113 * C311 + C47838 * C330) * C21701 +
           (C113 * C331 + C47838 * C341) * C21697) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47955 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47944 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C47618 * C299 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C47944 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47955 -
           (C6086 * C21697 + C6087 * C21701 + C2245 * C21696 + C2246 * C21700 +
            C575 * C21695 + C574 * C21699) *
               C47567 * C47918) *
              C47618 * C300 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47955 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C47944 +
           (C576 * C21699 + C577 * C21695 + C2244 * C21700 + C2243 * C21696 +
            (C113 * C1342 + C47838 * C1359) * C21701 +
            (C113 * C1360 + C47838 * C1369) * C21697) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C1126 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C1127 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47915) *
              C47951 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C1127 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C1126 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47915) *
              C47938 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C1126 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C1127 +
           (C373 * C21699 + C374 * C21695 + C1488 * C21700 + C1487 * C21696 +
            (C113 * C1205 + C47838 * C1216) * C21701 +
            (C113 * C1217 + C47838 * C1223) * C21697) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C47636 * C1194 -
          (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
           C5017 * C21695 + C5016 * C21699) *
              C47567 * C47636 * C1195 +
          (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
           C5911 * C21701 + C5910 * C21697) *
              C47567 * C47636 * C1196 -
          (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 + C5911 * C21700 +
           C5907 * C21695 + C5906 * C21699) *
              C47567 * C47636 * C1197 +
          (C5911 * C21699 + C5910 * C21695 + C22446 * C21700 + C22445 * C21696 +
           (C113 * C22436 + C47838 * C22437) * C21701 +
           (C113 * C22438 + C47838 * C22439) * C21697) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47955 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47944 +
           ((C113 * C508 + C47838 * C521) * C21699 +
            (C113 * C522 + C47838 * C538) * C21695 + C6082 * C21700 +
            C6083 * C21696 + C6089 * C21701 + C6088 * C21697) *
               C47567 * C47918) *
              C1126 +
          ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
            C6571 * C21701 + C6570 * C21697) *
               C47567 * C47944 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47955 -
           (C22565 * C21697 + C22566 * C21701 + C6088 * C21696 +
            C6089 * C21700 + C6083 * C21695 + C6082 * C21699) *
               C47567 * C47918) *
              C1127 +
          ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47955 -
           ((C113 * C6560 + C47838 * C6563) * C21697 +
            (C113 * C6557 + C47838 * C6559) * C21701 + C6570 * C21696 +
            C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
               C47567 * C47944 +
           (C6089 * C21699 + C6088 * C21695 + C22566 * C21700 +
            C22565 * C21696 + (C113 * C22556 + C47838 * C22557) * C21701 +
            (C113 * C22558 + C47838 * C22559) * C21697) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47884 -
           (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
            (C113 * C519 + C47838 * C537) * C21695 +
            (C113 * C507 + C47838 * C520) * C21699) *
               C47567 * C47723) *
              C47618 * C695 +
          ((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
            C1656 * C21701 + C1655 * C21697) *
               C47567 * C47723 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47884) *
              C47618 * C696 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47884 -
           (C1653 * C21697 + C1654 * C21701 + C1007 * C21696 + C1006 * C21700 +
            C570 * C21695 + C571 * C21699) *
               C47567 * C47723) *
              C47618 * C697 +
          ((C578 * C21699 + C579 * C21695 + C1009 * C21700 + C1008 * C21696 +
            (C113 * C1640 + C47838 * C1641) * C21701 +
            (C113 * C1642 + C47838 * C1643) * C21697) *
               C47567 * C47723 -
           (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
            C168 * C21695 + C169 * C21699) *
               C47567 * C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47838 * C122) * C21699 +
             (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
             C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
                C47567 * C47884 -
            (C6085 * C21697 + C6084 * C21701 + C5656 * C21696 + C5657 * C21700 +
             (C113 * C519 + C47838 * C537) * C21695 +
             (C113 * C507 + C47838 * C520) * C21699) *
                C47567 * C47723) *
               C1126 +
           ((C5657 * C21699 + C5656 * C21695 + C6084 * C21700 + C6085 * C21696 +
             C6571 * C21701 + C6570 * C21697) *
                C47567 * C47723 -
            (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
             C5017 * C21695 + C5016 * C21699) *
                C47567 * C47884) *
               C1127 +
           ((C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
             C5911 * C21701 + C5910 * C21697) *
                C47567 * C47884 -
            ((C113 * C6560 + C47838 * C6563) * C21697 +
             (C113 * C6557 + C47838 * C6559) * C21701 + C6570 * C21696 +
             C6571 * C21700 + C6085 * C21695 + C6084 * C21699) *
                C47567 * C47723) *
               C47915) *
              C47869 +
          (((C573 * C21699 + C572 * C21695 + C1004 * C21700 + C1005 * C21696 +
             C1656 * C21701 + C1655 * C21697) *
                C47567 * C47723 -
            (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
             C165 * C21695 + C164 * C21699) *
                C47567 * C47884) *
               C1126 +
           ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
             C1490 * C21701 + C1489 * C21697) *
                C47567 * C47884 -
            (C6424 * C21697 + C6425 * C21701 + C1655 * C21696 + C1656 * C21700 +
             C1005 * C21695 + C1004 * C21699) *
                C47567 * C47723) *
               C1127 +
           ((C1656 * C21699 + C1655 * C21695 + C6425 * C21700 + C6424 * C21696 +
             (C113 * C6558 + C47838 * C6561) * C21701 +
             (C113 * C6562 + C47838 * C6564) * C21697) *
                C47567 * C47723 -
            (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
             C372 * C21695 + C371 * C21699) *
                C47567 * C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C47636 * C47618 * C108 -
          (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
           C165 * C21695 + C164 * C21699) *
              C47567 * C47636 * C47618 * C109 +
          (C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
           C373 * C21701 + C374 * C21697) *
              C47567 * C47636 * C47618 * C110 -
          (C377 * C21697 + C378 * C21701 + C376 * C21696 + C375 * C21700 +
           C168 * C21695 + C169 * C21699) *
              C47567 * C47636 * C47618 * C111 +
          (C170 * C21699 + C171 * C21695 + C710 * C21700 + C709 * C21696 +
           (C113 * C311 + C47838 * C330) * C21701 +
           (C113 * C331 + C47838 * C341) * C21697) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C47954 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C47942 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47915) *
              C299 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C47942 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C47954 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47915) *
              C300 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C47954 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C47942 +
           (C373 * C21699 + C374 * C21695 + C1488 * C21700 + C1487 * C21696 +
            (C113 * C1205 + C47838 * C1216) * C21701 +
            (C113 * C1217 + C47838 * C1223) * C21697) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47838 * C122) * C21699 +
            (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
            C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
               C47567 * C47636 * C1126 -
           (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
            C5017 * C21695 + C5016 * C21699) *
               C47567 * C47636 * C1127 +
           (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
            C5911 * C21701 + C5910 * C21697) *
               C47567 * C47636 * C47915) *
              C47951 +
          ((C370 * C21699 + C369 * C21695 + C371 * C21700 + C372 * C21696 +
            C1490 * C21701 + C1489 * C21697) *
               C47567 * C47636 * C1127 -
           (C372 * C21697 + C371 * C21701 + C369 * C21696 + C370 * C21700 +
            C165 * C21695 + C164 * C21699) *
               C47567 * C47636 * C1126 -
           (C5908 * C21697 + C5909 * C21701 + C1489 * C21696 + C1490 * C21700 +
            C372 * C21695 + C371 * C21699) *
               C47567 * C47636 * C47915) *
              C47938 +
          ((C166 * C21699 + C167 * C21695 + C368 * C21700 + C367 * C21696 +
            C373 * C21701 + C374 * C21697) *
               C47567 * C47636 * C1126 -
           (C1487 * C21697 + C1488 * C21701 + C374 * C21696 + C373 * C21700 +
            C367 * C21695 + C368 * C21699) *
               C47567 * C47636 * C1127 +
           (C373 * C21699 + C374 * C21695 + C1488 * C21700 + C1487 * C21696 +
            (C113 * C1205 + C47838 * C1216) * C21701 +
            (C113 * C1217 + C47838 * C1223) * C21697) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47838 * C122) * C21699 +
           (C113 * C123 + C47838 * C136) * C21695 + C5016 * C21700 +
           C5017 * C21696 + C5019 * C21701 + C5018 * C21697) *
              C47567 * C47636 * C1194 -
          (C5907 * C21697 + C5906 * C21701 + C5018 * C21696 + C5019 * C21700 +
           C5017 * C21695 + C5016 * C21699) *
              C47567 * C47636 * C1195 +
          (C5019 * C21699 + C5018 * C21695 + C5906 * C21700 + C5907 * C21696 +
           C5911 * C21701 + C5910 * C21697) *
              C47567 * C47636 * C1196 -
          (C22445 * C21697 + C22446 * C21701 + C5910 * C21696 + C5911 * C21700 +
           C5907 * C21695 + C5906 * C21699) *
              C47567 * C47636 * C1197 +
          (C5911 * C21699 + C5910 * C21695 + C22446 * C21700 + C22445 * C21696 +
           (C113 * C22436 + C47838 * C22437) * C21701 +
           (C113 * C22438 + C47838 * C22439) * C21697) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47677 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47684 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47636 * C2948) *
              C47595 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47684 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47677 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C2948) *
              C47604 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C47677 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47684 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47884 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C47677 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47884) *
               C47684 +
           (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
             (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
                C47567 * C47884 -
            ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
             (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
                C47567 * C47723) *
               C2948) *
              C2688 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47884) *
               C47677 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47884 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47684 +
           (((C12145 + C12144) * C16185 + (C12143 + C12142) * C16181 +
             (C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C16186 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
             (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
                C47567 * C47884) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47961 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47957 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47636 * C47947 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C47636 * C47925) *
              C2688 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47957 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47961 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47947 +
           ((C11939 + C11938) * C16185 + (C11937 + C11936) * C16181 +
            (C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C16186 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C2580 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47681) *
              C47960 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47681 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C2580) *
              C47953 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C2580 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47681) *
              C47940 +
          (((C11063 + C11062) * C16185 + (C11061 + C11060) * C16181 +
            (C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                C16186 +
            (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47955 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47944 +
            ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C16185 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C16181 +
             (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
                C47567 * C47918) *
               C2580 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47944 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47955 -
            ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
             (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
                C47567 * C47918) *
               C47681) *
              C2688 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47944 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47955 -
            ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
             (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
                C47567 * C47918) *
               C2580 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47955 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47944 +
            ((C12863 + C12862) * C16185 + (C12861 + C12860) * C16181 +
             (C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C16186 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47884 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C2580 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47884) *
               C47681) *
              C47595 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47884) *
               C2580 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47884 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47681) *
              C47604 +
          ((((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
             (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                C47567 * C47884 -
            ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
             (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
                C47567 * C47723) *
               C2580 +
           (((C11423 + C11422) * C16185 + (C11421 + C11420) * C16181 +
             (C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
              C47935 * C1359) *
                 C16186 +
             (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
             (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
                C47567 * C47884) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C2580 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47681) *
              C47960 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47681 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C2580) *
              C47953 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C2580 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47681) *
              C47940 +
          (((C11063 + C11062) * C16185 + (C11061 + C11060) * C16181 +
            (C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                C16186 +
            (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47961 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47957 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47636 * C47947 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C47636 * C47925) *
              C2688 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47957 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47961 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47947 +
           ((C11939 + C11938) * C16185 + (C11937 + C11936) * C16181 +
            (C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C16186 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C3342 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C47677 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C3342) *
               C47684 +
           (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
             (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
                C47567 * C3342 -
            ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
             (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
                C47567 * C47723) *
               C2948) *
              C47869 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C3342) *
               C47677 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C3342 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47684 +
           (((C12145 + C12144) * C16185 + (C12143 + C12142) * C16181 +
             (C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C16186 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
             (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
                C47567 * C3342) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47719 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47726 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C3850) *
              C47677 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47726 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47719 -
           ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
            (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
               C47567 * C3850) *
              C47684 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47719 -
           ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C47726 +
           ((C27086 + C27085) * C16185 + (C27084 + C27083) * C16181 +
            (C10483 * C6057 + C10481 * C6059 + C10484 * C23546 +
             C47935 * C23547) *
                C16186 +
            (C10483 * C6060 + C10481 * C6063 + C10484 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C3850) *
              C2948) *
         C47590) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C3342 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C47961 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47723 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C3342) *
              C47957 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C3342 -
           ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C47723) *
              C47947 +
          (((C27552 + C27551) * C16185 + (C27550 + C27549) * C16181 +
            (C10483 * C6557 + C10481 * C6559 + C10484 * C22556 +
             C47935 * C22557) *
                C16186 +
            (C10483 * C6560 + C10481 * C6563 + C10484 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C3342 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C2580 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C3342) *
               C47681) *
              C47951 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C3342) *
               C2580 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C3342 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47681) *
              C47938 +
          ((((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
             (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                C47567 * C3342 -
            ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
             (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
                C47567 * C47723) *
               C2580 +
           (((C11423 + C11422) * C16185 + (C11421 + C11420) * C16181 +
             (C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
              C47935 * C1359) *
                 C16186 +
             (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
             (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
                C47567 * C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47962 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47959 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47950 -
           ((C28393 + C28394) * C47933 + (C28395 + C28396) * C16186 +
            (C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
             C10481 * C2080) *
                C16181 +
            (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
             C10481 * C2071) *
                C16185) *
               C47567 * C47931) *
              C2580 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47959 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47962 -
           ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
            (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
               C47567 * C47950 +
           ((C28396 + C28395) * C16185 + (C28394 + C28393) * C16181 +
            (C10483 * C7421 + C10481 * C7423 + C10484 * C23200 +
             C47935 * C23201) *
                C16186 +
            (C10483 * C7424 + C10481 * C7427 + C10484 * C23202 +
             C47935 * C23203) *
                C47933) *
               C47567 * C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47719 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47726 +
            ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C16185 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C16181 +
             (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
                C47567 * C3850) *
               C2580 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47726 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47719 -
            ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
             (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
                C47567 * C3850) *
               C47681) *
              C47869 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47726 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47719 -
            ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
             (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
                C47567 * C3850) *
               C2580 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47719 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47726 +
            ((C12863 + C12862) * C16185 + (C12861 + C12860) * C16181 +
             (C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C16186 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C3342 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C2580 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C3342) *
               C47681) *
              C47951 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C3342) *
               C2580 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C3342 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47681) *
              C47938 +
          ((((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
             (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                C47567 * C3342 -
            ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
             (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
                C47567 * C47723) *
               C2580 +
           (((C11423 + C11422) * C16185 + (C11421 + C11420) * C16181 +
             (C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
              C47935 * C1359) *
                 C16186 +
             (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
             (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
                C47567 * C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C3342 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C47961 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47723 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C3342) *
              C47957 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C3342 -
           ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C47723) *
              C47947 +
          (((C27552 + C27551) * C16185 + (C27550 + C27549) * C16181 +
            (C10483 * C6557 + C10481 * C6559 + C10484 * C22556 +
             C47935 * C22557) *
                C16186 +
            (C10483 * C6560 + C10481 * C6563 + C10484 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C1468 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C1469 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47636 * C1470 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C47636 * C47925) *
              C47869 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C1469 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C1468 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C1470 +
           ((C11939 + C11938) * C16185 + (C11937 + C11936) * C16181 +
            (C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C16186 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47883 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47681) *
              C695 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47681 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47883) *
              C696 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C47883 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47681) *
              C697 +
          (((C11063 + C11062) * C16185 + (C11061 + C11060) * C16181 +
            (C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                C16186 +
            (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C1880 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C1881 +
            ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C16185 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C16181 +
             (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
                C47567 * C47918) *
               C47883 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C1881 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C1880 -
            ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
             (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
                C47567 * C47918) *
               C47681) *
              C47869 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C1881 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C1880 -
            ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
             (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
                C47567 * C47918) *
               C47883 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C1880 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C1881 +
            ((C12863 + C12862) * C16185 + (C12861 + C12860) * C16181 +
             (C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C16186 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47884 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C1468 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47723 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47884) *
              C1469 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47884 -
           ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C47723) *
              C1470 +
          (((C27552 + C27551) * C16185 + (C27550 + C27549) * C16181 +
            (C10483 * C6557 + C10481 * C6559 + C10484 * C22556 +
             C47935 * C22557) *
                C16186 +
            (C10483 * C6560 + C10481 * C6563 + C10484 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47884 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C47883 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C10483 * C1339 + C10481 * C1354 + C10484 * C1340 +
              C47935 * C1355) *
                 C16186 +
             (C10483 * C1353 + C10481 * C1366 + C10484 * C1356 +
              C47935 * C1367) *
                 C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47884) *
               C47681) *
              C299 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47884) *
               C47883 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47884 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47681) *
              C300 +
          ((((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
             (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                C47567 * C47884 -
            ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
             (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
                C47567 * C47723) *
               C47883 +
           (((C11423 + C11422) * C16185 + (C11421 + C11420) * C16181 +
             (C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
              C47935 * C1359) *
                 C16186 +
             (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
             (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
                C47567 * C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C2348 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C2349 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C2350 -
           ((C28393 + C28394) * C47933 + (C28395 + C28396) * C16186 +
            (C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
             C10481 * C2080) *
                C16181 +
            (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
             C10481 * C2071) *
                C16185) *
               C47567 * C47931) *
              C47883 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C2349 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C2348 -
           ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
            (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
               C47567 * C2350 +
           ((C28396 + C28395) * C16185 + (C28394 + C28393) * C16181 +
            (C10483 * C7421 + C10481 * C7423 + C10484 * C23200 +
             C47935 * C23201) *
                C16186 +
            (C10483 * C7424 + C10481 * C7427 + C10484 * C23202 +
             C47935 * C23203) *
                C47933) *
               C47567 * C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                   C16185 +
               (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                   C16181 +
               (C10483 * C304 + C10481 * C317 + C10484 * C971 + C47935 * C976) *
                   C16186 +
               (C10483 * C316 + C10481 * C334 + C10484 * C977 + C47935 * C986) *
                   C47933) *
                  C47567 * C47636 * C47618 * C108 -
              ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
               (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                  C47567 * C47636 * C47618 * C109 +
              ((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
               (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                  C47567 * C47636 * C47618 * C110 -
              ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
               (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
                  C47567 * C47636 * C47618 * C111 +
              ((C10533 + C10532) * C16185 + (C10531 + C10530) * C16181 +
               (C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
                   C16186 +
               (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
                   C47933) *
                  C47567 * C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10483 * C115 + C10481 * C122 + C10484 * C507 +
                 C47935 * C520) *
                    C16185 +
                (C10483 * C123 + C10481 * C136 + C10484 * C519 +
                 C47935 * C537) *
                    C16181 +
                (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                   C47567 * C47636 * C47954 -
               ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
                (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                   C47567 * C47636 * C47942 +
               ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
                (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
                 C47935 * C1761) *
                    C16186 +
                (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
                 C47935 * C1767) *
                    C47933) *
                   C47567 * C47636 * C47915) *
                  C299 +
              (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
                (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                   C47567 * C47636 * C47942 -
               ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
                (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                   C47567 * C47636 * C47954 -
               ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
                (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
                   C47567 * C47636 * C47915) *
                  C300 +
              (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
                (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                   C47567 * C47636 * C47954 -
               ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
                (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
                   C47567 * C47636 * C47942 +
               ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
                (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
                 C47935 * C1765) *
                    C16186 +
                (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
                 C47935 * C1769) *
                    C47933) *
                   C47567 * C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47955 -
           ((C10484 * C1347 + C47935 * C1363 + C10483 * C977 + C10481 * C986) *
                C47933 +
            (C10484 * C1336 + C47935 * C1348 + C10483 * C971 + C10481 * C976) *
                C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47944 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C10483 * C1336 + C10481 * C1348 + C10484 * C2470 +
             C47935 * C2473) *
                C16186 +
            (C10483 * C1347 + C10481 * C1363 + C10484 * C2474 +
             C47935 * C2479) *
                C47933) *
               C47567 * C47918) *
              C47618 * C299 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47944 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47955 -
           ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
            (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
               C47567 * C47918) *
              C47618 * C300 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47955 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C47944 +
           ((C10921 + C10920) * C16185 + (C10919 + C10918) * C16181 +
            (C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
             C47935 * C2477) *
                C16186 +
            (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C1126 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C1127 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
             C47935 * C1761) *
                C16186 +
            (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C1127 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C1126 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C1126 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C1127 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
              C47567 * C47636 * C1194 -
          ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
           (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
              C47567 * C47636 * C1195 +
          ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
           (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
              C47567 * C47636 * C1196 -
          ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
           (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
              C47567 * C47636 * C1197 +
          ((C26904 + C26903) * C16185 + (C26902 + C26901) * C16181 +
           (C10483 * C5885 + C10481 * C5887 + C10484 * C22908 +
            C47935 * C22909) *
               C16186 +
           (C10483 * C5888 + C10481 * C5891 + C10484 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47955 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47944 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47918) *
              C1126 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47944 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47955 -
           ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
            (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
               C47567 * C47918) *
              C1127 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47955 -
           ((C10484 * C6060 + C47935 * C6063 + C10483 * C1762 +
             C10481 * C1767) *
                C47933 +
            (C10484 * C6057 + C47935 * C6059 + C10483 * C1758 +
             C10481 * C1761) *
                C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C47944 +
           ((C27086 + C27085) * C16185 + (C27084 + C27083) * C16181 +
            (C10483 * C6057 + C10481 * C6059 + C10484 * C23546 +
             C47935 * C23547) *
                C16186 +
            (C10483 * C6060 + C10481 * C6063 + C10484 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C1880 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C1881 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47918) *
              C47618 * C47951 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C1881 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C1880 -
           ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
            (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
               C47567 * C47918) *
              C47618 * C47938 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C1880 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C1881 +
           ((C10921 + C10920) * C16185 + (C10919 + C10918) * C16181 +
            (C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
             C47935 * C2477) *
                C16186 +
            (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C1880 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C1881 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47918) *
              C47954 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C1881 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C1880 -
           ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
            (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
               C47567 * C47918) *
              C47942 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C1880 -
           ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C1881 +
           ((C27086 + C27085) * C16185 + (C27084 + C27083) * C16181 +
            (C10483 * C6057 + C10481 * C6059 + C10484 * C23546 +
             C47935 * C23547) *
                C16186 +
            (C10483 * C6060 + C10481 * C6063 + C10484 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
              C47567 * C2055 -
          ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
           (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
               C16181 +
           (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
               C16185) *
              C47567 * C2056 +
          ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
               C16185 +
           (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
               C16181 +
           (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
              C47567 * C2057 -
          ((C10484 * C6948 + C47935 * C6951 + C10483 * C2474 + C10481 * C2479) *
               C47933 +
           (C10484 * C6945 + C47935 * C6947 + C10483 * C2470 + C10481 * C2473) *
               C16186 +
           (C10484 * C2073 + C47935 * C2081 + C10483 * C2070 + C10481 * C2080) *
               C16181 +
           (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 + C10481 * C2071) *
               C16185) *
              C47567 * C2058 +
          ((C10483 * C2063 + C10481 * C2072 + C10484 * C12649 +
            C47935 * C12651) *
               C16185 +
           (C10483 * C2073 + C10481 * C2081 + C10484 * C12652 +
            C47935 * C12655) *
               C16181 +
           (C10483 * C6945 + C10481 * C6947 + C10484 * C27926 +
            C47935 * C27927) *
               C16186 +
           (C10483 * C6948 + C10481 * C6951 + C10484 * C27928 +
            C47935 * C27929) *
               C47933) *
              C47567 * C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47884 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C1126 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47884) *
               C1127 +
           (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
             (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
                C47567 * C47884 -
            ((C10484 * C6060 + C47935 * C6063 + C10483 * C1762 +
              C10481 * C1767) *
                 C47933 +
             (C10484 * C6057 + C47935 * C6059 + C10483 * C1758 +
              C10481 * C1761) *
                 C16186 +
             (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
                C47567 * C47723) *
               C47915) *
              C47869 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47884) *
               C1126 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47884 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C1127 +
           (((C12145 + C12144) * C16185 + (C12143 + C12142) * C16181 +
             (C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C16186 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
             (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
                C47567 * C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47884 -
           ((C10484 * C1347 + C47935 * C1363 + C10483 * C977 + C10481 * C986) *
                C47933 +
            (C10484 * C1336 + C47935 * C1348 + C10483 * C971 + C10481 * C976) *
                C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C47618 * C695 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47723 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47884) *
              C47618 * C696 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47884 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C47723) *
              C47618 * C697 +
          (((C11205 + C11204) * C16185 + (C11203 + C11202) * C16181 +
            (C10483 * C974 + C10481 * C983 + C10484 * C2230 + C47935 * C2231) *
                C16186 +
            (C10483 * C982 + C10481 * C989 + C10484 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C2348 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C2349 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C2350 -
           ((C10484 * C6948 + C47935 * C6951 + C10483 * C2474 +
             C10481 * C2479) *
                C47933 +
            (C10484 * C6945 + C47935 * C6947 + C10483 * C2470 +
             C10481 * C2473) *
                C16186 +
            (C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
             C10481 * C2080) *
                C16181 +
            (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
             C10481 * C2071) *
                C16185) *
               C47567 * C47931) *
              C47618 * C47869 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C2349 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C2348 -
           ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
            (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
               C47567 * C2350 +
           ((C13005 + C13004) * C16185 + (C13003 + C13002) * C16181 +
            (C10483 * C2471 + C10481 * C2475 + C10484 * C6946 +
             C47935 * C6949) *
                C16186 +
            (C10483 * C2476 + C10481 * C2480 + C10484 * C6950 +
             C47935 * C6952) *
                C47933) *
               C47567 * C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47954 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47942 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
             C47935 * C1761) *
                C16186 +
            (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C299 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47942 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47954 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47915) *
              C300 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C47954 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47942 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C10483 * C304 + C10481 * C317 + C10484 * C971 + C47935 * C976) *
               C16186 +
           (C10483 * C316 + C10481 * C334 + C10484 * C977 + C47935 * C986) *
               C47933) *
              C47567 * C47636 * C47618 * C108 -
          ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
           (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
              C47567 * C47636 * C47618 * C109 +
          ((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
           (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
              C47567 * C47636 * C47618 * C110 -
          ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
           (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
              C47567 * C47636 * C47618 * C111 +
          ((C10533 + C10532) * C16185 + (C10531 + C10530) * C16181 +
           (C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
               C16186 +
           (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
               C47933) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C1126 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C1127 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
             C47935 * C1761) *
                C16186 +
            (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C1127 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C1126 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C1126 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C1127 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
              C47567 * C47636 * C1194 -
          ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
           (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
              C47567 * C47636 * C1195 +
          ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
           (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
              C47567 * C47636 * C1196 -
          ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
           (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
              C47567 * C47636 * C1197 +
          ((C26904 + C26903) * C16185 + (C26902 + C26901) * C16181 +
           (C10483 * C5885 + C10481 * C5887 + C10484 * C22908 +
            C47935 * C22909) *
               C16186 +
           (C10483 * C5888 + C10481 * C5891 + C10484 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C1880 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C1881 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47918) *
              C47618 * C47951 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C1881 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C1880 -
           ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
            (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
               C47567 * C47918) *
              C47618 * C47938 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C1880 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C1881 +
           ((C10921 + C10920) * C16185 + (C10919 + C10918) * C16181 +
            (C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
             C47935 * C2477) *
                C16186 +
            (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C1880 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C1881 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47918) *
              C47954 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C1881 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C1880 -
           ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
            (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
               C47567 * C47918) *
              C47942 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C1880 -
           ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C1881 +
           ((C27086 + C27085) * C16185 + (C27084 + C27083) * C16181 +
            (C10483 * C6057 + C10481 * C6059 + C10484 * C23546 +
             C47935 * C23547) *
                C16186 +
            (C10483 * C6060 + C10481 * C6063 + C10484 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C3342 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C47883 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C3342) *
               C47681) *
              C47595 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C3342) *
               C47883 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C3342 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47681) *
              C47604 +
          ((((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
             (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                C47567 * C3342 -
            ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
             (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
                C47567 * C47723) *
               C47883 +
           (((C11423 + C11422) * C16185 + (C11421 + C11420) * C16181 +
             (C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
              C47935 * C1359) *
                 C16186 +
             (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
             (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
                C47567 * C3342) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47719 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47726 +
            ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                 C16185 +
             (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                 C16181 +
             (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
                C47567 * C3850) *
               C47883 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47726 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47719 -
            ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
             (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
                C47567 * C3850) *
               C47681) *
              C2688 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47726 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47719 -
            ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
             (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
                C47567 * C3850) *
               C47883 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47719 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47726 +
            ((C12863 + C12862) * C16185 + (C12861 + C12860) * C16181 +
             (C10483 * C1341 + C10481 * C1357 + C10484 * C7422 +
              C47935 * C7425) *
                 C16186 +
             (C10483 * C1358 + C10481 * C1368 + C10484 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C3342 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C47954 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C3342) *
               C47942 +
           (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
             (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
                C47567 * C3342 -
            ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
             (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
                C47567 * C47723) *
               C47915) *
              C2688 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C3342) *
               C47954 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C3342 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47942 +
           (((C12145 + C12144) * C16185 + (C12143 + C12142) * C16181 +
             (C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C16186 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
             (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
                C47567 * C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C3342 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C47618 * C47960 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47723 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C3342) *
              C47618 * C47953 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C3342 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C47723) *
              C47618 * C47940 +
          (((C11205 + C11204) * C16185 + (C11203 + C11202) * C16181 +
            (C10483 * C974 + C10481 * C983 + C10484 * C2230 + C47935 * C2231) *
                C16186 +
            (C10483 * C982 + C10481 * C989 + C10484 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47962 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47959 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47950 -
           ((C28393 + C28394) * C47933 + (C28395 + C28396) * C16186 +
            (C10484 * C2073 + C47935 * C2081 + C10483 * C2070 +
             C10481 * C2080) *
                C16181 +
            (C10484 * C2063 + C47935 * C2072 + C10483 * C2062 +
             C10481 * C2071) *
                C16185) *
               C47567 * C47931) *
              C47618 * C2688 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47959 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47962 -
           ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
            (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
               C47567 * C47950 +
           ((C13005 + C13004) * C16185 + (C13003 + C13002) * C16181 +
            (C10483 * C2471 + C10481 * C2475 + C10484 * C6946 +
             C47935 * C6949) *
                C16186 +
            (C10483 * C2476 + C10481 * C2480 + C10484 * C6950 +
             C47935 * C6952) *
                C47933) *
               C47567 * C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47719 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47726 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C3850) *
              C47618 * C47595 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47726 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47719 -
           ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
            (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
               C47567 * C3850) *
              C47618 * C47604 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47719 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C47726 +
           ((C10921 + C10920) * C16185 + (C10919 + C10918) * C16181 +
            (C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
             C47935 * C2477) *
                C16186 +
            (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C3850) *
              C47618 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C3342 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C47618 * C47960 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47723 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C3342) *
              C47618 * C47953 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C3342 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C47723) *
              C47618 * C47940 +
          (((C11205 + C11204) * C16185 + (C11203 + C11202) * C16181 +
            (C10483 * C974 + C10481 * C983 + C10484 * C2230 + C47935 * C2231) *
                C16186 +
            (C10483 * C982 + C10481 * C989 + C10484 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C3342 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C47954 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C3342) *
               C47942 +
           (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
             (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
                C47567 * C3342 -
            ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
             (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
                C47567 * C47723) *
               C47915) *
              C2688 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C3342) *
               C47954 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C3342 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47942 +
           (((C12145 + C12144) * C16185 + (C12143 + C12142) * C16181 +
             (C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C16186 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
             (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
                C47567 * C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47883 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47681) *
              C695 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47681 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47883) *
              C696 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C47883 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47681) *
              C697 +
          (((C11063 + C11062) * C16185 + (C11061 + C11060) * C16181 +
            (C10483 * C309 + C10481 * C327 + C10484 * C1640 + C47935 * C1641) *
                C16186 +
            (C10483 * C326 + C10481 * C339 + C10484 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C1468 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C1469 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47636 * C1470 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C47636 * C47925) *
              C47869 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C1469 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C1468 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C1470 +
           ((C11939 + C11938) * C16185 + (C11937 + C11936) * C16181 +
            (C10483 * C1204 + C10481 * C1214 + C10484 * C6558 +
             C47935 * C6561) *
                C16186 +
            (C10483 * C1215 + C10481 * C1222 + C10484 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47884 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C47883 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C10483 * C1339 + C10481 * C1354 + C10484 * C1340 +
              C47935 * C1355) *
                 C16186 +
             (C10483 * C1353 + C10481 * C1366 + C10484 * C1356 +
              C47935 * C1367) *
                 C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47884) *
               C47681) *
              C299 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47884) *
               C47883 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47884 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C47681) *
              C300 +
          ((((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
             (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
                C47567 * C47884 -
            ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
             (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
                C47567 * C47723) *
               C47883 +
           (((C11423 + C11422) * C16185 + (C11421 + C11420) * C16181 +
             (C10483 * C1337 + C10481 * C1350 + C10484 * C1342 +
              C47935 * C1359) *
                 C16186 +
             (C10483 * C1349 + C10481 * C1364 + C10484 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
             (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
                C47567 * C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47884 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C1468 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47723 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47884) *
              C1469 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47884 -
           ((C27549 + C27550) * C47933 + (C27551 + C27552) * C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C47723) *
              C1470 +
          (((C27552 + C27551) * C16185 + (C27550 + C27549) * C16181 +
            (C10483 * C6557 + C10481 * C6559 + C10484 * C22556 +
             C47935 * C22557) *
                C16186 +
            (C10483 * C6560 + C10481 * C6563 + C10484 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
            (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
               C47567 * C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47954 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47942 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
             C47935 * C1761) *
                C16186 +
            (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C299 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47942 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47954 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47915) *
              C300 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C47954 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47942 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C10483 * C304 + C10481 * C317 + C10484 * C971 + C47935 * C976) *
               C16186 +
           (C10483 * C316 + C10481 * C334 + C10484 * C977 + C47935 * C986) *
               C47933) *
              C47567 * C47636 * C47618 * C108 -
          ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
           (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
              C47567 * C47636 * C47618 * C109 +
          ((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
           (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
              C47567 * C47636 * C47618 * C110 -
          ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
           (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
              C47567 * C47636 * C47618 * C111 +
          ((C10533 + C10532) * C16185 + (C10531 + C10530) * C16181 +
           (C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
               C16186 +
           (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
               C47933) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47955 -
           ((C10484 * C1347 + C47935 * C1363 + C10483 * C977 + C10481 * C986) *
                C47933 +
            (C10484 * C1336 + C47935 * C1348 + C10483 * C971 + C10481 * C976) *
                C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47944 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C10483 * C1336 + C10481 * C1348 + C10484 * C2470 +
             C47935 * C2473) *
                C16186 +
            (C10483 * C1347 + C10481 * C1363 + C10484 * C2474 +
             C47935 * C2479) *
                C47933) *
               C47567 * C47918) *
              C47618 * C299 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47944 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47955 -
           ((C12860 + C12861) * C47933 + (C12862 + C12863) * C16186 +
            (C10913 + C10912) * C16181 + (C10911 + C10910) * C16185) *
               C47567 * C47918) *
              C47618 * C300 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47955 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C47944 +
           ((C10921 + C10920) * C16185 + (C10919 + C10918) * C16181 +
            (C10483 * C1334 + C10481 * C1344 + C10484 * C2472 +
             C47935 * C2477) *
                C16186 +
            (C10483 * C1343 + C10481 * C1361 + C10484 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C1126 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C1127 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
             C47935 * C1761) *
                C16186 +
            (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C1127 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C1126 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C1126 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C1127 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
              C47567 * C47636 * C1194 -
          ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
           (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
              C47567 * C47636 * C1195 +
          ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
           (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
              C47567 * C47636 * C1196 -
          ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
           (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
              C47567 * C47636 * C1197 +
          ((C26904 + C26903) * C16185 + (C26902 + C26901) * C16181 +
           (C10483 * C5885 + C10481 * C5887 + C10484 * C22908 +
            C47935 * C22909) *
               C16186 +
           (C10483 * C5888 + C10481 * C5891 + C10484 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47955 -
           ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47944 +
           ((C10483 * C508 + C10481 * C521 + C10484 * C2062 + C47935 * C2071) *
                C16185 +
            (C10483 * C522 + C10481 * C538 + C10484 * C2070 + C47935 * C2080) *
                C16181 +
            (C27075 + C27076) * C16186 + (C27077 + C27078) * C47933) *
               C47567 * C47918) *
              C1126 +
          (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
            (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
               C47567 * C47944 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47955 -
           ((C27083 + C27084) * C47933 + (C27085 + C27086) * C16186 +
            (C27078 + C27077) * C16181 + (C27076 + C27075) * C16185) *
               C47567 * C47918) *
              C1127 +
          (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
               C47567 * C47955 -
           ((C10484 * C6060 + C47935 * C6063 + C10483 * C1762 +
             C10481 * C1767) *
                C47933 +
            (C10484 * C6057 + C47935 * C6059 + C10483 * C1758 +
             C10481 * C1761) *
                C16186 +
            (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
               C47567 * C47944 +
           ((C27086 + C27085) * C16185 + (C27084 + C27083) * C16181 +
            (C10483 * C6057 + C10481 * C6059 + C10484 * C23546 +
             C47935 * C23547) *
                C16186 +
            (C10483 * C6060 + C10481 * C6063 + C10484 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47884 -
           ((C10484 * C1347 + C47935 * C1363 + C10483 * C977 + C10481 * C986) *
                C47933 +
            (C10484 * C1336 + C47935 * C1348 + C10483 * C971 + C10481 * C976) *
                C16186 +
            (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                C16181 +
            (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                C16185) *
               C47567 * C47723) *
              C47618 * C695 +
          (((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
            (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
               C47567 * C47723 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47884) *
              C47618 * C696 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47884 -
           ((C11420 + C11421) * C47933 + (C11422 + C11423) * C16186 +
            (C10917 + C10916) * C16181 + (C10915 + C10914) * C16185) *
               C47567 * C47723) *
              C47618 * C697 +
          (((C11205 + C11204) * C16185 + (C11203 + C11202) * C16181 +
            (C10483 * C974 + C10481 * C983 + C10484 * C2230 + C47935 * C2231) *
                C16186 +
            (C10483 * C982 + C10481 * C989 + C10484 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
            (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
               C47567 * C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                 C16185 +
             (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                 C16181 +
             (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
                C47567 * C47884 -
            ((C26649 + C26650) * C47933 + (C26651 + C26652) * C16186 +
             (C10484 * C522 + C47935 * C538 + C10483 * C519 + C10481 * C537) *
                 C16181 +
             (C10484 * C508 + C47935 * C521 + C10483 * C507 + C10481 * C520) *
                 C16185) *
                C47567 * C47723) *
               C1126 +
           (((C26652 + C26651) * C16185 + (C26650 + C26649) * C16181 +
             (C27079 + C27080) * C16186 + (C27081 + C27082) * C47933) *
                C47567 * C47723 -
            ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
             (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
                C47567 * C47884) *
               C1127 +
           (((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
             (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
                C47567 * C47884 -
            ((C10484 * C6060 + C47935 * C6063 + C10483 * C1762 +
              C10481 * C1767) *
                 C47933 +
             (C10484 * C6057 + C47935 * C6059 + C10483 * C1758 +
              C10481 * C1761) *
                 C16186 +
             (C27082 + C27081) * C16181 + (C27080 + C27079) * C16185) *
                C47567 * C47723) *
               C47915) *
              C47869 +
          ((((C10909 + C10908) * C16185 + (C10907 + C10906) * C16181 +
             (C11416 + C11417) * C16186 + (C11418 + C11419) * C47933) *
                C47567 * C47723 -
            ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
             (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
                C47567 * C47884) *
               C1126 +
           (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
             (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
                C47567 * C47884 -
            ((C12142 + C12143) * C47933 + (C12144 + C12145) * C16186 +
             (C11419 + C11418) * C16181 + (C11417 + C11416) * C16185) *
                C47567 * C47723) *
               C1127 +
           (((C12145 + C12144) * C16185 + (C12143 + C12142) * C16181 +
             (C10483 * C1759 + C10481 * C1763 + C10484 * C6058 +
              C47935 * C6061) *
                 C16186 +
             (C10483 * C1764 + C10481 * C1768 + C10484 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
             (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
                C47567 * C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C10483 * C304 + C10481 * C317 + C10484 * C971 + C47935 * C976) *
               C16186 +
           (C10483 * C316 + C10481 * C334 + C10484 * C977 + C47935 * C986) *
               C47933) *
              C47567 * C47636 * C47618 * C108 -
          ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
           (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
              C47567 * C47636 * C47618 * C109 +
          ((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
           (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
              C47567 * C47636 * C47618 * C110 -
          ((C11060 + C11061) * C47933 + (C11062 + C11063) * C16186 +
           (C10529 + C10528) * C16181 + (C10527 + C10526) * C16185) *
              C47567 * C47636 * C47618 * C111 +
          ((C10533 + C10532) * C16185 + (C10531 + C10530) * C16181 +
           (C10483 * C310 + C10481 * C329 + C10484 * C975 + C47935 * C984) *
               C16186 +
           (C10483 * C328 + C10481 * C340 + C10484 * C985 + C47935 * C990) *
               C47933) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C47954 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C47942 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
             C47935 * C1761) *
                C16186 +
            (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C299 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C47942 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C47954 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47915) *
              C300 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C47954 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C47942 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
                C16185 +
            (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
                C16181 +
            (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
               C47567 * C47636 * C1126 -
           ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
            (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
               C47567 * C47636 * C1127 +
           ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
            (C10483 * C1202 + C10481 * C1211 + C10484 * C1758 +
             C47935 * C1761) *
                C16186 +
            (C10483 * C1210 + C10481 * C1220 + C10484 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C10715 + C10714) * C16185 + (C10713 + C10712) * C16181 +
            (C10716 + C10717) * C16186 + (C10718 + C10719) * C47933) *
               C47567 * C47636 * C1127 -
           ((C10712 + C10713) * C47933 + (C10714 + C10715) * C16186 +
            (C10521 + C10520) * C16181 + (C10519 + C10518) * C16185) *
               C47567 * C47636 * C1126 -
           ((C11936 + C11937) * C47933 + (C11938 + C11939) * C16186 +
            (C10719 + C10718) * C16181 + (C10717 + C10716) * C16185) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C10525 + C10524) * C16185 + (C10523 + C10522) * C16181 +
            (C10720 + C10721) * C16186 + (C10722 + C10723) * C47933) *
               C47567 * C47636 * C1126 -
           ((C10724 + C10725) * C47933 + (C10726 + C10727) * C16186 +
            (C10723 + C10722) * C16181 + (C10721 + C10720) * C16185) *
               C47567 * C47636 * C1127 +
           ((C10727 + C10726) * C16185 + (C10725 + C10724) * C16181 +
            (C10483 * C1200 + C10481 * C1207 + C10484 * C1760 +
             C47935 * C1765) *
                C16186 +
            (C10483 * C1206 + C10481 * C1218 + C10484 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10483 * C115 + C10481 * C122 + C10484 * C507 + C47935 * C520) *
               C16185 +
           (C10483 * C123 + C10481 * C136 + C10484 * C519 + C47935 * C537) *
               C16181 +
           (C26033 + C26034) * C16186 + (C26035 + C26036) * C47933) *
              C47567 * C47636 * C1194 -
          ((C26037 + C26038) * C47933 + (C26039 + C26040) * C16186 +
           (C26036 + C26035) * C16181 + (C26034 + C26033) * C16185) *
              C47567 * C47636 * C1195 +
          ((C26040 + C26039) * C16185 + (C26038 + C26037) * C16181 +
           (C26897 + C26898) * C16186 + (C26899 + C26900) * C47933) *
              C47567 * C47636 * C1196 -
          ((C26901 + C26902) * C47933 + (C26903 + C26904) * C16186 +
           (C26900 + C26899) * C16181 + (C26898 + C26897) * C16185) *
              C47567 * C47636 * C1197 +
          ((C26904 + C26903) * C16185 + (C26902 + C26901) * C16181 +
           (C10483 * C5885 + C10481 * C5887 + C10484 * C22908 +
            C47935 * C22909) *
               C16186 +
           (C10483 * C5888 + C10481 * C5891 + C10484 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47677 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47684 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C2948) *
              C47595 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47684 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47677 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C2948) *
              C47604 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C47677 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47684 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47884 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C47677 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47884) *
               C47684 +
           ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C31444 * C319 + C31442 * C335 + C31445 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C16183 +
             ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
                C47884 -
            (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
             ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
               C31442 * C1366) *
                  C47821 +
              (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
               C31442 * C1354) *
                  C114) *
                 C16183) *
                C47723) *
               C2948) *
              C2688 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47884) *
               C47677 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47884 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47684 +
           ((((C33106 + C33105) * C114 + (C33104 + C33103) * C47821) * C16183 +
             ((C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
             ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
                C47884) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47961 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47957 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47947 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C47636 * C47925) *
              C2688 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47957 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47961 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47947 +
           (((C32900 + C32899) * C114 + (C32898 + C32897) * C47821) * C16183 +
            ((C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C2580 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47681) *
              C47960 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47681 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C2580) *
              C47953 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C2580 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47681) *
              C47940 +
          ((((C32024 + C32023) * C114 + (C32022 + C32021) * C47821) * C16183 +
            ((C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
                 C114 +
             (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47955 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47944 +
            (((C31444 * C508 + C31442 * C521 + C31445 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C31444 * C522 + C31442 * C538 + C31445 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C16183 +
             ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
                C47918) *
               C2580 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47944 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47955 -
            (((C33813 + C33814) * C47821 + (C33815 + C33816) * C114) * C47902 +
             ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
               C31442 * C1363) *
                  C47821 +
              (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
               C31442 * C1348) *
                  C114) *
                 C16183) *
                C47918) *
               C47681) *
              C2688 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47944 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47955 -
            (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
             ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
                C47918) *
               C2580 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47955 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47944 +
            (((C33816 + C33815) * C114 + (C33814 + C33813) * C47821) * C16183 +
             ((C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47884 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C2580 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47884) *
               C47681) *
              C47595 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47884) *
               C2580 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47884 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47681) *
              C47604 +
          (((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
             ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
                C47884 -
            (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
             ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
                C47723) *
               C2580 +
           ((((C32384 + C32383) * C114 + (C32382 + C32381) * C47821) * C16183 +
             ((C31444 * C974 + C31442 * C983 + C31445 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C31444 * C982 + C31442 * C989 + C31445 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
             ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
                C47884) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C2580 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47681) *
              C47960 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47681 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C2580) *
              C47953 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C2580 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47681) *
              C47940 +
          ((((C32024 + C32023) * C114 + (C32022 + C32021) * C47821) * C16183 +
            ((C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
                 C114 +
             (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47961 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47957 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47947 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C47636 * C47925) *
              C2688 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47957 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47961 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47947 +
           (((C32900 + C32899) * C114 + (C32898 + C32897) * C47821) * C16183 +
            ((C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C3342 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C47677 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47684 +
           ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C31444 * C319 + C31442 * C335 + C31445 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C16183 +
             ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
                C3342 -
            (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
             ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
               C31442 * C1366) *
                  C47821 +
              (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
               C31442 * C1354) *
                  C114) *
                 C16183) *
                C47723) *
               C2948) *
              C47869 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C3342) *
               C47677 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C3342 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47684 +
           ((((C33106 + C33105) * C114 + (C33104 + C33103) * C47821) * C16183 +
             ((C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
             ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
                C3342) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47719 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47726 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C3850) *
              C47677 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47726 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47719 -
           (((C33813 + C33814) * C47821 + (C33815 + C33816) * C114) * C47902 +
            ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
              C31442 * C1363) *
                 C47821 +
             (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
              C31442 * C1348) *
                 C114) *
                C16183) *
               C3850) *
              C47684 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47719 -
           (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C47726 +
           (((C31444 * C1340 + C31442 * C1355 + C31445 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C31444 * C1356 + C31442 * C1367 + C31445 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C16183 +
            ((C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C3850) *
              C2948) *
         C47590) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C3342 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C47961 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47723 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C3342) *
              C47957 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C3342 -
           (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C47723) *
              C47947 +
          ((((C31444 * C1758 + C31442 * C1761 + C31445 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C31444 * C1762 + C31442 * C1767 + C31445 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C16183 +
            ((C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C3342 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C2580 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47681) *
              C47951 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C3342) *
               C2580 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C3342 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47681) *
              C47938 +
          (((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
             ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
                C3342 -
            (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
             ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
                C47723) *
               C2580 +
           ((((C32384 + C32383) * C114 + (C32382 + C32381) * C47821) * C16183 +
             ((C31444 * C974 + C31442 * C983 + C31445 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C31444 * C982 + C31442 * C989 + C31445 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
             ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
                C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47962 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47959 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47950 -
           (((C33955 + C33956) * C47821 + (C33957 + C33958) * C114) * C47902 +
            ((C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
              C31442 * C2080) *
                 C47821 +
             (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
              C31442 * C2071) *
                 C114) *
                C16183) *
               C47931) *
              C2580 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47959 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47962 -
           (((C33813 + C33814) * C47821 + (C33815 + C33816) * C114) * C47902 +
            ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
              C31442 * C1363) *
                 C47821 +
             (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
              C31442 * C1348) *
                 C114) *
                C16183) *
               C47950 +
           (((C31444 * C2470 + C31442 * C2473 + C31445 * C6945 +
              C47935 * C6947) *
                 C114 +
             (C31444 * C2474 + C31442 * C2479 + C31445 * C6948 +
              C47935 * C6951) *
                 C47821) *
                C16183 +
            ((C31444 * C2471 + C31442 * C2475 + C31445 * C6946 +
              C47935 * C6949) *
                 C114 +
             (C31444 * C2476 + C31442 * C2480 + C31445 * C6950 +
              C47935 * C6952) *
                 C47821) *
                C47902) *
               C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47719 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47726 +
            (((C31444 * C508 + C31442 * C521 + C31445 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C31444 * C522 + C31442 * C538 + C31445 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C16183 +
             ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
                C3850) *
               C2580 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47726 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47719 -
            (((C33813 + C33814) * C47821 + (C33815 + C33816) * C114) * C47902 +
             ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
               C31442 * C1363) *
                  C47821 +
              (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
               C31442 * C1348) *
                  C114) *
                 C16183) *
                C3850) *
               C47681) *
              C47869 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47726 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47719 -
            (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
             ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
                C3850) *
               C2580 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47719 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47726 +
            (((C33816 + C33815) * C114 + (C33814 + C33813) * C47821) * C16183 +
             ((C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C3342 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C2580 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47681) *
              C47951 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C3342) *
               C2580 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C3342 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47681) *
              C47938 +
          (((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
             ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
                C3342 -
            (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
             ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
                C47723) *
               C2580 +
           ((((C32384 + C32383) * C114 + (C32382 + C32381) * C47821) * C16183 +
             ((C31444 * C974 + C31442 * C983 + C31445 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C31444 * C982 + C31442 * C989 + C31445 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
             ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
                C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C3342 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C47961 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47723 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C3342) *
              C47957 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C3342 -
           (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C47723) *
              C47947 +
          ((((C31444 * C1758 + C31442 * C1761 + C31445 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C31444 * C1762 + C31442 * C1767 + C31445 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C16183 +
            ((C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C1468 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C1469 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C1470 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C47636 * C47925) *
              C47869 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C1469 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C1468 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C1470 +
           (((C32900 + C32899) * C114 + (C32898 + C32897) * C47821) * C16183 +
            ((C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47883 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47681) *
              C695 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47681 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47883) *
              C696 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C47883 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47681) *
              C697 +
          ((((C32024 + C32023) * C114 + (C32022 + C32021) * C47821) * C16183 +
            ((C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
                 C114 +
             (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C1880 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C1881 +
            (((C31444 * C508 + C31442 * C521 + C31445 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C31444 * C522 + C31442 * C538 + C31445 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C16183 +
             ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
                C47918) *
               C47883 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C1881 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C1880 -
            (((C33813 + C33814) * C47821 + (C33815 + C33816) * C114) * C47902 +
             ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
               C31442 * C1363) *
                  C47821 +
              (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
               C31442 * C1348) *
                  C114) *
                 C16183) *
                C47918) *
               C47681) *
              C47869 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C1881 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C1880 -
            (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
             ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
                C47918) *
               C47883 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C1880 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C1881 +
            (((C33816 + C33815) * C114 + (C33814 + C33813) * C47821) * C16183 +
             ((C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47884 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C1468 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47723 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47884) *
              C1469 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47884 -
           (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C47723) *
              C1470 +
          ((((C31444 * C1758 + C31442 * C1761 + C31445 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C31444 * C1762 + C31442 * C1767 + C31445 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C16183 +
            ((C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47884 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C47883 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47884) *
               C47681) *
              C299 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47884) *
               C47883 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47884 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47681) *
              C300 +
          (((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
             ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
                C47884 -
            (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
             ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
                C47723) *
               C47883 +
           ((((C32384 + C32383) * C114 + (C32382 + C32381) * C47821) * C16183 +
             ((C31444 * C974 + C31442 * C983 + C31445 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C31444 * C982 + C31442 * C989 + C31445 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
             ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C2348 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C2349 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C2350 -
           (((C33955 + C33956) * C47821 + (C33957 + C33958) * C114) * C47902 +
            ((C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
              C31442 * C2080) *
                 C47821 +
             (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
              C31442 * C2071) *
                 C114) *
                C16183) *
               C47931) *
              C47883 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C2349 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C2348 -
           (((C33813 + C33814) * C47821 + (C33815 + C33816) * C114) * C47902 +
            ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
              C31442 * C1363) *
                 C47821 +
             (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
              C31442 * C1348) *
                 C114) *
                C16183) *
               C2350 +
           (((C31444 * C2470 + C31442 * C2473 + C31445 * C6945 +
              C47935 * C6947) *
                 C114 +
             (C31444 * C2474 + C31442 * C2479 + C31445 * C6948 +
              C47935 * C6951) *
                 C47821) *
                C16183 +
            ((C31444 * C2471 + C31442 * C2475 + C31445 * C6946 +
              C47935 * C6949) *
                 C114 +
             (C31444 * C2476 + C31442 * C2480 + C31445 * C6950 +
              C47935 * C6952) *
                 C47821) *
                C47902) *
               C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31444 * C115 + C31442 * C122 + C31445 * C507 +
                 C47935 * C520) *
                    C114 +
                (C31444 * C123 + C31442 * C136 + C31445 * C519 +
                 C47935 * C537) *
                    C47821) *
                   C16183 +
               ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) *
                   C47902) *
                  C47636 * C47618 * C108 -
              (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) *
                   C47902 +
               ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) *
                   C16183) *
                  C47636 * C47618 * C109 +
              (((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) *
                   C16183 +
               ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) *
                   C47902) *
                  C47636 * C47618 * C110 -
              (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) *
                   C47902 +
               ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) *
                   C16183) *
                  C47636 * C47618 * C111 +
              (((C31494 + C31493) * C114 + (C31492 + C31491) * C47821) *
                   C16183 +
               ((C31444 * C120 + C31442 * C133 + C31445 * C812 +
                 C47935 * C813) *
                    C114 +
                (C31444 * C132 + C31442 * C141 + C31445 * C814 +
                 C47935 * C815) *
                    C47821) *
                   C47902) *
                  C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C31444 * C115 + C31442 * C122 + C31445 * C507 +
                  C47935 * C520) *
                     C114 +
                 (C31444 * C123 + C31442 * C136 + C31445 * C519 +
                  C47935 * C537) *
                     C47821) *
                    C16183 +
                ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) *
                    C47902) *
                   C47636 * C47954 -
               (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) *
                    C47902 +
                ((C31445 * C977 + C47935 * C986 + C31444 * C316 +
                  C31442 * C334) *
                     C47821 +
                 (C31445 * C971 + C47935 * C976 + C31444 * C304 +
                  C31442 * C317) *
                     C114) *
                    C16183) *
                   C47636 * C47942 +
               (((C31444 * C305 + C31442 * C318 + C31445 * C1339 +
                  C47935 * C1354) *
                     C114 +
                 (C31444 * C319 + C31442 * C335 + C31445 * C1353 +
                  C47935 * C1366) *
                     C47821) *
                    C16183 +
                ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) *
                    C47902) *
                   C47636 * C47915) *
                  C299 +
              ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) *
                    C16183 +
                ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) *
                    C47902) *
                   C47636 * C47942 -
               (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) *
                    C47902 +
                ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) *
                    C16183) *
                   C47636 * C47954 -
               (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) *
                    C47902 +
                ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) *
                    C16183) *
                   C47636 * C47915) *
                  C300 +
              ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) *
                    C16183 +
                ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) *
                    C47902) *
                   C47636 * C47954 -
               (((C31445 * C982 + C47935 * C989 + C31444 * C325 +
                  C31442 * C338) *
                     C47821 +
                 (C31445 * C974 + C47935 * C983 + C31444 * C308 +
                  C31442 * C324) *
                     C114) *
                    C47902 +
                ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) *
                    C16183) *
                   C47636 * C47942 +
               (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) *
                    C16183 +
                ((C31444 * C309 + C31442 * C327 + C31445 * C1640 +
                  C47935 * C1641) *
                     C114 +
                 (C31444 * C326 + C31442 * C339 + C31445 * C1642 +
                  C47935 * C1643) *
                     C47821) *
                    C47902) *
                   C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47955 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47944 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C47618 * C299 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47944 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47955 -
           (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
            ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
               C47918) *
              C47618 * C300 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47955 -
           (((C31445 * C529 + C47935 * C542 + C31444 * C528 + C31442 * C541) *
                 C47821 +
             (C31445 * C512 + C47935 * C530 + C31444 * C511 + C31442 * C527) *
                 C114) *
                C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C47944 +
           (((C31882 + C31881) * C114 + (C31880 + C31879) * C47821) * C16183 +
            ((C31444 * C512 + C31442 * C530 + C31445 * C2352 + C47935 * C2353) *
                 C114 +
             (C31444 * C529 + C31442 * C542 + C31445 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C1126 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C1127 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C1127 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C1126 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47915) *
              C47938 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C1126 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C1127 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C47636 * C1194 -
          (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
           ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                C47821 +
            (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                C114) *
               C16183) *
              C47636 * C1195 +
          (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                C114 +
            (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                C47821) *
               C16183 +
           ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
              C47636 * C1196 -
          (((C31445 * C1764 + C47935 * C1768 + C31444 * C1208 +
             C31442 * C1219) *
                C47821 +
            (C31445 * C1759 + C47935 * C1763 + C31444 * C1201 +
             C31442 * C1209) *
                C114) *
               C47902 +
           ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
             C31442 * C1220) *
                C47821 +
            (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
             C31442 * C1211) *
                C114) *
               C16183) *
              C47636 * C1197 +
          (((C31444 * C1203 + C31442 * C1212 + C31445 * C6557 +
             C47935 * C6559) *
                C114 +
            (C31444 * C1213 + C31442 * C1221 + C31445 * C6560 +
             C47935 * C6563) *
                C47821) *
               C16183 +
           ((C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C114 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47955 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47944 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C1126 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47944 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47955 -
           (((C31445 * C2476 + C47935 * C2480 + C31444 * C1345 +
              C31442 * C1362) *
                 C47821 +
             (C31445 * C2471 + C47935 * C2475 + C31444 * C1335 +
              C31442 * C1346) *
                 C114) *
                C47902 +
            ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
              C31442 * C1363) *
                 C47821 +
             (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
              C31442 * C1348) *
                 C114) *
                C16183) *
               C47918) *
              C1127 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47955 -
           (((C31445 * C1358 + C47935 * C1368 + C31444 * C1351 +
              C31442 * C1365) *
                 C47821 +
             (C31445 * C1341 + C47935 * C1357 + C31444 * C1338 +
              C31442 * C1352) *
                 C114) *
                C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C47944 +
           (((C31444 * C1340 + C31442 * C1355 + C31445 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C31444 * C1356 + C31442 * C1367 + C31445 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C16183 +
            ((C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C1880 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C47618 * C47951 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C1881 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C1880 -
           (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
            ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
               C47918) *
              C47618 * C47938 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C1880 -
           (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C1881 +
           (((C31882 + C31881) * C114 + (C31880 + C31879) * C47821) * C16183 +
            ((C31444 * C512 + C31442 * C530 + C31445 * C2352 + C47935 * C2353) *
                 C114 +
             (C31444 * C529 + C31442 * C542 + C31445 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C1880 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C47954 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C1881 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C1880 -
           (((C31445 * C2476 + C47935 * C2480 + C31444 * C1345 +
              C31442 * C1362) *
                 C47821 +
             (C31445 * C2471 + C47935 * C2475 + C31444 * C1335 +
              C31442 * C1346) *
                 C114) *
                C47902 +
            ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
              C31442 * C1363) *
                 C47821 +
             (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
              C31442 * C1348) *
                 C114) *
                C16183) *
               C47918) *
              C47942 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C1880 -
           (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C1881 +
           (((C31444 * C1340 + C31442 * C1355 + C31445 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C31444 * C1356 + C31442 * C1367 + C31445 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C16183 +
            ((C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C2055 -
          (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
           ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C47821 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C114) *
               C16183) *
              C2056 +
          (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C114 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C47821) *
               C16183 +
           ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
              C2057 -
          (((C31445 * C2075 + C47935 * C2082 + C31444 * C2068 +
             C31442 * C2079) *
                C47821 +
            (C31445 * C2064 + C47935 * C2074 + C31444 * C2061 +
             C31442 * C2069) *
                C114) *
               C47902 +
           ((C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
             C31442 * C2080) *
                C47821 +
            (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
             C31442 * C2071) *
                C114) *
               C16183) *
              C2058 +
          (((C31444 * C2063 + C31442 * C2072 + C31445 * C12649 +
             C47935 * C12651) *
                C114 +
            (C31444 * C2073 + C31442 * C2081 + C31445 * C12652 +
             C47935 * C12655) *
                C47821) *
               C16183 +
           ((C31444 * C2064 + C31442 * C2074 + C31445 * C12650 +
             C47935 * C12653) *
                C114 +
            (C31444 * C2075 + C31442 * C2082 + C31445 * C12654 +
             C47935 * C12656) *
                C47821) *
               C47902) *
              C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47884 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C1126 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47884) *
               C1127 +
           ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C31444 * C319 + C31442 * C335 + C31445 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C16183 +
             ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
                C47884 -
            (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
             ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
               C31442 * C1366) *
                  C47821 +
              (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
               C31442 * C1354) *
                  C114) *
                 C16183) *
                C47723) *
               C47915) *
              C47869 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47884) *
               C1126 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47884 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C1127 +
           ((((C33106 + C33105) * C114 + (C33104 + C33103) * C47821) * C16183 +
             ((C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
             ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47884 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C47618 * C695 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47723 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47884) *
              C47618 * C696 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47884 -
           (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C47723) *
              C47618 * C697 +
          ((((C32166 + C32165) * C114 + (C32164 + C32163) * C47821) * C16183 +
            ((C31444 * C513 + C31442 * C532 + C31445 * C514 + C47935 * C533) *
                 C114 +
             (C31444 * C531 + C31442 * C543 + C31445 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C2348 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C2349 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C2350 -
           (((C33955 + C33956) * C47821 + (C33957 + C33958) * C114) * C47902 +
            ((C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
              C31442 * C2080) *
                 C47821 +
             (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
              C31442 * C2071) *
                 C114) *
                C16183) *
               C47931) *
              C47618 * C47869 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C2349 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C2348 -
           (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
            ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
               C2350 +
           (((C33958 + C33957) * C114 + (C33956 + C33955) * C47821) * C16183 +
            ((C31444 * C2060 + C31442 * C2067 + C31445 * C2065 +
              C47935 * C2076) *
                 C114 +
             (C31444 * C2066 + C31442 * C2078 + C31445 * C2077 +
              C47935 * C2083) *
                 C47821) *
                C47902) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47954 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47942 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47915) *
              C299 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47942 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47954 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47915) *
              C300 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C47954 -
           (((C31445 * C982 + C47935 * C989 + C31444 * C325 + C31442 * C338) *
                 C47821 +
             (C31445 * C974 + C47935 * C983 + C31444 * C308 + C31442 * C324) *
                 C114) *
                C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47942 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C47636 * C47618 * C108 -
          (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
           ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
              C47636 * C47618 * C109 +
          (((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
           ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
              C47636 * C47618 * C110 -
          (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
           ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
              C47636 * C47618 * C111 +
          (((C31494 + C31493) * C114 + (C31492 + C31491) * C47821) * C16183 +
           ((C31444 * C120 + C31442 * C133 + C31445 * C812 + C47935 * C813) *
                C114 +
            (C31444 * C132 + C31442 * C141 + C31445 * C814 + C47935 * C815) *
                C47821) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C1126 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C1127 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C1127 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C1126 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47915) *
              C47938 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C1126 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C1127 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C47636 * C1194 -
          (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
           ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                C47821 +
            (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                C114) *
               C16183) *
              C47636 * C1195 +
          (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                C114 +
            (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                C47821) *
               C16183 +
           ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
              C47636 * C1196 -
          (((C31445 * C1764 + C47935 * C1768 + C31444 * C1208 +
             C31442 * C1219) *
                C47821 +
            (C31445 * C1759 + C47935 * C1763 + C31444 * C1201 +
             C31442 * C1209) *
                C114) *
               C47902 +
           ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
             C31442 * C1220) *
                C47821 +
            (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
             C31442 * C1211) *
                C114) *
               C16183) *
              C47636 * C1197 +
          (((C31444 * C1203 + C31442 * C1212 + C31445 * C6557 +
             C47935 * C6559) *
                C114 +
            (C31444 * C1213 + C31442 * C1221 + C31445 * C6560 +
             C47935 * C6563) *
                C47821) *
               C16183 +
           ((C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C114 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C1880 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C47618 * C47951 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C1881 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C1880 -
           (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
            ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
               C47918) *
              C47618 * C47938 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C1880 -
           (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C1881 +
           (((C31882 + C31881) * C114 + (C31880 + C31879) * C47821) * C16183 +
            ((C31444 * C512 + C31442 * C530 + C31445 * C2352 + C47935 * C2353) *
                 C114 +
             (C31444 * C529 + C31442 * C542 + C31445 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C1880 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C47954 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C1881 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C1880 -
           (((C31445 * C2476 + C47935 * C2480 + C31444 * C1345 +
              C31442 * C1362) *
                 C47821 +
             (C31445 * C2471 + C47935 * C2475 + C31444 * C1335 +
              C31442 * C1346) *
                 C114) *
                C47902 +
            ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
              C31442 * C1363) *
                 C47821 +
             (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
              C31442 * C1348) *
                 C114) *
                C16183) *
               C47918) *
              C47942 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C1880 -
           (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C1881 +
           (((C31444 * C1340 + C31442 * C1355 + C31445 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C31444 * C1356 + C31442 * C1367 + C31445 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C16183 +
            ((C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C3342 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C47883 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47681) *
              C47595 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C3342) *
               C47883 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C3342 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47681) *
              C47604 +
          (((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
             ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
                C3342 -
            (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
             ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
                C47723) *
               C47883 +
           ((((C32384 + C32383) * C114 + (C32382 + C32381) * C47821) * C16183 +
             ((C31444 * C974 + C31442 * C983 + C31445 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C31444 * C982 + C31442 * C989 + C31445 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
             ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
                C3342) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47719 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47726 +
            (((C31444 * C508 + C31442 * C521 + C31445 * C2062 +
               C47935 * C2071) *
                  C114 +
              (C31444 * C522 + C31442 * C538 + C31445 * C2070 +
               C47935 * C2080) *
                  C47821) *
                 C16183 +
             ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
                C3850) *
               C47883 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47726 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47719 -
            (((C33813 + C33814) * C47821 + (C33815 + C33816) * C114) * C47902 +
             ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
               C31442 * C1363) *
                  C47821 +
              (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
               C31442 * C1348) *
                  C114) *
                 C16183) *
                C3850) *
               C47681) *
              C2688 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47726 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47719 -
            (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
             ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
                C3850) *
               C47883 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47719 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47726 +
            (((C33816 + C33815) * C114 + (C33814 + C33813) * C47821) * C16183 +
             ((C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
               C47935 * C2477) *
                  C114 +
              (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
               C47935 * C2481) *
                  C47821) *
                 C47902) *
                C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C3342 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C47954 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47942 +
           ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C31444 * C319 + C31442 * C335 + C31445 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C16183 +
             ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
                C3342 -
            (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
             ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
               C31442 * C1366) *
                  C47821 +
              (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
               C31442 * C1354) *
                  C114) *
                 C16183) *
                C47723) *
               C47915) *
              C2688 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C3342) *
               C47954 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C3342 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47942 +
           ((((C33106 + C33105) * C114 + (C33104 + C33103) * C47821) * C16183 +
             ((C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
             ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C3342 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C47618 * C47960 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47723 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C3342) *
              C47618 * C47953 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C3342 -
           (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C47723) *
              C47618 * C47940 +
          ((((C32166 + C32165) * C114 + (C32164 + C32163) * C47821) * C16183 +
            ((C31444 * C513 + C31442 * C532 + C31445 * C514 + C47935 * C533) *
                 C114 +
             (C31444 * C531 + C31442 * C543 + C31445 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47962 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47959 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47950 -
           (((C33955 + C33956) * C47821 + (C33957 + C33958) * C114) * C47902 +
            ((C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
              C31442 * C2080) *
                 C47821 +
             (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
              C31442 * C2071) *
                 C114) *
                C16183) *
               C47931) *
              C47618 * C2688 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47959 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47962 -
           (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
            ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
               C47950 +
           (((C33958 + C33957) * C114 + (C33956 + C33955) * C47821) * C16183 +
            ((C31444 * C2060 + C31442 * C2067 + C31445 * C2065 +
              C47935 * C2076) *
                 C114 +
             (C31444 * C2066 + C31442 * C2078 + C31445 * C2077 +
              C47935 * C2083) *
                 C47821) *
                C47902) *
               C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47719 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47726 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C3850) *
              C47618 * C47595 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47726 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47719 -
           (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
            ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
               C3850) *
              C47618 * C47604 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47719 -
           (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C47726 +
           (((C31882 + C31881) * C114 + (C31880 + C31879) * C47821) * C16183 +
            ((C31444 * C512 + C31442 * C530 + C31445 * C2352 + C47935 * C2353) *
                 C114 +
             (C31444 * C529 + C31442 * C542 + C31445 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C3850) *
              C47618 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C3342 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C47618 * C47960 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47723 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C3342) *
              C47618 * C47953 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C3342 -
           (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C47723) *
              C47618 * C47940 +
          ((((C32166 + C32165) * C114 + (C32164 + C32163) * C47821) * C16183 +
            ((C31444 * C513 + C31442 * C532 + C31445 * C514 + C47935 * C533) *
                 C114 +
             (C31444 * C531 + C31442 * C543 + C31445 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C3342 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C47954 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47942 +
           ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C31444 * C319 + C31442 * C335 + C31445 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C16183 +
             ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
                C3342 -
            (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
             ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
               C31442 * C1366) *
                  C47821 +
              (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
               C31442 * C1354) *
                  C114) *
                 C16183) *
                C47723) *
               C47915) *
              C2688 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C3342) *
               C47954 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C3342 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47942 +
           ((((C33106 + C33105) * C114 + (C33104 + C33103) * C47821) * C16183 +
             ((C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
             ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
                C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47883 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47681) *
              C695 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47681 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47883) *
              C696 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C47883 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47681) *
              C697 +
          ((((C32024 + C32023) * C114 + (C32022 + C32021) * C47821) * C16183 +
            ((C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
                 C114 +
             (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
                 C47821) *
                C47902) *
               C47636 * C47681 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C1468 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C1469 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C1470 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C47636 * C47925) *
              C47869 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C1469 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C1468 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C1470 +
           (((C32900 + C32899) * C114 + (C32898 + C32897) * C47821) * C16183 +
            ((C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
              C47935 * C1765) *
                 C114 +
             (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
              C47935 * C1769) *
                 C47821) *
                C47902) *
               C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47884 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C47883 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47884) *
               C47681) *
              C299 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47884) *
               C47883 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47884 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C47681) *
              C300 +
          (((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
             ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
                C47884 -
            (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
             ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
                C47723) *
               C47883 +
           ((((C32384 + C32383) * C114 + (C32382 + C32381) * C47821) * C16183 +
             ((C31444 * C974 + C31442 * C983 + C31445 * C2230 +
               C47935 * C2231) *
                  C114 +
              (C31444 * C982 + C31442 * C989 + C31445 * C2232 +
               C47935 * C2233) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
             ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
                C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47884 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C1468 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47723 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47884) *
              C1469 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47884 -
           (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C47723) *
              C1470 +
          ((((C31444 * C1758 + C31442 * C1761 + C31445 * C6057 +
              C47935 * C6059) *
                 C114 +
             (C31444 * C1762 + C31442 * C1767 + C31445 * C6060 +
              C47935 * C6063) *
                 C47821) *
                C16183 +
            ((C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C114 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47821) *
                C47902) *
               C47723 -
           (((C32897 + C32898) * C47821 + (C32899 + C32900) * C114) * C47902 +
            ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
              C31442 * C1220) *
                 C47821 +
             (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
              C31442 * C1211) *
                 C114) *
                C16183) *
               C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47954 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47942 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47915) *
              C299 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47942 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47954 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47915) *
              C300 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C47954 -
           (((C31445 * C982 + C47935 * C989 + C31444 * C325 + C31442 * C338) *
                 C47821 +
             (C31445 * C974 + C47935 * C983 + C31444 * C308 + C31442 * C324) *
                 C114) *
                C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47942 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C47636 * C47618 * C108 -
          (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
           ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
              C47636 * C47618 * C109 +
          (((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
           ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
              C47636 * C47618 * C110 -
          (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
           ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
              C47636 * C47618 * C111 +
          (((C31494 + C31493) * C114 + (C31492 + C31491) * C47821) * C16183 +
           ((C31444 * C120 + C31442 * C133 + C31445 * C812 + C47935 * C813) *
                C114 +
            (C31444 * C132 + C31442 * C141 + C31445 * C814 + C47935 * C815) *
                C47821) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47955 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47944 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C47618 * C299 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47944 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47955 -
           (((C31879 + C31880) * C47821 + (C31881 + C31882) * C114) * C47902 +
            ((C31874 + C31873) * C47821 + (C31872 + C31871) * C114) * C16183) *
               C47918) *
              C47618 * C300 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47955 -
           (((C31445 * C529 + C47935 * C542 + C31444 * C528 + C31442 * C541) *
                 C47821 +
             (C31445 * C512 + C47935 * C530 + C31444 * C511 + C31442 * C527) *
                 C114) *
                C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C47944 +
           (((C31882 + C31881) * C114 + (C31880 + C31879) * C47821) * C16183 +
            ((C31444 * C512 + C31442 * C530 + C31445 * C2352 + C47935 * C2353) *
                 C114 +
             (C31444 * C529 + C31442 * C542 + C31445 * C2354 + C47935 * C2355) *
                 C47821) *
                C47902) *
               C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C1126 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C1127 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C1127 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C1126 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47915) *
              C47938 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C1126 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C1127 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C47636 * C1194 -
          (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
           ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                C47821 +
            (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                C114) *
               C16183) *
              C47636 * C1195 +
          (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                C114 +
            (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                C47821) *
               C16183 +
           ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
              C47636 * C1196 -
          (((C31445 * C1764 + C47935 * C1768 + C31444 * C1208 +
             C31442 * C1219) *
                C47821 +
            (C31445 * C1759 + C47935 * C1763 + C31444 * C1201 +
             C31442 * C1209) *
                C114) *
               C47902 +
           ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
             C31442 * C1220) *
                C47821 +
            (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
             C31442 * C1211) *
                C114) *
               C16183) *
              C47636 * C1197 +
          (((C31444 * C1203 + C31442 * C1212 + C31445 * C6557 +
             C47935 * C6559) *
                C114 +
            (C31444 * C1213 + C31442 * C1221 + C31445 * C6560 +
             C47935 * C6563) *
                C47821) *
               C16183 +
           ((C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C114 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47955 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47944 +
           (((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C114 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C47821) *
                C16183 +
            ((C31871 + C31872) * C114 + (C31873 + C31874) * C47821) * C47902) *
               C47918) *
              C1126 +
          ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 + C47935 * C1348) *
                 C114 +
             (C31444 * C977 + C31442 * C986 + C31445 * C1347 + C47935 * C1363) *
                 C47821) *
                C16183 +
            ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
               C47944 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47955 -
           (((C31445 * C2476 + C47935 * C2480 + C31444 * C1345 +
              C31442 * C1362) *
                 C47821 +
             (C31445 * C2471 + C47935 * C2475 + C31444 * C1335 +
              C31442 * C1346) *
                 C114) *
                C47902 +
            ((C31445 * C2474 + C47935 * C2479 + C31444 * C1347 +
              C31442 * C1363) *
                 C47821 +
             (C31445 * C2470 + C47935 * C2473 + C31444 * C1336 +
              C31442 * C1348) *
                 C114) *
                C16183) *
               C47918) *
              C1127 +
          ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47955 -
           (((C31445 * C1358 + C47935 * C1368 + C31444 * C1351 +
              C31442 * C1365) *
                 C47821 +
             (C31445 * C1341 + C47935 * C1357 + C31444 * C1338 +
              C31442 * C1352) *
                 C114) *
                C47902 +
            ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
              C31442 * C1366) *
                 C47821 +
             (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
              C31442 * C1354) *
                 C114) *
                C16183) *
               C47944 +
           (((C31444 * C1340 + C31442 * C1355 + C31445 * C7421 +
              C47935 * C7423) *
                 C114 +
             (C31444 * C1356 + C31442 * C1367 + C31445 * C7424 +
              C47935 * C7427) *
                 C47821) *
                C16183 +
            ((C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C114 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47821) *
                C47902) *
               C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47884 -
           (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
            ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C47821 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C114) *
                C16183) *
               C47723) *
              C47618 * C695 +
          ((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
            ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
               C47723 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47884) *
              C47618 * C696 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47884 -
           (((C32163 + C32164) * C47821 + (C32165 + C32166) * C114) * C47902 +
            ((C31878 + C31877) * C47821 + (C31876 + C31875) * C114) * C16183) *
               C47723) *
              C47618 * C697 +
          ((((C32166 + C32165) * C114 + (C32164 + C32163) * C47821) * C16183 +
            ((C31444 * C513 + C31442 * C532 + C31445 * C514 + C47935 * C533) *
                 C114 +
             (C31444 * C531 + C31442 * C543 + C31445 * C534 + C47935 * C544) *
                 C47821) *
                C47902) *
               C47723 -
           (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
            ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
               C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                  C114 +
              (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                  C47821) *
                 C16183 +
             ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
                C47884 -
            (((C31867 + C31868) * C47821 + (C31869 + C31870) * C114) * C47902 +
             ((C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                  C47821 +
              (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                  C114) *
                 C16183) *
                C47723) *
               C1126 +
           ((((C31444 * C971 + C31442 * C976 + C31445 * C1336 +
               C47935 * C1348) *
                  C114 +
              (C31444 * C977 + C31442 * C986 + C31445 * C1347 +
               C47935 * C1363) *
                  C47821) *
                 C16183 +
             ((C32377 + C32378) * C114 + (C32379 + C32380) * C47821) * C47902) *
                C47723 -
            (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
             ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                  C47821 +
              (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                  C114) *
                 C16183) *
                C47884) *
               C1127 +
           ((((C31444 * C305 + C31442 * C318 + C31445 * C1339 +
               C47935 * C1354) *
                  C114 +
              (C31444 * C319 + C31442 * C335 + C31445 * C1353 +
               C47935 * C1366) *
                  C47821) *
                 C16183 +
             ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
                C47884 -
            (((C33103 + C33104) * C47821 + (C33105 + C33106) * C114) * C47902 +
             ((C31445 * C1356 + C47935 * C1367 + C31444 * C1353 +
               C31442 * C1366) *
                  C47821 +
              (C31445 * C1340 + C47935 * C1355 + C31444 * C1339 +
               C31442 * C1354) *
                  C114) *
                 C16183) *
                C47723) *
               C47915) *
              C47869 +
          (((((C31870 + C31869) * C114 + (C31868 + C31867) * C47821) * C16183 +
             ((C31875 + C31876) * C114 + (C31877 + C31878) * C47821) * C47902) *
                C47723 -
            (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
             ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
                C47884) *
               C1126 +
           ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
             ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
                C47884 -
            (((C32381 + C32382) * C47821 + (C32383 + C32384) * C114) * C47902 +
             ((C32380 + C32379) * C47821 + (C32378 + C32377) * C114) * C16183) *
                C47723) *
               C1127 +
           ((((C33106 + C33105) * C114 + (C33104 + C33103) * C47821) * C16183 +
             ((C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
               C47935 * C1359) *
                  C114 +
              (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
               C47935 * C1369) *
                  C47821) *
                 C47902) *
                C47723 -
            (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
             ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
                C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C47636 * C47618 * C108 -
          (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
           ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
              C47636 * C47618 * C109 +
          (((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
           ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
              C47636 * C47618 * C110 -
          (((C31491 + C31492) * C47821 + (C31493 + C31494) * C114) * C47902 +
           ((C31490 + C31489) * C47821 + (C31488 + C31487) * C114) * C16183) *
              C47636 * C47618 * C111 +
          (((C31494 + C31493) * C114 + (C31492 + C31491) * C47821) * C16183 +
           ((C31444 * C120 + C31442 * C133 + C31445 * C812 + C47935 * C813) *
                C114 +
            (C31444 * C132 + C31442 * C141 + C31445 * C814 + C47935 * C815) *
                C47821) *
               C47902) *
              C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C47954 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C47942 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47915) *
              C299 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C47942 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C47954 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47915) *
              C300 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C47954 -
           (((C31445 * C982 + C47935 * C989 + C31444 * C325 + C31442 * C338) *
                 C47821 +
             (C31445 * C974 + C47935 * C983 + C31444 * C308 + C31442 * C324) *
                 C114) *
                C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C47942 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C114 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C47821) *
                C16183 +
            ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
               C47636 * C1126 -
           (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
            ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                 C47821 +
             (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                 C114) *
                C16183) *
               C47636 * C1127 +
           (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                 C114 +
             (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                 C47821) *
                C16183 +
            ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
               C47636 * C47915) *
              C47951 +
          ((((C31676 + C31675) * C114 + (C31674 + C31673) * C47821) * C16183 +
            ((C31681 + C31682) * C114 + (C31683 + C31684) * C47821) * C47902) *
               C47636 * C1127 -
           (((C31483 + C31484) * C47821 + (C31485 + C31486) * C114) * C47902 +
            ((C31482 + C31481) * C47821 + (C31480 + C31479) * C114) * C16183) *
               C47636 * C1126 -
           (((C31685 + C31686) * C47821 + (C31687 + C31688) * C114) * C47902 +
            ((C31680 + C31679) * C47821 + (C31678 + C31677) * C114) * C16183) *
               C47636 * C47915) *
              C47938 +
          ((((C31486 + C31485) * C114 + (C31484 + C31483) * C47821) * C16183 +
            ((C31487 + C31488) * C114 + (C31489 + C31490) * C47821) * C47902) *
               C47636 * C1126 -
           (((C32021 + C32022) * C47821 + (C32023 + C32024) * C114) * C47902 +
            ((C31684 + C31683) * C47821 + (C31682 + C31681) * C114) * C16183) *
               C47636 * C1127 +
           (((C31688 + C31687) * C114 + (C31686 + C31685) * C47821) * C16183 +
            ((C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                 C114 +
             (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                 C47821) *
                C47902) *
               C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C114 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C47821) *
               C16183 +
           ((C31479 + C31480) * C114 + (C31481 + C31482) * C47821) * C47902) *
              C47636 * C1194 -
          (((C31673 + C31674) * C47821 + (C31675 + C31676) * C114) * C47902 +
           ((C31445 * C977 + C47935 * C986 + C31444 * C316 + C31442 * C334) *
                C47821 +
            (C31445 * C971 + C47935 * C976 + C31444 * C304 + C31442 * C317) *
                C114) *
               C16183) *
              C47636 * C1195 +
          (((C31444 * C305 + C31442 * C318 + C31445 * C1339 + C47935 * C1354) *
                C114 +
            (C31444 * C319 + C31442 * C335 + C31445 * C1353 + C47935 * C1366) *
                C47821) *
               C16183 +
           ((C31677 + C31678) * C114 + (C31679 + C31680) * C47821) * C47902) *
              C47636 * C1196 -
          (((C31445 * C1764 + C47935 * C1768 + C31444 * C1208 +
             C31442 * C1219) *
                C47821 +
            (C31445 * C1759 + C47935 * C1763 + C31444 * C1201 +
             C31442 * C1209) *
                C114) *
               C47902 +
           ((C31445 * C1762 + C47935 * C1767 + C31444 * C1210 +
             C31442 * C1220) *
                C47821 +
            (C31445 * C1758 + C47935 * C1761 + C31444 * C1202 +
             C31442 * C1211) *
                C114) *
               C16183) *
              C47636 * C1197 +
          (((C31444 * C1203 + C31442 * C1212 + C31445 * C6557 +
             C47935 * C6559) *
                C114 +
            (C31444 * C1213 + C31442 * C1221 + C31445 * C6560 +
             C47935 * C6563) *
                C47821) *
               C16183 +
           ((C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C114 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47821) *
               C47902) *
              C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47677 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47684 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47636 * C2948) *
              C47595 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47684 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47677 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C2948) *
              C47604 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C47677 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47684 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47884 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C47677 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47884) *
               C47684 +
           (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
             (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
                C47567 * C47884 -
            ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
             (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
                C47567 * C47723) *
               C2948) *
              C2688 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47884) *
               C47677 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47884 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47684 +
           (((C33106 + C33105) * C4827 + (C33104 + C33103) * C4823 +
             (C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C4828 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
             (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
                C47567 * C47884) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47961 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47957 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47636 * C47947 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C47636 * C47925) *
              C2688 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47957 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47961 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47947 +
           ((C32900 + C32899) * C4827 + (C32898 + C32897) * C4823 +
            (C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C4828 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C2580 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47681) *
              C47960 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47681 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C2580) *
              C47953 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C2580 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47681) *
              C47940 +
          (((C32024 + C32023) * C4827 + (C32022 + C32021) * C4823 +
            (C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                C4828 +
            (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47955 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47944 +
            ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C4827 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C4823 +
             (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
                C47567 * C47918) *
               C2580 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47944 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47955 -
            ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
             (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
                C47567 * C47918) *
               C47681) *
              C2688 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47944 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47955 -
            ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
             (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
                C47567 * C47918) *
               C2580 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47955 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47944 +
            ((C33816 + C33815) * C4827 + (C33814 + C33813) * C4823 +
             (C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C4828 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47884 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C2580 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47884) *
               C47681) *
              C47595 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47884) *
               C2580 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47884 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47681) *
              C47604 +
          ((((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
             (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                C47567 * C47884 -
            ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
             (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
                C47567 * C47723) *
               C2580 +
           (((C32384 + C32383) * C4827 + (C32382 + C32381) * C4823 +
             (C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
              C47935 * C1359) *
                 C4828 +
             (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
             (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
                C47567 * C47884) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C2580 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47681) *
              C47960 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47681 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C2580) *
              C47953 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C2580 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47681) *
              C47940 +
          (((C32024 + C32023) * C4827 + (C32022 + C32021) * C4823 +
            (C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                C4828 +
            (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C47636 * C2580) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47961 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47957 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47636 * C47947 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C47636 * C47925) *
              C2688 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47957 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47961 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47947 +
           ((C32900 + C32899) * C4827 + (C32898 + C32897) * C4823 +
            (C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C4828 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C3342 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C47677 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C3342) *
               C47684 +
           (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
             (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
                C47567 * C3342 -
            ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
             (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
                C47567 * C47723) *
               C2948) *
              C47869 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C3342) *
               C47677 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C3342 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47684 +
           (((C33106 + C33105) * C4827 + (C33104 + C33103) * C4823 +
             (C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C4828 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
             (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
                C47567 * C3342) *
               C2948) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47719 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47726 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C3850) *
              C47677 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47726 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47719 -
           ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
            (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
               C47567 * C3850) *
              C47684 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47719 -
           ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C47726 +
           ((C38350 + C38349) * C4827 + (C38348 + C38347) * C4823 +
            (C31444 * C6057 + C31442 * C6059 + C31445 * C23546 +
             C47935 * C23547) *
                C4828 +
            (C31444 * C6060 + C31442 * C6063 + C31445 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C3850) *
              C2948) *
         C47590) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C3342 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C47961 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47723 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C3342) *
              C47957 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C3342 -
           ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C47723) *
              C47947 +
          (((C38816 + C38815) * C4827 + (C38814 + C38813) * C4823 +
            (C31444 * C6557 + C31442 * C6559 + C31445 * C22556 +
             C47935 * C22557) *
                C4828 +
            (C31444 * C6560 + C31442 * C6563 + C31445 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C3342 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C2580 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C3342) *
               C47681) *
              C47951 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C3342) *
               C2580 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C3342 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47681) *
              C47938 +
          ((((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
             (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                C47567 * C3342 -
            ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
             (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
                C47567 * C47723) *
               C2580 +
           (((C32384 + C32383) * C4827 + (C32382 + C32381) * C4823 +
             (C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
              C47935 * C1359) *
                 C4828 +
             (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
             (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
                C47567 * C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47962 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47959 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47950 -
           ((C39653 + C39654) * C47933 + (C39655 + C39656) * C4828 +
            (C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
             C31442 * C2080) *
                C4823 +
            (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
             C31442 * C2071) *
                C4827) *
               C47567 * C47931) *
              C2580 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47959 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47962 -
           ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
            (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
               C47567 * C47950 +
           ((C39656 + C39655) * C4827 + (C39654 + C39653) * C4823 +
            (C31444 * C7421 + C31442 * C7423 + C31445 * C23200 +
             C47935 * C23201) *
                C4828 +
            (C31444 * C7424 + C31442 * C7427 + C31445 * C23202 +
             C47935 * C23203) *
                C47933) *
               C47567 * C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47719 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47726 +
            ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C4827 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C4823 +
             (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
                C47567 * C3850) *
               C2580 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47726 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47719 -
            ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
             (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
                C47567 * C3850) *
               C47681) *
              C47869 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47726 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47719 -
            ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
             (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
                C47567 * C3850) *
               C2580 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47719 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47726 +
            ((C33816 + C33815) * C4827 + (C33814 + C33813) * C4823 +
             (C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C4828 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C3342 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C2580 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C3342) *
               C47681) *
              C47951 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C3342) *
               C2580 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C3342 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47681) *
              C47938 +
          ((((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
             (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                C47567 * C3342 -
            ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
             (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
                C47567 * C47723) *
               C2580 +
           (((C32384 + C32383) * C4827 + (C32382 + C32381) * C4823 +
             (C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
              C47935 * C1359) *
                 C4828 +
             (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
             (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
                C47567 * C3342) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C3342 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C47961 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47723 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C3342) *
              C47957 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C3342 -
           ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C47723) *
              C47947 +
          (((C38816 + C38815) * C4827 + (C38814 + C38813) * C4823 +
            (C31444 * C6557 + C31442 * C6559 + C31445 * C22556 +
             C47935 * C22557) *
                C4828 +
            (C31444 * C6560 + C31442 * C6563 + C31445 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C3342) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C1468 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C1469 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47636 * C1470 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C47636 * C47925) *
              C47869 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C1469 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C1468 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C1470 +
           ((C32900 + C32899) * C4827 + (C32898 + C32897) * C4823 +
            (C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C4828 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47883 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47681) *
              C695 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47681 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47883) *
              C696 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C47883 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47681) *
              C697 +
          (((C32024 + C32023) * C4827 + (C32022 + C32021) * C4823 +
            (C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                C4828 +
            (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C1880 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C1881 +
            ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C4827 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C4823 +
             (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
                C47567 * C47918) *
               C47883 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C1881 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C1880 -
            ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
             (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
                C47567 * C47918) *
               C47681) *
              C47869 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C1881 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C1880 -
            ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
             (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
                C47567 * C47918) *
               C47883 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C1880 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C1881 +
            ((C33816 + C33815) * C4827 + (C33814 + C33813) * C4823 +
             (C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C4828 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C47918) *
               C47681) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47884 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C1468 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47723 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47884) *
              C1469 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47884 -
           ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C47723) *
              C1470 +
          (((C38816 + C38815) * C4827 + (C38814 + C38813) * C4823 +
            (C31444 * C6557 + C31442 * C6559 + C31445 * C22556 +
             C47935 * C22557) *
                C4828 +
            (C31444 * C6560 + C31442 * C6563 + C31445 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47884 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C47883 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C31444 * C1339 + C31442 * C1354 + C31445 * C1340 +
              C47935 * C1355) *
                 C4828 +
             (C31444 * C1353 + C31442 * C1366 + C31445 * C1356 +
              C47935 * C1367) *
                 C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47884) *
               C47681) *
              C299 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47884) *
               C47883 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47884 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47681) *
              C300 +
          ((((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
             (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                C47567 * C47884 -
            ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
             (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
                C47567 * C47723) *
               C47883 +
           (((C32384 + C32383) * C4827 + (C32382 + C32381) * C4823 +
             (C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
              C47935 * C1359) *
                 C4828 +
             (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
             (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
                C47567 * C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C2348 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C2349 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C2350 -
           ((C39653 + C39654) * C47933 + (C39655 + C39656) * C4828 +
            (C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
             C31442 * C2080) *
                C4823 +
            (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
             C31442 * C2071) *
                C4827) *
               C47567 * C47931) *
              C47883 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C2349 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C2348 -
           ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
            (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
               C47567 * C2350 +
           ((C39656 + C39655) * C4827 + (C39654 + C39653) * C4823 +
            (C31444 * C7421 + C31442 * C7423 + C31445 * C23200 +
             C47935 * C23201) *
                C4828 +
            (C31444 * C7424 + C31442 * C7427 + C31445 * C23202 +
             C47935 * C23203) *
                C47933) *
               C47567 * C47931) *
              C47681) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                   C4827 +
               (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                   C4823 +
               (C31444 * C304 + C31442 * C317 + C31445 * C971 + C47935 * C976) *
                   C4828 +
               (C31444 * C316 + C31442 * C334 + C31445 * C977 + C47935 * C986) *
                   C47933) *
                  C47567 * C47636 * C47618 * C108 -
              ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
               (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                  C47567 * C47636 * C47618 * C109 +
              ((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
               (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                  C47567 * C47636 * C47618 * C110 -
              ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
               (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
                  C47567 * C47636 * C47618 * C111 +
              ((C31494 + C31493) * C4827 + (C31492 + C31491) * C4823 +
               (C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
                   C4828 +
               (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
                   C47933) *
                  C47567 * C47636 * C47618 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31444 * C115 + C31442 * C122 + C31445 * C507 +
                 C47935 * C520) *
                    C4827 +
                (C31444 * C123 + C31442 * C136 + C31445 * C519 +
                 C47935 * C537) *
                    C4823 +
                (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                   C47567 * C47636 * C47954 -
               ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
                (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                   C47567 * C47636 * C47942 +
               ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
                (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
                 C47935 * C1761) *
                    C4828 +
                (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
                 C47935 * C1767) *
                    C47933) *
                   C47567 * C47636 * C47915) *
                  C299 +
              (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
                (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                   C47567 * C47636 * C47942 -
               ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
                (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                   C47567 * C47636 * C47954 -
               ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
                (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
                   C47567 * C47636 * C47915) *
                  C300 +
              (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
                (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                   C47567 * C47636 * C47954 -
               ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
                (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
                   C47567 * C47636 * C47942 +
               ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
                (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
                 C47935 * C1765) *
                    C4828 +
                (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
                 C47935 * C1769) *
                    C47933) *
                   C47567 * C47636 * C47915) *
                  C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47955 -
           ((C31445 * C1347 + C47935 * C1363 + C31444 * C977 + C31442 * C986) *
                C47933 +
            (C31445 * C1336 + C47935 * C1348 + C31444 * C971 + C31442 * C976) *
                C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47944 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C31444 * C1336 + C31442 * C1348 + C31445 * C2470 +
             C47935 * C2473) *
                C4828 +
            (C31444 * C1347 + C31442 * C1363 + C31445 * C2474 +
             C47935 * C2479) *
                C47933) *
               C47567 * C47918) *
              C47618 * C299 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47944 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47955 -
           ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
            (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
               C47567 * C47918) *
              C47618 * C300 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47955 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C47944 +
           ((C31882 + C31881) * C4827 + (C31880 + C31879) * C4823 +
            (C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
             C47935 * C2477) *
                C4828 +
            (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C1126 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C1127 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
             C47935 * C1761) *
                C4828 +
            (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C1127 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C1126 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C1126 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C1127 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
              C47567 * C47636 * C1194 -
          ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
           (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
              C47567 * C47636 * C1195 +
          ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
           (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
              C47567 * C47636 * C1196 -
          ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
           (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
              C47567 * C47636 * C1197 +
          ((C38168 + C38167) * C4827 + (C38166 + C38165) * C4823 +
           (C31444 * C5885 + C31442 * C5887 + C31445 * C22908 +
            C47935 * C22909) *
               C4828 +
           (C31444 * C5888 + C31442 * C5891 + C31445 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47955 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47944 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47918) *
              C1126 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47944 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47955 -
           ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
            (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
               C47567 * C47918) *
              C1127 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47955 -
           ((C31445 * C6060 + C47935 * C6063 + C31444 * C1762 +
             C31442 * C1767) *
                C47933 +
            (C31445 * C6057 + C47935 * C6059 + C31444 * C1758 +
             C31442 * C1761) *
                C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C47944 +
           ((C38350 + C38349) * C4827 + (C38348 + C38347) * C4823 +
            (C31444 * C6057 + C31442 * C6059 + C31445 * C23546 +
             C47935 * C23547) *
                C4828 +
            (C31444 * C6060 + C31442 * C6063 + C31445 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C1880 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C1881 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47918) *
              C47618 * C47951 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C1881 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C1880 -
           ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
            (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
               C47567 * C47918) *
              C47618 * C47938 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C1880 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C1881 +
           ((C31882 + C31881) * C4827 + (C31880 + C31879) * C4823 +
            (C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
             C47935 * C2477) *
                C4828 +
            (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C1880 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C1881 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47918) *
              C47954 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C1881 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C1880 -
           ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
            (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
               C47567 * C47918) *
              C47942 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C1880 -
           ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C1881 +
           ((C38350 + C38349) * C4827 + (C38348 + C38347) * C4823 +
            (C31444 * C6057 + C31442 * C6059 + C31445 * C23546 +
             C47935 * C23547) *
                C4828 +
            (C31444 * C6060 + C31442 * C6063 + C31445 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
              C47567 * C2055 -
          ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
           (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
               C4823 +
           (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
               C4827) *
              C47567 * C2056 +
          ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
               C4827 +
           (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
               C4823 +
           (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
              C47567 * C2057 -
          ((C31445 * C6948 + C47935 * C6951 + C31444 * C2474 + C31442 * C2479) *
               C47933 +
           (C31445 * C6945 + C47935 * C6947 + C31444 * C2470 + C31442 * C2473) *
               C4828 +
           (C31445 * C2073 + C47935 * C2081 + C31444 * C2070 + C31442 * C2080) *
               C4823 +
           (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 + C31442 * C2071) *
               C4827) *
              C47567 * C2058 +
          ((C31444 * C2063 + C31442 * C2072 + C31445 * C12649 +
            C47935 * C12651) *
               C4827 +
           (C31444 * C2073 + C31442 * C2081 + C31445 * C12652 +
            C47935 * C12655) *
               C4823 +
           (C31444 * C6945 + C31442 * C6947 + C31445 * C27926 +
            C47935 * C27927) *
               C4828 +
           (C31444 * C6948 + C31442 * C6951 + C31445 * C27928 +
            C47935 * C27929) *
               C47933) *
              C47567 * C2059) *
         C47618 * C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47884 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C1126 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47884) *
               C1127 +
           (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
             (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
                C47567 * C47884 -
            ((C31445 * C6060 + C47935 * C6063 + C31444 * C1762 +
              C31442 * C1767) *
                 C47933 +
             (C31445 * C6057 + C47935 * C6059 + C31444 * C1758 +
              C31442 * C1761) *
                 C4828 +
             (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
                C47567 * C47723) *
               C47915) *
              C47869 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47884) *
               C1126 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47884 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C1127 +
           (((C33106 + C33105) * C4827 + (C33104 + C33103) * C4823 +
             (C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C4828 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
             (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
                C47567 * C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47884 -
           ((C31445 * C1347 + C47935 * C1363 + C31444 * C977 + C31442 * C986) *
                C47933 +
            (C31445 * C1336 + C47935 * C1348 + C31444 * C971 + C31442 * C976) *
                C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C47618 * C695 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47723 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47884) *
              C47618 * C696 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47884 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C47723) *
              C47618 * C697 +
          (((C32166 + C32165) * C4827 + (C32164 + C32163) * C4823 +
            (C31444 * C974 + C31442 * C983 + C31445 * C2230 + C47935 * C2231) *
                C4828 +
            (C31444 * C982 + C31442 * C989 + C31445 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C2348 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C2349 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C2350 -
           ((C31445 * C6948 + C47935 * C6951 + C31444 * C2474 +
             C31442 * C2479) *
                C47933 +
            (C31445 * C6945 + C47935 * C6947 + C31444 * C2470 +
             C31442 * C2473) *
                C4828 +
            (C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
             C31442 * C2080) *
                C4823 +
            (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
             C31442 * C2071) *
                C4827) *
               C47567 * C47931) *
              C47618 * C47869 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C2349 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C2348 -
           ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
            (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
               C47567 * C2350 +
           ((C33958 + C33957) * C4827 + (C33956 + C33955) * C4823 +
            (C31444 * C2471 + C31442 * C2475 + C31445 * C6946 +
             C47935 * C6949) *
                C4828 +
            (C31444 * C2476 + C31442 * C2480 + C31445 * C6950 +
             C47935 * C6952) *
                C47933) *
               C47567 * C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47954 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47942 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
             C47935 * C1761) *
                C4828 +
            (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C299 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47942 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47954 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47915) *
              C300 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C47954 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47942 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C31444 * C304 + C31442 * C317 + C31445 * C971 + C47935 * C976) *
               C4828 +
           (C31444 * C316 + C31442 * C334 + C31445 * C977 + C47935 * C986) *
               C47933) *
              C47567 * C47636 * C47618 * C108 -
          ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
           (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
              C47567 * C47636 * C47618 * C109 +
          ((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
           (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
              C47567 * C47636 * C47618 * C110 -
          ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
           (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
              C47567 * C47636 * C47618 * C111 +
          ((C31494 + C31493) * C4827 + (C31492 + C31491) * C4823 +
           (C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
               C4828 +
           (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
               C47933) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C1126 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C1127 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
             C47935 * C1761) *
                C4828 +
            (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C1127 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C1126 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C1126 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C1127 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
              C47567 * C47636 * C1194 -
          ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
           (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
              C47567 * C47636 * C1195 +
          ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
           (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
              C47567 * C47636 * C1196 -
          ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
           (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
              C47567 * C47636 * C1197 +
          ((C38168 + C38167) * C4827 + (C38166 + C38165) * C4823 +
           (C31444 * C5885 + C31442 * C5887 + C31445 * C22908 +
            C47935 * C22909) *
               C4828 +
           (C31444 * C5888 + C31442 * C5891 + C31445 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C1880 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C1881 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47918) *
              C47618 * C47951 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C1881 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C1880 -
           ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
            (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
               C47567 * C47918) *
              C47618 * C47938 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C1880 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C1881 +
           ((C31882 + C31881) * C4827 + (C31880 + C31879) * C4823 +
            (C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
             C47935 * C2477) *
                C4828 +
            (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C1880 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C1881 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47918) *
              C47954 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C1881 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C1880 -
           ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
            (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
               C47567 * C47918) *
              C47942 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C1880 -
           ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C1881 +
           ((C38350 + C38349) * C4827 + (C38348 + C38347) * C4823 +
            (C31444 * C6057 + C31442 * C6059 + C31445 * C23546 +
             C47935 * C23547) *
                C4828 +
            (C31444 * C6060 + C31442 * C6063 + C31445 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C3342 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C47883 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C3342) *
               C47681) *
              C47595 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C3342) *
               C47883 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C3342 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47681) *
              C47604 +
          ((((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
             (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                C47567 * C3342 -
            ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
             (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
                C47567 * C47723) *
               C47883 +
           (((C32384 + C32383) * C4827 + (C32382 + C32381) * C4823 +
             (C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
              C47935 * C1359) *
                 C4828 +
             (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
             (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
                C47567 * C3342) *
               C47681) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47719 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47726 +
            ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                 C4827 +
             (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                 C4823 +
             (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
                C47567 * C3850) *
               C47883 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47726 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47719 -
            ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
             (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
                C47567 * C3850) *
               C47681) *
              C2688 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47726 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47719 -
            ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
             (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
                C47567 * C3850) *
               C47883 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47719 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47726 +
            ((C33816 + C33815) * C4827 + (C33814 + C33813) * C4823 +
             (C31444 * C1341 + C31442 * C1357 + C31445 * C7422 +
              C47935 * C7425) *
                 C4828 +
             (C31444 * C1358 + C31442 * C1368 + C31445 * C7426 +
              C47935 * C7428) *
                 C47933) *
                C47567 * C3850) *
               C47681) *
              C47601)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C3342 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C47954 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C3342) *
               C47942 +
           (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
             (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
                C47567 * C3342 -
            ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
             (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
                C47567 * C47723) *
               C47915) *
              C2688 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C3342) *
               C47954 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C3342 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47942 +
           (((C33106 + C33105) * C4827 + (C33104 + C33103) * C4823 +
             (C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C4828 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
             (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
                C47567 * C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C3342 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C47618 * C47960 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47723 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C3342) *
              C47618 * C47953 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C3342 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C47723) *
              C47618 * C47940 +
          (((C32166 + C32165) * C4827 + (C32164 + C32163) * C4823 +
            (C31444 * C974 + C31442 * C983 + C31445 * C2230 + C47935 * C2231) *
                C4828 +
            (C31444 * C982 + C31442 * C989 + C31445 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47962 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47959 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47950 -
           ((C39653 + C39654) * C47933 + (C39655 + C39656) * C4828 +
            (C31445 * C2073 + C47935 * C2081 + C31444 * C2070 +
             C31442 * C2080) *
                C4823 +
            (C31445 * C2063 + C47935 * C2072 + C31444 * C2062 +
             C31442 * C2071) *
                C4827) *
               C47567 * C47931) *
              C47618 * C2688 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47959 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47962 -
           ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
            (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
               C47567 * C47950 +
           ((C33958 + C33957) * C4827 + (C33956 + C33955) * C4823 +
            (C31444 * C2471 + C31442 * C2475 + C31445 * C6946 +
             C47935 * C6949) *
                C4828 +
            (C31444 * C2476 + C31442 * C2480 + C31445 * C6950 +
             C47935 * C6952) *
                C47933) *
               C47567 * C47931) *
              C47618 * C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47719 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47726 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C3850) *
              C47618 * C47595 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47726 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47719 -
           ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
            (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
               C47567 * C3850) *
              C47618 * C47604 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47719 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C47726 +
           ((C31882 + C31881) * C4827 + (C31880 + C31879) * C4823 +
            (C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
             C47935 * C2477) *
                C4828 +
            (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C3850) *
              C47618 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C3342 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C47618 * C47960 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47723 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C3342) *
              C47618 * C47953 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C3342 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C47723) *
              C47618 * C47940 +
          (((C32166 + C32165) * C4827 + (C32164 + C32163) * C4823 +
            (C31444 * C974 + C31442 * C983 + C31445 * C2230 + C47935 * C2231) *
                C4828 +
            (C31444 * C982 + C31442 * C989 + C31445 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C3342) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C3342 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C47954 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C3342) *
               C47942 +
           (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
             (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
                C47567 * C3342 -
            ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
             (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
                C47567 * C47723) *
               C47915) *
              C2688 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C3342) *
               C47954 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C3342 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47942 +
           (((C33106 + C33105) * C4827 + (C33104 + C33103) * C4823 +
             (C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C4828 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
             (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
                C47567 * C3342) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47883 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47681) *
              C695 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47681 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47883) *
              C696 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C47883 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47681) *
              C697 +
          (((C32024 + C32023) * C4827 + (C32022 + C32021) * C4823 +
            (C31444 * C309 + C31442 * C327 + C31445 * C1640 + C47935 * C1641) *
                C4828 +
            (C31444 * C326 + C31442 * C339 + C31445 * C1642 + C47935 * C1643) *
                C47933) *
               C47567 * C47636 * C47681 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C47636 * C47883) *
              C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C1468 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C1469 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47636 * C1470 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C47636 * C47925) *
              C47869 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C1469 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C1468 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C1470 +
           ((C32900 + C32899) * C4827 + (C32898 + C32897) * C4823 +
            (C31444 * C1204 + C31442 * C1214 + C31445 * C6558 +
             C47935 * C6561) *
                C4828 +
            (C31444 * C1215 + C31442 * C1222 + C31445 * C6562 +
             C47935 * C6564) *
                C47933) *
               C47567 * C47636 * C47925) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47884 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C47883 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C31444 * C1339 + C31442 * C1354 + C31445 * C1340 +
              C47935 * C1355) *
                 C4828 +
             (C31444 * C1353 + C31442 * C1366 + C31445 * C1356 +
              C47935 * C1367) *
                 C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47884) *
               C47681) *
              C299 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47884) *
               C47883 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47884 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C47681) *
              C300 +
          ((((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
             (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
                C47567 * C47884 -
            ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
             (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
                C47567 * C47723) *
               C47883 +
           (((C32384 + C32383) * C4827 + (C32382 + C32381) * C4823 +
             (C31444 * C1337 + C31442 * C1350 + C31445 * C1342 +
              C47935 * C1359) *
                 C4828 +
             (C31444 * C1349 + C31442 * C1364 + C31445 * C1360 +
              C47935 * C1369) *
                 C47933) *
                C47567 * C47723 -
            ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
             (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
                C47567 * C47884) *
               C47681) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47884 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C1468 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47723 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47884) *
              C1469 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47884 -
           ((C38813 + C38814) * C47933 + (C38815 + C38816) * C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C47723) *
              C1470 +
          (((C38816 + C38815) * C4827 + (C38814 + C38813) * C4823 +
            (C31444 * C6557 + C31442 * C6559 + C31445 * C22556 +
             C47935 * C22557) *
                C4828 +
            (C31444 * C6560 + C31442 * C6563 + C31445 * C22558 +
             C47935 * C22559) *
                C47933) *
               C47567 * C47723 -
           ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
            (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
               C47567 * C47884) *
              C47925) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47954 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47942 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
             C47935 * C1761) *
                C4828 +
            (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C299 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47942 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47954 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47915) *
              C300 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C47954 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47942 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C31444 * C304 + C31442 * C317 + C31445 * C971 + C47935 * C976) *
               C4828 +
           (C31444 * C316 + C31442 * C334 + C31445 * C977 + C47935 * C986) *
               C47933) *
              C47567 * C47636 * C47618 * C108 -
          ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
           (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
              C47567 * C47636 * C47618 * C109 +
          ((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
           (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
              C47567 * C47636 * C47618 * C110 -
          ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
           (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
              C47567 * C47636 * C47618 * C111 +
          ((C31494 + C31493) * C4827 + (C31492 + C31491) * C4823 +
           (C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
               C4828 +
           (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
               C47933) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47955 -
           ((C31445 * C1347 + C47935 * C1363 + C31444 * C977 + C31442 * C986) *
                C47933 +
            (C31445 * C1336 + C47935 * C1348 + C31444 * C971 + C31442 * C976) *
                C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47944 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C31444 * C1336 + C31442 * C1348 + C31445 * C2470 +
             C47935 * C2473) *
                C4828 +
            (C31444 * C1347 + C31442 * C1363 + C31445 * C2474 +
             C47935 * C2479) *
                C47933) *
               C47567 * C47918) *
              C47618 * C299 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47944 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47955 -
           ((C33813 + C33814) * C47933 + (C33815 + C33816) * C4828 +
            (C31874 + C31873) * C4823 + (C31872 + C31871) * C4827) *
               C47567 * C47918) *
              C47618 * C300 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47955 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C47944 +
           ((C31882 + C31881) * C4827 + (C31880 + C31879) * C4823 +
            (C31444 * C1334 + C31442 * C1344 + C31445 * C2472 +
             C47935 * C2477) *
                C4828 +
            (C31444 * C1343 + C31442 * C1361 + C31445 * C2478 +
             C47935 * C2481) *
                C47933) *
               C47567 * C47918) *
              C47618 * C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C1126 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C1127 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
             C47935 * C1761) *
                C4828 +
            (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C1127 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C1126 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C1126 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C1127 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
              C47567 * C47636 * C1194 -
          ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
           (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
              C47567 * C47636 * C1195 +
          ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
           (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
              C47567 * C47636 * C1196 -
          ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
           (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
              C47567 * C47636 * C1197 +
          ((C38168 + C38167) * C4827 + (C38166 + C38165) * C4823 +
           (C31444 * C5885 + C31442 * C5887 + C31445 * C22908 +
            C47935 * C22909) *
               C4828 +
           (C31444 * C5888 + C31442 * C5891 + C31445 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47955 -
           ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47944 +
           ((C31444 * C508 + C31442 * C521 + C31445 * C2062 + C47935 * C2071) *
                C4827 +
            (C31444 * C522 + C31442 * C538 + C31445 * C2070 + C47935 * C2080) *
                C4823 +
            (C38339 + C38340) * C4828 + (C38341 + C38342) * C47933) *
               C47567 * C47918) *
              C1126 +
          (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
            (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
               C47567 * C47944 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47955 -
           ((C38347 + C38348) * C47933 + (C38349 + C38350) * C4828 +
            (C38342 + C38341) * C4823 + (C38340 + C38339) * C4827) *
               C47567 * C47918) *
              C1127 +
          (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
               C47567 * C47955 -
           ((C31445 * C6060 + C47935 * C6063 + C31444 * C1762 +
             C31442 * C1767) *
                C47933 +
            (C31445 * C6057 + C47935 * C6059 + C31444 * C1758 +
             C31442 * C1761) *
                C4828 +
            (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
               C47567 * C47944 +
           ((C38350 + C38349) * C4827 + (C38348 + C38347) * C4823 +
            (C31444 * C6057 + C31442 * C6059 + C31445 * C23546 +
             C47935 * C23547) *
                C4828 +
            (C31444 * C6060 + C31442 * C6063 + C31445 * C23548 +
             C47935 * C23549) *
                C47933) *
               C47567 * C47918) *
              C47915) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47884 -
           ((C31445 * C1347 + C47935 * C1363 + C31444 * C977 + C31442 * C986) *
                C47933 +
            (C31445 * C1336 + C47935 * C1348 + C31444 * C971 + C31442 * C976) *
                C4828 +
            (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                C4823 +
            (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                C4827) *
               C47567 * C47723) *
              C47618 * C695 +
          (((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
            (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
               C47567 * C47723 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47884) *
              C47618 * C696 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47884 -
           ((C32381 + C32382) * C47933 + (C32383 + C32384) * C4828 +
            (C31878 + C31877) * C4823 + (C31876 + C31875) * C4827) *
               C47567 * C47723) *
              C47618 * C697 +
          (((C32166 + C32165) * C4827 + (C32164 + C32163) * C4823 +
            (C31444 * C974 + C31442 * C983 + C31445 * C2230 + C47935 * C2231) *
                C4828 +
            (C31444 * C982 + C31442 * C989 + C31445 * C2232 + C47935 * C2233) *
                C47933) *
               C47567 * C47723 -
           ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
            (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
               C47567 * C47884) *
              C47618 * C47919)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                 C4827 +
             (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                 C4823 +
             (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
                C47567 * C47884 -
            ((C37913 + C37914) * C47933 + (C37915 + C37916) * C4828 +
             (C31445 * C522 + C47935 * C538 + C31444 * C519 + C31442 * C537) *
                 C4823 +
             (C31445 * C508 + C47935 * C521 + C31444 * C507 + C31442 * C520) *
                 C4827) *
                C47567 * C47723) *
               C1126 +
           (((C37916 + C37915) * C4827 + (C37914 + C37913) * C4823 +
             (C38343 + C38344) * C4828 + (C38345 + C38346) * C47933) *
                C47567 * C47723 -
            ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
             (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
                C47567 * C47884) *
               C1127 +
           (((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
             (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
                C47567 * C47884 -
            ((C31445 * C6060 + C47935 * C6063 + C31444 * C1762 +
              C31442 * C1767) *
                 C47933 +
             (C31445 * C6057 + C47935 * C6059 + C31444 * C1758 +
              C31442 * C1761) *
                 C4828 +
             (C38346 + C38345) * C4823 + (C38344 + C38343) * C4827) *
                C47567 * C47723) *
               C47915) *
              C47869 +
          ((((C31870 + C31869) * C4827 + (C31868 + C31867) * C4823 +
             (C32377 + C32378) * C4828 + (C32379 + C32380) * C47933) *
                C47567 * C47723 -
            ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
             (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
                C47567 * C47884) *
               C1126 +
           (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
             (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
                C47567 * C47884 -
            ((C33103 + C33104) * C47933 + (C33105 + C33106) * C4828 +
             (C32380 + C32379) * C4823 + (C32378 + C32377) * C4827) *
                C47567 * C47723) *
               C1127 +
           (((C33106 + C33105) * C4827 + (C33104 + C33103) * C4823 +
             (C31444 * C1759 + C31442 * C1763 + C31445 * C6058 +
              C47935 * C6061) *
                 C4828 +
             (C31444 * C1764 + C31442 * C1768 + C31445 * C6062 +
              C47935 * C6064) *
                 C47933) *
                C47567 * C47723 -
            ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
             (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
                C47567 * C47884) *
               C47915) *
              C47601)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C31444 * C304 + C31442 * C317 + C31445 * C971 + C47935 * C976) *
               C4828 +
           (C31444 * C316 + C31442 * C334 + C31445 * C977 + C47935 * C986) *
               C47933) *
              C47567 * C47636 * C47618 * C108 -
          ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
           (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
              C47567 * C47636 * C47618 * C109 +
          ((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
           (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
              C47567 * C47636 * C47618 * C110 -
          ((C32021 + C32022) * C47933 + (C32023 + C32024) * C4828 +
           (C31490 + C31489) * C4823 + (C31488 + C31487) * C4827) *
              C47567 * C47636 * C47618 * C111 +
          ((C31494 + C31493) * C4827 + (C31492 + C31491) * C4823 +
           (C31444 * C310 + C31442 * C329 + C31445 * C975 + C47935 * C984) *
               C4828 +
           (C31444 * C328 + C31442 * C340 + C31445 * C985 + C47935 * C990) *
               C47933) *
              C47567 * C47636 * C47618 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C47954 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C47942 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
             C47935 * C1761) *
                C4828 +
            (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C299 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C47942 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C47954 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47915) *
              C300 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C47954 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C47942 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
                C4827 +
            (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
                C4823 +
            (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
               C47567 * C47636 * C1126 -
           ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
            (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
               C47567 * C47636 * C1127 +
           ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
            (C31444 * C1202 + C31442 * C1211 + C31445 * C1758 +
             C47935 * C1761) *
                C4828 +
            (C31444 * C1210 + C31442 * C1220 + C31445 * C1762 +
             C47935 * C1767) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47951 +
          (((C31676 + C31675) * C4827 + (C31674 + C31673) * C4823 +
            (C31677 + C31678) * C4828 + (C31679 + C31680) * C47933) *
               C47567 * C47636 * C1127 -
           ((C31673 + C31674) * C47933 + (C31675 + C31676) * C4828 +
            (C31482 + C31481) * C4823 + (C31480 + C31479) * C4827) *
               C47567 * C47636 * C1126 -
           ((C32897 + C32898) * C47933 + (C32899 + C32900) * C4828 +
            (C31680 + C31679) * C4823 + (C31678 + C31677) * C4827) *
               C47567 * C47636 * C47915) *
              C47938 +
          (((C31486 + C31485) * C4827 + (C31484 + C31483) * C4823 +
            (C31681 + C31682) * C4828 + (C31683 + C31684) * C47933) *
               C47567 * C47636 * C1126 -
           ((C31685 + C31686) * C47933 + (C31687 + C31688) * C4828 +
            (C31684 + C31683) * C4823 + (C31682 + C31681) * C4827) *
               C47567 * C47636 * C1127 +
           ((C31688 + C31687) * C4827 + (C31686 + C31685) * C4823 +
            (C31444 * C1200 + C31442 * C1207 + C31445 * C1760 +
             C47935 * C1765) *
                C4828 +
            (C31444 * C1206 + C31442 * C1218 + C31445 * C1766 +
             C47935 * C1769) *
                C47933) *
               C47567 * C47636 * C47915) *
              C47909)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31444 * C115 + C31442 * C122 + C31445 * C507 + C47935 * C520) *
               C4827 +
           (C31444 * C123 + C31442 * C136 + C31445 * C519 + C47935 * C537) *
               C4823 +
           (C37297 + C37298) * C4828 + (C37299 + C37300) * C47933) *
              C47567 * C47636 * C1194 -
          ((C37301 + C37302) * C47933 + (C37303 + C37304) * C4828 +
           (C37300 + C37299) * C4823 + (C37298 + C37297) * C4827) *
              C47567 * C47636 * C1195 +
          ((C37304 + C37303) * C4827 + (C37302 + C37301) * C4823 +
           (C38161 + C38162) * C4828 + (C38163 + C38164) * C47933) *
              C47567 * C47636 * C1196 -
          ((C38165 + C38166) * C47933 + (C38167 + C38168) * C4828 +
           (C38164 + C38163) * C4823 + (C38162 + C38161) * C4827) *
              C47567 * C47636 * C1197 +
          ((C38168 + C38167) * C4827 + (C38166 + C38165) * C4823 +
           (C31444 * C5885 + C31442 * C5887 + C31445 * C22908 +
            C47935 * C22909) *
               C4828 +
           (C31444 * C5888 + C31442 * C5891 + C31445 * C22910 +
            C47935 * C22911) *
               C47933) *
              C47567 * C47636 * C1198) *
         C47590) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47677 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47684 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C2948) *
                       C47595 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47684 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47677 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C2948) *
                       C47604 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C47677 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47684 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C2948) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C47677 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47884) *
                        C47684 +
                    (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                       C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                          C114 +
                      (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                       C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                       C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                          C47821 +
                      (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                       C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                          C114) *
                         C47567 * C47723) *
                        C2948) *
                       C2688 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47884) *
                        C47677 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47684 +
                    (((C42685 * C1338 + C42682 * C1352 + C42686 * C1341 +
                       C42683 * C1357 + C42687 * C7422 + C42684 * C7425) *
                          C114 +
                      (C42685 * C1351 + C42682 * C1365 + C42686 * C1358 +
                       C42683 * C1368 + C42687 * C7426 + C42684 * C7428) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                       C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                          C47821 +
                      (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                       C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                          C114) *
                         C47567 * C47884) *
                        C2948) *
                       C47601)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47961 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47957 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47947 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C47636 * C47925) *
                       C2688 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47957 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47961 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47947 +
                    ((C42685 * C1201 + C42682 * C1209 + C42686 * C1759 +
                      C42683 * C1763 + C42687 * C6058 + C42684 * C6061) *
                         C114 +
                     (C42685 * C1208 + C42682 * C1219 + C42686 * C1764 +
                      C42683 * C1768 + C42687 * C6062 + C42684 * C6064) *
                         C47821) *
                        C47567 * C47636 * C47925) *
                       C47601)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C2580 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C47960 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C2580) *
                       C47953 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C2580 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C47940 +
                   (((C42685 * C308 + C42682 * C324 + C42686 * C974 +
                      C42683 * C983 + C42687 * C2230 + C42684 * C2231) *
                         C114 +
                     (C42685 * C325 + C42682 * C338 + C42686 * C982 +
                      C42683 * C989 + C42687 * C2232 + C42684 * C2233) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C47636 * C2580) *
                       C47919)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47955 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47944 +
                     ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                       C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                          C114 +
                      (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                       C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                          C47821) *
                         C47567 * C47918) *
                        C2580 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47944 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47955 -
                     ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                       C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                          C47821 +
                      (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                       C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                          C114) *
                         C47567 * C47918) *
                        C47681) *
                       C2688 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47944 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47955 -
                     ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                       C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                          C47821 +
                      (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                       C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                          C114) *
                         C47567 * C47918) *
                        C2580 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47955 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47944 +
                     ((C42685 * C1335 + C42682 * C1346 + C42686 * C2471 +
                       C42683 * C2475 + C42687 * C6946 + C42684 * C6949) *
                          C114 +
                      (C42685 * C1345 + C42682 * C1362 + C42686 * C2476 +
                       C42683 * C2480 + C42687 * C6950 + C42684 * C6952) *
                          C47821) *
                         C47567 * C47918) *
                        C47681) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C2580 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47884) *
                        C47681) *
                       C47595 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47884) *
                        C2580 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47681) *
                       C47604 +
                   ((((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                       C42683 * C516 + C42687 * C510 + C42684 * C525) *
                          C114 +
                      (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                       C42683 * C535 + C42687 * C526 + C42684 * C540) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                       C42683 * C540 + C42685 * C515 + C42682 * C535) *
                          C47821 +
                      (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                       C42683 * C525 + C42685 * C505 + C42682 * C516) *
                          C114) *
                         C47567 * C47723) *
                        C2580 +
                    (((C42685 * C973 + C42682 * C980 + C42686 * C1334 +
                       C42683 * C1344 + C42687 * C2472 + C42684 * C2477) *
                          C114 +
                      (C42685 * C981 + C42682 * C988 + C42686 * C1343 +
                       C42683 * C1361 + C42687 * C2478 + C42684 * C2481) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                       C42683 * C988 + C42685 * C312 + C42682 * C332) *
                          C47821 +
                      (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                       C42683 * C980 + C42685 * C302 + C42682 * C313) *
                          C114) *
                         C47567 * C47884) *
                        C47681) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C2580 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C47960 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C2580) *
                       C47953 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C2580 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C47940 +
                   (((C42685 * C308 + C42682 * C324 + C42686 * C974 +
                      C42683 * C983 + C42687 * C2230 + C42684 * C2231) *
                         C114 +
                     (C42685 * C325 + C42682 * C338 + C42686 * C982 +
                      C42683 * C989 + C42687 * C2232 + C42684 * C2233) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C47636 * C2580) *
                       C47919)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47961 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47957 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47947 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C47636 * C47925) *
                       C2688 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47957 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47961 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47947 +
                    ((C42685 * C1201 + C42682 * C1209 + C42686 * C1759 +
                      C42683 * C1763 + C42687 * C6058 + C42684 * C6061) *
                         C114 +
                     (C42685 * C1208 + C42682 * C1219 + C42686 * C1764 +
                      C42683 * C1768 + C42687 * C6062 + C42684 * C6064) *
                         C47821) *
                        C47567 * C47636 * C47925) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C47677 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C3342) *
                        C47684 +
                    (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                       C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                          C114 +
                      (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                       C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                       C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                          C47821 +
                      (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                       C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                          C114) *
                         C47567 * C47723) *
                        C2948) *
                       C47869 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C3342) *
                        C47677 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47684 +
                    (((C42685 * C1338 + C42682 * C1352 + C42686 * C1341 +
                       C42683 * C1357 + C42687 * C7422 + C42684 * C7425) *
                          C114 +
                      (C42685 * C1351 + C42682 * C1365 + C42686 * C1358 +
                       C42683 * C1368 + C42687 * C7426 + C42684 * C7428) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                       C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                          C47821 +
                      (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                       C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                          C114) *
                         C47567 * C3342) *
                        C2948) *
                       C47601)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47719 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47726 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C3850) *
                       C47677 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47726 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47719 -
                    ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                      C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                         C47821 +
                     (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                      C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                         C114) *
                        C47567 * C3850) *
                       C47684 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47719 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C47726 +
                    ((C42685 * C1340 + C42682 * C1355 + C42686 * C7421 +
                      C42683 * C7423 + C42687 * C23200 + C42684 * C23201) *
                         C114 +
                     (C42685 * C1356 + C42682 * C1367 + C42686 * C7424 +
                      C42683 * C7427 + C42687 * C23202 + C42684 * C23203) *
                         C47821) *
                        C47567 * C3850) *
                       C2948) *
                  C47590) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C47961 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C3342) *
                       C47957 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C47723) *
                       C47947 +
                   (((C42685 * C1758 + C42682 * C1761 + C42686 * C6057 +
                      C42683 * C6059 + C42687 * C23546 + C42684 * C23547) *
                         C114 +
                     (C42685 * C1762 + C42682 * C1767 + C42686 * C6060 +
                      C42683 * C6063 + C42687 * C23548 + C42684 * C23549) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C3342) *
                       C47925) *
                  C47590) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C2580 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C3342) *
                        C47681) *
                       C47951 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C3342) *
                        C2580 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47681) *
                       C47938 +
                   ((((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                       C42683 * C516 + C42687 * C510 + C42684 * C525) *
                          C114 +
                      (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                       C42683 * C535 + C42687 * C526 + C42684 * C540) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                       C42683 * C540 + C42685 * C515 + C42682 * C535) *
                          C47821 +
                      (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                       C42683 * C525 + C42685 * C505 + C42682 * C516) *
                          C114) *
                         C47567 * C47723) *
                        C2580 +
                    (((C42685 * C973 + C42682 * C980 + C42686 * C1334 +
                       C42683 * C1344 + C42687 * C2472 + C42684 * C2477) *
                          C114 +
                      (C42685 * C981 + C42682 * C988 + C42686 * C1343 +
                       C42683 * C1361 + C42687 * C2478 + C42684 * C2481) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                       C42683 * C988 + C42685 * C312 + C42682 * C332) *
                          C47821 +
                      (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                       C42683 * C980 + C42685 * C302 + C42682 * C313) *
                          C114) *
                         C47567 * C3342) *
                        C47681) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47962 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47959 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47950 -
                    ((C42687 * C12652 + C42684 * C12655 + C42686 * C2073 +
                      C42683 * C2081 + C42685 * C2070 + C42682 * C2080) *
                         C47821 +
                     (C42687 * C12649 + C42684 * C12651 + C42686 * C2063 +
                      C42683 * C2072 + C42685 * C2062 + C42682 * C2071) *
                         C114) *
                        C47567 * C47931) *
                       C2580 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47959 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47962 -
                    ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                      C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                         C47821 +
                     (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                      C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                         C114) *
                        C47567 * C47950 +
                    ((C42685 * C2470 + C42682 * C2473 + C42686 * C6945 +
                      C42683 * C6947 + C42687 * C27926 + C42684 * C27927) *
                         C114 +
                     (C42685 * C2474 + C42682 * C2479 + C42686 * C6948 +
                      C42683 * C6951 + C42687 * C27928 + C42684 * C27929) *
                         C47821) *
                        C47567 * C47931) *
                       C47681) *
                  C47590) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47719 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47726 +
                     ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                       C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                          C114 +
                      (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                       C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                          C47821) *
                         C47567 * C3850) *
                        C2580 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47726 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47719 -
                     ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                       C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                          C47821 +
                      (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                       C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                          C114) *
                         C47567 * C3850) *
                        C47681) *
                       C47869 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47726 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47719 -
                     ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                       C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                          C47821 +
                      (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                       C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                          C114) *
                         C47567 * C3850) *
                        C2580 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47719 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47726 +
                     ((C42685 * C1335 + C42682 * C1346 + C42686 * C2471 +
                       C42683 * C2475 + C42687 * C6946 + C42684 * C6949) *
                          C114 +
                      (C42685 * C1345 + C42682 * C1362 + C42686 * C2476 +
                       C42683 * C2480 + C42687 * C6950 + C42684 * C6952) *
                          C47821) *
                         C47567 * C3850) *
                        C47681) *
                       C47601)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C2580 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C3342) *
                        C47681) *
                       C47951 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C3342) *
                        C2580 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47681) *
                       C47938 +
                   ((((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                       C42683 * C516 + C42687 * C510 + C42684 * C525) *
                          C114 +
                      (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                       C42683 * C535 + C42687 * C526 + C42684 * C540) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                       C42683 * C540 + C42685 * C515 + C42682 * C535) *
                          C47821 +
                      (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                       C42683 * C525 + C42685 * C505 + C42682 * C516) *
                          C114) *
                         C47567 * C47723) *
                        C2580 +
                    (((C42685 * C973 + C42682 * C980 + C42686 * C1334 +
                       C42683 * C1344 + C42687 * C2472 + C42684 * C2477) *
                          C114 +
                      (C42685 * C981 + C42682 * C988 + C42686 * C1343 +
                       C42683 * C1361 + C42687 * C2478 + C42684 * C2481) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                       C42683 * C988 + C42685 * C312 + C42682 * C332) *
                          C47821 +
                      (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                       C42683 * C980 + C42685 * C302 + C42682 * C313) *
                          C114) *
                         C47567 * C3342) *
                        C47681) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C47961 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C3342) *
                       C47957 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C47723) *
                       C47947 +
                   (((C42685 * C1758 + C42682 * C1761 + C42686 * C6057 +
                      C42683 * C6059 + C42687 * C23546 + C42684 * C23547) *
                         C114 +
                     (C42685 * C1762 + C42682 * C1767 + C42686 * C6060 +
                      C42683 * C6063 + C42687 * C23548 + C42684 * C23549) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C3342) *
                       C47925) *
                  C47590) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C1468 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C1469 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C1470 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C47636 * C47925) *
                       C47869 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C1469 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C1468 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C1470 +
                    ((C42685 * C1201 + C42682 * C1209 + C42686 * C1759 +
                      C42683 * C1763 + C42687 * C6058 + C42684 * C6061) *
                         C114 +
                     (C42685 * C1208 + C42682 * C1219 + C42686 * C1764 +
                      C42683 * C1768 + C42687 * C6062 + C42684 * C6064) *
                         C47821) *
                        C47567 * C47636 * C47925) *
                       C47601)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47883 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C695 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47883) *
                       C696 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C47883 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C697 +
                   (((C42685 * C308 + C42682 * C324 + C42686 * C974 +
                      C42683 * C983 + C42687 * C2230 + C42684 * C2231) *
                         C114 +
                     (C42685 * C325 + C42682 * C338 + C42686 * C982 +
                      C42683 * C989 + C42687 * C2232 + C42684 * C2233) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C47636 * C47883) *
                       C47919)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C1880 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C1881 +
                     ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                       C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                          C114 +
                      (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                       C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                          C47821) *
                         C47567 * C47918) *
                        C47883 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C1881 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C1880 -
                     ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                       C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                          C47821 +
                      (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                       C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                          C114) *
                         C47567 * C47918) *
                        C47681) *
                       C47869 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C1881 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C1880 -
                     ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                       C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                          C47821 +
                      (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                       C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                          C114) *
                         C47567 * C47918) *
                        C47883 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C1880 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C1881 +
                     ((C42685 * C1335 + C42682 * C1346 + C42686 * C2471 +
                       C42683 * C2475 + C42687 * C6946 + C42684 * C6949) *
                          C114 +
                      (C42685 * C1345 + C42682 * C1362 + C42686 * C2476 +
                       C42683 * C2480 + C42687 * C6950 + C42684 * C6952) *
                          C47821) *
                         C47567 * C47918) *
                        C47681) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C1468 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47884) *
                       C1469 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C47723) *
                       C1470 +
                   (((C42685 * C1758 + C42682 * C1761 + C42686 * C6057 +
                      C42683 * C6059 + C42687 * C23546 + C42684 * C23547) *
                         C114 +
                     (C42685 * C1762 + C42682 * C1767 + C42686 * C6060 +
                      C42683 * C6063 + C42687 * C23548 + C42684 * C23549) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C47884) *
                       C47925) *
                  C47590) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C47883 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47884) *
                        C47681) *
                       C299 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47884) *
                        C47883 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47681) *
                       C300 +
                   ((((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                       C42683 * C516 + C42687 * C510 + C42684 * C525) *
                          C114 +
                      (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                       C42683 * C535 + C42687 * C526 + C42684 * C540) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                       C42683 * C540 + C42685 * C515 + C42682 * C535) *
                          C47821 +
                      (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                       C42683 * C525 + C42685 * C505 + C42682 * C516) *
                          C114) *
                         C47567 * C47723) *
                        C47883 +
                    (((C42685 * C973 + C42682 * C980 + C42686 * C1334 +
                       C42683 * C1344 + C42687 * C2472 + C42684 * C2477) *
                          C114 +
                      (C42685 * C981 + C42682 * C988 + C42686 * C1343 +
                       C42683 * C1361 + C42687 * C2478 + C42684 * C2481) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                       C42683 * C988 + C42685 * C312 + C42682 * C332) *
                          C47821 +
                      (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                       C42683 * C980 + C42685 * C302 + C42682 * C313) *
                          C114) *
                         C47567 * C47884) *
                        C47681) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C2348 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C2349 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C2350 -
                    ((C42687 * C12652 + C42684 * C12655 + C42686 * C2073 +
                      C42683 * C2081 + C42685 * C2070 + C42682 * C2080) *
                         C47821 +
                     (C42687 * C12649 + C42684 * C12651 + C42686 * C2063 +
                      C42683 * C2072 + C42685 * C2062 + C42682 * C2071) *
                         C114) *
                        C47567 * C47931) *
                       C47883 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C2349 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C2348 -
                    ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                      C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                         C47821 +
                     (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                      C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                         C114) *
                        C47567 * C2350 +
                    ((C42685 * C2470 + C42682 * C2473 + C42686 * C6945 +
                      C42683 * C6947 + C42687 * C27926 + C42684 * C27927) *
                         C114 +
                     (C42685 * C2474 + C42682 * C2479 + C42686 * C6948 +
                      C42683 * C6951 + C42687 * C27928 + C42684 * C27929) *
                         C47821) *
                        C47567 * C47931) *
                       C47681) *
                  C47590) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                         C42683 * C520 + C42687 * C508 + C42684 * C521) *
                            C114 +
                        (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                         C42683 * C537 + C42687 * C522 + C42684 * C538) *
                            C47821) *
                           C47567 * C47636 * C47618 * C108 -
                       ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                         C42683 * C536 + C42685 * C125 + C42682 * C137) *
                            C47821 +
                        (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                         C42683 * C518 + C42685 * C116 + C42682 * C124) *
                            C114) *
                           C47567 * C47636 * C47618 * C109 +
                       ((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                         C42683 * C516 + C42687 * C510 + C42684 * C525) *
                            C114 +
                        (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                         C42683 * C535 + C42687 * C526 + C42684 * C540) *
                            C47821) *
                           C47567 * C47636 * C47618 * C110 -
                       ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                         C42683 * C541 + C42685 * C128 + C42682 * C139) *
                            C47821 +
                        (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                         C42683 * C527 + C42685 * C118 + C42682 * C129) *
                            C114) *
                           C47567 * C47636 * C47618 * C111 +
                       ((C42685 * C119 + C42682 * C130 + C42686 * C513 +
                         C42683 * C532 + C42687 * C514 + C42684 * C533) *
                            C114 +
                        (C42685 * C131 + C42682 * C140 + C42686 * C531 +
                         C42683 * C543 + C42687 * C534 + C42684 * C544) *
                            C47821) *
                           C47567 * C47636 * C47618 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                          C42683 * C520 + C42687 * C508 + C42684 * C521) *
                             C114 +
                         (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                          C42683 * C537 + C42687 * C522 + C42684 * C538) *
                             C47821) *
                            C47567 * C47636 * C47954 -
                        ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                          C42683 * C986 + C42685 * C316 + C42682 * C334) *
                             C47821 +
                         (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                          C42683 * C976 + C42685 * C304 + C42682 * C317) *
                             C114) *
                            C47567 * C47636 * C47942 +
                        ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                          C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                             C114 +
                         (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                          C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                             C47821) *
                            C47567 * C47636 * C47915) *
                           C299 +
                       (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                          C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                             C114 +
                         (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                          C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                             C47821) *
                            C47567 * C47636 * C47942 -
                        ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                          C42683 * C536 + C42685 * C125 + C42682 * C137) *
                             C47821 +
                         (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                          C42683 * C518 + C42685 * C116 + C42682 * C124) *
                             C114) *
                            C47567 * C47636 * C47954 -
                        ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                          C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                             C47821 +
                         (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                          C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                             C114) *
                            C47567 * C47636 * C47915) *
                           C300 +
                       (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                          C42683 * C516 + C42687 * C510 + C42684 * C525) *
                             C114 +
                         (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                          C42683 * C535 + C42687 * C526 + C42684 * C540) *
                             C47821) *
                            C47567 * C47636 * C47954 -
                        ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                          C42683 * C988 + C42685 * C312 + C42682 * C332) *
                             C47821 +
                         (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                          C42683 * C980 + C42685 * C302 + C42682 * C313) *
                             C114) *
                            C47567 * C47636 * C47942 +
                        ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                          C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                             C114 +
                         (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                          C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                             C47821) *
                            C47567 * C47636 * C47915) *
                           C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C299 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47944 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47955 -
                    ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                      C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                         C47821 +
                     (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                      C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                         C114) *
                        C47567 * C47918) *
                       C47618 * C300 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C510 + C42682 * C525 + C42686 * C2060 +
                      C42683 * C2067 + C42687 * C2065 + C42684 * C2076) *
                         C114 +
                     (C42685 * C526 + C42682 * C540 + C42686 * C2066 +
                      C42683 * C2078 + C42687 * C2077 + C42684 * C2083) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47951 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C1127 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47915) *
                       C47938 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C47636 * C1194 -
                   ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                     C42683 * C986 + C42685 * C316 + C42682 * C334) *
                        C47821 +
                    (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                     C42683 * C976 + C42685 * C304 + C42682 * C317) *
                        C114) *
                       C47567 * C47636 * C1195 +
                   ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                     C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                        C114 +
                    (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                     C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                        C47821) *
                       C47567 * C47636 * C1196 -
                   ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                     C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                        C47821 +
                    (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                     C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                        C114) *
                       C47567 * C47636 * C1197 +
                   ((C42685 * C1203 + C42682 * C1212 + C42686 * C6557 +
                     C42683 * C6559 + C42687 * C22556 + C42684 * C22557) *
                        C114 +
                    (C42685 * C1213 + C42682 * C1221 + C42686 * C6560 +
                     C42683 * C6563 + C42687 * C22558 + C42684 * C22559) *
                        C47821) *
                       C47567 * C47636 * C1198) *
                  C47590) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C1126 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47944 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47955 -
                    ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                      C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                         C47821 +
                     (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                      C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                         C114) *
                        C47567 * C47918) *
                       C1127 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C1340 + C42682 * C1355 + C42686 * C7421 +
                      C42683 * C7423 + C42687 * C23200 + C42684 * C23201) *
                         C114 +
                     (C42685 * C1356 + C42682 * C1367 + C42686 * C7424 +
                      C42683 * C7427 + C42687 * C23202 + C42684 * C23203) *
                         C47821) *
                        C47567 * C47918) *
                       C47915) *
                  C47590) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C47951 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C1881 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C1880 -
                    ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                      C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                         C47821 +
                     (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                      C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                         C114) *
                        C47567 * C47918) *
                       C47618 * C47938 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C510 + C42682 * C525 + C42686 * C2060 +
                      C42683 * C2067 + C42687 * C2065 + C42684 * C2076) *
                         C114 +
                     (C42685 * C526 + C42682 * C540 + C42686 * C2066 +
                      C42683 * C2078 + C42687 * C2077 + C42684 * C2083) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C47954 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C1881 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C1880 -
                    ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                      C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                         C47821 +
                     (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                      C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                         C114) *
                        C47567 * C47918) *
                       C47942 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C1340 + C42682 * C1355 + C42686 * C7421 +
                      C42683 * C7423 + C42687 * C23200 + C42684 * C23201) *
                         C114 +
                     (C42685 * C1356 + C42682 * C1367 + C42686 * C7424 +
                      C42683 * C7427 + C42687 * C23202 + C42684 * C23203) *
                         C47821) *
                        C47567 * C47918) *
                       C47915) *
                  C47590) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C2055 -
                   ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                     C42683 * C538 + C42685 * C519 + C42682 * C537) *
                        C47821 +
                    (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                     C42683 * C521 + C42685 * C507 + C42682 * C520) *
                        C114) *
                       C47567 * C2056 +
                   ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                     C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                        C114 +
                    (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                     C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                        C47821) *
                       C47567 * C2057 -
                   ((C42687 * C12652 + C42684 * C12655 + C42686 * C2073 +
                     C42683 * C2081 + C42685 * C2070 + C42682 * C2080) *
                        C47821 +
                    (C42687 * C12649 + C42684 * C12651 + C42686 * C2063 +
                     C42683 * C2072 + C42685 * C2062 + C42682 * C2071) *
                        C114) *
                       C47567 * C2058 +
                   ((C42685 * C2063 + C42682 * C2072 + C42686 * C12649 +
                     C42683 * C12651 + C42687 * C44156 + C42684 * C44157) *
                        C114 +
                    (C42685 * C2073 + C42682 * C2081 + C42686 * C12652 +
                     C42683 * C12655 + C42687 * C44158 + C42684 * C44159) *
                        C47821) *
                       C47567 * C2059) *
                  C47618 * C47590) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C1126 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47884) *
                        C1127 +
                    (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                       C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                          C114 +
                      (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                       C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                       C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                          C47821 +
                      (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                       C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                          C114) *
                         C47567 * C47723) *
                        C47915) *
                       C47869 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47884) *
                        C1126 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C1127 +
                    (((C42685 * C1338 + C42682 * C1352 + C42686 * C1341 +
                       C42683 * C1357 + C42687 * C7422 + C42684 * C7425) *
                          C114 +
                      (C42685 * C1351 + C42682 * C1365 + C42686 * C1358 +
                       C42683 * C1368 + C42687 * C7426 + C42684 * C7428) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                       C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                          C47821 +
                      (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                       C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                          C114) *
                         C47567 * C47884) *
                        C47915) *
                       C47601)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C695 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47884) *
                       C47618 * C696 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C697 +
                   (((C42685 * C511 + C42682 * C527 + C42686 * C512 +
                      C42683 * C530 + C42687 * C2352 + C42684 * C2353) *
                         C114 +
                     (C42685 * C528 + C42682 * C541 + C42686 * C529 +
                      C42683 * C542 + C42687 * C2354 + C42684 * C2355) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C47884) *
                       C47618 * C47919)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C2348 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C2349 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C2350 -
                    ((C42687 * C12652 + C42684 * C12655 + C42686 * C2073 +
                      C42683 * C2081 + C42685 * C2070 + C42682 * C2080) *
                         C47821 +
                     (C42687 * C12649 + C42684 * C12651 + C42686 * C2063 +
                      C42683 * C2072 + C42685 * C2062 + C42682 * C2071) *
                         C114) *
                        C47567 * C47931) *
                       C47618 * C47869 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C2349 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C2348 -
                    ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                      C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                         C47821 +
                     (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                      C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                         C114) *
                        C47567 * C2350 +
                    ((C42685 * C2061 + C42682 * C2069 + C42686 * C2064 +
                      C42683 * C2074 + C42687 * C12650 + C42684 * C12653) *
                         C114 +
                     (C42685 * C2068 + C42682 * C2079 + C42686 * C2075 +
                      C42683 * C2082 + C42687 * C12654 + C42684 * C12656) *
                         C47821) *
                        C47567 * C47931) *
                       C47618 * C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47942 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C299 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47942 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47915) *
                       C300 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47942 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C47636 * C47618 * C108 -
                   ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                     C42683 * C536 + C42685 * C125 + C42682 * C137) *
                        C47821 +
                    (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                     C42683 * C518 + C42685 * C116 + C42682 * C124) *
                        C114) *
                       C47567 * C47636 * C47618 * C109 +
                   ((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                     C42683 * C516 + C42687 * C510 + C42684 * C525) *
                        C114 +
                    (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                     C42683 * C535 + C42687 * C526 + C42684 * C540) *
                        C47821) *
                       C47567 * C47636 * C47618 * C110 -
                   ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                     C42683 * C541 + C42685 * C128 + C42682 * C139) *
                        C47821 +
                    (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                     C42683 * C527 + C42685 * C118 + C42682 * C129) *
                        C114) *
                       C47567 * C47636 * C47618 * C111 +
                   ((C42685 * C119 + C42682 * C130 + C42686 * C513 +
                     C42683 * C532 + C42687 * C514 + C42684 * C533) *
                        C114 +
                    (C42685 * C131 + C42682 * C140 + C42686 * C531 +
                     C42683 * C543 + C42687 * C534 + C42684 * C544) *
                        C47821) *
                       C47567 * C47636 * C47618 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47951 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C1127 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47915) *
                       C47938 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C47636 * C1194 -
                   ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                     C42683 * C986 + C42685 * C316 + C42682 * C334) *
                        C47821 +
                    (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                     C42683 * C976 + C42685 * C304 + C42682 * C317) *
                        C114) *
                       C47567 * C47636 * C1195 +
                   ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                     C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                        C114 +
                    (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                     C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                        C47821) *
                       C47567 * C47636 * C1196 -
                   ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                     C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                        C47821 +
                    (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                     C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                        C114) *
                       C47567 * C47636 * C1197 +
                   ((C42685 * C1203 + C42682 * C1212 + C42686 * C6557 +
                     C42683 * C6559 + C42687 * C22556 + C42684 * C22557) *
                        C114 +
                    (C42685 * C1213 + C42682 * C1221 + C42686 * C6560 +
                     C42683 * C6563 + C42687 * C22558 + C42684 * C22559) *
                        C47821) *
                       C47567 * C47636 * C1198) *
                  C47590) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C47951 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C1881 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C1880 -
                    ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                      C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                         C47821 +
                     (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                      C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                         C114) *
                        C47567 * C47918) *
                       C47618 * C47938 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C510 + C42682 * C525 + C42686 * C2060 +
                      C42683 * C2067 + C42687 * C2065 + C42684 * C2076) *
                         C114 +
                     (C42685 * C526 + C42682 * C540 + C42686 * C2066 +
                      C42683 * C2078 + C42687 * C2077 + C42684 * C2083) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C47954 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C1881 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C1880 -
                    ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                      C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                         C47821 +
                     (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                      C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                         C114) *
                        C47567 * C47918) *
                       C47942 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C1880 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C1881 +
                    ((C42685 * C1340 + C42682 * C1355 + C42686 * C7421 +
                      C42683 * C7423 + C42687 * C23200 + C42684 * C23201) *
                         C114 +
                     (C42685 * C1356 + C42682 * C1367 + C42686 * C7424 +
                      C42683 * C7427 + C42687 * C23202 + C42684 * C23203) *
                         C47821) *
                        C47567 * C47918) *
                       C47915) *
                  C47590) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C47883 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C3342) *
                        C47681) *
                       C47595 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C3342) *
                        C47883 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47681) *
                       C47604 +
                   ((((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                       C42683 * C516 + C42687 * C510 + C42684 * C525) *
                          C114 +
                      (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                       C42683 * C535 + C42687 * C526 + C42684 * C540) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                       C42683 * C540 + C42685 * C515 + C42682 * C535) *
                          C47821 +
                      (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                       C42683 * C525 + C42685 * C505 + C42682 * C516) *
                          C114) *
                         C47567 * C47723) *
                        C47883 +
                    (((C42685 * C973 + C42682 * C980 + C42686 * C1334 +
                       C42683 * C1344 + C42687 * C2472 + C42684 * C2477) *
                          C114 +
                      (C42685 * C981 + C42682 * C988 + C42686 * C1343 +
                       C42683 * C1361 + C42687 * C2478 + C42684 * C2481) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                       C42683 * C988 + C42685 * C312 + C42682 * C332) *
                          C47821 +
                      (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                       C42683 * C980 + C42685 * C302 + C42682 * C313) *
                          C114) *
                         C47567 * C3342) *
                        C47681) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47719 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47726 +
                     ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                       C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                          C114 +
                      (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                       C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                          C47821) *
                         C47567 * C3850) *
                        C47883 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47726 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47719 -
                     ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                       C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                          C47821 +
                      (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                       C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                          C114) *
                         C47567 * C3850) *
                        C47681) *
                       C2688 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47726 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47719 -
                     ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                       C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                          C47821 +
                      (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                       C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                          C114) *
                         C47567 * C3850) *
                        C47883 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47719 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47726 +
                     ((C42685 * C1335 + C42682 * C1346 + C42686 * C2471 +
                       C42683 * C2475 + C42687 * C6946 + C42684 * C6949) *
                          C114 +
                      (C42685 * C1345 + C42682 * C1362 + C42686 * C2476 +
                       C42683 * C2480 + C42687 * C6950 + C42684 * C6952) *
                          C47821) *
                         C47567 * C3850) *
                        C47681) *
                       C47601)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C47954 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C3342) *
                        C47942 +
                    (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                       C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                          C114 +
                      (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                       C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                       C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                          C47821 +
                      (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                       C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                          C114) *
                         C47567 * C47723) *
                        C47915) *
                       C2688 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C3342) *
                        C47954 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47942 +
                    (((C42685 * C1338 + C42682 * C1352 + C42686 * C1341 +
                       C42683 * C1357 + C42687 * C7422 + C42684 * C7425) *
                          C114 +
                      (C42685 * C1351 + C42682 * C1365 + C42686 * C1358 +
                       C42683 * C1368 + C42687 * C7426 + C42684 * C7428) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                       C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                          C47821 +
                      (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                       C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                          C114) *
                         C47567 * C3342) *
                        C47915) *
                       C47601)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C47960 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C3342) *
                       C47618 * C47953 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C47940 +
                   (((C42685 * C511 + C42682 * C527 + C42686 * C512 +
                      C42683 * C530 + C42687 * C2352 + C42684 * C2353) *
                         C114 +
                     (C42685 * C528 + C42682 * C541 + C42686 * C529 +
                      C42683 * C542 + C42687 * C2354 + C42684 * C2355) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C3342) *
                       C47618 * C47919)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47962 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47959 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47950 -
                    ((C42687 * C12652 + C42684 * C12655 + C42686 * C2073 +
                      C42683 * C2081 + C42685 * C2070 + C42682 * C2080) *
                         C47821 +
                     (C42687 * C12649 + C42684 * C12651 + C42686 * C2063 +
                      C42683 * C2072 + C42685 * C2062 + C42682 * C2071) *
                         C114) *
                        C47567 * C47931) *
                       C47618 * C2688 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47959 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47962 -
                    ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                      C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                         C47821 +
                     (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                      C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                         C114) *
                        C47567 * C47950 +
                    ((C42685 * C2061 + C42682 * C2069 + C42686 * C2064 +
                      C42683 * C2074 + C42687 * C12650 + C42684 * C12653) *
                         C114 +
                     (C42685 * C2068 + C42682 * C2079 + C42686 * C2075 +
                      C42683 * C2082 + C42687 * C12654 + C42684 * C12656) *
                         C47821) *
                        C47567 * C47931) *
                       C47618 * C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47719 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47726 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C3850) *
                       C47618 * C47595 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47726 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47719 -
                    ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                      C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                         C47821 +
                     (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                      C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                         C114) *
                        C47567 * C3850) *
                       C47618 * C47604 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47719 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C47726 +
                    ((C42685 * C510 + C42682 * C525 + C42686 * C2060 +
                      C42683 * C2067 + C42687 * C2065 + C42684 * C2076) *
                         C114 +
                     (C42685 * C526 + C42682 * C540 + C42686 * C2066 +
                      C42683 * C2078 + C42687 * C2077 + C42684 * C2083) *
                         C47821) *
                        C47567 * C3850) *
                       C47618 * C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C47960 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C3342) *
                       C47618 * C47953 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C3342 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C47940 +
                   (((C42685 * C511 + C42682 * C527 + C42686 * C512 +
                      C42683 * C530 + C42687 * C2352 + C42684 * C2353) *
                         C114 +
                     (C42685 * C528 + C42682 * C541 + C42686 * C529 +
                      C42683 * C542 + C42687 * C2354 + C42684 * C2355) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C3342) *
                       C47618 * C47919)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C47954 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C3342) *
                        C47942 +
                    (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                       C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                          C114 +
                      (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                       C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                       C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                          C47821 +
                      (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                       C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                          C114) *
                         C47567 * C47723) *
                        C47915) *
                       C2688 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C3342) *
                        C47954 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C3342 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47942 +
                    (((C42685 * C1338 + C42682 * C1352 + C42686 * C1341 +
                       C42683 * C1357 + C42687 * C7422 + C42684 * C7425) *
                          C114 +
                      (C42685 * C1351 + C42682 * C1365 + C42686 * C1358 +
                       C42683 * C1368 + C42687 * C7426 + C42684 * C7428) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                       C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                          C47821 +
                      (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                       C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                          C114) *
                         C47567 * C3342) *
                        C47915) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47883 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C695 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47883) *
                       C696 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C47883 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47681) *
                       C697 +
                   (((C42685 * C308 + C42682 * C324 + C42686 * C974 +
                      C42683 * C983 + C42687 * C2230 + C42684 * C2231) *
                         C114 +
                     (C42685 * C325 + C42682 * C338 + C42686 * C982 +
                      C42683 * C989 + C42687 * C2232 + C42684 * C2233) *
                         C47821) *
                        C47567 * C47636 * C47681 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C47636 * C47883) *
                       C47919)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C1468 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C1469 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C1470 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C47636 * C47925) *
                       C47869 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C1469 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C1468 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C1470 +
                    ((C42685 * C1201 + C42682 * C1209 + C42686 * C1759 +
                      C42683 * C1763 + C42687 * C6058 + C42684 * C6061) *
                         C114 +
                     (C42685 * C1208 + C42682 * C1219 + C42686 * C1764 +
                      C42683 * C1768 + C42687 * C6062 + C42684 * C6064) *
                         C47821) *
                        C47567 * C47636 * C47925) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C47883 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47884) *
                        C47681) *
                       C299 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47884) *
                        C47883 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C47681) *
                       C300 +
                   ((((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                       C42683 * C516 + C42687 * C510 + C42684 * C525) *
                          C114 +
                      (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                       C42683 * C535 + C42687 * C526 + C42684 * C540) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                       C42683 * C540 + C42685 * C515 + C42682 * C535) *
                          C47821 +
                      (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                       C42683 * C525 + C42685 * C505 + C42682 * C516) *
                          C114) *
                         C47567 * C47723) *
                        C47883 +
                    (((C42685 * C973 + C42682 * C980 + C42686 * C1334 +
                       C42683 * C1344 + C42687 * C2472 + C42684 * C2477) *
                          C114 +
                      (C42685 * C981 + C42682 * C988 + C42686 * C1343 +
                       C42683 * C1361 + C42687 * C2478 + C42684 * C2481) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                       C42683 * C988 + C42685 * C312 + C42682 * C332) *
                          C47821 +
                      (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                       C42683 * C980 + C42685 * C302 + C42682 * C313) *
                          C114) *
                         C47567 * C47884) *
                        C47681) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C1468 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47884) *
                       C1469 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C47723) *
                       C1470 +
                   (((C42685 * C1758 + C42682 * C1761 + C42686 * C6057 +
                      C42683 * C6059 + C42687 * C23546 + C42684 * C23547) *
                         C114 +
                     (C42685 * C1762 + C42682 * C1767 + C42686 * C6060 +
                      C42683 * C6063 + C42687 * C23548 + C42684 * C23549) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                      C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                         C47821 +
                     (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                      C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                         C114) *
                        C47567 * C47884) *
                       C47925) *
                  C47590) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47942 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C299 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47942 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47915) *
                       C300 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47942 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C47636 * C47618 * C108 -
                   ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                     C42683 * C536 + C42685 * C125 + C42682 * C137) *
                        C47821 +
                    (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                     C42683 * C518 + C42685 * C116 + C42682 * C124) *
                        C114) *
                       C47567 * C47636 * C47618 * C109 +
                   ((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                     C42683 * C516 + C42687 * C510 + C42684 * C525) *
                        C114 +
                    (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                     C42683 * C535 + C42687 * C526 + C42684 * C540) *
                        C47821) *
                       C47567 * C47636 * C47618 * C110 -
                   ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                     C42683 * C541 + C42685 * C128 + C42682 * C139) *
                        C47821 +
                    (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                     C42683 * C527 + C42685 * C118 + C42682 * C129) *
                        C114) *
                       C47567 * C47636 * C47618 * C111 +
                   ((C42685 * C119 + C42682 * C130 + C42686 * C513 +
                     C42683 * C532 + C42687 * C514 + C42684 * C533) *
                        C114 +
                    (C42685 * C131 + C42682 * C140 + C42686 * C531 +
                     C42683 * C543 + C42687 * C534 + C42684 * C544) *
                        C47821) *
                       C47567 * C47636 * C47618 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C299 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47944 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47955 -
                    ((C42687 * C2075 + C42684 * C2082 + C42686 * C2068 +
                      C42683 * C2079 + C42685 * C524 + C42682 * C539) *
                         C47821 +
                     (C42687 * C2064 + C42684 * C2074 + C42686 * C2061 +
                      C42683 * C2069 + C42685 * C509 + C42682 * C523) *
                         C114) *
                        C47567 * C47918) *
                       C47618 * C300 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C510 + C42682 * C525 + C42686 * C2060 +
                      C42683 * C2067 + C42687 * C2065 + C42684 * C2076) *
                         C114 +
                     (C42685 * C526 + C42682 * C540 + C42686 * C2066 +
                      C42683 * C2078 + C42687 * C2077 + C42684 * C2083) *
                         C47821) *
                        C47567 * C47918) *
                       C47618 * C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47951 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C1127 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47915) *
                       C47938 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C47636 * C1194 -
                   ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                     C42683 * C986 + C42685 * C316 + C42682 * C334) *
                        C47821 +
                    (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                     C42683 * C976 + C42685 * C304 + C42682 * C317) *
                        C114) *
                       C47567 * C47636 * C1195 +
                   ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                     C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                        C114 +
                    (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                     C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                        C47821) *
                       C47567 * C47636 * C1196 -
                   ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                     C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                        C47821 +
                    (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                     C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                        C114) *
                       C47567 * C47636 * C1197 +
                   ((C42685 * C1203 + C42682 * C1212 + C42686 * C6557 +
                     C42683 * C6559 + C42687 * C22556 + C42684 * C22557) *
                        C114 +
                    (C42685 * C1213 + C42682 * C1221 + C42686 * C6560 +
                     C42683 * C6563 + C42687 * C22558 + C42684 * C22559) *
                        C47821) *
                       C47567 * C47636 * C1198) *
                  C47590) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C508 + C42682 * C521 + C42686 * C2062 +
                      C42683 * C2071 + C42687 * C2063 + C42684 * C2072) *
                         C114 +
                     (C42685 * C522 + C42682 * C538 + C42686 * C2070 +
                      C42683 * C2080 + C42687 * C2073 + C42684 * C2081) *
                         C47821) *
                        C47567 * C47918) *
                       C1126 +
                   (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                      C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                         C114 +
                     (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                      C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                         C47821) *
                        C47567 * C47944 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47955 -
                    ((C42687 * C6948 + C42684 * C6951 + C42686 * C2474 +
                      C42683 * C2479 + C42685 * C1347 + C42682 * C1363) *
                         C47821 +
                     (C42687 * C6945 + C42684 * C6947 + C42686 * C2470 +
                      C42683 * C2473 + C42685 * C1336 + C42682 * C1348) *
                         C114) *
                        C47567 * C47918) *
                       C1127 +
                   (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47955 -
                    ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                      C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                         C47821 +
                     (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                      C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                         C114) *
                        C47567 * C47944 +
                    ((C42685 * C1340 + C42682 * C1355 + C42686 * C7421 +
                      C42683 * C7423 + C42687 * C23200 + C42684 * C23201) *
                         C114 +
                     (C42685 * C1356 + C42682 * C1367 + C42686 * C7424 +
                      C42683 * C7427 + C42687 * C23202 + C42684 * C23203) *
                         C47821) *
                        C47567 * C47918) *
                       C47915) *
                  C47590) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                      C42683 * C538 + C42685 * C519 + C42682 * C537) *
                         C47821 +
                     (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                      C42683 * C521 + C42685 * C507 + C42682 * C520) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C695 +
                   (((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                      C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                         C114 +
                     (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                      C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47884) *
                       C47618 * C696 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47884 -
                    ((C42687 * C2066 + C42684 * C2078 + C42686 * C526 +
                      C42683 * C540 + C42685 * C515 + C42682 * C535) *
                         C47821 +
                     (C42687 * C2060 + C42684 * C2067 + C42686 * C510 +
                      C42683 * C525 + C42685 * C505 + C42682 * C516) *
                         C114) *
                        C47567 * C47723) *
                       C47618 * C697 +
                   (((C42685 * C511 + C42682 * C527 + C42686 * C512 +
                      C42683 * C530 + C42687 * C2352 + C42684 * C2353) *
                         C114 +
                     (C42685 * C528 + C42682 * C541 + C42686 * C529 +
                      C42683 * C542 + C42687 * C2354 + C42684 * C2355) *
                         C47821) *
                        C47567 * C47723 -
                    ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                      C42683 * C541 + C42685 * C128 + C42682 * C139) *
                         C47821 +
                     (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                      C42683 * C527 + C42685 * C118 + C42682 * C129) *
                         C114) *
                        C47567 * C47884) *
                       C47618 * C47919)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                       C42683 * C520 + C42687 * C508 + C42684 * C521) *
                          C114 +
                      (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                       C42683 * C537 + C42687 * C522 + C42684 * C538) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2070 + C42684 * C2080 + C42686 * C522 +
                       C42683 * C538 + C42685 * C519 + C42682 * C537) *
                          C47821 +
                      (C42687 * C2062 + C42684 * C2071 + C42686 * C508 +
                       C42683 * C521 + C42685 * C507 + C42682 * C520) *
                          C114) *
                         C47567 * C47723) *
                        C1126 +
                    (((C42685 * C971 + C42682 * C976 + C42686 * C1336 +
                       C42683 * C1348 + C42687 * C2470 + C42684 * C2473) *
                          C114 +
                      (C42685 * C977 + C42682 * C986 + C42686 * C1347 +
                       C42683 * C1363 + C42687 * C2474 + C42684 * C2479) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                       C42683 * C986 + C42685 * C316 + C42682 * C334) *
                          C47821 +
                      (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                       C42683 * C976 + C42685 * C304 + C42682 * C317) *
                          C114) *
                         C47567 * C47884) *
                        C1127 +
                    (((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                       C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                          C114 +
                      (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                       C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C7424 + C42684 * C7427 + C42686 * C1356 +
                       C42683 * C1367 + C42685 * C1353 + C42682 * C1366) *
                          C47821 +
                      (C42687 * C7421 + C42684 * C7423 + C42686 * C1340 +
                       C42683 * C1355 + C42685 * C1339 + C42682 * C1354) *
                          C114) *
                         C47567 * C47723) *
                        C47915) *
                       C47869 +
                   ((((C42685 * C506 + C42682 * C518 + C42686 * C509 +
                       C42683 * C523 + C42687 * C2061 + C42684 * C2069) *
                          C114 +
                      (C42685 * C517 + C42682 * C536 + C42686 * C524 +
                       C42683 * C539 + C42687 * C2068 + C42684 * C2079) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                       C42683 * C536 + C42685 * C125 + C42682 * C137) *
                          C47821 +
                      (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                       C42683 * C518 + C42685 * C116 + C42682 * C124) *
                          C114) *
                         C47567 * C47884) *
                        C1126 +
                    (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                       C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                          C114 +
                      (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                       C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                          C47821) *
                         C47567 * C47884 -
                     ((C42687 * C2476 + C42684 * C2480 + C42686 * C1345 +
                       C42683 * C1362 + C42685 * C979 + C42682 * C987) *
                          C47821 +
                      (C42687 * C2471 + C42684 * C2475 + C42686 * C1335 +
                       C42683 * C1346 + C42685 * C972 + C42682 * C978) *
                          C114) *
                         C47567 * C47723) *
                        C1127 +
                    (((C42685 * C1338 + C42682 * C1352 + C42686 * C1341 +
                       C42683 * C1357 + C42687 * C7422 + C42684 * C7425) *
                          C114 +
                      (C42685 * C1351 + C42682 * C1365 + C42686 * C1358 +
                       C42683 * C1368 + C42687 * C7426 + C42684 * C7428) *
                          C47821) *
                         C47567 * C47723 -
                     ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                       C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                          C47821 +
                      (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                       C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                          C114) *
                         C47567 * C47884) *
                        C47915) *
                       C47601)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C47636 * C47618 * C108 -
                   ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                     C42683 * C536 + C42685 * C125 + C42682 * C137) *
                        C47821 +
                    (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                     C42683 * C518 + C42685 * C116 + C42682 * C124) *
                        C114) *
                       C47567 * C47636 * C47618 * C109 +
                   ((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                     C42683 * C516 + C42687 * C510 + C42684 * C525) *
                        C114 +
                    (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                     C42683 * C535 + C42687 * C526 + C42684 * C540) *
                        C47821) *
                       C47567 * C47636 * C47618 * C110 -
                   ((C42687 * C529 + C42684 * C542 + C42686 * C528 +
                     C42683 * C541 + C42685 * C128 + C42682 * C139) *
                        C47821 +
                    (C42687 * C512 + C42684 * C530 + C42686 * C511 +
                     C42683 * C527 + C42685 * C118 + C42682 * C129) *
                        C114) *
                       C47567 * C47636 * C47618 * C111 +
                   ((C42685 * C119 + C42682 * C130 + C42686 * C513 +
                     C42683 * C532 + C42687 * C514 + C42684 * C533) *
                        C114 +
                    (C42685 * C131 + C42682 * C140 + C42686 * C531 +
                     C42683 * C543 + C42687 * C534 + C42684 * C544) *
                        C47821) *
                       C47567 * C47636 * C47618 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C47942 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C299 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C47942 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47915) *
                       C300 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C47954 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C47942 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                      C42683 * C520 + C42687 * C508 + C42684 * C521) *
                         C114 +
                     (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                      C42683 * C537 + C42687 * C522 + C42684 * C538) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                      C42683 * C986 + C42685 * C316 + C42682 * C334) *
                         C47821 +
                     (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                      C42683 * C976 + C42685 * C304 + C42682 * C317) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                      C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                         C114 +
                     (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                      C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47951 +
                   (((C42685 * C303 + C42682 * C315 + C42686 * C972 +
                      C42683 * C978 + C42687 * C1335 + C42684 * C1346) *
                         C114 +
                     (C42685 * C314 + C42682 * C333 + C42686 * C979 +
                      C42683 * C987 + C42687 * C1345 + C42684 * C1362) *
                         C47821) *
                        C47567 * C47636 * C1127 -
                    ((C42687 * C524 + C42684 * C539 + C42686 * C517 +
                      C42683 * C536 + C42685 * C125 + C42682 * C137) *
                         C47821 +
                     (C42687 * C509 + C42684 * C523 + C42686 * C506 +
                      C42683 * C518 + C42685 * C116 + C42682 * C124) *
                         C114) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1358 + C42684 * C1368 + C42686 * C1351 +
                      C42683 * C1365 + C42685 * C321 + C42682 * C336) *
                         C47821 +
                     (C42687 * C1341 + C42684 * C1357 + C42686 * C1338 +
                      C42683 * C1352 + C42685 * C306 + C42682 * C320) *
                         C114) *
                        C47567 * C47636 * C47915) *
                       C47938 +
                   (((C42685 * C117 + C42682 * C126 + C42686 * C505 +
                      C42683 * C516 + C42687 * C510 + C42684 * C525) *
                         C114 +
                     (C42685 * C127 + C42682 * C138 + C42686 * C515 +
                      C42683 * C535 + C42687 * C526 + C42684 * C540) *
                         C47821) *
                        C47567 * C47636 * C1126 -
                    ((C42687 * C1343 + C42684 * C1361 + C42686 * C981 +
                      C42683 * C988 + C42685 * C312 + C42682 * C332) *
                         C47821 +
                     (C42687 * C1334 + C42684 * C1344 + C42686 * C973 +
                      C42683 * C980 + C42685 * C302 + C42682 * C313) *
                         C114) *
                        C47567 * C47636 * C1127 +
                    ((C42685 * C307 + C42682 * C322 + C42686 * C1337 +
                      C42683 * C1350 + C42687 * C1342 + C42684 * C1359) *
                         C114 +
                     (C42685 * C323 + C42682 * C337 + C42686 * C1349 +
                      C42683 * C1364 + C42687 * C1360 + C42684 * C1369) *
                         C47821) *
                        C47567 * C47636 * C47915) *
                       C47909)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42685 * C115 + C42682 * C122 + C42686 * C507 +
                     C42683 * C520 + C42687 * C508 + C42684 * C521) *
                        C114 +
                    (C42685 * C123 + C42682 * C136 + C42686 * C519 +
                     C42683 * C537 + C42687 * C522 + C42684 * C538) *
                        C47821) *
                       C47567 * C47636 * C1194 -
                   ((C42687 * C1347 + C42684 * C1363 + C42686 * C977 +
                     C42683 * C986 + C42685 * C316 + C42682 * C334) *
                        C47821 +
                    (C42687 * C1336 + C42684 * C1348 + C42686 * C971 +
                     C42683 * C976 + C42685 * C304 + C42682 * C317) *
                        C114) *
                       C47567 * C47636 * C1195 +
                   ((C42685 * C305 + C42682 * C318 + C42686 * C1339 +
                     C42683 * C1354 + C42687 * C1340 + C42684 * C1355) *
                        C114 +
                    (C42685 * C319 + C42682 * C335 + C42686 * C1353 +
                     C42683 * C1366 + C42687 * C1356 + C42684 * C1367) *
                        C47821) *
                       C47567 * C47636 * C1196 -
                   ((C42687 * C6060 + C42684 * C6063 + C42686 * C1762 +
                     C42683 * C1767 + C42685 * C1210 + C42682 * C1220) *
                        C47821 +
                    (C42687 * C6057 + C42684 * C6059 + C42686 * C1758 +
                     C42683 * C1761 + C42685 * C1202 + C42682 * C1211) *
                        C114) *
                       C47567 * C47636 * C1197 +
                   ((C42685 * C1203 + C42682 * C1212 + C42686 * C6557 +
                     C42683 * C6559 + C42687 * C22556 + C42684 * C22557) *
                        C114 +
                    (C42685 * C1213 + C42682 * C1221 + C42686 * C6560 +
                     C42683 * C6563 + C42687 * C22558 + C42684 * C22559) *
                        C47821) *
                       C47567 * C47636 * C1198) *
                  C47590) /
                     (p * q * std::sqrt(p + q));
}
