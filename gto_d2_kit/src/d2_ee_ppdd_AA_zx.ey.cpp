/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46744 = ae * be;
    const double C46743 = ae + be;
    const double C46742 = 0 * be;
    const double C46741 = xA - xB;
    const double C46763 = zA - zB;
    const double C46781 = 0 * be;
    const double C46794 = xP - xQ;
    const double C46793 = zP - zQ;
    const double C46792 = p + q;
    const double C46791 = p * q;
    const double C46801 = std::pow(ae, 2);
    const double C46799 = bs[3];
    const double C46809 = bs[4];
    const double C46818 = bs[5];
    const double C46832 = bs[6];
    const double C46854 = bs[7];
    const double C46963 = yP - yQ;
    const double C47169 = bs[2];
    const double C117 = bs[0];
    const double C47592 = ce + de;
    const double C47591 = ce * de;
    const double C47590 = xC - xD;
    const double C47624 = yC - yD;
    const double C47642 = zC - zD;
    const double C47812 = yA - yB;
    const double C46745 = std::pow(C46743, 2);
    const double C47579 = 2 * C46743;
    const double C46746 = C46744 * C46741;
    const double C47570 = std::pow(C46741, 2);
    const double C47877 = C46741 * be;
    const double C47876 = C46741 * ae;
    const double C46782 = C46744 * C46763;
    const double C47846 = std::pow(C46763, 2);
    const double C47912 = C46763 * be;
    const double C47910 = C46763 * ae;
    const double C46819 = std::pow(C46794, 2);
    const double C46887 = C46794 * ae;
    const double C46802 = C46793 * ae;
    const double C46800 = C46793 * C46794;
    const double C47005 = std::pow(C46793, 2);
    const double C46795 = 2 * C46791;
    const double C46972 = std::pow(C46963, 2);
    const double C47596 = 2 * C47592;
    const double C47595 = std::pow(C47592, 2);
    const double C47597 = C47590 * de;
    const double C47594 = C47590 * ce;
    const double C47593 = std::pow(C47590, 2);
    const double C47625 = std::pow(C47624, 2);
    const double C47684 = C47624 * de;
    const double C47682 = C47624 * ce;
    const double C47643 = std::pow(C47642, 2);
    const double C47726 = C47642 * de;
    const double C47724 = C47642 * ce;
    const double C47831 = std::pow(C47812, 2);
    const double C47911 = C47812 * be;
    const double C47909 = C47812 * ae;
    const double C46747 = 2 * C46745;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (xP - xQ) * std::pow(ae, 2)) /
                        C46745;
    const double C47878 = std::pow(C47579, -1);
    const double C47571 = C47570 * C46744;
    const double C47847 = C47846 * C46744;
    const double C46892 = C46799 * C46887;
    const double C46895 = C46809 * C46887;
    const double C46901 = C46818 * C46887;
    const double C46915 = C46832 * C46887;
    const double C46936 = C46854 * C46887;
    const double C46805 = C46799 * C46802;
    const double C46811 = C46809 * C46802;
    const double C46821 = C46818 * C46802;
    const double C46836 = C46832 * C46802;
    const double C46860 = C46854 * C46802;
    const double C46804 = C46800 * C46801;
    const double C46796 = C46795 / C46792;
    const double C124 = (-(bs[1] * C46887 * C46795) / C46792) / C46743;
    const double C127 = (-(bs[1] * C46802 * C46795) / C46792) / C46743;
    const double C118 = -(C46794 * bs[1] * C46795) / C46792;
    const double C263 = -(C46963 * bs[1] * C46795) / C46792;
    const double C416 = -(C46793 * bs[1] * C46795) / C46792;
    const double C47609 = std::pow(C47596, -1);
    const double C47886 = std::pow(C47596, -2);
    const double C47610 = 2 * C47595;
    const double C47890 = C47595 * C47596;
    const double C47889 = 4 * C47595;
    const double C47879 = std::pow(C47594, 2);
    const double C47598 = C47593 * C47591;
    const double C47626 = C47625 * C47591;
    const double C47891 = std::pow(C47682, 2);
    const double C47644 = C47643 * C47591;
    const double C47893 = std::pow(C47724, 2);
    const double C47832 = C47831 * C46744;
    const double C47572 = C47571 / C46743;
    const double C47848 = C47847 / C46743;
    const double C46810 = C46809 * C46804;
    const double C46820 = C46818 * C46804;
    const double C46834 = C46832 * C46804;
    const double C46858 = C46854 * C46804;
    const double C46798 = -C46796;
    const double C46808 = std::pow(C46796, 4);
    const double C46831 = std::pow(C46796, 6);
    const double C139 = (ae * std::pow(C46796, 2) * bs[2] * C46793 * ae +
                         C46794 * std::pow(-C46796, 3) * bs[3] * C46793 *
                             C46794 * std::pow(ae, 2)) /
                        C46745;
    const double C47168 = std::pow(C46796, 2);
    const double C125 =
        (C46794 * std::pow(C46796, 2) * bs[2] * C46887) / C46743 -
        (ae * bs[1] * C46795) / (C46792 * C46743);
    const double C47924 = 4 * C47890;
    const double C47923 = C47592 * C47889;
    const double C47599 = C47598 / C47592;
    const double C47627 = C47626 / C47592;
    const double C47645 = C47644 / C47592;
    const double C47833 = C47832 / C46743;
    const double C47573 = -C47572;
    const double C47849 = -C47848;
    const double C46803 = std::pow(C46798, 3);
    const double C46817 = std::pow(C46798, 5);
    const double C46853 = std::pow(C46798, 7);
    const double C46813 = C46808 * C46811;
    const double C46812 = C46808 * C46810;
    const double C46897 = C46808 * C46895;
    const double C46902 = C46809 * C46808;
    const double C46839 = C46831 * C46836;
    const double C46838 = C46831 * C46834;
    const double C46917 = C46831 * C46915;
    const double C46937 = C46832 * C46831;
    const double C47170 = C47169 * C47168;
    const double C128 = (C46794 * C47168 * C47169 * C46802) / C46743;
    const double C273 = (C46963 * C47168 * C47169 * C46802) / C46743;
    const double C276 = (C46963 * C47168 * C47169 * C46887) / C46743;
    const double C426 = (C46793 * C47168 * C47169 * C46802) / C46743 -
                        (ae * bs[1] * C46795) / (C46792 * C46743);
    const double C429 = (C46793 * C47168 * C47169 * C46887) / C46743;
    const double C47600 = -C47599;
    const double C47628 = -C47627;
    const double C47646 = -C47645;
    const double C47834 = -C47833;
    const double C47574 = std::exp(C47573);
    const double C47850 = std::exp(C47849);
    const double C46806 = C46803 * C46805;
    const double C46888 = C46799 * C46803;
    const double C46893 = C46803 * C46892;
    const double C293 = ((yP - yQ) * C46803 * C46799 * C46804) / C46745;
    const double C446 = (ae * std::pow(C46796, 2) * bs[2] * C46887 +
                         C46793 * C46803 * C46799 * C46804) /
                        C46745;
    const double C46823 = C46817 * C46821;
    const double C46822 = C46817 * C46820;
    const double C46903 = C46817 * C46901;
    const double C46916 = C46818 * C46817;
    const double C46863 = C46853 * C46860;
    const double C46862 = C46853 * C46858;
    const double C46939 = C46853 * C46936;
    const double C46816 = ae * C46813;
    const double C46815 = C46794 * C46813;
    const double C47304 = C46793 * C46813;
    const double C47330 = C46963 * C46813;
    const double C294 =
        (C46803 * C46799 * C46804 + C46812 * std::pow(yP - yQ, 2)) / C46745;
    const double C46898 = C46794 * C46897;
    const double C46980 = C46963 * C46897;
    const double C47003 = ae * C46897;
    const double C47002 = C46793 * C46897;
    const double C46905 = C46794 * C46902;
    const double C46904 = C46902 * ae;
    const double C47178 = C46902 * C46819;
    const double C47276 = C46902 * C46972;
    const double C47306 = C46902 * C47005;
    const double C47331 = C46963 * C46902;
    const double C47392 = C46793 * C46902;
    const double C46841 = C46839 * C46819;
    const double C46852 = ae * C46839;
    const double C46851 = C46794 * C46839;
    const double C47419 = C46839 * C46972;
    const double C47447 = C46963 * C46839;
    const double C47465 = C46793 * C46839;
    const double C46840 = C46794 * C46838;
    const double C47036 = C46838 * C46972;
    const double C47058 = C46963 * C46838;
    const double C47078 = C46793 * C46838;
    const double C46921 = C46794 * C46917;
    const double C47043 = C46917 * C46972;
    const double C47059 = C46963 * C46917;
    const double C47079 = C46917 * C47005;
    const double C47147 = ae * C46917;
    const double C47146 = C46793 * C46917;
    const double C46942 = C46937 * C46819;
    const double C46941 = C46794 * C46937;
    const double C46940 = C46937 * ae;
    const double C47427 = C46937 * C46972;
    const double C47450 = C46963 * C46937;
    const double C47468 = C46937 * C47005;
    const double C119 = C47170 * C46819 - (bs[1] * C46795) / C46792;
    const double C262 = C46963 * C46794 * C47170;
    const double C264 = C47170 * C46972 - (bs[1] * C46795) / C46792;
    const double C415 = C46793 * C46794 * C47170;
    const double C417 = C47170 * C47005 - (bs[1] * C46795) / C46792;
    const double C812 = C46793 * C46963 * C47170;
    const double C47601 = std::exp(C47600);
    const double C47629 = std::exp(C47628);
    const double C47647 = std::exp(C47646);
    const double C47835 = std::exp(C47834);
    const double C21680 = C47574 * C276;
    const double C26280 = C47574 * C429;
    const double C46748 = C46746 * C47574;
    const double C47914 = C47878 * C47574;
    const double C47913 = C47574 * C47876;
    const double C4575 = -(C47574 * C47877) / C46743;
    const double C46783 = C46782 * C47850;
    const double C116 = -(2 * C46744 * (zA - zB) * C47850) / C46743;
    const double C10311 =
        ((C47850 - (C46763 * 2 * C46744 * C46763 * C47850) / C46743) * ae) /
            C46743 -
        (0 * be) / C46747;
    const double C10312 =
        (0 * ae) / C46743 - (C46744 * C46763 * C47850) / C46745;
    const double C31580 =
        (-(0 * be) / C46743) / (2 * C46743) -
        ((C47850 - (C46763 * 2 * C46744 * C46763 * C47850) / C46743) * be) /
            C46743;
    const double C31581 =
        (-(2 * C46744 * C46763 * C47850) / C46743) / (2 * C46743) -
        (0 * be) / C46743;
    const double C47947 = C47878 * C47850;
    const double C47946 = C47850 * C47910;
    const double C31578 = -(C47850 * C47912) / C46743;
    const double C140 = (C46803 * C46799 * C46804 + ae * C46794 * C46806 +
                         C46794 * (ae * C46806 + C46794 * std::pow(C46796, 4) *
                                                     bs[4] * C46804)) /
                        C46745;
    const double C141 =
        (2 * (ae * C46806 + C46794 * C46812) +
         ae * (C46806 + C46813 * std::pow(C46794, 2)) +
         C46794 * (C46812 + ae * C46794 * C46813 +
                   C46794 * (ae * C46813 +
                             C46794 * std::pow(C46798, 5) * bs[5] * C46804))) /
        C46745;
    const double C292 = ((yP - yQ) * (ae * C46806 + C46794 * C46812)) / C46745;
    const double C445 = (ae * (C46794 * C46803 * C46799 * C46887 +
                               bs[2] * std::pow(C46796, 2) * ae) +
                         C46793 * (ae * C46806 + C46794 * C46812)) /
                        C46745;
    const double C129 = (C47168 * C47169 * C46802 + C46806 * C46819) / C46743;
    const double C130 =
        (2 * C46794 * C46806 + C46794 * (C46806 + C46813 * C46819)) / C46743;
    const double C271 = (C46963 * (C46806 + C46813 * C46819)) / C46743;
    const double C272 = (C46963 * C46794 * C46806) / C46743;
    const double C280 = (C47168 * C47169 * C46802 + C46806 * C46972) / C46743;
    const double C425 =
        (C46793 * C46794 * C46806 + C46794 * C47170 * ae) / C46743;
    const double C433 =
        (C47168 * C47169 * C46802 + C46793 * (C46793 * C46806 + C47170 * ae) +
         C46793 * C47170 * ae) /
        C46743;
    const double C820 =
        (C46793 * C46963 * C46806 + C46963 * C47170 * ae) / C46743;
    const double C1024 =
        (2 * C46963 * C46806 + C46963 * (C46806 + C46813 * C46972)) / C46743;
    const double C46896 = C46888 * ae;
    const double C47177 = C46794 * C46888;
    const double C47262 = C46963 * C46888;
    const double C47305 = C46793 * C46888;
    const double C424 = (C46793 * (C46806 + C46813 * C46819) +
                         (C47170 + C46888 * C46819) * ae) /
                        C46743;
    const double C1167 = (C46793 * (C46806 + C46813 * C46972) +
                          (C47170 + C46888 * C46972) * ae) /
                         C46743;
    const double C120 =
        2 * C46794 * C47170 + C46794 * (C47170 + C46888 * C46819);
    const double C261 = C46963 * (C47170 + C46888 * C46819);
    const double C414 = C46793 * (C47170 + C46888 * C46819);
    const double C1018 =
        2 * C46963 * C47170 + C46963 * (C47170 + C46888 * C46972);
    const double C1155 = C46793 * (C47170 + C46888 * C46972);
    const double C1846 =
        2 * C46793 * C47170 + C46793 * (C47170 + C46888 * C47005);
    const double C447 = (C46803 * C46799 * C46804 + ae * C46793 * C46893 +
                         C46793 * (ae * C46893 + C46793 * C46812)) /
                        C46745;
    const double C827 =
        (ae * C46963 * C46893 + C46793 * C46963 * C46812) / C46745;
    const double C126 =
        (C47168 * C47169 * C46887 + C46794 * (C46794 * C46893 + C47170 * ae) +
         C46794 * C47170 * ae) /
        C46743;
    const double C275 = (C46963 * (C46794 * C46893 + C47170 * ae)) / C46743;
    const double C277 = (C47168 * C47169 * C46887 + C46893 * C46972) / C46743;
    const double C428 = (C46793 * (C46794 * C46893 + C47170 * ae)) / C46743;
    const double C430 = (C47168 * C47169 * C46887 + C46893 * C47005) / C46743;
    const double C817 = (C46793 * C46963 * C46893) / C46743;
    const double C1027 =
        (2 * C46963 * C46893 + C46963 * (C46893 + C46897 * C46972)) / C46743;
    const double C1170 = (C46793 * (C46893 + C46897 * C46972)) / C46743;
    const double C1855 =
        (2 * C46793 * C46893 + C46793 * (C46893 + C46897 * C47005)) / C46743;
    const double C21682 = C47574 * C293;
    const double C26282 = C47574 * C446;
    const double C46825 = C46823 * C46819;
    const double C46830 = ae * C46823;
    const double C46829 = C46794 * C46823;
    const double C47341 = C46823 * C46972;
    const double C47367 = C46963 * C46823;
    const double C47391 = C46793 * C46823;
    const double C1031 =
        (3 * (C46806 + C46813 * C46972) +
         C46963 * (2 * C46963 * C46813 + C46963 * (C46813 + C46823 * C46972))) /
        C46743;
    const double C46824 = C46794 * C46822;
    const double C47004 = C46793 * C46822;
    const double C47027 = C46963 * C46822;
    const double C1036 = (2 * C46963 * C46812 +
                          C46963 * (C46812 + C46822 * std::pow(C46963, 2))) /
                         C46745;
    const double C1037 =
        (3 * (C46812 + C46822 * C46972) +
         C46963 * (2 * C46963 * C46822 + C46963 * (C46822 + C46838 * C46972))) /
        C46745;
    const double C1182 = (ae * (C46893 + C46897 * C46972) +
                          C46793 * (C46812 + C46822 * C46972)) /
                         C46745;
    const double C1864 = (2 * (ae * C46893 + C46793 * C46812) +
                          ae * (C46893 + C46897 * std::pow(C46793, 2)) +
                          C46793 * (C46812 + ae * C46793 * C46897 +
                                    C46793 * (ae * C46897 + C46793 * C46822))) /
                         C46745;
    const double C46906 = C46794 * C46903;
    const double C46985 = C46903 * C46972;
    const double C47007 = C46903 * C47005;
    const double C47028 = C46963 * C46903;
    const double C47077 = ae * C46903;
    const double C47076 = C46793 * C46903;
    const double C46920 = C46916 * C46819;
    const double C46919 = C46794 * C46916;
    const double C46918 = C46916 * ae;
    const double C47350 = C46916 * C46972;
    const double C47370 = C46963 * C46916;
    const double C47393 = C46916 * C47005;
    const double C47466 = C46793 * C46916;
    const double C46865 = C46863 * C46819;
    const double C46864 = C46794 * C46862;
    const double C47105 = C46862 * C46972;
    const double C47130 = C46963 * C46862;
    const double C47148 = C46793 * C46862;
    const double C46943 = C46794 * C46939;
    const double C47112 = C46939 * C46972;
    const double C47131 = C46963 * C46939;
    const double C47150 = C46939 * C47005;
    const double C281 = (C46794 * C46806 + C46815 * C46972) / C46743;
    const double C21686 = C47574 * C294;
    const double C1179 = (C46963 * C46812 + ae * C46793 * C46980 +
                          C46793 * (ae * C46980 + C46793 * C46963 * C46822)) /
                         C46745;
    const double C1164 = (C46963 * C46893 + C46980 * C47005) / C46743;
    const double C46907 = C46905 * ae;
    const double C47183 = 2 * C46905;
    const double C47260 = C46963 * C46905;
    const double C47311 = C46793 * C46905;
    const double C47179 = C46888 + C47178;
    const double C47277 = C46888 + C47276;
    const double C47308 = C46888 + C47306;
    const double C47349 = 2 * C47331;
    const double C47369 = C46793 * C47331;
    const double C47368 = C47331 * ae;
    const double C47397 = 2 * C47392;
    const double C47395 = C47392 * ae;
    const double C46843 = C46823 + C46841;
    const double C46859 = 2 * C46851;
    const double C46857 = ae * C46851;
    const double C47344 = C46851 * C46972;
    const double C47376 = C46963 * C46851;
    const double C47404 = C46793 * C46851;
    const double C47420 = C46823 + C47419;
    const double C47451 = C46793 * C47447;
    const double C47037 = C46822 + C47036;
    const double C47060 = C46793 * C47058;
    const double C47104 = 2 * C47058;
    const double C47044 = C46903 + C47043;
    const double C47061 = C47059 * C47005;
    const double C47111 = 2 * C47059;
    const double C47129 = ae * C47059;
    const double C47128 = C46793 * C47059;
    const double C47083 = C46903 + C47079;
    const double C47154 = 2 * C47146;
    const double C47152 = ae * C47146;
    const double C46945 = C46916 + C46942;
    const double C46944 = C46941 * ae;
    const double C47356 = C46941 * C46972;
    const double C47379 = C46963 * C46941;
    const double C47406 = C46941 * C47005;
    const double C47428 = C46916 + C47427;
    const double C47453 = C47450 * C47005;
    const double C47472 = C46916 + C47468;
    const double C47603 = C47601 * C47594;
    const double C47602 = C47601 / C47596;
    const double C47612 = C47609 * C47601;
    const double C47882 = C47601 * C47597;
    const double C47921 = C47886 * C47601;
    const double C47915 = C47601 * C47879;
    const double C47683 = C47629 / C47596;
    const double C47685 = C47629 * C47682;
    const double C47692 = C47609 * C47629;
    const double C47897 = C47629 * C47684;
    const double C47927 = C47886 * C47629;
    const double C47925 = C47629 * C47891;
    const double C47725 = C47647 / C47596;
    const double C47727 = C47647 * C47724;
    const double C47734 = C47609 * C47647;
    const double C47903 = C47647 * C47726;
    const double C47930 = C47886 * C47647;
    const double C47928 = C47647 * C47893;
    const double C47945 = C47878 * C47835;
    const double C47944 = C47835 * C47909;
    const double C15891 = -(C47835 * C47911) / C46743;
    const double C115 = ((0 * ae) / C46743 - C46748 / C46745) / (2 * C46743) -
                        (0 * be) / C46743;
    const double C4579 =
        (-C46742 / C46743) / (2 * C46743) -
        ((C47574 - (C46741 * 2 * C46748) / C46743) * be) / C46743;
    const double C4580 =
        (-(2 * C46748) / C46743) / (2 * C46743) - (0 * be) / C46743;
    const double C15893 =
        ((C47574 - (C46741 * 2 * C46748) / C46743) * ae) / C46743 -
        C46742 / C46747;
    const double C15894 = (0 * ae) / C46743 - C46748 / C46745;
    const double C21567 = -(2 * C46748) / C46743;
    const double C114 =
        (((C47574 - (C46741 * 2 * C46748) / C46743) * ae) / C46743 -
         C46742 / C46747) /
            (2 * C46743) -
        ((C46741 * ((0 * ae) / C46743 - C46748 / C46745) + C47914) * be) /
            C46743;
    const double C103 = C47914 / C47579;
    const double C101 = C47574 / C47579 - (C47913 * C47877) / C46745;
    const double C102 = C47913 / C46747 - (C47914 * C47877) / C46743;
    const double C15889 = C47913 / C46743;
    const double C4739 = C4575 * C294;
    const double C4733 = C4575 * C293;
    const double C4729 = C4575 * C276;
    const double C10611 = C4575 * C446;
    const double C10607 = C4575 * C429;
    const double C42663 = ((0 * ae) / C46743 - C46783 / C46745) / (2 * C46743) -
                          (0 * be) / C46743;
    const double C42662 =
        (((C47850 - (C46763 * 2 * C46783) / C46743) * ae) / C46743 -
         C46781 / C46747) /
            (2 * C46743) -
        ((C46763 * ((0 * ae) / C46743 - C46783 / C46745) + C47947) * be) /
            C46743;
    const double C42660 = C47947 / C47579;
    const double C10309 = C47946 / C46743;
    const double C42658 = C47850 / C47579 - (C47946 * C47912) / C46745;
    const double C42659 = C47946 / C46747 - (C47947 * C47912) / C46743;
    const double C4749 = C4575 * C292;
    const double C4735 = C47914 * C292;
    const double C16049 = C47914 * C292;
    const double C21694 = C47574 * C292;
    const double C10627 = C4575 * C445;
    const double C10613 = C47914 * C445;
    const double C26290 = C47574 * C445;
    const double C31882 = C47914 * C445;
    const double C46899 = C46898 + C46896;
    const double C47307 = C47304 + C46896;
    const double C1852 =
        (2 * (C46793 * C46806 + C47170 * ae) +
         C46793 * (C46806 + C46793 * (C46793 * C46813 + C46896) +
                   C46793 * C46888 * ae) +
         (C47170 + C46888 * C47005) * ae) /
        C46743;
    const double C434 =
        (C46794 * C46806 + C46793 * (C46793 * C46815 + C47177 * ae) +
         C46793 * C47177 * ae) /
        C46743;
    const double C821 =
        (C46793 * C46963 * C46815 + C46963 * C47177 * ae) / C46743;
    const double C265 = C46794 * C47170 + C47177 * C46972;
    const double C418 = C46794 * C47170 + C47177 * C47005;
    const double C813 = C46793 * C46963 * C47177;
    const double C1017 =
        2 * C46963 * C47177 + C46963 * (C47177 + C46905 * C46972);
    const double C1154 = C46793 * (C47177 + C46905 * C46972);
    const double C1845 =
        2 * C46793 * C47177 + C46793 * (C47177 + C46905 * C47005);
    const double C1161 =
        (C46963 * C46806 + C46793 * (C46793 * C46963 * C46813 + C47262 * ae) +
         C46793 * C47262 * ae) /
        C46743;
    const double C2228 =
        (2 * (C46793 * C47330 + C47262 * ae) +
         C46793 * (C47330 + C46793 * (C46793 * C46963 * C46823 + C47331 * ae) +
                   C46793 * C47331 * ae) +
         (C47262 + C47331 * C47005) * ae) /
        C46743;
    const double C1152 = C46963 * C47170 + C47262 * C47005;
    const double C2222 =
        2 * C46793 * C47262 + C46793 * (C47262 + C47331 * C47005);
    const double C10617 = C4575 * C447;
    const double C26284 = C47574 * C447;
    const double C5415 = C4575 * C827;
    const double C22227 = C47574 * C827;
    const double C4745 = C4575 * C275;
    const double C4731 = C47914 * C275;
    const double C16045 = C47914 * C275;
    const double C21692 = C47574 * C275;
    const double C4743 = C4575 * C277;
    const double C21684 = C47574 * C277;
    const double C10623 = C4575 * C428;
    const double C10609 = C47914 * C428;
    const double C26288 = C47574 * C428;
    const double C31878 = C47914 * C428;
    const double C10621 = C4575 * C430;
    const double C26286 = C47574 * C430;
    const double C5419 = C4575 * C817;
    const double C22229 = C47574 * C817;
    const double C5685 = C4575 * C1027;
    const double C21690 = C47574 * C1027;
    const double C5871 = C4575 * C1170;
    const double C22225 = C47574 * C1170;
    const double C12355 = C4575 * C1855;
    const double C28042 = C47574 * C1855;
    const double C46827 = C46813 + C46825;
    const double C46842 = C46830 + C46840;
    const double C46835 = 2 * C46829;
    const double C46833 = ae * C46829;
    const double C47310 = C46793 * C46829;
    const double C47333 = C46963 * C46829;
    const double C1023 =
        (2 * C46963 * C46815 + C46963 * (C46815 + C46829 * C46972)) / C46743;
    const double C1032 =
        (3 * (C46815 + C46829 * C46972) +
         C46963 * (2 * C46963 * C46829 + C46963 * (C46829 + C46851 * C46972))) /
        C46743;
    const double C1166 = (C46793 * (C46815 + C46829 * C46972) +
                          (C47177 + C46905 * C46972) * ae) /
                         C46743;
    const double C47342 = C46813 + C47341;
    const double C47371 = C46793 * C47367;
    const double C47418 = 2 * C47367;
    const double C47394 = C47391 + C46904;
    const double C46826 = C46816 + C46824;
    const double C47006 = C47003 + C47004;
    const double C5689 = C4575 * C1036;
    const double C21688 = C47574 * C1036;
    const double C5695 = C4575 * C1037;
    const double C22450 = C47574 * C1037;
    const double C5875 = C4575 * C1182;
    const double C22223 = C47574 * C1182;
    const double C12359 = C4575 * C1864;
    const double C28044 = C47574 * C1864;
    const double C46908 = C46906 + C46904;
    const double C46986 = C46897 + C46985;
    const double C47008 = C46897 + C47007;
    const double C47042 = 2 * C47028;
    const double C47057 = ae * C47028;
    const double C47056 = C46793 * C47028;
    const double C2231 =
        (2 * (ae * C46980 + C46793 * C47027) + ae * (C46980 + C47028 * C47005) +
         C46793 * (C47027 + ae * C46793 * C47028 +
                   C46793 * (ae * C47028 + C46793 * C46963 * C46838))) /
        C46745;
    const double C2225 =
        (2 * C46793 * C46980 + C46793 * (C46980 + C47028 * C47005)) / C46743;
    const double C47081 = C47077 + C47078;
    const double C47082 = 2 * C47076;
    const double C47080 = ae * C47076;
    const double C46923 = C46902 + C46920;
    const double C46922 = C46919 * ae;
    const double C46938 = 2 * C46919;
    const double C47279 = C46919 * C46972;
    const double C47312 = C46919 * C47005;
    const double C47334 = C46963 * C46919;
    const double C47405 = C46793 * C46919;
    const double C46924 = C46921 + C46918;
    const double C47470 = C47465 + C46918;
    const double C47351 = C46902 + C47350;
    const double C47372 = C47370 * C47005;
    const double C47426 = 2 * C47370;
    const double C47449 = C46793 * C47370;
    const double C47448 = C47370 * ae;
    const double C47396 = C46902 + C47393;
    const double C47473 = 2 * C47466;
    const double C47471 = C47466 * ae;
    const double C46867 = C46839 + C46865;
    const double C46866 = C46852 + C46864;
    const double C47106 = C46838 + C47105;
    const double C47133 = C46793 * C47130;
    const double C47153 = C47147 + C47148;
    const double C46946 = C46943 + C46940;
    const double C47113 = C46917 + C47112;
    const double C47135 = C47131 * C47005;
    const double C47155 = C46917 + C47150;
    const double C5867 = C4575 * C1179;
    const double C22582 = C47574 * C1179;
    const double C5863 = C4575 * C1164;
    const double C22580 = C47574 * C1164;
    const double C1851 =
        (2 * (C46793 * C46815 + C47177 * ae) +
         C46793 * (C46815 + C46793 * (C46793 * C46829 + C46907) +
                   C46793 * C46905 * ae) +
         (C47177 + C46905 * C47005) * ae) /
        C46743;
    const double C1160 =
        (C46963 * C46815 + C46793 * (C46793 * C46963 * C46829 + C47260 * ae) +
         C46793 * C47260 * ae) /
        C46743;
    const double C1151 = C46963 * C47177 + C47260 * C47005;
    const double C121 = 3 * (C47170 + C46888 * C46819) +
                        C46794 * (2 * C47177 + C46794 * C47179);
    const double C266 = C47170 + C46888 * C46819 + C47179 * C46972;
    const double C267 = C46963 * (2 * C47177 + C46794 * C47179);
    const double C419 = C47170 + C46888 * C46819 + C47179 * C47005;
    const double C420 = C46793 * (2 * C47177 + C46794 * C47179);
    const double C814 = C46793 * C46963 * C47179;
    const double C1174 =
        (C46806 + C46813 * C46972 +
         C46793 * (C46793 * (C46813 + C46823 * C46972) + C47277 * ae) +
         C46793 * C47277 * ae) /
        C46743;
    const double C1548 =
        (C46793 * (2 * C46963 * C46813 + C46963 * (C46813 + C46823 * C46972)) +
         (2 * C47262 + C46963 * C47277) * ae) /
        C46743;
    const double C1019 = 3 * (C47170 + C46888 * C46972) +
                         C46963 * (2 * C47262 + C46963 * C47277);
    const double C1156 = C47170 + C46888 * C46972 + C47277 * C47005;
    const double C1542 = C46793 * (2 * C47262 + C46963 * C47277);
    const double C1847 = 3 * (C47170 + C46888 * C47005) +
                         C46793 * (2 * C47305 + C46793 * C47308);
    const double C46845 = C46794 * C46843;
    const double C46855 = 3 * C46843;
    const double C46850 = ae * C46843;
    const double C47316 = C46793 * C46843;
    const double C47336 = C46963 * C46843;
    const double C46861 = C46838 + C46857;
    const double C47345 = C46829 + C47344;
    const double C47380 = C46793 * C47376;
    const double C47421 = C46963 * C47420;
    const double C47437 = C46793 * C47420;
    const double C5681 =
        (4 * (2 * C47027 + C46963 * C47037) +
         C46963 *
             (3 * C47037 + C46963 * (2 * C46963 * C46838 +
                                     C46963 * (C46838 + C46862 * C46972)))) /
        C46745;
    const double C47045 = C46963 * C47044;
    const double C47110 = 3 * C47044;
    const double C47121 = ae * C47044;
    const double C47120 = C46793 * C47044;
    const double C47063 = C47028 + C47061;
    const double C47134 = 2 * C47128;
    const double C47132 = ae * C47128;
    const double C47086 = C46793 * C47083;
    const double C47149 = 3 * C47083;
    const double C47145 = ae * C47083;
    const double C47156 = C46838 + C47152;
    const double C46948 = C46794 * C46945;
    const double C46947 = C46945 * ae;
    const double C47282 = C46945 * C46972;
    const double C47318 = C46945 * C47005;
    const double C47337 = C46963 * C46945;
    const double C47357 = C46919 + C47356;
    const double C47381 = C47379 * C47005;
    const double C47409 = C46919 + C47406;
    const double C47429 = C46963 * C47428;
    const double C47440 = C47428 * C47005;
    const double C47456 = C47370 + C47453;
    const double C47475 = C46793 * C47472;
    const double C47604 = C47603 * C47597;
    const double C47611 = C47603 / C47610;
    const double C47883 = C47609 * C47603;
    const double C47881 = C47603 / C47592;
    const double C258 = (C47601 * std::pow(C47597, 2)) / C47595 + C47602;
    const double C47613 = C47612 * C47597;
    const double C47887 = C47594 * C47612;
    const double C47885 = 2 * C47612;
    const double C47931 = C47612 / C47889;
    const double C112 = C47612 / C47924;
    const double C2703 = C47612 / C47596;
    const double C47917 = C47882 / C47592;
    const double C259 = (-2 * C47609 * C47882) / C47592;
    const double C47948 = C47915 / C47595;
    const double C942 = (C47629 * std::pow(C47684, 2)) / C47595 + C47683;
    const double C47686 = C47685 * C47684;
    const double C47691 = C47685 / C47610;
    const double C47895 = C47685 / C47592;
    const double C47892 = C47609 * C47685;
    const double C47693 = C47692 * C47684;
    const double C47901 = C47682 * C47692;
    const double C47900 = 2 * C47692;
    const double C47937 = C47692 / C47889;
    const double C1014 = C47692 / C47924;
    const double C2700 = C47692 / C47596;
    const double C47933 = C47897 / C47592;
    const double C943 = (-2 * C47609 * C47897) / C47592;
    const double C47953 = C47925 / C47595;
    const double C1664 = (C47647 * std::pow(C47726, 2)) / C47595 + C47725;
    const double C47728 = C47727 * C47726;
    const double C47733 = C47727 / C47610;
    const double C47896 = C47727 / C47592;
    const double C47894 = C47609 * C47727;
    const double C47735 = C47734 * C47726;
    const double C47907 = C47724 * C47734;
    const double C47906 = 2 * C47734;
    const double C47943 = C47734 / C47889;
    const double C1843 = C47734 / C47924;
    const double C3602 = C47734 / C47596;
    const double C47939 = C47903 / C47592;
    const double C1665 = (-2 * C47609 * C47903) / C47592;
    const double C47955 = C47928 / C47595;
    const double C21566 = C47945 / C47579;
    const double C4577 = C47944 / C46743;
    const double C21564 = C47835 / C47579 - (C47944 * C47911) / C46745;
    const double C21565 = C47944 / C46747 - (C47945 * C47911) / C46743;
    const double C4764 = C4579 * C271;
    const double C4760 = C4579 * C261;
    const double C4756 = C4579 * C281;
    const double C4748 = C4579 * C272;
    const double C4744 = C4579 * C262;
    const double C4742 = C4579 * C264;
    const double C4738 = C4579 * C280;
    const double C4732 = C4579 * C273;
    const double C4728 = C4579 * C263;
    const double C5418 = C4579 * C812;
    const double C5414 = C4579 * C820;
    const double C5694 = C4579 * C1031;
    const double C5688 = C4579 * C1024;
    const double C5684 = C4579 * C1018;
    const double C5874 = C4579 * C1167;
    const double C5870 = C4579 * C1155;
    const double C10642 = C4579 * C424;
    const double C10638 = C4579 * C414;
    const double C10626 = C4579 * C425;
    const double C10622 = C4579 * C415;
    const double C10620 = C4579 * C417;
    const double C10616 = C4579 * C433;
    const double C10610 = C4579 * C426;
    const double C10606 = C4579 * C416;
    const double C12354 = C4579 * C1846;
    const double C4750 = C4580 * C271;
    const double C4746 = C4580 * C261;
    const double C4736 = C4580 * C281;
    const double C4734 = C4580 * C272;
    const double C4730 = C4580 * C262;
    const double C10628 = C4580 * C424;
    const double C10624 = C4580 * C414;
    const double C10612 = C4580 * C425;
    const double C10608 = C4580 * C415;
    const double C16078 = C15893 * C271;
    const double C16074 = C15893 * C261;
    const double C16070 = C15893 * C281;
    const double C16062 = C15893 * C272;
    const double C16058 = C15893 * C262;
    const double C16056 = C15893 * C264;
    const double C16052 = C15893 * C280;
    const double C16046 = C15893 * C273;
    const double C16042 = C15893 * C263;
    const double C16732 = C15893 * C812;
    const double C16728 = C15893 * C820;
    const double C17000 = C15893 * C1031;
    const double C16994 = C15893 * C1024;
    const double C16990 = C15893 * C1018;
    const double C17172 = C15893 * C1167;
    const double C17168 = C15893 * C1155;
    const double C31911 = C15893 * C424;
    const double C31907 = C15893 * C414;
    const double C31895 = C15893 * C425;
    const double C31891 = C15893 * C415;
    const double C31889 = C15893 * C417;
    const double C31885 = C15893 * C433;
    const double C31879 = C15893 * C426;
    const double C31875 = C15893 * C416;
    const double C33615 = C15893 * C1846;
    const double C16064 = C15894 * C271;
    const double C16060 = C15894 * C261;
    const double C16050 = C15894 * C281;
    const double C16048 = C15894 * C272;
    const double C16044 = C15894 * C262;
    const double C31897 = C15894 * C424;
    const double C31893 = C15894 * C414;
    const double C31881 = C15894 * C425;
    const double C31877 = C15894 * C415;
    const double C21705 = C21567 * C271;
    const double C21703 = C21567 * C261;
    const double C21697 = C21567 * C281;
    const double C21693 = C21567 * C272;
    const double C21691 = C21567 * C262;
    const double C21689 = C21567 * C1018;
    const double C21687 = C21567 * C1024;
    const double C21685 = C21567 * C280;
    const double C21683 = C21567 * C264;
    const double C21681 = C21567 * C273;
    const double C21679 = C21567 * C263;
    const double C22228 = C21567 * C812;
    const double C22226 = C21567 * C820;
    const double C22224 = C21567 * C1155;
    const double C22222 = C21567 * C1167;
    const double C22449 = C21567 * C1031;
    const double C26297 = C21567 * C424;
    const double C26295 = C21567 * C414;
    const double C26289 = C21567 * C425;
    const double C26287 = C21567 * C415;
    const double C26285 = C21567 * C417;
    const double C26283 = C21567 * C433;
    const double C26281 = C21567 * C426;
    const double C26279 = C21567 * C416;
    const double C28041 = C21567 * C1846;
    const double C16063 = C15889 * C292;
    const double C16059 = C15889 * C275;
    const double C16057 = C15889 * C277;
    const double C16053 = C15889 * C294;
    const double C16047 = C15889 * C293;
    const double C16043 = C15889 * C276;
    const double C16733 = C15889 * C817;
    const double C16729 = C15889 * C827;
    const double C17001 = C15889 * C1037;
    const double C16995 = C15889 * C1036;
    const double C16991 = C15889 * C1027;
    const double C17173 = C15889 * C1182;
    const double C17169 = C15889 * C1170;
    const double C17165 = C15889 * C1179;
    const double C17161 = C15889 * C1164;
    const double C31896 = C15889 * C445;
    const double C31892 = C15889 * C428;
    const double C31890 = C15889 * C430;
    const double C31886 = C15889 * C447;
    const double C31880 = C15889 * C446;
    const double C31876 = C15889 * C429;
    const double C33620 = C15889 * C1864;
    const double C33616 = C15889 * C1855;
    const double C113 =
        (((0 - (C46741 * C46742) / C46743) * ae) / C46743 - (0 * be) / C46747) /
            (2 * C46743) -
        ((C46741 * (((C47574 - (C46741 * 2 * C46748) / C46743) * ae) / C46743 -
                    C46742 / C46747) +
          C15889) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46748 / C46745;
    const double C42661 =
        (((0 - (C46763 * C46781) / C46743) * ae) / C46743 - (0 * be) / C46747) /
            (2 * C46743) -
        ((C46763 * (((C47850 - (C46763 * 2 * C46783) / C46743) * ae) / C46743 -
                    C46781 / C46747) +
          C10309) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46783 / C46745;
    const double C131 =
        (2 * (C46794 * C46893 + C47170 * ae) +
         C46794 * (C46893 + C46794 * C46899 + C46794 * C46888 * ae) +
         (C47170 + C46888 * C46819) * ae) /
        C46743;
    const double C274 =
        (C46963 * (C46893 + C46794 * C46899 + C47177 * ae)) / C46743;
    const double C278 =
        (C46794 * C46893 + C47170 * ae + C46899 * C46972) / C46743;
    const double C427 =
        (C46793 * (C46893 + C46794 * C46899 + C47177 * ae)) / C46743;
    const double C431 =
        (C46794 * C46893 + C47170 * ae + C46899 * C47005) / C46743;
    const double C818 = (C46793 * C46963 * C46899) / C46743;
    const double C1859 =
        (3 * (C46806 + C46793 * C47307 + C47305 * ae) +
         C46793 * (2 * C47307 +
                   C46793 * (C46813 + C46793 * (C46793 * C46823 + C46904) +
                             C46793 * C46902 * ae) +
                   C47308 * ae) +
         (2 * C47305 + C46793 * C47308) * ae) /
        C46743;
    const double C12358 = C4579 * C1852;
    const double C28043 = C21567 * C1852;
    const double C33619 = C15893 * C1852;
    const double C10634 = C4579 * C434;
    const double C10614 = C4580 * C434;
    const double C26293 = C21567 * C434;
    const double C31903 = C15893 * C434;
    const double C31883 = C15894 * C434;
    const double C5424 = C4579 * C821;
    const double C5412 = C4580 * C821;
    const double C16738 = C15893 * C821;
    const double C16726 = C15894 * C821;
    const double C22232 = C21567 * C821;
    const double C4752 = C4579 * C265;
    const double C4740 = C4580 * C265;
    const double C16066 = C15893 * C265;
    const double C16054 = C15894 * C265;
    const double C21695 = C21567 * C265;
    const double C10630 = C4579 * C418;
    const double C10618 = C4580 * C418;
    const double C26291 = C21567 * C418;
    const double C31899 = C15893 * C418;
    const double C31887 = C15894 * C418;
    const double C5420 = C4579 * C813;
    const double C5416 = C4580 * C813;
    const double C16734 = C15893 * C813;
    const double C16730 = C15894 * C813;
    const double C22230 = C21567 * C813;
    const double C5686 = C4580 * C1017;
    const double C6034 = C4579 * C1017;
    const double C16992 = C15894 * C1017;
    const double C17332 = C15893 * C1017;
    const double C21699 = C21567 * C1017;
    const double C5872 = C4580 * C1154;
    const double C6240 = C4579 * C1154;
    const double C17170 = C15894 * C1154;
    const double C17538 = C15893 * C1154;
    const double C22234 = C21567 * C1154;
    const double C12356 = C4580 * C1845;
    const double C12708 = C4579 * C1845;
    const double C28395 = C21567 * C1845;
    const double C33617 = C15894 * C1845;
    const double C33969 = C15893 * C1845;
    const double C5866 = C4579 * C1161;
    const double C17164 = C15893 * C1161;
    const double C22581 = C21567 * C1161;
    const double C7254 = C4579 * C2228;
    const double C18528 = C15893 * C2228;
    const double C23637 = C21567 * C2228;
    const double C5862 = C4579 * C1152;
    const double C17160 = C15893 * C1152;
    const double C22579 = C21567 * C1152;
    const double C7258 = C4579 * C2222;
    const double C18532 = C15893 * C2222;
    const double C23639 = C21567 * C2222;
    const double C133 = (3 * (C46806 + C46813 * C46819) +
                         C46794 * (2 * C46815 + C46794 * C46827)) /
                        C46743;
    const double C282 = (C46806 + C46813 * C46819 + C46827 * C46972) / C46743;
    const double C284 = (C46963 * (2 * C46815 + C46794 * C46827)) / C46743;
    const double C435 =
        (C46806 + C46813 * C46819 + C46793 * (C46793 * C46827 + C47179 * ae) +
         C46793 * C47179 * ae) /
        C46743;
    const double C437 = (C46793 * (2 * C46815 + C46794 * C46827) +
                         (2 * C47177 + C46794 * C47179) * ae) /
                        C46743;
    const double C822 =
        (C46793 * C46963 * C46827 + C46963 * C47179 * ae) / C46743;
    const double C1022 =
        (2 * C46963 * C46827 + C46963 * (C46827 + C46843 * C46972)) / C46743;
    const double C46844 = C46794 * C46842;
    const double C46849 = 2 * C46842;
    const double C47012 = C46793 * C46842;
    const double C47030 = C46963 * C46842;
    const double C46837 = C46822 + C46833;
    const double C47313 = C47310 + C46907;
    const double C5690 = C4580 * C1023;
    const double C6030 = C4579 * C1023;
    const double C16996 = C15894 * C1023;
    const double C17328 = C15893 * C1023;
    const double C21701 = C21567 * C1023;
    const double C5692 = C4580 * C1032;
    const double C16998 = C15894 * C1032;
    const double C22711 = C21567 * C1032;
    const double C5876 = C4580 * C1166;
    const double C6236 = C4579 * C1166;
    const double C17174 = C15894 * C1166;
    const double C17534 = C15893 * C1166;
    const double C22236 = C21567 * C1166;
    const double C5679 =
        (4 * (2 * C47330 + C46963 * C47342) +
         C46963 *
             (3 * C47342 + C46963 * (2 * C46963 * C46823 +
                                     C46963 * (C46823 + C46839 * C46972)))) /
        C46743;
    const double C47373 = C47371 + C47368;
    const double C47398 = C46793 * C47394;
    const double C47464 = 2 * C47394;
    const double C142 =
        (3 * (C46812 + ae * C46815 + C46794 * C46826) +
         ae * (2 * C46815 + C46794 * C46827) +
         C46794 *
             (2 * C46826 + ae * C46827 +
              C46794 * (C46822 + ae * C46794 * C46823 +
                        C46794 * (ae * C46823 + C46794 * std::pow(C46796, 6) *
                                                    bs[6] * C46804)))) /
        C46745;
    const double C291 =
        ((yP - yQ) * (C46812 + ae * C46815 + C46794 * C46826)) / C46745;
    const double C295 =
        (ae * C46806 + C46794 * C46812 + C46826 * std::pow(yP - yQ, 2)) /
        C46745;
    const double C444 =
        (ae * (C46803 * C46799 * C46887 +
               C46794 * (C46794 * C46808 * C46809 * C46887 + C46888 * ae) +
               C46794 * C46888 * ae) +
         C46793 * (C46812 + ae * C46815 + C46794 * C46826)) /
        C46745;
    const double C448 = (ae * C46806 + C46794 * C46812 + ae * C46793 * C46899 +
                         C46793 * (ae * C46899 + C46793 * C46826)) /
                        C46745;
    const double C828 =
        (ae * C46963 * C46899 + C46793 * C46963 * C46826) / C46745;
    const double C1035 = (2 * C46963 * C46826 +
                          C46963 * (C46826 + C46842 * std::pow(C46963, 2))) /
                         C46745;
    const double C46909 = C46794 * C46908;
    const double C46914 = 2 * C46908;
    const double C46978 = C46963 * C46908;
    const double C47011 = ae * C46908;
    const double C47010 = C46793 * C46908;
    const double C1181 = (ae * (C46899 + C46908 * C46972) +
                          C46793 * (C46826 + C46842 * C46972)) /
                         C46745;
    const double C1863 = (2 * (ae * C46899 + C46793 * C46826) +
                          ae * (C46899 + C46908 * std::pow(C46793, 2)) +
                          C46793 * (C46826 + ae * C46793 * C46908 +
                                    C46793 * (ae * C46908 + C46793 * C46842))) /
                         C46745;
    const double C1026 =
        (2 * C46963 * C46899 + C46963 * (C46899 + C46908 * C46972)) / C46743;
    const double C1169 = (C46793 * (C46899 + C46908 * C46972)) / C46743;
    const double C1854 =
        (2 * C46793 * C46899 + C46793 * (C46899 + C46908 * C47005)) / C46743;
    const double C1183 =
        (C46812 + C46822 * C46972 + ae * C46793 * C46986 +
         C46793 * (ae * C46986 + C46793 * (C46822 + C46838 * C46972))) /
        C46745;
    const double C1551 =
        (ae * (2 * C46980 + C46963 * C46986) +
         C46793 * (2 * C46963 * C46822 + C46963 * (C46822 + C46838 * C46972))) /
        C46745;
    const double C7249 =
        (2 * (ae * C46986 + C46793 * C47037) + ae * (C46986 + C47044 * C47005) +
         C46793 *
             (C47037 + ae * C46793 * C47044 +
              C46793 * (ae * C47044 + C46793 * (C46838 + C46862 * C46972)))) /
        C46745;
    const double C1028 = (3 * (C46893 + C46897 * C46972) +
                          C46963 * (2 * C46980 + C46963 * C46986)) /
                         C46743;
    const double C1171 = (C46893 + C46897 * C46972 + C46986 * C47005) / C46743;
    const double C1545 = (C46793 * (2 * C46980 + C46963 * C46986)) / C46743;
    const double C7245 =
        (2 * C46793 * C46986 + C46793 * (C46986 + C47044 * C47005)) / C46743;
    const double C1865 =
        (3 * (C46812 + ae * C47002 + C46793 * C47006) +
         ae * (2 * C47002 + C46793 * C47008) +
         C46793 * (2 * C47006 + ae * C47008 +
                   C46793 * (C46822 + ae * C46793 * C46903 +
                             C46793 * (ae * C46903 + C46793 * C46838)))) /
        C46745;
    const double C1856 = (3 * (C46893 + C46897 * C47005) +
                          C46793 * (2 * C47002 + C46793 * C47008)) /
                         C46743;
    const double C47062 = C47057 + C47060;
    const double C7255 = C4575 * C2231;
    const double C18529 = C15889 * C2231;
    const double C23638 = C47574 * C2231;
    const double C7259 = C4575 * C2225;
    const double C18533 = C15889 * C2225;
    const double C23640 = C47574 * C2225;
    const double C47085 = C46793 * C47081;
    const double C47144 = 2 * C47081;
    const double C47084 = C46822 + C47080;
    const double C46925 = C46923 * ae;
    const double C47184 = C46794 * C46923;
    const double C47187 = 3 * C46923;
    const double C47258 = C46963 * C46923;
    const double C47317 = C46793 * C46923;
    const double C1165 = (C46793 * (C46827 + C46843 * C46972) +
                          (C47179 + C46923 * C46972) * ae) /
                         C46743;
    const double C1016 =
        2 * C46963 * C47179 + C46963 * (C47179 + C46923 * C46972);
    const double C1153 = C46793 * (C47179 + C46923 * C46972);
    const double C1844 =
        2 * C46793 * C47179 + C46793 * (C47179 + C46923 * C47005);
    const double C47407 = C47404 + C46922;
    const double C47280 = C46905 + C47279;
    const double C47314 = C46905 + C47312;
    const double C47355 = 2 * C47334;
    const double C47378 = C46793 * C47334;
    const double C47377 = C47334 * ae;
    const double C2229 =
        (2 * (C46793 * C47333 + C47260 * ae) +
         C46793 * (C47333 + C46793 * (C46793 * C46963 * C46851 + C47334 * ae) +
                   C46793 * C47334 * ae) +
         (C47260 + C47334 * C47005) * ae) /
        C46743;
    const double C2223 =
        2 * C46793 * C47260 + C46793 * (C47260 + C47334 * C47005);
    const double C47410 = 2 * C47405;
    const double C47408 = C47405 * ae;
    const double C46926 = C46794 * C46924;
    const double C46935 = 2 * C46924;
    const double C46988 = C46924 * C46972;
    const double C47013 = C46924 * C47005;
    const double C47031 = C46963 * C46924;
    const double C47091 = ae * C46924;
    const double C47090 = C46793 * C46924;
    const double C47474 = C46793 * C47470;
    const double C47352 = C46963 * C47351;
    const double C47425 = 3 * C47351;
    const double C47439 = C46793 * C47351;
    const double C47438 = C47351 * ae;
    const double C7247 =
        (2 * (C46793 * C47342 + C47277 * ae) +
         C46793 *
             (C47342 +
              C46793 * (C46793 * (C46823 + C46839 * C46972) + C47351 * ae) +
              C46793 * C47351 * ae) +
         (C47277 + C47351 * C47005) * ae) /
        C46743;
    const double C7243 =
        2 * C46793 * C47277 + C46793 * (C47277 + C47351 * C47005);
    const double C47374 = C47331 + C47372;
    const double C47454 = 2 * C47449;
    const double C47452 = C47449 * ae;
    const double C47455 = C47451 + C47448;
    const double C47399 = C46793 * C47396;
    const double C47469 = 3 * C47396;
    const double C47467 = C47396 * ae;
    const double C46869 = C46794 * C46867;
    const double C1033 =
        (3 * (C46827 + C46843 * C46972) +
         C46963 * (2 * C46963 * C46843 + C46963 * (C46843 + C46867 * C46972))) /
        C46743;
    const double C46868 = C46794 * C46866;
    const double C47039 = C46866 * C46972;
    const double C47067 = C46963 * C46866;
    const double C47092 = C46793 * C46866;
    const double C1038 =
        (3 * (C46826 + C46842 * C46972) +
         C46963 * (2 * C46963 * C46842 + C46963 * (C46842 + C46866 * C46972))) /
        C46745;
    const double C47107 = C46963 * C47106;
    const double C47122 = C46793 * C47106;
    const double C47137 = C47129 + C47133;
    const double C47157 = C46793 * C47153;
    const double C46949 = C46794 * C46946;
    const double C47049 = C46946 * C46972;
    const double C47068 = C46963 * C46946;
    const double C47093 = C46946 * C47005;
    const double C47114 = C46963 * C47113;
    const double C47123 = C47113 * C47005;
    const double C47138 = C47059 + C47135;
    const double C47158 = C46793 * C47155;
    const double C12360 = C4580 * C1851;
    const double C12704 = C4579 * C1851;
    const double C28393 = C21567 * C1851;
    const double C33621 = C15894 * C1851;
    const double C33965 = C15893 * C1851;
    const double C5868 = C4580 * C1160;
    const double C6974 = C4579 * C1160;
    const double C17166 = C15894 * C1160;
    const double C18256 = C15893 * C1160;
    const double C23421 = C21567 * C1160;
    const double C5864 = C4580 * C1151;
    const double C6978 = C4579 * C1151;
    const double C17162 = C15894 * C1151;
    const double C18260 = C15893 * C1151;
    const double C23423 = C21567 * C1151;
    const double C4774 = C4579 * C266;
    const double C4754 = C4580 * C266;
    const double C16088 = C15893 * C266;
    const double C16068 = C15894 * C266;
    const double C21707 = C21567 * C266;
    const double C4762 = C4580 * C267;
    const double C5076 = C4579 * C267;
    const double C16076 = C15894 * C267;
    const double C16390 = C15893 * C267;
    const double C21962 = C21567 * C267;
    const double C10652 = C4579 * C419;
    const double C10632 = C4580 * C419;
    const double C26305 = C21567 * C419;
    const double C31921 = C15893 * C419;
    const double C31901 = C15894 * C419;
    const double C10640 = C4580 * C420;
    const double C10938 = C4579 * C420;
    const double C26591 = C21567 * C420;
    const double C31909 = C15894 * C420;
    const double C32207 = C15893 * C420;
    const double C5434 = C4579 * C814;
    const double C5422 = C4580 * C814;
    const double C16748 = C15893 * C814;
    const double C16736 = C15894 * C814;
    const double C22244 = C21567 * C814;
    const double C5880 = C4579 * C1174;
    const double C17178 = C15893 * C1174;
    const double C22585 = C21567 * C1174;
    const double C6386 = C4579 * C1548;
    const double C17676 = C15893 * C1548;
    const double C22589 = C21567 * C1548;
    const double C5698 = C4579 * C1019;
    const double C17004 = C15893 * C1019;
    const double C22447 = C21567 * C1019;
    const double C5884 = C4579 * C1156;
    const double C17182 = C15893 * C1156;
    const double C22583 = C21567 * C1156;
    const double C6390 = C4579 * C1542;
    const double C17680 = C15893 * C1542;
    const double C22587 = C21567 * C1542;
    const double C12368 = C4579 * C1847;
    const double C28051 = C21567 * C1847;
    const double C33629 = C15893 * C1847;
    const double C46847 = C46835 + C46845;
    const double C5680 =
        (4 * (2 * C47333 + C46963 * C47345) +
         C46963 * (3 * C47345 +
                   C46963 * (2 * C46963 * C46851 +
                             C46963 * (C46851 + C46794 * C46863 * C46972)))) /
        C46743;
    const double C47422 = C47418 + C47421;
    const double C22452 = C47574 * C5681;
    const double C47046 = C47042 + C47045;
    const double C6771 = (3 * (C46980 + C47028 * C47005) +
                          C46793 * (2 * C47056 + C46793 * C47063)) /
                         C46743;
    const double C47136 = C47058 + C47132;
    const double C47088 = C47082 + C47086;
    const double C46950 = C46938 + C46948;
    const double C47283 = C46923 + C47282;
    const double C47320 = C46923 + C47318;
    const double C47358 = C46963 * C47357;
    const double C47383 = C47334 + C47381;
    const double C47412 = C46793 * C47409;
    const double C47430 = C47426 + C47429;
    const double C47442 = C47351 + C47440;
    const double C47458 = C46793 * C47456;
    const double C47477 = C47473 + C47475;
    const double C47605 = C47604 / C47595;
    const double C47918 = 2 * C47883;
    const double C47614 = C47613 / C47592;
    const double C47922 = C47887 / C47610;
    const double C47949 = C47881 - C47917;
    const double C2440 = -C47917;
    const double C47963 = C47948 + C47602;
    const double C47687 = C47686 / C47595;
    const double C47926 = 2 * C47892;
    const double C47694 = C47693 / C47592;
    const double C47936 = C47901 / C47610;
    const double C47957 = C47895 - C47933;
    const double C2332 = -C47933;
    const double C47966 = C47953 + C47683;
    const double C47729 = C47728 / C47595;
    const double C47929 = 2 * C47894;
    const double C47736 = C47735 / C47592;
    const double C47942 = C47907 / C47610;
    const double C47960 = C47896 - C47939;
    const double C3094 = -C47939;
    const double C47967 = C47955 + C47725;
    const double C4786 = C4748 + C4749;
    const double C4784 = C4744 + C4745;
    const double C4783 = C4742 + C4743;
    const double C4781 = C4738 + C4739;
    const double C4778 = C4732 + C4733;
    const double C4776 = C4728 + C4729;
    const double C5439 = C5418 + C5419;
    const double C5437 = C5414 + C5415;
    const double C5705 = C5694 + C5695;
    const double C5702 = C5688 + C5689;
    const double C5700 = C5684 + C5685;
    const double C5892 = C5874 + C5875;
    const double C5890 = C5870 + C5871;
    const double C10664 = C10626 + C10627;
    const double C10662 = C10622 + C10623;
    const double C10661 = C10620 + C10621;
    const double C10659 = C10616 + C10617;
    const double C10656 = C10610 + C10611;
    const double C10654 = C10606 + C10607;
    const double C12370 = C12354 + C12355;
    const double C4779 = C4734 + C4735;
    const double C4777 = C4730 + C4731;
    const double C10657 = C10612 + C10613;
    const double C10655 = C10608 + C10609;
    const double C16093 = C16048 + C16049;
    const double C16091 = C16044 + C16045;
    const double C31926 = C31881 + C31882;
    const double C31924 = C31877 + C31878;
    const double C21722 = C21693 + C21694;
    const double C21721 = C21691 + C21692;
    const double C21720 = C21689 + C21690;
    const double C21719 = C21687 + C21688;
    const double C21718 = C21685 + C21686;
    const double C21717 = C21683 + C21684;
    const double C21716 = C21681 + C21682;
    const double C21715 = C21679 + C21680;
    const double C22249 = C22228 + C22229;
    const double C22248 = C22226 + C22227;
    const double C22247 = C22224 + C22225;
    const double C22246 = C22222 + C22223;
    const double C22456 = C22449 + C22450;
    const double C26312 = C26289 + C26290;
    const double C26311 = C26287 + C26288;
    const double C26310 = C26285 + C26286;
    const double C26309 = C26283 + C26284;
    const double C26308 = C26281 + C26282;
    const double C26307 = C26279 + C26280;
    const double C28053 = C28041 + C28042;
    const double C16100 = C16062 + C16063;
    const double C16098 = C16058 + C16059;
    const double C16097 = C16056 + C16057;
    const double C16095 = C16052 + C16053;
    const double C16092 = C16046 + C16047;
    const double C16090 = C16042 + C16043;
    const double C16753 = C16732 + C16733;
    const double C16751 = C16728 + C16729;
    const double C17011 = C17000 + C17001;
    const double C17008 = C16994 + C16995;
    const double C17006 = C16990 + C16991;
    const double C17190 = C17172 + C17173;
    const double C17188 = C17168 + C17169;
    const double C31933 = C31895 + C31896;
    const double C31931 = C31891 + C31892;
    const double C31930 = C31889 + C31890;
    const double C31928 = C31885 + C31886;
    const double C31925 = C31879 + C31880;
    const double C31923 = C31875 + C31876;
    const double C33631 = C33615 + C33616;
    const double C4761 = C4575 * C274;
    const double C4747 = C47914 * C274;
    const double C16075 = C15889 * C274;
    const double C16061 = C47914 * C274;
    const double C21704 = C47574 * C274;
    const double C4753 = C4575 * C278;
    const double C4741 = C47914 * C278;
    const double C16067 = C15889 * C278;
    const double C16055 = C47914 * C278;
    const double C21696 = C47574 * C278;
    const double C10639 = C4575 * C427;
    const double C10625 = C47914 * C427;
    const double C26296 = C47574 * C427;
    const double C31908 = C15889 * C427;
    const double C31894 = C47914 * C427;
    const double C10631 = C4575 * C431;
    const double C10619 = C47914 * C431;
    const double C26292 = C47574 * C431;
    const double C31900 = C15889 * C431;
    const double C31888 = C47914 * C431;
    const double C5421 = C4575 * C818;
    const double C5417 = C47914 * C818;
    const double C16735 = C15889 * C818;
    const double C16731 = C47914 * C818;
    const double C22231 = C47574 * C818;
    const double C12364 = C4579 * C1859;
    const double C28049 = C21567 * C1859;
    const double C33625 = C15893 * C1859;
    const double C12372 = C12358 + C12359;
    const double C28054 = C28043 + C28044;
    const double C33633 = C33619 + C33620;
    const double C5888 = C5866 + C5867;
    const double C17186 = C17164 + C17165;
    const double C22596 = C22581 + C22582;
    const double C5886 = C5862 + C5863;
    const double C17184 = C17160 + C17161;
    const double C22595 = C22579 + C22580;
    const double C4770 = C4579 * C282;
    const double C4758 = C4580 * C282;
    const double C16084 = C15893 * C282;
    const double C16072 = C15894 * C282;
    const double C21709 = C21567 * C282;
    const double C4766 = C4580 * C284;
    const double C5080 = C4579 * C284;
    const double C16080 = C15894 * C284;
    const double C16394 = C15893 * C284;
    const double C21964 = C21567 * C284;
    const double C10648 = C4579 * C435;
    const double C10636 = C4580 * C435;
    const double C26303 = C21567 * C435;
    const double C31917 = C15893 * C435;
    const double C31905 = C15894 * C435;
    const double C10644 = C4580 * C437;
    const double C10942 = C4579 * C437;
    const double C26593 = C21567 * C437;
    const double C31913 = C15894 * C437;
    const double C32211 = C15893 * C437;
    const double C5430 = C4579 * C822;
    const double C5426 = C4580 * C822;
    const double C16744 = C15893 * C822;
    const double C16740 = C15894 * C822;
    const double C22242 = C21567 * C822;
    const double C6028 = C4580 * C1022;
    const double C17326 = C15894 * C1022;
    const double C21711 = C21567 * C1022;
    const double C46856 = C46849 + C46850;
    const double C46846 = C46837 + C46844;
    const double C22451 = C21567 * C5679;
    const double C47400 = C46813 + C47398;
    const double C4765 = C4575 * C291;
    const double C4751 = C47914 * C291;
    const double C16079 = C15889 * C291;
    const double C16065 = C47914 * C291;
    const double C21706 = C47574 * C291;
    const double C4757 = C4575 * C295;
    const double C4737 = C47914 * C295;
    const double C16071 = C15889 * C295;
    const double C16051 = C47914 * C295;
    const double C21698 = C47574 * C295;
    const double C10643 = C4575 * C444;
    const double C10629 = C47914 * C444;
    const double C26298 = C47574 * C444;
    const double C31912 = C15889 * C444;
    const double C31898 = C47914 * C444;
    const double C10635 = C4575 * C448;
    const double C10615 = C47914 * C448;
    const double C26294 = C47574 * C448;
    const double C31904 = C15889 * C448;
    const double C31884 = C47914 * C448;
    const double C5425 = C4575 * C828;
    const double C5413 = C47914 * C828;
    const double C16739 = C15889 * C828;
    const double C16727 = C47914 * C828;
    const double C22233 = C47574 * C828;
    const double C5691 = C47914 * C1035;
    const double C6031 = C4575 * C1035;
    const double C16997 = C47914 * C1035;
    const double C17329 = C15889 * C1035;
    const double C21702 = C47574 * C1035;
    const double C46910 = C46897 + C46909;
    const double C1178 = (C46963 * C46826 + ae * C46793 * C46978 +
                          C46793 * (ae * C46978 + C46793 * C46963 * C46842)) /
                         C46745;
    const double C1163 = (C46963 * C46899 + C46978 * C47005) / C46743;
    const double C47014 = C47011 + C47012;
    const double C5877 = C47914 * C1181;
    const double C6237 = C4575 * C1181;
    const double C17175 = C47914 * C1181;
    const double C17535 = C15889 * C1181;
    const double C22237 = C47574 * C1181;
    const double C12361 = C47914 * C1863;
    const double C12705 = C4575 * C1863;
    const double C28394 = C47574 * C1863;
    const double C33622 = C47914 * C1863;
    const double C33966 = C15889 * C1863;
    const double C5687 = C47914 * C1026;
    const double C6035 = C4575 * C1026;
    const double C16993 = C47914 * C1026;
    const double C17333 = C15889 * C1026;
    const double C21700 = C47574 * C1026;
    const double C5873 = C47914 * C1169;
    const double C6241 = C4575 * C1169;
    const double C17171 = C47914 * C1169;
    const double C17539 = C15889 * C1169;
    const double C22235 = C47574 * C1169;
    const double C12357 = C47914 * C1854;
    const double C12709 = C4575 * C1854;
    const double C28396 = C47574 * C1854;
    const double C33618 = C47914 * C1854;
    const double C33970 = C15889 * C1854;
    const double C5881 = C4575 * C1183;
    const double C17179 = C15889 * C1183;
    const double C22586 = C47574 * C1183;
    const double C6387 = C4575 * C1551;
    const double C17677 = C15889 * C1551;
    const double C22590 = C47574 * C1551;
    const double C23634 = C47574 * C7249;
    const double C5699 = C4575 * C1028;
    const double C17005 = C15889 * C1028;
    const double C22448 = C47574 * C1028;
    const double C5885 = C4575 * C1171;
    const double C17183 = C15889 * C1171;
    const double C22584 = C47574 * C1171;
    const double C6391 = C4575 * C1545;
    const double C17681 = C15889 * C1545;
    const double C22588 = C47574 * C1545;
    const double C23636 = C47574 * C7245;
    const double C12365 = C4575 * C1865;
    const double C28050 = C47574 * C1865;
    const double C33626 = C15889 * C1865;
    const double C12369 = C4575 * C1856;
    const double C28052 = C47574 * C1856;
    const double C33630 = C15889 * C1856;
    const double C6775 =
        (3 * (C47027 + ae * C47056 + C46793 * C47062) +
         ae * (2 * C47056 + C46793 * C47063) +
         C46793 *
             (2 * C47062 + ae * C47063 +
              C46793 * (C47058 + ae * C46793 * C47059 +
                        C46793 * (ae * C47059 + C46793 * C46963 * C46862)))) /
        C46745;
    const double C7261 = C7254 + C7255;
    const double C18535 = C18528 + C18529;
    const double C23643 = C23637 + C23638;
    const double C7263 = C7258 + C7259;
    const double C18537 = C18532 + C18533;
    const double C23644 = C23639 + C23640;
    const double C47151 = C47144 + C47145;
    const double C47087 = C47084 + C47085;
    const double C47319 = C47316 + C46925;
    const double C1850 =
        (2 * (C46793 * C46827 + C47179 * ae) +
         C46793 * (C46827 + C46793 * (C46793 * C46843 + C46925) +
                   C46793 * C46923 * ae) +
         (C47179 + C46923 * C47005) * ae) /
        C46743;
    const double C47185 = C47183 + C47184;
    const double C1159 =
        (C46963 * C46827 + C46793 * (C46793 * C46963 * C46843 + C47258 * ae) +
         C46793 * C47258 * ae) /
        C46743;
    const double C2230 =
        (2 * (C46793 * C47336 + C47258 * ae) +
         C46793 * (C47336 + C46793 * (C46793 * C46963 * C46867 + C47337 * ae) +
                   C46793 * C47337 * ae) +
         (C47258 + C47337 * C47005) * ae) /
        C46743;
    const double C1150 = C46963 * C47179 + C47258 * C47005;
    const double C2224 =
        2 * C46793 * C47258 + C46793 * (C47258 + C47337 * C47005);
    const double C6234 = C4580 * C1165;
    const double C17532 = C15894 * C1165;
    const double C22238 = C21567 * C1165;
    const double C6032 = C4580 * C1016;
    const double C17330 = C15894 * C1016;
    const double C21713 = C21567 * C1016;
    const double C6238 = C4580 * C1153;
    const double C17536 = C15894 * C1153;
    const double C22240 = C21567 * C1153;
    const double C12706 = C4580 * C1844;
    const double C33967 = C15894 * C1844;
    const double C42887 = C21567 * C1844;
    const double C47411 = C46793 * C47407;
    const double C1175 =
        (C46815 + C46829 * C46972 +
         C46793 * (C46793 * (C46829 + C46851 * C46972) + C47280 * ae) +
         C46793 * C47280 * ae) /
        C46743;
    const double C1549 =
        (C46793 * (2 * C46963 * C46829 + C46963 * (C46829 + C46851 * C46972)) +
         (2 * C47260 + C46963 * C47280) * ae) /
        C46743;
    const double C7248 =
        (2 * (C46793 * C47345 + C47280 * ae) +
         C46793 * (C47345 +
                   C46793 * (C46793 * (C46851 + C46794 * C46863 * C46972) +
                             C47357 * ae) +
                   C46793 * C47357 * ae) +
         (C47280 + C47357 * C47005) * ae) /
        C46743;
    const double C1020 = 3 * (C47177 + C46905 * C46972) +
                         C46963 * (2 * C47260 + C46963 * C47280);
    const double C1157 = C47177 + C46905 * C46972 + C47280 * C47005;
    const double C1543 = C46793 * (2 * C47260 + C46963 * C47280);
    const double C7244 =
        2 * C46793 * C47280 + C46793 * (C47280 + C47357 * C47005);
    const double C1860 =
        (3 * (C46815 + C46793 * C47313 + C47311 * ae) +
         C46793 * (2 * C47313 +
                   C46793 * (C46829 + C46793 * (C46793 * C46851 + C46922) +
                             C46793 * C46919 * ae) +
                   C47314 * ae) +
         (2 * C47311 + C46793 * C47314) * ae) /
        C46743;
    const double C1848 = 3 * (C47177 + C46905 * C47005) +
                         C46793 * (2 * C47311 + C46793 * C47314);
    const double C47382 = C47380 + C47377;
    const double C7252 = C4580 * C2229;
    const double C18526 = C15894 * C2229;
    const double C28253 = C21567 * C2229;
    const double C7256 = C4580 * C2223;
    const double C18530 = C15894 * C2223;
    const double C28255 = C21567 * C2223;
    const double C46927 = C46903 + C46926;
    const double C46989 = C46908 + C46988;
    const double C47015 = C46908 + C47013;
    const double C47048 = 2 * C47031;
    const double C47066 = ae * C47031;
    const double C47065 = C46793 * C47031;
    const double C2232 =
        (2 * (ae * C46978 + C46793 * C47030) + ae * (C46978 + C47031 * C47005) +
         C46793 * (C47030 + ae * C46793 * C47031 +
                   C46793 * (ae * C47031 + C46793 * C46963 * C46866))) /
        C46745;
    const double C2226 =
        (2 * C46793 * C46978 + C46793 * (C46978 + C47031 * C47005)) / C46743;
    const double C47096 = 2 * C47090;
    const double C47094 = ae * C47090;
    const double C47476 = C46823 + C47474;
    const double C47353 = C47349 + C47352;
    const double C47441 = C47437 + C47438;
    const double C23633 = C21567 * C7247;
    const double C23635 = C21567 * C7243;
    const double C6773 =
        (3 * (C47330 + C46793 * C47373 + C47369 * ae) +
         C46793 * (2 * C47373 +
                   C46793 * (C47367 +
                             C46793 * (C46793 * C46963 * C46839 + C47370 * ae) +
                             C46793 * C47370 * ae) +
                   C47374 * ae) +
         (2 * C47369 + C46793 * C47374) * ae) /
        C46743;
    const double C6769 = 3 * (C47262 + C47331 * C47005) +
                         C46793 * (2 * C47369 + C46793 * C47374);
    const double C47457 = C46793 * C47455;
    const double C47401 = C47397 + C47399;
    const double C46871 = C46859 + C46869;
    const double C46870 = C46861 + C46868;
    const double C47040 = C46842 + C47039;
    const double C47069 = C46793 * C47067;
    const double C47095 = C47091 + C47092;
    const double C5693 = C47914 * C1038;
    const double C16999 = C47914 * C1038;
    const double C22712 = C47574 * C1038;
    const double C47108 = C47104 + C47107;
    const double C47124 = C47121 + C47122;
    const double C47139 = C46793 * C47137;
    const double C47159 = C47156 + C47157;
    const double C46951 = C46917 + C46949;
    const double C47050 = C46924 + C47049;
    const double C47070 = C47068 * C47005;
    const double C47097 = C46924 + C47093;
    const double C47115 = C47111 + C47114;
    const double C47125 = C47044 + C47123;
    const double C47140 = C46793 * C47138;
    const double C47160 = C47154 + C47158;
    const double C134 = (4 * (2 * C46815 + C46794 * C46827) +
                         C46794 * (3 * C46827 + C46794 * C46847)) /
                        C46743;
    const double C285 =
        (2 * C46815 + C46794 * C46827 + C46847 * C46972) / C46743;
    const double C287 = (C46963 * (3 * C46827 + C46794 * C46847)) / C46743;
    const double C22443 =
        (5 * (3 * C47342 + C46963 * C47422) +
         C46963 * (4 * C47422 +
                   C46963 * (3 * C47420 +
                             C46963 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972))))) /
        C46743;
    const double C5859 =
        (2 * C47027 + C46963 * C47037 + ae * C46793 * C47046 +
         C46793 *
             (ae * C47046 + C46793 * (2 * C46963 * C46838 +
                                      C46963 * (C46838 + C46862 * C46972)))) /
        C46745;
    const double C6381 =
        (ae * (3 * C46986 + C46963 * C47046) +
         C46793 *
             (3 * C47037 + C46963 * (2 * C46963 * C46838 +
                                     C46963 * (C46838 + C46862 * C46972)))) /
        C46745;
    const double C5677 = (4 * (2 * C46980 + C46963 * C46986) +
                          C46963 * (3 * C46986 + C46963 * C47046)) /
                         C46743;
    const double C5855 =
        (2 * C46980 + C46963 * C46986 + C47046 * C47005) / C46743;
    const double C6377 = (C46793 * (3 * C46986 + C46963 * C47046)) / C46743;
    const double C28048 = C47574 * C6771;
    const double C12347 = (4 * (2 * C47002 + C46793 * C47008) +
                           C46793 * (3 * C47008 + C46793 * C47088)) /
                          C46743;
    const double C46952 = C46950 * ae;
    const double C47188 = C46794 * C46950;
    const double C47323 = C46963 * C46950;
    const double C1176 =
        (C46827 + C46843 * C46972 +
         C46793 * (C46793 * (C46843 + C46867 * C46972) + C47283 * ae) +
         C46793 * C47283 * ae) /
        C46743;
    const double C1550 =
        (C46793 * (2 * C46963 * C46843 + C46963 * (C46843 + C46867 * C46972)) +
         (2 * C47258 + C46963 * C47283) * ae) /
        C46743;
    const double C1021 = 3 * (C47179 + C46923 * C46972) +
                         C46963 * (2 * C47258 + C46963 * C47283);
    const double C1158 = C47179 + C46923 * C46972 + C47283 * C47005;
    const double C1544 = C46793 * (2 * C47258 + C46963 * C47283);
    const double C1849 = 3 * (C47179 + C46923 * C47005) +
                         C46793 * (2 * C47317 + C46793 * C47320);
    const double C47359 = C47355 + C47358;
    const double C6770 = 3 * (C47260 + C47334 * C47005) +
                         C46793 * (2 * C47378 + C46793 * C47383);
    const double C47414 = C47410 + C47412;
    const double C47431 = C46963 * C47430;
    const double C23266 = 3 * (C47277 + C47351 * C47005) +
                          C46793 * (2 * C47439 + C46793 * C47442);
    const double C47460 = C47454 + C47458;
    const double C47479 = C46793 * C47477;
    const double C47606 = C47602 - C47605;
    const double C47950 = C47918 / C47592;
    const double C47615 = C47611 - C47614;
    const double C47964 = C47949 / C47596;
    const double C47688 = C47683 - C47687;
    const double C47954 = C47926 / C47592;
    const double C47695 = C47691 - C47694;
    const double C47968 = C47957 / C47596;
    const double C47730 = C47725 - C47729;
    const double C47956 = C47929 / C47592;
    const double C47737 = C47733 - C47736;
    const double C47970 = C47960 / C47596;
    const double C21740 = C21722 * C47850;
    const double C26118 = C21722 * C10309;
    const double C37306 = C21722 * C31578;
    const double C21739 = C21721 * C116;
    const double C26117 = C21721 * C10311;
    const double C37305 = C21721 * C31580;
    const double C21738 = C21720 * C116;
    const double C27031 = C21720 * C10311;
    const double C38165 = C21720 * C31580;
    const double C21737 = C21719 * C47850;
    const double C27032 = C21719 * C10309;
    const double C38166 = C21719 * C31578;
    const double C21736 = C21718 * C47850;
    const double C26115 = C21718 * C10309;
    const double C37303 = C21718 * C31578;
    const double C21735 = C21717 * C116;
    const double C26116 = C21717 * C10311;
    const double C37304 = C21717 * C31580;
    const double C21734 = C21716 * C47850;
    const double C26110 = C21716 * C10309;
    const double C37298 = C21716 * C31578;
    const double C21733 = C21715 * C116;
    const double C26109 = C21715 * C10311;
    const double C37297 = C21715 * C31580;
    const double C22261 = C22249 * C116;
    const double C26111 = C22249 * C10312;
    const double C26794 = C22249 * C10311;
    const double C37299 = C22249 * C31581;
    const double C37928 = C22249 * C31580;
    const double C22260 = C22248 * C47850;
    const double C26112 = C22248 * C47947;
    const double C26793 = C22248 * C10309;
    const double C37300 = C22248 * C47947;
    const double C37927 = C22248 * C31578;
    const double C22259 = C22247 * C116;
    const double C26114 = C22247 * C10312;
    const double C27189 = C22247 * C10311;
    const double C37302 = C22247 * C31581;
    const double C38323 = C22247 * C31580;
    const double C22258 = C22246 * C47850;
    const double C26113 = C22246 * C47947;
    const double C27190 = C22246 * C10309;
    const double C37301 = C22246 * C47947;
    const double C38324 = C22246 * C31578;
    const double C22460 = C22456 * C47850;
    const double C27037 = C22456 * C10309;
    const double C38171 = C22456 * C31578;
    const double C4792 = C4760 + C4761;
    const double C4785 = C4746 + C4747;
    const double C16106 = C16074 + C16075;
    const double C16099 = C16060 + C16061;
    const double C21727 = C21703 + C21704;
    const double C4788 = C4752 + C4753;
    const double C4782 = C4740 + C4741;
    const double C16102 = C16066 + C16067;
    const double C16096 = C16054 + C16055;
    const double C21723 = C21695 + C21696;
    const double C10670 = C10638 + C10639;
    const double C10663 = C10624 + C10625;
    const double C26315 = C26295 + C26296;
    const double C31939 = C31907 + C31908;
    const double C31932 = C31893 + C31894;
    const double C10666 = C10630 + C10631;
    const double C10660 = C10618 + C10619;
    const double C26313 = C26291 + C26292;
    const double C31935 = C31899 + C31900;
    const double C31929 = C31887 + C31888;
    const double C5440 = C5420 + C5421;
    const double C5438 = C5416 + C5417;
    const double C16754 = C16734 + C16735;
    const double C16752 = C16730 + C16731;
    const double C22250 = C22230 + C22231;
    const double C22604 = C22596 * C47850;
    const double C26791 = C22596 * C47947;
    const double C27186 = C22596 * C10309;
    const double C37925 = C22596 * C47947;
    const double C38320 = C22596 * C31578;
    const double C22603 = C22595 * C116;
    const double C26792 = C22595 * C10312;
    const double C27185 = C22595 * C10311;
    const double C37926 = C22595 * C31581;
    const double C38319 = C22595 * C31580;
    const double C143 =
        (4 * (2 * C46826 + ae * C46827 + C46794 * C46846) +
         ae * (3 * C46827 + C46794 * C46847) +
         C46794 * (3 * C46846 + ae * C46847 +
                   C46794 * (2 * C46842 + ae * C46843 +
                             C46794 * (C46838 + ae * C46794 * C46839 +
                                       C46794 * (ae * C46839 +
                                                 C46794 * std::pow(C46798, 7) *
                                                     bs[7] * C46804))))) /
        C46745;
    const double C296 = (C46812 + ae * C46815 + C46794 * C46826 +
                         C46846 * std::pow(yP - yQ, 2)) /
                        C46745;
    const double C297 =
        ((yP - yQ) * (2 * C46826 + ae * C46827 + C46794 * C46846)) / C46745;
    const double C22457 = C22451 + C22452;
    const double C47402 = C47400 + C47395;
    const double C4794 = C4764 + C4765;
    const double C4787 = C4750 + C4751;
    const double C16108 = C16078 + C16079;
    const double C16101 = C16064 + C16065;
    const double C21728 = C21705 + C21706;
    const double C4790 = C4756 + C4757;
    const double C4780 = C4736 + C4737;
    const double C16104 = C16070 + C16071;
    const double C16094 = C16050 + C16051;
    const double C21724 = C21697 + C21698;
    const double C10672 = C10642 + C10643;
    const double C10665 = C10628 + C10629;
    const double C26316 = C26297 + C26298;
    const double C31941 = C31911 + C31912;
    const double C31934 = C31897 + C31898;
    const double C10668 = C10634 + C10635;
    const double C10658 = C10614 + C10615;
    const double C26314 = C26293 + C26294;
    const double C31937 = C31903 + C31904;
    const double C31927 = C31883 + C31884;
    const double C5442 = C5424 + C5425;
    const double C5436 = C5412 + C5413;
    const double C16756 = C16738 + C16739;
    const double C16750 = C16726 + C16727;
    const double C22251 = C22232 + C22233;
    const double C5703 = C5690 + C5691;
    const double C6037 = C6030 + C6031;
    const double C17009 = C16996 + C16997;
    const double C17335 = C17328 + C17329;
    const double C21726 = C21701 + C21702;
    const double C46911 = C46910 + C46907;
    const double C5869 = C47914 * C1178;
    const double C6975 = C4575 * C1178;
    const double C17167 = C47914 * C1178;
    const double C18257 = C15889 * C1178;
    const double C23422 = C47574 * C1178;
    const double C5865 = C47914 * C1163;
    const double C6979 = C4575 * C1163;
    const double C17163 = C47914 * C1163;
    const double C18261 = C15889 * C1163;
    const double C23424 = C47574 * C1163;
    const double C5893 = C5876 + C5877;
    const double C6243 = C6236 + C6237;
    const double C17191 = C17174 + C17175;
    const double C17541 = C17534 + C17535;
    const double C22253 = C22236 + C22237;
    const double C12373 = C12360 + C12361;
    const double C12711 = C12704 + C12705;
    const double C28397 = C28393 + C28394;
    const double C33634 = C33621 + C33622;
    const double C33972 = C33965 + C33966;
    const double C5701 = C5686 + C5687;
    const double C6039 = C6034 + C6035;
    const double C17007 = C16992 + C16993;
    const double C17337 = C17332 + C17333;
    const double C21725 = C21699 + C21700;
    const double C5891 = C5872 + C5873;
    const double C6245 = C6240 + C6241;
    const double C17189 = C17170 + C17171;
    const double C17543 = C17538 + C17539;
    const double C22252 = C22234 + C22235;
    const double C12371 = C12356 + C12357;
    const double C12713 = C12708 + C12709;
    const double C28398 = C28395 + C28396;
    const double C33632 = C33617 + C33618;
    const double C33974 = C33969 + C33970;
    const double C5895 = C5880 + C5881;
    const double C17193 = C17178 + C17179;
    const double C22598 = C22585 + C22586;
    const double C6393 = C6386 + C6387;
    const double C17683 = C17676 + C17677;
    const double C22600 = C22589 + C22590;
    const double C5707 = C5698 + C5699;
    const double C17013 = C17004 + C17005;
    const double C22455 = C22447 + C22448;
    const double C5897 = C5884 + C5885;
    const double C17195 = C17182 + C17183;
    const double C22597 = C22583 + C22584;
    const double C6395 = C6390 + C6391;
    const double C17685 = C17680 + C17681;
    const double C22599 = C22587 + C22588;
    const double C12375 = C12364 + C12365;
    const double C28057 = C28049 + C28050;
    const double C33636 = C33625 + C33626;
    const double C12377 = C12368 + C12369;
    const double C28058 = C28051 + C28052;
    const double C33638 = C33629 + C33630;
    const double C28046 = C47574 * C6775;
    const double C23647 = C23643 * C47850;
    const double C27188 = C23643 * C47947;
    const double C28531 = C23643 * C10309;
    const double C38322 = C23643 * C47947;
    const double C39631 = C23643 * C31578;
    const double C23648 = C23644 * C116;
    const double C27187 = C23644 * C10312;
    const double C28532 = C23644 * C10311;
    const double C38321 = C23644 * C31581;
    const double C39632 = C23644 * C31580;
    const double C12351 =
        (4 * (2 * C47006 + ae * C47008 + C46793 * C47087) +
         ae * (3 * C47008 + C46793 * C47088) +
         C46793 *
             (3 * C47087 + ae * C47088 +
              C46793 * (2 * C47081 + ae * C47083 +
                        C46793 * (C46838 + ae * C46793 * C46917 +
                                  C46793 * (ae * C46917 + C46793 * C46862))))) /
        C46745;
    const double C1861 =
        (3 * (C46827 + C46793 * C47319 + C47317 * ae) +
         C46793 * (2 * C47319 +
                   C46793 * (C46843 + C46793 * (C46793 * C46867 + C46947) +
                             C46793 * C46945 * ae) +
                   C47320 * ae) +
         (2 * C47317 + C46793 * C47320) * ae) /
        C46743;
    const double C12702 = C4580 * C1850;
    const double C33963 = C15894 * C1850;
    const double C42885 = C21567 * C1850;
    const double C438 =
        (2 * C46815 + C46794 * C46827 +
         C46793 * (C46793 * C46847 + C47185 * ae) + C46793 * C47185 * ae) /
        C46743;
    const double C440 = (C46793 * (3 * C46827 + C46794 * C46847) +
                         (3 * C47179 + C46794 * C47185) * ae) /
                        C46743;
    const double C823 =
        (C46793 * C46963 * C46847 + C46963 * C47185 * ae) / C46743;
    const double C122 = 4 * (2 * C47177 + C46794 * C47179) +
                        C46794 * (3 * C47179 + C46794 * C47185);
    const double C268 = 2 * C47177 + C46794 * C47179 + C47185 * C46972;
    const double C269 = C46963 * (3 * C47179 + C46794 * C47185);
    const double C421 = 2 * C47177 + C46794 * C47179 + C47185 * C47005;
    const double C422 = C46793 * (3 * C47179 + C46794 * C47185);
    const double C815 = C46793 * C46963 * C47185;
    const double C1290 =
        2 * C46963 * C47185 + C46963 * (C47185 + C46950 * C46972);
    const double C1440 = C46793 * (C47185 + C46950 * C46972);
    const double C2120 =
        2 * C46793 * C47185 + C46793 * (C47185 + C46950 * C47005);
    const double C6972 = C4580 * C1159;
    const double C18254 = C15894 * C1159;
    const double C26299 = C21567 * C1159;
    const double C6976 = C4580 * C1150;
    const double C18258 = C15894 * C1150;
    const double C26301 = C21567 * C1150;
    const double C47413 = C46829 + C47411;
    const double C5878 = C4580 * C1175;
    const double C17176 = C15894 * C1175;
    const double C23417 = C21567 * C1175;
    const double C6384 = C4580 * C1549;
    const double C17674 = C15894 * C1549;
    const double C22866 = C21567 * C1549;
    const double C5696 = C4580 * C1020;
    const double C17002 = C15894 * C1020;
    const double C22713 = C21567 * C1020;
    const double C5882 = C4580 * C1157;
    const double C17180 = C15894 * C1157;
    const double C23419 = C21567 * C1157;
    const double C6388 = C4580 * C1543;
    const double C17678 = C15894 * C1543;
    const double C22868 = C21567 * C1543;
    const double C12362 = C4580 * C1860;
    const double C33623 = C15894 * C1860;
    const double C44399 = C21567 * C1860;
    const double C12366 = C4580 * C1848;
    const double C33627 = C15894 * C1848;
    const double C44401 = C21567 * C1848;
    const double C6774 =
        (3 * (C47333 + C46793 * C47382 + C47378 * ae) +
         C46793 * (2 * C47382 +
                   C46793 * (C47376 +
                             C46793 * (C46793 * C46963 * C46794 * C46863 +
                                       C47379 * ae) +
                             C46793 * C47379 * ae) +
                   C47383 * ae) +
         (2 * C47378 + C46793 * C47383) * ae) /
        C46743;
    const double C46928 = C46927 + C46922;
    const double C1184 =
        (C46826 + C46842 * C46972 + ae * C46793 * C46989 +
         C46793 * (ae * C46989 + C46793 * (C46842 + C46866 * C46972))) /
        C46745;
    const double C1552 =
        (ae * (2 * C46978 + C46963 * C46989) +
         C46793 * (2 * C46963 * C46842 + C46963 * (C46842 + C46866 * C46972))) /
        C46745;
    const double C1029 = (3 * (C46899 + C46908 * C46972) +
                          C46963 * (2 * C46978 + C46963 * C46989)) /
                         C46743;
    const double C1172 = (C46899 + C46908 * C46972 + C46989 * C47005) / C46743;
    const double C1546 = (C46793 * (2 * C46978 + C46963 * C46989)) / C46743;
    const double C1866 =
        (3 * (C46826 + ae * C47010 + C46793 * C47014) +
         ae * (2 * C47010 + C46793 * C47015) +
         C46793 * (2 * C47014 + ae * C47015 +
                   C46793 * (C46842 + ae * C46793 * C46924 +
                             C46793 * (ae * C46924 + C46793 * C46866)))) /
        C46745;
    const double C1857 = (3 * (C46899 + C46908 * C47005) +
                          C46793 * (2 * C47010 + C46793 * C47015)) /
                         C46743;
    const double C7253 = C47914 * C2232;
    const double C18527 = C47914 * C2232;
    const double C28254 = C47574 * C2232;
    const double C7257 = C47914 * C2226;
    const double C18531 = C47914 * C2226;
    const double C28256 = C47574 * C2226;
    const double C47098 = C46842 + C47094;
    const double C47478 = C47476 + C47471;
    const double C5857 =
        (2 * C47330 + C46963 * C47342 +
         C46793 * (C46793 * (2 * C46963 * C46823 +
                             C46963 * (C46823 + C46839 * C46972)) +
                   C47353 * ae) +
         C46793 * C47353 * ae) /
        C46743;
    const double C6379 =
        (C46793 *
             (3 * C47342 + C46963 * (2 * C46963 * C46823 +
                                     C46963 * (C46823 + C46839 * C46972))) +
         (3 * C47277 + C46963 * C47353) * ae) /
        C46743;
    const double C23630 =
        (2 * (C46793 * C47422 + C47353 * ae) +
         C46793 * (C47422 +
                   C46793 * (C46793 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972)) +
                             C47430 * ae) +
                   C46793 * C47430 * ae) +
         (C47353 + C47430 * C47005) * ae) /
        C46743;
    const double C5675 = 4 * (2 * C47262 + C46963 * C47277) +
                         C46963 * (3 * C47277 + C46963 * C47353);
    const double C5853 = 2 * C47262 + C46963 * C47277 + C47353 * C47005;
    const double C6375 = C46793 * (3 * C47277 + C46963 * C47353);
    const double C23628 =
        2 * C46793 * C47353 + C46793 * (C47353 + C47430 * C47005);
    const double C23268 =
        (3 * (C47342 + C46793 * C47441 + C47439 * ae) +
         C46793 * (2 * C47441 +
                   C46793 * (C47420 +
                             C46793 * (C46793 * (C46839 + C46863 * C46972) +
                                       C47428 * ae) +
                             C46793 * C47428 * ae) +
                   C47442 * ae) +
         (2 * C47439 + C46793 * C47442) * ae) /
        C46743;
    const double C23641 = C23633 + C23634;
    const double C23642 = C23635 + C23636;
    const double C28045 = C21567 * C6773;
    const double C28047 = C21567 * C6769;
    const double C47459 = C47367 + C47457;
    const double C12345 = 4 * (2 * C47305 + C46793 * C47308) +
                          C46793 * (3 * C47308 + C46793 * C47401);
    const double C46873 = C46794 * C46871;
    const double C1292 =
        (2 * C46963 * C46847 + C46963 * (C46847 + C46871 * C46972)) / C46743;
    const double C1442 = (C46793 * (C46847 + C46871 * C46972) +
                          (C47185 + C46950 * C46972) * ae) /
                         C46743;
    const double C46872 = C46794 * C46870;
    const double C47019 = C46793 * C46870;
    const double C47033 = C46963 * C46870;
    const double C1034 = (2 * C46963 * C46846 +
                          C46963 * (C46846 + C46870 * std::pow(C46963, 2))) /
                         C46745;
    const double C1039 =
        (3 * (C46846 + C46870 * C46972) +
         C46963 * (2 * C46963 * C46870 +
                   C46963 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46972))) /
        C46745;
    const double C5682 =
        (4 * (2 * C47030 + C46963 * C47040) +
         C46963 * (3 * C47040 +
                   C46963 * (2 * C46963 * C46866 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46745;
    const double C47071 = C47066 + C47069;
    const double C47099 = C46793 * C47095;
    const double C5704 = C5692 + C5693;
    const double C17010 = C16998 + C16999;
    const double C22715 = C22711 + C22712;
    const double C22444 =
        (5 * (3 * C47037 + C46963 * C47108) +
         C46963 * (4 * C47108 +
                   C46963 * (3 * C47106 +
                             C46963 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46745;
    const double C47141 = C47136 + C47139;
    const double C47161 = C46793 * C47159;
    const double C46953 = C46951 + C46944;
    const double C47051 = C46963 * C47050;
    const double C7250 =
        (2 * (ae * C46989 + C46793 * C47040) + ae * (C46989 + C47050 * C47005) +
         C46793 * (C47040 + ae * C46793 * C47050 +
                   C46793 * (ae * C47050 +
                             C46793 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46745;
    const double C7246 =
        (2 * C46793 * C46989 + C46793 * (C46989 + C47050 * C47005)) / C46743;
    const double C47072 = C47031 + C47070;
    const double C47100 = C46793 * C47097;
    const double C47116 = C46963 * C47115;
    const double C23631 =
        (2 * (ae * C47046 + C46793 * C47108) + ae * (C47046 + C47115 * C47005) +
         C46793 * (C47108 + ae * C46793 * C47115 +
                   C46793 * (ae * C47115 +
                             C46793 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46745;
    const double C23629 =
        (2 * C46793 * C47046 + C46793 * (C47046 + C47115 * C47005)) / C46743;
    const double C23269 =
        (3 * (C47037 + ae * C47120 + C46793 * C47124) +
         ae * (2 * C47120 + C46793 * C47125) +
         C46793 * (2 * C47124 + ae * C47125 +
                   C46793 * (C47106 + ae * C46793 * C47113 +
                             C46793 * (ae * C47113 +
                                       C46793 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46745;
    const double C23267 = (3 * (C46986 + C47044 * C47005) +
                           C46793 * (2 * C47120 + C46793 * C47125)) /
                          C46743;
    const double C47142 = C47134 + C47140;
    const double C47162 = C46793 * C47160;
    const double C4768 = C4580 * C285;
    const double C16082 = C15894 * C285;
    const double C21968 = C21567 * C285;
    const double C5082 = C4580 * C287;
    const double C16396 = C15894 * C287;
    const double C22592 = C47574 * C5859;
    const double C22978 = C47574 * C6381;
    const double C22454 = C47574 * C5677;
    const double C22594 = C47574 * C5855;
    const double C22980 = C47574 * C6377;
    const double C44152 = C47574 * C12347;
    const double C2122 =
        (2 * (C46793 * C46847 + C47185 * ae) +
         C46793 * (C46847 + C46793 * (C46793 * C46871 + C46952) +
                   C46793 * C46950 * ae) +
         (C47185 + C46950 * C47005) * ae) /
        C46743;
    const double C47189 = C47187 + C47188;
    const double C2016 =
        (C46963 * C46847 + C46793 * (C46793 * C46963 * C46871 + C47323 * ae) +
         C46793 * C47323 * ae) /
        C46743;
    const double C2014 = C46963 * C47185 + C47323 * C47005;
    const double C5858 =
        (2 * C47333 + C46963 * C47345 +
         C46793 * (C46793 * (2 * C46963 * C46851 +
                             C46963 * (C46851 + C46794 * C46863 * C46972)) +
                   C47359 * ae) +
         C46793 * C47359 * ae) /
        C46743;
    const double C6380 =
        (C46793 * (3 * C47345 +
                   C46963 * (2 * C46963 * C46851 +
                             C46963 * (C46851 + C46794 * C46863 * C46972))) +
         (3 * C47280 + C46963 * C47359) * ae) /
        C46743;
    const double C5676 = 4 * (2 * C47260 + C46963 * C47280) +
                         C46963 * (3 * C47280 + C46963 * C47359);
    const double C5854 = 2 * C47260 + C46963 * C47280 + C47359 * C47005;
    const double C6376 = C46793 * (3 * C47280 + C46963 * C47359);
    const double C12346 = 4 * (2 * C47311 + C46793 * C47314) +
                          C46793 * (3 * C47314 + C46793 * C47414);
    const double C47432 = C47425 + C47431;
    const double C28036 = 4 * (2 * C47369 + C46793 * C47374) +
                          C46793 * (3 * C47374 + C46793 * C47460);
    const double C47481 = C47469 + C47479;
    const double C47880 = C47606 * C47594;
    const double C47920 = C47885 + C47606;
    const double C47888 = C47615 / C47596;
    const double C47884 = C47615 * C47594;
    const double C554 = C47964 - (C47606 * C47597) / C47592;
    const double C47898 = C47688 * C47682;
    const double C47935 = C47900 + C47688;
    const double C47902 = C47695 / C47596;
    const double C47899 = C47695 * C47682;
    const double C1284 = C47968 - (C47688 * C47684) / C47592;
    const double C47904 = C47730 * C47724;
    const double C47941 = C47906 + C47730;
    const double C47908 = C47737 / C47596;
    const double C47905 = C47737 * C47724;
    const double C2116 = C47970 - (C47730 * C47726) / C47592;
    const double C22446 = C21737 + C21738;
    const double C21751 = C21735 + C21736;
    const double C22578 = C22258 + C22259;
    const double C21745 = C21727 * C116;
    const double C26125 = C21727 * C10311;
    const double C37313 = C21727 * C31580;
    const double C21741 = C21723 * C116;
    const double C26121 = C21723 * C10311;
    const double C37309 = C21723 * C31580;
    const double C22262 = C22250 * C116;
    const double C26119 = C22250 * C10312;
    const double C26795 = C22250 * C10311;
    const double C37307 = C22250 * C31581;
    const double C37929 = C22250 * C31580;
    const double C4771 = C4575 * C296;
    const double C4759 = C47914 * C296;
    const double C16085 = C15889 * C296;
    const double C16073 = C47914 * C296;
    const double C21710 = C47574 * C296;
    const double C4767 = C47914 * C297;
    const double C5081 = C4575 * C297;
    const double C16081 = C47914 * C297;
    const double C16395 = C15889 * C297;
    const double C21965 = C47574 * C297;
    const double C22461 = C22457 * C47850;
    const double C12349 =
        (4 * (2 * C47307 + C46793 * C47402 + C47308 * ae) +
         C46793 *
             (3 * C47402 +
              C46793 * (2 * C47394 +
                        C46793 * (C46823 + C46793 * (C46793 * C46839 + C46918) +
                                  C46793 * C46916 * ae) +
                        C47396 * ae) +
              C47401 * ae) +
         (3 * C47308 + C46793 * C47401) * ae) /
        C46743;
    const double C21746 = C21728 * C47850;
    const double C26126 = C21728 * C10309;
    const double C37314 = C21728 * C31578;
    const double C21742 = C21724 * C47850;
    const double C26122 = C21724 * C10309;
    const double C37310 = C21724 * C31578;
    const double C22263 = C22251 * C47850;
    const double C26120 = C22251 * C47947;
    const double C26796 = C22251 * C10309;
    const double C37308 = C22251 * C47947;
    const double C37930 = C22251 * C31578;
    const double C21744 = C21726 * C47850;
    const double C27329 = C21726 * C10309;
    const double C38463 = C21726 * C31578;
    const double C449 =
        (C46812 + ae * C46815 + C46794 * C46826 + ae * C46793 * C46911 +
         C46793 * (ae * C46911 + C46793 * C46846)) /
        C46745;
    const double C450 =
        (ae * (2 * C46899 + C46794 * C46911 + (C46888 + C46902 * C46819) * ae) +
         C46793 * (2 * C46826 + ae * C46827 + C46794 * C46846)) /
        C46745;
    const double C829 =
        (ae * C46963 * C46911 + C46793 * C46963 * C46846) / C46745;
    const double C132 = (3 * (C46893 + C46794 * C46899 + C47177 * ae) +
                         C46794 * (2 * C46899 + C46794 * C46911 + C47179 * ae) +
                         (2 * C47177 + C46794 * C47179) * ae) /
                        C46743;
    const double C279 =
        (C46893 + C46794 * C46899 + C47177 * ae + C46911 * C46972) / C46743;
    const double C283 =
        (C46963 * (2 * C46899 + C46794 * C46911 + C47179 * ae)) / C46743;
    const double C432 =
        (C46893 + C46794 * C46899 + C47177 * ae + C46911 * C47005) / C46743;
    const double C436 =
        (C46793 * (2 * C46899 + C46794 * C46911 + C47179 * ae)) / C46743;
    const double C819 = (C46793 * C46963 * C46911) / C46743;
    const double C5889 = C5868 + C5869;
    const double C6981 = C6974 + C6975;
    const double C17187 = C17166 + C17167;
    const double C18263 = C18256 + C18257;
    const double C23427 = C23421 + C23422;
    const double C5887 = C5864 + C5865;
    const double C6983 = C6978 + C6979;
    const double C17185 = C17162 + C17163;
    const double C18265 = C18260 + C18261;
    const double C23428 = C23423 + C23424;
    const double C22265 = C22253 * C47850;
    const double C26124 = C22253 * C47947;
    const double C27527 = C22253 * C10309;
    const double C37312 = C22253 * C47947;
    const double C38661 = C22253 * C31578;
    const double C21743 = C21725 * C116;
    const double C27330 = C21725 * C10311;
    const double C38464 = C21725 * C31580;
    const double C22264 = C22252 * C116;
    const double C26123 = C22252 * C10312;
    const double C27528 = C22252 * C10311;
    const double C37311 = C22252 * C31581;
    const double C38662 = C22252 * C31580;
    const double C22606 = C22598 * C47850;
    const double C27195 = C22598 * C10309;
    const double C27192 = C22598 * C47947;
    const double C38329 = C22598 * C31578;
    const double C38326 = C22598 * C47947;
    const double C22608 = C22600 * C47850;
    const double C27034 = C22600 * C47947;
    const double C27661 = C22600 * C10309;
    const double C38168 = C22600 * C47947;
    const double C38795 = C22600 * C31578;
    const double C22459 = C22455 * C116;
    const double C27038 = C22455 * C10311;
    const double C38172 = C22455 * C31580;
    const double C22605 = C22597 * C116;
    const double C27196 = C22597 * C10311;
    const double C27191 = C22597 * C10312;
    const double C38330 = C22597 * C31580;
    const double C38325 = C22597 * C31581;
    const double C22607 = C22599 * C116;
    const double C27033 = C22599 * C10312;
    const double C27662 = C22599 * C10311;
    const double C38167 = C22599 * C31581;
    const double C38796 = C22599 * C31580;
    const double C44150 = C47574 * C12351;
    const double C10646 = C4580 * C438;
    const double C31915 = C15894 * C438;
    const double C43089 = C21567 * C438;
    const double C10944 = C4580 * C440;
    const double C32213 = C15894 * C440;
    const double C5428 = C4580 * C823;
    const double C16742 = C15894 * C823;
    const double C26455 = C21567 * C823;
    const double C4772 = C4580 * C268;
    const double C16086 = C15894 * C268;
    const double C21966 = C21567 * C268;
    const double C5078 = C4580 * C269;
    const double C16392 = C15894 * C269;
    const double C10650 = C4580 * C421;
    const double C31919 = C15894 * C421;
    const double C43087 = C21567 * C421;
    const double C10940 = C4580 * C422;
    const double C32209 = C15894 * C422;
    const double C5432 = C4580 * C815;
    const double C16746 = C15894 * C815;
    const double C26453 = C21567 * C815;
    const double C47415 = C47413 + C47408;
    const double C46929 = C46794 * C46928;
    const double C46934 = 3 * C46928;
    const double C46976 = C46963 * C46928;
    const double C47018 = ae * C46928;
    const double C47017 = C46793 * C46928;
    const double C1180 = (ae * (C46911 + C46928 * C46972) +
                          C46793 * (C46846 + C46870 * C46972)) /
                         C46745;
    const double C1862 = (2 * (ae * C46911 + C46793 * C46846) +
                          ae * (C46911 + C46928 * std::pow(C46793, 2)) +
                          C46793 * (C46846 + ae * C46793 * C46928 +
                                    C46793 * (ae * C46928 + C46793 * C46870))) /
                         C46745;
    const double C1025 =
        (2 * C46963 * C46911 + C46963 * (C46911 + C46928 * C46972)) / C46743;
    const double C1168 = (C46793 * (C46911 + C46928 * C46972)) / C46743;
    const double C1853 =
        (2 * C46793 * C46911 + C46793 * (C46911 + C46928 * C47005)) / C46743;
    const double C5879 = C47914 * C1184;
    const double C17177 = C47914 * C1184;
    const double C23418 = C47574 * C1184;
    const double C6385 = C47914 * C1552;
    const double C17675 = C47914 * C1552;
    const double C22867 = C47574 * C1552;
    const double C5697 = C47914 * C1029;
    const double C17003 = C47914 * C1029;
    const double C22714 = C47574 * C1029;
    const double C5883 = C47914 * C1172;
    const double C17181 = C47914 * C1172;
    const double C23420 = C47574 * C1172;
    const double C6389 = C47914 * C1546;
    const double C17679 = C47914 * C1546;
    const double C22869 = C47574 * C1546;
    const double C12363 = C47914 * C1866;
    const double C33624 = C47914 * C1866;
    const double C44400 = C47574 * C1866;
    const double C12367 = C47914 * C1857;
    const double C33628 = C47914 * C1857;
    const double C44402 = C47574 * C1857;
    const double C7260 = C7252 + C7253;
    const double C18534 = C18526 + C18527;
    const double C28259 = C28253 + C28254;
    const double C7262 = C7256 + C7257;
    const double C18536 = C18530 + C18531;
    const double C28260 = C28255 + C28256;
    const double C47480 = C46793 * C47478;
    const double C22591 = C21567 * C5857;
    const double C22977 = C21567 * C6379;
    const double C22453 = C21567 * C5675;
    const double C22593 = C21567 * C5853;
    const double C22979 = C21567 * C6375;
    const double C23645 = C23641 * C47850;
    const double C27193 = C23641 * C47947;
    const double C38327 = C23641 * C47947;
    const double C23646 = C23642 * C116;
    const double C27194 = C23642 * C10312;
    const double C38328 = C23642 * C31581;
    const double C28055 = C28045 + C28046;
    const double C28056 = C28047 + C28048;
    const double C47461 = C47459 + C47452;
    const double C44151 = C21567 * C12345;
    const double C46875 = C46855 + C46873;
    const double C46874 = C46856 + C46872;
    const double C6029 = C47914 * C1034;
    const double C17327 = C47914 * C1034;
    const double C21712 = C47574 * C1034;
    const double C47101 = C47098 + C47099;
    const double C22717 = C22715 * C47850;
    const double C47163 = C47151 + C47161;
    const double C46954 = C46794 * C46953;
    const double C46991 = C46953 * C46972;
    const double C47020 = C46953 * C47005;
    const double C47034 = C46963 * C46953;
    const double C47052 = C47048 + C47051;
    const double C6776 =
        (3 * (C47030 + ae * C47065 + C46793 * C47071) +
         ae * (2 * C47065 + C46793 * C47072) +
         C46793 * (2 * C47071 + ae * C47072 +
                   C46793 * (C47067 + ae * C46793 * C47068 +
                             C46793 * (ae * C47068 +
                                       C46793 * C46963 *
                                           (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C6772 = (3 * (C46978 + C47031 * C47005) +
                          C46793 * (2 * C47065 + C46793 * C47072)) /
                         C46743;
    const double C47102 = C47096 + C47100;
    const double C47117 = C47110 + C47116;
    const double C28039 =
        (4 * (2 * C47062 + ae * C47063 + C46793 * C47141) +
         ae * (3 * C47063 + C46793 * C47142) +
         C46793 * (3 * C47141 + ae * C47142 +
                   C46793 * (2 * C47137 + ae * C47138 +
                             C46793 * (C47130 + ae * C46793 * C47131 +
                                       C46793 * (ae * C47131 +
                                                 C46793 * C46963 *
                                                     std::pow(C46796, 8) *
                                                     bs[8] * C46804))))) /
        C46745;
    const double C28037 = (4 * (2 * C47056 + C46793 * C47063) +
                           C46793 * (3 * C47063 + C46793 * C47142)) /
                          C46743;
    const double C47164 = C47149 + C47162;
    const double C123 = 5 * (3 * C47179 + C46794 * C47185) +
                        C46794 * (4 * C47185 + C46794 * C47189);
    const double C270 = 3 * C47179 + C46794 * C47185 + C47189 * C46972;
    const double C423 = 3 * C47179 + C46794 * C47185 + C47189 * C47005;
    const double C558 = C46963 * (4 * C47185 + C46794 * C47189);
    const double C662 = C46793 * (4 * C47185 + C46794 * C47189);
    const double C816 = C46793 * C46963 * C47189;
    const double C22575 =
        (3 * C47342 + C46963 * C47422 +
         C46793 * (C46793 * (3 * C47420 +
                             C46963 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972))) +
                   C47432 * ae) +
         C46793 * C47432 * ae) /
        C46743;
    const double C22973 =
        (C46793 * (4 * C47422 +
                   C46963 * (3 * C47420 +
                             C46963 * (2 * C46963 * C46839 +
                                       C46963 * (C46839 + C46863 * C46972)))) +
         (4 * C47353 + C46963 * C47432) * ae) /
        C46743;
    const double C22441 = 5 * (3 * C47277 + C46963 * C47353) +
                          C46963 * (4 * C47353 + C46963 * C47432);
    const double C22573 = 3 * C47277 + C46963 * C47353 + C47432 * C47005;
    const double C22971 = C46793 * (4 * C47353 + C46963 * C47432);
    const double C44144 = 5 * (3 * C47308 + C46793 * C47401) +
                          C46793 * (4 * C47401 + C46793 * C47481);
    const double C47916 = C47880 / C47592;
    const double C47951 = C47920 / C47596;
    const double C47952 = C47922 + C47888;
    const double C556 = C47888 - C47613 / C47610;
    const double C47919 = C47884 / C47592;
    const double C47932 = C47898 / C47592;
    const double C47958 = C47935 / C47596;
    const double C47959 = C47936 + C47902;
    const double C1286 = C47902 - C47693 / C47610;
    const double C47934 = C47899 / C47592;
    const double C47938 = C47904 / C47592;
    const double C47961 = C47941 / C47596;
    const double C47962 = C47942 + C47908;
    const double C2118 = C47908 - C47735 / C47610;
    const double C47940 = C47905 / C47592;
    const double C4797 = C4770 + C4771;
    const double C4791 = C4758 + C4759;
    const double C16111 = C16084 + C16085;
    const double C16105 = C16072 + C16073;
    const double C21730 = C21709 + C21710;
    const double C4795 = C4766 + C4767;
    const double C5086 = C5080 + C5081;
    const double C16109 = C16080 + C16081;
    const double C16400 = C16394 + C16395;
    const double C21971 = C21964 + C21965;
    const double C44149 = C21567 * C12349;
    const double C21752 = C21742 + C21741;
    const double C10649 = C4575 * C449;
    const double C10637 = C47914 * C449;
    const double C26304 = C47574 * C449;
    const double C31918 = C15889 * C449;
    const double C31906 = C47914 * C449;
    const double C10645 = C47914 * C450;
    const double C10943 = C4575 * C450;
    const double C26594 = C47574 * C450;
    const double C31914 = C47914 * C450;
    const double C32212 = C15889 * C450;
    const double C5431 = C4575 * C829;
    const double C5427 = C47914 * C829;
    const double C16745 = C15889 * C829;
    const double C16741 = C47914 * C829;
    const double C22243 = C47574 * C829;
    const double C4775 = C4575 * C279;
    const double C4755 = C47914 * C279;
    const double C16089 = C15889 * C279;
    const double C16069 = C47914 * C279;
    const double C21708 = C47574 * C279;
    const double C4763 = C47914 * C283;
    const double C5077 = C4575 * C283;
    const double C16077 = C47914 * C283;
    const double C16391 = C15889 * C283;
    const double C21963 = C47574 * C283;
    const double C10653 = C4575 * C432;
    const double C10633 = C47914 * C432;
    const double C26306 = C47574 * C432;
    const double C31922 = C15889 * C432;
    const double C31902 = C47914 * C432;
    const double C10641 = C47914 * C436;
    const double C10939 = C4575 * C436;
    const double C26592 = C47574 * C436;
    const double C31910 = C47914 * C436;
    const double C32208 = C15889 * C436;
    const double C5435 = C4575 * C819;
    const double C5423 = C47914 * C819;
    const double C16749 = C15889 * C819;
    const double C16737 = C47914 * C819;
    const double C22245 = C47574 * C819;
    const double C23431 = C23427 * C47850;
    const double C26798 = C23427 * C47947;
    const double C28257 = C23427 * C10309;
    const double C37932 = C23427 * C47947;
    const double C39367 = C23427 * C31578;
    const double C23432 = C23428 * C116;
    const double C26797 = C23428 * C10312;
    const double C28258 = C23428 * C10311;
    const double C37931 = C23428 * C31581;
    const double C39368 = C23428 * C31580;
    const double C22710 = C21743 + C21744;
    const double C22865 = C22264 + C22265;
    const double C22463 = C22459 + C22460;
    const double C22611 = C22605 + C22606;
    const double C22976 = C22607 + C22608;
    const double C12350 =
        (4 * (2 * C47313 + C46793 * C47415 + C47314 * ae) +
         C46793 *
             (3 * C47415 +
              C46793 * (2 * C47407 +
                        C46793 * (C46851 +
                                  C46793 * (C46793 * C46794 * C46863 + C46944) +
                                  C46793 * C46941 * ae) +
                        C47409 * ae) +
              C47414 * ae) +
         (3 * C47314 + C46793 * C47414) * ae) /
        C46743;
    const double C46930 = C46914 + C46929;
    const double C1177 = (C46963 * C46846 + ae * C46793 * C46976 +
                          C46793 * (ae * C46976 + C46793 * C46963 * C46870)) /
                         C46745;
    const double C1162 = (C46963 * C46911 + C46976 * C47005) / C46743;
    const double C47021 = C47018 + C47019;
    const double C6235 = C47914 * C1180;
    const double C17533 = C47914 * C1180;
    const double C22239 = C47574 * C1180;
    const double C12703 = C47914 * C1862;
    const double C33964 = C47914 * C1862;
    const double C42886 = C47574 * C1862;
    const double C6033 = C47914 * C1025;
    const double C17331 = C47914 * C1025;
    const double C21714 = C47574 * C1025;
    const double C6239 = C47914 * C1168;
    const double C17537 = C47914 * C1168;
    const double C22241 = C47574 * C1168;
    const double C12707 = C47914 * C1853;
    const double C33968 = C47914 * C1853;
    const double C42888 = C47574 * C1853;
    const double C5894 = C5878 + C5879;
    const double C17192 = C17176 + C17177;
    const double C23425 = C23417 + C23418;
    const double C6392 = C6384 + C6385;
    const double C17682 = C17674 + C17675;
    const double C22870 = C22866 + C22867;
    const double C5706 = C5696 + C5697;
    const double C17012 = C17002 + C17003;
    const double C22716 = C22713 + C22714;
    const double C5896 = C5882 + C5883;
    const double C17194 = C17180 + C17181;
    const double C23426 = C23419 + C23420;
    const double C6394 = C6388 + C6389;
    const double C17684 = C17678 + C17679;
    const double C22871 = C22868 + C22869;
    const double C12374 = C12362 + C12363;
    const double C33635 = C33623 + C33624;
    const double C44403 = C44399 + C44400;
    const double C12376 = C12366 + C12367;
    const double C33637 = C33627 + C33628;
    const double C44404 = C44401 + C44402;
    const double C28261 = C28259 * C47947;
    const double C39365 = C28259 * C47947;
    const double C28262 = C28260 * C10312;
    const double C39366 = C28260 * C31581;
    const double C47482 = C47464 + C47480;
    const double C22601 = C22591 + C22592;
    const double C22981 = C22977 + C22978;
    const double C22458 = C22453 + C22454;
    const double C22602 = C22593 + C22594;
    const double C22982 = C22979 + C22980;
    const double C28529 = C28055 * C47947;
    const double C39629 = C28055 * C47947;
    const double C28530 = C28056 * C10312;
    const double C39630 = C28056 * C31581;
    const double C28038 =
        (4 * (2 * C47373 + C46793 * C47461 + C47374 * ae) +
         C46793 * (3 * C47461 +
                   C46793 * (2 * C47455 +
                             C46793 * (C47447 +
                                       C46793 * (C46793 * C46963 * C46863 +
                                                 C47450 * ae) +
                                       C46793 * C47450 * ae) +
                             C47456 * ae) +
                   C47460 * ae) +
         (3 * C47374 + C46793 * C47460) * ae) /
        C46743;
    const double C44154 = C44151 + C44152;
    const double C137 = (5 * (3 * C46827 + C46794 * C46847) +
                         C46794 * (4 * C46847 + C46794 * C46875)) /
                        C46743;
    const double C290 =
        (3 * C46827 + C46794 * C46847 + C46875 * C46972) / C46743;
    const double C443 =
        (3 * C46827 + C46794 * C46847 +
         C46793 * (C46793 * C46875 + C47189 * ae) + C46793 * C47189 * ae) /
        C46743;
    const double C560 = (C46963 * (4 * C46847 + C46794 * C46875)) / C46743;
    const double C664 = (C46793 * (4 * C46847 + C46794 * C46875) +
                         (4 * C47185 + C46794 * C47189) * ae) /
                        C46743;
    const double C826 =
        (C46793 * C46963 * C46875 + C46963 * C47189 * ae) / C46743;
    const double C144 =
        (5 * (3 * C46846 + ae * C46847 + C46794 * C46874) +
         ae * (4 * C46847 + C46794 * C46875) +
         C46794 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C298 = (2 * C46826 + ae * C46827 + C46794 * C46846 +
                         C46874 * std::pow(yP - yQ, 2)) /
                        C46745;
    const double C299 =
        ((yP - yQ) * (3 * C46846 + ae * C46847 + C46794 * C46874)) / C46745;
    const double C300 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 +
         (3 * C46870 + ae * C46871 +
          C46794 *
              (2 * C46866 + ae * C46867 +
               C46794 * (C46862 + ae * C46794 * C46863 +
                         C46794 * (ae * C46863 + C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))) *
             std::pow(yP - yQ, 2)) /
        C46745;
    const double C561 =
        ((yP - yQ) *
         (4 * C46874 + ae * C46875 +
          C46794 * (3 * C46870 + ae * C46871 +
                    C46794 * (2 * C46866 + ae * C46867 +
                              C46794 * (C46862 + ae * C46794 * C46863 +
                                        C46794 * (ae * C46863 +
                                                  C46794 * std::pow(C46796, 8) *
                                                      bs[8] * C46804)))))) /
        C46745;
    const double C1293 =
        (2 * C46963 * C46874 +
         C46963 * (C46874 + (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C46972)) /
        C46745;
    const double C6036 = C6028 + C6029;
    const double C17334 = C17326 + C17327;
    const double C21731 = C21711 + C21712;
    const double C46955 = C46935 + C46954;
    const double C46992 = C46928 + C46991;
    const double C47022 = C46928 + C47020;
    const double C2233 =
        (2 * (ae * C46976 + C46793 * C47033) + ae * (C46976 + C47034 * C47005) +
         C46793 * (C47033 + ae * C46793 * C47034 +
                   C46793 * (ae * C47034 +
                             C46793 * C46963 *
                                 (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C2227 =
        (2 * C46793 * C46976 + C46793 * (C46976 + C47034 * C47005)) / C46743;
    const double C5860 =
        (2 * C47030 + C46963 * C47040 + ae * C46793 * C47052 +
         C46793 * (ae * C47052 +
                   C46793 * (2 * C46963 * C46866 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46745;
    const double C6382 =
        (ae * (3 * C46989 + C46963 * C47052) +
         C46793 * (3 * C47040 +
                   C46963 * (2 * C46963 * C46866 +
                             C46963 * (C46866 + (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804) *
                                                    C46972)))) /
        C46745;
    const double C5678 = (4 * (2 * C46978 + C46963 * C46989) +
                          C46963 * (3 * C46989 + C46963 * C47052)) /
                         C46743;
    const double C5856 =
        (2 * C46978 + C46963 * C46989 + C47052 * C47005) / C46743;
    const double C6378 = (C46793 * (3 * C46989 + C46963 * C47052)) / C46743;
    const double C12352 =
        (4 * (2 * C47014 + ae * C47015 + C46793 * C47101) +
         ae * (3 * C47015 + C46793 * C47102) +
         C46793 *
             (3 * C47101 + ae * C47102 +
              C46793 *
                  (2 * C47095 + ae * C47097 +
                   C46793 * (C46866 + ae * C46793 * C46946 +
                             C46793 * (ae * C46946 +
                                       C46793 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C12348 = (4 * (2 * C47010 + C46793 * C47015) +
                           C46793 * (3 * C47015 + C46793 * C47102)) /
                          C46743;
    const double C22576 =
        (3 * C47037 + C46963 * C47108 + ae * C46793 * C47117 +
         C46793 * (ae * C47117 +
                   C46793 * (3 * C47106 +
                             C46963 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46745;
    const double C22974 =
        (ae * (4 * C47046 + C46963 * C47117) +
         C46793 * (4 * C47108 +
                   C46963 * (3 * C47106 +
                             C46963 * (2 * C46963 * C46862 +
                                       C46963 * (C46862 + std::pow(C46796, 8) *
                                                              bs[8] * C46804 *
                                                              C46972))))) /
        C46745;
    const double C22442 = (5 * (3 * C46986 + C46963 * C47046) +
                           C46963 * (4 * C47046 + C46963 * C47117)) /
                          C46743;
    const double C22574 =
        (3 * C46986 + C46963 * C47046 + C47117 * C47005) / C46743;
    const double C22972 = (C46793 * (4 * C47046 + C46963 * C47117)) / C46743;
    const double C44147 =
        (5 * (3 * C47087 + ae * C47088 + C46793 * C47163) +
         ae * (4 * C47088 + C46793 * C47164) +
         C46793 *
             (4 * C47163 + ae * C47164 +
              C46793 *
                  (3 * C47159 + ae * C47160 +
                   C46793 * (2 * C47153 + ae * C47155 +
                             C46793 * (C46862 + ae * C46793 * C46939 +
                                       C46793 * (ae * C46939 +
                                                 C46793 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C44145 = (5 * (3 * C47008 + C46793 * C47088) +
                           C46793 * (4 * C47088 + C46793 * C47164)) /
                          C46743;
    const double C47972 = C47916 + C47964;
    const double C555 = C47951 - (C47615 * C47597) / C47592;
    const double C111 = C47952 / C47596 - C47613 / C47923;
    const double C47965 = C47919 + C47951;
    const double C47973 = C47932 + C47968;
    const double C1285 = C47958 - (C47695 * C47684) / C47592;
    const double C1013 = C47959 / C47596 - C47693 / C47923;
    const double C47969 = C47934 + C47958;
    const double C47974 = C47938 + C47970;
    const double C2117 = C47961 - (C47737 * C47726) / C47592;
    const double C1842 = C47962 / C47596 - C47735 / C47923;
    const double C47971 = C47940 + C47961;
    const double C21748 = C21730 * C47850;
    const double C26131 = C21730 * C10309;
    const double C37319 = C21730 * C31578;
    const double C21975 = C21971 * C47850;
    const double C26452 = C21971 * C10309;
    const double C37598 = C21971 * C31578;
    const double C44153 = C44149 + C44150;
    const double C10675 = C10648 + C10649;
    const double C10669 = C10636 + C10637;
    const double C26319 = C26303 + C26304;
    const double C31944 = C31917 + C31918;
    const double C31938 = C31905 + C31906;
    const double C10673 = C10644 + C10645;
    const double C10948 = C10942 + C10943;
    const double C26596 = C26593 + C26594;
    const double C31942 = C31913 + C31914;
    const double C32217 = C32211 + C32212;
    const double C5445 = C5430 + C5431;
    const double C5443 = C5426 + C5427;
    const double C16759 = C16744 + C16745;
    const double C16757 = C16740 + C16741;
    const double C22256 = C22242 + C22243;
    const double C4799 = C4774 + C4775;
    const double C4789 = C4754 + C4755;
    const double C16113 = C16088 + C16089;
    const double C16103 = C16068 + C16069;
    const double C21729 = C21707 + C21708;
    const double C4793 = C4762 + C4763;
    const double C5084 = C5076 + C5077;
    const double C16107 = C16076 + C16077;
    const double C16398 = C16390 + C16391;
    const double C21970 = C21962 + C21963;
    const double C10677 = C10652 + C10653;
    const double C10667 = C10632 + C10633;
    const double C26320 = C26305 + C26306;
    const double C31946 = C31921 + C31922;
    const double C31936 = C31901 + C31902;
    const double C10671 = C10640 + C10641;
    const double C10946 = C10938 + C10939;
    const double C26595 = C26591 + C26592;
    const double C31940 = C31909 + C31910;
    const double C32215 = C32207 + C32208;
    const double C5447 = C5434 + C5435;
    const double C5441 = C5422 + C5423;
    const double C16761 = C16748 + C16749;
    const double C16755 = C16736 + C16737;
    const double C22257 = C22244 + C22245;
    const double C46931 = C46930 + C46925;
    const double C6973 = C47914 * C1177;
    const double C18255 = C47914 * C1177;
    const double C26300 = C47574 * C1177;
    const double C6977 = C47914 * C1162;
    const double C18259 = C47914 * C1162;
    const double C26302 = C47574 * C1162;
    const double C6242 = C6234 + C6235;
    const double C17540 = C17532 + C17533;
    const double C22254 = C22238 + C22239;
    const double C12710 = C12702 + C12703;
    const double C33971 = C33963 + C33964;
    const double C42889 = C42885 + C42886;
    const double C6038 = C6032 + C6033;
    const double C17336 = C17330 + C17331;
    const double C21732 = C21713 + C21714;
    const double C6244 = C6238 + C6239;
    const double C17542 = C17536 + C17537;
    const double C22255 = C22240 + C22241;
    const double C12712 = C12706 + C12707;
    const double C33973 = C33967 + C33968;
    const double C42890 = C42887 + C42888;
    const double C23429 = C23425 * C47850;
    const double C27525 = C23425 * C47947;
    const double C38659 = C23425 * C47947;
    const double C22872 = C22870 * C47850;
    const double C27327 = C22870 * C47947;
    const double C38461 = C22870 * C47947;
    const double C22718 = C22716 * C116;
    const double C23430 = C23426 * C116;
    const double C27526 = C23426 * C10312;
    const double C38660 = C23426 * C31581;
    const double C22873 = C22871 * C116;
    const double C27328 = C22871 * C10312;
    const double C38462 = C22871 * C31581;
    const double C47483 = C47482 + C47467;
    const double C22609 = C22601 * C47850;
    const double C27659 = C22601 * C47947;
    const double C38793 = C22601 * C47947;
    const double C22983 = C22981 * C47850;
    const double C27035 = C22981 * C47947;
    const double C38169 = C22981 * C47947;
    const double C22462 = C22458 * C116;
    const double C22610 = C22602 * C116;
    const double C27660 = C22602 * C10312;
    const double C38794 = C22602 * C31581;
    const double C22984 = C22982 * C116;
    const double C27036 = C22982 * C10312;
    const double C38170 = C22982 * C31581;
    const double C4769 = C47914 * C298;
    const double C16083 = C47914 * C298;
    const double C21969 = C47574 * C298;
    const double C5083 = C47914 * C299;
    const double C16397 = C47914 * C299;
    const double C21749 = C21731 * C47850;
    const double C46956 = C46955 + C46947;
    const double C1185 =
        (C46846 + C46870 * C46972 + ae * C46793 * C46992 +
         C46793 * (ae * C46992 +
                   C46793 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46972))) /
        C46745;
    const double C1553 =
        (ae * (2 * C46976 + C46963 * C46992) +
         C46793 * (2 * C46963 * C46870 +
                   C46963 * (C46870 + (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)) *
                                          C46972))) /
        C46745;
    const double C1030 = (3 * (C46911 + C46928 * C46972) +
                          C46963 * (2 * C46976 + C46963 * C46992)) /
                         C46743;
    const double C1173 = (C46911 + C46928 * C46972 + C46992 * C47005) / C46743;
    const double C1547 = (C46793 * (2 * C46976 + C46963 * C46992)) / C46743;
    const double C1867 =
        (3 * (C46846 + ae * C47017 + C46793 * C47021) +
         ae * (2 * C47017 + C46793 * C47022) +
         C46793 *
             (2 * C47021 + ae * C47022 +
              C46793 *
                  (C46870 + ae * C46793 * C46953 +
                   C46793 * (ae * C46953 +
                             C46793 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C1858 = (3 * (C46911 + C46928 * C47005) +
                          C46793 * (2 * C47017 + C46793 * C47022)) /
                         C46743;
    const double C108 =
        (C47963 + 2 * C47606) / C47596 - (C47972 * C47597) / C47592;
    const double C109 =
        (C47950 + 2 * C47615 + C47972) / C47596 - (C47965 * C47597) / C47592;
    const double C110 = (C47921 + C47612 / C47592 + C47965) / C47596 -
                        (C47952 * C47597) / C47592;
    const double C1010 =
        (C47966 + 2 * C47688) / C47596 - (C47973 * C47684) / C47592;
    const double C1011 =
        (C47954 + 2 * C47695 + C47973) / C47596 - (C47969 * C47684) / C47592;
    const double C1012 = (C47927 + C47692 / C47592 + C47969) / C47596 -
                         (C47959 * C47684) / C47592;
    const double C1839 =
        (C47967 + 2 * C47730) / C47596 - (C47974 * C47726) / C47592;
    const double C1840 =
        (C47956 + 2 * C47737 + C47974) / C47596 - (C47971 * C47726) / C47592;
    const double C1841 = (C47930 + C47734 / C47592 + C47971) / C47596 -
                         (C47962 * C47726) / C47592;
    const double C22268 = C22256 * C47850;
    const double C26128 = C22256 * C47947;
    const double C26801 = C22256 * C10309;
    const double C37316 = C22256 * C47947;
    const double C37935 = C22256 * C31578;
    const double C21747 = C21729 * C116;
    const double C26132 = C21729 * C10311;
    const double C37320 = C21729 * C31580;
    const double C21974 = C21970 * C116;
    const double C26451 = C21970 * C10311;
    const double C37597 = C21970 * C31580;
    const double C22269 = C22257 * C116;
    const double C26127 = C22257 * C10312;
    const double C26802 = C22257 * C10311;
    const double C37315 = C22257 * C31581;
    const double C37936 = C22257 * C31580;
    const double C451 =
        (2 * C46826 + ae * C46827 + C46794 * C46846 + ae * C46793 * C46931 +
         C46793 * (ae * C46931 + C46793 * C46874)) /
        C46745;
    const double C452 =
        (ae * (3 * C46911 + C46794 * C46931 +
               (2 * C46905 + C46794 * C46923) * ae) +
         C46793 * (3 * C46846 + ae * C46847 + C46794 * C46874)) /
        C46745;
    const double C830 =
        (ae * C46963 * C46931 + C46793 * C46963 * C46874) / C46745;
    const double C135 = (4 * (2 * C46899 + C46794 * C46911 + C47179 * ae) +
                         C46794 * (3 * C46911 + C46794 * C46931 + C47185 * ae) +
                         (3 * C47179 + C46794 * C47185) * ae) /
                        C46743;
    const double C286 =
        (2 * C46899 + C46794 * C46911 + C47179 * ae + C46931 * C46972) / C46743;
    const double C288 =
        (C46963 * (3 * C46911 + C46794 * C46931 + C47185 * ae)) / C46743;
    const double C439 =
        (2 * C46899 + C46794 * C46911 + C47179 * ae + C46931 * C47005) / C46743;
    const double C441 =
        (C46793 * (3 * C46911 + C46794 * C46931 + C47185 * ae)) / C46743;
    const double C824 = (C46793 * C46963 * C46931) / C46743;
    const double C6980 = C6972 + C6973;
    const double C18262 = C18254 + C18255;
    const double C26317 = C26299 + C26300;
    const double C6982 = C6976 + C6977;
    const double C18264 = C18258 + C18259;
    const double C26318 = C26301 + C26302;
    const double C22266 = C22254 * C47850;
    const double C26129 = C22254 * C47947;
    const double C37317 = C22254 * C47947;
    const double C21750 = C21732 * C116;
    const double C22267 = C22255 * C116;
    const double C26130 = C22255 * C10312;
    const double C37318 = C22255 * C31581;
    const double C44146 =
        (5 * (3 * C47402 + C46793 * C47483 + C47401 * ae) +
         C46793 *
             (4 * C47483 +
              C46793 *
                  (3 * C47478 +
                   C46793 *
                       (2 * C47470 +
                        C46793 * (C46839 + C46793 * (C46793 * C46863 + C46940) +
                                  C46793 * C46937 * ae) +
                        C47472 * ae) +
                   C47477 * ae) +
              C47481 * ae) +
         (4 * C47401 + C46793 * C47481) * ae) /
        C46743;
    const double C4796 = C4768 + C4769;
    const double C16110 = C16082 + C16083;
    const double C21973 = C21968 + C21969;
    const double C5087 = C5082 + C5083;
    const double C16401 = C16396 + C16397;
    const double C46957 = C46794 * C46956;
    const double C47024 = C46963 * C46956;
    const double C1443 =
        (ae * (C46931 + C46956 * C46972) +
         C46793 * (C46874 + (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804))) *
                                C46972)) /
        C46745;
    const double C2123 =
        (2 * (ae * C46931 + C46793 * C46874) + ae * (C46931 + C46956 * C47005) +
         C46793 *
             (C46874 + ae * C46793 * C46956 +
              C46793 *
                  (ae * C46956 +
                   C46793 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C1291 =
        (2 * C46963 * C46931 + C46963 * (C46931 + C46956 * C46972)) / C46743;
    const double C1441 = (C46793 * (C46931 + C46956 * C46972)) / C46743;
    const double C2121 =
        (2 * C46793 * C46931 + C46793 * (C46931 + C46956 * C47005)) / C46743;
    const double C21753 = C21747 + C21748;
    const double C10647 = C47914 * C451;
    const double C31916 = C47914 * C451;
    const double C43090 = C47574 * C451;
    const double C10945 = C47914 * C452;
    const double C32214 = C47914 * C452;
    const double C5429 = C47914 * C830;
    const double C16743 = C47914 * C830;
    const double C26456 = C47574 * C830;
    const double C4773 = C47914 * C286;
    const double C16087 = C47914 * C286;
    const double C21967 = C47574 * C286;
    const double C5079 = C47914 * C288;
    const double C16393 = C47914 * C288;
    const double C10651 = C47914 * C439;
    const double C31920 = C47914 * C439;
    const double C43088 = C47574 * C439;
    const double C10941 = C47914 * C441;
    const double C32210 = C47914 * C441;
    const double C5433 = C47914 * C824;
    const double C16747 = C47914 * C824;
    const double C26454 = C47574 * C824;
    const double C26799 = C26317 * C47947;
    const double C37933 = C26317 * C47947;
    const double C26800 = C26318 * C10312;
    const double C37934 = C26318 * C31581;
    const double C21977 = C21973 * C47850;
    const double C46958 = C46934 + C46957;
    const double C2017 =
        (C46963 * C46874 + ae * C46793 * C47024 +
         C46793 * (ae * C47024 +
                   C46793 * C46963 *
                       (2 * C46866 + ae * C46867 +
                        C46794 * (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C2015 = (C46963 * C46931 + C47024 * C47005) / C46743;
    const double C10674 = C10646 + C10647;
    const double C31943 = C31915 + C31916;
    const double C43092 = C43089 + C43090;
    const double C10949 = C10944 + C10945;
    const double C32218 = C32213 + C32214;
    const double C5444 = C5428 + C5429;
    const double C16758 = C16742 + C16743;
    const double C26458 = C26455 + C26456;
    const double C4798 = C4772 + C4773;
    const double C16112 = C16086 + C16087;
    const double C21972 = C21966 + C21967;
    const double C5085 = C5078 + C5079;
    const double C16399 = C16392 + C16393;
    const double C10676 = C10650 + C10651;
    const double C31945 = C31919 + C31920;
    const double C43091 = C43087 + C43088;
    const double C10947 = C10940 + C10941;
    const double C32216 = C32209 + C32210;
    const double C5446 = C5432 + C5433;
    const double C16760 = C16746 + C16747;
    const double C26457 = C26453 + C26454;
    const double C46959 = C46958 + C46952;
    const double C26460 = C26458 * C47947;
    const double C37600 = C26458 * C47947;
    const double C21976 = C21972 * C116;
    const double C26459 = C26457 * C10312;
    const double C37599 = C26457 * C31581;
    const double C453 =
        (3 * C46846 + ae * C46847 + C46794 * C46874 + ae * C46793 * C46959 +
         C46793 *
             (ae * C46959 +
              C46793 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C665 =
        (ae * (4 * C46931 + C46794 * C46959 +
               (3 * C46923 + C46794 * C46950) * ae) +
         C46793 *
             (4 * C46874 + ae * C46875 +
              C46794 *
                  (3 * C46870 + ae * C46871 +
                   C46794 * (2 * C46866 + ae * C46867 +
                             C46794 * (C46862 + ae * C46794 * C46863 +
                                       C46794 * (ae * C46863 +
                                                 C46794 * std::pow(C46796, 8) *
                                                     bs[8] * C46804)))))) /
        C46745;
    const double C831 =
        (ae * C46963 * C46959 +
         C46793 * C46963 *
             (3 * C46870 + ae * C46871 +
              C46794 * (2 * C46866 + ae * C46867 +
                        C46794 * (C46862 + ae * C46794 * C46863 +
                                  C46794 * (ae * C46863 +
                                            C46794 * std::pow(C46796, 8) *
                                                bs[8] * C46804))))) /
        C46745;
    const double C136 = (5 * (3 * C46911 + C46794 * C46931 + C47185 * ae) +
                         C46794 * (4 * C46931 + C46794 * C46959 + C47189 * ae) +
                         (4 * C47185 + C46794 * C47189) * ae) /
                        C46743;
    const double C289 =
        (3 * C46911 + C46794 * C46931 + C47185 * ae + C46959 * C46972) / C46743;
    const double C442 =
        (3 * C46911 + C46794 * C46931 + C47185 * ae + C46959 * C47005) / C46743;
    const double C559 =
        (C46963 * (4 * C46931 + C46794 * C46959 + C47189 * ae)) / C46743;
    const double C663 =
        (C46793 * (4 * C46931 + C46794 * C46959 + C47189 * ae)) / C46743;
    const double C825 = (C46793 * C46963 * C46959) / C46743;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C47688 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C47695 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C47647 * C2700) *
                     C47606 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47850) *
                      C47835 * C47647 * C47695 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C47688 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C47850 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C47835 * C47647 * C2700) *
                     C47615 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47850) *
                      C47835 * C47647 * C47688 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C47850 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C47835 * C47647 * C47695 +
                  ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                    C115 * C270 + C103 * C289) *
                       C116 +
                   (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                    C115 * C290 + C103 * C300) *
                       C47850) *
                      C47835 * C47647 * C2700) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C47688 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47896) *
                      C47695 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47850 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47835 * C47734) *
                      C2700) *
                     C2440 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47896) *
                      C47688 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47850 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47835 * C47734) *
                      C47695 +
                  (((C113 * C1154 + C101 * C1169 + C114 * C1153 + C102 * C1168 +
                     C115 * C1440 + C103 * C1441) *
                        C116 +
                    (C113 * C1166 + C101 * C1181 + C114 * C1165 + C102 * C1180 +
                     C115 * C1442 + C103 * C1443) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47896) *
                      C2700) *
                     C47612)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C47973 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C47969 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C47647 * C47959 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47850 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47835 * C47647 * C47937) *
                     C2440 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47850) *
                      C47835 * C47647 * C47969 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C47973 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C47850 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C47835 * C47647 * C47959 +
                  ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                    C115 * C1290 + C103 * C1291) *
                       C116 +
                   (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                    C115 * C1292 + C103 * C1293) *
                       C47850) *
                      C47835 * C47647 * C47937) *
                     C47612)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C2332 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C47692) *
                     C47972 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47850) *
                      C47835 * C47647 * C47692 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C2332) *
                     C47965 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47850) *
                      C47835 * C47647 * C2332 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C47850 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C47835 * C47647 * C47692) *
                     C47952 +
                 (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                    C115 * C558 + C103 * C559) *
                       C116 +
                   (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                    C115 * C560 + C103 * C561) *
                       C47850) *
                      C47835 * C47647 * C47692 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47850 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47835 * C47647 * C2332) *
                     C47931)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47967 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47956 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C47930) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47956 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47967 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47850 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47835 * C47930) *
                      C47692) *
                     C2440 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47956 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47967 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47850 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47835 * C47930) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47967 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47850 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47835 * C47956 +
                   ((C113 * C1151 + C101 * C1163 + C114 * C1150 + C102 * C1162 +
                     C115 * C2014 + C103 * C2015) *
                        C116 +
                    (C113 * C1160 + C101 * C1178 + C114 * C1159 + C102 * C1177 +
                     C115 * C2016 + C103 * C2017) *
                        C47850) *
                       C47835 * C47930) *
                      C47692) *
                     C47612)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47896) *
                      C47692) *
                     C47606 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47896) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47850 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47835 * C47734) *
                      C47692) *
                     C47615 +
                 ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47734) *
                      C2332 +
                  (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                     C115 * C816 + C103 * C825) *
                        C116 +
                    (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                     C115 * C826 + C103 * C831) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47896) *
                      C47692) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C2332 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C47692) *
                     C47972 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47850) *
                      C47835 * C47647 * C47692 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C2332) *
                     C47965 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47850) *
                      C47835 * C47647 * C2332 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C47850 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C47835 * C47647 * C47692) *
                     C47952 +
                 (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                    C115 * C558 + C103 * C559) *
                       C116 +
                   (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                    C115 * C560 + C103 * C561) *
                       C47850) *
                      C47835 * C47647 * C47692 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47850 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47835 * C47647 * C2332) *
                     C47931)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C47973 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C47969 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C47647 * C47959 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47850 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47835 * C47647 * C47937) *
                     C2440 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C47850) *
                      C47835 * C47647 * C47969 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C47973 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C47850 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C47835 * C47647 * C47959 +
                  ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                    C115 * C1290 + C103 * C1291) *
                       C116 +
                   (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                    C115 * C1292 + C103 * C1293) *
                       C47850) *
                      C47835 * C47647 * C47937) *
                     C47612)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C47688 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C3094) *
                      C47695 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47850 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47835 * C47734) *
                      C2700) *
                     C47881 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C3094) *
                      C47688 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47850 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47835 * C47734) *
                      C47695 +
                  (((C113 * C1154 + C101 * C1169 + C114 * C1153 + C102 * C1168 +
                     C115 * C1440 + C103 * C1441) *
                        C116 +
                    (C113 * C1166 + C101 * C1181 + C114 * C1165 + C102 * C1180 +
                     C115 * C1442 + C103 * C1443) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C3094) *
                      C2700) *
                     C47612)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47730 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47850 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47835 * C47737 +
                  ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                    C115 * C419 + C103 * C432) *
                       C116 +
                   (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                    C115 * C435 + C103 * C449) *
                       C47850) *
                      C47835 * C3602) *
                     C47688 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47850) *
                      C47835 * C47737 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47730 -
                  ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                    C113 * C1161 + C101 * C1179) *
                       C47850 +
                   (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                    C113 * C1152 + C101 * C1164) *
                       C116) *
                      C47835 * C3602) *
                     C47695 +
                 (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C47730 -
                  ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                    C113 * C1167 + C101 * C1182) *
                       C47850 +
                   (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                    C113 * C1155 + C101 * C1170) *
                       C116) *
                      C47835 * C47737 +
                  ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                    C115 * C1158 + C103 * C1173) *
                       C116 +
                   (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                    C115 * C1176 + C103 * C1185) *
                       C47850) *
                      C47835 * C3602) *
                     C2700) *
                C47601) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C3094 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47850 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47835 * C47734) *
                     C47973 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47850) *
                      C47835 * C47734 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C3094) *
                     C47969 +
                 (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C3094 -
                  ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                    C113 * C1167 + C101 * C1182) *
                       C47850 +
                   (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                    C113 * C1155 + C101 * C1170) *
                       C116) *
                      C47835 * C47734) *
                     C47959 +
                 (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                    C115 * C1544 + C103 * C1547) *
                       C116 +
                   (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                    C115 * C1550 + C103 * C1553) *
                       C47850) *
                      C47835 * C47734 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47850 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47835 * C3094) *
                     C47937) *
                C47601) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C3094) *
                      C47692) *
                     C47963 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C3094) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47850 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47835 * C47734) *
                      C47692) *
                     C47950 +
                 ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47734) *
                      C2332 +
                  (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                     C115 * C816 + C103 * C825) *
                        C116 +
                    (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                     C115 * C826 + C103 * C831) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C3094) *
                      C47692) *
                     C47921)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47974 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47850 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47835 * C47971 +
                  ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                    C115 * C419 + C103 * C432) *
                       C116 +
                   (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                    C115 * C435 + C103 * C449) *
                       C47850) *
                      C47835 * C47962 -
                  ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                    C113 * C1852 + C101 * C1864) *
                       C47850 +
                   (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                    C113 * C1846 + C101 * C1855) *
                       C116) *
                      C47835 * C47943) *
                     C2332 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47850) *
                      C47835 * C47971 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47974 -
                  ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                    C113 * C1161 + C101 * C1179) *
                       C47850 +
                   (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                    C113 * C1152 + C101 * C1164) *
                       C116) *
                      C47835 * C47962 +
                  ((C113 * C2222 + C101 * C2225 + C114 * C2223 + C102 * C2226 +
                    C115 * C2224 + C103 * C2227) *
                       C116 +
                   (C113 * C2228 + C101 * C2231 + C114 * C2229 + C102 * C2232 +
                    C115 * C2230 + C103 * C2233) *
                       C47850) *
                      C47835 * C47943) *
                     C47692) *
                C47601) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47730 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47737 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C3602) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47737 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47730 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47850 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47835 * C3602) *
                      C47692) *
                     C47881 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47737 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47730 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47850 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47835 * C3602) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47730 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47850 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47835 * C47737 +
                   ((C113 * C1151 + C101 * C1163 + C114 * C1150 + C102 * C1162 +
                     C115 * C2014 + C103 * C2015) *
                        C116 +
                    (C113 * C1160 + C101 * C1178 + C114 * C1159 + C102 * C1177 +
                     C115 * C2016 + C103 * C2017) *
                        C47850) *
                       C47835 * C3602) *
                      C47692) *
                     C47612)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C2332 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C3094) *
                      C47692) *
                     C47963 +
                 ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C3094) *
                      C2332 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                     C113 * C821 + C101 * C828) *
                        C47850 +
                    (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                     C113 * C813 + C101 * C818) *
                        C116) *
                       C47835 * C47734) *
                      C47692) *
                     C47950 +
                 ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47734) *
                      C2332 +
                  (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                     C115 * C816 + C103 * C825) *
                        C116 +
                    (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                     C115 * C826 + C103 * C831) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C3094) *
                      C47692) *
                     C47921)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C3094 -
                  ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                    C113 * C426 + C101 * C446) *
                       C47850 +
                   (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                    C113 * C416 + C101 * C429) *
                       C116) *
                      C47835 * C47734) *
                     C47973 +
                 (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                    C115 * C814 + C103 * C819) *
                       C116 +
                   (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                    C115 * C822 + C103 * C829) *
                       C47850) *
                      C47835 * C47734 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C3094) *
                     C47969 +
                 (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C3094 -
                  ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                    C113 * C1167 + C101 * C1182) *
                       C47850 +
                   (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                    C113 * C1155 + C101 * C1170) *
                       C116) *
                      C47835 * C47734) *
                     C47959 +
                 (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                    C115 * C1544 + C103 * C1547) *
                       C116 +
                   (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                    C115 * C1550 + C103 * C1553) *
                       C47850) *
                      C47835 * C47734 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47850 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47835 * C3094) *
                     C47937) *
                C47601) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C1284 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C1285 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C1286 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47850 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47835 * C47647 * C47937) *
                      C47881 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C1285 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C1284 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C1286 +
                   ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                     C115 * C1290 + C103 * C1291) *
                        C116 +
                    (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                     C115 * C1292 + C103 * C1293) *
                        C47850) *
                       C47835 * C47647 * C47937) *
                      C47612)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C47895 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C47692) *
                      C554 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C47692 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C47895) *
                      C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C47895 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C47692) *
                      C556 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C558 + C103 * C559) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C560 + C103 * C561) *
                        C47850) *
                       C47835 * C47647 * C47692 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47850 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47835 * C47647 * C47895) *
                      C47931)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C1664 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C1665 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C47850) *
                        C47835 * C47930) *
                       C47895 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C1665 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C1664 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C47850 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C47835 * C47930) *
                       C47692) *
                      C47881 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C1665 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C1664 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C47850 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C47835 * C47930) *
                       C47895 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C1664 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C1665 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C47850) *
                        C47835 * C47930) *
                       C47692) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C1284 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47896) *
                      C1285 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47850 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47835 * C47734) *
                      C1286 +
                  (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                     C115 * C1544 + C103 * C1547) *
                        C116 +
                    (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                     C115 * C1550 + C103 * C1553) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47850 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47835 * C47896) *
                      C47937) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C47896) *
                       C47692) *
                      C258 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C47896) *
                       C47895 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47734) *
                       C47692) *
                      C259 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C47850 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C47850 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C47835 * C47896) *
                       C47692) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C2116 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C2117 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C2118 -
                   ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                     C113 * C1852 + C101 * C1864) *
                        C47850 +
                    (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                     C113 * C1846 + C101 * C1855) *
                        C116) *
                       C47835 * C47943) *
                      C47895 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C2117 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C2116 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47850 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47835 * C2118 +
                   ((C113 * C2222 + C101 * C2225 + C114 * C2223 + C102 * C2226 +
                     C115 * C2224 + C103 * C2227) *
                        C116 +
                    (C113 * C2228 + C101 * C2231 + C114 * C2229 + C102 * C2232 +
                     C115 * C2230 + C103 * C2233) *
                        C47850) *
                       C47835 * C47943) *
                      C47692) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                C115 * C119 + C103 * C126) *
                   C116 +
               (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                C115 * C129 + C103 * C140) *
                   C47850) *
                  C47835 * C47647 * C47629 * C108 -
              ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                C113 * C128 + C101 * C139) *
                   C47850 +
               (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                C113 * C118 + C101 * C125) *
                   C116) *
                  C47835 * C47647 * C47629 * C109 +
              ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                C115 * C121 + C103 * C132) *
                   C116 +
               (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                C115 * C133 + C103 * C142) *
                   C47850) *
                  C47835 * C47647 * C47629 * C110 -
              ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                C113 * C130 + C101 * C141) *
                   C47850 +
               (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                C113 * C120 + C101 * C131) *
                   C116) *
                  C47835 * C47647 * C47629 * C111 +
              ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                C115 * C123 + C103 * C136) *
                   C116 +
               (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                C115 * C137 + C103 * C144) *
                   C47850) *
                  C47835 * C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C47850) *
                   C47835 * C47647 * C47966 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C47850 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C47835 * C47647 * C47954 +
               ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C47850) *
                   C47835 * C47647 * C47927) *
                  C258 +
              (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                 C115 * C267 + C103 * C283) *
                    C116 +
                (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                 C115 * C284 + C103 * C297) *
                    C47850) *
                   C47835 * C47647 * C47954 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C47850 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C47835 * C47647 * C47966 -
               ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                 C113 * C281 + C101 * C295) *
                    C47850 +
                (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                 C113 * C265 + C101 * C278) *
                    C116) *
                   C47835 * C47647 * C47927) *
                  C259 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C47850) *
                   C47835 * C47647 * C47966 -
               ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                 C113 * C271 + C101 * C291) *
                    C47850 +
                (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                 C113 * C261 + C101 * C274) *
                    C116) *
                   C47835 * C47647 * C47954 +
               ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                 C115 * C270 + C103 * C289) *
                    C116 +
                (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                 C115 * C290 + C103 * C300) *
                    C47850) *
                   C47835 * C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C117 + C101 * C124 + C114 * C118 +
                                 C102 * C125 + C115 * C119 + C103 * C126) *
                                    C116 +
                                (C113 * C127 + C101 * C138 + C114 * C128 +
                                 C102 * C139 + C115 * C129 + C103 * C140) *
                                    C47850) *
                                   C47835 * C47967 -
                               ((C115 * C424 + C103 * C444 + C114 * C425 +
                                 C102 * C445 + C113 * C426 + C101 * C446) *
                                    C47850 +
                                (C115 * C414 + C103 * C427 + C114 * C415 +
                                 C102 * C428 + C113 * C416 + C101 * C429) *
                                    C116) *
                                   C47835 * C47956 +
                               ((C113 * C417 + C101 * C430 + C114 * C418 +
                                 C102 * C431 + C115 * C419 + C103 * C432) *
                                    C116 +
                                (C113 * C433 + C101 * C447 + C114 * C434 +
                                 C102 * C448 + C115 * C435 + C103 * C449) *
                                    C47850) *
                                   C47835 * C47930) *
                                  C47629 * C258 +
                              (((C113 * C415 + C101 * C428 + C114 * C414 +
                                 C102 * C427 + C115 * C420 + C103 * C436) *
                                    C116 +
                                (C113 * C425 + C101 * C445 + C114 * C424 +
                                 C102 * C444 + C115 * C437 + C103 * C450) *
                                    C47850) *
                                   C47835 * C47956 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C47850 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C116) *
                                   C47835 * C47967 -
                               ((C115 * C438 + C103 * C451 + C114 * C435 +
                                 C102 * C449 + C113 * C434 + C101 * C448) *
                                    C47850 +
                                (C115 * C421 + C103 * C439 + C114 * C419 +
                                 C102 * C432 + C113 * C418 + C101 * C431) *
                                    C116) *
                                   C47835 * C47930) *
                                  C47629 * C259 +
                              (((C113 * C119 + C101 * C126 + C114 * C120 +
                                 C102 * C131 + C115 * C121 + C103 * C132) *
                                    C116 +
                                (C113 * C129 + C101 * C140 + C114 * C130 +
                                 C102 * C141 + C115 * C133 + C103 * C142) *
                                    C47850) *
                                   C47835 * C47967 -
                               ((C115 * C440 + C103 * C452 + C114 * C437 +
                                 C102 * C450 + C113 * C424 + C101 * C444) *
                                    C47850 +
                                (C115 * C422 + C103 * C441 + C114 * C420 +
                                 C102 * C436 + C113 * C414 + C101 * C427) *
                                    C116) *
                                   C47835 * C47956 +
                               ((C113 * C419 + C101 * C432 + C114 * C421 +
                                 C102 * C439 + C115 * C423 + C103 * C442) *
                                    C116 +
                                (C113 * C435 + C101 * C449 + C114 * C438 +
                                 C102 * C451 + C115 * C443 + C103 * C453) *
                                    C47850) *
                                   C47835 * C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C47850) *
               C47835 * C47647 * C942 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C47850 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C47835 * C47647 * C943 +
           ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C47850) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
             C115 * C267 + C103 * C283) *
                C116 +
            (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
             C115 * C284 + C103 * C297) *
                C47850) *
               C47835 * C47647 * C943 -
           ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
             C113 * C128 + C101 * C139) *
                C47850 +
            (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
             C113 * C118 + C101 * C125) *
                C116) *
               C47835 * C47647 * C942 -
           ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
             C113 * C281 + C101 * C295) *
                C47850 +
            (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
             C113 * C265 + C101 * C278) *
                C116) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
             C115 * C121 + C103 * C132) *
                C116 +
            (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
             C115 * C133 + C103 * C142) *
                C47850) *
               C47835 * C47647 * C942 -
           ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
             C113 * C271 + C101 * C291) *
                C47850 +
            (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
             C113 * C261 + C101 * C274) *
                C116) *
               C47835 * C47647 * C943 +
           ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
             C115 * C270 + C103 * C289) *
                C116 +
            (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
             C115 * C290 + C103 * C300) *
                C47850) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C116 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C47850) *
              C47835 * C47647 * C1010 -
          ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
            C113 * C273 + C101 * C293) *
               C47850 +
           (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
            C113 * C263 + C101 * C276) *
               C116) *
              C47835 * C47647 * C1011 +
          ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
            C115 * C266 + C103 * C279) *
               C116 +
           (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
            C115 * C282 + C103 * C296) *
               C47850) *
              C47835 * C47647 * C1012 -
          ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
            C113 * C1024 + C101 * C1036) *
               C47850 +
           (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
            C113 * C1018 + C101 * C1027) *
               C116) *
              C47835 * C47647 * C1013 +
          ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
            C115 * C1021 + C103 * C1030) *
               C116 +
           (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
            C115 * C1033 + C103 * C1039) *
               C47850) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C47850) *
               C47835 * C47967 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C47850 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C47835 * C47956 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C47850) *
               C47835 * C47930) *
              C942 +
          (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
             C115 * C814 + C103 * C819) *
                C116 +
            (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
             C115 * C822 + C103 * C829) *
                C47850) *
               C47835 * C47956 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C47850 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C47835 * C47967 -
           ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
             C113 * C1161 + C101 * C1179) *
                C47850 +
            (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
             C113 * C1152 + C101 * C1164) *
                C116) *
               C47835 * C47930) *
              C943 +
          (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C47850) *
               C47835 * C47967 -
           ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
             C113 * C1167 + C101 * C1182) *
                C47850 +
            (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
             C113 * C1155 + C101 * C1170) *
                C116) *
               C47835 * C47956 +
           ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
             C115 * C1158 + C103 * C1173) *
                C116 +
            (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
             C115 * C1176 + C103 * C1185) *
                C47850) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C117 + C101 * C124 + C114 * C118 +
                                 C102 * C125 + C115 * C119 + C103 * C126) *
                                    C116 +
                                (C113 * C127 + C101 * C138 + C114 * C128 +
                                 C102 * C139 + C115 * C129 + C103 * C140) *
                                    C47850) *
                                   C47835 * C1664 -
                               ((C115 * C424 + C103 * C444 + C114 * C425 +
                                 C102 * C445 + C113 * C426 + C101 * C446) *
                                    C47850 +
                                (C115 * C414 + C103 * C427 + C114 * C415 +
                                 C102 * C428 + C113 * C416 + C101 * C429) *
                                    C116) *
                                   C47835 * C1665 +
                               ((C113 * C417 + C101 * C430 + C114 * C418 +
                                 C102 * C431 + C115 * C419 + C103 * C432) *
                                    C116 +
                                (C113 * C433 + C101 * C447 + C114 * C434 +
                                 C102 * C448 + C115 * C435 + C103 * C449) *
                                    C47850) *
                                   C47835 * C47930) *
                                  C47629 * C47963 +
                              (((C113 * C415 + C101 * C428 + C114 * C414 +
                                 C102 * C427 + C115 * C420 + C103 * C436) *
                                    C116 +
                                (C113 * C425 + C101 * C445 + C114 * C424 +
                                 C102 * C444 + C115 * C437 + C103 * C450) *
                                    C47850) *
                                   C47835 * C1665 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C47850 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C116) *
                                   C47835 * C1664 -
                               ((C115 * C438 + C103 * C451 + C114 * C435 +
                                 C102 * C449 + C113 * C434 + C101 * C448) *
                                    C47850 +
                                (C115 * C421 + C103 * C439 + C114 * C419 +
                                 C102 * C432 + C113 * C418 + C101 * C431) *
                                    C116) *
                                   C47835 * C47930) *
                                  C47629 * C47950 +
                              (((C113 * C119 + C101 * C126 + C114 * C120 +
                                 C102 * C131 + C115 * C121 + C103 * C132) *
                                    C116 +
                                (C113 * C129 + C101 * C140 + C114 * C130 +
                                 C102 * C141 + C115 * C133 + C103 * C142) *
                                    C47850) *
                                   C47835 * C1664 -
                               ((C115 * C440 + C103 * C452 + C114 * C437 +
                                 C102 * C450 + C113 * C424 + C101 * C444) *
                                    C47850 +
                                (C115 * C422 + C103 * C441 + C114 * C420 +
                                 C102 * C436 + C113 * C414 + C101 * C427) *
                                    C116) *
                                   C47835 * C1665 +
                               ((C113 * C419 + C101 * C432 + C114 * C421 +
                                 C102 * C439 + C115 * C423 + C103 * C442) *
                                    C116 +
                                (C113 * C435 + C101 * C449 + C114 * C438 +
                                 C102 * C451 + C115 * C443 + C103 * C453) *
                                    C47850) *
                                   C47835 * C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C47850) *
               C47835 * C1664 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C47850 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C47835 * C1665 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C47850) *
               C47835 * C47930) *
              C47966 +
          (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
             C115 * C814 + C103 * C819) *
                C116 +
            (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
             C115 * C822 + C103 * C829) *
                C47850) *
               C47835 * C1665 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C47850 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C47835 * C1664 -
           ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
             C113 * C1161 + C101 * C1179) *
                C47850 +
            (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
             C113 * C1152 + C101 * C1164) *
                C116) *
               C47835 * C47930) *
              C47954 +
          (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C47850) *
               C47835 * C1664 -
           ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
             C113 * C1167 + C101 * C1182) *
                C47850 +
            (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
             C113 * C1155 + C101 * C1170) *
                C116) *
               C47835 * C1665 +
           ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
             C115 * C1158 + C103 * C1173) *
                C116 +
            (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
             C115 * C1176 + C103 * C1185) *
                C47850) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C116 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C47850) *
              C47835 * C1839 -
          ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
            C113 * C426 + C101 * C446) *
               C47850 +
           (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
            C113 * C416 + C101 * C429) *
               C116) *
              C47835 * C1840 +
          ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
            C115 * C419 + C103 * C432) *
               C116 +
           (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
            C115 * C435 + C103 * C449) *
               C47850) *
              C47835 * C1841 -
          ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
            C113 * C1852 + C101 * C1864) *
               C47850 +
           (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
            C113 * C1846 + C101 * C1855) *
               C116) *
              C47835 * C1842 +
          ((C113 * C1847 + C101 * C1856 + C114 * C1848 + C102 * C1857 +
            C115 * C1849 + C103 * C1858) *
               C116 +
           (C113 * C1859 + C101 * C1865 + C114 * C1860 + C102 * C1866 +
            C115 * C1861 + C103 * C1867) *
               C47850) *
              C47835 * C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47734) *
                       C942 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C47896) *
                       C943 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47850 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47835 * C47734) *
                       C47927) *
                      C47881 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C47896) *
                       C942 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47734) *
                       C943 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47850 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47835 * C47896) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C554 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47896) *
                      C47629 * C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C556 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47850 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47835 * C47896) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C2116 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C2117 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C2118 -
                   ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                     C113 * C1852 + C101 * C1864) *
                        C47850 +
                    (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                     C113 * C1846 + C101 * C1855) *
                        C116) *
                       C47835 * C47943) *
                      C47629 * C47881 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C2117 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C2116 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47850 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47835 * C2118 +
                   ((C113 * C1845 + C101 * C1854 + C114 * C1844 + C102 * C1853 +
                     C115 * C2120 + C103 * C2121) *
                        C116 +
                    (C113 * C1851 + C101 * C1863 + C114 * C1850 + C102 * C1862 +
                     C115 * C2122 + C103 * C2123) *
                        C47850) *
                       C47835 * C47943) *
                      C47629 * C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C47954 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C47927) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C47629 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C47629 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47850) *
                      C47835 * C47647 * C47629 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47850 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47835 * C47647 * C47629 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47850) *
                      C47835 * C47647 * C47629 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47963 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C47927) *
                      C47950 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C47647 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47850 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47835 * C47647 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C47850) *
                      C47835 * C47647 * C1014) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C1664 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C1665 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C47930) *
                      C47629 * C47963 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C1665 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C1664 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47850 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47835 * C47930) *
                      C47629 * C47950 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C1664 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C1665 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C47850) *
                       C47835 * C47930) *
                      C47629 * C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C1664 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C1665 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C47930) *
                      C47966 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C1665 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C1664 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47850 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47835 * C47930) *
                      C47954 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C1664 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47850 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47835 * C1665 +
                   ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                     C115 * C1158 + C103 * C1173) *
                        C116 +
                    (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                     C115 * C1176 + C103 * C1185) *
                        C47850) *
                       C47835 * C47930) *
                      C47927) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C3094) *
                       C47692) *
                      C47606 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C3094) *
                       C47895 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47734) *
                       C47692) *
                      C47615 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C47850 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C47850 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C47835 * C3094) *
                       C47692) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C47730 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47737 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C47850) *
                        C47835 * C3602) *
                       C47895 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47737 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C47730 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C47850 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C47835 * C3602) *
                       C47692) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47737 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C47730 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C47850 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C47835 * C3602) *
                       C47895 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C47730 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47737 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C47850) *
                        C47835 * C3602) *
                       C47692) *
                      C47612)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47734) *
                       C47966 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C3094) *
                       C47954 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47850 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47835 * C47734) *
                       C47927) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C3094) *
                       C47966 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47734) *
                       C47954 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47850 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47835 * C3094) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C47972 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C3094) *
                      C47629 * C47965 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C47952 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47850 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47835 * C3094) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47974 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47971 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C47962 -
                   ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                     C113 * C1852 + C101 * C1864) *
                        C47850 +
                    (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                     C113 * C1846 + C101 * C1855) *
                        C116) *
                       C47835 * C47943) *
                      C47629 * C2440 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47971 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47974 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47850 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47835 * C47962 +
                   ((C113 * C1845 + C101 * C1854 + C114 * C1844 + C102 * C1853 +
                     C115 * C2120 + C103 * C2121) *
                        C116 +
                    (C113 * C1851 + C101 * C1863 + C114 * C1850 + C102 * C1862 +
                     C115 * C2122 + C103 * C2123) *
                        C47850) *
                       C47835 * C47943) *
                      C47629 * C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47730 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47737 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C3602) *
                      C47629 * C47606 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47737 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47730 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47850 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47835 * C3602) *
                      C47629 * C47615 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47730 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47737 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C47850) *
                       C47835 * C3602) *
                      C47629 * C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C47972 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C3094) *
                      C47629 * C47965 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C47952 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47850 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47835 * C3094) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47734) *
                       C47966 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C3094) *
                       C47954 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47850 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47835 * C47734) *
                       C47927) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C3094) *
                       C47966 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47734) *
                       C47954 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47850 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47835 * C3094) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C47895 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C47692) *
                      C554 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C47692 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C47895) *
                      C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C47895 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C47692) *
                      C556 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C558 + C103 * C559) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C560 + C103 * C561) *
                        C47850) *
                       C47835 * C47647 * C47692 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47850 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47835 * C47647 * C47895) *
                      C47931)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C1284 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C1285 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C1286 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47850 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47835 * C47647 * C47937) *
                      C47881 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C1285 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C1284 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C1286 +
                   ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                     C115 * C1290 + C103 * C1291) *
                        C116 +
                    (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                     C115 * C1292 + C103 * C1293) *
                        C47850) *
                       C47835 * C47647 * C47937) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C47896) *
                       C47692) *
                      C258 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C47896) *
                       C47895 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47734) *
                       C47692) *
                      C259 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C47850 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C47835 * C47734) *
                       C47895 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C47850 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C47835 * C47896) *
                       C47692) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C1284 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47896) *
                      C1285 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47850 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47835 * C47734) *
                      C1286 +
                  (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                     C115 * C1544 + C103 * C1547) *
                        C116 +
                    (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                     C115 * C1550 + C103 * C1553) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C47850 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C47835 * C47896) *
                      C47937) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C47954 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C47927) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C47629 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C47629 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47850) *
                      C47835 * C47647 * C47629 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47850 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47835 * C47647 * C47629 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47850) *
                      C47835 * C47647 * C47629 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47967 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47956 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C47930) *
                      C47629 * C258 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47956 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47967 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C47850 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C47835 * C47930) *
                      C47629 * C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47967 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47956 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C47850) *
                       C47835 * C47930) *
                      C47629 * C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47963 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C47927) *
                      C47950 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C47647 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47850 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47835 * C47647 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C47850) *
                      C47835 * C47647 * C1014) *
                 C47601) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47967 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47956 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C47850) *
                       C47835 * C47930) *
                      C942 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C47850) *
                       C47835 * C47956 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47967 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C47850 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C47835 * C47930) *
                      C943 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47967 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C47850 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C47835 * C47956 +
                   ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                     C115 * C1158 + C103 * C1173) *
                        C116 +
                    (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                     C115 * C1176 + C103 * C1185) *
                        C47850) *
                       C47835 * C47930) *
                      C47927) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C47850 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C554 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47896) *
                      C47629 * C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47896 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C47850 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C47835 * C47734) *
                      C47629 * C556 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C47850) *
                       C47835 * C47734 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47850 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C47835 * C47896) *
                      C47629 * C47931)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C47850 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C47835 * C47734) *
                       C942 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C47850 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C47835 * C47896) *
                       C943 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C47850 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C47835 * C47734) *
                       C47927) *
                      C47881 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C47850 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C47835 * C47896) *
                       C942 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C47850) *
                        C47835 * C47896 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C47850 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C47835 * C47734) *
                       C943 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C47850) *
                        C47835 * C47734 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C47850 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C47835 * C47896) *
                       C47927) *
                      C47612)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C47629 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47850 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C47835 * C47647 * C47629 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47850) *
                      C47835 * C47647 * C47629 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47850 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C47835 * C47647 * C47629 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47850) *
                      C47835 * C47647 * C47629 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C47954 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C47927) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C47966 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C47954 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47850) *
                       C47835 * C47647 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C47850 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C47835 * C47647 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47963 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C47850) *
                       C47835 * C47647 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47850 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C47835 * C47647 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C47850 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C47835 * C47647 * C47927) *
                      C47950 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47850) *
                       C47835 * C47647 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C47850 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C47835 * C47647 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C47850) *
                       C47835 * C47647 * C47927) *
                      C47921)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47850) *
                      C47835 * C47647 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C47850 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C47835 * C47647 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C47850) *
                      C47835 * C47647 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C47850 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C47835 * C47647 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C47850) *
                      C47835 * C47647 * C1014) *
                 C47601) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47688 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47695 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47647 * C2700) *
              C47606 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47695 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47688 -
           (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C2700) *
              C47615 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C47688 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47695 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47896 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C47688 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47896) *
               C47695 +
           ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
             ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
                C47896 -
            (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
             ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
                C47734) *
               C2700) *
              C2440 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47896) *
               C47688 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47896 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47695 +
           ((((C6245 + C6244) * C116 + (C6243 + C6242) * C47850) * C4577 +
             ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                  C116 +
              (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
             ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
                C47896) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47973 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47969 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47647 * C47959 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C47647 * C47937) *
              C2440 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47969 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47973 -
           (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47959 +
           (((C6039 + C6038) * C116 + (C6037 + C6036) * C47850) * C4577 +
            ((C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47914 * C1030) *
                 C116 +
             (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C2332 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47692) *
              C47972 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47692 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C2332) *
              C47965 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C2332 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47692) *
              C47952 +
          ((((C5084 + C5085) * C116 + (C5086 + C5087) * C47850) * C4577 +
            ((C4579 * C268 + C4575 * C286 + C4580 * C270 + C47914 * C289) *
                 C116 +
             (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47967 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47956 +
            (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                  C116 +
              (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                  C47850) *
                 C4577 +
             ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
                C47930) *
               C2332 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47956 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47967 -
            (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
             ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
                C47930) *
               C47692) *
              C2440 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47956 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47967 -
            (((C6980 + C6981) * C47850 + (C6982 + C6983) * C116) * C47945 +
             ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                  C47850 +
              (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                  C116) *
                 C4577) *
                C47930) *
               C2332 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47967 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47956 +
            (((C6983 + C6982) * C116 + (C6981 + C6980) * C47850) * C4577 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                  C47850) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47896 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C2332 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47896) *
               C47692) *
              C47606 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47896) *
               C2332 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47896 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47692) *
              C47615 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                  C47850) *
                 C4577 +
             ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
                C47896 -
            (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
             ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                  C47850 +
              (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                  C116) *
                 C4577) *
                C47734) *
               C2332 +
           ((((C5447 + C5446) * C116 + (C5445 + C5444) * C47850) * C4577 +
             ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                  C116 +
              (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
             ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
                C47896) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C2332 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47692) *
              C47972 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47692 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C2332) *
              C47965 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C2332 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47692) *
              C47952 +
          ((((C5084 + C5085) * C116 + (C5086 + C5087) * C47850) * C4577 +
            ((C4579 * C268 + C4575 * C286 + C4580 * C270 + C47914 * C289) *
                 C116 +
             (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47973 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47969 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47647 * C47959 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C47647 * C47937) *
              C2440 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47969 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47973 -
           (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47959 +
           (((C6039 + C6038) * C116 + (C6037 + C6036) * C47850) * C4577 +
            ((C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47914 * C1030) *
                 C116 +
             (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C3094 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C47688 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C3094) *
               C47695 +
           ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
             ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
                C3094 -
            (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
             ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
                C47734) *
               C2700) *
              C47881 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C3094) *
               C47688 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C3094 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47695 +
           ((((C6245 + C6244) * C116 + (C6243 + C6242) * C47850) * C4577 +
             ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                  C116 +
              (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
             ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
                C3094) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47730 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47737 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C3602) *
              C47688 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47737 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47730 -
           (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
            ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
               C3602) *
              C47695 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47730 -
           (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C47737 +
           (((C5897 + C5896) * C116 + (C5895 + C5894) * C47850) * C4577 +
            ((C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                 C116 +
             (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                 C47850) *
                C47945) *
               C3602) *
              C2700) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C3094 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C47973 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47734 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C3094) *
              C47969 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C3094 -
           (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C47734) *
              C47959 +
          ((((C6395 + C6394) * C116 + (C6393 + C6392) * C47850) * C4577 +
            ((C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
                 C116 +
             (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C3094 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C2332 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C3094) *
               C47692) *
              C47963 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C3094) *
               C2332 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C3094 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47692) *
              C47950 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                  C47850) *
                 C4577 +
             ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
                C3094 -
            (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
             ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                  C47850 +
              (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                  C116) *
                 C4577) *
                C47734) *
               C2332 +
           ((((C5447 + C5446) * C116 + (C5445 + C5444) * C47850) * C4577 +
             ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                  C116 +
              (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
             ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
                C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47974 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47971 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47962 -
           (((C7260 + C7261) * C47850 + (C7262 + C7263) * C116) * C47945 +
            ((C4580 * C1851 + C47914 * C1863 + C4579 * C1852 + C4575 * C1864) *
                 C47850 +
             (C4580 * C1845 + C47914 * C1854 + C4579 * C1846 + C4575 * C1855) *
                 C116) *
                C4577) *
               C47943) *
              C2332 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47971 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47974 -
           (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
            ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
               C47962 +
           (((C7263 + C7262) * C116 + (C7261 + C7260) * C47850) * C4577 +
            ((C4579 * C7243 + C4575 * C7245 + C4580 * C7244 + C47914 * C7246) *
                 C116 +
             (C4579 * C7247 + C4575 * C7249 + C4580 * C7248 + C47914 * C7250) *
                 C47850) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47730 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47737 +
            (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                  C116 +
              (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                  C47850) *
                 C4577 +
             ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
                C3602) *
               C2332 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47737 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47730 -
            (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
             ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
                C3602) *
               C47692) *
              C47881 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47737 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47730 -
            (((C6980 + C6981) * C47850 + (C6982 + C6983) * C116) * C47945 +
             ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                  C47850 +
              (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                  C116) *
                 C4577) *
                C3602) *
               C2332 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47730 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47737 +
            (((C6983 + C6982) * C116 + (C6981 + C6980) * C47850) * C4577 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                  C47850) *
                 C47945) *
                C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C3094 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C2332 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C3094) *
               C47692) *
              C47963 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C3094) *
               C2332 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C3094 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47692) *
              C47950 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                  C47850) *
                 C4577 +
             ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
                C3094 -
            (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
             ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                  C47850 +
              (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                  C116) *
                 C4577) *
                C47734) *
               C2332 +
           ((((C5447 + C5446) * C116 + (C5445 + C5444) * C47850) * C4577 +
             ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                  C116 +
              (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
             ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
                C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C3094 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C47973 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47734 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C3094) *
              C47969 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C3094 -
           (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C47734) *
              C47959 +
          ((((C6395 + C6394) * C116 + (C6393 + C6392) * C47850) * C4577 +
            ((C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
                 C116 +
             (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C1284 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C1285 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47647 * C1286 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C47647 * C47937) *
              C47881 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C1285 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C1284 -
           (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C1286 +
           (((C6039 + C6038) * C116 + (C6037 + C6036) * C47850) * C4577 +
            ((C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47914 * C1030) *
                 C116 +
             (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47895 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47692) *
              C554 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47692 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47895) *
              C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C47895 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47692) *
              C556 +
          ((((C5084 + C5085) * C116 + (C5086 + C5087) * C47850) * C4577 +
            ((C4579 * C268 + C4575 * C286 + C4580 * C270 + C47914 * C289) *
                 C116 +
             (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C1664 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C1665 +
            (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                  C116 +
              (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                  C47850) *
                 C4577 +
             ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
                C47930) *
               C47895 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C1665 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C1664 -
            (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
             ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
                C47930) *
               C47692) *
              C47881 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C1665 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C1664 -
            (((C6980 + C6981) * C47850 + (C6982 + C6983) * C116) * C47945 +
             ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                  C47850 +
              (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                  C116) *
                 C4577) *
                C47930) *
               C47895 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C1664 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C1665 +
            (((C6983 + C6982) * C116 + (C6981 + C6980) * C47850) * C4577 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                  C47850) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47896 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C1284 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47734 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47896) *
              C1285 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47896 -
           (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C47734) *
              C1286 +
          ((((C6395 + C6394) * C116 + (C6393 + C6392) * C47850) * C4577 +
            ((C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
                 C116 +
             (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47896 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C47895 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C4579 * C1155 + C4575 * C1170 + C4580 * C1154 + C47914 * C1169) *
                  C116 +
              (C4579 * C1167 + C4575 * C1182 + C4580 * C1166 + C47914 * C1181) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47896) *
               C47692) *
              C258 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47896) *
               C47895 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47896 -
            (((C4580 * C1165 + C47914 * C1180 + C4579 * C1166 + C4575 * C1181) *
                  C47850 +
              (C4580 * C1153 + C47914 * C1168 + C4579 * C1154 + C4575 * C1169) *
                  C116) *
                 C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47692) *
              C259 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                  C47850) *
                 C4577 +
             ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
                C47896 -
            (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
             ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                  C47850 +
              (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                  C116) *
                 C4577) *
                C47734) *
               C47895 +
           ((((C5447 + C5446) * C116 + (C5445 + C5444) * C47850) * C4577 +
             ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                  C116 +
              (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
             ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C2116 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C2117 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C2118 -
           (((C7260 + C7261) * C47850 + (C7262 + C7263) * C116) * C47945 +
            ((C4580 * C1851 + C47914 * C1863 + C4579 * C1852 + C4575 * C1864) *
                 C47850 +
             (C4580 * C1845 + C47914 * C1854 + C4579 * C1846 + C4575 * C1855) *
                 C116) *
                C4577) *
               C47943) *
              C47895 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C2117 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C2116 -
           (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
            ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
               C2118 +
           (((C7263 + C7262) * C116 + (C7261 + C7260) * C47850) * C4577 +
            ((C4579 * C7243 + C4575 * C7245 + C4580 * C7244 + C47914 * C7246) *
                 C116 +
             (C4579 * C7247 + C4575 * C7249 + C4580 * C7248 + C47914 * C7250) *
                 C47850) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                    C116 +
                (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                    C47850) *
                   C4577 +
               ((C4579 * C263 + C4575 * C276 + C4580 * C262 + C47914 * C275) *
                    C116 +
                (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47914 * C292) *
                    C47850) *
                   C47945) *
                  C47647 * C47629 * C108 -
              (((C4580 * C271 + C47914 * C291 + C4579 * C272 + C4575 * C292) *
                    C47850 +
                (C4580 * C261 + C47914 * C274 + C4579 * C262 + C4575 * C275) *
                    C116) *
                   C47945 +
               ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                    C47850 +
                (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                    C116) *
                   C4577) *
                  C47647 * C47629 * C109 +
              (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                    C116 +
                (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                    C47850) *
                   C4577 +
               ((C4579 * C261 + C4575 * C274 + C4580 * C267 + C47914 * C283) *
                    C116 +
                (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47914 * C297) *
                    C47850) *
                   C47945) *
                  C47647 * C47629 * C110 -
              (((C4580 * C287 + C47914 * C299 + C4579 * C284 + C4575 * C297) *
                    C47850 +
                (C4580 * C269 + C47914 * C288 + C4579 * C267 + C4575 * C283) *
                    C116) *
                   C47945 +
               ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                    C47850 +
                (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                    C116) *
                   C4577) *
                  C47647 * C47629 * C111 +
              (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
                    C116 +
                (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
                    C47850) *
                   C4577 +
               ((C4579 * C269 + C4575 * C288 + C4580 * C558 + C47914 * C559) *
                    C116 +
                (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47914 * C561) *
                    C47850) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                     C116 +
                 (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                     C47850) *
                    C4577 +
                ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                   C47647 * C47966 -
               (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
                ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                   C47647 * C47954 +
               (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
                ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 +
                  C47914 * C1026) *
                     C116 +
                 (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 +
                  C47914 * C1035) *
                     C47850) *
                    C47945) *
                   C47647 * C47927) *
                  C258 +
              ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
                ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                   C47647 * C47954 -
               (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
                ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                     C47850 +
                 (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                     C116) *
                    C4577) *
                   C47647 * C47966 -
               (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 +
                  C4575 * C1035) *
                     C47850 +
                 (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 +
                  C4575 * C1026) *
                     C116) *
                    C47945 +
                ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
                   C47647 * C47927) *
                  C259 +
              ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                     C116 +
                 (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                     C47850) *
                    C4577 +
                ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
                   C47647 * C47966 -
               (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
                ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
                   C47647 * C47954 +
               (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
                ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 +
                  C47914 * C1291) *
                     C116 +
                 (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 +
                  C47914 * C1293) *
                     C47850) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47967 -
           (((C4580 * C821 + C47914 * C828 + C4579 * C820 + C4575 * C827) *
                 C47850 +
             (C4580 * C813 + C47914 * C818 + C4579 * C812 + C4575 * C817) *
                 C116) *
                C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47956 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C4579 * C1152 + C4575 * C1164 + C4580 * C1151 + C47914 * C1163) *
                 C116 +
             (C4579 * C1161 + C4575 * C1179 + C4580 * C1160 + C47914 * C1178) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C258 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C4579 * C813 + C4575 * C818 + C4580 * C814 + C47914 * C819) *
                 C116 +
             (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47956 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47967 -
           (((C4580 * C1159 + C47914 * C1177 + C4579 * C1160 + C4575 * C1178) *
                 C47850 +
             (C4580 * C1150 + C47914 * C1162 + C4579 * C1151 + C4575 * C1163) *
                 C116) *
                C47945 +
            ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                 C47850 +
             (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                 C116) *
                C4577) *
               C47930) *
              C47629 * C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47967 -
           (((C4580 * C823 + C47914 * C830 + C4579 * C822 + C4575 * C829) *
                 C47850 +
             (C4580 * C815 + C47914 * C824 + C4579 * C814 + C4575 * C819) *
                 C116) *
                C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C47956 +
           (((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47914 * C439) *
                 C116 +
             (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47914 * C451) *
                 C47850) *
                C4577 +
            ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C116 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C942 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C943 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47914 * C1026) *
                 C116 +
             (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C943 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C942 -
           (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 + C4575 * C1035) *
                 C47850 +
             (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 + C4575 * C1026) *
                 C116) *
                C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47927) *
              C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C942 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C943 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
              C47647 * C1010 -
          (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
           ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
              C47647 * C1011 +
          (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
           ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
              C47647 * C1012 -
          (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
           ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
              C47647 * C1013 +
          (((C5707 + C5706) * C116 + (C5705 + C5704) * C47850) * C4577 +
           ((C4579 * C5675 + C4575 * C5677 + C4580 * C5676 + C47914 * C5678) *
                C116 +
            (C4579 * C5679 + C4575 * C5681 + C4580 * C5680 + C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47967 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47956 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47930) *
              C942 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47956 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47967 -
           (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
            ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
               C47930) *
              C943 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47967 -
           (((C4580 * C1549 + C47914 * C1552 + C4579 * C1548 + C4575 * C1551) *
                 C47850 +
             (C4580 * C1543 + C47914 * C1546 + C4579 * C1542 + C4575 * C1545) *
                 C116) *
                C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C47956 +
           (((C5897 + C5896) * C116 + (C5895 + C5894) * C47850) * C4577 +
            ((C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                 C116 +
             (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C1664 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C1665 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
               C1665 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C1664 -
           (((C4580 * C1159 + C47914 * C1177 + C4579 * C1160 + C4575 * C1178) *
                 C47850 +
             (C4580 * C1150 + C47914 * C1162 + C4579 * C1151 + C4575 * C1163) *
                 C116) *
                C47945 +
            ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                 C47850 +
             (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                 C116) *
                C4577) *
               C47930) *
              C47629 * C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C1664 -
           (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C1665 +
           (((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47914 * C439) *
                 C116 +
             (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47914 * C451) *
                 C47850) *
                C4577 +
            ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C116 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C1664 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C1665 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47930) *
              C47966 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C1665 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C1664 -
           (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
            ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
               C47930) *
              C47954 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C1664 -
           (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C1665 +
           (((C5897 + C5896) * C116 + (C5895 + C5894) * C47850) * C4577 +
            ((C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                 C116 +
             (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
              C1839 -
          (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
           ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                C47850 +
            (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                C116) *
               C4577) *
              C1840 +
          (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                C116 +
            (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                C47850) *
               C4577 +
           ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
              C1841 -
          (((C4580 * C2229 + C47914 * C2232 + C4579 * C2228 + C4575 * C2231) *
                C47850 +
            (C4580 * C2223 + C47914 * C2226 + C4579 * C2222 + C4575 * C2225) *
                C116) *
               C47945 +
           ((C4580 * C1851 + C47914 * C1863 + C4579 * C1852 + C4575 * C1864) *
                C47850 +
            (C4580 * C1845 + C47914 * C1854 + C4579 * C1846 + C4575 * C1855) *
                C116) *
               C4577) *
              C1842 +
          (((C4579 * C1847 + C4575 * C1856 + C4580 * C1848 + C47914 * C1857) *
                C116 +
            (C4579 * C1859 + C4575 * C1865 + C4580 * C1860 + C47914 * C1866) *
                C47850) *
               C4577 +
           ((C4579 * C6769 + C4575 * C6771 + C4580 * C6770 + C47914 * C6772) *
                C116 +
            (C4579 * C6773 + C4575 * C6775 + C4580 * C6774 + C47914 * C6776) *
                C47850) *
               C47945) *
              C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47896 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C942 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47896) *
               C943 +
           ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
             ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
                C47896 -
            (((C4580 * C1549 + C47914 * C1552 + C4579 * C1548 + C4575 * C1551) *
                  C47850 +
              (C4580 * C1543 + C47914 * C1546 + C4579 * C1542 + C4575 * C1545) *
                  C116) *
                 C47945 +
             ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
                C47734) *
               C47927) *
              C47881 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47896) *
               C942 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47896 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C943 +
           ((((C6245 + C6244) * C116 + (C6243 + C6242) * C47850) * C4577 +
             ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                  C116 +
              (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
             ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47896 -
           (((C4580 * C821 + C47914 * C828 + C4579 * C820 + C4575 * C827) *
                 C47850 +
             (C4580 * C813 + C47914 * C818 + C4579 * C812 + C4575 * C817) *
                 C116) *
                C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C554 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C4579 * C813 + C4575 * C818 + C4580 * C814 + C47914 * C819) *
                 C116 +
             (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47734 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47896) *
              C47629 * C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47896 -
           (((C4580 * C823 + C47914 * C830 + C4579 * C822 + C4575 * C829) *
                 C47850 +
             (C4580 * C815 + C47914 * C824 + C4579 * C814 + C4575 * C819) *
                 C116) *
                C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C556 +
          ((((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47914 * C441) *
                 C116 +
             (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47914 * C452) *
                 C47850) *
                C4577 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C2116 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C2117 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C2118 -
           (((C4580 * C2229 + C47914 * C2232 + C4579 * C2228 + C4575 * C2231) *
                 C47850 +
             (C4580 * C2223 + C47914 * C2226 + C4579 * C2222 + C4575 * C2225) *
                 C116) *
                C47945 +
            ((C4580 * C1851 + C47914 * C1863 + C4579 * C1852 + C4575 * C1864) *
                 C47850 +
             (C4580 * C1845 + C47914 * C1854 + C4579 * C1846 + C4575 * C1855) *
                 C116) *
                C4577) *
               C47943) *
              C47629 * C47881 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
               C2117 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C2116 -
           (((C6980 + C6981) * C47850 + (C6982 + C6983) * C116) * C47945 +
            ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                 C47850 +
             (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                 C116) *
                C4577) *
               C2118 +
           (((C4579 * C1845 + C4575 * C1854 + C4580 * C1844 + C47914 * C1853) *
                 C116 +
             (C4579 * C1851 + C4575 * C1863 + C4580 * C1850 + C47914 * C1862) *
                 C47850) *
                C4577 +
            ((C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47914 * C2227) *
                 C116 +
             (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47914 * C2233) *
                 C47850) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47966 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47954 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47914 * C1026) *
                 C116 +
             (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C258 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47954 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47966 -
           (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 + C4575 * C1035) *
                 C47850 +
             (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 + C4575 * C1026) *
                 C116) *
                C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47927) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C47966 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47954 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4579 * C263 + C4575 * C276 + C4580 * C262 + C47914 * C275) *
                C116 +
            (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47914 * C292) *
                C47850) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C4580 * C271 + C47914 * C291 + C4579 * C272 + C4575 * C292) *
                C47850 +
            (C4580 * C261 + C47914 * C274 + C4579 * C262 + C4575 * C275) *
                C116) *
               C47945 +
           ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C47850 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C116) *
               C4577) *
              C47647 * C47629 * C109 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C116 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C47850) *
               C4577 +
           ((C4579 * C261 + C4575 * C274 + C4580 * C267 + C47914 * C283) *
                C116 +
            (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47914 * C297) *
                C47850) *
               C47945) *
              C47647 * C47629 * C110 -
          (((C4580 * C287 + C47914 * C299 + C4579 * C284 + C4575 * C297) *
                C47850 +
            (C4580 * C269 + C47914 * C288 + C4579 * C267 + C4575 * C283) *
                C116) *
               C47945 +
           ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C47850 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C116) *
               C4577) *
              C47647 * C47629 * C111 +
          (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
                C116 +
            (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
                C47850) *
               C4577 +
           ((C4579 * C269 + C4575 * C288 + C4580 * C558 + C47914 * C559) *
                C116 +
            (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47914 * C561) *
                C47850) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C942 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C943 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47914 * C1026) *
                 C116 +
             (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C943 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C942 -
           (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 + C4575 * C1035) *
                 C47850 +
             (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 + C4575 * C1026) *
                 C116) *
                C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47927) *
              C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C942 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C943 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
              C47647 * C1010 -
          (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
           ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
              C47647 * C1011 +
          (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
           ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
              C47647 * C1012 -
          (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
           ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
              C47647 * C1013 +
          (((C5707 + C5706) * C116 + (C5705 + C5704) * C47850) * C4577 +
           ((C4579 * C5675 + C4575 * C5677 + C4580 * C5676 + C47914 * C5678) *
                C116 +
            (C4579 * C5679 + C4575 * C5681 + C4580 * C5680 + C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C1664 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C1665 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
               C1665 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C1664 -
           (((C4580 * C1159 + C47914 * C1177 + C4579 * C1160 + C4575 * C1178) *
                 C47850 +
             (C4580 * C1150 + C47914 * C1162 + C4579 * C1151 + C4575 * C1163) *
                 C116) *
                C47945 +
            ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                 C47850 +
             (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                 C116) *
                C4577) *
               C47930) *
              C47629 * C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C1664 -
           (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C1665 +
           (((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47914 * C439) *
                 C116 +
             (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47914 * C451) *
                 C47850) *
                C4577 +
            ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C116 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C1664 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C1665 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47930) *
              C47966 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C1665 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C1664 -
           (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
            ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
               C47930) *
              C47954 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C1664 -
           (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C1665 +
           (((C5897 + C5896) * C116 + (C5895 + C5894) * C47850) * C4577 +
            ((C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                 C116 +
             (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C3094 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C47895 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C3094) *
               C47692) *
              C47606 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C3094) *
               C47895 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C3094 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47692) *
              C47615 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                  C47850) *
                 C4577 +
             ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
                C3094 -
            (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
             ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                  C47850 +
              (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                  C116) *
                 C4577) *
                C47734) *
               C47895 +
           ((((C5447 + C5446) * C116 + (C5445 + C5444) * C47850) * C4577 +
             ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                  C116 +
              (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
             ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
                C3094) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47730 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47737 +
            (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                  C116 +
              (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                  C47850) *
                 C4577 +
             ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
                C3602) *
               C47895 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47737 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47730 -
            (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
             ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
                C3602) *
               C47692) *
              C2440 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47737 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47730 -
            (((C6980 + C6981) * C47850 + (C6982 + C6983) * C116) * C47945 +
             ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                  C47850 +
              (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                  C116) *
                 C4577) *
                C3602) *
               C47895 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47730 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47737 +
            (((C6983 + C6982) * C116 + (C6981 + C6980) * C47850) * C4577 +
             ((C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                  C116 +
              (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                  C47850) *
                 C47945) *
                C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C3094 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C47966 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C3094) *
               C47954 +
           ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
             ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
                C3094 -
            (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
             ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
                C47734) *
               C47927) *
              C2440 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C3094) *
               C47966 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C3094 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47954 +
           ((((C6245 + C6244) * C116 + (C6243 + C6242) * C47850) * C4577 +
             ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                  C116 +
              (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
             ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
                C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C3094 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C47972 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
               C47734 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C3094) *
              C47629 * C47965 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C3094 -
           (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C47952 +
          ((((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47914 * C441) *
                 C116 +
             (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47914 * C452) *
                 C47850) *
                C4577 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47974 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47971 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47962 -
           (((C7260 + C7261) * C47850 + (C7262 + C7263) * C116) * C47945 +
            ((C4580 * C1851 + C47914 * C1863 + C4579 * C1852 + C4575 * C1864) *
                 C47850 +
             (C4580 * C1845 + C47914 * C1854 + C4579 * C1846 + C4575 * C1855) *
                 C116) *
                C4577) *
               C47943) *
              C47629 * C2440 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
               C47971 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47974 -
           (((C6980 + C6981) * C47850 + (C6982 + C6983) * C116) * C47945 +
            ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                 C47850 +
             (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                 C116) *
                C4577) *
               C47962 +
           (((C4579 * C1845 + C4575 * C1854 + C4580 * C1844 + C47914 * C1853) *
                 C116 +
             (C4579 * C1851 + C4575 * C1863 + C4580 * C1850 + C47914 * C1862) *
                 C47850) *
                C4577 +
            ((C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47914 * C2227) *
                 C116 +
             (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47914 * C2233) *
                 C47850) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47730 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47737 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C3602) *
              C47629 * C47606 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
               C47737 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47730 -
           (((C6980 + C6981) * C47850 + (C6982 + C6983) * C116) * C47945 +
            ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                 C47850 +
             (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                 C116) *
                C4577) *
               C3602) *
              C47629 * C47615 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47730 -
           (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C47737 +
           (((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47914 * C439) *
                 C116 +
             (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47914 * C451) *
                 C47850) *
                C4577 +
            ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C116 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47850) *
                C47945) *
               C3602) *
              C47629 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C3094 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C47972 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
               C47734 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C3094) *
              C47629 * C47965 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C3094 -
           (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C47952 +
          ((((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47914 * C441) *
                 C116 +
             (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47914 * C452) *
                 C47850) *
                C4577 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C3094 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C47966 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C3094) *
               C47954 +
           ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
             ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
                C3094 -
            (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
             ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
                C47734) *
               C47927) *
              C2440 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C3094) *
               C47966 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C3094 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47954 +
           ((((C6245 + C6244) * C116 + (C6243 + C6242) * C47850) * C4577 +
             ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                  C116 +
              (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
             ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
                C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47895 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47692) *
              C554 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47692 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47895) *
              C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C47895 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47692) *
              C556 +
          ((((C5084 + C5085) * C116 + (C5086 + C5087) * C47850) * C4577 +
            ((C4579 * C268 + C4575 * C286 + C4580 * C270 + C47914 * C289) *
                 C116 +
             (C4579 * C285 + C4575 * C298 + C4580 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C1284 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C1285 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47647 * C1286 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C47647 * C47937) *
              C47881 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C1285 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C1284 -
           (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C1286 +
           (((C6039 + C6038) * C116 + (C6037 + C6036) * C47850) * C4577 +
            ((C4579 * C1020 + C4575 * C1029 + C4580 * C1021 + C47914 * C1030) *
                 C116 +
             (C4579 * C1032 + C4575 * C1038 + C4580 * C1033 + C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47896 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C47895 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C4579 * C1155 + C4575 * C1170 + C4580 * C1154 + C47914 * C1169) *
                  C116 +
              (C4579 * C1167 + C4575 * C1182 + C4580 * C1166 + C47914 * C1181) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47896) *
               C47692) *
              C258 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47896) *
               C47895 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47896 -
            (((C4580 * C1165 + C47914 * C1180 + C4579 * C1166 + C4575 * C1181) *
                  C47850 +
              (C4580 * C1153 + C47914 * C1168 + C4579 * C1154 + C4575 * C1169) *
                  C116) *
                 C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C47692) *
              C259 +
          (((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                  C116 +
              (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                  C47850) *
                 C4577 +
             ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
                C47896 -
            (((C5444 + C5445) * C47850 + (C5446 + C5447) * C116) * C47945 +
             ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                  C47850 +
              (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                  C116) *
                 C4577) *
                C47734) *
               C47895 +
           ((((C5447 + C5446) * C116 + (C5445 + C5444) * C47850) * C4577 +
             ((C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                  C116 +
              (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
             ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47896 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C1284 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47734 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47896) *
              C1285 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47896 -
           (((C6392 + C6393) * C47850 + (C6394 + C6395) * C116) * C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C47734) *
              C1286 +
          ((((C6395 + C6394) * C116 + (C6393 + C6392) * C47850) * C4577 +
            ((C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
                 C116 +
             (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
            ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47966 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47954 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47914 * C1026) *
                 C116 +
             (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C258 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47954 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47966 -
           (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 + C4575 * C1035) *
                 C47850 +
             (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 + C4575 * C1026) *
                 C116) *
                C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47927) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C47966 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47954 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4579 * C263 + C4575 * C276 + C4580 * C262 + C47914 * C275) *
                C116 +
            (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47914 * C292) *
                C47850) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C4580 * C271 + C47914 * C291 + C4579 * C272 + C4575 * C292) *
                C47850 +
            (C4580 * C261 + C47914 * C274 + C4579 * C262 + C4575 * C275) *
                C116) *
               C47945 +
           ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C47850 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C116) *
               C4577) *
              C47647 * C47629 * C109 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C116 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C47850) *
               C4577 +
           ((C4579 * C261 + C4575 * C274 + C4580 * C267 + C47914 * C283) *
                C116 +
            (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47914 * C297) *
                C47850) *
               C47945) *
              C47647 * C47629 * C110 -
          (((C4580 * C287 + C47914 * C299 + C4579 * C284 + C4575 * C297) *
                C47850 +
            (C4580 * C269 + C47914 * C288 + C4579 * C267 + C4575 * C283) *
                C116) *
               C47945 +
           ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C47850 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C116) *
               C4577) *
              C47647 * C47629 * C111 +
          (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
                C116 +
            (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
                C47850) *
               C4577 +
           ((C4579 * C269 + C4575 * C288 + C4580 * C558 + C47914 * C559) *
                C116 +
            (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47914 * C561) *
                C47850) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47967 -
           (((C4580 * C821 + C47914 * C828 + C4579 * C820 + C4575 * C827) *
                 C47850 +
             (C4580 * C813 + C47914 * C818 + C4579 * C812 + C4575 * C817) *
                 C116) *
                C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47956 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C4579 * C1152 + C4575 * C1164 + C4580 * C1151 + C47914 * C1163) *
                 C116 +
             (C4579 * C1161 + C4575 * C1179 + C4580 * C1160 + C47914 * C1178) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C258 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C4579 * C813 + C4575 * C818 + C4580 * C814 + C47914 * C819) *
                 C116 +
             (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47956 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47967 -
           (((C4580 * C1159 + C47914 * C1177 + C4579 * C1160 + C4575 * C1178) *
                 C47850 +
             (C4580 * C1150 + C47914 * C1162 + C4579 * C1151 + C4575 * C1163) *
                 C116) *
                C47945 +
            ((C4580 * C435 + C47914 * C449 + C4579 * C434 + C4575 * C448) *
                 C47850 +
             (C4580 * C419 + C47914 * C432 + C4579 * C418 + C4575 * C431) *
                 C116) *
                C4577) *
               C47930) *
              C47629 * C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47967 -
           (((C4580 * C823 + C47914 * C830 + C4579 * C822 + C4575 * C829) *
                 C47850 +
             (C4580 * C815 + C47914 * C824 + C4579 * C814 + C4575 * C819) *
                 C116) *
                C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C47956 +
           (((C4579 * C419 + C4575 * C432 + C4580 * C421 + C47914 * C439) *
                 C116 +
             (C4579 * C435 + C4575 * C449 + C4580 * C438 + C47914 * C451) *
                 C47850) *
                C4577 +
            ((C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C116 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C942 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C943 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47914 * C1026) *
                 C116 +
             (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C943 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C942 -
           (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 + C4575 * C1035) *
                 C47850 +
             (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 + C4575 * C1026) *
                 C116) *
                C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47927) *
              C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C942 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C943 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
              C47647 * C1010 -
          (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
           ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
              C47647 * C1011 +
          (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
           ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
              C47647 * C1012 -
          (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
           ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
              C47647 * C1013 +
          (((C5707 + C5706) * C116 + (C5705 + C5704) * C47850) * C4577 +
           ((C4579 * C5675 + C4575 * C5677 + C4580 * C5676 + C47914 * C5678) *
                C116 +
            (C4579 * C5679 + C4575 * C5681 + C4580 * C5680 + C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47967 -
           (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47956 +
           (((C4579 * C417 + C4575 * C430 + C4580 * C418 + C47914 * C431) *
                 C116 +
             (C4579 * C433 + C4575 * C447 + C4580 * C434 + C47914 * C448) *
                 C47850) *
                C4577 +
            ((C5886 + C5887) * C116 + (C5888 + C5889) * C47850) * C47945) *
               C47930) *
              C942 +
          ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
            ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
               C47956 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47967 -
           (((C5894 + C5895) * C47850 + (C5896 + C5897) * C116) * C47945 +
            ((C5889 + C5888) * C47850 + (C5887 + C5886) * C116) * C4577) *
               C47930) *
              C943 +
          ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
               C47967 -
           (((C4580 * C1549 + C47914 * C1552 + C4579 * C1548 + C4575 * C1551) *
                 C47850 +
             (C4580 * C1543 + C47914 * C1546 + C4579 * C1542 + C4575 * C1545) *
                 C116) *
                C47945 +
            ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
               C47956 +
           (((C5897 + C5896) * C116 + (C5895 + C5894) * C47850) * C4577 +
            ((C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                 C116 +
             (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47896 -
           (((C4580 * C821 + C47914 * C828 + C4579 * C820 + C4575 * C827) *
                 C47850 +
             (C4580 * C813 + C47914 * C818 + C4579 * C812 + C4575 * C817) *
                 C116) *
                C47945 +
            ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                 C47850 +
             (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C554 +
          ((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                 C116 +
             (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                 C47850) *
                C4577 +
            ((C4579 * C813 + C4575 * C818 + C4580 * C814 + C47914 * C819) *
                 C116 +
             (C4579 * C821 + C4575 * C828 + C4580 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47734 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47896) *
              C47629 * C555 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47896 -
           (((C4580 * C823 + C47914 * C830 + C4579 * C822 + C4575 * C829) *
                 C47850 +
             (C4580 * C815 + C47914 * C824 + C4579 * C814 + C4575 * C819) *
                 C116) *
                C47945 +
            ((C4580 * C437 + C47914 * C450 + C4579 * C424 + C4575 * C444) *
                 C47850 +
             (C4580 * C420 + C47914 * C436 + C4579 * C414 + C4575 * C427) *
                 C116) *
                C4577) *
               C47734) *
              C47629 * C556 +
          ((((C4579 * C420 + C4575 * C436 + C4580 * C422 + C47914 * C441) *
                 C116 +
             (C4579 * C437 + C4575 * C450 + C4580 * C440 + C47914 * C452) *
                 C47850) *
                C4577 +
            ((C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                 C116 +
             (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C5087 + C5086) * C47850 + (C5085 + C5084) * C116) * C47945 +
            ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                 C47850 +
             (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                 C116) *
                C4577) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                  C116 +
              (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                  C47850) *
                 C4577 +
             ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
                C47896 -
            (((C5436 + C5437) * C47850 + (C5438 + C5439) * C116) * C47945 +
             ((C4580 * C425 + C47914 * C445 + C4579 * C426 + C4575 * C446) *
                  C47850 +
              (C4580 * C415 + C47914 * C428 + C4579 * C416 + C4575 * C429) *
                  C116) *
                 C4577) *
                C47734) *
               C942 +
           ((((C5439 + C5438) * C116 + (C5437 + C5436) * C47850) * C4577 +
             ((C5890 + C5891) * C116 + (C5892 + C5893) * C47850) * C47945) *
                C47734 -
            (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
             ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
                C47896) *
               C943 +
           ((((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
             ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
                C47896 -
            (((C4580 * C1549 + C47914 * C1552 + C4579 * C1548 + C4575 * C1551) *
                  C47850 +
              (C4580 * C1543 + C47914 * C1546 + C4579 * C1542 + C4575 * C1545) *
                  C116) *
                 C47945 +
             ((C5893 + C5892) * C47850 + (C5891 + C5890) * C116) * C4577) *
                C47734) *
               C47927) *
              C47881 +
          (((((C4579 * C415 + C4575 * C428 + C4580 * C414 + C47914 * C427) *
                  C116 +
              (C4579 * C425 + C4575 * C445 + C4580 * C424 + C47914 * C444) *
                  C47850) *
                 C4577 +
             ((C5440 + C5441) * C116 + (C5442 + C5443) * C47850) * C47945) *
                C47734 -
            (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
             ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                  C47850 +
              (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                  C116) *
                 C4577) *
                C47896) *
               C942 +
           ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
             ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
                C47896 -
            (((C6242 + C6243) * C47850 + (C6244 + C6245) * C116) * C47945 +
             ((C5443 + C5442) * C47850 + (C5441 + C5440) * C116) * C4577) *
                C47734) *
               C943 +
           ((((C6245 + C6244) * C116 + (C6243 + C6242) * C47850) * C4577 +
             ((C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                  C116 +
              (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C6036 + C6037) * C47850 + (C6038 + C6039) * C116) * C47945 +
             ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4579 * C263 + C4575 * C276 + C4580 * C262 + C47914 * C275) *
                C116 +
            (C4579 * C273 + C4575 * C293 + C4580 * C272 + C47914 * C292) *
                C47850) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C4580 * C271 + C47914 * C291 + C4579 * C272 + C4575 * C292) *
                C47850 +
            (C4580 * C261 + C47914 * C274 + C4579 * C262 + C4575 * C275) *
                C116) *
               C47945 +
           ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C47850 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C116) *
               C4577) *
              C47647 * C47629 * C109 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C116 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C47850) *
               C4577 +
           ((C4579 * C261 + C4575 * C274 + C4580 * C267 + C47914 * C283) *
                C116 +
            (C4579 * C271 + C4575 * C291 + C4580 * C284 + C47914 * C297) *
                C47850) *
               C47945) *
              C47647 * C47629 * C110 -
          (((C4580 * C287 + C47914 * C299 + C4579 * C284 + C4575 * C297) *
                C47850 +
            (C4580 * C269 + C47914 * C288 + C4579 * C267 + C4575 * C283) *
                C116) *
               C47945 +
           ((C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C47850 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C116) *
               C4577) *
              C47647 * C47629 * C111 +
          (((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
                C116 +
            (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
                C47850) *
               C4577 +
           ((C4579 * C269 + C4575 * C288 + C4580 * C558 + C47914 * C559) *
                C116 +
            (C4579 * C287 + C4575 * C299 + C4580 * C560 + C47914 * C561) *
                C47850) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C47966 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C47954 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47914 * C1026) *
                 C116 +
             (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C258 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C47954 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C47966 -
           (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 + C4575 * C1035) *
                 C47850 +
             (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 + C4575 * C1026) *
                 C116) *
                C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47927) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C47966 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C47954 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C116 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C47850) *
                C4577 +
            ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
               C47647 * C942 -
           (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
            ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
               C47647 * C943 +
           (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
            ((C4579 * C1018 + C4575 * C1027 + C4580 * C1017 + C47914 * C1026) *
                 C116 +
             (C4579 * C1024 + C4575 * C1036 + C4580 * C1023 + C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C4784 + C4785) * C116 + (C4786 + C4787) * C47850) * C4577 +
            ((C4788 + C4789) * C116 + (C4790 + C4791) * C47850) * C47945) *
               C47647 * C943 -
           (((C4787 + C4786) * C47850 + (C4785 + C4784) * C116) * C47945 +
            ((C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C47850 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C116) *
                C4577) *
               C47647 * C942 -
           (((C4580 * C1022 + C47914 * C1034 + C4579 * C1023 + C4575 * C1035) *
                 C47850 +
             (C4580 * C1016 + C47914 * C1025 + C4579 * C1017 + C4575 * C1026) *
                 C116) *
                C47945 +
            ((C4791 + C4790) * C47850 + (C4789 + C4788) * C116) * C4577) *
               C47647 * C47927) *
              C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C116 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C47850) *
                C4577 +
            ((C4792 + C4793) * C116 + (C4794 + C4795) * C47850) * C47945) *
               C47647 * C942 -
           (((C4796 + C4797) * C47850 + (C4798 + C4799) * C116) * C47945 +
            ((C4795 + C4794) * C47850 + (C4793 + C4792) * C116) * C4577) *
               C47647 * C943 +
           (((C4799 + C4798) * C116 + (C4797 + C4796) * C47850) * C4577 +
            ((C4579 * C1016 + C4575 * C1025 + C4580 * C1290 + C47914 * C1291) *
                 C116 +
             (C4579 * C1022 + C4575 * C1034 + C4580 * C1292 + C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C116 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C47850) *
               C4577 +
           ((C4776 + C4777) * C116 + (C4778 + C4779) * C47850) * C47945) *
              C47647 * C1010 -
          (((C4780 + C4781) * C47850 + (C4782 + C4783) * C116) * C47945 +
           ((C4779 + C4778) * C47850 + (C4777 + C4776) * C116) * C4577) *
              C47647 * C1011 +
          (((C4783 + C4782) * C116 + (C4781 + C4780) * C47850) * C4577 +
           ((C5700 + C5701) * C116 + (C5702 + C5703) * C47850) * C47945) *
              C47647 * C1012 -
          (((C5704 + C5705) * C47850 + (C5706 + C5707) * C116) * C47945 +
           ((C5703 + C5702) * C47850 + (C5701 + C5700) * C116) * C4577) *
              C47647 * C1013 +
          (((C5707 + C5706) * C116 + (C5705 + C5704) * C47850) * C4577 +
           ((C4579 * C5675 + C4575 * C5677 + C4580 * C5676 + C47914 * C5678) *
                C116 +
            (C4579 * C5679 + C4575 * C5681 + C4580 * C5680 + C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C47688 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47695 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C2700) *
              C47606 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47695 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47688 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C2700) *
              C47615 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C47688 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47695 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47896 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C47688 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47896) *
               C47695 +
           (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
             (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
                C47835 * C47896 -
            ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
             (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
                C47835 * C47734) *
               C2700) *
              C2440 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47896) *
               C47688 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47896 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47695 +
           (((C6245 + C6244) * C10311 + (C6243 + C6242) * C10309 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                 C10312 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
             (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
                C47835 * C47896) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C47973 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47969 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47959 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C47647 * C47937) *
              C2440 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47969 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47973 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47959 +
           ((C6039 + C6038) * C10311 + (C6037 + C6036) * C10309 +
            (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                C10312 +
            (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C2332 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47692 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C2332) *
              C47965 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C2332 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C5084 + C5085) * C10311 + (C5086 + C5087) * C10309 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                C10312 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C10949 + C10948) * C47947 + (C10947 + C10946) * C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47967 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47956 +
            ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
             (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
                C47835 * C47930) *
               C2332 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47956 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47967 -
            ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
             (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
                C47835 * C47930) *
               C47692) *
              C2440 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47956 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47967 -
            ((C12710 + C12711) * C47947 + (C12712 + C12713) * C10312 +
             (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
                C47835 * C47930) *
               C2332 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47967 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47956 +
            ((C6983 + C6982) * C10311 + (C6981 + C6980) * C10309 +
             (C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47914 * C2227) *
                 C10312 +
             (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47914 * C2233) *
                 C47947) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47896 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C2332 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47896) *
               C47692) *
              C47606 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47896) *
               C2332 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47896 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C10311 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C10309 +
             (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
                C47835 * C47896 -
            ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
             (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
                C47835 * C47734) *
               C2332 +
           (((C5447 + C5446) * C10311 + (C5445 + C5444) * C10309 +
             (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C10312 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
             (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
                C47835 * C47896) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C2332 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47692 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C2332) *
              C47965 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C2332 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C5084 + C5085) * C10311 + (C5086 + C5087) * C10309 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                C10312 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C10949 + C10948) * C47947 + (C10947 + C10946) * C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C47973 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47969 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47959 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C47647 * C47937) *
              C2440 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47969 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47973 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47959 +
           ((C6039 + C6038) * C10311 + (C6037 + C6036) * C10309 +
            (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                C10312 +
            (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C3094 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C47688 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C3094) *
               C47695 +
           (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
             (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
                C47835 * C3094 -
            ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
             (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
                C47835 * C47734) *
               C2700) *
              C47881 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C3094) *
               C47688 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C3094 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47695 +
           (((C6245 + C6244) * C10311 + (C6243 + C6242) * C10309 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                 C10312 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
             (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
                C47835 * C3094) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47730 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47737 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
               C47835 * C3602) *
              C47688 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47737 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47730 -
           ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
            (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
               C47835 * C3602) *
              C47695 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47730 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C47737 +
           ((C5897 + C5896) * C10311 + (C5895 + C5894) * C10309 +
            (C4579 * C7243 + C4575 * C7245 + C4580 * C7244 + C47914 * C7246) *
                C10312 +
            (C4579 * C7247 + C4575 * C7249 + C4580 * C7248 + C47914 * C7250) *
                C47947) *
               C47835 * C3602) *
              C2700) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C3094 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C47973 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47734 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C3094) *
              C47969 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C3094 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C47734) *
              C47959 +
          (((C6395 + C6394) * C10311 + (C6393 + C6392) * C10309 +
            (C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                C10312 +
            (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C3094 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C2332 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C3094) *
               C47692) *
              C47963 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C3094) *
               C2332 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C3094 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C10311 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C10309 +
             (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
                C47835 * C3094 -
            ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
             (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
                C47835 * C47734) *
               C2332 +
           (((C5447 + C5446) * C10311 + (C5445 + C5444) * C10309 +
             (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C10312 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
             (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
                C47835 * C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47974 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47971 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
               C47835 * C47962 -
           ((C12374 + C12375) * C47947 + (C12376 + C12377) * C10312 +
            (C12373 + C12372) * C10309 + (C12371 + C12370) * C10311) *
               C47835 * C47943) *
              C2332 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47971 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47974 -
           ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
            (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
               C47835 * C47962 +
           ((C7263 + C7262) * C10311 + (C7261 + C7260) * C10309 +
            (C4579 * C6769 + C4575 * C6771 + C4580 * C6770 + C47914 * C6772) *
                C10312 +
            (C4579 * C6773 + C4575 * C6775 + C4580 * C6774 + C47914 * C6776) *
                C47947) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47730 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47737 +
            ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
             (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
                C47835 * C3602) *
               C2332 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47737 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47730 -
            ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
             (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
                C47835 * C3602) *
               C47692) *
              C47881 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47737 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47730 -
            ((C12710 + C12711) * C47947 + (C12712 + C12713) * C10312 +
             (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
                C47835 * C3602) *
               C2332 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47730 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47737 +
            ((C6983 + C6982) * C10311 + (C6981 + C6980) * C10309 +
             (C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47914 * C2227) *
                 C10312 +
             (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47914 * C2233) *
                 C47947) *
                C47835 * C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C3094 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C2332 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C3094) *
               C47692) *
              C47963 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C3094) *
               C2332 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C3094 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C10311 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C10309 +
             (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
                C47835 * C3094 -
            ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
             (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
                C47835 * C47734) *
               C2332 +
           (((C5447 + C5446) * C10311 + (C5445 + C5444) * C10309 +
             (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C10312 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
             (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
                C47835 * C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C3094 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C47973 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47734 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C3094) *
              C47969 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C3094 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C47734) *
              C47959 +
          (((C6395 + C6394) * C10311 + (C6393 + C6392) * C10309 +
            (C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                C10312 +
            (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C1284 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C1285 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C1286 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C1285 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C1284 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C1286 +
           ((C6039 + C6038) * C10311 + (C6037 + C6036) * C10309 +
            (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                C10312 +
            (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C47895 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47692) *
              C554 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47692 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47895) *
              C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C47895 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47692) *
              C556 +
          (((C5084 + C5085) * C10311 + (C5086 + C5087) * C10309 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                C10312 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C4580 * C440 + C47914 * C452 + C4579 * C437 + C4575 * C450) *
                C47947 +
            (C4580 * C422 + C47914 * C441 + C4579 * C420 + C4575 * C436) *
                C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C1664 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C1665 +
            ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
             (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
                C47835 * C47930) *
               C47895 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C1665 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C1664 -
            ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
             (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
                C47835 * C47930) *
               C47692) *
              C47881 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C1665 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C1664 -
            ((C4580 * C1850 + C47914 * C1862 + C4579 * C1851 + C4575 * C1863) *
                 C47947 +
             (C4580 * C1844 + C47914 * C1853 + C4579 * C1845 + C4575 * C1854) *
                 C10312 +
             (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
                C47835 * C47930) *
               C47895 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C1664 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C1665 +
            ((C6983 + C6982) * C10311 + (C6981 + C6980) * C10309 +
             (C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47914 * C2227) *
                 C10312 +
             (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47914 * C2233) *
                 C47947) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47896 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C1284 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47734 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47896) *
              C1285 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47896 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C47734) *
              C1286 +
          (((C6395 + C6394) * C10311 + (C6393 + C6392) * C10309 +
            (C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                C10312 +
            (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47896 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C47895 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47896) *
               C47692) *
              C258 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47896) *
               C47895 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47896 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47692) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C10311 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C10309 +
             (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
                C47835 * C47896 -
            ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
             (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
                C47835 * C47734) *
               C47895 +
           (((C5447 + C5446) * C10311 + (C5445 + C5444) * C10309 +
             (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C10312 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
             (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C2116 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C2117 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
               C47835 * C2118 -
           ((C12374 + C12375) * C47947 + (C12376 + C12377) * C10312 +
            (C12373 + C12372) * C10309 + (C12371 + C12370) * C10311) *
               C47835 * C47943) *
              C47895 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C2117 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C2116 -
           ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
            (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
               C47835 * C2118 +
           ((C7263 + C7262) * C10311 + (C7261 + C7260) * C10309 +
            (C4579 * C6769 + C4575 * C6771 + C4580 * C6770 + C47914 * C6772) *
                C10312 +
            (C4579 * C6773 + C4575 * C6775 + C4580 * C6774 + C47914 * C6776) *
                C47947) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                   C10311 +
               (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                   C10309 +
               (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
                   C10312 +
               (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
                   C47947) *
                  C47835 * C47647 * C47629 * C108 -
              ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
                   C47947 +
               (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
                   C10312 +
               (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                   C10309 +
               (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                   C10311) *
                  C47835 * C47647 * C47629 * C109 +
              ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                   C10311 +
               (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                   C10309 +
               (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
                   C10312 +
               (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
                   C47947) *
                  C47835 * C47647 * C47629 * C110 -
              ((C4580 * C440 + C47914 * C452 + C4579 * C437 + C4575 * C450) *
                   C47947 +
               (C4580 * C422 + C47914 * C441 + C4579 * C420 + C4575 * C436) *
                   C10312 +
               (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                   C10309 +
               (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                   C10311) *
                  C47835 * C47647 * C47629 * C111 +
              ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
                   C10311 +
               (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
                   C10309 +
               (C4579 * C422 + C4575 * C441 + C4580 * C662 + C47914 * C663) *
                   C10312 +
               (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47914 * C665) *
                   C47947) *
                  C47835 * C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                    C10311 +
                (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                    C10309 +
                (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
                    C10312 +
                (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
                    C47947) *
                   C47835 * C47647 * C47966 -
               ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
                (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                   C47835 * C47647 * C47954 +
               ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
                (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
                   C47835 * C47647 * C47927) *
                  C258 +
              (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
                (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                   C47835 * C47647 * C47954 -
               ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
                    C47947 +
                (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
                    C10312 +
                (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                    C10309 +
                (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                    C10311) *
                   C47835 * C47647 * C47966 -
               ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
                (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
                   C47835 * C47647 * C47927) *
                  C259 +
              (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                    C10311 +
                (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                    C10309 +
                (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
                    C10312 +
                (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
                    C47947) *
                   C47835 * C47647 * C47966 -
               ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
                (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
                   C47835 * C47647 * C47954 +
               ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
                (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 +
                 C47914 * C1441) *
                    C10312 +
                (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 +
                 C47914 * C1443) *
                    C47947) *
                   C47835 * C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47967 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47956 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C258 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47956 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47967 -
           ((C4580 * C1850 + C47914 * C1862 + C4579 * C1851 + C4575 * C1863) *
                C47947 +
            (C4580 * C1844 + C47914 * C1853 + C4579 * C1845 + C4575 * C1854) *
                C10312 +
            (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
               C47835 * C47930) *
              C47629 * C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47967 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C47956 +
           ((C10677 + C10676) * C10311 + (C10675 + C10674) * C10309 +
            (C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47914 * C2121) *
                C10312 +
            (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C942 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C943 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C943 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C942 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C942 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C943 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
              C47835 * C47647 * C1010 -
          ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
           (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
              C47835 * C47647 * C1011 +
          ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
           (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
              C47835 * C47647 * C1012 -
          ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
           (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
              C47835 * C47647 * C1013 +
          ((C5707 + C5706) * C10311 + (C5705 + C5704) * C10309 +
           (C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
               C10312 +
           (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47967 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47956 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C942 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47956 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47967 -
           ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
            (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
               C47835 * C47930) *
              C943 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47967 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C47956 +
           ((C5897 + C5896) * C10311 + (C5895 + C5894) * C10309 +
            (C4579 * C7243 + C4575 * C7245 + C4580 * C7244 + C47914 * C7246) *
                C10312 +
            (C4579 * C7247 + C4575 * C7249 + C4580 * C7248 + C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C1664 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C1665 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C1665 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C1664 -
           ((C4580 * C1850 + C47914 * C1862 + C4579 * C1851 + C4575 * C1863) *
                C47947 +
            (C4580 * C1844 + C47914 * C1853 + C4579 * C1845 + C4575 * C1854) *
                C10312 +
            (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C1664 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C1665 +
           ((C10677 + C10676) * C10311 + (C10675 + C10674) * C10309 +
            (C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47914 * C2121) *
                C10312 +
            (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C1664 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C1665 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47966 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C1665 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C1664 -
           ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
            (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
               C47835 * C47930) *
              C47954 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C1664 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C1665 +
           ((C5897 + C5896) * C10311 + (C5895 + C5894) * C10309 +
            (C4579 * C7243 + C4575 * C7245 + C4580 * C7244 + C47914 * C7246) *
                C10312 +
            (C4579 * C7247 + C4575 * C7249 + C4580 * C7248 + C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
              C47835 * C1839 -
          ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
           (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
              C47835 * C1840 +
          ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
           (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
              C47835 * C1841 -
          ((C12374 + C12375) * C47947 + (C12376 + C12377) * C10312 +
           (C12373 + C12372) * C10309 + (C12371 + C12370) * C10311) *
              C47835 * C1842 +
          ((C12377 + C12376) * C10311 + (C12375 + C12374) * C10309 +
           (C4579 * C12345 + C4575 * C12347 + C4580 * C12346 +
            C47914 * C12348) *
               C10312 +
           (C4579 * C12349 + C4575 * C12351 + C4580 * C12350 +
            C47914 * C12352) *
               C47947) *
              C47835 * C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47896 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C942 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47896) *
               C943 +
           (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
             (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
                C47835 * C47896 -
            ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
             (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47896) *
               C942 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47896 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C943 +
           (((C6245 + C6244) * C10311 + (C6243 + C6242) * C10309 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                 C10312 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
             (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47896 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C47629 * C554 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47734 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47896) *
              C47629 * C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47896 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C47734) *
              C47629 * C556 +
          (((C10946 + C10947) * C10311 + (C10948 + C10949) * C10309 +
            (C4579 * C421 + C4575 * C439 + C4580 * C423 + C47914 * C442) *
                C10312 +
            (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C10949 + C10948) * C47947 + (C10947 + C10946) * C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C2116 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C2117 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
               C47835 * C2118 -
           ((C12374 + C12375) * C47947 + (C12376 + C12377) * C10312 +
            (C12373 + C12372) * C10309 + (C12371 + C12370) * C10311) *
               C47835 * C47943) *
              C47629 * C47881 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C2117 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C2116 -
           ((C12710 + C12711) * C47947 + (C12712 + C12713) * C10312 +
            (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
               C47835 * C2118 +
           ((C12713 + C12712) * C10311 + (C12711 + C12710) * C10309 +
            (C4579 * C1848 + C4575 * C1857 + C4580 * C1849 + C47914 * C1858) *
                C10312 +
            (C4579 * C1860 + C4575 * C1866 + C4580 * C1861 + C47914 * C1867) *
                C47947) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
                C10312 +
            (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47954 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47927) *
              C258 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47954 -
           ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
                C47947 +
            (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
                C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47966 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
                C10312 +
            (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47954 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
               C10312 +
           (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
               C47947) *
              C47835 * C47647 * C47629 * C108 -
          ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
               C47947 +
           (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
               C10312 +
           (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
               C10309 +
           (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
               C10311) *
              C47835 * C47647 * C47629 * C109 +
          ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
               C10311 +
           (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
               C10309 +
           (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
               C10312 +
           (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
               C47947) *
              C47835 * C47647 * C47629 * C110 -
          ((C4580 * C440 + C47914 * C452 + C4579 * C437 + C4575 * C450) *
               C47947 +
           (C4580 * C422 + C47914 * C441 + C4579 * C420 + C4575 * C436) *
               C10312 +
           (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
               C10309 +
           (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
               C10311) *
              C47835 * C47647 * C47629 * C111 +
          ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
               C10311 +
           (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
               C10309 +
           (C4579 * C422 + C4575 * C441 + C4580 * C662 + C47914 * C663) *
               C10312 +
           (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47914 * C665) *
               C47947) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C942 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C943 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C943 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C942 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C942 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C943 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
              C47835 * C47647 * C1010 -
          ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
           (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
              C47835 * C47647 * C1011 +
          ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
           (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
              C47835 * C47647 * C1012 -
          ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
           (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
              C47835 * C47647 * C1013 +
          ((C5707 + C5706) * C10311 + (C5705 + C5704) * C10309 +
           (C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
               C10312 +
           (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C1664 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C1665 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C1665 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C1664 -
           ((C4580 * C1850 + C47914 * C1862 + C4579 * C1851 + C4575 * C1863) *
                C47947 +
            (C4580 * C1844 + C47914 * C1853 + C4579 * C1845 + C4575 * C1854) *
                C10312 +
            (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C1664 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C1665 +
           ((C10677 + C10676) * C10311 + (C10675 + C10674) * C10309 +
            (C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47914 * C2121) *
                C10312 +
            (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C1664 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C1665 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47966 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C1665 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C1664 -
           ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
            (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
               C47835 * C47930) *
              C47954 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C1664 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C1665 +
           ((C5897 + C5896) * C10311 + (C5895 + C5894) * C10309 +
            (C4579 * C7243 + C4575 * C7245 + C4580 * C7244 + C47914 * C7246) *
                C10312 +
            (C4579 * C7247 + C4575 * C7249 + C4580 * C7248 + C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C3094 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C47895 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C3094) *
               C47692) *
              C47606 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C3094) *
               C47895 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C3094 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C10311 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C10309 +
             (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
                C47835 * C3094 -
            ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
             (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
                C47835 * C47734) *
               C47895 +
           (((C5447 + C5446) * C10311 + (C5445 + C5444) * C10309 +
             (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C10312 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
             (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
                C47835 * C3094) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47730 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47737 +
            ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
             (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
                C47835 * C3602) *
               C47895 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47737 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47730 -
            ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
             (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
                C47835 * C3602) *
               C47692) *
              C2440 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47737 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47730 -
            ((C12710 + C12711) * C47947 + (C12712 + C12713) * C10312 +
             (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
                C47835 * C3602) *
               C47895 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47730 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47737 +
            ((C6983 + C6982) * C10311 + (C6981 + C6980) * C10309 +
             (C4579 * C2223 + C4575 * C2226 + C4580 * C2224 + C47914 * C2227) *
                 C10312 +
             (C4579 * C2229 + C4575 * C2232 + C4580 * C2230 + C47914 * C2233) *
                 C47947) *
                C47835 * C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C3094 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C47966 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C3094) *
               C47954 +
           (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
             (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
                C47835 * C3094 -
            ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
             (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
                C47835 * C47734) *
               C47927) *
              C2440 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C3094) *
               C47966 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C3094 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47954 +
           (((C6245 + C6244) * C10311 + (C6243 + C6242) * C10309 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                 C10312 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
             (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
                C47835 * C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C3094 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47734 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C3094) *
              C47629 * C47965 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C3094 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C10946 + C10947) * C10311 + (C10948 + C10949) * C10309 +
            (C4579 * C421 + C4575 * C439 + C4580 * C423 + C47914 * C442) *
                C10312 +
            (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C10949 + C10948) * C47947 + (C10947 + C10946) * C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47974 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47971 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
               C47835 * C47962 -
           ((C12374 + C12375) * C47947 + (C12376 + C12377) * C10312 +
            (C12373 + C12372) * C10309 + (C12371 + C12370) * C10311) *
               C47835 * C47943) *
              C47629 * C2440 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47971 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47974 -
           ((C12710 + C12711) * C47947 + (C12712 + C12713) * C10312 +
            (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
               C47835 * C47962 +
           ((C12713 + C12712) * C10311 + (C12711 + C12710) * C10309 +
            (C4579 * C1848 + C4575 * C1857 + C4580 * C1849 + C47914 * C1858) *
                C10312 +
            (C4579 * C1860 + C4575 * C1866 + C4580 * C1861 + C47914 * C1867) *
                C47947) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47730 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47737 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C12370 + C12371) * C10312 + (C12372 + C12373) * C47947) *
               C47835 * C3602) *
              C47629 * C47606 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47737 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47730 -
           ((C12710 + C12711) * C47947 + (C12712 + C12713) * C10312 +
            (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
               C47835 * C3602) *
              C47629 * C47615 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47730 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C47737 +
           ((C10677 + C10676) * C10311 + (C10675 + C10674) * C10309 +
            (C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47914 * C2121) *
                C10312 +
            (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47914 * C2123) *
                C47947) *
               C47835 * C3602) *
              C47629 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C3094 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47734 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C3094) *
              C47629 * C47965 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C3094 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C10946 + C10947) * C10311 + (C10948 + C10949) * C10309 +
            (C4579 * C421 + C4575 * C439 + C4580 * C423 + C47914 * C442) *
                C10312 +
            (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C10949 + C10948) * C47947 + (C10947 + C10946) * C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C3094 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C47966 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C3094) *
               C47954 +
           (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
             (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
                C47835 * C3094 -
            ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
             (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
                C47835 * C47734) *
               C47927) *
              C2440 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C3094) *
               C47966 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C3094 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47954 +
           (((C6245 + C6244) * C10311 + (C6243 + C6242) * C10309 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                 C10312 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
             (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
                C47835 * C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C47895 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47692) *
              C554 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47692 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47895) *
              C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C47895 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47692) *
              C556 +
          (((C5084 + C5085) * C10311 + (C5086 + C5087) * C10309 +
            (C4579 * C815 + C4575 * C824 + C4580 * C816 + C47914 * C825) *
                C10312 +
            (C4579 * C823 + C4575 * C830 + C4580 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C4580 * C440 + C47914 * C452 + C4579 * C437 + C4575 * C450) *
                C47947 +
            (C4580 * C422 + C47914 * C441 + C4579 * C420 + C4575 * C436) *
                C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C1284 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C1285 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C1286 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C1285 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C1284 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C1286 +
           ((C6039 + C6038) * C10311 + (C6037 + C6036) * C10309 +
            (C4579 * C1543 + C4575 * C1546 + C4580 * C1544 + C47914 * C1547) *
                C10312 +
            (C4579 * C1549 + C4575 * C1552 + C4580 * C1550 + C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47896 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C47895 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47896) *
               C47692) *
              C258 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47896) *
               C47895 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47896 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C47692) *
              C259 +
          ((((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                 C10311 +
             (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                 C10309 +
             (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
                C47835 * C47896 -
            ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
             (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
                C47835 * C47734) *
               C47895 +
           (((C5447 + C5446) * C10311 + (C5445 + C5444) * C10309 +
             (C4579 * C1150 + C4575 * C1162 + C4580 * C2014 + C47914 * C2015) *
                 C10312 +
             (C4579 * C1159 + C4575 * C1177 + C4580 * C2016 + C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
             (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47896 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C1284 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47734 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47896) *
              C1285 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47896 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C47734) *
              C1286 +
          (((C6395 + C6394) * C10311 + (C6393 + C6392) * C10309 +
            (C4579 * C5853 + C4575 * C5855 + C4580 * C5854 + C47914 * C5856) *
                C10312 +
            (C4579 * C5857 + C4575 * C5859 + C4580 * C5858 + C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
            (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
                C10312 +
            (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47954 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47927) *
              C258 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47954 -
           ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
                C47947 +
            (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
                C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47966 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
                C10312 +
            (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47954 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
               C10312 +
           (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
               C47947) *
              C47835 * C47647 * C47629 * C108 -
          ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
               C47947 +
           (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
               C10312 +
           (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
               C10309 +
           (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
               C10311) *
              C47835 * C47647 * C47629 * C109 +
          ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
               C10311 +
           (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
               C10309 +
           (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
               C10312 +
           (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
               C47947) *
              C47835 * C47647 * C47629 * C110 -
          ((C4580 * C440 + C47914 * C452 + C4579 * C437 + C4575 * C450) *
               C47947 +
           (C4580 * C422 + C47914 * C441 + C4579 * C420 + C4575 * C436) *
               C10312 +
           (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
               C10309 +
           (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
               C10311) *
              C47835 * C47647 * C47629 * C111 +
          ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
               C10311 +
           (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
               C10309 +
           (C4579 * C422 + C4575 * C441 + C4580 * C662 + C47914 * C663) *
               C10312 +
           (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47914 * C665) *
               C47947) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47967 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47956 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C258 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47956 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47967 -
           ((C4580 * C1850 + C47914 * C1862 + C4579 * C1851 + C4575 * C1863) *
                C47947 +
            (C4580 * C1844 + C47914 * C1853 + C4579 * C1845 + C4575 * C1854) *
                C10312 +
            (C10669 + C10668) * C10309 + (C10667 + C10666) * C10311) *
               C47835 * C47930) *
              C47629 * C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47967 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C47956 +
           ((C10677 + C10676) * C10311 + (C10675 + C10674) * C10309 +
            (C4579 * C1844 + C4575 * C1853 + C4580 * C2120 + C47914 * C2121) *
                C10312 +
            (C4579 * C1850 + C4575 * C1862 + C4580 * C2122 + C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C942 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C943 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C943 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C942 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C942 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C943 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
              C47835 * C47647 * C1010 -
          ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
           (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
              C47835 * C47647 * C1011 +
          ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
           (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
              C47835 * C47647 * C1012 -
          ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
           (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
              C47835 * C47647 * C1013 +
          ((C5707 + C5706) * C10311 + (C5705 + C5704) * C10309 +
           (C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
               C10312 +
           (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47967 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47956 +
           ((C10661 + C10660) * C10311 + (C10659 + C10658) * C10309 +
            (C4579 * C1846 + C4575 * C1855 + C4580 * C1845 + C47914 * C1854) *
                C10312 +
            (C4579 * C1852 + C4575 * C1864 + C4580 * C1851 + C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C942 +
          (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
            (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
               C47835 * C47956 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47967 -
           ((C7260 + C7261) * C47947 + (C7262 + C7263) * C10312 +
            (C5889 + C5888) * C10309 + (C5887 + C5886) * C10311) *
               C47835 * C47930) *
              C943 +
          (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47967 -
           ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
            (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
               C47835 * C47956 +
           ((C5897 + C5896) * C10311 + (C5895 + C5894) * C10309 +
            (C4579 * C7243 + C4575 * C7245 + C4580 * C7244 + C47914 * C7246) *
                C10312 +
            (C4579 * C7247 + C4575 * C7249 + C4580 * C7248 + C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47896 -
           ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
            (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
               C47835 * C47734) *
              C47629 * C554 +
          (((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
            (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
               C47835 * C47734 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47896) *
              C47629 * C555 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47896 -
           ((C10674 + C10675) * C47947 + (C10676 + C10677) * C10312 +
            (C10673 + C10672) * C10309 + (C10671 + C10670) * C10311) *
               C47835 * C47734) *
              C47629 * C556 +
          (((C10946 + C10947) * C10311 + (C10948 + C10949) * C10309 +
            (C4579 * C421 + C4575 * C439 + C4580 * C423 + C47914 * C442) *
                C10312 +
            (C4579 * C438 + C4575 * C451 + C4580 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C10949 + C10948) * C47947 + (C10947 + C10946) * C10312 +
            (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
                C10309 +
            (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
                C10311) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                 C10311 +
             (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                 C10309 +
             (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
                C47835 * C47896 -
            ((C10658 + C10659) * C47947 + (C10660 + C10661) * C10312 +
             (C10657 + C10656) * C10309 + (C10655 + C10654) * C10311) *
                C47835 * C47734) *
               C942 +
           (((C5439 + C5438) * C10311 + (C5437 + C5436) * C10309 +
             (C5886 + C5887) * C10312 + (C5888 + C5889) * C47947) *
                C47835 * C47734 -
            ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
             (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
                C47835 * C47896) *
               C943 +
           (((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
             (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
                C47835 * C47896 -
            ((C5894 + C5895) * C47947 + (C5896 + C5897) * C10312 +
             (C5893 + C5892) * C10309 + (C5891 + C5890) * C10311) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C10662 + C10663) * C10311 + (C10664 + C10665) * C10309 +
             (C10666 + C10667) * C10312 + (C10668 + C10669) * C47947) *
                C47835 * C47734 -
            ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
             (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                 C10309 +
             (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                 C10311) *
                C47835 * C47896) *
               C942 +
           (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
             (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
                C47835 * C47896 -
            ((C6980 + C6981) * C47947 + (C6982 + C6983) * C10312 +
             (C5443 + C5442) * C10309 + (C5441 + C5440) * C10311) *
                C47835 * C47734) *
               C943 +
           (((C6245 + C6244) * C10311 + (C6243 + C6242) * C10309 +
             (C4579 * C1157 + C4575 * C1172 + C4580 * C1158 + C47914 * C1173) *
                 C10312 +
             (C4579 * C1175 + C4575 * C1184 + C4580 * C1176 + C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
             (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
               C10312 +
           (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
               C47947) *
              C47835 * C47647 * C47629 * C108 -
          ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
               C47947 +
           (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
               C10312 +
           (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
               C10309 +
           (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
               C10311) *
              C47835 * C47647 * C47629 * C109 +
          ((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
               C10311 +
           (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
               C10309 +
           (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
               C10312 +
           (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
               C47947) *
              C47835 * C47647 * C47629 * C110 -
          ((C4580 * C440 + C47914 * C452 + C4579 * C437 + C4575 * C450) *
               C47947 +
           (C4580 * C422 + C47914 * C441 + C4579 * C420 + C4575 * C436) *
               C10312 +
           (C4580 * C133 + C47914 * C142 + C4579 * C130 + C4575 * C141) *
               C10309 +
           (C4580 * C121 + C47914 * C132 + C4579 * C120 + C4575 * C131) *
               C10311) *
              C47835 * C47647 * C47629 * C111 +
          ((C4579 * C121 + C4575 * C132 + C4580 * C122 + C47914 * C135) *
               C10311 +
           (C4579 * C133 + C4575 * C142 + C4580 * C134 + C47914 * C143) *
               C10309 +
           (C4579 * C422 + C4575 * C441 + C4580 * C662 + C47914 * C663) *
               C10312 +
           (C4579 * C440 + C4575 * C452 + C4580 * C664 + C47914 * C665) *
               C47947) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C4579 * C416 + C4575 * C429 + C4580 * C415 + C47914 * C428) *
                C10312 +
            (C4579 * C426 + C4575 * C446 + C4580 * C425 + C47914 * C445) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C47954 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47927) *
              C258 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C47954 -
           ((C4580 * C424 + C47914 * C444 + C4579 * C425 + C4575 * C445) *
                C47947 +
            (C4580 * C414 + C47914 * C427 + C4579 * C415 + C4575 * C428) *
                C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C47966 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C4579 * C414 + C4575 * C427 + C4580 * C420 + C47914 * C436) *
                C10312 +
            (C4579 * C424 + C4575 * C444 + C4580 * C437 + C47914 * C450) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C47954 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
                C10311 +
            (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
                C10309 +
            (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
               C47835 * C47647 * C942 -
           ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
            (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
               C47835 * C47647 * C943 +
           ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
            (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C4784 + C4785) * C10311 + (C4786 + C4787) * C10309 +
            (C5440 + C5441) * C10312 + (C5442 + C5443) * C47947) *
               C47835 * C47647 * C943 -
           ((C10665 + C10664) * C47947 + (C10663 + C10662) * C10312 +
            (C4580 * C129 + C47914 * C140 + C4579 * C128 + C4575 * C139) *
                C10309 +
            (C4580 * C119 + C47914 * C126 + C4579 * C118 + C4575 * C125) *
                C10311) *
               C47835 * C47647 * C942 -
           ((C6242 + C6243) * C47947 + (C6244 + C6245) * C10312 +
            (C4791 + C4790) * C10309 + (C4789 + C4788) * C10311) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C4579 * C119 + C4575 * C126 + C4580 * C120 + C47914 * C131) *
                C10311 +
            (C4579 * C129 + C4575 * C140 + C4580 * C130 + C47914 * C141) *
                C10309 +
            (C10670 + C10671) * C10312 + (C10672 + C10673) * C47947) *
               C47835 * C47647 * C942 -
           ((C5444 + C5445) * C47947 + (C5446 + C5447) * C10312 +
            (C4795 + C4794) * C10309 + (C4793 + C4792) * C10311) *
               C47835 * C47647 * C943 +
           ((C4799 + C4798) * C10311 + (C4797 + C4796) * C10309 +
            (C4579 * C1153 + C4575 * C1168 + C4580 * C1440 + C47914 * C1441) *
                C10312 +
            (C4579 * C1165 + C4575 * C1180 + C4580 * C1442 + C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4579 * C117 + C4575 * C124 + C4580 * C118 + C47914 * C125) *
               C10311 +
           (C4579 * C127 + C4575 * C138 + C4580 * C128 + C47914 * C139) *
               C10309 +
           (C10654 + C10655) * C10312 + (C10656 + C10657) * C47947) *
              C47835 * C47647 * C1010 -
          ((C5436 + C5437) * C47947 + (C5438 + C5439) * C10312 +
           (C4779 + C4778) * C10309 + (C4777 + C4776) * C10311) *
              C47835 * C47647 * C1011 +
          ((C4783 + C4782) * C10311 + (C4781 + C4780) * C10309 +
           (C5890 + C5891) * C10312 + (C5892 + C5893) * C47947) *
              C47835 * C47647 * C1012 -
          ((C6392 + C6393) * C47947 + (C6394 + C6395) * C10312 +
           (C5703 + C5702) * C10309 + (C5701 + C5700) * C10311) *
              C47835 * C47647 * C1013 +
          ((C5707 + C5706) * C10311 + (C5705 + C5704) * C10309 +
           (C4579 * C6375 + C4575 * C6377 + C4580 * C6376 + C47914 * C6378) *
               C10312 +
           (C4579 * C6379 + C4575 * C6381 + C4580 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47688 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47695 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47647 * C2700) *
              C47606 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47695 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47688 -
           (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C2700) *
              C47615 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C47688 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47695 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47896 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C47688 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47896) *
               C47695 +
           ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
             ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
                C47896 -
            (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
             ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
                C47734) *
               C2700) *
              C2440 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47896) *
               C47688 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47896 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47695 +
           ((((C17543 + C17542) * C116 + (C17541 + C17540) * C47850) * C15891 +
             ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
               C47914 * C1547) *
                  C116 +
              (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
               C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
             ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
                C47896) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47973 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47969 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47647 * C47959 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C47647 * C47937) *
              C2440 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47969 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47973 -
           (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47959 +
           (((C17337 + C17336) * C116 + (C17335 + C17334) * C47850) * C15891 +
            ((C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
              C47914 * C1030) *
                 C116 +
             (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
              C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C2332 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47692) *
              C47972 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47692 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C2332) *
              C47965 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C2332 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47692) *
              C47952 +
          ((((C16398 + C16399) * C116 + (C16400 + C16401) * C47850) * C15891 +
            ((C15893 * C268 + C15889 * C286 + C15894 * C270 + C47914 * C289) *
                 C116 +
             (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47967 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47956 +
            (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                  C116 +
              (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                  C47850) *
                 C15891 +
             ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
                C47930) *
               C2332 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47956 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47967 -
            (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
             ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
                C47930) *
               C47692) *
              C2440 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47956 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47967 -
            (((C18262 + C18263) * C47850 + (C18264 + C18265) * C116) * C47945 +
             ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                  C47850 +
              (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                  C116) *
                 C15891) *
                C47930) *
               C2332 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47967 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47956 +
            (((C18265 + C18264) * C116 + (C18263 + C18262) * C47850) * C15891 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47914 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47914 * C1185) *
                  C47850) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47896 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C2332 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47896) *
               C47692) *
              C47606 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47896) *
               C2332 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47896 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47692) *
              C47615 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                  C47850) *
                 C15891 +
             ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
                C47896 -
            (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
             ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                  C47850 +
              (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                  C116) *
                 C15891) *
                C47734) *
               C2332 +
           ((((C16761 + C16760) * C116 + (C16759 + C16758) * C47850) * C15891 +
             ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
               C47914 * C1441) *
                  C116 +
              (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
               C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
             ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
                C47896) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C2332 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47692) *
              C47972 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47692 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C2332) *
              C47965 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C2332 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47692) *
              C47952 +
          ((((C16398 + C16399) * C116 + (C16400 + C16401) * C47850) * C15891 +
            ((C15893 * C268 + C15889 * C286 + C15894 * C270 + C47914 * C289) *
                 C116 +
             (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47973 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47969 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47647 * C47959 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C47647 * C47937) *
              C2440 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47969 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47973 -
           (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47959 +
           (((C17337 + C17336) * C116 + (C17335 + C17334) * C47850) * C15891 +
            ((C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
              C47914 * C1030) *
                 C116 +
             (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
              C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C3094 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C47688 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C3094) *
               C47695 +
           ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
             ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
                C3094 -
            (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
             ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
                C47734) *
               C2700) *
              C47881 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C3094) *
               C47688 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C3094 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47695 +
           ((((C17543 + C17542) * C116 + (C17541 + C17540) * C47850) * C15891 +
             ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
               C47914 * C1547) *
                  C116 +
              (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
               C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
             ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
                C3094) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47730 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47737 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C3602) *
              C47688 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47737 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47730 -
           (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
            ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
               C3602) *
              C47695 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47730 -
           (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C47737 +
           (((C17195 + C17194) * C116 + (C17193 + C17192) * C47850) * C15891 +
            ((C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
              C47914 * C5856) *
                 C116 +
             (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
              C47914 * C5860) *
                 C47850) *
                C47945) *
               C3602) *
              C2700) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C3094 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C47973 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47734 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C3094) *
              C47969 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C3094 -
           (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C47734) *
              C47959 +
          ((((C17685 + C17684) * C116 + (C17683 + C17682) * C47850) * C15891 +
            ((C15893 * C6375 + C15889 * C6377 + C15894 * C6376 +
              C47914 * C6378) *
                 C116 +
             (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 +
              C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C3094 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C2332 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C3094) *
               C47692) *
              C47963 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C3094) *
               C2332 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C3094 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47692) *
              C47950 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                  C47850) *
                 C15891 +
             ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
                C3094 -
            (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
             ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                  C47850 +
              (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                  C116) *
                 C15891) *
                C47734) *
               C2332 +
           ((((C16761 + C16760) * C116 + (C16759 + C16758) * C47850) * C15891 +
             ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
               C47914 * C1441) *
                  C116 +
              (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
               C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
             ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
                C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47974 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47971 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47962 -
           (((C18534 + C18535) * C47850 + (C18536 + C18537) * C116) * C47945 +
            ((C15894 * C1851 + C47914 * C1863 + C15893 * C1852 +
              C15889 * C1864) *
                 C47850 +
             (C15894 * C1845 + C47914 * C1854 + C15893 * C1846 +
              C15889 * C1855) *
                 C116) *
                C15891) *
               C47943) *
              C2332 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47971 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47974 -
           (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
            ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
               C47962 +
           (((C18537 + C18536) * C116 + (C18535 + C18534) * C47850) * C15891 +
            ((C15893 * C7243 + C15889 * C7245 + C15894 * C7244 +
              C47914 * C7246) *
                 C116 +
             (C15893 * C7247 + C15889 * C7249 + C15894 * C7248 +
              C47914 * C7250) *
                 C47850) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47730 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47737 +
            (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                  C116 +
              (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                  C47850) *
                 C15891 +
             ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
                C3602) *
               C2332 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47737 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47730 -
            (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
             ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
                C3602) *
               C47692) *
              C47881 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47737 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47730 -
            (((C18262 + C18263) * C47850 + (C18264 + C18265) * C116) * C47945 +
             ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                  C47850 +
              (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                  C116) *
                 C15891) *
                C3602) *
               C2332 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47730 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47737 +
            (((C18265 + C18264) * C116 + (C18263 + C18262) * C47850) * C15891 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47914 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47914 * C1185) *
                  C47850) *
                 C47945) *
                C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C3094 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C2332 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C3094) *
               C47692) *
              C47963 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C3094) *
               C2332 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C3094 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47692) *
              C47950 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                  C47850) *
                 C15891 +
             ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
                C3094 -
            (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
             ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                  C47850 +
              (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                  C116) *
                 C15891) *
                C47734) *
               C2332 +
           ((((C16761 + C16760) * C116 + (C16759 + C16758) * C47850) * C15891 +
             ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
               C47914 * C1441) *
                  C116 +
              (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
               C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
             ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
                C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C3094 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C47973 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47734 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C3094) *
              C47969 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C3094 -
           (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C47734) *
              C47959 +
          ((((C17685 + C17684) * C116 + (C17683 + C17682) * C47850) * C15891 +
            ((C15893 * C6375 + C15889 * C6377 + C15894 * C6376 +
              C47914 * C6378) *
                 C116 +
             (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 +
              C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C1284 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C1285 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47647 * C1286 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C47647 * C47937) *
              C47881 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C1285 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C1284 -
           (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C1286 +
           (((C17337 + C17336) * C116 + (C17335 + C17334) * C47850) * C15891 +
            ((C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
              C47914 * C1030) *
                 C116 +
             (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
              C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47895 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47692) *
              C554 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47692 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47895) *
              C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C47895 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47692) *
              C556 +
          ((((C16398 + C16399) * C116 + (C16400 + C16401) * C47850) * C15891 +
            ((C15893 * C268 + C15889 * C286 + C15894 * C270 + C47914 * C289) *
                 C116 +
             (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C1664 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C1665 +
            (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                  C116 +
              (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                  C47850) *
                 C15891 +
             ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
                C47930) *
               C47895 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C1665 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C1664 -
            (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
             ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
                C47930) *
               C47692) *
              C47881 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C1665 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C1664 -
            (((C18262 + C18263) * C47850 + (C18264 + C18265) * C116) * C47945 +
             ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                  C47850 +
              (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                  C116) *
                 C15891) *
                C47930) *
               C47895 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C1664 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C1665 +
            (((C18265 + C18264) * C116 + (C18263 + C18262) * C47850) * C15891 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47914 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47914 * C1185) *
                  C47850) *
                 C47945) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47896 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C1284 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47734 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47896) *
              C1285 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47896 -
           (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C47734) *
              C1286 +
          ((((C17685 + C17684) * C116 + (C17683 + C17682) * C47850) * C15891 +
            ((C15893 * C6375 + C15889 * C6377 + C15894 * C6376 +
              C47914 * C6378) *
                 C116 +
             (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 +
              C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47896 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C47895 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C15893 * C1155 + C15889 * C1170 + C15894 * C1154 +
               C47914 * C1169) *
                  C116 +
              (C15893 * C1167 + C15889 * C1182 + C15894 * C1166 +
               C47914 * C1181) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47896) *
               C47692) *
              C258 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47896) *
               C47895 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47896 -
            (((C15894 * C1165 + C47914 * C1180 + C15893 * C1166 +
               C15889 * C1181) *
                  C47850 +
              (C15894 * C1153 + C47914 * C1168 + C15893 * C1154 +
               C15889 * C1169) *
                  C116) *
                 C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47692) *
              C259 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                  C47850) *
                 C15891 +
             ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
                C47896 -
            (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
             ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                  C47850 +
              (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                  C116) *
                 C15891) *
                C47734) *
               C47895 +
           ((((C16761 + C16760) * C116 + (C16759 + C16758) * C47850) * C15891 +
             ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
               C47914 * C1441) *
                  C116 +
              (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
               C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
             ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C2116 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C2117 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C2118 -
           (((C18534 + C18535) * C47850 + (C18536 + C18537) * C116) * C47945 +
            ((C15894 * C1851 + C47914 * C1863 + C15893 * C1852 +
              C15889 * C1864) *
                 C47850 +
             (C15894 * C1845 + C47914 * C1854 + C15893 * C1846 +
              C15889 * C1855) *
                 C116) *
                C15891) *
               C47943) *
              C47895 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C2117 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C2116 -
           (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
            ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
               C2118 +
           (((C18537 + C18536) * C116 + (C18535 + C18534) * C47850) * C15891 +
            ((C15893 * C7243 + C15889 * C7245 + C15894 * C7244 +
              C47914 * C7246) *
                 C116 +
             (C15893 * C7247 + C15889 * C7249 + C15894 * C7248 +
              C47914 * C7250) *
                 C47850) *
                C47945) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15893 * C117 + C15889 * C124 + C15894 * C118 +
                 C47914 * C125) *
                    C116 +
                (C15893 * C127 + C15889 * C138 + C15894 * C128 +
                 C47914 * C139) *
                    C47850) *
                   C15891 +
               ((C15893 * C263 + C15889 * C276 + C15894 * C262 +
                 C47914 * C275) *
                    C116 +
                (C15893 * C273 + C15889 * C293 + C15894 * C272 +
                 C47914 * C292) *
                    C47850) *
                   C47945) *
                  C47647 * C47629 * C108 -
              (((C15894 * C271 + C47914 * C291 + C15893 * C272 +
                 C15889 * C292) *
                    C47850 +
                (C15894 * C261 + C47914 * C274 + C15893 * C262 +
                 C15889 * C275) *
                    C116) *
                   C47945 +
               ((C15894 * C129 + C47914 * C140 + C15893 * C128 +
                 C15889 * C139) *
                    C47850 +
                (C15894 * C119 + C47914 * C126 + C15893 * C118 +
                 C15889 * C125) *
                    C116) *
                   C15891) *
                  C47647 * C47629 * C109 +
              (((C15893 * C119 + C15889 * C126 + C15894 * C120 +
                 C47914 * C131) *
                    C116 +
                (C15893 * C129 + C15889 * C140 + C15894 * C130 +
                 C47914 * C141) *
                    C47850) *
                   C15891 +
               ((C15893 * C261 + C15889 * C274 + C15894 * C267 +
                 C47914 * C283) *
                    C116 +
                (C15893 * C271 + C15889 * C291 + C15894 * C284 +
                 C47914 * C297) *
                    C47850) *
                   C47945) *
                  C47647 * C47629 * C110 -
              (((C15894 * C287 + C47914 * C299 + C15893 * C284 +
                 C15889 * C297) *
                    C47850 +
                (C15894 * C269 + C47914 * C288 + C15893 * C267 +
                 C15889 * C283) *
                    C116) *
                   C47945 +
               ((C15894 * C133 + C47914 * C142 + C15893 * C130 +
                 C15889 * C141) *
                    C47850 +
                (C15894 * C121 + C47914 * C132 + C15893 * C120 +
                 C15889 * C131) *
                    C116) *
                   C15891) *
                  C47647 * C47629 * C111 +
              (((C15893 * C121 + C15889 * C132 + C15894 * C122 +
                 C47914 * C135) *
                    C116 +
                (C15893 * C133 + C15889 * C142 + C15894 * C134 +
                 C47914 * C143) *
                    C47850) *
                   C15891 +
               ((C15893 * C269 + C15889 * C288 + C15894 * C558 +
                 C47914 * C559) *
                    C116 +
                (C15893 * C287 + C15889 * C299 + C15894 * C560 +
                 C47914 * C561) *
                    C47850) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15893 * C117 + C15889 * C124 + C15894 * C118 +
                  C47914 * C125) *
                     C116 +
                 (C15893 * C127 + C15889 * C138 + C15894 * C128 +
                  C47914 * C139) *
                     C47850) *
                    C15891 +
                ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) *
                    C47945) *
                   C47647 * C47966 -
               (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) *
                    C47945 +
                ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) *
                    C15891) *
                   C47647 * C47954 +
               (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) *
                    C15891 +
                ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
                  C47914 * C1026) *
                     C116 +
                 (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
                  C47914 * C1035) *
                     C47850) *
                    C47945) *
                   C47647 * C47927) *
                  C258 +
              ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) *
                    C15891 +
                ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) *
                    C47945) *
                   C47647 * C47954 -
               (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) *
                    C47945 +
                ((C15894 * C129 + C47914 * C140 + C15893 * C128 +
                  C15889 * C139) *
                     C47850 +
                 (C15894 * C119 + C47914 * C126 + C15893 * C118 +
                  C15889 * C125) *
                     C116) *
                    C15891) *
                   C47647 * C47966 -
               (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
                  C15889 * C1035) *
                     C47850 +
                 (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
                  C15889 * C1026) *
                     C116) *
                    C47945 +
                ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) *
                    C15891) *
                   C47647 * C47927) *
                  C259 +
              ((((C15893 * C119 + C15889 * C126 + C15894 * C120 +
                  C47914 * C131) *
                     C116 +
                 (C15893 * C129 + C15889 * C140 + C15894 * C130 +
                  C47914 * C141) *
                     C47850) *
                    C15891 +
                ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) *
                    C47945) *
                   C47647 * C47966 -
               (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) *
                    C47945 +
                ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) *
                    C15891) *
                   C47647 * C47954 +
               (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) *
                    C15891 +
                ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
                  C47914 * C1291) *
                     C116 +
                 (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
                  C47914 * C1293) *
                     C47850) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47967 -
           (((C15894 * C821 + C47914 * C828 + C15893 * C820 + C15889 * C827) *
                 C47850 +
             (C15894 * C813 + C47914 * C818 + C15893 * C812 + C15889 * C817) *
                 C116) *
                C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47956 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C15893 * C1152 + C15889 * C1164 + C15894 * C1151 +
              C47914 * C1163) *
                 C116 +
             (C15893 * C1161 + C15889 * C1179 + C15894 * C1160 +
              C47914 * C1178) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C258 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C15893 * C813 + C15889 * C818 + C15894 * C814 + C47914 * C819) *
                 C116 +
             (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47956 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47967 -
           (((C15894 * C1159 + C47914 * C1177 + C15893 * C1160 +
              C15889 * C1178) *
                 C47850 +
             (C15894 * C1150 + C47914 * C1162 + C15893 * C1151 +
              C15889 * C1163) *
                 C116) *
                C47945 +
            ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                 C47850 +
             (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                 C116) *
                C15891) *
               C47930) *
              C47629 * C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47967 -
           (((C15894 * C823 + C47914 * C830 + C15893 * C822 + C15889 * C829) *
                 C47850 +
             (C15894 * C815 + C47914 * C824 + C15893 * C814 + C15889 * C819) *
                 C116) *
                C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C47956 +
           (((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47914 * C439) *
                 C116 +
             (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47914 * C451) *
                 C47850) *
                C15891 +
            ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C116 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C942 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C943 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
              C47914 * C1026) *
                 C116 +
             (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
              C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C943 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C942 -
           (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
              C15889 * C1035) *
                 C47850 +
             (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
              C15889 * C1026) *
                 C116) *
                C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47927) *
              C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C942 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C943 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
              C47647 * C1010 -
          (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
           ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
              C47647 * C1011 +
          (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
           ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
              C47647 * C1012 -
          (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
           ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
              C47647 * C1013 +
          (((C17013 + C17012) * C116 + (C17011 + C17010) * C47850) * C15891 +
           ((C15893 * C5675 + C15889 * C5677 + C15894 * C5676 +
             C47914 * C5678) *
                C116 +
            (C15893 * C5679 + C15889 * C5681 + C15894 * C5680 +
             C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47967 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47956 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47930) *
              C942 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47956 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47967 -
           (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
            ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
               C47930) *
              C943 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47967 -
           (((C15894 * C1549 + C47914 * C1552 + C15893 * C1548 +
              C15889 * C1551) *
                 C47850 +
             (C15894 * C1543 + C47914 * C1546 + C15893 * C1542 +
              C15889 * C1545) *
                 C116) *
                C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C47956 +
           (((C17195 + C17194) * C116 + (C17193 + C17192) * C47850) * C15891 +
            ((C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
              C47914 * C5856) *
                 C116 +
             (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
              C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C1664 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C1665 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
               C1665 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C1664 -
           (((C15894 * C1159 + C47914 * C1177 + C15893 * C1160 +
              C15889 * C1178) *
                 C47850 +
             (C15894 * C1150 + C47914 * C1162 + C15893 * C1151 +
              C15889 * C1163) *
                 C116) *
                C47945 +
            ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                 C47850 +
             (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                 C116) *
                C15891) *
               C47930) *
              C47629 * C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C1664 -
           (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C1665 +
           (((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47914 * C439) *
                 C116 +
             (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47914 * C451) *
                 C47850) *
                C15891 +
            ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C116 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C1664 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C1665 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47930) *
              C47966 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C1665 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C1664 -
           (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
            ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
               C47930) *
              C47954 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C1664 -
           (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C1665 +
           (((C17195 + C17194) * C116 + (C17193 + C17192) * C47850) * C15891 +
            ((C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
              C47914 * C5856) *
                 C116 +
             (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
              C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
              C1839 -
          (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
           ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                C47850 +
            (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                C116) *
               C15891) *
              C1840 +
          (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                C116 +
            (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                C47850) *
               C15891 +
           ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
              C1841 -
          (((C15894 * C2229 + C47914 * C2232 + C15893 * C2228 +
             C15889 * C2231) *
                C47850 +
            (C15894 * C2223 + C47914 * C2226 + C15893 * C2222 +
             C15889 * C2225) *
                C116) *
               C47945 +
           ((C15894 * C1851 + C47914 * C1863 + C15893 * C1852 +
             C15889 * C1864) *
                C47850 +
            (C15894 * C1845 + C47914 * C1854 + C15893 * C1846 +
             C15889 * C1855) *
                C116) *
               C15891) *
              C1842 +
          (((C15893 * C1847 + C15889 * C1856 + C15894 * C1848 +
             C47914 * C1857) *
                C116 +
            (C15893 * C1859 + C15889 * C1865 + C15894 * C1860 +
             C47914 * C1866) *
                C47850) *
               C15891 +
           ((C15893 * C6769 + C15889 * C6771 + C15894 * C6770 +
             C47914 * C6772) *
                C116 +
            (C15893 * C6773 + C15889 * C6775 + C15894 * C6774 +
             C47914 * C6776) *
                C47850) *
               C47945) *
              C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47896 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C942 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47896) *
               C943 +
           ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
             ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
                C47896 -
            (((C15894 * C1549 + C47914 * C1552 + C15893 * C1548 +
               C15889 * C1551) *
                  C47850 +
              (C15894 * C1543 + C47914 * C1546 + C15893 * C1542 +
               C15889 * C1545) *
                  C116) *
                 C47945 +
             ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
                C47734) *
               C47927) *
              C47881 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47896) *
               C942 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47896 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C943 +
           ((((C17543 + C17542) * C116 + (C17541 + C17540) * C47850) * C15891 +
             ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
               C47914 * C1547) *
                  C116 +
              (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
               C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
             ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47896 -
           (((C15894 * C821 + C47914 * C828 + C15893 * C820 + C15889 * C827) *
                 C47850 +
             (C15894 * C813 + C47914 * C818 + C15893 * C812 + C15889 * C817) *
                 C116) *
                C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C554 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C15893 * C813 + C15889 * C818 + C15894 * C814 + C47914 * C819) *
                 C116 +
             (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47734 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47896) *
              C47629 * C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47896 -
           (((C15894 * C823 + C47914 * C830 + C15893 * C822 + C15889 * C829) *
                 C47850 +
             (C15894 * C815 + C47914 * C824 + C15893 * C814 + C15889 * C819) *
                 C116) *
                C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C556 +
          ((((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47914 * C441) *
                 C116 +
             (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47914 * C452) *
                 C47850) *
                C15891 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C2116 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C2117 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C2118 -
           (((C15894 * C2229 + C47914 * C2232 + C15893 * C2228 +
              C15889 * C2231) *
                 C47850 +
             (C15894 * C2223 + C47914 * C2226 + C15893 * C2222 +
              C15889 * C2225) *
                 C116) *
                C47945 +
            ((C15894 * C1851 + C47914 * C1863 + C15893 * C1852 +
              C15889 * C1864) *
                 C47850 +
             (C15894 * C1845 + C47914 * C1854 + C15893 * C1846 +
              C15889 * C1855) *
                 C116) *
                C15891) *
               C47943) *
              C47629 * C47881 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
               C2117 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C2116 -
           (((C18262 + C18263) * C47850 + (C18264 + C18265) * C116) * C47945 +
            ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                 C47850 +
             (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                 C116) *
                C15891) *
               C2118 +
           (((C15893 * C1845 + C15889 * C1854 + C15894 * C1844 +
              C47914 * C1853) *
                 C116 +
             (C15893 * C1851 + C15889 * C1863 + C15894 * C1850 +
              C47914 * C1862) *
                 C47850) *
                C15891 +
            ((C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
              C47914 * C2227) *
                 C116 +
             (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
              C47914 * C2233) *
                 C47850) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47966 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47954 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
              C47914 * C1026) *
                 C116 +
             (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
              C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C258 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47954 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47966 -
           (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
              C15889 * C1035) *
                 C47850 +
             (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
              C15889 * C1026) *
                 C116) *
                C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47927) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C47966 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47954 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C15893 * C263 + C15889 * C276 + C15894 * C262 + C47914 * C275) *
                C116 +
            (C15893 * C273 + C15889 * C293 + C15894 * C272 + C47914 * C292) *
                C47850) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C15894 * C271 + C47914 * C291 + C15893 * C272 + C15889 * C292) *
                C47850 +
            (C15894 * C261 + C47914 * C274 + C15893 * C262 + C15889 * C275) *
                C116) *
               C47945 +
           ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C47850 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C116) *
               C15891) *
              C47647 * C47629 * C109 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C116 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C47850) *
               C15891 +
           ((C15893 * C261 + C15889 * C274 + C15894 * C267 + C47914 * C283) *
                C116 +
            (C15893 * C271 + C15889 * C291 + C15894 * C284 + C47914 * C297) *
                C47850) *
               C47945) *
              C47647 * C47629 * C110 -
          (((C15894 * C287 + C47914 * C299 + C15893 * C284 + C15889 * C297) *
                C47850 +
            (C15894 * C269 + C47914 * C288 + C15893 * C267 + C15889 * C283) *
                C116) *
               C47945 +
           ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C47850 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C116) *
               C15891) *
              C47647 * C47629 * C111 +
          (((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47914 * C135) *
                C116 +
            (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47914 * C143) *
                C47850) *
               C15891 +
           ((C15893 * C269 + C15889 * C288 + C15894 * C558 + C47914 * C559) *
                C116 +
            (C15893 * C287 + C15889 * C299 + C15894 * C560 + C47914 * C561) *
                C47850) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C942 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C943 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
              C47914 * C1026) *
                 C116 +
             (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
              C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C943 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C942 -
           (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
              C15889 * C1035) *
                 C47850 +
             (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
              C15889 * C1026) *
                 C116) *
                C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47927) *
              C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C942 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C943 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
              C47647 * C1010 -
          (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
           ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
              C47647 * C1011 +
          (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
           ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
              C47647 * C1012 -
          (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
           ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
              C47647 * C1013 +
          (((C17013 + C17012) * C116 + (C17011 + C17010) * C47850) * C15891 +
           ((C15893 * C5675 + C15889 * C5677 + C15894 * C5676 +
             C47914 * C5678) *
                C116 +
            (C15893 * C5679 + C15889 * C5681 + C15894 * C5680 +
             C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C1664 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C1665 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47930) *
              C47629 * C47963 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
               C1665 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C1664 -
           (((C15894 * C1159 + C47914 * C1177 + C15893 * C1160 +
              C15889 * C1178) *
                 C47850 +
             (C15894 * C1150 + C47914 * C1162 + C15893 * C1151 +
              C15889 * C1163) *
                 C116) *
                C47945 +
            ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                 C47850 +
             (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                 C116) *
                C15891) *
               C47930) *
              C47629 * C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C1664 -
           (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C1665 +
           (((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47914 * C439) *
                 C116 +
             (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47914 * C451) *
                 C47850) *
                C15891 +
            ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C116 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C1664 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C1665 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47930) *
              C47966 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C1665 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C1664 -
           (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
            ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
               C47930) *
              C47954 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C1664 -
           (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C1665 +
           (((C17195 + C17194) * C116 + (C17193 + C17192) * C47850) * C15891 +
            ((C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
              C47914 * C5856) *
                 C116 +
             (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
              C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C3094 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C47895 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C3094) *
               C47692) *
              C47606 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C3094) *
               C47895 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C3094 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47692) *
              C47615 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                  C47850) *
                 C15891 +
             ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
                C3094 -
            (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
             ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                  C47850 +
              (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                  C116) *
                 C15891) *
                C47734) *
               C47895 +
           ((((C16761 + C16760) * C116 + (C16759 + C16758) * C47850) * C15891 +
             ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
               C47914 * C1441) *
                  C116 +
              (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
               C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
             ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
                C3094) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47730 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47737 +
            (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                  C116 +
              (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                  C47850) *
                 C15891 +
             ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
                C3602) *
               C47895 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47737 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47730 -
            (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
             ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
                C3602) *
               C47692) *
              C2440 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47737 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47730 -
            (((C18262 + C18263) * C47850 + (C18264 + C18265) * C116) * C47945 +
             ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                  C47850 +
              (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                  C116) *
                 C15891) *
                C3602) *
               C47895 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47730 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47737 +
            (((C18265 + C18264) * C116 + (C18263 + C18262) * C47850) * C15891 +
             ((C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
               C47914 * C1173) *
                  C116 +
              (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
               C47914 * C1185) *
                  C47850) *
                 C47945) *
                C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C3094 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C47966 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C3094) *
               C47954 +
           ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
             ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
                C3094 -
            (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
             ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
                C47734) *
               C47927) *
              C2440 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C3094) *
               C47966 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C3094 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47954 +
           ((((C17543 + C17542) * C116 + (C17541 + C17540) * C47850) * C15891 +
             ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
               C47914 * C1547) *
                  C116 +
              (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
               C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
             ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
                C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C3094 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C47972 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
               C47734 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C3094) *
              C47629 * C47965 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C3094 -
           (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C47952 +
          ((((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47914 * C441) *
                 C116 +
             (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47914 * C452) *
                 C47850) *
                C15891 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47974 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47971 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47962 -
           (((C18534 + C18535) * C47850 + (C18536 + C18537) * C116) * C47945 +
            ((C15894 * C1851 + C47914 * C1863 + C15893 * C1852 +
              C15889 * C1864) *
                 C47850 +
             (C15894 * C1845 + C47914 * C1854 + C15893 * C1846 +
              C15889 * C1855) *
                 C116) *
                C15891) *
               C47943) *
              C47629 * C2440 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
               C47971 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47974 -
           (((C18262 + C18263) * C47850 + (C18264 + C18265) * C116) * C47945 +
            ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                 C47850 +
             (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                 C116) *
                C15891) *
               C47962 +
           (((C15893 * C1845 + C15889 * C1854 + C15894 * C1844 +
              C47914 * C1853) *
                 C116 +
             (C15893 * C1851 + C15889 * C1863 + C15894 * C1850 +
              C47914 * C1862) *
                 C47850) *
                C15891 +
            ((C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
              C47914 * C2227) *
                 C116 +
             (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
              C47914 * C2233) *
                 C47850) *
                C47945) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47730 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47737 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C3602) *
              C47629 * C47606 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
               C47737 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47730 -
           (((C18262 + C18263) * C47850 + (C18264 + C18265) * C116) * C47945 +
            ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                 C47850 +
             (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                 C116) *
                C15891) *
               C3602) *
              C47629 * C47615 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47730 -
           (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C47737 +
           (((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47914 * C439) *
                 C116 +
             (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47914 * C451) *
                 C47850) *
                C15891 +
            ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C116 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47850) *
                C47945) *
               C3602) *
              C47629 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C3094 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C47972 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
               C47734 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C3094) *
              C47629 * C47965 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C3094 -
           (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C47952 +
          ((((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47914 * C441) *
                 C116 +
             (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47914 * C452) *
                 C47850) *
                C15891 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C3094 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C47966 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C3094) *
               C47954 +
           ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
             ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
                C3094 -
            (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
             ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
                C47734) *
               C47927) *
              C2440 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C3094) *
               C47966 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C3094 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47954 +
           ((((C17543 + C17542) * C116 + (C17541 + C17540) * C47850) * C15891 +
             ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
               C47914 * C1547) *
                  C116 +
              (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
               C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
             ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
                C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47895 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47692) *
              C554 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47692 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47895) *
              C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C47895 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47692) *
              C556 +
          ((((C16398 + C16399) * C116 + (C16400 + C16401) * C47850) * C15891 +
            ((C15893 * C268 + C15889 * C286 + C15894 * C270 + C47914 * C289) *
                 C116 +
             (C15893 * C285 + C15889 * C298 + C15894 * C290 + C47914 * C300) *
                 C47850) *
                C47945) *
               C47647 * C47692 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C1284 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C1285 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47647 * C1286 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C47647 * C47937) *
              C47881 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C1285 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C1284 -
           (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C1286 +
           (((C17337 + C17336) * C116 + (C17335 + C17334) * C47850) * C15891 +
            ((C15893 * C1020 + C15889 * C1029 + C15894 * C1021 +
              C47914 * C1030) *
                 C116 +
             (C15893 * C1032 + C15889 * C1038 + C15894 * C1033 +
              C47914 * C1039) *
                 C47850) *
                C47945) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47896 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C47895 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C15893 * C1155 + C15889 * C1170 + C15894 * C1154 +
               C47914 * C1169) *
                  C116 +
              (C15893 * C1167 + C15889 * C1182 + C15894 * C1166 +
               C47914 * C1181) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47896) *
               C47692) *
              C258 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47896) *
               C47895 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47896 -
            (((C15894 * C1165 + C47914 * C1180 + C15893 * C1166 +
               C15889 * C1181) *
                  C47850 +
              (C15894 * C1153 + C47914 * C1168 + C15893 * C1154 +
               C15889 * C1169) *
                  C116) *
                 C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C47692) *
              C259 +
          (((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                  C116 +
              (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                  C47850) *
                 C15891 +
             ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
                C47896 -
            (((C16758 + C16759) * C47850 + (C16760 + C16761) * C116) * C47945 +
             ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                  C47850 +
              (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                  C116) *
                 C15891) *
                C47734) *
               C47895 +
           ((((C16761 + C16760) * C116 + (C16759 + C16758) * C47850) * C15891 +
             ((C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
               C47914 * C1441) *
                  C116 +
              (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
               C47914 * C1443) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
             ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47896 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C1284 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47734 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47896) *
              C1285 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47896 -
           (((C17682 + C17683) * C47850 + (C17684 + C17685) * C116) * C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C47734) *
              C1286 +
          ((((C17685 + C17684) * C116 + (C17683 + C17682) * C47850) * C15891 +
            ((C15893 * C6375 + C15889 * C6377 + C15894 * C6376 +
              C47914 * C6378) *
                 C116 +
             (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 +
              C47914 * C6382) *
                 C47850) *
                C47945) *
               C47734 -
           (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
            ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47966 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47954 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
              C47914 * C1026) *
                 C116 +
             (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
              C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C258 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47954 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47966 -
           (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
              C15889 * C1035) *
                 C47850 +
             (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
              C15889 * C1026) *
                 C116) *
                C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47927) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C47966 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47954 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C15893 * C263 + C15889 * C276 + C15894 * C262 + C47914 * C275) *
                C116 +
            (C15893 * C273 + C15889 * C293 + C15894 * C272 + C47914 * C292) *
                C47850) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C15894 * C271 + C47914 * C291 + C15893 * C272 + C15889 * C292) *
                C47850 +
            (C15894 * C261 + C47914 * C274 + C15893 * C262 + C15889 * C275) *
                C116) *
               C47945 +
           ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C47850 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C116) *
               C15891) *
              C47647 * C47629 * C109 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C116 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C47850) *
               C15891 +
           ((C15893 * C261 + C15889 * C274 + C15894 * C267 + C47914 * C283) *
                C116 +
            (C15893 * C271 + C15889 * C291 + C15894 * C284 + C47914 * C297) *
                C47850) *
               C47945) *
              C47647 * C47629 * C110 -
          (((C15894 * C287 + C47914 * C299 + C15893 * C284 + C15889 * C297) *
                C47850 +
            (C15894 * C269 + C47914 * C288 + C15893 * C267 + C15889 * C283) *
                C116) *
               C47945 +
           ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C47850 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C116) *
               C15891) *
              C47647 * C47629 * C111 +
          (((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47914 * C135) *
                C116 +
            (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47914 * C143) *
                C47850) *
               C15891 +
           ((C15893 * C269 + C15889 * C288 + C15894 * C558 + C47914 * C559) *
                C116 +
            (C15893 * C287 + C15889 * C299 + C15894 * C560 + C47914 * C561) *
                C47850) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47967 -
           (((C15894 * C821 + C47914 * C828 + C15893 * C820 + C15889 * C827) *
                 C47850 +
             (C15894 * C813 + C47914 * C818 + C15893 * C812 + C15889 * C817) *
                 C116) *
                C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47956 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C15893 * C1152 + C15889 * C1164 + C15894 * C1151 +
              C47914 * C1163) *
                 C116 +
             (C15893 * C1161 + C15889 * C1179 + C15894 * C1160 +
              C47914 * C1178) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C258 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C15893 * C813 + C15889 * C818 + C15894 * C814 + C47914 * C819) *
                 C116 +
             (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47956 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47967 -
           (((C15894 * C1159 + C47914 * C1177 + C15893 * C1160 +
              C15889 * C1178) *
                 C47850 +
             (C15894 * C1150 + C47914 * C1162 + C15893 * C1151 +
              C15889 * C1163) *
                 C116) *
                C47945 +
            ((C15894 * C435 + C47914 * C449 + C15893 * C434 + C15889 * C448) *
                 C47850 +
             (C15894 * C419 + C47914 * C432 + C15893 * C418 + C15889 * C431) *
                 C116) *
                C15891) *
               C47930) *
              C47629 * C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47967 -
           (((C15894 * C823 + C47914 * C830 + C15893 * C822 + C15889 * C829) *
                 C47850 +
             (C15894 * C815 + C47914 * C824 + C15893 * C814 + C15889 * C819) *
                 C116) *
                C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C47956 +
           (((C15893 * C419 + C15889 * C432 + C15894 * C421 + C47914 * C439) *
                 C116 +
             (C15893 * C435 + C15889 * C449 + C15894 * C438 + C47914 * C451) *
                 C47850) *
                C15891 +
            ((C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C116 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47850) *
                C47945) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C942 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C943 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
              C47914 * C1026) *
                 C116 +
             (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
              C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C943 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C942 -
           (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
              C15889 * C1035) *
                 C47850 +
             (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
              C15889 * C1026) *
                 C116) *
                C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47927) *
              C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C942 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C943 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
              C47647 * C1010 -
          (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
           ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
              C47647 * C1011 +
          (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
           ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
              C47647 * C1012 -
          (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
           ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
              C47647 * C1013 +
          (((C17013 + C17012) * C116 + (C17011 + C17010) * C47850) * C15891 +
           ((C15893 * C5675 + C15889 * C5677 + C15894 * C5676 +
             C47914 * C5678) *
                C116 +
            (C15893 * C5679 + C15889 * C5681 + C15894 * C5680 +
             C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47967 -
           (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47956 +
           (((C15893 * C417 + C15889 * C430 + C15894 * C418 + C47914 * C431) *
                 C116 +
             (C15893 * C433 + C15889 * C447 + C15894 * C434 + C47914 * C448) *
                 C47850) *
                C15891 +
            ((C17184 + C17185) * C116 + (C17186 + C17187) * C47850) * C47945) *
               C47930) *
              C942 +
          ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
            ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
               C47956 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47967 -
           (((C17192 + C17193) * C47850 + (C17194 + C17195) * C116) * C47945 +
            ((C17187 + C17186) * C47850 + (C17185 + C17184) * C116) * C15891) *
               C47930) *
              C943 +
          ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
               C47967 -
           (((C15894 * C1549 + C47914 * C1552 + C15893 * C1548 +
              C15889 * C1551) *
                 C47850 +
             (C15894 * C1543 + C47914 * C1546 + C15893 * C1542 +
              C15889 * C1545) *
                 C116) *
                C47945 +
            ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
               C47956 +
           (((C17195 + C17194) * C116 + (C17193 + C17192) * C47850) * C15891 +
            ((C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
              C47914 * C5856) *
                 C116 +
             (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
              C47914 * C5860) *
                 C47850) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47896 -
           (((C15894 * C821 + C47914 * C828 + C15893 * C820 + C15889 * C827) *
                 C47850 +
             (C15894 * C813 + C47914 * C818 + C15893 * C812 + C15889 * C817) *
                 C116) *
                C47945 +
            ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                 C47850 +
             (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C554 +
          ((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                 C116 +
             (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                 C47850) *
                C15891 +
            ((C15893 * C813 + C15889 * C818 + C15894 * C814 + C47914 * C819) *
                 C116 +
             (C15893 * C821 + C15889 * C828 + C15894 * C822 + C47914 * C829) *
                 C47850) *
                C47945) *
               C47734 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47896) *
              C47629 * C555 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47896 -
           (((C15894 * C823 + C47914 * C830 + C15893 * C822 + C15889 * C829) *
                 C47850 +
             (C15894 * C815 + C47914 * C824 + C15893 * C814 + C15889 * C819) *
                 C116) *
                C47945 +
            ((C15894 * C437 + C47914 * C450 + C15893 * C424 + C15889 * C444) *
                 C47850 +
             (C15894 * C420 + C47914 * C436 + C15893 * C414 + C15889 * C427) *
                 C116) *
                C15891) *
               C47734) *
              C47629 * C556 +
          ((((C15893 * C420 + C15889 * C436 + C15894 * C422 + C47914 * C441) *
                 C116 +
             (C15893 * C437 + C15889 * C450 + C15894 * C440 + C47914 * C452) *
                 C47850) *
                C15891 +
            ((C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                 C116 +
             (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                 C47850) *
                C47945) *
               C47734 -
           (((C16401 + C16400) * C47850 + (C16399 + C16398) * C116) * C47945 +
            ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                 C47850 +
             (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                 C116) *
                C15891) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                  C116 +
              (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                  C47850) *
                 C15891 +
             ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
                C47896 -
            (((C16750 + C16751) * C47850 + (C16752 + C16753) * C116) * C47945 +
             ((C15894 * C425 + C47914 * C445 + C15893 * C426 + C15889 * C446) *
                  C47850 +
              (C15894 * C415 + C47914 * C428 + C15893 * C416 + C15889 * C429) *
                  C116) *
                 C15891) *
                C47734) *
               C942 +
           ((((C16753 + C16752) * C116 + (C16751 + C16750) * C47850) * C15891 +
             ((C17188 + C17189) * C116 + (C17190 + C17191) * C47850) * C47945) *
                C47734 -
            (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
             ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
                C47896) *
               C943 +
           ((((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
             ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
                C47896 -
            (((C15894 * C1549 + C47914 * C1552 + C15893 * C1548 +
               C15889 * C1551) *
                  C47850 +
              (C15894 * C1543 + C47914 * C1546 + C15893 * C1542 +
               C15889 * C1545) *
                  C116) *
                 C47945 +
             ((C17191 + C17190) * C47850 + (C17189 + C17188) * C116) * C15891) *
                C47734) *
               C47927) *
              C47881 +
          (((((C15893 * C415 + C15889 * C428 + C15894 * C414 + C47914 * C427) *
                  C116 +
              (C15893 * C425 + C15889 * C445 + C15894 * C424 + C47914 * C444) *
                  C47850) *
                 C15891 +
             ((C16754 + C16755) * C116 + (C16756 + C16757) * C47850) * C47945) *
                C47734 -
            (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
             ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                  C47850 +
              (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                  C116) *
                 C15891) *
                C47896) *
               C942 +
           ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
             ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
                C47896 -
            (((C17540 + C17541) * C47850 + (C17542 + C17543) * C116) * C47945 +
             ((C16757 + C16756) * C47850 + (C16755 + C16754) * C116) * C15891) *
                C47734) *
               C943 +
           ((((C17543 + C17542) * C116 + (C17541 + C17540) * C47850) * C15891 +
             ((C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
               C47914 * C1547) *
                  C116 +
              (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
               C47914 * C1553) *
                  C47850) *
                 C47945) *
                C47734 -
            (((C17334 + C17335) * C47850 + (C17336 + C17337) * C116) * C47945 +
             ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C15893 * C263 + C15889 * C276 + C15894 * C262 + C47914 * C275) *
                C116 +
            (C15893 * C273 + C15889 * C293 + C15894 * C272 + C47914 * C292) *
                C47850) *
               C47945) *
              C47647 * C47629 * C108 -
          (((C15894 * C271 + C47914 * C291 + C15893 * C272 + C15889 * C292) *
                C47850 +
            (C15894 * C261 + C47914 * C274 + C15893 * C262 + C15889 * C275) *
                C116) *
               C47945 +
           ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C47850 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C116) *
               C15891) *
              C47647 * C47629 * C109 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C116 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C47850) *
               C15891 +
           ((C15893 * C261 + C15889 * C274 + C15894 * C267 + C47914 * C283) *
                C116 +
            (C15893 * C271 + C15889 * C291 + C15894 * C284 + C47914 * C297) *
                C47850) *
               C47945) *
              C47647 * C47629 * C110 -
          (((C15894 * C287 + C47914 * C299 + C15893 * C284 + C15889 * C297) *
                C47850 +
            (C15894 * C269 + C47914 * C288 + C15893 * C267 + C15889 * C283) *
                C116) *
               C47945 +
           ((C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C47850 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C116) *
               C15891) *
              C47647 * C47629 * C111 +
          (((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47914 * C135) *
                C116 +
            (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47914 * C143) *
                C47850) *
               C15891 +
           ((C15893 * C269 + C15889 * C288 + C15894 * C558 + C47914 * C559) *
                C116 +
            (C15893 * C287 + C15889 * C299 + C15894 * C560 + C47914 * C561) *
                C47850) *
               C47945) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C47966 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C47954 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
              C47914 * C1026) *
                 C116 +
             (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
              C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C258 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C47954 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C47966 -
           (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
              C15889 * C1035) *
                 C47850 +
             (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
              C15889 * C1026) *
                 C116) *
                C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47927) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C47966 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C47954 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C116 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C47850) *
                C15891 +
            ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
               C47647 * C942 -
           (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
            ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
               C47647 * C943 +
           (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
            ((C15893 * C1018 + C15889 * C1027 + C15894 * C1017 +
              C47914 * C1026) *
                 C116 +
             (C15893 * C1024 + C15889 * C1036 + C15894 * C1023 +
              C47914 * C1035) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          ((((C16098 + C16099) * C116 + (C16100 + C16101) * C47850) * C15891 +
            ((C16102 + C16103) * C116 + (C16104 + C16105) * C47850) * C47945) *
               C47647 * C943 -
           (((C16101 + C16100) * C47850 + (C16099 + C16098) * C116) * C47945 +
            ((C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C47850 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C116) *
                C15891) *
               C47647 * C942 -
           (((C15894 * C1022 + C47914 * C1034 + C15893 * C1023 +
              C15889 * C1035) *
                 C47850 +
             (C15894 * C1016 + C47914 * C1025 + C15893 * C1017 +
              C15889 * C1026) *
                 C116) *
                C47945 +
            ((C16105 + C16104) * C47850 + (C16103 + C16102) * C116) * C15891) *
               C47647 * C47927) *
              C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C116 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C47850) *
                C15891 +
            ((C16106 + C16107) * C116 + (C16108 + C16109) * C47850) * C47945) *
               C47647 * C942 -
           (((C16110 + C16111) * C47850 + (C16112 + C16113) * C116) * C47945 +
            ((C16109 + C16108) * C47850 + (C16107 + C16106) * C116) * C15891) *
               C47647 * C943 +
           (((C16113 + C16112) * C116 + (C16111 + C16110) * C47850) * C15891 +
            ((C15893 * C1016 + C15889 * C1025 + C15894 * C1290 +
              C47914 * C1291) *
                 C116 +
             (C15893 * C1022 + C15889 * C1034 + C15894 * C1292 +
              C47914 * C1293) *
                 C47850) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C116 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C47850) *
               C15891 +
           ((C16090 + C16091) * C116 + (C16092 + C16093) * C47850) * C47945) *
              C47647 * C1010 -
          (((C16094 + C16095) * C47850 + (C16096 + C16097) * C116) * C47945 +
           ((C16093 + C16092) * C47850 + (C16091 + C16090) * C116) * C15891) *
              C47647 * C1011 +
          (((C16097 + C16096) * C116 + (C16095 + C16094) * C47850) * C15891 +
           ((C17006 + C17007) * C116 + (C17008 + C17009) * C47850) * C47945) *
              C47647 * C1012 -
          (((C17010 + C17011) * C47850 + (C17012 + C17013) * C116) * C47945 +
           ((C17009 + C17008) * C47850 + (C17007 + C17006) * C116) * C15891) *
              C47647 * C1013 +
          (((C17013 + C17012) * C116 + (C17011 + C17010) * C47850) * C15891 +
           ((C15893 * C5675 + C15889 * C5677 + C15894 * C5676 +
             C47914 * C5678) *
                C116 +
            (C15893 * C5679 + C15889 * C5681 + C15894 * C5680 +
             C47914 * C5682) *
                C47850) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47688 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47695 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47647 * C2700) *
              C47606 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            C22710 * C21566) *
               C47647 * C47695 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47688 -
           ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
            C21752 * C21564) *
               C47647 * C2700) *
              C47615 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C47688 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47695 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C47896 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C47688 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C47896) *
               C47695 +
           ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
                C47896 -
            ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
             C22578 * C21564) *
                C47734) *
               C2700) *
              C2440 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C47896) *
               C47688 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C47896 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C47695 +
           ((C22865 * C21564 + (C22873 + C22872) * C21565 +
             ((C21567 * C6376 + C47574 * C6378) * C116 +
              (C21567 * C6380 + C47574 * C6382) * C47850) *
                 C21566) *
                C47734 -
            ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
             C21752 * C21564) *
                C47896) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47973 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47969 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47647 * C47959 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C47647 * C47937) *
              C2440 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            C22710 * C21566) *
               C47647 * C47969 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47973 -
           ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
            C21752 * C21564) *
               C47647 * C47959 +
           (C22710 * C21564 + (C22718 + C22717) * C21565 +
            ((C21567 * C5676 + C47574 * C5678) * C116 +
             (C21567 * C5680 + C47574 * C5682) * C47850) *
                C21566) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C2332 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47692) *
              C47972 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            C22710 * C21566) *
               C47647 * C47692 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C2332) *
              C47965 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C2332 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47692) *
              C47952 +
          (((C21974 + C21975) * C21564 + (C21976 + C21977) * C21565 +
            ((C21567 * C1290 + C47574 * C1291) * C116 +
             (C21567 * C1292 + C47574 * C1293) * C47850) *
                C21566) *
               C47647 * C47692 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C47967 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47956 +
            (((C21567 * C417 + C47574 * C430) * C116 +
              (C21567 * C433 + C47574 * C447) * C47850) *
                 C21564 +
             (C22603 + C22604) * C21565 + C22611 * C21566) *
                C47930) *
               C2332 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C47956 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C47967 -
            ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
             (C22604 + C22603) * C21564) *
                C47930) *
               C47692) *
              C2440 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47956 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C47967 -
            ((C23429 + C23430) * C21566 + (C23431 + C23432) * C21565 +
             ((C21567 * C434 + C47574 * C448) * C47850 +
              (C21567 * C418 + C47574 * C431) * C116) *
                 C21564) *
                C47930) *
               C2332 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C47967 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47956 +
            ((C23432 + C23431) * C21564 + (C23430 + C23429) * C21565 +
             ((C21567 * C5854 + C47574 * C5856) * C116 +
              (C21567 * C5858 + C47574 * C5860) * C47850) *
                 C21566) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C116 +
                       (C21567 * C127 + C47574 * C138) * C47850) *
                          C21564 +
                      (C21733 + C21734) * C21565 + C21751 * C21566) *
                         C47896 -
                     (C22578 * C21566 + (C22260 + C22261) * C21565 +
                      ((C21567 * C426 + C47574 * C446) * C47850 +
                       (C21567 * C416 + C47574 * C429) * C116) *
                          C21564) *
                         C47734) *
                        C2332 +
                    (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
                      C22976 * C21566) *
                         C47734 -
                     (C22446 * C21566 + (C21736 + C21735) * C21565 +
                      (C21734 + C21733) * C21564) *
                         C47896) *
                        C47692) *
                       C47606 +
                   (((((C21567 * C415 + C47574 * C428) * C116 +
                       (C21567 * C425 + C47574 * C445) * C47850) *
                          C21564 +
                      (C22262 + C22263) * C21565 + C22865 * C21566) *
                         C47734 -
                     (C21752 * C21566 + (C21740 + C21739) * C21565 +
                      ((C21567 * C128 + C47574 * C139) * C47850 +
                       (C21567 * C118 + C47574 * C125) * C116) *
                          C21564) *
                         C47896) *
                        C2332 +
                    (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
                      C22710 * C21566) *
                         C47896 -
                     ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
                      (C22263 + C22262) * C21564) *
                         C47734) *
                        C47692) *
                       C47615 +
                   (((((C21567 * C119 + C47574 * C126) * C116 +
                       (C21567 * C129 + C47574 * C140) * C47850) *
                          C21564 +
                      (C21745 + C21746) * C21565 + C21753 * C21566) *
                         C47896 -
                     ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
                      ((C21567 * C424 + C47574 * C444) * C47850 +
                       (C21567 * C414 + C47574 * C427) * C116) *
                          C21564) *
                         C47734) *
                        C2332 +
                    (((C22269 + C22268) * C21564 + (C22267 + C22266) * C21565 +
                      ((C21567 * C1544 + C47574 * C1547) * C116 +
                       (C21567 * C1550 + C47574 * C1553) * C47850) *
                          C21566) *
                         C47734 -
                     ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
                      (C21746 + C21745) * C21564) *
                         C47896) *
                        C47692) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C2332 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47692) *
              C47972 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            C22710 * C21566) *
               C47647 * C47692 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C2332) *
              C47965 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C2332 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47692) *
              C47952 +
          (((C21974 + C21975) * C21564 + (C21976 + C21977) * C21565 +
            ((C21567 * C1290 + C47574 * C1291) * C116 +
             (C21567 * C1292 + C47574 * C1293) * C47850) *
                C21566) *
               C47647 * C47692 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47973 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47969 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47647 * C47959 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C47647 * C47937) *
              C2440 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            C22710 * C21566) *
               C47647 * C47969 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47973 -
           ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
            C21752 * C21564) *
               C47647 * C47959 +
           (C22710 * C21564 + (C22718 + C22717) * C21565 +
            ((C21567 * C5676 + C47574 * C5678) * C116 +
             (C21567 * C5680 + C47574 * C5682) * C47850) *
                C21566) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C3094 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C47688 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C3094) *
               C47695 +
           ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
                C3094 -
            ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
             C22578 * C21564) *
                C47734) *
               C2700) *
              C47881 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C3094) *
               C47688 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C3094 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C47695 +
           ((C22865 * C21564 + (C22873 + C22872) * C21565 +
             ((C21567 * C6376 + C47574 * C6378) * C116 +
              (C21567 * C6380 + C47574 * C6382) * C47850) *
                 C21566) *
                C47734 -
            ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
             C21752 * C21564) *
                C3094) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47730 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47737 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C3602) *
              C47688 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C47737 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47730 -
           ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
            (C22604 + C22603) * C21564) *
               C3602) *
              C47695 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47730 -
           ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
            C22578 * C21564) *
               C47737 +
           (C22611 * C21564 + (C22610 + C22609) * C21565 +
            ((C21567 * C22573 + C47574 * C22574) * C116 +
             (C21567 * C22575 + C47574 * C22576) * C47850) *
                C21566) *
               C3602) *
              C2700) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C3094 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C47973 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C47734 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C3094) *
              C47969 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C3094 -
           ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
            C22578 * C21564) *
               C47734) *
              C47959 +
          ((C22976 * C21564 + (C22984 + C22983) * C21565 +
            ((C21567 * C22971 + C47574 * C22972) * C116 +
             (C21567 * C22973 + C47574 * C22974) * C47850) *
                C21566) *
               C47734 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C3094 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C2332 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C3094) *
               C47692) *
              C47963 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C3094) *
               C2332 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C3094 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C47692) *
              C47950 +
          (((((C21567 * C119 + C47574 * C126) * C116 +
              (C21567 * C129 + C47574 * C140) * C47850) *
                 C21564 +
             (C21745 + C21746) * C21565 + C21753 * C21566) *
                C3094 -
            ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
             ((C21567 * C424 + C47574 * C444) * C47850 +
              (C21567 * C414 + C47574 * C427) * C116) *
                 C21564) *
                C47734) *
               C2332 +
           (((C22269 + C22268) * C21564 + (C22267 + C22266) * C21565 +
             ((C21567 * C1544 + C47574 * C1547) * C116 +
              (C21567 * C1550 + C47574 * C1553) * C47850) *
                 C21566) *
                C47734 -
            ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
             (C21746 + C21745) * C21564) *
                C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47974 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47971 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47962 -
           ((C23645 + C23646) * C21566 + (C23647 + C23648) * C21565 +
            ((C21567 * C1852 + C47574 * C1864) * C47850 +
             (C21567 * C1846 + C47574 * C1855) * C116) *
                C21564) *
               C47943) *
              C2332 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C47971 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47974 -
           ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
            (C22604 + C22603) * C21564) *
               C47962 +
           ((C23648 + C23647) * C21564 + (C23646 + C23645) * C21565 +
            ((C21567 * C23628 + C47574 * C23629) * C116 +
             (C21567 * C23630 + C47574 * C23631) * C47850) *
                C21566) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C116 +
                       (C21567 * C127 + C47574 * C138) * C47850) *
                          C21564 +
                      (C21733 + C21734) * C21565 + C21751 * C21566) *
                         C47730 -
                     (C22578 * C21566 + (C22260 + C22261) * C21565 +
                      ((C21567 * C426 + C47574 * C446) * C47850 +
                       (C21567 * C416 + C47574 * C429) * C116) *
                          C21564) *
                         C47737 +
                     (((C21567 * C417 + C47574 * C430) * C116 +
                       (C21567 * C433 + C47574 * C447) * C47850) *
                          C21564 +
                      (C22603 + C22604) * C21565 + C22611 * C21566) *
                         C3602) *
                        C2332 +
                    (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
                      C22976 * C21566) *
                         C47737 -
                     (C22446 * C21566 + (C21736 + C21735) * C21565 +
                      (C21734 + C21733) * C21564) *
                         C47730 -
                     ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
                      (C22604 + C22603) * C21564) *
                         C3602) *
                        C47692) *
                       C47881 +
                   (((((C21567 * C415 + C47574 * C428) * C116 +
                       (C21567 * C425 + C47574 * C445) * C47850) *
                          C21564 +
                      (C22262 + C22263) * C21565 + C22865 * C21566) *
                         C47737 -
                     (C21752 * C21566 + (C21740 + C21739) * C21565 +
                      ((C21567 * C128 + C47574 * C139) * C47850 +
                       (C21567 * C118 + C47574 * C125) * C116) *
                          C21564) *
                         C47730 -
                     ((C23429 + C23430) * C21566 + (C23431 + C23432) * C21565 +
                      ((C21567 * C434 + C47574 * C448) * C47850 +
                       (C21567 * C418 + C47574 * C431) * C116) *
                          C21564) *
                         C3602) *
                        C2332 +
                    (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
                      C22710 * C21566) *
                         C47730 -
                     ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
                      (C22263 + C22262) * C21564) *
                         C47737 +
                     ((C23432 + C23431) * C21564 + (C23430 + C23429) * C21565 +
                      ((C21567 * C5854 + C47574 * C5856) * C116 +
                       (C21567 * C5858 + C47574 * C5860) * C47850) *
                          C21566) *
                         C3602) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C3094 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C2332 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C3094) *
               C47692) *
              C47963 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C3094) *
               C2332 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C3094 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C47692) *
              C47950 +
          (((((C21567 * C119 + C47574 * C126) * C116 +
              (C21567 * C129 + C47574 * C140) * C47850) *
                 C21564 +
             (C21745 + C21746) * C21565 + C21753 * C21566) *
                C3094 -
            ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
             ((C21567 * C424 + C47574 * C444) * C47850 +
              (C21567 * C414 + C47574 * C427) * C116) *
                 C21564) *
                C47734) *
               C2332 +
           (((C22269 + C22268) * C21564 + (C22267 + C22266) * C21565 +
             ((C21567 * C1544 + C47574 * C1547) * C116 +
              (C21567 * C1550 + C47574 * C1553) * C47850) *
                 C21566) *
                C47734 -
            ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
             (C21746 + C21745) * C21564) *
                C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C3094 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C47973 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C47734 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C3094) *
              C47969 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C3094 -
           ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
            C22578 * C21564) *
               C47734) *
              C47959 +
          ((C22976 * C21564 + (C22984 + C22983) * C21565 +
            ((C21567 * C22971 + C47574 * C22972) * C116 +
             (C21567 * C22973 + C47574 * C22974) * C47850) *
                C21566) *
               C47734 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C1284 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C1285 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47647 * C1286 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C47647 * C47937) *
              C47881 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            C22710 * C21566) *
               C47647 * C1285 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C1284 -
           ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
            C21752 * C21564) *
               C47647 * C1286 +
           (C22710 * C21564 + (C22718 + C22717) * C21565 +
            ((C21567 * C5676 + C47574 * C5678) * C116 +
             (C21567 * C5680 + C47574 * C5682) * C47850) *
                C21566) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47895 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47692) *
              C554 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C47692 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47895) *
              C555 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C47895 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47692) *
              C556 +
          (((C21974 + C21975) * C21564 + (C21976 + C21977) * C21565 +
            ((C21567 * C1290 + C47574 * C1291) * C116 +
             (C21567 * C1292 + C47574 * C1293) * C47850) *
                C21566) *
               C47647 * C47692 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C1664 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C1665 +
            (((C21567 * C417 + C47574 * C430) * C116 +
              (C21567 * C433 + C47574 * C447) * C47850) *
                 C21564 +
             (C22603 + C22604) * C21565 + C22611 * C21566) *
                C47930) *
               C47895 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C1665 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C1664 -
            ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
             (C22604 + C22603) * C21564) *
                C47930) *
               C47692) *
              C47881 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C1665 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C1664 -
            ((C23429 + C23430) * C21566 + (C23431 + C23432) * C21565 +
             ((C21567 * C434 + C47574 * C448) * C47850 +
              (C21567 * C418 + C47574 * C431) * C116) *
                 C21564) *
                C47930) *
               C47895 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C1664 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C1665 +
            ((C23432 + C23431) * C21564 + (C23430 + C23429) * C21565 +
             ((C21567 * C5854 + C47574 * C5856) * C116 +
              (C21567 * C5858 + C47574 * C5860) * C47850) *
                 C21566) *
                C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47896 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C1284 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C47734 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47896) *
              C1285 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47896 -
           ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
            C22578 * C21564) *
               C47734) *
              C1286 +
          ((C22976 * C21564 + (C22984 + C22983) * C21565 +
            ((C21567 * C22971 + C47574 * C22972) * C116 +
             (C21567 * C22973 + C47574 * C22974) * C47850) *
                C21566) *
               C47734 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C47896 -
            ((C22258 + C22259) * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C47895 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             ((C21567 * C1542 + C47574 * C1545) * C116 +
              (C21567 * C1548 + C47574 * C1551) * C47850) *
                 C21566) *
                C47734 -
            ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C47896) *
               C47692) *
              C258 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + (C22264 + C22265) * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C47896) *
               C47895 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             (C21743 + C21744) * C21566) *
                C47896 -
            (((C21567 * C1549 + C47574 * C1552) * C47850 +
              (C21567 * C1543 + C47574 * C1546) * C116) *
                 C21566 +
             (C22265 + C22264) * C21565 + (C22263 + C22262) * C21564) *
                C47734) *
               C47692) *
              C259 +
          (((((C21567 * C119 + C47574 * C126) * C116 +
              (C21567 * C129 + C47574 * C140) * C47850) *
                 C21564 +
             (C21745 + C21746) * C21565 + C21753 * C21566) *
                C47896 -
            ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
             ((C21567 * C424 + C47574 * C444) * C47850 +
              (C21567 * C414 + C47574 * C427) * C116) *
                 C21564) *
                C47734) *
               C47895 +
           (((C22269 + C22268) * C21564 + (C22267 + C22266) * C21565 +
             ((C21567 * C1544 + C47574 * C1547) * C116 +
              (C21567 * C1550 + C47574 * C1553) * C47850) *
                 C21566) *
                C47734 -
            ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
             (C21746 + C21745) * C21564) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C2116 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C2117 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C2118 -
           ((C23645 + C23646) * C21566 + (C23647 + C23648) * C21565 +
            ((C21567 * C1852 + C47574 * C1864) * C47850 +
             (C21567 * C1846 + C47574 * C1855) * C116) *
                C21564) *
               C47943) *
              C47895 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C2117 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C2116 -
           ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
            (C22604 + C22603) * C21564) *
               C2118 +
           ((C23648 + C23647) * C21564 + (C23646 + C23645) * C21565 +
            ((C21567 * C23628 + C47574 * C23629) * C116 +
             (C21567 * C23630 + C47574 * C23631) * C47850) *
                C21566) *
               C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21567 * C117 + C47574 * C124) * C116 +
                (C21567 * C127 + C47574 * C138) * C47850) *
                   C21564 +
               ((C21567 * C263 + C47574 * C276) * C116 +
                (C21567 * C273 + C47574 * C293) * C47850) *
                   C21565 +
               ((C21567 * C264 + C47574 * C277) * C116 +
                (C21567 * C280 + C47574 * C294) * C47850) *
                   C21566) *
                  C47647 * C47629 * C108 -
              (((C21567 * C281 + C47574 * C295) * C47850 +
                (C21567 * C265 + C47574 * C278) * C116) *
                   C21566 +
               ((C21567 * C272 + C47574 * C292) * C47850 +
                (C21567 * C262 + C47574 * C275) * C116) *
                   C21565 +
               ((C21567 * C128 + C47574 * C139) * C47850 +
                (C21567 * C118 + C47574 * C125) * C116) *
                   C21564) *
                  C47647 * C47629 * C109 +
              (((C21567 * C119 + C47574 * C126) * C116 +
                (C21567 * C129 + C47574 * C140) * C47850) *
                   C21564 +
               ((C21567 * C261 + C47574 * C274) * C116 +
                (C21567 * C271 + C47574 * C291) * C47850) *
                   C21565 +
               ((C21567 * C266 + C47574 * C279) * C116 +
                (C21567 * C282 + C47574 * C296) * C47850) *
                   C21566) *
                  C47647 * C47629 * C110 -
              (((C21567 * C285 + C47574 * C298) * C47850 +
                (C21567 * C268 + C47574 * C286) * C116) *
                   C21566 +
               ((C21567 * C284 + C47574 * C297) * C47850 +
                (C21567 * C267 + C47574 * C283) * C116) *
                   C21565 +
               ((C21567 * C130 + C47574 * C141) * C47850 +
                (C21567 * C120 + C47574 * C131) * C116) *
                   C21564) *
                  C47647 * C47629 * C111 +
              (((C21567 * C121 + C47574 * C132) * C116 +
                (C21567 * C133 + C47574 * C142) * C47850) *
                   C21564 +
               ((C21567 * C269 + C47574 * C288) * C116 +
                (C21567 * C287 + C47574 * C299) * C47850) *
                   C21565 +
               ((C21567 * C270 + C47574 * C289) * C116 +
                (C21567 * C290 + C47574 * C300) * C47850) *
                   C21566) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21567 * C117 + C47574 * C124) * C116 +
                 (C21567 * C127 + C47574 * C138) * C47850) *
                    C21564 +
                (C21733 + C21734) * C21565 + C21751 * C21566) *
                   C47647 * C47966 -
               ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
                (C21734 + C21733) * C21564) *
                   C47647 * C47954 +
               (C21751 * C21564 + (C21738 + C21737) * C21565 +
                ((C21567 * C1019 + C47574 * C1028) * C116 +
                 (C21567 * C1031 + C47574 * C1037) * C47850) *
                    C21566) *
                   C47647 * C47927) *
                  C258 +
              (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
                (C21743 + C21744) * C21566) *
                   C47647 * C47954 -
               (C21752 * C21566 + (C21740 + C21739) * C21565 +
                ((C21567 * C128 + C47574 * C139) * C47850 +
                 (C21567 * C118 + C47574 * C125) * C116) *
                    C21564) *
                   C47647 * C47966 -
               (((C21567 * C1032 + C47574 * C1038) * C47850 +
                 (C21567 * C1020 + C47574 * C1029) * C116) *
                    C21566 +
                (C21744 + C21743) * C21565 + C21752 * C21564) *
                   C47647 * C47927) *
                  C259 +
              ((((C21567 * C119 + C47574 * C126) * C116 +
                 (C21567 * C129 + C47574 * C140) * C47850) *
                    C21564 +
                (C21745 + C21746) * C21565 + C21753 * C21566) *
                   C47647 * C47966 -
               ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
                (C21746 + C21745) * C21564) *
                   C47647 * C47954 +
               (C21753 * C21564 + (C21750 + C21749) * C21565 +
                ((C21567 * C1021 + C47574 * C1030) * C116 +
                 (C21567 * C1033 + C47574 * C1039) * C47850) *
                    C21566) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21567 * C117 + C47574 * C124) * C116 +
                                 (C21567 * C127 + C47574 * C138) * C47850) *
                                    C21564 +
                                (C21733 + C21734) * C21565 + C21751 * C21566) *
                                   C47967 -
                               (((C21567 * C1167 + C47574 * C1182) * C47850 +
                                 (C21567 * C1155 + C47574 * C1170) * C116) *
                                    C21566 +
                                ((C21567 * C820 + C47574 * C827) * C47850 +
                                 (C21567 * C812 + C47574 * C817) * C116) *
                                    C21565 +
                                ((C21567 * C426 + C47574 * C446) * C47850 +
                                 (C21567 * C416 + C47574 * C429) * C116) *
                                    C21564) *
                                   C47956 +
                               (((C21567 * C417 + C47574 * C430) * C116 +
                                 (C21567 * C433 + C47574 * C447) * C47850) *
                                    C21564 +
                                ((C21567 * C1152 + C47574 * C1164) * C116 +
                                 (C21567 * C1161 + C47574 * C1179) * C47850) *
                                    C21565 +
                                ((C21567 * C1156 + C47574 * C1171) * C116 +
                                 (C21567 * C1174 + C47574 * C1183) * C47850) *
                                    C21566) *
                                   C47930) *
                                  C47629 * C258 +
                              ((((C21567 * C415 + C47574 * C428) * C116 +
                                 (C21567 * C425 + C47574 * C445) * C47850) *
                                    C21564 +
                                ((C21567 * C813 + C47574 * C818) * C116 +
                                 (C21567 * C821 + C47574 * C828) * C47850) *
                                    C21565 +
                                ((C21567 * C1154 + C47574 * C1169) * C116 +
                                 (C21567 * C1166 + C47574 * C1181) * C47850) *
                                    C21566) *
                                   C47956 -
                               (C21752 * C21566 + (C21740 + C21739) * C21565 +
                                ((C21567 * C128 + C47574 * C139) * C47850 +
                                 (C21567 * C118 + C47574 * C125) * C116) *
                                    C21564) *
                                   C47967 -
                               (((C21567 * C1175 + C47574 * C1184) * C47850 +
                                 (C21567 * C1157 + C47574 * C1172) * C116) *
                                    C21566 +
                                ((C21567 * C1160 + C47574 * C1178) * C47850 +
                                 (C21567 * C1151 + C47574 * C1163) * C116) *
                                    C21565 +
                                ((C21567 * C434 + C47574 * C448) * C47850 +
                                 (C21567 * C418 + C47574 * C431) * C116) *
                                    C21564) *
                                   C47930) *
                                  C47629 * C259 +
                              ((((C21567 * C119 + C47574 * C126) * C116 +
                                 (C21567 * C129 + C47574 * C140) * C47850) *
                                    C21564 +
                                (C21745 + C21746) * C21565 + C21753 * C21566) *
                                   C47967 -
                               (((C21567 * C1165 + C47574 * C1180) * C47850 +
                                 (C21567 * C1153 + C47574 * C1168) * C116) *
                                    C21566 +
                                ((C21567 * C822 + C47574 * C829) * C47850 +
                                 (C21567 * C814 + C47574 * C819) * C116) *
                                    C21565 +
                                ((C21567 * C424 + C47574 * C444) * C47850 +
                                 (C21567 * C414 + C47574 * C427) * C116) *
                                    C21564) *
                                   C47956 +
                               (((C21567 * C419 + C47574 * C432) * C116 +
                                 (C21567 * C435 + C47574 * C449) * C47850) *
                                    C21564 +
                                ((C21567 * C1150 + C47574 * C1162) * C116 +
                                 (C21567 * C1159 + C47574 * C1177) * C47850) *
                                    C21565 +
                                ((C21567 * C1158 + C47574 * C1173) * C116 +
                                 (C21567 * C1176 + C47574 * C1185) * C47850) *
                                    C21566) *
                                   C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C942 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C943 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 +
            ((C21567 * C1019 + C47574 * C1028) * C116 +
             (C21567 * C1031 + C47574 * C1037) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47963 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C943 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C942 -
           (((C21567 * C1032 + C47574 * C1038) * C47850 +
             (C21567 * C1020 + C47574 * C1029) * C116) *
                C21566 +
            (C21744 + C21743) * C21565 + C21752 * C21564) *
               C47647 * C47927) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C942 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C943 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           (C21733 + C21734) * C21565 + C21751 * C21566) *
              C47647 * C1010 -
          (C22446 * C21566 + (C21736 + C21735) * C21565 +
           (C21734 + C21733) * C21564) *
              C47647 * C1011 +
          (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
              C47647 * C1012 -
          ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
           C22446 * C21564) *
              C47647 * C1013 +
          (C22463 * C21564 + (C22462 + C22461) * C21565 +
           ((C21567 * C22441 + C47574 * C22442) * C116 +
            (C21567 * C22443 + C47574 * C22444) * C47850) *
               C21566) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47967 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47956 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47930) *
              C942 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            (C22607 + C22608) * C21566) *
               C47956 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47967 -
           ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
            (C22604 + C22603) * C21564) *
               C47930) *
              C943 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47967 -
           (((C21567 * C6379 + C47574 * C6381) * C47850 +
             (C21567 * C6375 + C47574 * C6377) * C116) *
                C21566 +
            (C22608 + C22607) * C21565 + C22578 * C21564) *
               C47956 +
           (C22611 * C21564 + (C22610 + C22609) * C21565 +
            ((C21567 * C22573 + C47574 * C22574) * C116 +
             (C21567 * C22575 + C47574 * C22576) * C47850) *
                C21566) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C1664 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C1665 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47930) *
              C47629 * C47963 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            (C22262 + C22263) * C21565 + C22865 * C21566) *
               C1665 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C1664 -
           (((C21567 * C1175 + C47574 * C1184) * C47850 +
             (C21567 * C1157 + C47574 * C1172) * C116) *
                C21566 +
            ((C21567 * C1160 + C47574 * C1178) * C47850 +
             (C21567 * C1151 + C47574 * C1163) * C116) *
                C21565 +
            ((C21567 * C434 + C47574 * C448) * C47850 +
             (C21567 * C418 + C47574 * C431) * C116) *
                C21564) *
               C47930) *
              C47629 * C47950 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C1664 -
           ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
            ((C21567 * C424 + C47574 * C444) * C47850 +
             (C21567 * C414 + C47574 * C427) * C116) *
                C21564) *
               C1665 +
           (((C21567 * C419 + C47574 * C432) * C116 +
             (C21567 * C435 + C47574 * C449) * C47850) *
                C21564 +
            ((C21567 * C1150 + C47574 * C1162) * C116 +
             (C21567 * C1159 + C47574 * C1177) * C47850) *
                C21565 +
            ((C21567 * C1158 + C47574 * C1173) * C116 +
             (C21567 * C1176 + C47574 * C1185) * C47850) *
                C21566) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C1664 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C1665 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47930) *
              C47966 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C1665 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C1664 -
           ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
            (C22604 + C22603) * C21564) *
               C47930) *
              C47954 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C1664 -
           ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
            C22578 * C21564) *
               C1665 +
           (C22611 * C21564 + (C22610 + C22609) * C21565 +
            ((C21567 * C22573 + C47574 * C22574) * C116 +
             (C21567 * C22575 + C47574 * C22576) * C47850) *
                C21566) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           (C21733 + C21734) * C21565 + C21751 * C21566) *
              C1839 -
          (C22578 * C21566 + (C22260 + C22261) * C21565 +
           ((C21567 * C426 + C47574 * C446) * C47850 +
            (C21567 * C416 + C47574 * C429) * C116) *
               C21564) *
              C1840 +
          (((C21567 * C417 + C47574 * C430) * C116 +
            (C21567 * C433 + C47574 * C447) * C47850) *
               C21564 +
           (C22603 + C22604) * C21565 + C22611 * C21566) *
              C1841 -
          (((C21567 * C7247 + C47574 * C7249) * C47850 +
            (C21567 * C7243 + C47574 * C7245) * C116) *
               C21566 +
           ((C21567 * C2228 + C47574 * C2231) * C47850 +
            (C21567 * C2222 + C47574 * C2225) * C116) *
               C21565 +
           ((C21567 * C1852 + C47574 * C1864) * C47850 +
            (C21567 * C1846 + C47574 * C1855) * C116) *
               C21564) *
              C1842 +
          (((C21567 * C1847 + C47574 * C1856) * C116 +
            (C21567 * C1859 + C47574 * C1865) * C47850) *
               C21564 +
           ((C21567 * C6769 + C47574 * C6771) * C116 +
            (C21567 * C6773 + C47574 * C6775) * C47850) *
               C21565 +
           ((C21567 * C23266 + C47574 * C23267) * C116 +
            (C21567 * C23268 + C47574 * C23269) * C47850) *
               C21566) *
              C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C47896 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C942 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             (C22607 + C22608) * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C47896) *
               C943 +
           ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
                C47896 -
            (((C21567 * C6379 + C47574 * C6381) * C47850 +
              (C21567 * C6375 + C47574 * C6377) * C116) *
                 C21566 +
             (C22608 + C22607) * C21565 + C22578 * C21564) *
                C47734) *
               C47927) *
              C47881 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C47896) *
               C942 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C47896 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C943 +
           ((C22865 * C21564 + (C22873 + C22872) * C21565 +
             ((C21567 * C6376 + C47574 * C6378) * C116 +
              (C21567 * C6380 + C47574 * C6382) * C47850) *
                 C21566) *
                C47734 -
            ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
             C21752 * C21564) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47896 -
           (((C21567 * C1167 + C47574 * C1182) * C47850 +
             (C21567 * C1155 + C47574 * C1170) * C116) *
                C21566 +
            ((C21567 * C820 + C47574 * C827) * C47850 +
             (C21567 * C812 + C47574 * C817) * C116) *
                C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C47629 * C554 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            ((C21567 * C813 + C47574 * C818) * C116 +
             (C21567 * C821 + C47574 * C828) * C47850) *
                C21565 +
            ((C21567 * C1154 + C47574 * C1169) * C116 +
             (C21567 * C1166 + C47574 * C1181) * C47850) *
                C21566) *
               C47734 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47896) *
              C47629 * C555 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47896 -
           (((C21567 * C1165 + C47574 * C1180) * C47850 +
             (C21567 * C1153 + C47574 * C1168) * C116) *
                C21566 +
            ((C21567 * C822 + C47574 * C829) * C47850 +
             (C21567 * C814 + C47574 * C819) * C116) *
                C21565 +
            ((C21567 * C424 + C47574 * C444) * C47850 +
             (C21567 * C414 + C47574 * C427) * C116) *
                C21564) *
               C47734) *
              C47629 * C556 +
          ((((C21567 * C420 + C47574 * C436) * C116 +
             (C21567 * C437 + C47574 * C450) * C47850) *
                C21564 +
            ((C21567 * C815 + C47574 * C824) * C116 +
             (C21567 * C823 + C47574 * C830) * C47850) *
                C21565 +
            ((C21567 * C1440 + C47574 * C1441) * C116 +
             (C21567 * C1442 + C47574 * C1443) * C47850) *
                C21566) *
               C47734 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C2116 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C2117 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C2118 -
           (((C21567 * C7247 + C47574 * C7249) * C47850 +
             (C21567 * C7243 + C47574 * C7245) * C116) *
                C21566 +
            ((C21567 * C2228 + C47574 * C2231) * C47850 +
             (C21567 * C2222 + C47574 * C2225) * C116) *
                C21565 +
            ((C21567 * C1852 + C47574 * C1864) * C47850 +
             (C21567 * C1846 + C47574 * C1855) * C116) *
                C21564) *
               C47943) *
              C47629 * C47881 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            (C22262 + C22263) * C21565 + C22865 * C21566) *
               C2117 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C2116 -
           ((C23429 + C23430) * C21566 + (C23431 + C23432) * C21565 +
            ((C21567 * C434 + C47574 * C448) * C47850 +
             (C21567 * C418 + C47574 * C431) * C116) *
                C21564) *
               C2118 +
           (((C21567 * C1845 + C47574 * C1854) * C116 +
             (C21567 * C1851 + C47574 * C1863) * C47850) *
                C21564 +
            ((C21567 * C2223 + C47574 * C2226) * C116 +
             (C21567 * C2229 + C47574 * C2232) * C47850) *
                C21565 +
            ((C21567 * C7244 + C47574 * C7246) * C116 +
             (C21567 * C7248 + C47574 * C7250) * C47850) *
                C21566) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47966 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47954 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 +
            ((C21567 * C1019 + C47574 * C1028) * C116 +
             (C21567 * C1031 + C47574 * C1037) * C47850) *
                C21566) *
               C47647 * C47927) *
              C258 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C47954 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47966 -
           (((C21567 * C1032 + C47574 * C1038) * C47850 +
             (C21567 * C1020 + C47574 * C1029) * C116) *
                C21566 +
            (C21744 + C21743) * C21565 + C21752 * C21564) *
               C47647 * C47927) *
              C259 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C47966 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47954 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           ((C21567 * C263 + C47574 * C276) * C116 +
            (C21567 * C273 + C47574 * C293) * C47850) *
               C21565 +
           ((C21567 * C264 + C47574 * C277) * C116 +
            (C21567 * C280 + C47574 * C294) * C47850) *
               C21566) *
              C47647 * C47629 * C108 -
          (((C21567 * C281 + C47574 * C295) * C47850 +
            (C21567 * C265 + C47574 * C278) * C116) *
               C21566 +
           ((C21567 * C272 + C47574 * C292) * C47850 +
            (C21567 * C262 + C47574 * C275) * C116) *
               C21565 +
           ((C21567 * C128 + C47574 * C139) * C47850 +
            (C21567 * C118 + C47574 * C125) * C116) *
               C21564) *
              C47647 * C47629 * C109 +
          (((C21567 * C119 + C47574 * C126) * C116 +
            (C21567 * C129 + C47574 * C140) * C47850) *
               C21564 +
           ((C21567 * C261 + C47574 * C274) * C116 +
            (C21567 * C271 + C47574 * C291) * C47850) *
               C21565 +
           ((C21567 * C266 + C47574 * C279) * C116 +
            (C21567 * C282 + C47574 * C296) * C47850) *
               C21566) *
              C47647 * C47629 * C110 -
          (((C21567 * C285 + C47574 * C298) * C47850 +
            (C21567 * C268 + C47574 * C286) * C116) *
               C21566 +
           ((C21567 * C284 + C47574 * C297) * C47850 +
            (C21567 * C267 + C47574 * C283) * C116) *
               C21565 +
           ((C21567 * C130 + C47574 * C141) * C47850 +
            (C21567 * C120 + C47574 * C131) * C116) *
               C21564) *
              C47647 * C47629 * C111 +
          (((C21567 * C121 + C47574 * C132) * C116 +
            (C21567 * C133 + C47574 * C142) * C47850) *
               C21564 +
           ((C21567 * C269 + C47574 * C288) * C116 +
            (C21567 * C287 + C47574 * C299) * C47850) *
               C21565 +
           ((C21567 * C270 + C47574 * C289) * C116 +
            (C21567 * C290 + C47574 * C300) * C47850) *
               C21566) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C942 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C943 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 +
            ((C21567 * C1019 + C47574 * C1028) * C116 +
             (C21567 * C1031 + C47574 * C1037) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47963 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C943 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C942 -
           (((C21567 * C1032 + C47574 * C1038) * C47850 +
             (C21567 * C1020 + C47574 * C1029) * C116) *
                C21566 +
            (C21744 + C21743) * C21565 + C21752 * C21564) *
               C47647 * C47927) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C942 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C943 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           (C21733 + C21734) * C21565 + C21751 * C21566) *
              C47647 * C1010 -
          (C22446 * C21566 + (C21736 + C21735) * C21565 +
           (C21734 + C21733) * C21564) *
              C47647 * C1011 +
          (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
              C47647 * C1012 -
          ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
           C22446 * C21564) *
              C47647 * C1013 +
          (C22463 * C21564 + (C22462 + C22461) * C21565 +
           ((C21567 * C22441 + C47574 * C22442) * C116 +
            (C21567 * C22443 + C47574 * C22444) * C47850) *
               C21566) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C1664 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C1665 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47930) *
              C47629 * C47963 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            (C22262 + C22263) * C21565 + C22865 * C21566) *
               C1665 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C1664 -
           (((C21567 * C1175 + C47574 * C1184) * C47850 +
             (C21567 * C1157 + C47574 * C1172) * C116) *
                C21566 +
            ((C21567 * C1160 + C47574 * C1178) * C47850 +
             (C21567 * C1151 + C47574 * C1163) * C116) *
                C21565 +
            ((C21567 * C434 + C47574 * C448) * C47850 +
             (C21567 * C418 + C47574 * C431) * C116) *
                C21564) *
               C47930) *
              C47629 * C47950 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C1664 -
           ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
            ((C21567 * C424 + C47574 * C444) * C47850 +
             (C21567 * C414 + C47574 * C427) * C116) *
                C21564) *
               C1665 +
           (((C21567 * C419 + C47574 * C432) * C116 +
             (C21567 * C435 + C47574 * C449) * C47850) *
                C21564 +
            ((C21567 * C1150 + C47574 * C1162) * C116 +
             (C21567 * C1159 + C47574 * C1177) * C47850) *
                C21565 +
            ((C21567 * C1158 + C47574 * C1173) * C116 +
             (C21567 * C1176 + C47574 * C1185) * C47850) *
                C21566) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C1664 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C1665 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47930) *
              C47966 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C1665 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C1664 -
           ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
            (C22604 + C22603) * C21564) *
               C47930) *
              C47954 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C1664 -
           ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
            C22578 * C21564) *
               C1665 +
           (C22611 * C21564 + (C22610 + C22609) * C21565 +
            ((C21567 * C22573 + C47574 * C22574) * C116 +
             (C21567 * C22575 + C47574 * C22576) * C47850) *
                C21566) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C116 +
                       (C21567 * C127 + C47574 * C138) * C47850) *
                          C21564 +
                      (C21733 + C21734) * C21565 + C21751 * C21566) *
                         C3094 -
                     (C22578 * C21566 + (C22260 + C22261) * C21565 +
                      ((C21567 * C426 + C47574 * C446) * C47850 +
                       (C21567 * C416 + C47574 * C429) * C116) *
                          C21564) *
                         C47734) *
                        C47895 +
                    (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
                      C22976 * C21566) *
                         C47734 -
                     (C22446 * C21566 + (C21736 + C21735) * C21565 +
                      (C21734 + C21733) * C21564) *
                         C3094) *
                        C47692) *
                       C47606 +
                   (((((C21567 * C415 + C47574 * C428) * C116 +
                       (C21567 * C425 + C47574 * C445) * C47850) *
                          C21564 +
                      (C22262 + C22263) * C21565 + C22865 * C21566) *
                         C47734 -
                     (C21752 * C21566 + (C21740 + C21739) * C21565 +
                      ((C21567 * C128 + C47574 * C139) * C47850 +
                       (C21567 * C118 + C47574 * C125) * C116) *
                          C21564) *
                         C3094) *
                        C47895 +
                    (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
                      C22710 * C21566) *
                         C3094 -
                     ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
                      (C22263 + C22262) * C21564) *
                         C47734) *
                        C47692) *
                       C47615 +
                   (((((C21567 * C119 + C47574 * C126) * C116 +
                       (C21567 * C129 + C47574 * C140) * C47850) *
                          C21564 +
                      (C21745 + C21746) * C21565 + C21753 * C21566) *
                         C3094 -
                     ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
                      ((C21567 * C424 + C47574 * C444) * C47850 +
                       (C21567 * C414 + C47574 * C427) * C116) *
                          C21564) *
                         C47734) *
                        C47895 +
                    (((C22269 + C22268) * C21564 + (C22267 + C22266) * C21565 +
                      ((C21567 * C1544 + C47574 * C1547) * C116 +
                       (C21567 * C1550 + C47574 * C1553) * C47850) *
                          C21566) *
                         C47734 -
                     ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
                      (C21746 + C21745) * C21564) *
                         C3094) *
                        C47692) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C116 +
                       (C21567 * C127 + C47574 * C138) * C47850) *
                          C21564 +
                      (C21733 + C21734) * C21565 + C21751 * C21566) *
                         C47730 -
                     (C22578 * C21566 + (C22260 + C22261) * C21565 +
                      ((C21567 * C426 + C47574 * C446) * C47850 +
                       (C21567 * C416 + C47574 * C429) * C116) *
                          C21564) *
                         C47737 +
                     (((C21567 * C417 + C47574 * C430) * C116 +
                       (C21567 * C433 + C47574 * C447) * C47850) *
                          C21564 +
                      (C22603 + C22604) * C21565 + C22611 * C21566) *
                         C3602) *
                        C47895 +
                    (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
                      C22976 * C21566) *
                         C47737 -
                     (C22446 * C21566 + (C21736 + C21735) * C21565 +
                      (C21734 + C21733) * C21564) *
                         C47730 -
                     ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
                      (C22604 + C22603) * C21564) *
                         C3602) *
                        C47692) *
                       C2440 +
                   (((((C21567 * C415 + C47574 * C428) * C116 +
                       (C21567 * C425 + C47574 * C445) * C47850) *
                          C21564 +
                      (C22262 + C22263) * C21565 + C22865 * C21566) *
                         C47737 -
                     (C21752 * C21566 + (C21740 + C21739) * C21565 +
                      ((C21567 * C128 + C47574 * C139) * C47850 +
                       (C21567 * C118 + C47574 * C125) * C116) *
                          C21564) *
                         C47730 -
                     ((C23429 + C23430) * C21566 + (C23431 + C23432) * C21565 +
                      ((C21567 * C434 + C47574 * C448) * C47850 +
                       (C21567 * C418 + C47574 * C431) * C116) *
                          C21564) *
                         C3602) *
                        C47895 +
                    (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
                      C22710 * C21566) *
                         C47730 -
                     ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
                      (C22263 + C22262) * C21564) *
                         C47737 +
                     ((C23432 + C23431) * C21564 + (C23430 + C23429) * C21565 +
                      ((C21567 * C5854 + C47574 * C5856) * C116 +
                       (C21567 * C5858 + C47574 * C5860) * C47850) *
                          C21566) *
                         C3602) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C3094 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C47966 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C3094) *
               C47954 +
           ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
                C3094 -
            ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
             C22578 * C21564) *
                C47734) *
               C47927) *
              C2440 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C3094) *
               C47966 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C3094 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C47954 +
           ((C22865 * C21564 + (C22873 + C22872) * C21565 +
             ((C21567 * C6376 + C47574 * C6378) * C116 +
              (C21567 * C6380 + C47574 * C6382) * C47850) *
                 C21566) *
                C47734 -
            ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
             C21752 * C21564) *
                C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C3094 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C47629 * C47972 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            (C22262 + C22263) * C21565 + C22865 * C21566) *
               C47734 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C3094) *
              C47629 * C47965 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C3094 -
           ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
            ((C21567 * C424 + C47574 * C444) * C47850 +
             (C21567 * C414 + C47574 * C427) * C116) *
                C21564) *
               C47734) *
              C47629 * C47952 +
          ((((C21567 * C420 + C47574 * C436) * C116 +
             (C21567 * C437 + C47574 * C450) * C47850) *
                C21564 +
            ((C21567 * C815 + C47574 * C824) * C116 +
             (C21567 * C823 + C47574 * C830) * C47850) *
                C21565 +
            ((C21567 * C1440 + C47574 * C1441) * C116 +
             (C21567 * C1442 + C47574 * C1443) * C47850) *
                C21566) *
               C47734 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47974 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47971 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47962 -
           ((C23645 + C23646) * C21566 + (C23647 + C23648) * C21565 +
            ((C21567 * C1852 + C47574 * C1864) * C47850 +
             (C21567 * C1846 + C47574 * C1855) * C116) *
                C21564) *
               C47943) *
              C47629 * C2440 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            (C22262 + C22263) * C21565 + C22865 * C21566) *
               C47971 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47974 -
           ((C23429 + C23430) * C21566 + (C23431 + C23432) * C21565 +
            ((C21567 * C434 + C47574 * C448) * C47850 +
             (C21567 * C418 + C47574 * C431) * C116) *
                C21564) *
               C47962 +
           (((C21567 * C1845 + C47574 * C1854) * C116 +
             (C21567 * C1851 + C47574 * C1863) * C47850) *
                C21564 +
            ((C21567 * C2223 + C47574 * C2226) * C116 +
             (C21567 * C2229 + C47574 * C2232) * C47850) *
                C21565 +
            ((C21567 * C7244 + C47574 * C7246) * C116 +
             (C21567 * C7248 + C47574 * C7250) * C47850) *
                C21566) *
               C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C116 +
                      (C21567 * C127 + C47574 * C138) * C47850) *
                         C21564 +
                     (C21733 + C21734) * C21565 + C21751 * C21566) *
                        C47730 -
                    (C22578 * C21566 + (C22260 + C22261) * C21565 +
                     ((C21567 * C426 + C47574 * C446) * C47850 +
                      (C21567 * C416 + C47574 * C429) * C116) *
                         C21564) *
                        C47737 +
                    (((C21567 * C417 + C47574 * C430) * C116 +
                      (C21567 * C433 + C47574 * C447) * C47850) *
                         C21564 +
                     (C22603 + C22604) * C21565 + C22611 * C21566) *
                        C3602) *
                       C47629 * C47606 +
                   ((((C21567 * C415 + C47574 * C428) * C116 +
                      (C21567 * C425 + C47574 * C445) * C47850) *
                         C21564 +
                     (C22262 + C22263) * C21565 + C22865 * C21566) *
                        C47737 -
                    (C21752 * C21566 + (C21740 + C21739) * C21565 +
                     ((C21567 * C128 + C47574 * C139) * C47850 +
                      (C21567 * C118 + C47574 * C125) * C116) *
                         C21564) *
                        C47730 -
                    ((C23429 + C23430) * C21566 + (C23431 + C23432) * C21565 +
                     ((C21567 * C434 + C47574 * C448) * C47850 +
                      (C21567 * C418 + C47574 * C431) * C116) *
                         C21564) *
                        C3602) *
                       C47629 * C47615 +
                   ((((C21567 * C119 + C47574 * C126) * C116 +
                      (C21567 * C129 + C47574 * C140) * C47850) *
                         C21564 +
                     (C21745 + C21746) * C21565 + C21753 * C21566) *
                        C47730 -
                    ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
                     ((C21567 * C424 + C47574 * C444) * C47850 +
                      (C21567 * C414 + C47574 * C427) * C116) *
                         C21564) *
                        C47737 +
                    (((C21567 * C419 + C47574 * C432) * C116 +
                      (C21567 * C435 + C47574 * C449) * C47850) *
                         C21564 +
                     ((C21567 * C1150 + C47574 * C1162) * C116 +
                      (C21567 * C1159 + C47574 * C1177) * C47850) *
                         C21565 +
                     ((C21567 * C1158 + C47574 * C1173) * C116 +
                      (C21567 * C1176 + C47574 * C1185) * C47850) *
                         C21566) *
                        C3602) *
                       C47629 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C3094 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C47629 * C47972 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            (C22262 + C22263) * C21565 + C22865 * C21566) *
               C47734 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C3094) *
              C47629 * C47965 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C3094 -
           ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
            ((C21567 * C424 + C47574 * C444) * C47850 +
             (C21567 * C414 + C47574 * C427) * C116) *
                C21564) *
               C47734) *
              C47629 * C47952 +
          ((((C21567 * C420 + C47574 * C436) * C116 +
             (C21567 * C437 + C47574 * C450) * C47850) *
                C21564 +
            ((C21567 * C815 + C47574 * C824) * C116 +
             (C21567 * C823 + C47574 * C830) * C47850) *
                C21565 +
            ((C21567 * C1440 + C47574 * C1441) * C116 +
             (C21567 * C1442 + C47574 * C1443) * C47850) *
                C21566) *
               C47734 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C3094 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C47966 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             C22976 * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C3094) *
               C47954 +
           ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
                C3094 -
            ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
             C22578 * C21564) *
                C47734) *
               C47927) *
              C2440 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C3094) *
               C47966 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C3094 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C47954 +
           ((C22865 * C21564 + (C22873 + C22872) * C21565 +
             ((C21567 * C6376 + C47574 * C6378) * C116 +
              (C21567 * C6380 + C47574 * C6382) * C47850) *
                 C21566) *
                C47734 -
            ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
             C21752 * C21564) *
                C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47895 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47692) *
              C554 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C47692 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47895) *
              C555 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C47895 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47692) *
              C556 +
          (((C21974 + C21975) * C21564 + (C21976 + C21977) * C21565 +
            ((C21567 * C1290 + C47574 * C1291) * C116 +
             (C21567 * C1292 + C47574 * C1293) * C47850) *
                C21566) *
               C47647 * C47692 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C1284 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C1285 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47647 * C1286 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C47647 * C47937) *
              C47881 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            C22710 * C21566) *
               C47647 * C1285 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C1284 -
           ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
            C21752 * C21564) *
               C47647 * C1286 +
           (C22710 * C21564 + (C22718 + C22717) * C21565 +
            ((C21567 * C5676 + C47574 * C5678) * C116 +
             (C21567 * C5680 + C47574 * C5682) * C47850) *
                C21566) *
               C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C47896 -
            ((C22258 + C22259) * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C47895 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             ((C21567 * C1542 + C47574 * C1545) * C116 +
              (C21567 * C1548 + C47574 * C1551) * C47850) *
                 C21566) *
                C47734 -
            ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C47896) *
               C47692) *
              C258 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + (C22264 + C22265) * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C47896) *
               C47895 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             (C21743 + C21744) * C21566) *
                C47896 -
            (((C21567 * C1549 + C47574 * C1552) * C47850 +
              (C21567 * C1543 + C47574 * C1546) * C116) *
                 C21566 +
             (C22265 + C22264) * C21565 + (C22263 + C22262) * C21564) *
                C47734) *
               C47692) *
              C259 +
          (((((C21567 * C119 + C47574 * C126) * C116 +
              (C21567 * C129 + C47574 * C140) * C47850) *
                 C21564 +
             (C21745 + C21746) * C21565 + C21753 * C21566) *
                C47896 -
            ((C22266 + C22267) * C21566 + (C22268 + C22269) * C21565 +
             ((C21567 * C424 + C47574 * C444) * C47850 +
              (C21567 * C414 + C47574 * C427) * C116) *
                 C21564) *
                C47734) *
               C47895 +
           (((C22269 + C22268) * C21564 + (C22267 + C22266) * C21565 +
             ((C21567 * C1544 + C47574 * C1547) * C116 +
              (C21567 * C1550 + C47574 * C1553) * C47850) *
                 C21566) *
                C47734 -
            ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
             (C21746 + C21745) * C21564) *
                C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47896 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C1284 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            C22976 * C21566) *
               C47734 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47896) *
              C1285 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47896 -
           ((C22983 + C22984) * C21566 + (C22608 + C22607) * C21565 +
            C22578 * C21564) *
               C47734) *
              C1286 +
          ((C22976 * C21564 + (C22984 + C22983) * C21565 +
            ((C21567 * C22971 + C47574 * C22972) * C116 +
             (C21567 * C22973 + C47574 * C22974) * C47850) *
                C21566) *
               C47734 -
           ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
            C22446 * C21564) *
               C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47966 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47954 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 +
            ((C21567 * C1019 + C47574 * C1028) * C116 +
             (C21567 * C1031 + C47574 * C1037) * C47850) *
                C21566) *
               C47647 * C47927) *
              C258 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C47954 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47966 -
           (((C21567 * C1032 + C47574 * C1038) * C47850 +
             (C21567 * C1020 + C47574 * C1029) * C116) *
                C21566 +
            (C21744 + C21743) * C21565 + C21752 * C21564) *
               C47647 * C47927) *
              C259 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C47966 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47954 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           ((C21567 * C263 + C47574 * C276) * C116 +
            (C21567 * C273 + C47574 * C293) * C47850) *
               C21565 +
           ((C21567 * C264 + C47574 * C277) * C116 +
            (C21567 * C280 + C47574 * C294) * C47850) *
               C21566) *
              C47647 * C47629 * C108 -
          (((C21567 * C281 + C47574 * C295) * C47850 +
            (C21567 * C265 + C47574 * C278) * C116) *
               C21566 +
           ((C21567 * C272 + C47574 * C292) * C47850 +
            (C21567 * C262 + C47574 * C275) * C116) *
               C21565 +
           ((C21567 * C128 + C47574 * C139) * C47850 +
            (C21567 * C118 + C47574 * C125) * C116) *
               C21564) *
              C47647 * C47629 * C109 +
          (((C21567 * C119 + C47574 * C126) * C116 +
            (C21567 * C129 + C47574 * C140) * C47850) *
               C21564 +
           ((C21567 * C261 + C47574 * C274) * C116 +
            (C21567 * C271 + C47574 * C291) * C47850) *
               C21565 +
           ((C21567 * C266 + C47574 * C279) * C116 +
            (C21567 * C282 + C47574 * C296) * C47850) *
               C21566) *
              C47647 * C47629 * C110 -
          (((C21567 * C285 + C47574 * C298) * C47850 +
            (C21567 * C268 + C47574 * C286) * C116) *
               C21566 +
           ((C21567 * C284 + C47574 * C297) * C47850 +
            (C21567 * C267 + C47574 * C283) * C116) *
               C21565 +
           ((C21567 * C130 + C47574 * C141) * C47850 +
            (C21567 * C120 + C47574 * C131) * C116) *
               C21564) *
              C47647 * C47629 * C111 +
          (((C21567 * C121 + C47574 * C132) * C116 +
            (C21567 * C133 + C47574 * C142) * C47850) *
               C21564 +
           ((C21567 * C269 + C47574 * C288) * C116 +
            (C21567 * C287 + C47574 * C299) * C47850) *
               C21565 +
           ((C21567 * C270 + C47574 * C289) * C116 +
            (C21567 * C290 + C47574 * C300) * C47850) *
               C21566) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47967 -
           (((C21567 * C1167 + C47574 * C1182) * C47850 +
             (C21567 * C1155 + C47574 * C1170) * C116) *
                C21566 +
            ((C21567 * C820 + C47574 * C827) * C47850 +
             (C21567 * C812 + C47574 * C817) * C116) *
                C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47956 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            ((C21567 * C1152 + C47574 * C1164) * C116 +
             (C21567 * C1161 + C47574 * C1179) * C47850) *
                C21565 +
            ((C21567 * C1156 + C47574 * C1171) * C116 +
             (C21567 * C1174 + C47574 * C1183) * C47850) *
                C21566) *
               C47930) *
              C47629 * C258 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            ((C21567 * C813 + C47574 * C818) * C116 +
             (C21567 * C821 + C47574 * C828) * C47850) *
                C21565 +
            ((C21567 * C1154 + C47574 * C1169) * C116 +
             (C21567 * C1166 + C47574 * C1181) * C47850) *
                C21566) *
               C47956 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47967 -
           (((C21567 * C1175 + C47574 * C1184) * C47850 +
             (C21567 * C1157 + C47574 * C1172) * C116) *
                C21566 +
            ((C21567 * C1160 + C47574 * C1178) * C47850 +
             (C21567 * C1151 + C47574 * C1163) * C116) *
                C21565 +
            ((C21567 * C434 + C47574 * C448) * C47850 +
             (C21567 * C418 + C47574 * C431) * C116) *
                C21564) *
               C47930) *
              C47629 * C259 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47967 -
           (((C21567 * C1165 + C47574 * C1180) * C47850 +
             (C21567 * C1153 + C47574 * C1168) * C116) *
                C21566 +
            ((C21567 * C822 + C47574 * C829) * C47850 +
             (C21567 * C814 + C47574 * C819) * C116) *
                C21565 +
            ((C21567 * C424 + C47574 * C444) * C47850 +
             (C21567 * C414 + C47574 * C427) * C116) *
                C21564) *
               C47956 +
           (((C21567 * C419 + C47574 * C432) * C116 +
             (C21567 * C435 + C47574 * C449) * C47850) *
                C21564 +
            ((C21567 * C1150 + C47574 * C1162) * C116 +
             (C21567 * C1159 + C47574 * C1177) * C47850) *
                C21565 +
            ((C21567 * C1158 + C47574 * C1173) * C116 +
             (C21567 * C1176 + C47574 * C1185) * C47850) *
                C21566) *
               C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C942 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C943 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 +
            ((C21567 * C1019 + C47574 * C1028) * C116 +
             (C21567 * C1031 + C47574 * C1037) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47963 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C943 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C942 -
           (((C21567 * C1032 + C47574 * C1038) * C47850 +
             (C21567 * C1020 + C47574 * C1029) * C116) *
                C21566 +
            (C21744 + C21743) * C21565 + C21752 * C21564) *
               C47647 * C47927) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C942 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C943 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           (C21733 + C21734) * C21565 + C21751 * C21566) *
              C47647 * C1010 -
          (C22446 * C21566 + (C21736 + C21735) * C21565 +
           (C21734 + C21733) * C21564) *
              C47647 * C1011 +
          (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
              C47647 * C1012 -
          ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
           C22446 * C21564) *
              C47647 * C1013 +
          (C22463 * C21564 + (C22462 + C22461) * C21565 +
           ((C21567 * C22441 + C47574 * C22442) * C116 +
            (C21567 * C22443 + C47574 * C22444) * C47850) *
               C21566) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47967 -
           (C22578 * C21566 + (C22260 + C22261) * C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47956 +
           (((C21567 * C417 + C47574 * C430) * C116 +
             (C21567 * C433 + C47574 * C447) * C47850) *
                C21564 +
            (C22603 + C22604) * C21565 + C22611 * C21566) *
               C47930) *
              C942 +
          (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
            (C22607 + C22608) * C21566) *
               C47956 -
           (C22446 * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47967 -
           ((C22609 + C22610) * C21566 + (C22606 + C22605) * C21565 +
            (C22604 + C22603) * C21564) *
               C47930) *
              C943 +
          ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
               C47967 -
           (((C21567 * C6379 + C47574 * C6381) * C47850 +
             (C21567 * C6375 + C47574 * C6377) * C116) *
                C21566 +
            (C22608 + C22607) * C21565 + C22578 * C21564) *
               C47956 +
           (C22611 * C21564 + (C22610 + C22609) * C21565 +
            ((C21567 * C22573 + C47574 * C22574) * C116 +
             (C21567 * C22575 + C47574 * C22576) * C47850) *
                C21566) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47896 -
           (((C21567 * C1167 + C47574 * C1182) * C47850 +
             (C21567 * C1155 + C47574 * C1170) * C116) *
                C21566 +
            ((C21567 * C820 + C47574 * C827) * C47850 +
             (C21567 * C812 + C47574 * C817) * C116) *
                C21565 +
            ((C21567 * C426 + C47574 * C446) * C47850 +
             (C21567 * C416 + C47574 * C429) * C116) *
                C21564) *
               C47734) *
              C47629 * C554 +
          ((((C21567 * C415 + C47574 * C428) * C116 +
             (C21567 * C425 + C47574 * C445) * C47850) *
                C21564 +
            ((C21567 * C813 + C47574 * C818) * C116 +
             (C21567 * C821 + C47574 * C828) * C47850) *
                C21565 +
            ((C21567 * C1154 + C47574 * C1169) * C116 +
             (C21567 * C1166 + C47574 * C1181) * C47850) *
                C21566) *
               C47734 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47896) *
              C47629 * C555 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47896 -
           (((C21567 * C1165 + C47574 * C1180) * C47850 +
             (C21567 * C1153 + C47574 * C1168) * C116) *
                C21566 +
            ((C21567 * C822 + C47574 * C829) * C47850 +
             (C21567 * C814 + C47574 * C819) * C116) *
                C21565 +
            ((C21567 * C424 + C47574 * C444) * C47850 +
             (C21567 * C414 + C47574 * C427) * C116) *
                C21564) *
               C47734) *
              C47629 * C556 +
          ((((C21567 * C420 + C47574 * C436) * C116 +
             (C21567 * C437 + C47574 * C450) * C47850) *
                C21564 +
            ((C21567 * C815 + C47574 * C824) * C116 +
             (C21567 * C823 + C47574 * C830) * C47850) *
                C21565 +
            ((C21567 * C1440 + C47574 * C1441) * C116 +
             (C21567 * C1442 + C47574 * C1443) * C47850) *
                C21566) *
               C47734 -
           ((C21977 + C21976) * C21566 + (C21975 + C21974) * C21565 +
            ((C21567 * C130 + C47574 * C141) * C47850 +
             (C21567 * C120 + C47574 * C131) * C116) *
                C21564) *
               C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21567 * C117 + C47574 * C124) * C116 +
              (C21567 * C127 + C47574 * C138) * C47850) *
                 C21564 +
             (C21733 + C21734) * C21565 + C21751 * C21566) *
                C47896 -
            (C22578 * C21566 + (C22260 + C22261) * C21565 +
             ((C21567 * C426 + C47574 * C446) * C47850 +
              (C21567 * C416 + C47574 * C429) * C116) *
                 C21564) *
                C47734) *
               C942 +
           (((C22261 + C22260) * C21564 + (C22259 + C22258) * C21565 +
             (C22607 + C22608) * C21566) *
                C47734 -
            (C22446 * C21566 + (C21736 + C21735) * C21565 +
             (C21734 + C21733) * C21564) *
                C47896) *
               C943 +
           ((C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
                C47896 -
            (((C21567 * C6379 + C47574 * C6381) * C47850 +
              (C21567 * C6375 + C47574 * C6377) * C116) *
                 C21566 +
             (C22608 + C22607) * C21565 + C22578 * C21564) *
                C47734) *
               C47927) *
              C47881 +
          (((((C21567 * C415 + C47574 * C428) * C116 +
              (C21567 * C425 + C47574 * C445) * C47850) *
                 C21564 +
             (C22262 + C22263) * C21565 + C22865 * C21566) *
                C47734 -
            (C21752 * C21566 + (C21740 + C21739) * C21565 +
             ((C21567 * C128 + C47574 * C139) * C47850 +
              (C21567 * C118 + C47574 * C125) * C116) *
                 C21564) *
                C47896) *
               C942 +
           (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
             C22710 * C21566) *
                C47896 -
            ((C22872 + C22873) * C21566 + (C22265 + C22264) * C21565 +
             (C22263 + C22262) * C21564) *
                C47734) *
               C943 +
           ((C22865 * C21564 + (C22873 + C22872) * C21565 +
             ((C21567 * C6376 + C47574 * C6378) * C116 +
              (C21567 * C6380 + C47574 * C6382) * C47850) *
                 C21566) *
                C47734 -
            ((C22717 + C22718) * C21566 + (C21744 + C21743) * C21565 +
             C21752 * C21564) *
                C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           ((C21567 * C263 + C47574 * C276) * C116 +
            (C21567 * C273 + C47574 * C293) * C47850) *
               C21565 +
           ((C21567 * C264 + C47574 * C277) * C116 +
            (C21567 * C280 + C47574 * C294) * C47850) *
               C21566) *
              C47647 * C47629 * C108 -
          (((C21567 * C281 + C47574 * C295) * C47850 +
            (C21567 * C265 + C47574 * C278) * C116) *
               C21566 +
           ((C21567 * C272 + C47574 * C292) * C47850 +
            (C21567 * C262 + C47574 * C275) * C116) *
               C21565 +
           ((C21567 * C128 + C47574 * C139) * C47850 +
            (C21567 * C118 + C47574 * C125) * C116) *
               C21564) *
              C47647 * C47629 * C109 +
          (((C21567 * C119 + C47574 * C126) * C116 +
            (C21567 * C129 + C47574 * C140) * C47850) *
               C21564 +
           ((C21567 * C261 + C47574 * C274) * C116 +
            (C21567 * C271 + C47574 * C291) * C47850) *
               C21565 +
           ((C21567 * C266 + C47574 * C279) * C116 +
            (C21567 * C282 + C47574 * C296) * C47850) *
               C21566) *
              C47647 * C47629 * C110 -
          (((C21567 * C285 + C47574 * C298) * C47850 +
            (C21567 * C268 + C47574 * C286) * C116) *
               C21566 +
           ((C21567 * C284 + C47574 * C297) * C47850 +
            (C21567 * C267 + C47574 * C283) * C116) *
               C21565 +
           ((C21567 * C130 + C47574 * C141) * C47850 +
            (C21567 * C120 + C47574 * C131) * C116) *
               C21564) *
              C47647 * C47629 * C111 +
          (((C21567 * C121 + C47574 * C132) * C116 +
            (C21567 * C133 + C47574 * C142) * C47850) *
               C21564 +
           ((C21567 * C269 + C47574 * C288) * C116 +
            (C21567 * C287 + C47574 * C299) * C47850) *
               C21565 +
           ((C21567 * C270 + C47574 * C289) * C116 +
            (C21567 * C290 + C47574 * C300) * C47850) *
               C21566) *
              C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C47966 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C47954 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 +
            ((C21567 * C1019 + C47574 * C1028) * C116 +
             (C21567 * C1031 + C47574 * C1037) * C47850) *
                C21566) *
               C47647 * C47927) *
              C258 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C47954 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C47966 -
           (((C21567 * C1032 + C47574 * C1038) * C47850 +
             (C21567 * C1020 + C47574 * C1029) * C116) *
                C21566 +
            (C21744 + C21743) * C21565 + C21752 * C21564) *
               C47647 * C47927) *
              C259 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C47966 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C47954 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C116 +
             (C21567 * C127 + C47574 * C138) * C47850) *
                C21564 +
            (C21733 + C21734) * C21565 + C21751 * C21566) *
               C47647 * C942 -
           ((C21737 + C21738) * C21566 + (C21736 + C21735) * C21565 +
            (C21734 + C21733) * C21564) *
               C47647 * C943 +
           (C21751 * C21564 + (C21738 + C21737) * C21565 +
            ((C21567 * C1019 + C47574 * C1028) * C116 +
             (C21567 * C1031 + C47574 * C1037) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47963 +
          (((C21739 + C21740) * C21564 + (C21741 + C21742) * C21565 +
            (C21743 + C21744) * C21566) *
               C47647 * C943 -
           (C21752 * C21566 + (C21740 + C21739) * C21565 +
            ((C21567 * C128 + C47574 * C139) * C47850 +
             (C21567 * C118 + C47574 * C125) * C116) *
                C21564) *
               C47647 * C942 -
           (((C21567 * C1032 + C47574 * C1038) * C47850 +
             (C21567 * C1020 + C47574 * C1029) * C116) *
                C21566 +
            (C21744 + C21743) * C21565 + C21752 * C21564) *
               C47647 * C47927) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C116 +
             (C21567 * C129 + C47574 * C140) * C47850) *
                C21564 +
            (C21745 + C21746) * C21565 + C21753 * C21566) *
               C47647 * C942 -
           ((C21749 + C21750) * C21566 + (C21748 + C21747) * C21565 +
            (C21746 + C21745) * C21564) *
               C47647 * C943 +
           (C21753 * C21564 + (C21750 + C21749) * C21565 +
            ((C21567 * C1021 + C47574 * C1030) * C116 +
             (C21567 * C1033 + C47574 * C1039) * C47850) *
                C21566) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C116 +
            (C21567 * C127 + C47574 * C138) * C47850) *
               C21564 +
           (C21733 + C21734) * C21565 + C21751 * C21566) *
              C47647 * C1010 -
          (C22446 * C21566 + (C21736 + C21735) * C21565 +
           (C21734 + C21733) * C21564) *
              C47647 * C1011 +
          (C21751 * C21564 + (C21738 + C21737) * C21565 + C22463 * C21566) *
              C47647 * C1012 -
          ((C22461 + C22462) * C21566 + (C22460 + C22459) * C21565 +
           C22446 * C21564) *
              C47647 * C1013 +
          (C22463 * C21564 + (C22462 + C22461) * C21565 +
           ((C21567 * C22441 + C47574 * C22442) * C116 +
            (C21567 * C22443 + C47574 * C22444) * C47850) *
               C21566) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[125] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47688 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47695 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47647 * C2700) *
                       C47606 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47695 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47688 -
                    ((C27327 + C27328 + C27329 + C27330) * C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C2700) *
                       C47615 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C47688 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47695 +
                    ((C26132 + C26131 + C26130 + C26129) * C15891 +
                     (C21732 * C10311 + C21731 * C10309 +
                      (C21567 * C1544 + C47574 * C1547) * C10312 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47896 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C47688 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47896) *
                        C47695 +
                    (((C26116 + C26115 + C26114 + C26113) * C15891 +
                      (C27031 + C27032 + C27033 + C27034) * C47945) *
                         C47896 -
                     ((C27659 + C27660 + C27661 + C27662) * C47945 +
                      (C27192 + C27191 + C27190 + C27189) * C15891) *
                         C47734) *
                        C2700) *
                       C2440 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47896) *
                        C47688 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47896 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47695 +
                    (((C27528 + C27527 + C27526 + C27525) * C15891 +
                      (C22871 * C10311 + C22870 * C10309 +
                       (C21567 * C5854 + C47574 * C5856) * C10312 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C27327 + C27328 + C27329 + C27330) * C47945 +
                      (C26124 + C26123 + C26122 + C26121) * C15891) *
                         C47896) *
                        C2700) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[127] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47973 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47969 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47647 * C47959 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C47647 * C47937) *
                       C2440 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47969 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47973 -
                    ((C27327 + C27328 + C27329 + C27330) * C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47959 +
                    ((C27330 + C27329 + C27328 + C27327) * C15891 +
                     (C22716 * C10311 + C22715 * C10309 +
                      (C21567 * C6376 + C47574 * C6378) * C10312 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C2332 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47692) *
                       C47972 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47692 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C2332) *
                       C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C2332 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47692) *
                       C47952 +
                   (((C26451 + C26452 + C26459 + C26460) * C15891 +
                     (C21972 * C10311 + C21973 * C10309 +
                      (C21567 * C1440 + C47574 * C1441) * C10312 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     (C26596 * C47947 + C26595 * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C47647 * C2332) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47967 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47956 +
                     ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                       C28054 * C47947) *
                          C15891 +
                      (C27185 + C27186 + C27187 + C27188) * C47945) *
                         C47930) *
                        C2332 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47956 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47967 -
                     ((C27193 + C27194 + C27195 + C27196) * C47945 +
                      (C27188 + C27187 + C27186 + C27185) * C15891) *
                         C47930) *
                        C47692) *
                       C2440 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47956 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47967 -
                     ((C28261 + C28262 + C28257 + C28258) * C47945 +
                      (C28397 * C47947 + C28398 * C10312 + C26314 * C10309 +
                       C26313 * C10311) *
                          C15891) *
                         C47930) *
                        C2332 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47967 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47956 +
                     ((C28258 + C28257 + C28262 + C28261) * C15891 +
                      (C23426 * C10311 + C23425 * C10309 +
                       (C21567 * C7244 + C47574 * C7246) * C10312 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C47930) *
                        C47692) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[128] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47896 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C2332 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47896) *
                        C47692) *
                       C47606 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47896) *
                        C2332 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47896 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47692) *
                       C47615 +
                   (((((C21567 * C119 + C47574 * C126) * C10311 +
                       (C21567 * C129 + C47574 * C140) * C10309 +
                       C26315 * C10312 + C26316 * C47947) *
                          C15891 +
                      (C26125 + C26126 + C26127 + C26128) * C47945) *
                         C47896 -
                     ((C26799 + C26800 + C26801 + C26802) * C47945 +
                      (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                       C26315 * C10311) *
                          C15891) *
                         C47734) *
                        C2332 +
                    (((C26802 + C26801 + C26800 + C26799) * C15891 +
                      (C22255 * C10311 + C22254 * C10309 +
                       (C21567 * C1158 + C47574 * C1173) * C10312 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C26129 + C26130 + C26131 + C26132) * C47945 +
                      (C26128 + C26127 + C26126 + C26125) * C15891) *
                         C47896) *
                        C47692) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C2332 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47692) *
                       C47972 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47692 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C2332) *
                       C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C2332 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47692) *
                       C47952 +
                   (((C26451 + C26452 + C26459 + C26460) * C15891 +
                     (C21972 * C10311 + C21973 * C10309 +
                      (C21567 * C1440 + C47574 * C1441) * C10312 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     (C26596 * C47947 + C26595 * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C47647 * C2332) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47973 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47969 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47647 * C47959 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C47647 * C47937) *
                       C2440 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47969 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47973 -
                    ((C27327 + C27328 + C27329 + C27330) * C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47959 +
                    ((C27330 + C27329 + C27328 + C27327) * C15891 +
                     (C22716 * C10311 + C22715 * C10309 +
                      (C21567 * C6376 + C47574 * C6378) * C10312 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C3094 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C47688 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C3094) *
                        C47695 +
                    (((C26116 + C26115 + C26114 + C26113) * C15891 +
                      (C27031 + C27032 + C27033 + C27034) * C47945) *
                         C3094 -
                     ((C27659 + C27660 + C27661 + C27662) * C47945 +
                      (C27192 + C27191 + C27190 + C27189) * C15891) *
                         C47734) *
                        C2700) *
                       C47881 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C3094) *
                        C47688 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C3094 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47695 +
                    (((C27528 + C27527 + C27526 + C27525) * C15891 +
                      (C22871 * C10311 + C22870 * C10309 +
                       (C21567 * C5854 + C47574 * C5856) * C10312 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C27327 + C27328 + C27329 + C27330) * C47945 +
                      (C26124 + C26123 + C26122 + C26121) * C15891) *
                         C3094) *
                        C2700) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47730 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47737 +
                    ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                      C28054 * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C3602) *
                       C47688 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C47737 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47730 -
                    ((C27193 + C27194 + C27195 + C27196) * C47945 +
                     (C27188 + C27187 + C27186 + C27185) * C15891) *
                        C3602) *
                       C47695 +
                   (((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47730 -
                    ((C27659 + C27660 + C27661 + C27662) * C47945 +
                     (C27192 + C27191 + C27190 + C27189) * C15891) *
                        C47737 +
                    ((C27196 + C27195 + C27194 + C27193) * C15891 +
                     (C22602 * C10311 + C22601 * C10309 +
                      (C21567 * C23628 + C47574 * C23629) * C10312 +
                      (C21567 * C23630 + C47574 * C23631) * C47947) *
                         C47945) *
                        C3602) *
                       C2700) *
                  C47601) /
                 (p * q * std::sqrt(p + q));
    d2ee[132] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C3094 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C47973 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C47734 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C3094) *
                       C47969 +
                   (((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C3094 -
                    ((C27659 + C27660 + C27661 + C27662) * C47945 +
                     (C27192 + C27191 + C27190 + C27189) * C15891) *
                        C47734) *
                       C47959 +
                   (((C27662 + C27661 + C27660 + C27659) * C15891 +
                     (C22982 * C10311 + C22981 * C10309 +
                      (C21567 * C22573 + C47574 * C22574) * C10312 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C3094) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C3094 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C2332 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C3094) *
                        C47692) *
                       C47963 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C3094) *
                        C2332 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C3094 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47692) *
                       C47950 +
                   (((((C21567 * C119 + C47574 * C126) * C10311 +
                       (C21567 * C129 + C47574 * C140) * C10309 +
                       C26315 * C10312 + C26316 * C47947) *
                          C15891 +
                      (C26125 + C26126 + C26127 + C26128) * C47945) *
                         C3094 -
                     ((C26799 + C26800 + C26801 + C26802) * C47945 +
                      (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                       C26315 * C10311) *
                          C15891) *
                         C47734) *
                        C2332 +
                    (((C26802 + C26801 + C26800 + C26799) * C15891 +
                      (C22255 * C10311 + C22254 * C10309 +
                       (C21567 * C1158 + C47574 * C1173) * C10312 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C26129 + C26130 + C26131 + C26132) * C47945 +
                      (C26128 + C26127 + C26126 + C26125) * C15891) *
                         C3094) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47974 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47971 +
                    ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                      C28054 * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C47962 -
                    ((C28529 + C28530 + C28531 + C28532) * C47945 +
                     (C28057 * C47947 + C28058 * C10312 + C28054 * C10309 +
                      C28053 * C10311) *
                         C15891) *
                        C47943) *
                       C2332 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C47971 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47974 -
                    ((C27193 + C27194 + C27195 + C27196) * C47945 +
                     (C27188 + C27187 + C27186 + C27185) * C15891) *
                        C47962 +
                    ((C28532 + C28531 + C28530 + C28529) * C15891 +
                     (C23642 * C10311 + C23641 * C10309 +
                      (C21567 * C23266 + C47574 * C23267) * C10312 +
                      (C21567 * C23268 + C47574 * C23269) * C47947) *
                         C47945) *
                        C47943) *
                       C47692) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[133] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47730 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47737 +
                     ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                       C28054 * C47947) *
                          C15891 +
                      (C27185 + C27186 + C27187 + C27188) * C47945) *
                         C3602) *
                        C2332 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47737 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47730 -
                     ((C27193 + C27194 + C27195 + C27196) * C47945 +
                      (C27188 + C27187 + C27186 + C27185) * C15891) *
                         C3602) *
                        C47692) *
                       C47881 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47737 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47730 -
                     ((C28261 + C28262 + C28257 + C28258) * C47945 +
                      (C28397 * C47947 + C28398 * C10312 + C26314 * C10309 +
                       C26313 * C10311) *
                          C15891) *
                         C3602) *
                        C2332 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47730 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47737 +
                     ((C28258 + C28257 + C28262 + C28261) * C15891 +
                      (C23426 * C10311 + C23425 * C10309 +
                       (C21567 * C7244 + C47574 * C7246) * C10312 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C3602) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[134] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C3094 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C2332 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C3094) *
                        C47692) *
                       C47963 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C3094) *
                        C2332 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C3094 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47692) *
                       C47950 +
                   (((((C21567 * C119 + C47574 * C126) * C10311 +
                       (C21567 * C129 + C47574 * C140) * C10309 +
                       C26315 * C10312 + C26316 * C47947) *
                          C15891 +
                      (C26125 + C26126 + C26127 + C26128) * C47945) *
                         C3094 -
                     ((C26799 + C26800 + C26801 + C26802) * C47945 +
                      (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                       C26315 * C10311) *
                          C15891) *
                         C47734) *
                        C2332 +
                    (((C26802 + C26801 + C26800 + C26799) * C15891 +
                      (C22255 * C10311 + C22254 * C10309 +
                       (C21567 * C1158 + C47574 * C1173) * C10312 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C26129 + C26130 + C26131 + C26132) * C47945 +
                      (C26128 + C26127 + C26126 + C26125) * C15891) *
                         C3094) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C3094 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C47973 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C47734 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C3094) *
                       C47969 +
                   (((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C3094 -
                    ((C27659 + C27660 + C27661 + C27662) * C47945 +
                     (C27192 + C27191 + C27190 + C27189) * C15891) *
                        C47734) *
                       C47959 +
                   (((C27662 + C27661 + C27660 + C27659) * C15891 +
                     (C22982 * C10311 + C22981 * C10309 +
                      (C21567 * C22573 + C47574 * C22574) * C10312 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C3094) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[135] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C1284 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C1285 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47647 * C1286 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C47647 * C47937) *
                       C47881 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C1285 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C1284 -
                    ((C27327 + C27328 + C27329 + C27330) * C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C1286 +
                    ((C27330 + C27329 + C27328 + C27327) * C15891 +
                     (C22716 * C10311 + C22715 * C10309 +
                      (C21567 * C6376 + C47574 * C6378) * C10312 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47895 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47692) *
                       C554 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47692 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47895) *
                       C555 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C47895 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47692) *
                       C556 +
                   (((C26451 + C26452 + C26459 + C26460) * C15891 +
                     (C21972 * C10311 + C21973 * C10309 +
                      (C21567 * C1440 + C47574 * C1441) * C10312 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     ((C21567 * C437 + C47574 * C450) * C47947 +
                      (C21567 * C420 + C47574 * C436) * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C47647 * C47895) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C1664 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C1665 +
                     ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                       C28054 * C47947) *
                          C15891 +
                      (C27185 + C27186 + C27187 + C27188) * C47945) *
                         C47930) *
                        C47895 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C1665 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C1664 -
                     ((C27193 + C27194 + C27195 + C27196) * C47945 +
                      (C27188 + C27187 + C27186 + C27185) * C15891) *
                         C47930) *
                        C47692) *
                       C47881 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C1665 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C1664 -
                     ((C28261 + C28262 + C28257 + C28258) * C47945 +
                      ((C21567 * C1851 + C47574 * C1863) * C47947 +
                       (C21567 * C1845 + C47574 * C1854) * C10312 +
                       C26314 * C10309 + C26313 * C10311) *
                          C15891) *
                         C47930) *
                        C47895 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C1664 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C1665 +
                     ((C28258 + C28257 + C28262 + C28261) * C15891 +
                      (C23426 * C10311 + C23425 * C10309 +
                       (C21567 * C7244 + C47574 * C7246) * C10312 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C47930) *
                        C47692) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[136] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47896 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C1284 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C47734 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47896) *
                       C1285 +
                   (((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47896 -
                    ((C27659 + C27660 + C27661 + C27662) * C47945 +
                     (C27192 + C27191 + C27190 + C27189) * C15891) *
                        C47734) *
                       C1286 +
                   (((C27662 + C27661 + C27660 + C27659) * C15891 +
                     (C22982 * C10311 + C22981 * C10309 +
                      (C21567 * C22573 + C47574 * C22574) * C10312 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C47896) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47896 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C47895 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C22247 * C10311 + C22246 * C10309 + C22597 * C10312 +
                       C22598 * C47947) *
                          C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47896) *
                        C47692) *
                       C258 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47896) *
                        C47895 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47896 -
                     ((C23425 * C47947 + C23426 * C10312 + C22253 * C10309 +
                       C22252 * C10311) *
                          C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47692) *
                       C259 +
                   (((((C21567 * C119 + C47574 * C126) * C10311 +
                       (C21567 * C129 + C47574 * C140) * C10309 +
                       C26315 * C10312 + C26316 * C47947) *
                          C15891 +
                      (C26125 + C26126 + C26127 + C26128) * C47945) *
                         C47896 -
                     ((C26799 + C26800 + C26801 + C26802) * C47945 +
                      (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                       C26315 * C10311) *
                          C15891) *
                         C47734) *
                        C47895 +
                    (((C26802 + C26801 + C26800 + C26799) * C15891 +
                      (C22255 * C10311 + C22254 * C10309 +
                       (C21567 * C1158 + C47574 * C1173) * C10312 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C26129 + C26130 + C26131 + C26132) * C47945 +
                      (C26128 + C26127 + C26126 + C26125) * C15891) *
                         C47896) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C2116 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C2117 +
                    ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                      C28054 * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C2118 -
                    ((C28529 + C28530 + C28531 + C28532) * C47945 +
                     (C28057 * C47947 + C28058 * C10312 + C28054 * C10309 +
                      C28053 * C10311) *
                         C15891) *
                        C47943) *
                       C47895 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C2117 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C2116 -
                    ((C27193 + C27194 + C27195 + C27196) * C47945 +
                     (C27188 + C27187 + C27186 + C27185) * C15891) *
                        C2118 +
                    ((C28532 + C28531 + C28530 + C28529) * C15891 +
                     (C23642 * C10311 + C23641 * C10309 +
                      (C21567 * C23266 + C47574 * C23267) * C10312 +
                      (C21567 * C23268 + C47574 * C23269) * C47947) *
                         C47945) *
                        C47943) *
                       C47692) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21567 * C117 + C47574 * C124) * C10311 +
                (C21567 * C127 + C47574 * C138) * C10309 +
                (C21567 * C416 + C47574 * C429) * C10312 +
                (C21567 * C426 + C47574 * C446) * C47947) *
                   C15891 +
               (C21715 * C10311 + C21716 * C10309 + C22249 * C10312 +
                C22248 * C47947) *
                   C47945) *
                  C47647 * C47629 * C108 -
              ((C22251 * C47947 + C22250 * C10312 + C21722 * C10309 +
                C21721 * C10311) *
                   C47945 +
               ((C21567 * C425 + C47574 * C445) * C47947 +
                (C21567 * C415 + C47574 * C428) * C10312 +
                (C21567 * C128 + C47574 * C139) * C10309 +
                (C21567 * C118 + C47574 * C125) * C10311) *
                   C15891) *
                  C47647 * C47629 * C109 +
              (((C21567 * C119 + C47574 * C126) * C10311 +
                (C21567 * C129 + C47574 * C140) * C10309 +
                (C21567 * C414 + C47574 * C427) * C10312 +
                (C21567 * C424 + C47574 * C444) * C47947) *
                   C15891 +
               (C21727 * C10311 + C21728 * C10309 + C22257 * C10312 +
                C22256 * C47947) *
                   C47945) *
                  C47647 * C47629 * C110 -
              (((C21567 * C823 + C47574 * C830) * C47947 +
                (C21567 * C815 + C47574 * C824) * C10312 + C21971 * C10309 +
                C21970 * C10311) *
                   C47945 +
               ((C21567 * C437 + C47574 * C450) * C47947 +
                (C21567 * C420 + C47574 * C436) * C10312 +
                (C21567 * C130 + C47574 * C141) * C10309 +
                (C21567 * C120 + C47574 * C131) * C10311) *
                   C15891) *
                  C47647 * C47629 * C111 +
              (((C21567 * C121 + C47574 * C132) * C10311 +
                (C21567 * C133 + C47574 * C142) * C10309 +
                (C21567 * C422 + C47574 * C441) * C10312 +
                (C21567 * C440 + C47574 * C452) * C47947) *
                   C15891 +
               ((C21567 * C269 + C47574 * C288) * C10311 +
                (C21567 * C287 + C47574 * C299) * C10309 +
                (C21567 * C816 + C47574 * C825) * C10312 +
                (C21567 * C826 + C47574 * C831) * C47947) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21567 * C117 + C47574 * C124) * C10311 +
                 (C21567 * C127 + C47574 * C138) * C10309 +
                 (C21567 * C416 + C47574 * C429) * C10312 +
                 (C21567 * C426 + C47574 * C446) * C47947) *
                    C15891 +
                (C26109 + C26110 + C26111 + C26112) * C47945) *
                   C47647 * C47966 -
               ((C26113 + C26114 + C26115 + C26116) * C47945 +
                (C26112 + C26111 + C26110 + C26109) * C15891) *
                   C47647 * C47954 +
               ((C26116 + C26115 + C26114 + C26113) * C15891 +
                (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
                 C22600 * C47947) *
                    C47945) *
                   C47647 * C47927) *
                  C258 +
              (((C26117 + C26118 + C26119 + C26120) * C15891 +
                (C26121 + C26122 + C26123 + C26124) * C47945) *
                   C47647 * C47954 -
               ((C26120 + C26119 + C26118 + C26117) * C47945 +
                ((C21567 * C425 + C47574 * C445) * C47947 +
                 (C21567 * C415 + C47574 * C428) * C10312 +
                 (C21567 * C128 + C47574 * C139) * C10309 +
                 (C21567 * C118 + C47574 * C125) * C10311) *
                    C15891) *
                   C47647 * C47966 -
               ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
                 C21725 * C10311) *
                    C47945 +
                (C26124 + C26123 + C26122 + C26121) * C15891) *
                   C47647 * C47927) *
                  C259 +
              ((((C21567 * C119 + C47574 * C126) * C10311 +
                 (C21567 * C129 + C47574 * C140) * C10309 +
                 (C21567 * C414 + C47574 * C427) * C10312 +
                 (C21567 * C424 + C47574 * C444) * C47947) *
                    C15891 +
                (C26125 + C26126 + C26127 + C26128) * C47945) *
                   C47647 * C47966 -
               ((C26129 + C26130 + C26131 + C26132) * C47945 +
                (C26128 + C26127 + C26126 + C26125) * C15891) *
                   C47647 * C47954 +
               ((C26132 + C26131 + C26130 + C26129) * C15891 +
                (C21732 * C10311 + C21731 * C10309 +
                 (C21567 * C1544 + C47574 * C1547) * C10312 +
                 (C21567 * C1550 + C47574 * C1553) * C47947) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21567 * C117 + C47574 * C124) * C10311 +
                                 (C21567 * C127 + C47574 * C138) * C10309 +
                                 C26307 * C10312 + C26308 * C47947) *
                                    C15891 +
                                (C26109 + C26110 + C26111 + C26112) * C47945) *
                                   C47967 -
                               ((C22596 * C47947 + C22595 * C10312 +
                                 C22248 * C10309 + C22249 * C10311) *
                                    C47945 +
                                (C26309 * C47947 + C26310 * C10312 +
                                 C26308 * C10309 + C26307 * C10311) *
                                    C15891) *
                                   C47956 +
                               ((C26310 * C10311 + C26309 * C10309 +
                                 (C21567 * C1846 + C47574 * C1855) * C10312 +
                                 (C21567 * C1852 + C47574 * C1864) * C47947) *
                                    C15891 +
                                (C22595 * C10311 + C22596 * C10309 +
                                 C23644 * C10312 + C23643 * C47947) *
                                    C47945) *
                                   C47930) *
                                  C47629 * C258 +
                              (((C26311 * C10311 + C26312 * C10309 +
                                 C26313 * C10312 + C26314 * C47947) *
                                    C15891 +
                                (C22250 * C10311 + C22251 * C10309 +
                                 C23428 * C10312 + C23427 * C47947) *
                                    C47945) *
                                   C47956 -
                               ((C26120 + C26119 + C26118 + C26117) * C47945 +
                                (C26312 * C47947 + C26311 * C10312 +
                                 (C21567 * C128 + C47574 * C139) * C10309 +
                                 (C21567 * C118 + C47574 * C125) * C10311) *
                                    C15891) *
                                   C47967 -
                               (((C21567 * C2229 + C47574 * C2232) * C47947 +
                                 (C21567 * C2223 + C47574 * C2226) * C10312 +
                                 C23427 * C10309 + C23428 * C10311) *
                                    C47945 +
                                ((C21567 * C1851 + C47574 * C1863) * C47947 +
                                 (C21567 * C1845 + C47574 * C1854) * C10312 +
                                 C26314 * C10309 + C26313 * C10311) *
                                    C15891) *
                                   C47930) *
                                  C47629 * C259 +
                              ((((C21567 * C119 + C47574 * C126) * C10311 +
                                 (C21567 * C129 + C47574 * C140) * C10309 +
                                 C26315 * C10312 + C26316 * C47947) *
                                    C15891 +
                                (C26125 + C26126 + C26127 + C26128) * C47945) *
                                   C47967 -
                               ((C26317 * C47947 + C26318 * C10312 +
                                 C22256 * C10309 + C22257 * C10311) *
                                    C47945 +
                                (C26319 * C47947 + C26320 * C10312 +
                                 C26316 * C10309 + C26315 * C10311) *
                                    C15891) *
                                   C47956 +
                               ((C26320 * C10311 + C26319 * C10309 +
                                 (C21567 * C1844 + C47574 * C1853) * C10312 +
                                 (C21567 * C1850 + C47574 * C1862) * C47947) *
                                    C15891 +
                                (C26318 * C10311 + C26317 * C10309 +
                                 (C21567 * C2224 + C47574 * C2227) * C10312 +
                                 (C21567 * C2230 + C47574 * C2233) * C47947) *
                                    C47945) *
                                   C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C10311 +
             (C21567 * C127 + C47574 * C138) * C10309 + C26307 * C10312 +
             C26308 * C47947) *
                C15891 +
            (C26109 + C26110 + C26111 + C26112) * C47945) *
               C47647 * C942 -
           ((C26113 + C26114 + C26115 + C26116) * C47945 +
            (C26112 + C26111 + C26110 + C26109) * C15891) *
               C47647 * C943 +
           ((C26116 + C26115 + C26114 + C26113) * C15891 +
            (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
             C22600 * C47947) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C26117 + C26118 + C26119 + C26120) * C15891 +
            (C26121 + C26122 + C26123 + C26124) * C47945) *
               C47647 * C943 -
           ((C26120 + C26119 + C26118 + C26117) * C47945 +
            (C26312 * C47947 + C26311 * C10312 +
             (C21567 * C128 + C47574 * C139) * C10309 +
             (C21567 * C118 + C47574 * C125) * C10311) *
                C15891) *
               C47647 * C942 -
           ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
             C21725 * C10311) *
                C47945 +
            (C26124 + C26123 + C26122 + C26121) * C15891) *
               C47647 * C47927) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C10311 +
             (C21567 * C129 + C47574 * C140) * C10309 + C26315 * C10312 +
             C26316 * C47947) *
                C15891 +
            (C26125 + C26126 + C26127 + C26128) * C47945) *
               C47647 * C942 -
           ((C26129 + C26130 + C26131 + C26132) * C47945 +
            (C26128 + C26127 + C26126 + C26125) * C15891) *
               C47647 * C943 +
           ((C26132 + C26131 + C26130 + C26129) * C15891 +
            (C21732 * C10311 + C21731 * C10309 +
             (C21567 * C1544 + C47574 * C1547) * C10312 +
             (C21567 * C1550 + C47574 * C1553) * C47947) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C10311 +
            (C21567 * C127 + C47574 * C138) * C10309 + C26307 * C10312 +
            C26308 * C47947) *
               C15891 +
           (C26109 + C26110 + C26111 + C26112) * C47945) *
              C47647 * C1010 -
          ((C26113 + C26114 + C26115 + C26116) * C47945 +
           (C26112 + C26111 + C26110 + C26109) * C15891) *
              C47647 * C1011 +
          ((C26116 + C26115 + C26114 + C26113) * C15891 +
           (C27031 + C27032 + C27033 + C27034) * C47945) *
              C47647 * C1012 -
          ((C27035 + C27036 + C27037 + C27038) * C47945 +
           (C27034 + C27033 + C27032 + C27031) * C15891) *
              C47647 * C1013 +
          ((C27038 + C27037 + C27036 + C27035) * C15891 +
           (C22458 * C10311 + C22457 * C10309 +
            (C21567 * C22971 + C47574 * C22972) * C10312 +
            (C21567 * C22973 + C47574 * C22974) * C47947) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C10311 +
             (C21567 * C127 + C47574 * C138) * C10309 + C26307 * C10312 +
             C26308 * C47947) *
                C15891 +
            (C26109 + C26110 + C26111 + C26112) * C47945) *
               C47967 -
           ((C26791 + C26792 + C26793 + C26794) * C47945 +
            (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
             C26307 * C10311) *
                C15891) *
               C47956 +
           ((C26310 * C10311 + C26309 * C10309 +
             (C21567 * C1846 + C47574 * C1855) * C10312 +
             (C21567 * C1852 + C47574 * C1864) * C47947) *
                C15891 +
            (C27185 + C27186 + C27187 + C27188) * C47945) *
               C47930) *
              C942 +
          (((C26794 + C26793 + C26792 + C26791) * C15891 +
            (C27189 + C27190 + C27191 + C27192) * C47945) *
               C47956 -
           ((C26113 + C26114 + C26115 + C26116) * C47945 +
            (C26112 + C26111 + C26110 + C26109) * C15891) *
               C47967 -
           ((C27193 + C27194 + C27195 + C27196) * C47945 +
            (C27188 + C27187 + C27186 + C27185) * C15891) *
               C47930) *
              C943 +
          (((C26116 + C26115 + C26114 + C26113) * C15891 +
            (C27031 + C27032 + C27033 + C27034) * C47945) *
               C47967 -
           ((C22601 * C47947 + C22602 * C10312 + C22600 * C10309 +
             C22599 * C10311) *
                C47945 +
            (C27192 + C27191 + C27190 + C27189) * C15891) *
               C47956 +
           ((C27196 + C27195 + C27194 + C27193) * C15891 +
            (C22602 * C10311 + C22601 * C10309 +
             (C21567 * C23628 + C47574 * C23629) * C10312 +
             (C21567 * C23630 + C47574 * C23631) * C47947) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21567 * C117 + C47574 * C124) * C10311 +
                                 (C21567 * C127 + C47574 * C138) * C10309 +
                                 C26307 * C10312 + C26308 * C47947) *
                                    C15891 +
                                (C26109 + C26110 + C26111 + C26112) * C47945) *
                                   C1664 -
                               ((C26791 + C26792 + C26793 + C26794) * C47945 +
                                (C26309 * C47947 + C26310 * C10312 +
                                 C26308 * C10309 + C26307 * C10311) *
                                    C15891) *
                                   C1665 +
                               ((C26310 * C10311 + C26309 * C10309 +
                                 (C21567 * C1846 + C47574 * C1855) * C10312 +
                                 (C21567 * C1852 + C47574 * C1864) * C47947) *
                                    C15891 +
                                (C27185 + C27186 + C27187 + C27188) * C47945) *
                                   C47930) *
                                  C47629 * C47963 +
                              (((C26311 * C10311 + C26312 * C10309 +
                                 C26313 * C10312 + C26314 * C47947) *
                                    C15891 +
                                (C26795 + C26796 + C26797 + C26798) * C47945) *
                                   C1665 -
                               ((C26120 + C26119 + C26118 + C26117) * C47945 +
                                (C26312 * C47947 + C26311 * C10312 +
                                 (C21567 * C128 + C47574 * C139) * C10309 +
                                 (C21567 * C118 + C47574 * C125) * C10311) *
                                    C15891) *
                                   C1664 -
                               (((C21567 * C2229 + C47574 * C2232) * C47947 +
                                 (C21567 * C2223 + C47574 * C2226) * C10312 +
                                 C23427 * C10309 + C23428 * C10311) *
                                    C47945 +
                                ((C21567 * C1851 + C47574 * C1863) * C47947 +
                                 (C21567 * C1845 + C47574 * C1854) * C10312 +
                                 C26314 * C10309 + C26313 * C10311) *
                                    C15891) *
                                   C47930) *
                                  C47629 * C47950 +
                              ((((C21567 * C119 + C47574 * C126) * C10311 +
                                 (C21567 * C129 + C47574 * C140) * C10309 +
                                 C26315 * C10312 + C26316 * C47947) *
                                    C15891 +
                                (C26125 + C26126 + C26127 + C26128) * C47945) *
                                   C1664 -
                               ((C26799 + C26800 + C26801 + C26802) * C47945 +
                                (C26319 * C47947 + C26320 * C10312 +
                                 C26316 * C10309 + C26315 * C10311) *
                                    C15891) *
                                   C1665 +
                               ((C26320 * C10311 + C26319 * C10309 +
                                 (C21567 * C1844 + C47574 * C1853) * C10312 +
                                 (C21567 * C1850 + C47574 * C1862) * C47947) *
                                    C15891 +
                                (C26318 * C10311 + C26317 * C10309 +
                                 (C21567 * C2224 + C47574 * C2227) * C10312 +
                                 (C21567 * C2230 + C47574 * C2233) * C47947) *
                                    C47945) *
                                   C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C10311 +
             (C21567 * C127 + C47574 * C138) * C10309 + C26307 * C10312 +
             C26308 * C47947) *
                C15891 +
            (C26109 + C26110 + C26111 + C26112) * C47945) *
               C1664 -
           ((C26791 + C26792 + C26793 + C26794) * C47945 +
            (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
             C26307 * C10311) *
                C15891) *
               C1665 +
           ((C26310 * C10311 + C26309 * C10309 +
             (C21567 * C1846 + C47574 * C1855) * C10312 +
             (C21567 * C1852 + C47574 * C1864) * C47947) *
                C15891 +
            (C27185 + C27186 + C27187 + C27188) * C47945) *
               C47930) *
              C47966 +
          (((C26794 + C26793 + C26792 + C26791) * C15891 +
            (C27189 + C27190 + C27191 + C27192) * C47945) *
               C1665 -
           ((C26113 + C26114 + C26115 + C26116) * C47945 +
            (C26112 + C26111 + C26110 + C26109) * C15891) *
               C1664 -
           ((C27193 + C27194 + C27195 + C27196) * C47945 +
            (C27188 + C27187 + C27186 + C27185) * C15891) *
               C47930) *
              C47954 +
          (((C26116 + C26115 + C26114 + C26113) * C15891 +
            (C27031 + C27032 + C27033 + C27034) * C47945) *
               C1664 -
           ((C27659 + C27660 + C27661 + C27662) * C47945 +
            (C27192 + C27191 + C27190 + C27189) * C15891) *
               C1665 +
           ((C27196 + C27195 + C27194 + C27193) * C15891 +
            (C22602 * C10311 + C22601 * C10309 +
             (C21567 * C23628 + C47574 * C23629) * C10312 +
             (C21567 * C23630 + C47574 * C23631) * C47947) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C10311 +
            (C21567 * C127 + C47574 * C138) * C10309 + C26307 * C10312 +
            C26308 * C47947) *
               C15891 +
           (C26109 + C26110 + C26111 + C26112) * C47945) *
              C1839 -
          ((C26791 + C26792 + C26793 + C26794) * C47945 +
           (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
            C26307 * C10311) *
               C15891) *
              C1840 +
          ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
            C28054 * C47947) *
               C15891 +
           (C27185 + C27186 + C27187 + C27188) * C47945) *
              C1841 -
          ((C28055 * C47947 + C28056 * C10312 + C23643 * C10309 +
            C23644 * C10311) *
               C47945 +
           (C28057 * C47947 + C28058 * C10312 + C28054 * C10309 +
            C28053 * C10311) *
               C15891) *
              C1842 +
          ((C28058 * C10311 + C28057 * C10309 +
            (C21567 * C12345 + C47574 * C12347) * C10312 +
            (C21567 * C12349 + C47574 * C12351) * C47947) *
               C15891 +
           (C28056 * C10311 + C28055 * C10309 +
            (C21567 * C28036 + C47574 * C28037) * C10312 +
            (C21567 * C28038 + C47574 * C28039) * C47947) *
               C47945) *
              C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[138] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47896 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C942 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47896) *
                        C943 +
                    (((C26116 + C26115 + C26114 + C26113) * C15891 +
                      (C27031 + C27032 + C27033 + C27034) * C47945) *
                         C47896 -
                     ((C22601 * C47947 + C22602 * C10312 + C22600 * C10309 +
                       C22599 * C10311) *
                          C47945 +
                      (C27192 + C27191 + C27190 + C27189) * C15891) *
                         C47734) *
                        C47927) *
                       C47881 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47896) *
                        C942 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47896 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C943 +
                    (((C27528 + C27527 + C27526 + C27525) * C15891 +
                      (C22871 * C10311 + C22870 * C10309 +
                       (C21567 * C5854 + C47574 * C5856) * C10312 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C27327 + C27328 + C27329 + C27330) * C47945 +
                      (C26124 + C26123 + C26122 + C26121) * C15891) *
                         C47896) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47896 -
                    ((C22596 * C47947 + C22595 * C10312 + C22248 * C10309 +
                      C22249 * C10311) *
                         C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C554 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C22250 * C10311 + C22251 * C10309 + C23428 * C10312 +
                      C23427 * C47947) *
                         C47945) *
                        C47734 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47896) *
                       C47629 * C555 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47896 -
                    ((C26317 * C47947 + C26318 * C10312 + C22256 * C10309 +
                      C22257 * C10311) *
                         C47945 +
                     (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                      C26315 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C556 +
                   (((C26595 * C10311 + C26596 * C10309 +
                      (C21567 * C421 + C47574 * C439) * C10312 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C15891 +
                     (C26457 * C10311 + C26458 * C10309 +
                      (C21567 * C2014 + C47574 * C2015) * C10312 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     (C26596 * C47947 + C26595 * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C47896) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C2116 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C2117 +
                    ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                      C28054 * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C2118 -
                    ((C28055 * C47947 + C28056 * C10312 + C23643 * C10309 +
                      C23644 * C10311) *
                         C47945 +
                     (C28057 * C47947 + C28058 * C10312 + C28054 * C10309 +
                      C28053 * C10311) *
                         C15891) *
                        C47943) *
                       C47629 * C47881 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C26795 + C26796 + C26797 + C26798) * C47945) *
                        C2117 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C2116 -
                    ((C28261 + C28262 + C28257 + C28258) * C47945 +
                     (C28397 * C47947 + C28398 * C10312 + C26314 * C10309 +
                      C26313 * C10311) *
                         C15891) *
                        C2118 +
                    ((C28398 * C10311 + C28397 * C10309 +
                      (C21567 * C1848 + C47574 * C1857) * C10312 +
                      (C21567 * C1860 + C47574 * C1866) * C47947) *
                         C15891 +
                     (C28260 * C10311 + C28259 * C10309 +
                      (C21567 * C6770 + C47574 * C6772) * C10312 +
                      (C21567 * C6774 + C47574 * C6776) * C47947) *
                         C47945) *
                        C47943) *
                       C47629 * C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      (C21567 * C416 + C47574 * C429) * C10312 +
                      (C21567 * C426 + C47574 * C446) * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47966 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47954 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C258 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47954 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     ((C21567 * C425 + C47574 * C445) * C47947 +
                      (C21567 * C415 + C47574 * C428) * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47966 -
                    ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
                      C21725 * C10311) *
                         C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47927) *
                       C259 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      (C21567 * C414 + C47574 * C427) * C10312 +
                      (C21567 * C424 + C47574 * C444) * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C47966 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47954 +
                    ((C26132 + C26131 + C26130 + C26129) * C15891 +
                     (C21732 * C10311 + C21731 * C10309 +
                      (C21567 * C1544 + C47574 * C1547) * C10312 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C10311 +
                     (C21567 * C127 + C47574 * C138) * C10309 +
                     (C21567 * C416 + C47574 * C429) * C10312 +
                     (C21567 * C426 + C47574 * C446) * C47947) *
                        C15891 +
                    (C21715 * C10311 + C21716 * C10309 + C22249 * C10312 +
                     C22248 * C47947) *
                        C47945) *
                       C47647 * C47629 * C108 -
                   ((C22251 * C47947 + C22250 * C10312 + C21722 * C10309 +
                     C21721 * C10311) *
                        C47945 +
                    ((C21567 * C425 + C47574 * C445) * C47947 +
                     (C21567 * C415 + C47574 * C428) * C10312 +
                     (C21567 * C128 + C47574 * C139) * C10309 +
                     (C21567 * C118 + C47574 * C125) * C10311) *
                        C15891) *
                       C47647 * C47629 * C109 +
                   (((C21567 * C119 + C47574 * C126) * C10311 +
                     (C21567 * C129 + C47574 * C140) * C10309 +
                     (C21567 * C414 + C47574 * C427) * C10312 +
                     (C21567 * C424 + C47574 * C444) * C47947) *
                        C15891 +
                    (C21727 * C10311 + C21728 * C10309 + C22257 * C10312 +
                     C22256 * C47947) *
                        C47945) *
                       C47647 * C47629 * C110 -
                   (((C21567 * C823 + C47574 * C830) * C47947 +
                     (C21567 * C815 + C47574 * C824) * C10312 +
                     C21971 * C10309 + C21970 * C10311) *
                        C47945 +
                    ((C21567 * C437 + C47574 * C450) * C47947 +
                     (C21567 * C420 + C47574 * C436) * C10312 +
                     (C21567 * C130 + C47574 * C141) * C10309 +
                     (C21567 * C120 + C47574 * C131) * C10311) *
                        C15891) *
                       C47647 * C47629 * C111 +
                   (((C21567 * C121 + C47574 * C132) * C10311 +
                     (C21567 * C133 + C47574 * C142) * C10309 +
                     (C21567 * C422 + C47574 * C441) * C10312 +
                     (C21567 * C440 + C47574 * C452) * C47947) *
                        C15891 +
                    ((C21567 * C269 + C47574 * C288) * C10311 +
                     (C21567 * C287 + C47574 * C299) * C10309 +
                     (C21567 * C816 + C47574 * C825) * C10312 +
                     (C21567 * C826 + C47574 * C831) * C47947) *
                        C47945) *
                       C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C942 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C943 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47963 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C943 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C942 -
                    ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
                      C21725 * C10311) *
                         C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47927) *
                       C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C942 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C943 +
                    ((C26132 + C26131 + C26130 + C26129) * C15891 +
                     (C21732 * C10311 + C21731 * C10309 +
                      (C21567 * C1544 + C47574 * C1547) * C10312 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C10311 +
                     (C21567 * C127 + C47574 * C138) * C10309 +
                     C26307 * C10312 + C26308 * C47947) *
                        C15891 +
                    (C26109 + C26110 + C26111 + C26112) * C47945) *
                       C47647 * C1010 -
                   ((C26113 + C26114 + C26115 + C26116) * C47945 +
                    (C26112 + C26111 + C26110 + C26109) * C15891) *
                       C47647 * C1011 +
                   ((C26116 + C26115 + C26114 + C26113) * C15891 +
                    (C27031 + C27032 + C27033 + C27034) * C47945) *
                       C47647 * C1012 -
                   ((C27035 + C27036 + C27037 + C27038) * C47945 +
                    (C27034 + C27033 + C27032 + C27031) * C15891) *
                       C47647 * C1013 +
                   ((C27038 + C27037 + C27036 + C27035) * C15891 +
                    (C22458 * C10311 + C22457 * C10309 +
                     (C21567 * C22971 + C47574 * C22972) * C10312 +
                     (C21567 * C22973 + C47574 * C22974) * C47947) *
                        C47945) *
                       C47647 * C1014) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C1664 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C1665 +
                    ((C26310 * C10311 + C26309 * C10309 +
                      (C21567 * C1846 + C47574 * C1855) * C10312 +
                      (C21567 * C1852 + C47574 * C1864) * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C47930) *
                       C47629 * C47963 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C26795 + C26796 + C26797 + C26798) * C47945) *
                        C1665 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C1664 -
                    (((C21567 * C2229 + C47574 * C2232) * C47947 +
                      (C21567 * C2223 + C47574 * C2226) * C10312 +
                      C23427 * C10309 + C23428 * C10311) *
                         C47945 +
                     ((C21567 * C1851 + C47574 * C1863) * C47947 +
                      (C21567 * C1845 + C47574 * C1854) * C10312 +
                      C26314 * C10309 + C26313 * C10311) *
                         C15891) *
                        C47930) *
                       C47629 * C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C1664 -
                    ((C26799 + C26800 + C26801 + C26802) * C47945 +
                     (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                      C26315 * C10311) *
                         C15891) *
                        C1665 +
                    ((C26320 * C10311 + C26319 * C10309 +
                      (C21567 * C1844 + C47574 * C1853) * C10312 +
                      (C21567 * C1850 + C47574 * C1862) * C47947) *
                         C15891 +
                     (C26318 * C10311 + C26317 * C10309 +
                      (C21567 * C2224 + C47574 * C2227) * C10312 +
                      (C21567 * C2230 + C47574 * C2233) * C47947) *
                         C47945) *
                        C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C1664 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C1665 +
                    ((C26310 * C10311 + C26309 * C10309 +
                      (C21567 * C1846 + C47574 * C1855) * C10312 +
                      (C21567 * C1852 + C47574 * C1864) * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C47930) *
                       C47966 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C1665 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C1664 -
                    ((C27193 + C27194 + C27195 + C27196) * C47945 +
                     (C27188 + C27187 + C27186 + C27185) * C15891) *
                        C47930) *
                       C47954 +
                   (((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C1664 -
                    ((C27659 + C27660 + C27661 + C27662) * C47945 +
                     (C27192 + C27191 + C27190 + C27189) * C15891) *
                        C1665 +
                    ((C27196 + C27195 + C27194 + C27193) * C15891 +
                     (C22602 * C10311 + C22601 * C10309 +
                      (C21567 * C23628 + C47574 * C23629) * C10312 +
                      (C21567 * C23630 + C47574 * C23631) * C47947) *
                         C47945) *
                        C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C3094 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C47895 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C3094) *
                        C47692) *
                       C47606 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C3094) *
                        C47895 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C3094 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47692) *
                       C47615 +
                   (((((C21567 * C119 + C47574 * C126) * C10311 +
                       (C21567 * C129 + C47574 * C140) * C10309 +
                       C26315 * C10312 + C26316 * C47947) *
                          C15891 +
                      (C26125 + C26126 + C26127 + C26128) * C47945) *
                         C3094 -
                     ((C26799 + C26800 + C26801 + C26802) * C47945 +
                      (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                       C26315 * C10311) *
                          C15891) *
                         C47734) *
                        C47895 +
                    (((C26802 + C26801 + C26800 + C26799) * C15891 +
                      (C22255 * C10311 + C22254 * C10309 +
                       (C21567 * C1158 + C47574 * C1173) * C10312 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C26129 + C26130 + C26131 + C26132) * C47945 +
                      (C26128 + C26127 + C26126 + C26125) * C15891) *
                         C3094) *
                        C47692) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47730 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47737 +
                     ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                       C28054 * C47947) *
                          C15891 +
                      (C27185 + C27186 + C27187 + C27188) * C47945) *
                         C3602) *
                        C47895 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47737 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47730 -
                     ((C27193 + C27194 + C27195 + C27196) * C47945 +
                      (C27188 + C27187 + C27186 + C27185) * C15891) *
                         C3602) *
                        C47692) *
                       C2440 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47737 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47730 -
                     ((C28261 + C28262 + C28257 + C28258) * C47945 +
                      (C28397 * C47947 + C28398 * C10312 + C26314 * C10309 +
                       C26313 * C10311) *
                          C15891) *
                         C3602) *
                        C47895 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47730 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47737 +
                     ((C28258 + C28257 + C28262 + C28261) * C15891 +
                      (C23426 * C10311 + C23425 * C10309 +
                       (C21567 * C7244 + C47574 * C7246) * C10312 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C3602) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[142] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C3094 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C47966 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C3094) *
                        C47954 +
                    (((C26116 + C26115 + C26114 + C26113) * C15891 +
                      (C27031 + C27032 + C27033 + C27034) * C47945) *
                         C3094 -
                     ((C27659 + C27660 + C27661 + C27662) * C47945 +
                      (C27192 + C27191 + C27190 + C27189) * C15891) *
                         C47734) *
                        C47927) *
                       C2440 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C3094) *
                        C47966 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C3094 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47954 +
                    (((C27528 + C27527 + C27526 + C27525) * C15891 +
                      (C22871 * C10311 + C22870 * C10309 +
                       (C21567 * C5854 + C47574 * C5856) * C10312 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C27327 + C27328 + C27329 + C27330) * C47945 +
                      (C26124 + C26123 + C26122 + C26121) * C15891) *
                         C3094) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C3094 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C47972 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C26795 + C26796 + C26797 + C26798) * C47945) *
                        C47734 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C3094) *
                       C47629 * C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C3094 -
                    ((C26799 + C26800 + C26801 + C26802) * C47945 +
                     (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                      C26315 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C47952 +
                   (((C26595 * C10311 + C26596 * C10309 +
                      (C21567 * C421 + C47574 * C439) * C10312 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C15891 +
                     (C26457 * C10311 + C26458 * C10309 +
                      (C21567 * C2014 + C47574 * C2015) * C10312 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     (C26596 * C47947 + C26595 * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C3094) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47974 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47971 +
                    ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                      C28054 * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C47962 -
                    ((C28529 + C28530 + C28531 + C28532) * C47945 +
                     (C28057 * C47947 + C28058 * C10312 + C28054 * C10309 +
                      C28053 * C10311) *
                         C15891) *
                        C47943) *
                       C47629 * C2440 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C26795 + C26796 + C26797 + C26798) * C47945) *
                        C47971 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47974 -
                    ((C28261 + C28262 + C28257 + C28258) * C47945 +
                     (C28397 * C47947 + C28398 * C10312 + C26314 * C10309 +
                      C26313 * C10311) *
                         C15891) *
                        C47962 +
                    ((C28398 * C10311 + C28397 * C10309 +
                      (C21567 * C1848 + C47574 * C1857) * C10312 +
                      (C21567 * C1860 + C47574 * C1866) * C47947) *
                         C15891 +
                     (C28260 * C10311 + C28259 * C10309 +
                      (C21567 * C6770 + C47574 * C6772) * C10312 +
                      (C21567 * C6774 + C47574 * C6776) * C47947) *
                         C47945) *
                        C47943) *
                       C47629 * C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47730 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47737 +
                    ((C26310 * C10311 + C26309 * C10309 + C28053 * C10312 +
                      C28054 * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C3602) *
                       C47629 * C47606 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C26795 + C26796 + C26797 + C26798) * C47945) *
                        C47737 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47730 -
                    ((C28261 + C28262 + C28257 + C28258) * C47945 +
                     (C28397 * C47947 + C28398 * C10312 + C26314 * C10309 +
                      C26313 * C10311) *
                         C15891) *
                        C3602) *
                       C47629 * C47615 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47730 -
                    ((C26799 + C26800 + C26801 + C26802) * C47945 +
                     (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                      C26315 * C10311) *
                         C15891) *
                        C47737 +
                    ((C26320 * C10311 + C26319 * C10309 +
                      (C21567 * C1844 + C47574 * C1853) * C10312 +
                      (C21567 * C1850 + C47574 * C1862) * C47947) *
                         C15891 +
                     (C26318 * C10311 + C26317 * C10309 +
                      (C21567 * C2224 + C47574 * C2227) * C10312 +
                      (C21567 * C2230 + C47574 * C2233) * C47947) *
                         C47945) *
                        C3602) *
                       C47629 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C3094 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C47972 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C26795 + C26796 + C26797 + C26798) * C47945) *
                        C47734 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C3094) *
                       C47629 * C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C3094 -
                    ((C26799 + C26800 + C26801 + C26802) * C47945 +
                     (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                      C26315 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C47952 +
                   (((C26595 * C10311 + C26596 * C10309 +
                      (C21567 * C421 + C47574 * C439) * C10312 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C15891 +
                     (C26457 * C10311 + C26458 * C10309 +
                      (C21567 * C2014 + C47574 * C2015) * C10312 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     (C26596 * C47947 + C26595 * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C3094) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C3094 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C47966 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C3094) *
                        C47954 +
                    (((C26116 + C26115 + C26114 + C26113) * C15891 +
                      (C27031 + C27032 + C27033 + C27034) * C47945) *
                         C3094 -
                     ((C27659 + C27660 + C27661 + C27662) * C47945 +
                      (C27192 + C27191 + C27190 + C27189) * C15891) *
                         C47734) *
                        C47927) *
                       C2440 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C3094) *
                        C47966 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C3094 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47954 +
                    (((C27528 + C27527 + C27526 + C27525) * C15891 +
                      (C22871 * C10311 + C22870 * C10309 +
                       (C21567 * C5854 + C47574 * C5856) * C10312 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C27327 + C27328 + C27329 + C27330) * C47945 +
                      (C26124 + C26123 + C26122 + C26121) * C15891) *
                         C3094) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47895 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47692) *
                       C554 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47692 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47895) *
                       C555 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C47895 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47692) *
                       C556 +
                   (((C26451 + C26452 + C26459 + C26460) * C15891 +
                     (C21972 * C10311 + C21973 * C10309 +
                      (C21567 * C1440 + C47574 * C1441) * C10312 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     ((C21567 * C437 + C47574 * C450) * C47947 +
                      (C21567 * C420 + C47574 * C436) * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C47647 * C47895) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C1284 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C1285 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47647 * C1286 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C47647 * C47937) *
                       C47881 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C1285 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C1284 -
                    ((C27327 + C27328 + C27329 + C27330) * C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C1286 +
                    ((C27330 + C27329 + C27328 + C27327) * C15891 +
                     (C22716 * C10311 + C22715 * C10309 +
                      (C21567 * C6376 + C47574 * C6378) * C10312 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47896 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C47895 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C22247 * C10311 + C22246 * C10309 + C22597 * C10312 +
                       C22598 * C47947) *
                          C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47896) *
                        C47692) *
                       C258 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47896) *
                        C47895 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47896 -
                     ((C23425 * C47947 + C23426 * C10312 + C22253 * C10309 +
                       C22252 * C10311) *
                          C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C47692) *
                       C259 +
                   (((((C21567 * C119 + C47574 * C126) * C10311 +
                       (C21567 * C129 + C47574 * C140) * C10309 +
                       C26315 * C10312 + C26316 * C47947) *
                          C15891 +
                      (C26125 + C26126 + C26127 + C26128) * C47945) *
                         C47896 -
                     ((C26799 + C26800 + C26801 + C26802) * C47945 +
                      (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                       C26315 * C10311) *
                          C15891) *
                         C47734) *
                        C47895 +
                    (((C26802 + C26801 + C26800 + C26799) * C15891 +
                      (C22255 * C10311 + C22254 * C10309 +
                       (C21567 * C1158 + C47574 * C1173) * C10312 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C26129 + C26130 + C26131 + C26132) * C47945 +
                      (C26128 + C26127 + C26126 + C26125) * C15891) *
                         C47896) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47896 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C1284 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C47734 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47896) *
                       C1285 +
                   (((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47896 -
                    ((C27659 + C27660 + C27661 + C27662) * C47945 +
                     (C27192 + C27191 + C27190 + C27189) * C15891) *
                        C47734) *
                       C1286 +
                   (((C27662 + C27661 + C27660 + C27659) * C15891 +
                     (C22982 * C10311 + C22981 * C10309 +
                      (C21567 * C22573 + C47574 * C22574) * C10312 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C27035 + C27036 + C27037 + C27038) * C47945 +
                     (C27034 + C27033 + C27032 + C27031) * C15891) *
                        C47896) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[147] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      (C21567 * C416 + C47574 * C429) * C10312 +
                      (C21567 * C426 + C47574 * C446) * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47966 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47954 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C258 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47954 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     ((C21567 * C425 + C47574 * C445) * C47947 +
                      (C21567 * C415 + C47574 * C428) * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47966 -
                    ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
                      C21725 * C10311) *
                         C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47927) *
                       C259 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      (C21567 * C414 + C47574 * C427) * C10312 +
                      (C21567 * C424 + C47574 * C444) * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C47966 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47954 +
                    ((C26132 + C26131 + C26130 + C26129) * C15891 +
                     (C21732 * C10311 + C21731 * C10309 +
                      (C21567 * C1544 + C47574 * C1547) * C10312 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C10311 +
                     (C21567 * C127 + C47574 * C138) * C10309 +
                     (C21567 * C416 + C47574 * C429) * C10312 +
                     (C21567 * C426 + C47574 * C446) * C47947) *
                        C15891 +
                    (C21715 * C10311 + C21716 * C10309 + C22249 * C10312 +
                     C22248 * C47947) *
                        C47945) *
                       C47647 * C47629 * C108 -
                   ((C22251 * C47947 + C22250 * C10312 + C21722 * C10309 +
                     C21721 * C10311) *
                        C47945 +
                    ((C21567 * C425 + C47574 * C445) * C47947 +
                     (C21567 * C415 + C47574 * C428) * C10312 +
                     (C21567 * C128 + C47574 * C139) * C10309 +
                     (C21567 * C118 + C47574 * C125) * C10311) *
                        C15891) *
                       C47647 * C47629 * C109 +
                   (((C21567 * C119 + C47574 * C126) * C10311 +
                     (C21567 * C129 + C47574 * C140) * C10309 +
                     (C21567 * C414 + C47574 * C427) * C10312 +
                     (C21567 * C424 + C47574 * C444) * C47947) *
                        C15891 +
                    (C21727 * C10311 + C21728 * C10309 + C22257 * C10312 +
                     C22256 * C47947) *
                        C47945) *
                       C47647 * C47629 * C110 -
                   (((C21567 * C823 + C47574 * C830) * C47947 +
                     (C21567 * C815 + C47574 * C824) * C10312 +
                     C21971 * C10309 + C21970 * C10311) *
                        C47945 +
                    ((C21567 * C437 + C47574 * C450) * C47947 +
                     (C21567 * C420 + C47574 * C436) * C10312 +
                     (C21567 * C130 + C47574 * C141) * C10309 +
                     (C21567 * C120 + C47574 * C131) * C10311) *
                        C15891) *
                       C47647 * C47629 * C111 +
                   (((C21567 * C121 + C47574 * C132) * C10311 +
                     (C21567 * C133 + C47574 * C142) * C10309 +
                     (C21567 * C422 + C47574 * C441) * C10312 +
                     (C21567 * C440 + C47574 * C452) * C47947) *
                        C15891 +
                    ((C21567 * C269 + C47574 * C288) * C10311 +
                     (C21567 * C287 + C47574 * C299) * C10309 +
                     (C21567 * C816 + C47574 * C825) * C10312 +
                     (C21567 * C826 + C47574 * C831) * C47947) *
                        C47945) *
                       C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47967 -
                    ((C22596 * C47947 + C22595 * C10312 + C22248 * C10309 +
                      C22249 * C10311) *
                         C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47956 +
                    ((C26310 * C10311 + C26309 * C10309 +
                      (C21567 * C1846 + C47574 * C1855) * C10312 +
                      (C21567 * C1852 + C47574 * C1864) * C47947) *
                         C15891 +
                     (C22595 * C10311 + C22596 * C10309 + C23644 * C10312 +
                      C23643 * C47947) *
                         C47945) *
                        C47930) *
                       C47629 * C258 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C22250 * C10311 + C22251 * C10309 + C23428 * C10312 +
                      C23427 * C47947) *
                         C47945) *
                        C47956 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47967 -
                    (((C21567 * C2229 + C47574 * C2232) * C47947 +
                      (C21567 * C2223 + C47574 * C2226) * C10312 +
                      C23427 * C10309 + C23428 * C10311) *
                         C47945 +
                     ((C21567 * C1851 + C47574 * C1863) * C47947 +
                      (C21567 * C1845 + C47574 * C1854) * C10312 +
                      C26314 * C10309 + C26313 * C10311) *
                         C15891) *
                        C47930) *
                       C47629 * C259 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47967 -
                    ((C26317 * C47947 + C26318 * C10312 + C22256 * C10309 +
                      C22257 * C10311) *
                         C47945 +
                     (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                      C26315 * C10311) *
                         C15891) *
                        C47956 +
                    ((C26320 * C10311 + C26319 * C10309 +
                      (C21567 * C1844 + C47574 * C1853) * C10312 +
                      (C21567 * C1850 + C47574 * C1862) * C47947) *
                         C15891 +
                     (C26318 * C10311 + C26317 * C10309 +
                      (C21567 * C2224 + C47574 * C2227) * C10312 +
                      (C21567 * C2230 + C47574 * C2233) * C47947) *
                         C47945) *
                        C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C942 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C943 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47963 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C943 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C942 -
                    ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
                      C21725 * C10311) *
                         C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47927) *
                       C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C942 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C943 +
                    ((C26132 + C26131 + C26130 + C26129) * C15891 +
                     (C21732 * C10311 + C21731 * C10309 +
                      (C21567 * C1544 + C47574 * C1547) * C10312 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C10311 +
                     (C21567 * C127 + C47574 * C138) * C10309 +
                     C26307 * C10312 + C26308 * C47947) *
                        C15891 +
                    (C26109 + C26110 + C26111 + C26112) * C47945) *
                       C47647 * C1010 -
                   ((C26113 + C26114 + C26115 + C26116) * C47945 +
                    (C26112 + C26111 + C26110 + C26109) * C15891) *
                       C47647 * C1011 +
                   ((C26116 + C26115 + C26114 + C26113) * C15891 +
                    (C27031 + C27032 + C27033 + C27034) * C47945) *
                       C47647 * C1012 -
                   ((C27035 + C27036 + C27037 + C27038) * C47945 +
                    (C27034 + C27033 + C27032 + C27031) * C15891) *
                       C47647 * C1013 +
                   ((C27038 + C27037 + C27036 + C27035) * C15891 +
                    (C22458 * C10311 + C22457 * C10309 +
                     (C21567 * C22971 + C47574 * C22972) * C10312 +
                     (C21567 * C22973 + C47574 * C22974) * C47947) *
                        C47945) *
                       C47647 * C1014) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47967 -
                    ((C26791 + C26792 + C26793 + C26794) * C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47956 +
                    ((C26310 * C10311 + C26309 * C10309 +
                      (C21567 * C1846 + C47574 * C1855) * C10312 +
                      (C21567 * C1852 + C47574 * C1864) * C47947) *
                         C15891 +
                     (C27185 + C27186 + C27187 + C27188) * C47945) *
                        C47930) *
                       C942 +
                   (((C26794 + C26793 + C26792 + C26791) * C15891 +
                     (C27189 + C27190 + C27191 + C27192) * C47945) *
                        C47956 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47967 -
                    ((C27193 + C27194 + C27195 + C27196) * C47945 +
                     (C27188 + C27187 + C27186 + C27185) * C15891) *
                        C47930) *
                       C943 +
                   (((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C27031 + C27032 + C27033 + C27034) * C47945) *
                        C47967 -
                    ((C22601 * C47947 + C22602 * C10312 + C22600 * C10309 +
                      C22599 * C10311) *
                         C47945 +
                     (C27192 + C27191 + C27190 + C27189) * C15891) *
                        C47956 +
                    ((C27196 + C27195 + C27194 + C27193) * C15891 +
                     (C22602 * C10311 + C22601 * C10309 +
                      (C21567 * C23628 + C47574 * C23629) * C10312 +
                      (C21567 * C23630 + C47574 * C23631) * C47947) *
                         C47945) *
                        C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47896 -
                    ((C22596 * C47947 + C22595 * C10312 + C22248 * C10309 +
                      C22249 * C10311) *
                         C47945 +
                     (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                      C26307 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C554 +
                   (((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                      C26314 * C47947) *
                         C15891 +
                     (C22250 * C10311 + C22251 * C10309 + C23428 * C10312 +
                      C23427 * C47947) *
                         C47945) *
                        C47734 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47896) *
                       C47629 * C555 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47896 -
                    ((C26317 * C47947 + C26318 * C10312 + C22256 * C10309 +
                      C22257 * C10311) *
                         C47945 +
                     (C26319 * C47947 + C26320 * C10312 + C26316 * C10309 +
                      C26315 * C10311) *
                         C15891) *
                        C47734) *
                       C47629 * C556 +
                   (((C26595 * C10311 + C26596 * C10309 +
                      (C21567 * C421 + C47574 * C439) * C10312 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C15891 +
                     (C26457 * C10311 + C26458 * C10309 +
                      (C21567 * C2014 + C47574 * C2015) * C10312 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C26460 + C26459 + C26452 + C26451) * C47945 +
                     (C26596 * C47947 + C26595 * C10312 +
                      (C21567 * C130 + C47574 * C141) * C10309 +
                      (C21567 * C120 + C47574 * C131) * C10311) *
                         C15891) *
                        C47896) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C10311 +
                       (C21567 * C127 + C47574 * C138) * C10309 +
                       C26307 * C10312 + C26308 * C47947) *
                          C15891 +
                      (C26109 + C26110 + C26111 + C26112) * C47945) *
                         C47896 -
                     ((C26791 + C26792 + C26793 + C26794) * C47945 +
                      (C26309 * C47947 + C26310 * C10312 + C26308 * C10309 +
                       C26307 * C10311) *
                          C15891) *
                         C47734) *
                        C942 +
                    (((C26794 + C26793 + C26792 + C26791) * C15891 +
                      (C27189 + C27190 + C27191 + C27192) * C47945) *
                         C47734 -
                     ((C26113 + C26114 + C26115 + C26116) * C47945 +
                      (C26112 + C26111 + C26110 + C26109) * C15891) *
                         C47896) *
                        C943 +
                    (((C26116 + C26115 + C26114 + C26113) * C15891 +
                      (C27031 + C27032 + C27033 + C27034) * C47945) *
                         C47896 -
                     ((C22601 * C47947 + C22602 * C10312 + C22600 * C10309 +
                       C22599 * C10311) *
                          C47945 +
                      (C27192 + C27191 + C27190 + C27189) * C15891) *
                         C47734) *
                        C47927) *
                       C47881 +
                   ((((C26311 * C10311 + C26312 * C10309 + C26313 * C10312 +
                       C26314 * C47947) *
                          C15891 +
                      (C26795 + C26796 + C26797 + C26798) * C47945) *
                         C47734 -
                     ((C26120 + C26119 + C26118 + C26117) * C47945 +
                      (C26312 * C47947 + C26311 * C10312 +
                       (C21567 * C128 + C47574 * C139) * C10309 +
                       (C21567 * C118 + C47574 * C125) * C10311) *
                          C15891) *
                         C47896) *
                        C942 +
                    (((C26117 + C26118 + C26119 + C26120) * C15891 +
                      (C26121 + C26122 + C26123 + C26124) * C47945) *
                         C47896 -
                     ((C27525 + C27526 + C27527 + C27528) * C47945 +
                      (C26798 + C26797 + C26796 + C26795) * C15891) *
                         C47734) *
                        C943 +
                    (((C27528 + C27527 + C27526 + C27525) * C15891 +
                      (C22871 * C10311 + C22870 * C10309 +
                       (C21567 * C5854 + C47574 * C5856) * C10312 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C27327 + C27328 + C27329 + C27330) * C47945 +
                      (C26124 + C26123 + C26122 + C26121) * C15891) *
                         C47896) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C10311 +
                     (C21567 * C127 + C47574 * C138) * C10309 +
                     (C21567 * C416 + C47574 * C429) * C10312 +
                     (C21567 * C426 + C47574 * C446) * C47947) *
                        C15891 +
                    (C21715 * C10311 + C21716 * C10309 + C22249 * C10312 +
                     C22248 * C47947) *
                        C47945) *
                       C47647 * C47629 * C108 -
                   ((C22251 * C47947 + C22250 * C10312 + C21722 * C10309 +
                     C21721 * C10311) *
                        C47945 +
                    ((C21567 * C425 + C47574 * C445) * C47947 +
                     (C21567 * C415 + C47574 * C428) * C10312 +
                     (C21567 * C128 + C47574 * C139) * C10309 +
                     (C21567 * C118 + C47574 * C125) * C10311) *
                        C15891) *
                       C47647 * C47629 * C109 +
                   (((C21567 * C119 + C47574 * C126) * C10311 +
                     (C21567 * C129 + C47574 * C140) * C10309 +
                     (C21567 * C414 + C47574 * C427) * C10312 +
                     (C21567 * C424 + C47574 * C444) * C47947) *
                        C15891 +
                    (C21727 * C10311 + C21728 * C10309 + C22257 * C10312 +
                     C22256 * C47947) *
                        C47945) *
                       C47647 * C47629 * C110 -
                   (((C21567 * C823 + C47574 * C830) * C47947 +
                     (C21567 * C815 + C47574 * C824) * C10312 +
                     C21971 * C10309 + C21970 * C10311) *
                        C47945 +
                    ((C21567 * C437 + C47574 * C450) * C47947 +
                     (C21567 * C420 + C47574 * C436) * C10312 +
                     (C21567 * C130 + C47574 * C141) * C10309 +
                     (C21567 * C120 + C47574 * C131) * C10311) *
                        C15891) *
                       C47647 * C47629 * C111 +
                   (((C21567 * C121 + C47574 * C132) * C10311 +
                     (C21567 * C133 + C47574 * C142) * C10309 +
                     (C21567 * C422 + C47574 * C441) * C10312 +
                     (C21567 * C440 + C47574 * C452) * C47947) *
                        C15891 +
                    ((C21567 * C269 + C47574 * C288) * C10311 +
                     (C21567 * C287 + C47574 * C299) * C10309 +
                     (C21567 * C816 + C47574 * C825) * C10312 +
                     (C21567 * C826 + C47574 * C831) * C47947) *
                        C47945) *
                       C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      (C21567 * C416 + C47574 * C429) * C10312 +
                      (C21567 * C426 + C47574 * C446) * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C47966 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C47954 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C258 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C47954 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     ((C21567 * C425 + C47574 * C445) * C47947 +
                      (C21567 * C415 + C47574 * C428) * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C47966 -
                    ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
                      C21725 * C10311) *
                         C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47927) *
                       C259 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      (C21567 * C414 + C47574 * C427) * C10312 +
                      (C21567 * C424 + C47574 * C444) * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C47966 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C47954 +
                    ((C26132 + C26131 + C26130 + C26129) * C15891 +
                     (C21732 * C10311 + C21731 * C10309 +
                      (C21567 * C1544 + C47574 * C1547) * C10312 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C10311 +
                      (C21567 * C127 + C47574 * C138) * C10309 +
                      C26307 * C10312 + C26308 * C47947) *
                         C15891 +
                     (C26109 + C26110 + C26111 + C26112) * C47945) *
                        C47647 * C942 -
                    ((C26113 + C26114 + C26115 + C26116) * C47945 +
                     (C26112 + C26111 + C26110 + C26109) * C15891) *
                        C47647 * C943 +
                    ((C26116 + C26115 + C26114 + C26113) * C15891 +
                     (C21720 * C10311 + C21719 * C10309 + C22599 * C10312 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47963 +
                   (((C26117 + C26118 + C26119 + C26120) * C15891 +
                     (C26121 + C26122 + C26123 + C26124) * C47945) *
                        C47647 * C943 -
                    ((C26120 + C26119 + C26118 + C26117) * C47945 +
                     (C26312 * C47947 + C26311 * C10312 +
                      (C21567 * C128 + C47574 * C139) * C10309 +
                      (C21567 * C118 + C47574 * C125) * C10311) *
                         C15891) *
                        C47647 * C942 -
                    ((C22870 * C47947 + C22871 * C10312 + C21726 * C10309 +
                      C21725 * C10311) *
                         C47945 +
                     (C26124 + C26123 + C26122 + C26121) * C15891) *
                        C47647 * C47927) *
                       C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C10311 +
                      (C21567 * C129 + C47574 * C140) * C10309 +
                      C26315 * C10312 + C26316 * C47947) *
                         C15891 +
                     (C26125 + C26126 + C26127 + C26128) * C47945) *
                        C47647 * C942 -
                    ((C26129 + C26130 + C26131 + C26132) * C47945 +
                     (C26128 + C26127 + C26126 + C26125) * C15891) *
                        C47647 * C943 +
                    ((C26132 + C26131 + C26130 + C26129) * C15891 +
                     (C21732 * C10311 + C21731 * C10309 +
                      (C21567 * C1544 + C47574 * C1547) * C10312 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C10311 +
                     (C21567 * C127 + C47574 * C138) * C10309 +
                     C26307 * C10312 + C26308 * C47947) *
                        C15891 +
                    (C26109 + C26110 + C26111 + C26112) * C47945) *
                       C47647 * C1010 -
                   ((C26113 + C26114 + C26115 + C26116) * C47945 +
                    (C26112 + C26111 + C26110 + C26109) * C15891) *
                       C47647 * C1011 +
                   ((C26116 + C26115 + C26114 + C26113) * C15891 +
                    (C27031 + C27032 + C27033 + C27034) * C47945) *
                       C47647 * C1012 -
                   ((C27035 + C27036 + C27037 + C27038) * C47945 +
                    (C27034 + C27033 + C27032 + C27031) * C15891) *
                       C47647 * C1013 +
                   ((C27038 + C27037 + C27036 + C27035) * C15891 +
                    (C22458 * C10311 + C22457 * C10309 +
                     (C21567 * C22971 + C47574 * C22972) * C10312 +
                     (C21567 * C22973 + C47574 * C22974) * C47947) *
                        C47945) *
                       C47647 * C1014) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C47688 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47695 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C2700) *
              C47606 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47695 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47688 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C2700) *
              C47615 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C47688 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47695 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47896 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C47688 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47896) *
               C47695 +
           (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
             (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
                C47835 * C47896 -
            ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
             (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
                C47835 * C47734) *
               C2700) *
              C2440 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47896) *
               C47688 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47896 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47695 +
           (((C17543 + C17542) * C31580 + (C17541 + C17540) * C31578 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47914 * C1173) *
                 C31581 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
             (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
                C47835 * C47896) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C47973 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47969 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47959 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C47647 * C47937) *
              C2440 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47969 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47973 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47959 +
           ((C17337 + C17336) * C31580 + (C17335 + C17334) * C31578 +
            (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
             C47914 * C1547) *
                C31581 +
            (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
             C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C2332 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47692 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C2332) *
              C47965 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C2332 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C16398 + C16399) * C31580 + (C16400 + C16401) * C31578 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                C31581 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C32218 + C32217) * C47947 + (C32216 + C32215) * C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47967 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47956 +
            ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
             (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
                C47835 * C47930) *
               C2332 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47956 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47967 -
            ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
             (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
                C47835 * C47930) *
               C47692) *
              C2440 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47956 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47967 -
            ((C33971 + C33972) * C47947 + (C33973 + C33974) * C31581 +
             (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
                C47835 * C47930) *
               C2332 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47967 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47956 +
            ((C18265 + C18264) * C31580 + (C18263 + C18262) * C31578 +
             (C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
              C47914 * C2227) *
                 C31581 +
             (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
              C47914 * C2233) *
                 C47947) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47896 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C2332 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47896) *
               C47692) *
              C47606 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47896) *
               C2332 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47896 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C31580 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C31578 +
             (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
                C47835 * C47896 -
            ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
             (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
                C47835 * C47734) *
               C2332 +
           (((C16761 + C16760) * C31580 + (C16759 + C16758) * C31578 +
             (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C31581 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
             (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
                C47835 * C47896) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C2332 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47692) *
              C47972 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47692 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C2332) *
              C47965 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C2332 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47692) *
              C47952 +
          (((C16398 + C16399) * C31580 + (C16400 + C16401) * C31578 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                C31581 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C32218 + C32217) * C47947 + (C32216 + C32215) * C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C47973 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47969 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47959 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C47647 * C47937) *
              C2440 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47969 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47973 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47959 +
           ((C17337 + C17336) * C31580 + (C17335 + C17334) * C31578 +
            (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
             C47914 * C1547) *
                C31581 +
            (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
             C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C3094 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C47688 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C3094) *
               C47695 +
           (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
             (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
                C47835 * C3094 -
            ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
             (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
                C47835 * C47734) *
               C2700) *
              C47881 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C3094) *
               C47688 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C3094 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47695 +
           (((C17543 + C17542) * C31580 + (C17541 + C17540) * C31578 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47914 * C1173) *
                 C31581 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
             (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
                C47835 * C3094) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47730 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47737 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
               C47835 * C3602) *
              C47688 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47737 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47730 -
           ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
            (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
               C47835 * C3602) *
              C47695 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47730 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C47737 +
           ((C17195 + C17194) * C31580 + (C17193 + C17192) * C31578 +
            (C15893 * C7243 + C15889 * C7245 + C15894 * C7244 +
             C47914 * C7246) *
                C31581 +
            (C15893 * C7247 + C15889 * C7249 + C15894 * C7248 +
             C47914 * C7250) *
                C47947) *
               C47835 * C3602) *
              C2700) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C3094 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C47973 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47734 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C3094) *
              C47969 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C3094 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C47734) *
              C47959 +
          (((C17685 + C17684) * C31580 + (C17683 + C17682) * C31578 +
            (C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
             C47914 * C5856) *
                C31581 +
            (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
             C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C3094 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C2332 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C3094) *
               C47692) *
              C47963 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C3094) *
               C2332 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C3094 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C31580 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C31578 +
             (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
                C47835 * C3094 -
            ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
             (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
                C47835 * C47734) *
               C2332 +
           (((C16761 + C16760) * C31580 + (C16759 + C16758) * C31578 +
             (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C31581 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
             (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
                C47835 * C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47974 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47971 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
               C47835 * C47962 -
           ((C33635 + C33636) * C47947 + (C33637 + C33638) * C31581 +
            (C33634 + C33633) * C31578 + (C33632 + C33631) * C31580) *
               C47835 * C47943) *
              C2332 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47971 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47974 -
           ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
            (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
               C47835 * C47962 +
           ((C18537 + C18536) * C31580 + (C18535 + C18534) * C31578 +
            (C15893 * C6769 + C15889 * C6771 + C15894 * C6770 +
             C47914 * C6772) *
                C31581 +
            (C15893 * C6773 + C15889 * C6775 + C15894 * C6774 +
             C47914 * C6776) *
                C47947) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47730 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47737 +
            ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
             (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
                C47835 * C3602) *
               C2332 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47737 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47730 -
            ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
             (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
                C47835 * C3602) *
               C47692) *
              C47881 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47737 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47730 -
            ((C33971 + C33972) * C47947 + (C33973 + C33974) * C31581 +
             (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
                C47835 * C3602) *
               C2332 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47730 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47737 +
            ((C18265 + C18264) * C31580 + (C18263 + C18262) * C31578 +
             (C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
              C47914 * C2227) *
                 C31581 +
             (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
              C47914 * C2233) *
                 C47947) *
                C47835 * C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C3094 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C2332 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C3094) *
               C47692) *
              C47963 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C3094) *
               C2332 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C3094 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C31580 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C31578 +
             (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
                C47835 * C3094 -
            ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
             (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
                C47835 * C47734) *
               C2332 +
           (((C16761 + C16760) * C31580 + (C16759 + C16758) * C31578 +
             (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C31581 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
             (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
                C47835 * C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C3094 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C47973 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47734 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C3094) *
              C47969 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C3094 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C47734) *
              C47959 +
          (((C17685 + C17684) * C31580 + (C17683 + C17682) * C31578 +
            (C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
             C47914 * C5856) *
                C31581 +
            (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
             C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C1284 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C1285 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C1286 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C1285 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C1284 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C1286 +
           ((C17337 + C17336) * C31580 + (C17335 + C17334) * C31578 +
            (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
             C47914 * C1547) *
                C31581 +
            (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
             C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C47895 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47692) *
              C554 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47692 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47895) *
              C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C47895 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47692) *
              C556 +
          (((C16398 + C16399) * C31580 + (C16400 + C16401) * C31578 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                C31581 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C15894 * C440 + C47914 * C452 + C15893 * C437 + C15889 * C450) *
                C47947 +
            (C15894 * C422 + C47914 * C441 + C15893 * C420 + C15889 * C436) *
                C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C1664 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C1665 +
            ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
             (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
                C47835 * C47930) *
               C47895 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C1665 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C1664 -
            ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
             (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
                C47835 * C47930) *
               C47692) *
              C47881 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C1665 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C1664 -
            ((C15894 * C1850 + C47914 * C1862 + C15893 * C1851 +
              C15889 * C1863) *
                 C47947 +
             (C15894 * C1844 + C47914 * C1853 + C15893 * C1845 +
              C15889 * C1854) *
                 C31581 +
             (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
                C47835 * C47930) *
               C47895 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C1664 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C1665 +
            ((C18265 + C18264) * C31580 + (C18263 + C18262) * C31578 +
             (C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
              C47914 * C2227) *
                 C31581 +
             (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
              C47914 * C2233) *
                 C47947) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47896 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C1284 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47734 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47896) *
              C1285 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47896 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C47734) *
              C1286 +
          (((C17685 + C17684) * C31580 + (C17683 + C17682) * C31578 +
            (C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
             C47914 * C5856) *
                C31581 +
            (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
             C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47896 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C47895 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47896) *
               C47692) *
              C258 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47896) *
               C47895 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47896 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47692) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C31580 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C31578 +
             (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
                C47835 * C47896 -
            ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
             (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
                C47835 * C47734) *
               C47895 +
           (((C16761 + C16760) * C31580 + (C16759 + C16758) * C31578 +
             (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C31581 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
             (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C2116 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C2117 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
               C47835 * C2118 -
           ((C33635 + C33636) * C47947 + (C33637 + C33638) * C31581 +
            (C33634 + C33633) * C31578 + (C33632 + C33631) * C31580) *
               C47835 * C47943) *
              C47895 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C2117 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C2116 -
           ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
            (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
               C47835 * C2118 +
           ((C18537 + C18536) * C31580 + (C18535 + C18534) * C31578 +
            (C15893 * C6769 + C15889 * C6771 + C15894 * C6770 +
             C47914 * C6772) *
                C31581 +
            (C15893 * C6773 + C15889 * C6775 + C15894 * C6774 +
             C47914 * C6776) *
                C47947) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                   C31580 +
               (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                   C31578 +
               (C15893 * C416 + C15889 * C429 + C15894 * C415 + C47914 * C428) *
                   C31581 +
               (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47914 * C445) *
                   C47947) *
                  C47835 * C47647 * C47629 * C108 -
              ((C15894 * C424 + C47914 * C444 + C15893 * C425 + C15889 * C445) *
                   C47947 +
               (C15894 * C414 + C47914 * C427 + C15893 * C415 + C15889 * C428) *
                   C31581 +
               (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                   C31578 +
               (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                   C31580) *
                  C47835 * C47647 * C47629 * C109 +
              ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                   C31580 +
               (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                   C31578 +
               (C15893 * C414 + C15889 * C427 + C15894 * C420 + C47914 * C436) *
                   C31581 +
               (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47914 * C450) *
                   C47947) *
                  C47835 * C47647 * C47629 * C110 -
              ((C15894 * C440 + C47914 * C452 + C15893 * C437 + C15889 * C450) *
                   C47947 +
               (C15894 * C422 + C47914 * C441 + C15893 * C420 + C15889 * C436) *
                   C31581 +
               (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                   C31578 +
               (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                   C31580) *
                  C47835 * C47647 * C47629 * C111 +
              ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47914 * C135) *
                   C31580 +
               (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47914 * C143) *
                   C31578 +
               (C15893 * C422 + C15889 * C441 + C15894 * C662 + C47914 * C663) *
                   C31581 +
               (C15893 * C440 + C15889 * C452 + C15894 * C664 + C47914 * C665) *
                   C47947) *
                  C47835 * C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15893 * C117 + C15889 * C124 + C15894 * C118 +
                 C47914 * C125) *
                    C31580 +
                (C15893 * C127 + C15889 * C138 + C15894 * C128 +
                 C47914 * C139) *
                    C31578 +
                (C15893 * C416 + C15889 * C429 + C15894 * C415 +
                 C47914 * C428) *
                    C31581 +
                (C15893 * C426 + C15889 * C446 + C15894 * C425 +
                 C47914 * C445) *
                    C47947) *
                   C47835 * C47647 * C47966 -
               ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
                (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                   C47835 * C47647 * C47954 +
               ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
                (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
                   C47835 * C47647 * C47927) *
                  C258 +
              (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
                (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                   C47835 * C47647 * C47954 -
               ((C15894 * C424 + C47914 * C444 + C15893 * C425 +
                 C15889 * C445) *
                    C47947 +
                (C15894 * C414 + C47914 * C427 + C15893 * C415 +
                 C15889 * C428) *
                    C31581 +
                (C15894 * C129 + C47914 * C140 + C15893 * C128 +
                 C15889 * C139) *
                    C31578 +
                (C15894 * C119 + C47914 * C126 + C15893 * C118 +
                 C15889 * C125) *
                    C31580) *
                   C47835 * C47647 * C47966 -
               ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
                (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
                   C47835 * C47647 * C47927) *
                  C259 +
              (((C15893 * C119 + C15889 * C126 + C15894 * C120 +
                 C47914 * C131) *
                    C31580 +
                (C15893 * C129 + C15889 * C140 + C15894 * C130 +
                 C47914 * C141) *
                    C31578 +
                (C15893 * C414 + C15889 * C427 + C15894 * C420 +
                 C47914 * C436) *
                    C31581 +
                (C15893 * C424 + C15889 * C444 + C15894 * C437 +
                 C47914 * C450) *
                    C47947) *
                   C47835 * C47647 * C47966 -
               ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
                (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
                   C47835 * C47647 * C47954 +
               ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
                (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
                 C47914 * C1441) *
                    C31581 +
                (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
                 C47914 * C1443) *
                    C47947) *
                   C47835 * C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47967 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47956 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C258 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47956 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47967 -
           ((C15894 * C1850 + C47914 * C1862 + C15893 * C1851 +
             C15889 * C1863) *
                C47947 +
            (C15894 * C1844 + C47914 * C1853 + C15893 * C1845 +
             C15889 * C1854) *
                C31581 +
            (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
               C47835 * C47930) *
              C47629 * C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47967 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C47956 +
           ((C31946 + C31945) * C31580 + (C31944 + C31943) * C31578 +
            (C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
             C47914 * C2121) *
                C31581 +
            (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
             C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C942 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C943 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C943 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C942 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C942 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C943 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
              C47835 * C47647 * C1010 -
          ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
           (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
              C47835 * C47647 * C1011 +
          ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
           (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
              C47835 * C47647 * C1012 -
          ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
           (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
              C47835 * C47647 * C1013 +
          ((C17013 + C17012) * C31580 + (C17011 + C17010) * C31578 +
           (C15893 * C6375 + C15889 * C6377 + C15894 * C6376 + C47914 * C6378) *
               C31581 +
           (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47967 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47956 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C942 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47956 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47967 -
           ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
            (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
               C47835 * C47930) *
              C943 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47967 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C47956 +
           ((C17195 + C17194) * C31580 + (C17193 + C17192) * C31578 +
            (C15893 * C7243 + C15889 * C7245 + C15894 * C7244 +
             C47914 * C7246) *
                C31581 +
            (C15893 * C7247 + C15889 * C7249 + C15894 * C7248 +
             C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C1664 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C1665 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C1665 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C1664 -
           ((C15894 * C1850 + C47914 * C1862 + C15893 * C1851 +
             C15889 * C1863) *
                C47947 +
            (C15894 * C1844 + C47914 * C1853 + C15893 * C1845 +
             C15889 * C1854) *
                C31581 +
            (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C1664 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C1665 +
           ((C31946 + C31945) * C31580 + (C31944 + C31943) * C31578 +
            (C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
             C47914 * C2121) *
                C31581 +
            (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
             C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C1664 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C1665 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47966 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C1665 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C1664 -
           ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
            (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
               C47835 * C47930) *
              C47954 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C1664 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C1665 +
           ((C17195 + C17194) * C31580 + (C17193 + C17192) * C31578 +
            (C15893 * C7243 + C15889 * C7245 + C15894 * C7244 +
             C47914 * C7246) *
                C31581 +
            (C15893 * C7247 + C15889 * C7249 + C15894 * C7248 +
             C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
              C47835 * C1839 -
          ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
           (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
              C47835 * C1840 +
          ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
           (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
              C47835 * C1841 -
          ((C33635 + C33636) * C47947 + (C33637 + C33638) * C31581 +
           (C33634 + C33633) * C31578 + (C33632 + C33631) * C31580) *
              C47835 * C1842 +
          ((C33638 + C33637) * C31580 + (C33636 + C33635) * C31578 +
           (C15893 * C12345 + C15889 * C12347 + C15894 * C12346 +
            C47914 * C12348) *
               C31581 +
           (C15893 * C12349 + C15889 * C12351 + C15894 * C12350 +
            C47914 * C12352) *
               C47947) *
              C47835 * C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47896 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C942 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47896) *
               C943 +
           (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
             (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
                C47835 * C47896 -
            ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
             (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47896) *
               C942 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47896 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C943 +
           (((C17543 + C17542) * C31580 + (C17541 + C17540) * C31578 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47914 * C1173) *
                 C31581 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
             (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47896 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C47629 * C554 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47734 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47896) *
              C47629 * C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47896 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C47734) *
              C47629 * C556 +
          (((C32215 + C32216) * C31580 + (C32217 + C32218) * C31578 +
            (C15893 * C421 + C15889 * C439 + C15894 * C423 + C47914 * C442) *
                C31581 +
            (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C32218 + C32217) * C47947 + (C32216 + C32215) * C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C2116 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C2117 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
               C47835 * C2118 -
           ((C33635 + C33636) * C47947 + (C33637 + C33638) * C31581 +
            (C33634 + C33633) * C31578 + (C33632 + C33631) * C31580) *
               C47835 * C47943) *
              C47629 * C47881 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C2117 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C2116 -
           ((C33971 + C33972) * C47947 + (C33973 + C33974) * C31581 +
            (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
               C47835 * C2118 +
           ((C33974 + C33973) * C31580 + (C33972 + C33971) * C31578 +
            (C15893 * C1848 + C15889 * C1857 + C15894 * C1849 +
             C47914 * C1858) *
                C31581 +
            (C15893 * C1860 + C15889 * C1866 + C15894 * C1861 +
             C47914 * C1867) *
                C47947) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C15893 * C416 + C15889 * C429 + C15894 * C415 + C47914 * C428) *
                C31581 +
            (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47914 * C445) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47954 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47927) *
              C258 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47954 -
           ((C15894 * C424 + C47914 * C444 + C15893 * C425 + C15889 * C445) *
                C47947 +
            (C15894 * C414 + C47914 * C427 + C15893 * C415 + C15889 * C428) *
                C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47966 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C15893 * C414 + C15889 * C427 + C15894 * C420 + C47914 * C436) *
                C31581 +
            (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47914 * C450) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47954 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C15893 * C416 + C15889 * C429 + C15894 * C415 + C47914 * C428) *
               C31581 +
           (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47914 * C445) *
               C47947) *
              C47835 * C47647 * C47629 * C108 -
          ((C15894 * C424 + C47914 * C444 + C15893 * C425 + C15889 * C445) *
               C47947 +
           (C15894 * C414 + C47914 * C427 + C15893 * C415 + C15889 * C428) *
               C31581 +
           (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
               C31578 +
           (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
               C31580) *
              C47835 * C47647 * C47629 * C109 +
          ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
               C31580 +
           (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
               C31578 +
           (C15893 * C414 + C15889 * C427 + C15894 * C420 + C47914 * C436) *
               C31581 +
           (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47914 * C450) *
               C47947) *
              C47835 * C47647 * C47629 * C110 -
          ((C15894 * C440 + C47914 * C452 + C15893 * C437 + C15889 * C450) *
               C47947 +
           (C15894 * C422 + C47914 * C441 + C15893 * C420 + C15889 * C436) *
               C31581 +
           (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
               C31578 +
           (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
               C31580) *
              C47835 * C47647 * C47629 * C111 +
          ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47914 * C135) *
               C31580 +
           (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47914 * C143) *
               C31578 +
           (C15893 * C422 + C15889 * C441 + C15894 * C662 + C47914 * C663) *
               C31581 +
           (C15893 * C440 + C15889 * C452 + C15894 * C664 + C47914 * C665) *
               C47947) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C942 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C943 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C943 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C942 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C942 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C943 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
              C47835 * C47647 * C1010 -
          ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
           (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
              C47835 * C47647 * C1011 +
          ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
           (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
              C47835 * C47647 * C1012 -
          ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
           (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
              C47835 * C47647 * C1013 +
          ((C17013 + C17012) * C31580 + (C17011 + C17010) * C31578 +
           (C15893 * C6375 + C15889 * C6377 + C15894 * C6376 + C47914 * C6378) *
               C31581 +
           (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C1664 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C1665 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47963 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C1665 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C1664 -
           ((C15894 * C1850 + C47914 * C1862 + C15893 * C1851 +
             C15889 * C1863) *
                C47947 +
            (C15894 * C1844 + C47914 * C1853 + C15893 * C1845 +
             C15889 * C1854) *
                C31581 +
            (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C1664 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C1665 +
           ((C31946 + C31945) * C31580 + (C31944 + C31943) * C31578 +
            (C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
             C47914 * C2121) *
                C31581 +
            (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
             C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C1664 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C1665 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47966 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C1665 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C1664 -
           ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
            (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
               C47835 * C47930) *
              C47954 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C1664 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C1665 +
           ((C17195 + C17194) * C31580 + (C17193 + C17192) * C31578 +
            (C15893 * C7243 + C15889 * C7245 + C15894 * C7244 +
             C47914 * C7246) *
                C31581 +
            (C15893 * C7247 + C15889 * C7249 + C15894 * C7248 +
             C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C3094 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C47895 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C3094) *
               C47692) *
              C47606 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C3094) *
               C47895 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C3094 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C31580 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C31578 +
             (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
                C47835 * C3094 -
            ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
             (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
                C47835 * C47734) *
               C47895 +
           (((C16761 + C16760) * C31580 + (C16759 + C16758) * C31578 +
             (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C31581 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
             (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
                C47835 * C3094) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47730 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47737 +
            ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
             (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
                C47835 * C3602) *
               C47895 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47737 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47730 -
            ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
             (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
                C47835 * C3602) *
               C47692) *
              C2440 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47737 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47730 -
            ((C33971 + C33972) * C47947 + (C33973 + C33974) * C31581 +
             (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
                C47835 * C3602) *
               C47895 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47730 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47737 +
            ((C18265 + C18264) * C31580 + (C18263 + C18262) * C31578 +
             (C15893 * C2223 + C15889 * C2226 + C15894 * C2224 +
              C47914 * C2227) *
                 C31581 +
             (C15893 * C2229 + C15889 * C2232 + C15894 * C2230 +
              C47914 * C2233) *
                 C47947) *
                C47835 * C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C3094 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C47966 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C3094) *
               C47954 +
           (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
             (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
                C47835 * C3094 -
            ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
             (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
                C47835 * C47734) *
               C47927) *
              C2440 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C3094) *
               C47966 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C3094 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47954 +
           (((C17543 + C17542) * C31580 + (C17541 + C17540) * C31578 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47914 * C1173) *
                 C31581 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
             (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
                C47835 * C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C3094 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47734 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C3094) *
              C47629 * C47965 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C3094 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C32215 + C32216) * C31580 + (C32217 + C32218) * C31578 +
            (C15893 * C421 + C15889 * C439 + C15894 * C423 + C47914 * C442) *
                C31581 +
            (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C32218 + C32217) * C47947 + (C32216 + C32215) * C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47974 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47971 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
               C47835 * C47962 -
           ((C33635 + C33636) * C47947 + (C33637 + C33638) * C31581 +
            (C33634 + C33633) * C31578 + (C33632 + C33631) * C31580) *
               C47835 * C47943) *
              C47629 * C2440 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47971 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47974 -
           ((C33971 + C33972) * C47947 + (C33973 + C33974) * C31581 +
            (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
               C47835 * C47962 +
           ((C33974 + C33973) * C31580 + (C33972 + C33971) * C31578 +
            (C15893 * C1848 + C15889 * C1857 + C15894 * C1849 +
             C47914 * C1858) *
                C31581 +
            (C15893 * C1860 + C15889 * C1866 + C15894 * C1861 +
             C47914 * C1867) *
                C47947) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47730 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47737 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C33631 + C33632) * C31581 + (C33633 + C33634) * C47947) *
               C47835 * C3602) *
              C47629 * C47606 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47737 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47730 -
           ((C33971 + C33972) * C47947 + (C33973 + C33974) * C31581 +
            (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
               C47835 * C3602) *
              C47629 * C47615 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47730 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C47737 +
           ((C31946 + C31945) * C31580 + (C31944 + C31943) * C31578 +
            (C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
             C47914 * C2121) *
                C31581 +
            (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
             C47914 * C2123) *
                C47947) *
               C47835 * C3602) *
              C47629 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C3094 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C47629 * C47972 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47734 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C3094) *
              C47629 * C47965 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C3094 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C47734) *
              C47629 * C47952 +
          (((C32215 + C32216) * C31580 + (C32217 + C32218) * C31578 +
            (C15893 * C421 + C15889 * C439 + C15894 * C423 + C47914 * C442) *
                C31581 +
            (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C32218 + C32217) * C47947 + (C32216 + C32215) * C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C3094 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C47966 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C3094) *
               C47954 +
           (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
             (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
                C47835 * C3094 -
            ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
             (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
                C47835 * C47734) *
               C47927) *
              C2440 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C3094) *
               C47966 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C3094 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47954 +
           (((C17543 + C17542) * C31580 + (C17541 + C17540) * C31578 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47914 * C1173) *
                 C31581 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
             (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
                C47835 * C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C47895 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47692) *
              C554 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47692 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47895) *
              C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C47895 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47692) *
              C556 +
          (((C16398 + C16399) * C31580 + (C16400 + C16401) * C31578 +
            (C15893 * C815 + C15889 * C824 + C15894 * C816 + C47914 * C825) *
                C31581 +
            (C15893 * C823 + C15889 * C830 + C15894 * C826 + C47914 * C831) *
                C47947) *
               C47835 * C47647 * C47692 -
           ((C15894 * C440 + C47914 * C452 + C15893 * C437 + C15889 * C450) *
                C47947 +
            (C15894 * C422 + C47914 * C441 + C15893 * C420 + C15889 * C436) *
                C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C1284 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C1285 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C1286 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C47647 * C47937) *
              C47881 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C1285 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C1284 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C1286 +
           ((C17337 + C17336) * C31580 + (C17335 + C17334) * C31578 +
            (C15893 * C1543 + C15889 * C1546 + C15894 * C1544 +
             C47914 * C1547) *
                C31581 +
            (C15893 * C1549 + C15889 * C1552 + C15894 * C1550 +
             C47914 * C1553) *
                C47947) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47896 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C47895 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47896) *
               C47692) *
              C258 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47896) *
               C47895 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47896 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C47692) *
              C259 +
          ((((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                 C31580 +
             (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                 C31578 +
             (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
                C47835 * C47896 -
            ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
             (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
                C47835 * C47734) *
               C47895 +
           (((C16761 + C16760) * C31580 + (C16759 + C16758) * C31578 +
             (C15893 * C1150 + C15889 * C1162 + C15894 * C2014 +
              C47914 * C2015) *
                 C31581 +
             (C15893 * C1159 + C15889 * C1177 + C15894 * C2016 +
              C47914 * C2017) *
                 C47947) *
                C47835 * C47734 -
            ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
             (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47896 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C1284 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47734 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47896) *
              C1285 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47896 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C47734) *
              C1286 +
          (((C17685 + C17684) * C31580 + (C17683 + C17682) * C31578 +
            (C15893 * C5853 + C15889 * C5855 + C15894 * C5854 +
             C47914 * C5856) *
                C31581 +
            (C15893 * C5857 + C15889 * C5859 + C15894 * C5858 +
             C47914 * C5860) *
                C47947) *
               C47835 * C47734 -
           ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
            (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C15893 * C416 + C15889 * C429 + C15894 * C415 + C47914 * C428) *
                C31581 +
            (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47914 * C445) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47954 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47927) *
              C258 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47954 -
           ((C15894 * C424 + C47914 * C444 + C15893 * C425 + C15889 * C445) *
                C47947 +
            (C15894 * C414 + C47914 * C427 + C15893 * C415 + C15889 * C428) *
                C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47966 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C15893 * C414 + C15889 * C427 + C15894 * C420 + C47914 * C436) *
                C31581 +
            (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47914 * C450) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47954 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C15893 * C416 + C15889 * C429 + C15894 * C415 + C47914 * C428) *
               C31581 +
           (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47914 * C445) *
               C47947) *
              C47835 * C47647 * C47629 * C108 -
          ((C15894 * C424 + C47914 * C444 + C15893 * C425 + C15889 * C445) *
               C47947 +
           (C15894 * C414 + C47914 * C427 + C15893 * C415 + C15889 * C428) *
               C31581 +
           (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
               C31578 +
           (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
               C31580) *
              C47835 * C47647 * C47629 * C109 +
          ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
               C31580 +
           (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
               C31578 +
           (C15893 * C414 + C15889 * C427 + C15894 * C420 + C47914 * C436) *
               C31581 +
           (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47914 * C450) *
               C47947) *
              C47835 * C47647 * C47629 * C110 -
          ((C15894 * C440 + C47914 * C452 + C15893 * C437 + C15889 * C450) *
               C47947 +
           (C15894 * C422 + C47914 * C441 + C15893 * C420 + C15889 * C436) *
               C31581 +
           (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
               C31578 +
           (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
               C31580) *
              C47835 * C47647 * C47629 * C111 +
          ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47914 * C135) *
               C31580 +
           (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47914 * C143) *
               C31578 +
           (C15893 * C422 + C15889 * C441 + C15894 * C662 + C47914 * C663) *
               C31581 +
           (C15893 * C440 + C15889 * C452 + C15894 * C664 + C47914 * C665) *
               C47947) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47967 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47956 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C47629 * C258 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47956 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47967 -
           ((C15894 * C1850 + C47914 * C1862 + C15893 * C1851 +
             C15889 * C1863) *
                C47947 +
            (C15894 * C1844 + C47914 * C1853 + C15893 * C1845 +
             C15889 * C1854) *
                C31581 +
            (C31938 + C31937) * C31578 + (C31936 + C31935) * C31580) *
               C47835 * C47930) *
              C47629 * C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47967 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C47956 +
           ((C31946 + C31945) * C31580 + (C31944 + C31943) * C31578 +
            (C15893 * C1844 + C15889 * C1853 + C15894 * C2120 +
             C47914 * C2121) *
                C31581 +
            (C15893 * C1850 + C15889 * C1862 + C15894 * C2122 +
             C47914 * C2123) *
                C47947) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C942 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C943 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C943 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C942 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C942 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C943 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
              C47835 * C47647 * C1010 -
          ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
           (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
              C47835 * C47647 * C1011 +
          ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
           (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
              C47835 * C47647 * C1012 -
          ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
           (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
              C47835 * C47647 * C1013 +
          ((C17013 + C17012) * C31580 + (C17011 + C17010) * C31578 +
           (C15893 * C6375 + C15889 * C6377 + C15894 * C6376 + C47914 * C6378) *
               C31581 +
           (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47967 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47956 +
           ((C31930 + C31929) * C31580 + (C31928 + C31927) * C31578 +
            (C15893 * C1846 + C15889 * C1855 + C15894 * C1845 +
             C47914 * C1854) *
                C31581 +
            (C15893 * C1852 + C15889 * C1864 + C15894 * C1851 +
             C47914 * C1863) *
                C47947) *
               C47835 * C47930) *
              C942 +
          (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
            (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
               C47835 * C47956 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47967 -
           ((C18534 + C18535) * C47947 + (C18536 + C18537) * C31581 +
            (C17187 + C17186) * C31578 + (C17185 + C17184) * C31580) *
               C47835 * C47930) *
              C943 +
          (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47967 -
           ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
            (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
               C47835 * C47956 +
           ((C17195 + C17194) * C31580 + (C17193 + C17192) * C31578 +
            (C15893 * C7243 + C15889 * C7245 + C15894 * C7244 +
             C47914 * C7246) *
                C31581 +
            (C15893 * C7247 + C15889 * C7249 + C15894 * C7248 +
             C47914 * C7250) *
                C47947) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47896 -
           ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
            (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
               C47835 * C47734) *
              C47629 * C554 +
          (((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
            (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
               C47835 * C47734 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47896) *
              C47629 * C555 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47896 -
           ((C31943 + C31944) * C47947 + (C31945 + C31946) * C31581 +
            (C31942 + C31941) * C31578 + (C31940 + C31939) * C31580) *
               C47835 * C47734) *
              C47629 * C556 +
          (((C32215 + C32216) * C31580 + (C32217 + C32218) * C31578 +
            (C15893 * C421 + C15889 * C439 + C15894 * C423 + C47914 * C442) *
                C31581 +
            (C15893 * C438 + C15889 * C451 + C15894 * C443 + C47914 * C453) *
                C47947) *
               C47835 * C47734 -
           ((C32218 + C32217) * C47947 + (C32216 + C32215) * C31581 +
            (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
                C31578 +
            (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
                C31580) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                 C31580 +
             (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                 C31578 +
             (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
                C47835 * C47896 -
            ((C31927 + C31928) * C47947 + (C31929 + C31930) * C31581 +
             (C31926 + C31925) * C31578 + (C31924 + C31923) * C31580) *
                C47835 * C47734) *
               C942 +
           (((C16753 + C16752) * C31580 + (C16751 + C16750) * C31578 +
             (C17184 + C17185) * C31581 + (C17186 + C17187) * C47947) *
                C47835 * C47734 -
            ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
             (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
                C47835 * C47896) *
               C943 +
           (((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
             (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
                C47835 * C47896 -
            ((C17192 + C17193) * C47947 + (C17194 + C17195) * C31581 +
             (C17191 + C17190) * C31578 + (C17189 + C17188) * C31580) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          ((((C31931 + C31932) * C31580 + (C31933 + C31934) * C31578 +
             (C31935 + C31936) * C31581 + (C31937 + C31938) * C47947) *
                C47835 * C47734 -
            ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
             (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                 C31578 +
             (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                 C31580) *
                C47835 * C47896) *
               C942 +
           (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
             (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
                C47835 * C47896 -
            ((C18262 + C18263) * C47947 + (C18264 + C18265) * C31581 +
             (C16757 + C16756) * C31578 + (C16755 + C16754) * C31580) *
                C47835 * C47734) *
               C943 +
           (((C17543 + C17542) * C31580 + (C17541 + C17540) * C31578 +
             (C15893 * C1157 + C15889 * C1172 + C15894 * C1158 +
              C47914 * C1173) *
                 C31581 +
             (C15893 * C1175 + C15889 * C1184 + C15894 * C1176 +
              C47914 * C1185) *
                 C47947) *
                C47835 * C47734 -
            ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
             (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C15893 * C416 + C15889 * C429 + C15894 * C415 + C47914 * C428) *
               C31581 +
           (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47914 * C445) *
               C47947) *
              C47835 * C47647 * C47629 * C108 -
          ((C15894 * C424 + C47914 * C444 + C15893 * C425 + C15889 * C445) *
               C47947 +
           (C15894 * C414 + C47914 * C427 + C15893 * C415 + C15889 * C428) *
               C31581 +
           (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
               C31578 +
           (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
               C31580) *
              C47835 * C47647 * C47629 * C109 +
          ((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
               C31580 +
           (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
               C31578 +
           (C15893 * C414 + C15889 * C427 + C15894 * C420 + C47914 * C436) *
               C31581 +
           (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47914 * C450) *
               C47947) *
              C47835 * C47647 * C47629 * C110 -
          ((C15894 * C440 + C47914 * C452 + C15893 * C437 + C15889 * C450) *
               C47947 +
           (C15894 * C422 + C47914 * C441 + C15893 * C420 + C15889 * C436) *
               C31581 +
           (C15894 * C133 + C47914 * C142 + C15893 * C130 + C15889 * C141) *
               C31578 +
           (C15894 * C121 + C47914 * C132 + C15893 * C120 + C15889 * C131) *
               C31580) *
              C47835 * C47647 * C47629 * C111 +
          ((C15893 * C121 + C15889 * C132 + C15894 * C122 + C47914 * C135) *
               C31580 +
           (C15893 * C133 + C15889 * C142 + C15894 * C134 + C47914 * C143) *
               C31578 +
           (C15893 * C422 + C15889 * C441 + C15894 * C662 + C47914 * C663) *
               C31581 +
           (C15893 * C440 + C15889 * C452 + C15894 * C664 + C47914 * C665) *
               C47947) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C15893 * C416 + C15889 * C429 + C15894 * C415 + C47914 * C428) *
                C31581 +
            (C15893 * C426 + C15889 * C446 + C15894 * C425 + C47914 * C445) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C47954 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47927) *
              C258 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C47954 -
           ((C15894 * C424 + C47914 * C444 + C15893 * C425 + C15889 * C445) *
                C47947 +
            (C15894 * C414 + C47914 * C427 + C15893 * C415 + C15889 * C428) *
                C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C47966 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C15893 * C414 + C15889 * C427 + C15894 * C420 + C47914 * C436) *
                C31581 +
            (C15893 * C424 + C15889 * C444 + C15894 * C437 + C47914 * C450) *
                C47947) *
               C47835 * C47647 * C47966 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C47954 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
                C31580 +
            (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
                C31578 +
            (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
               C47835 * C47647 * C942 -
           ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
            (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
               C47835 * C47647 * C943 +
           ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
            (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
               C47835 * C47647 * C47927) *
              C47963 +
          (((C16098 + C16099) * C31580 + (C16100 + C16101) * C31578 +
            (C16754 + C16755) * C31581 + (C16756 + C16757) * C47947) *
               C47835 * C47647 * C943 -
           ((C31934 + C31933) * C47947 + (C31932 + C31931) * C31581 +
            (C15894 * C129 + C47914 * C140 + C15893 * C128 + C15889 * C139) *
                C31578 +
            (C15894 * C119 + C47914 * C126 + C15893 * C118 + C15889 * C125) *
                C31580) *
               C47835 * C47647 * C942 -
           ((C17540 + C17541) * C47947 + (C17542 + C17543) * C31581 +
            (C16105 + C16104) * C31578 + (C16103 + C16102) * C31580) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C15893 * C119 + C15889 * C126 + C15894 * C120 + C47914 * C131) *
                C31580 +
            (C15893 * C129 + C15889 * C140 + C15894 * C130 + C47914 * C141) *
                C31578 +
            (C31939 + C31940) * C31581 + (C31941 + C31942) * C47947) *
               C47835 * C47647 * C942 -
           ((C16758 + C16759) * C47947 + (C16760 + C16761) * C31581 +
            (C16109 + C16108) * C31578 + (C16107 + C16106) * C31580) *
               C47835 * C47647 * C943 +
           ((C16113 + C16112) * C31580 + (C16111 + C16110) * C31578 +
            (C15893 * C1153 + C15889 * C1168 + C15894 * C1440 +
             C47914 * C1441) *
                C31581 +
            (C15893 * C1165 + C15889 * C1180 + C15894 * C1442 +
             C47914 * C1443) *
                C47947) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15893 * C117 + C15889 * C124 + C15894 * C118 + C47914 * C125) *
               C31580 +
           (C15893 * C127 + C15889 * C138 + C15894 * C128 + C47914 * C139) *
               C31578 +
           (C31923 + C31924) * C31581 + (C31925 + C31926) * C47947) *
              C47835 * C47647 * C1010 -
          ((C16750 + C16751) * C47947 + (C16752 + C16753) * C31581 +
           (C16093 + C16092) * C31578 + (C16091 + C16090) * C31580) *
              C47835 * C47647 * C1011 +
          ((C16097 + C16096) * C31580 + (C16095 + C16094) * C31578 +
           (C17188 + C17189) * C31581 + (C17190 + C17191) * C47947) *
              C47835 * C47647 * C1012 -
          ((C17682 + C17683) * C47947 + (C17684 + C17685) * C31581 +
           (C17009 + C17008) * C31578 + (C17007 + C17006) * C31580) *
              C47835 * C47647 * C1013 +
          ((C17013 + C17012) * C31580 + (C17011 + C17010) * C31578 +
           (C15893 * C6375 + C15889 * C6377 + C15894 * C6376 + C47914 * C6378) *
               C31581 +
           (C15893 * C6379 + C15889 * C6381 + C15894 * C6380 + C47914 * C6382) *
               C47947) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47688 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47695 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47647 * C2700) *
                       C47606 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47695 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47688 -
                    ((C38461 + C38462 + C38463 + C38464) * C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C2700) *
                       C47615 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C47688 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47695 +
                    ((C37320 + C37319 + C37318 + C37317) * C4577 +
                     (C21732 * C31580 + C21731 * C31578 +
                      (C21567 * C1544 + C47574 * C1547) * C31581 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47896 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C47688 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47896) *
                        C47695 +
                    (((C37304 + C37303 + C37302 + C37301) * C4577 +
                      (C38165 + C38166 + C38167 + C38168) * C47945) *
                         C47896 -
                     ((C38793 + C38794 + C38795 + C38796) * C47945 +
                      (C38326 + C38325 + C38324 + C38323) * C4577) *
                         C47734) *
                        C2700) *
                       C2440 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47896) *
                        C47688 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47896 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47695 +
                    (((C38662 + C38661 + C38660 + C38659) * C4577 +
                      (C22871 * C31580 + C22870 * C31578 +
                       (C21567 * C5854 + C47574 * C5856) * C31581 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C38461 + C38462 + C38463 + C38464) * C47945 +
                      (C37312 + C37311 + C37310 + C37309) * C4577) *
                         C47896) *
                        C2700) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47973 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47969 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47647 * C47959 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C47647 * C47937) *
                       C2440 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47969 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47973 -
                    ((C38461 + C38462 + C38463 + C38464) * C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47959 +
                    ((C38464 + C38463 + C38462 + C38461) * C4577 +
                     (C22716 * C31580 + C22715 * C31578 +
                      (C21567 * C6376 + C47574 * C6378) * C31581 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C2332 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47692) *
                       C47972 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47692 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C2332) *
                       C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C2332 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47692) *
                       C47952 +
                   (((C37597 + C37598 + C37599 + C37600) * C4577 +
                     (C21972 * C31580 + C21973 * C31578 +
                      (C21567 * C1440 + C47574 * C1441) * C31581 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C47647 * C2332) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47967 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47956 +
                     ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                       C28054 * C47947) *
                          C4577 +
                      (C38319 + C38320 + C38321 + C38322) * C47945) *
                         C47930) *
                        C2332 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47956 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47967 -
                     ((C38327 + C38328 + C38329 + C38330) * C47945 +
                      (C38322 + C38321 + C38320 + C38319) * C4577) *
                         C47930) *
                        C47692) *
                       C2440 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47956 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47967 -
                     ((C39365 + C39366 + C39367 + C39368) * C47945 +
                      (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                       C26313 * C31580) *
                          C4577) *
                         C47930) *
                        C2332 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47967 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47956 +
                     ((C39368 + C39367 + C39366 + C39365) * C4577 +
                      (C23426 * C31580 + C23425 * C31578 +
                       (C21567 * C7244 + C47574 * C7246) * C31581 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C47930) *
                        C47692) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47896 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C2332 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47896) *
                        C47692) *
                       C47606 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47896) *
                        C2332 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47896 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47692) *
                       C47615 +
                   (((((C21567 * C119 + C47574 * C126) * C31580 +
                       (C21567 * C129 + C47574 * C140) * C31578 +
                       C26315 * C31581 + C26316 * C47947) *
                          C4577 +
                      (C37313 + C37314 + C37315 + C37316) * C47945) *
                         C47896 -
                     ((C37933 + C37934 + C37935 + C37936) * C47945 +
                      (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                       C26315 * C31580) *
                          C4577) *
                         C47734) *
                        C2332 +
                    (((C37936 + C37935 + C37934 + C37933) * C4577 +
                      (C22255 * C31580 + C22254 * C31578 +
                       (C21567 * C1158 + C47574 * C1173) * C31581 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C37317 + C37318 + C37319 + C37320) * C47945 +
                      (C37316 + C37315 + C37314 + C37313) * C4577) *
                         C47896) *
                        C47692) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C2332 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47692) *
                       C47972 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47692 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C2332) *
                       C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C2332 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47692) *
                       C47952 +
                   (((C37597 + C37598 + C37599 + C37600) * C4577 +
                     (C21972 * C31580 + C21973 * C31578 +
                      (C21567 * C1440 + C47574 * C1441) * C31581 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C47647 * C2332) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47973 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47969 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47647 * C47959 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C47647 * C47937) *
                       C2440 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47969 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47973 -
                    ((C38461 + C38462 + C38463 + C38464) * C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47959 +
                    ((C38464 + C38463 + C38462 + C38461) * C4577 +
                     (C22716 * C31580 + C22715 * C31578 +
                      (C21567 * C6376 + C47574 * C6378) * C31581 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C3094 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C47688 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C3094) *
                        C47695 +
                    (((C37304 + C37303 + C37302 + C37301) * C4577 +
                      (C38165 + C38166 + C38167 + C38168) * C47945) *
                         C3094 -
                     ((C38793 + C38794 + C38795 + C38796) * C47945 +
                      (C38326 + C38325 + C38324 + C38323) * C4577) *
                         C47734) *
                        C2700) *
                       C47881 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C3094) *
                        C47688 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C3094 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47695 +
                    (((C38662 + C38661 + C38660 + C38659) * C4577 +
                      (C22871 * C31580 + C22870 * C31578 +
                       (C21567 * C5854 + C47574 * C5856) * C31581 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C38461 + C38462 + C38463 + C38464) * C47945 +
                      (C37312 + C37311 + C37310 + C37309) * C4577) *
                         C3094) *
                        C2700) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[181] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47730 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47737 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C3602) *
                       C47688 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C47737 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47730 -
                    ((C38327 + C38328 + C38329 + C38330) * C47945 +
                     (C38322 + C38321 + C38320 + C38319) * C4577) *
                        C3602) *
                       C47695 +
                   (((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47730 -
                    ((C38793 + C38794 + C38795 + C38796) * C47945 +
                     (C38326 + C38325 + C38324 + C38323) * C4577) *
                        C47737 +
                    ((C38330 + C38329 + C38328 + C38327) * C4577 +
                     (C22602 * C31580 + C22601 * C31578 +
                      (C21567 * C23628 + C47574 * C23629) * C31581 +
                      (C21567 * C23630 + C47574 * C23631) * C47947) *
                         C47945) *
                        C3602) *
                       C2700) *
                  C47601) /
                 (p * q * std::sqrt(p + q));
    d2ee[182] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C3094 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C47973 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C47734 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C3094) *
                       C47969 +
                   (((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C3094 -
                    ((C38793 + C38794 + C38795 + C38796) * C47945 +
                     (C38326 + C38325 + C38324 + C38323) * C4577) *
                        C47734) *
                       C47959 +
                   (((C38796 + C38795 + C38794 + C38793) * C4577 +
                     (C22982 * C31580 + C22981 * C31578 +
                      (C21567 * C22573 + C47574 * C22574) * C31581 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C3094) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C3094 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C2332 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C3094) *
                        C47692) *
                       C47963 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C3094) *
                        C2332 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C3094 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47692) *
                       C47950 +
                   (((((C21567 * C119 + C47574 * C126) * C31580 +
                       (C21567 * C129 + C47574 * C140) * C31578 +
                       C26315 * C31581 + C26316 * C47947) *
                          C4577 +
                      (C37313 + C37314 + C37315 + C37316) * C47945) *
                         C3094 -
                     ((C37933 + C37934 + C37935 + C37936) * C47945 +
                      (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                       C26315 * C31580) *
                          C4577) *
                         C47734) *
                        C2332 +
                    (((C37936 + C37935 + C37934 + C37933) * C4577 +
                      (C22255 * C31580 + C22254 * C31578 +
                       (C21567 * C1158 + C47574 * C1173) * C31581 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C37317 + C37318 + C37319 + C37320) * C47945 +
                      (C37316 + C37315 + C37314 + C37313) * C4577) *
                         C3094) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47974 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47971 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C47962 -
                    ((C39629 + C39630 + C39631 + C39632) * C47945 +
                     (C28057 * C47947 + C28058 * C31581 + C28054 * C31578 +
                      C28053 * C31580) *
                         C4577) *
                        C47943) *
                       C2332 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C47971 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47974 -
                    ((C38327 + C38328 + C38329 + C38330) * C47945 +
                     (C38322 + C38321 + C38320 + C38319) * C4577) *
                        C47962 +
                    ((C39632 + C39631 + C39630 + C39629) * C4577 +
                     (C23642 * C31580 + C23641 * C31578 +
                      (C21567 * C23266 + C47574 * C23267) * C31581 +
                      (C21567 * C23268 + C47574 * C23269) * C47947) *
                         C47945) *
                        C47943) *
                       C47692) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[183] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47730 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47737 +
                     ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                       C28054 * C47947) *
                          C4577 +
                      (C38319 + C38320 + C38321 + C38322) * C47945) *
                         C3602) *
                        C2332 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47737 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47730 -
                     ((C38327 + C38328 + C38329 + C38330) * C47945 +
                      (C38322 + C38321 + C38320 + C38319) * C4577) *
                         C3602) *
                        C47692) *
                       C47881 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47737 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47730 -
                     ((C39365 + C39366 + C39367 + C39368) * C47945 +
                      (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                       C26313 * C31580) *
                          C4577) *
                         C3602) *
                        C2332 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47730 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47737 +
                     ((C39368 + C39367 + C39366 + C39365) * C4577 +
                      (C23426 * C31580 + C23425 * C31578 +
                       (C21567 * C7244 + C47574 * C7246) * C31581 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C3602) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[184] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C3094 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C2332 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C3094) *
                        C47692) *
                       C47963 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C3094) *
                        C2332 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C3094 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47692) *
                       C47950 +
                   (((((C21567 * C119 + C47574 * C126) * C31580 +
                       (C21567 * C129 + C47574 * C140) * C31578 +
                       C26315 * C31581 + C26316 * C47947) *
                          C4577 +
                      (C37313 + C37314 + C37315 + C37316) * C47945) *
                         C3094 -
                     ((C37933 + C37934 + C37935 + C37936) * C47945 +
                      (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                       C26315 * C31580) *
                          C4577) *
                         C47734) *
                        C2332 +
                    (((C37936 + C37935 + C37934 + C37933) * C4577 +
                      (C22255 * C31580 + C22254 * C31578 +
                       (C21567 * C1158 + C47574 * C1173) * C31581 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C37317 + C37318 + C37319 + C37320) * C47945 +
                      (C37316 + C37315 + C37314 + C37313) * C4577) *
                         C3094) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C3094 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C47973 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C47734 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C3094) *
                       C47969 +
                   (((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C3094 -
                    ((C38793 + C38794 + C38795 + C38796) * C47945 +
                     (C38326 + C38325 + C38324 + C38323) * C4577) *
                        C47734) *
                       C47959 +
                   (((C38796 + C38795 + C38794 + C38793) * C4577 +
                     (C22982 * C31580 + C22981 * C31578 +
                      (C21567 * C22573 + C47574 * C22574) * C31581 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C3094) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[185] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C1284 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C1285 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47647 * C1286 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C47647 * C47937) *
                       C47881 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C1285 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C1284 -
                    ((C38461 + C38462 + C38463 + C38464) * C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C1286 +
                    ((C38464 + C38463 + C38462 + C38461) * C4577 +
                     (C22716 * C31580 + C22715 * C31578 +
                      (C21567 * C6376 + C47574 * C6378) * C31581 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47895 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47692) *
                       C554 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47692 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47895) *
                       C555 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C47895 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47692) *
                       C556 +
                   (((C37597 + C37598 + C37599 + C37600) * C4577 +
                     (C21972 * C31580 + C21973 * C31578 +
                      (C21567 * C1440 + C47574 * C1441) * C31581 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C47647 * C47895) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C1664 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C1665 +
                     ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                       C28054 * C47947) *
                          C4577 +
                      (C38319 + C38320 + C38321 + C38322) * C47945) *
                         C47930) *
                        C47895 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C1665 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C1664 -
                     ((C38327 + C38328 + C38329 + C38330) * C47945 +
                      (C38322 + C38321 + C38320 + C38319) * C4577) *
                         C47930) *
                        C47692) *
                       C47881 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C1665 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C1664 -
                     ((C39365 + C39366 + C39367 + C39368) * C47945 +
                      (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                       C26313 * C31580) *
                          C4577) *
                         C47930) *
                        C47895 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C1664 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C1665 +
                     ((C39368 + C39367 + C39366 + C39365) * C4577 +
                      (C23426 * C31580 + C23425 * C31578 +
                       (C21567 * C7244 + C47574 * C7246) * C31581 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C47930) *
                        C47692) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[186] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47896 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C1284 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C47734 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47896) *
                       C1285 +
                   (((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47896 -
                    ((C38793 + C38794 + C38795 + C38796) * C47945 +
                     (C38326 + C38325 + C38324 + C38323) * C4577) *
                        C47734) *
                       C1286 +
                   (((C38796 + C38795 + C38794 + C38793) * C4577 +
                     (C22982 * C31580 + C22981 * C31578 +
                      (C21567 * C22573 + C47574 * C22574) * C31581 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C47896) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47896 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C47895 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C22247 * C31580 + C22246 * C31578 + C22597 * C31581 +
                       C22598 * C47947) *
                          C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47896) *
                        C47692) *
                       C258 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47896) *
                        C47895 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47896 -
                     ((C23425 * C47947 + C23426 * C31581 + C22253 * C31578 +
                       C22252 * C31580) *
                          C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47692) *
                       C259 +
                   (((((C21567 * C119 + C47574 * C126) * C31580 +
                       (C21567 * C129 + C47574 * C140) * C31578 +
                       C26315 * C31581 + C26316 * C47947) *
                          C4577 +
                      (C37313 + C37314 + C37315 + C37316) * C47945) *
                         C47896 -
                     ((C37933 + C37934 + C37935 + C37936) * C47945 +
                      (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                       C26315 * C31580) *
                          C4577) *
                         C47734) *
                        C47895 +
                    (((C37936 + C37935 + C37934 + C37933) * C4577 +
                      (C22255 * C31580 + C22254 * C31578 +
                       (C21567 * C1158 + C47574 * C1173) * C31581 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C37317 + C37318 + C37319 + C37320) * C47945 +
                      (C37316 + C37315 + C37314 + C37313) * C4577) *
                         C47896) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C2116 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C2117 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C2118 -
                    ((C39629 + C39630 + C39631 + C39632) * C47945 +
                     (C28057 * C47947 + C28058 * C31581 + C28054 * C31578 +
                      C28053 * C31580) *
                         C4577) *
                        C47943) *
                       C47895 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C2117 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C2116 -
                    ((C38327 + C38328 + C38329 + C38330) * C47945 +
                     (C38322 + C38321 + C38320 + C38319) * C4577) *
                        C2118 +
                    ((C39632 + C39631 + C39630 + C39629) * C4577 +
                     (C23642 * C31580 + C23641 * C31578 +
                      (C21567 * C23266 + C47574 * C23267) * C31581 +
                      (C21567 * C23268 + C47574 * C23269) * C47947) *
                         C47945) *
                        C47943) *
                       C47692) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21567 * C117 + C47574 * C124) * C31580 +
                (C21567 * C127 + C47574 * C138) * C31578 + C26307 * C31581 +
                C26308 * C47947) *
                   C4577 +
               (C21715 * C31580 + C21716 * C31578 + C22249 * C31581 +
                C22248 * C47947) *
                   C47945) *
                  C47647 * C47629 * C108 -
              ((C22251 * C47947 + C22250 * C31581 + C21722 * C31578 +
                C21721 * C31580) *
                   C47945 +
               (C26312 * C47947 + C26311 * C31581 +
                (C21567 * C128 + C47574 * C139) * C31578 +
                (C21567 * C118 + C47574 * C125) * C31580) *
                   C4577) *
                  C47647 * C47629 * C109 +
              (((C21567 * C119 + C47574 * C126) * C31580 +
                (C21567 * C129 + C47574 * C140) * C31578 + C26315 * C31581 +
                C26316 * C47947) *
                   C4577 +
               (C21727 * C31580 + C21728 * C31578 + C22257 * C31581 +
                C22256 * C47947) *
                   C47945) *
                  C47647 * C47629 * C110 -
              ((C26458 * C47947 + C26457 * C31581 + C21971 * C31578 +
                C21970 * C31580) *
                   C47945 +
               (C26596 * C47947 + C26595 * C31581 +
                (C21567 * C130 + C47574 * C141) * C31578 +
                (C21567 * C120 + C47574 * C131) * C31580) *
                   C4577) *
                  C47647 * C47629 * C111 +
              (((C21567 * C121 + C47574 * C132) * C31580 +
                (C21567 * C133 + C47574 * C142) * C31578 +
                (C21567 * C422 + C47574 * C441) * C31581 +
                (C21567 * C440 + C47574 * C452) * C47947) *
                   C4577 +
               ((C21567 * C269 + C47574 * C288) * C31580 +
                (C21567 * C287 + C47574 * C299) * C31578 +
                (C21567 * C816 + C47574 * C825) * C31581 +
                (C21567 * C826 + C47574 * C831) * C47947) *
                   C47945) *
                  C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21567 * C117 + C47574 * C124) * C31580 +
                 (C21567 * C127 + C47574 * C138) * C31578 + C26307 * C31581 +
                 C26308 * C47947) *
                    C4577 +
                (C37297 + C37298 + C37299 + C37300) * C47945) *
                   C47647 * C47966 -
               ((C37301 + C37302 + C37303 + C37304) * C47945 +
                (C37300 + C37299 + C37298 + C37297) * C4577) *
                   C47647 * C47954 +
               ((C37304 + C37303 + C37302 + C37301) * C4577 +
                (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
                 C22600 * C47947) *
                    C47945) *
                   C47647 * C47927) *
                  C258 +
              (((C37305 + C37306 + C37307 + C37308) * C4577 +
                (C37309 + C37310 + C37311 + C37312) * C47945) *
                   C47647 * C47954 -
               ((C37308 + C37307 + C37306 + C37305) * C47945 +
                (C26312 * C47947 + C26311 * C31581 +
                 (C21567 * C128 + C47574 * C139) * C31578 +
                 (C21567 * C118 + C47574 * C125) * C31580) *
                    C4577) *
                   C47647 * C47966 -
               ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
                 C21725 * C31580) *
                    C47945 +
                (C37312 + C37311 + C37310 + C37309) * C4577) *
                   C47647 * C47927) *
                  C259 +
              ((((C21567 * C119 + C47574 * C126) * C31580 +
                 (C21567 * C129 + C47574 * C140) * C31578 + C26315 * C31581 +
                 C26316 * C47947) *
                    C4577 +
                (C37313 + C37314 + C37315 + C37316) * C47945) *
                   C47647 * C47966 -
               ((C37317 + C37318 + C37319 + C37320) * C47945 +
                (C37316 + C37315 + C37314 + C37313) * C4577) *
                   C47647 * C47954 +
               ((C37320 + C37319 + C37318 + C37317) * C4577 +
                (C21732 * C31580 + C21731 * C31578 +
                 (C21567 * C1544 + C47574 * C1547) * C31581 +
                 (C21567 * C1550 + C47574 * C1553) * C47947) *
                    C47945) *
                   C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21567 * C117 + C47574 * C124) * C31580 +
                                 (C21567 * C127 + C47574 * C138) * C31578 +
                                 C26307 * C31581 + C26308 * C47947) *
                                    C4577 +
                                (C37297 + C37298 + C37299 + C37300) * C47945) *
                                   C47967 -
                               ((C22596 * C47947 + C22595 * C31581 +
                                 C22248 * C31578 + C22249 * C31580) *
                                    C47945 +
                                (C26309 * C47947 + C26310 * C31581 +
                                 C26308 * C31578 + C26307 * C31580) *
                                    C4577) *
                                   C47956 +
                               ((C26310 * C31580 + C26309 * C31578 +
                                 C28053 * C31581 + C28054 * C47947) *
                                    C4577 +
                                (C22595 * C31580 + C22596 * C31578 +
                                 C23644 * C31581 + C23643 * C47947) *
                                    C47945) *
                                   C47930) *
                                  C47629 * C258 +
                              (((C26311 * C31580 + C26312 * C31578 +
                                 C26313 * C31581 + C26314 * C47947) *
                                    C4577 +
                                (C22250 * C31580 + C22251 * C31578 +
                                 C23428 * C31581 + C23427 * C47947) *
                                    C47945) *
                                   C47956 -
                               ((C37308 + C37307 + C37306 + C37305) * C47945 +
                                (C26312 * C47947 + C26311 * C31581 +
                                 (C21567 * C128 + C47574 * C139) * C31578 +
                                 (C21567 * C118 + C47574 * C125) * C31580) *
                                    C4577) *
                                   C47967 -
                               ((C28259 * C47947 + C28260 * C31581 +
                                 C23427 * C31578 + C23428 * C31580) *
                                    C47945 +
                                (C28397 * C47947 + C28398 * C31581 +
                                 C26314 * C31578 + C26313 * C31580) *
                                    C4577) *
                                   C47930) *
                                  C47629 * C259 +
                              ((((C21567 * C119 + C47574 * C126) * C31580 +
                                 (C21567 * C129 + C47574 * C140) * C31578 +
                                 C26315 * C31581 + C26316 * C47947) *
                                    C4577 +
                                (C37313 + C37314 + C37315 + C37316) * C47945) *
                                   C47967 -
                               ((C26317 * C47947 + C26318 * C31581 +
                                 C22256 * C31578 + C22257 * C31580) *
                                    C47945 +
                                (C26319 * C47947 + C26320 * C31581 +
                                 C26316 * C31578 + C26315 * C31580) *
                                    C4577) *
                                   C47956 +
                               ((C26320 * C31580 + C26319 * C31578 +
                                 (C21567 * C1844 + C47574 * C1853) * C31581 +
                                 (C21567 * C1850 + C47574 * C1862) * C47947) *
                                    C4577 +
                                (C26318 * C31580 + C26317 * C31578 +
                                 (C21567 * C2224 + C47574 * C2227) * C31581 +
                                 (C21567 * C2230 + C47574 * C2233) * C47947) *
                                    C47945) *
                                   C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C31580 +
             (C21567 * C127 + C47574 * C138) * C31578 + C26307 * C31581 +
             C26308 * C47947) *
                C4577 +
            (C37297 + C37298 + C37299 + C37300) * C47945) *
               C47647 * C942 -
           ((C37301 + C37302 + C37303 + C37304) * C47945 +
            (C37300 + C37299 + C37298 + C37297) * C4577) *
               C47647 * C943 +
           ((C37304 + C37303 + C37302 + C37301) * C4577 +
            (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
             C22600 * C47947) *
                C47945) *
               C47647 * C47927) *
              C47963 +
          (((C37305 + C37306 + C37307 + C37308) * C4577 +
            (C37309 + C37310 + C37311 + C37312) * C47945) *
               C47647 * C943 -
           ((C37308 + C37307 + C37306 + C37305) * C47945 +
            (C26312 * C47947 + C26311 * C31581 +
             (C21567 * C128 + C47574 * C139) * C31578 +
             (C21567 * C118 + C47574 * C125) * C31580) *
                C4577) *
               C47647 * C942 -
           ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
             C21725 * C31580) *
                C47945 +
            (C37312 + C37311 + C37310 + C37309) * C4577) *
               C47647 * C47927) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C31580 +
             (C21567 * C129 + C47574 * C140) * C31578 + C26315 * C31581 +
             C26316 * C47947) *
                C4577 +
            (C37313 + C37314 + C37315 + C37316) * C47945) *
               C47647 * C942 -
           ((C37317 + C37318 + C37319 + C37320) * C47945 +
            (C37316 + C37315 + C37314 + C37313) * C4577) *
               C47647 * C943 +
           ((C37320 + C37319 + C37318 + C37317) * C4577 +
            (C21732 * C31580 + C21731 * C31578 +
             (C21567 * C1544 + C47574 * C1547) * C31581 +
             (C21567 * C1550 + C47574 * C1553) * C47947) *
                C47945) *
               C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C31580 +
            (C21567 * C127 + C47574 * C138) * C31578 + C26307 * C31581 +
            C26308 * C47947) *
               C4577 +
           (C37297 + C37298 + C37299 + C37300) * C47945) *
              C47647 * C1010 -
          ((C37301 + C37302 + C37303 + C37304) * C47945 +
           (C37300 + C37299 + C37298 + C37297) * C4577) *
              C47647 * C1011 +
          ((C37304 + C37303 + C37302 + C37301) * C4577 +
           (C38165 + C38166 + C38167 + C38168) * C47945) *
              C47647 * C1012 -
          ((C38169 + C38170 + C38171 + C38172) * C47945 +
           (C38168 + C38167 + C38166 + C38165) * C4577) *
              C47647 * C1013 +
          ((C38172 + C38171 + C38170 + C38169) * C4577 +
           (C22458 * C31580 + C22457 * C31578 +
            (C21567 * C22971 + C47574 * C22972) * C31581 +
            (C21567 * C22973 + C47574 * C22974) * C47947) *
               C47945) *
              C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C31580 +
             (C21567 * C127 + C47574 * C138) * C31578 + C26307 * C31581 +
             C26308 * C47947) *
                C4577 +
            (C37297 + C37298 + C37299 + C37300) * C47945) *
               C47967 -
           ((C37925 + C37926 + C37927 + C37928) * C47945 +
            (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
             C26307 * C31580) *
                C4577) *
               C47956 +
           ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
             C28054 * C47947) *
                C4577 +
            (C38319 + C38320 + C38321 + C38322) * C47945) *
               C47930) *
              C942 +
          (((C37928 + C37927 + C37926 + C37925) * C4577 +
            (C38323 + C38324 + C38325 + C38326) * C47945) *
               C47956 -
           ((C37301 + C37302 + C37303 + C37304) * C47945 +
            (C37300 + C37299 + C37298 + C37297) * C4577) *
               C47967 -
           ((C38327 + C38328 + C38329 + C38330) * C47945 +
            (C38322 + C38321 + C38320 + C38319) * C4577) *
               C47930) *
              C943 +
          (((C37304 + C37303 + C37302 + C37301) * C4577 +
            (C38165 + C38166 + C38167 + C38168) * C47945) *
               C47967 -
           ((C22601 * C47947 + C22602 * C31581 + C22600 * C31578 +
             C22599 * C31580) *
                C47945 +
            (C38326 + C38325 + C38324 + C38323) * C4577) *
               C47956 +
           ((C38330 + C38329 + C38328 + C38327) * C4577 +
            (C22602 * C31580 + C22601 * C31578 +
             (C21567 * C23628 + C47574 * C23629) * C31581 +
             (C21567 * C23630 + C47574 * C23631) * C47947) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21567 * C117 + C47574 * C124) * C31580 +
                                 (C21567 * C127 + C47574 * C138) * C31578 +
                                 C26307 * C31581 + C26308 * C47947) *
                                    C4577 +
                                (C37297 + C37298 + C37299 + C37300) * C47945) *
                                   C1664 -
                               ((C37925 + C37926 + C37927 + C37928) * C47945 +
                                (C26309 * C47947 + C26310 * C31581 +
                                 C26308 * C31578 + C26307 * C31580) *
                                    C4577) *
                                   C1665 +
                               ((C26310 * C31580 + C26309 * C31578 +
                                 C28053 * C31581 + C28054 * C47947) *
                                    C4577 +
                                (C38319 + C38320 + C38321 + C38322) * C47945) *
                                   C47930) *
                                  C47629 * C47963 +
                              (((C26311 * C31580 + C26312 * C31578 +
                                 C26313 * C31581 + C26314 * C47947) *
                                    C4577 +
                                (C37929 + C37930 + C37931 + C37932) * C47945) *
                                   C1665 -
                               ((C37308 + C37307 + C37306 + C37305) * C47945 +
                                (C26312 * C47947 + C26311 * C31581 +
                                 (C21567 * C128 + C47574 * C139) * C31578 +
                                 (C21567 * C118 + C47574 * C125) * C31580) *
                                    C4577) *
                                   C1664 -
                               ((C28259 * C47947 + C28260 * C31581 +
                                 C23427 * C31578 + C23428 * C31580) *
                                    C47945 +
                                (C28397 * C47947 + C28398 * C31581 +
                                 C26314 * C31578 + C26313 * C31580) *
                                    C4577) *
                                   C47930) *
                                  C47629 * C47950 +
                              ((((C21567 * C119 + C47574 * C126) * C31580 +
                                 (C21567 * C129 + C47574 * C140) * C31578 +
                                 C26315 * C31581 + C26316 * C47947) *
                                    C4577 +
                                (C37313 + C37314 + C37315 + C37316) * C47945) *
                                   C1664 -
                               ((C37933 + C37934 + C37935 + C37936) * C47945 +
                                (C26319 * C47947 + C26320 * C31581 +
                                 C26316 * C31578 + C26315 * C31580) *
                                    C4577) *
                                   C1665 +
                               ((C26320 * C31580 + C26319 * C31578 +
                                 (C21567 * C1844 + C47574 * C1853) * C31581 +
                                 (C21567 * C1850 + C47574 * C1862) * C47947) *
                                    C4577 +
                                (C26318 * C31580 + C26317 * C31578 +
                                 (C21567 * C2224 + C47574 * C2227) * C31581 +
                                 (C21567 * C2230 + C47574 * C2233) * C47947) *
                                    C47945) *
                                   C47930) *
                                  C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C31580 +
             (C21567 * C127 + C47574 * C138) * C31578 + C26307 * C31581 +
             C26308 * C47947) *
                C4577 +
            (C37297 + C37298 + C37299 + C37300) * C47945) *
               C1664 -
           ((C37925 + C37926 + C37927 + C37928) * C47945 +
            (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
             C26307 * C31580) *
                C4577) *
               C1665 +
           ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
             C28054 * C47947) *
                C4577 +
            (C38319 + C38320 + C38321 + C38322) * C47945) *
               C47930) *
              C47966 +
          (((C37928 + C37927 + C37926 + C37925) * C4577 +
            (C38323 + C38324 + C38325 + C38326) * C47945) *
               C1665 -
           ((C37301 + C37302 + C37303 + C37304) * C47945 +
            (C37300 + C37299 + C37298 + C37297) * C4577) *
               C1664 -
           ((C38327 + C38328 + C38329 + C38330) * C47945 +
            (C38322 + C38321 + C38320 + C38319) * C4577) *
               C47930) *
              C47954 +
          (((C37304 + C37303 + C37302 + C37301) * C4577 +
            (C38165 + C38166 + C38167 + C38168) * C47945) *
               C1664 -
           ((C38793 + C38794 + C38795 + C38796) * C47945 +
            (C38326 + C38325 + C38324 + C38323) * C4577) *
               C1665 +
           ((C38330 + C38329 + C38328 + C38327) * C4577 +
            (C22602 * C31580 + C22601 * C31578 +
             (C21567 * C23628 + C47574 * C23629) * C31581 +
             (C21567 * C23630 + C47574 * C23631) * C47947) *
                C47945) *
               C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C31580 +
            (C21567 * C127 + C47574 * C138) * C31578 + C26307 * C31581 +
            C26308 * C47947) *
               C4577 +
           (C37297 + C37298 + C37299 + C37300) * C47945) *
              C1839 -
          ((C37925 + C37926 + C37927 + C37928) * C47945 +
           (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
            C26307 * C31580) *
               C4577) *
              C1840 +
          ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
            C28054 * C47947) *
               C4577 +
           (C38319 + C38320 + C38321 + C38322) * C47945) *
              C1841 -
          ((C28055 * C47947 + C28056 * C31581 + C23643 * C31578 +
            C23644 * C31580) *
               C47945 +
           (C28057 * C47947 + C28058 * C31581 + C28054 * C31578 +
            C28053 * C31580) *
               C4577) *
              C1842 +
          ((C28058 * C31580 + C28057 * C31578 +
            (C21567 * C12345 + C47574 * C12347) * C31581 +
            (C21567 * C12349 + C47574 * C12351) * C47947) *
               C4577 +
           (C28056 * C31580 + C28055 * C31578 +
            (C21567 * C28036 + C47574 * C28037) * C31581 +
            (C21567 * C28038 + C47574 * C28039) * C47947) *
               C47945) *
              C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[188] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47896 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C942 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47896) *
                        C943 +
                    (((C37304 + C37303 + C37302 + C37301) * C4577 +
                      (C38165 + C38166 + C38167 + C38168) * C47945) *
                         C47896 -
                     ((C22601 * C47947 + C22602 * C31581 + C22600 * C31578 +
                       C22599 * C31580) *
                          C47945 +
                      (C38326 + C38325 + C38324 + C38323) * C4577) *
                         C47734) *
                        C47927) *
                       C47881 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47896) *
                        C942 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47896 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C943 +
                    (((C38662 + C38661 + C38660 + C38659) * C4577 +
                      (C22871 * C31580 + C22870 * C31578 +
                       (C21567 * C5854 + C47574 * C5856) * C31581 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C38461 + C38462 + C38463 + C38464) * C47945 +
                      (C37312 + C37311 + C37310 + C37309) * C4577) *
                         C47896) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47896 -
                    ((C22596 * C47947 + C22595 * C31581 + C22248 * C31578 +
                      C22249 * C31580) *
                         C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C554 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C22250 * C31580 + C22251 * C31578 + C23428 * C31581 +
                      C23427 * C47947) *
                         C47945) *
                        C47734 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47896) *
                       C47629 * C555 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47896 -
                    ((C26317 * C47947 + C26318 * C31581 + C22256 * C31578 +
                      C22257 * C31580) *
                         C47945 +
                     (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                      C26315 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C556 +
                   (((C26595 * C31580 + C26596 * C31578 +
                      (C21567 * C421 + C47574 * C439) * C31581 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C4577 +
                     (C26457 * C31580 + C26458 * C31578 +
                      (C21567 * C2014 + C47574 * C2015) * C31581 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C47896) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C2116 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C2117 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C2118 -
                    ((C28055 * C47947 + C28056 * C31581 + C23643 * C31578 +
                      C23644 * C31580) *
                         C47945 +
                     (C28057 * C47947 + C28058 * C31581 + C28054 * C31578 +
                      C28053 * C31580) *
                         C4577) *
                        C47943) *
                       C47629 * C47881 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C37929 + C37930 + C37931 + C37932) * C47945) *
                        C2117 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C2116 -
                    ((C39365 + C39366 + C39367 + C39368) * C47945 +
                     (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                      C26313 * C31580) *
                         C4577) *
                        C2118 +
                    ((C28398 * C31580 + C28397 * C31578 +
                      (C21567 * C1848 + C47574 * C1857) * C31581 +
                      (C21567 * C1860 + C47574 * C1866) * C47947) *
                         C4577 +
                     (C28260 * C31580 + C28259 * C31578 +
                      (C21567 * C6770 + C47574 * C6772) * C31581 +
                      (C21567 * C6774 + C47574 * C6776) * C47947) *
                         C47945) *
                        C47943) *
                       C47629 * C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[189] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47966 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47954 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C258 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47954 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47966 -
                    ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
                      C21725 * C31580) *
                         C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47927) *
                       C259 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C47966 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47954 +
                    ((C37320 + C37319 + C37318 + C37317) * C4577 +
                     (C21732 * C31580 + C21731 * C31578 +
                      (C21567 * C1544 + C47574 * C1547) * C31581 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C31580 +
                     (C21567 * C127 + C47574 * C138) * C31578 +
                     C26307 * C31581 + C26308 * C47947) *
                        C4577 +
                    (C21715 * C31580 + C21716 * C31578 + C22249 * C31581 +
                     C22248 * C47947) *
                        C47945) *
                       C47647 * C47629 * C108 -
                   ((C22251 * C47947 + C22250 * C31581 + C21722 * C31578 +
                     C21721 * C31580) *
                        C47945 +
                    (C26312 * C47947 + C26311 * C31581 +
                     (C21567 * C128 + C47574 * C139) * C31578 +
                     (C21567 * C118 + C47574 * C125) * C31580) *
                        C4577) *
                       C47647 * C47629 * C109 +
                   (((C21567 * C119 + C47574 * C126) * C31580 +
                     (C21567 * C129 + C47574 * C140) * C31578 +
                     C26315 * C31581 + C26316 * C47947) *
                        C4577 +
                    (C21727 * C31580 + C21728 * C31578 + C22257 * C31581 +
                     C22256 * C47947) *
                        C47945) *
                       C47647 * C47629 * C110 -
                   ((C26458 * C47947 + C26457 * C31581 + C21971 * C31578 +
                     C21970 * C31580) *
                        C47945 +
                    (C26596 * C47947 + C26595 * C31581 +
                     (C21567 * C130 + C47574 * C141) * C31578 +
                     (C21567 * C120 + C47574 * C131) * C31580) *
                        C4577) *
                       C47647 * C47629 * C111 +
                   (((C21567 * C121 + C47574 * C132) * C31580 +
                     (C21567 * C133 + C47574 * C142) * C31578 +
                     (C21567 * C422 + C47574 * C441) * C31581 +
                     (C21567 * C440 + C47574 * C452) * C47947) *
                        C4577 +
                    ((C21567 * C269 + C47574 * C288) * C31580 +
                     (C21567 * C287 + C47574 * C299) * C31578 +
                     (C21567 * C816 + C47574 * C825) * C31581 +
                     (C21567 * C826 + C47574 * C831) * C47947) *
                        C47945) *
                       C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C942 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C943 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47963 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C943 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C942 -
                    ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
                      C21725 * C31580) *
                         C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47927) *
                       C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C942 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C943 +
                    ((C37320 + C37319 + C37318 + C37317) * C4577 +
                     (C21732 * C31580 + C21731 * C31578 +
                      (C21567 * C1544 + C47574 * C1547) * C31581 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C31580 +
                     (C21567 * C127 + C47574 * C138) * C31578 +
                     C26307 * C31581 + C26308 * C47947) *
                        C4577 +
                    (C37297 + C37298 + C37299 + C37300) * C47945) *
                       C47647 * C1010 -
                   ((C37301 + C37302 + C37303 + C37304) * C47945 +
                    (C37300 + C37299 + C37298 + C37297) * C4577) *
                       C47647 * C1011 +
                   ((C37304 + C37303 + C37302 + C37301) * C4577 +
                    (C38165 + C38166 + C38167 + C38168) * C47945) *
                       C47647 * C1012 -
                   ((C38169 + C38170 + C38171 + C38172) * C47945 +
                    (C38168 + C38167 + C38166 + C38165) * C4577) *
                       C47647 * C1013 +
                   ((C38172 + C38171 + C38170 + C38169) * C4577 +
                    (C22458 * C31580 + C22457 * C31578 +
                     (C21567 * C22971 + C47574 * C22972) * C31581 +
                     (C21567 * C22973 + C47574 * C22974) * C47947) *
                        C47945) *
                       C47647 * C1014) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C1664 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C1665 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C47930) *
                       C47629 * C47963 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C37929 + C37930 + C37931 + C37932) * C47945) *
                        C1665 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C1664 -
                    ((C28259 * C47947 + C28260 * C31581 + C23427 * C31578 +
                      C23428 * C31580) *
                         C47945 +
                     (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                      C26313 * C31580) *
                         C4577) *
                        C47930) *
                       C47629 * C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C1664 -
                    ((C37933 + C37934 + C37935 + C37936) * C47945 +
                     (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                      C26315 * C31580) *
                         C4577) *
                        C1665 +
                    ((C26320 * C31580 + C26319 * C31578 +
                      (C21567 * C1844 + C47574 * C1853) * C31581 +
                      (C21567 * C1850 + C47574 * C1862) * C47947) *
                         C4577 +
                     (C26318 * C31580 + C26317 * C31578 +
                      (C21567 * C2224 + C47574 * C2227) * C31581 +
                      (C21567 * C2230 + C47574 * C2233) * C47947) *
                         C47945) *
                        C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C1664 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C1665 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C47930) *
                       C47966 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C1665 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C1664 -
                    ((C38327 + C38328 + C38329 + C38330) * C47945 +
                     (C38322 + C38321 + C38320 + C38319) * C4577) *
                        C47930) *
                       C47954 +
                   (((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C1664 -
                    ((C38793 + C38794 + C38795 + C38796) * C47945 +
                     (C38326 + C38325 + C38324 + C38323) * C4577) *
                        C1665 +
                    ((C38330 + C38329 + C38328 + C38327) * C4577 +
                     (C22602 * C31580 + C22601 * C31578 +
                      (C21567 * C23628 + C47574 * C23629) * C31581 +
                      (C21567 * C23630 + C47574 * C23631) * C47947) *
                         C47945) *
                        C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C3094 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C47895 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C3094) *
                        C47692) *
                       C47606 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C3094) *
                        C47895 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C3094 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47692) *
                       C47615 +
                   (((((C21567 * C119 + C47574 * C126) * C31580 +
                       (C21567 * C129 + C47574 * C140) * C31578 +
                       C26315 * C31581 + C26316 * C47947) *
                          C4577 +
                      (C37313 + C37314 + C37315 + C37316) * C47945) *
                         C3094 -
                     ((C37933 + C37934 + C37935 + C37936) * C47945 +
                      (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                       C26315 * C31580) *
                          C4577) *
                         C47734) *
                        C47895 +
                    (((C37936 + C37935 + C37934 + C37933) * C4577 +
                      (C22255 * C31580 + C22254 * C31578 +
                       (C21567 * C1158 + C47574 * C1173) * C31581 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C37317 + C37318 + C37319 + C37320) * C47945 +
                      (C37316 + C37315 + C37314 + C37313) * C4577) *
                         C3094) *
                        C47692) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47730 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47737 +
                     ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                       C28054 * C47947) *
                          C4577 +
                      (C38319 + C38320 + C38321 + C38322) * C47945) *
                         C3602) *
                        C47895 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47737 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47730 -
                     ((C38327 + C38328 + C38329 + C38330) * C47945 +
                      (C38322 + C38321 + C38320 + C38319) * C4577) *
                         C3602) *
                        C47692) *
                       C2440 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47737 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47730 -
                     ((C39365 + C39366 + C39367 + C39368) * C47945 +
                      (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                       C26313 * C31580) *
                          C4577) *
                         C3602) *
                        C47895 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47730 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47737 +
                     ((C39368 + C39367 + C39366 + C39365) * C4577 +
                      (C23426 * C31580 + C23425 * C31578 +
                       (C21567 * C7244 + C47574 * C7246) * C31581 +
                       (C21567 * C7248 + C47574 * C7250) * C47947) *
                          C47945) *
                         C3602) *
                        C47692) *
                       C47612)) /
                 (p * q * std::sqrt(p + q));
    d2ee[192] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C3094 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C47966 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C3094) *
                        C47954 +
                    (((C37304 + C37303 + C37302 + C37301) * C4577 +
                      (C38165 + C38166 + C38167 + C38168) * C47945) *
                         C3094 -
                     ((C38793 + C38794 + C38795 + C38796) * C47945 +
                      (C38326 + C38325 + C38324 + C38323) * C4577) *
                         C47734) *
                        C47927) *
                       C2440 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C3094) *
                        C47966 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C3094 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47954 +
                    (((C38662 + C38661 + C38660 + C38659) * C4577 +
                      (C22871 * C31580 + C22870 * C31578 +
                       (C21567 * C5854 + C47574 * C5856) * C31581 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C38461 + C38462 + C38463 + C38464) * C47945 +
                      (C37312 + C37311 + C37310 + C37309) * C4577) *
                         C3094) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C3094 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C47972 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C37929 + C37930 + C37931 + C37932) * C47945) *
                        C47734 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C3094) *
                       C47629 * C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C3094 -
                    ((C37933 + C37934 + C37935 + C37936) * C47945 +
                     (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                      C26315 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C47952 +
                   (((C26595 * C31580 + C26596 * C31578 +
                      (C21567 * C421 + C47574 * C439) * C31581 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C4577 +
                     (C26457 * C31580 + C26458 * C31578 +
                      (C21567 * C2014 + C47574 * C2015) * C31581 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C3094) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47974 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47971 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C47962 -
                    ((C39629 + C39630 + C39631 + C39632) * C47945 +
                     (C28057 * C47947 + C28058 * C31581 + C28054 * C31578 +
                      C28053 * C31580) *
                         C4577) *
                        C47943) *
                       C47629 * C2440 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C37929 + C37930 + C37931 + C37932) * C47945) *
                        C47971 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47974 -
                    ((C39365 + C39366 + C39367 + C39368) * C47945 +
                     (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                      C26313 * C31580) *
                         C4577) *
                        C47962 +
                    ((C28398 * C31580 + C28397 * C31578 +
                      (C21567 * C1848 + C47574 * C1857) * C31581 +
                      (C21567 * C1860 + C47574 * C1866) * C47947) *
                         C4577 +
                     (C28260 * C31580 + C28259 * C31578 +
                      (C21567 * C6770 + C47574 * C6772) * C31581 +
                      (C21567 * C6774 + C47574 * C6776) * C47947) *
                         C47945) *
                        C47943) *
                       C47629 * C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[193] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47730 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47737 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C3602) *
                       C47629 * C47606 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C37929 + C37930 + C37931 + C37932) * C47945) *
                        C47737 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47730 -
                    ((C39365 + C39366 + C39367 + C39368) * C47945 +
                     (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                      C26313 * C31580) *
                         C4577) *
                        C3602) *
                       C47629 * C47615 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47730 -
                    ((C37933 + C37934 + C37935 + C37936) * C47945 +
                     (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                      C26315 * C31580) *
                         C4577) *
                        C47737 +
                    ((C26320 * C31580 + C26319 * C31578 +
                      (C21567 * C1844 + C47574 * C1853) * C31581 +
                      (C21567 * C1850 + C47574 * C1862) * C47947) *
                         C4577 +
                     (C26318 * C31580 + C26317 * C31578 +
                      (C21567 * C2224 + C47574 * C2227) * C31581 +
                      (C21567 * C2230 + C47574 * C2233) * C47947) *
                         C47945) *
                        C3602) *
                       C47629 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[194] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C3094 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C47972 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C37929 + C37930 + C37931 + C37932) * C47945) *
                        C47734 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C3094) *
                       C47629 * C47965 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C3094 -
                    ((C37933 + C37934 + C37935 + C37936) * C47945 +
                     (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                      C26315 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C47952 +
                   (((C26595 * C31580 + C26596 * C31578 +
                      (C21567 * C421 + C47574 * C439) * C31581 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C4577 +
                     (C26457 * C31580 + C26458 * C31578 +
                      (C21567 * C2014 + C47574 * C2015) * C31581 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C3094) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C3094 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C47966 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C3094) *
                        C47954 +
                    (((C37304 + C37303 + C37302 + C37301) * C4577 +
                      (C38165 + C38166 + C38167 + C38168) * C47945) *
                         C3094 -
                     ((C38793 + C38794 + C38795 + C38796) * C47945 +
                      (C38326 + C38325 + C38324 + C38323) * C4577) *
                         C47734) *
                        C47927) *
                       C2440 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C3094) *
                        C47966 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C3094 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47954 +
                    (((C38662 + C38661 + C38660 + C38659) * C4577 +
                      (C22871 * C31580 + C22870 * C31578 +
                       (C21567 * C5854 + C47574 * C5856) * C31581 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C38461 + C38462 + C38463 + C38464) * C47945 +
                      (C37312 + C37311 + C37310 + C37309) * C4577) *
                         C3094) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47895 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47692) *
                       C554 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47692 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47895) *
                       C555 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C47895 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47692) *
                       C556 +
                   (((C37597 + C37598 + C37599 + C37600) * C4577 +
                     (C21972 * C31580 + C21973 * C31578 +
                      (C21567 * C1440 + C47574 * C1441) * C31581 +
                      (C21567 * C1442 + C47574 * C1443) * C47947) *
                         C47945) *
                        C47647 * C47692 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C47647 * C47895) *
                       C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C1284 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C1285 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47647 * C1286 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C47647 * C47937) *
                       C47881 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C1285 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C1284 -
                    ((C38461 + C38462 + C38463 + C38464) * C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C1286 +
                    ((C38464 + C38463 + C38462 + C38461) * C4577 +
                     (C22716 * C31580 + C22715 * C31578 +
                      (C21567 * C6376 + C47574 * C6378) * C31581 +
                      (C21567 * C6380 + C47574 * C6382) * C47947) *
                         C47945) *
                        C47647 * C47937) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47896 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C47895 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C22247 * C31580 + C22246 * C31578 + C22597 * C31581 +
                       C22598 * C47947) *
                          C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47896) *
                        C47692) *
                       C258 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47896) *
                        C47895 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47896 -
                     ((C23425 * C47947 + C23426 * C31581 + C22253 * C31578 +
                       C22252 * C31580) *
                          C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C47692) *
                       C259 +
                   (((((C21567 * C119 + C47574 * C126) * C31580 +
                       (C21567 * C129 + C47574 * C140) * C31578 +
                       C26315 * C31581 + C26316 * C47947) *
                          C4577 +
                      (C37313 + C37314 + C37315 + C37316) * C47945) *
                         C47896 -
                     ((C37933 + C37934 + C37935 + C37936) * C47945 +
                      (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                       C26315 * C31580) *
                          C4577) *
                         C47734) *
                        C47895 +
                    (((C37936 + C37935 + C37934 + C37933) * C4577 +
                      (C22255 * C31580 + C22254 * C31578 +
                       (C21567 * C1158 + C47574 * C1173) * C31581 +
                       (C21567 * C1176 + C47574 * C1185) * C47947) *
                          C47945) *
                         C47734 -
                     ((C37317 + C37318 + C37319 + C37320) * C47945 +
                      (C37316 + C37315 + C37314 + C37313) * C4577) *
                         C47896) *
                        C47692) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47896 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C1284 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C47734 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47896) *
                       C1285 +
                   (((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47896 -
                    ((C38793 + C38794 + C38795 + C38796) * C47945 +
                     (C38326 + C38325 + C38324 + C38323) * C4577) *
                        C47734) *
                       C1286 +
                   (((C38796 + C38795 + C38794 + C38793) * C4577 +
                     (C22982 * C31580 + C22981 * C31578 +
                      (C21567 * C22573 + C47574 * C22574) * C31581 +
                      (C21567 * C22575 + C47574 * C22576) * C47947) *
                         C47945) *
                        C47734 -
                    ((C38169 + C38170 + C38171 + C38172) * C47945 +
                     (C38168 + C38167 + C38166 + C38165) * C4577) *
                        C47896) *
                       C47937) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47966 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47954 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C258 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47954 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47966 -
                    ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
                      C21725 * C31580) *
                         C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47927) *
                       C259 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C47966 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47954 +
                    ((C37320 + C37319 + C37318 + C37317) * C4577 +
                     (C21732 * C31580 + C21731 * C31578 +
                      (C21567 * C1544 + C47574 * C1547) * C31581 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C31580 +
                     (C21567 * C127 + C47574 * C138) * C31578 +
                     C26307 * C31581 + C26308 * C47947) *
                        C4577 +
                    (C21715 * C31580 + C21716 * C31578 + C22249 * C31581 +
                     C22248 * C47947) *
                        C47945) *
                       C47647 * C47629 * C108 -
                   ((C22251 * C47947 + C22250 * C31581 + C21722 * C31578 +
                     C21721 * C31580) *
                        C47945 +
                    (C26312 * C47947 + C26311 * C31581 +
                     (C21567 * C128 + C47574 * C139) * C31578 +
                     (C21567 * C118 + C47574 * C125) * C31580) *
                        C4577) *
                       C47647 * C47629 * C109 +
                   (((C21567 * C119 + C47574 * C126) * C31580 +
                     (C21567 * C129 + C47574 * C140) * C31578 +
                     C26315 * C31581 + C26316 * C47947) *
                        C4577 +
                    (C21727 * C31580 + C21728 * C31578 + C22257 * C31581 +
                     C22256 * C47947) *
                        C47945) *
                       C47647 * C47629 * C110 -
                   ((C26458 * C47947 + C26457 * C31581 + C21971 * C31578 +
                     C21970 * C31580) *
                        C47945 +
                    (C26596 * C47947 + C26595 * C31581 +
                     (C21567 * C130 + C47574 * C141) * C31578 +
                     (C21567 * C120 + C47574 * C131) * C31580) *
                        C4577) *
                       C47647 * C47629 * C111 +
                   (((C21567 * C121 + C47574 * C132) * C31580 +
                     (C21567 * C133 + C47574 * C142) * C31578 +
                     (C21567 * C422 + C47574 * C441) * C31581 +
                     (C21567 * C440 + C47574 * C452) * C47947) *
                        C4577 +
                    ((C21567 * C269 + C47574 * C288) * C31580 +
                     (C21567 * C287 + C47574 * C299) * C31578 +
                     (C21567 * C816 + C47574 * C825) * C31581 +
                     (C21567 * C826 + C47574 * C831) * C47947) *
                        C47945) *
                       C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47967 -
                    ((C22596 * C47947 + C22595 * C31581 + C22248 * C31578 +
                      C22249 * C31580) *
                         C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47956 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C22595 * C31580 + C22596 * C31578 + C23644 * C31581 +
                      C23643 * C47947) *
                         C47945) *
                        C47930) *
                       C47629 * C258 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C22250 * C31580 + C22251 * C31578 + C23428 * C31581 +
                      C23427 * C47947) *
                         C47945) *
                        C47956 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47967 -
                    ((C28259 * C47947 + C28260 * C31581 + C23427 * C31578 +
                      C23428 * C31580) *
                         C47945 +
                     (C28397 * C47947 + C28398 * C31581 + C26314 * C31578 +
                      C26313 * C31580) *
                         C4577) *
                        C47930) *
                       C47629 * C259 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47967 -
                    ((C26317 * C47947 + C26318 * C31581 + C22256 * C31578 +
                      C22257 * C31580) *
                         C47945 +
                     (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                      C26315 * C31580) *
                         C4577) *
                        C47956 +
                    ((C26320 * C31580 + C26319 * C31578 +
                      (C21567 * C1844 + C47574 * C1853) * C31581 +
                      (C21567 * C1850 + C47574 * C1862) * C47947) *
                         C4577 +
                     (C26318 * C31580 + C26317 * C31578 +
                      (C21567 * C2224 + C47574 * C2227) * C31581 +
                      (C21567 * C2230 + C47574 * C2233) * C47947) *
                         C47945) *
                        C47930) *
                       C47629 * C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C942 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C943 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47963 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C943 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C942 -
                    ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
                      C21725 * C31580) *
                         C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47927) *
                       C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C942 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C943 +
                    ((C37320 + C37319 + C37318 + C37317) * C4577 +
                     (C21732 * C31580 + C21731 * C31578 +
                      (C21567 * C1544 + C47574 * C1547) * C31581 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C31580 +
                     (C21567 * C127 + C47574 * C138) * C31578 +
                     C26307 * C31581 + C26308 * C47947) *
                        C4577 +
                    (C37297 + C37298 + C37299 + C37300) * C47945) *
                       C47647 * C1010 -
                   ((C37301 + C37302 + C37303 + C37304) * C47945 +
                    (C37300 + C37299 + C37298 + C37297) * C4577) *
                       C47647 * C1011 +
                   ((C37304 + C37303 + C37302 + C37301) * C4577 +
                    (C38165 + C38166 + C38167 + C38168) * C47945) *
                       C47647 * C1012 -
                   ((C38169 + C38170 + C38171 + C38172) * C47945 +
                    (C38168 + C38167 + C38166 + C38165) * C4577) *
                       C47647 * C1013 +
                   ((C38172 + C38171 + C38170 + C38169) * C4577 +
                    (C22458 * C31580 + C22457 * C31578 +
                     (C21567 * C22971 + C47574 * C22972) * C31581 +
                     (C21567 * C22973 + C47574 * C22974) * C47947) *
                        C47945) *
                       C47647 * C1014) *
                  C47601) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47967 -
                    ((C37925 + C37926 + C37927 + C37928) * C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47956 +
                    ((C26310 * C31580 + C26309 * C31578 + C28053 * C31581 +
                      C28054 * C47947) *
                         C4577 +
                     (C38319 + C38320 + C38321 + C38322) * C47945) *
                        C47930) *
                       C942 +
                   (((C37928 + C37927 + C37926 + C37925) * C4577 +
                     (C38323 + C38324 + C38325 + C38326) * C47945) *
                        C47956 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47967 -
                    ((C38327 + C38328 + C38329 + C38330) * C47945 +
                     (C38322 + C38321 + C38320 + C38319) * C4577) *
                        C47930) *
                       C943 +
                   (((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C38165 + C38166 + C38167 + C38168) * C47945) *
                        C47967 -
                    ((C22601 * C47947 + C22602 * C31581 + C22600 * C31578 +
                      C22599 * C31580) *
                         C47945 +
                     (C38326 + C38325 + C38324 + C38323) * C4577) *
                        C47956 +
                    ((C38330 + C38329 + C38328 + C38327) * C4577 +
                     (C22602 * C31580 + C22601 * C31578 +
                      (C21567 * C23628 + C47574 * C23629) * C31581 +
                      (C21567 * C23630 + C47574 * C23631) * C47947) *
                         C47945) *
                        C47930) *
                       C47927) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47896 -
                    ((C22596 * C47947 + C22595 * C31581 + C22248 * C31578 +
                      C22249 * C31580) *
                         C47945 +
                     (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                      C26307 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C554 +
                   (((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                      C26314 * C47947) *
                         C4577 +
                     (C22250 * C31580 + C22251 * C31578 + C23428 * C31581 +
                      C23427 * C47947) *
                         C47945) *
                        C47734 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47896) *
                       C47629 * C555 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47896 -
                    ((C26317 * C47947 + C26318 * C31581 + C22256 * C31578 +
                      C22257 * C31580) *
                         C47945 +
                     (C26319 * C47947 + C26320 * C31581 + C26316 * C31578 +
                      C26315 * C31580) *
                         C4577) *
                        C47734) *
                       C47629 * C556 +
                   (((C26595 * C31580 + C26596 * C31578 +
                      (C21567 * C421 + C47574 * C439) * C31581 +
                      (C21567 * C438 + C47574 * C451) * C47947) *
                         C4577 +
                     (C26457 * C31580 + C26458 * C31578 +
                      (C21567 * C2014 + C47574 * C2015) * C31581 +
                      (C21567 * C2016 + C47574 * C2017) * C47947) *
                         C47945) *
                        C47734 -
                    ((C37600 + C37599 + C37598 + C37597) * C47945 +
                     (C26596 * C47947 + C26595 * C31581 +
                      (C21567 * C130 + C47574 * C141) * C31578 +
                      (C21567 * C120 + C47574 * C131) * C31580) *
                         C4577) *
                        C47896) *
                       C47629 * C47931)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21567 * C117 + C47574 * C124) * C31580 +
                       (C21567 * C127 + C47574 * C138) * C31578 +
                       C26307 * C31581 + C26308 * C47947) *
                          C4577 +
                      (C37297 + C37298 + C37299 + C37300) * C47945) *
                         C47896 -
                     ((C37925 + C37926 + C37927 + C37928) * C47945 +
                      (C26309 * C47947 + C26310 * C31581 + C26308 * C31578 +
                       C26307 * C31580) *
                          C4577) *
                         C47734) *
                        C942 +
                    (((C37928 + C37927 + C37926 + C37925) * C4577 +
                      (C38323 + C38324 + C38325 + C38326) * C47945) *
                         C47734 -
                     ((C37301 + C37302 + C37303 + C37304) * C47945 +
                      (C37300 + C37299 + C37298 + C37297) * C4577) *
                         C47896) *
                        C943 +
                    (((C37304 + C37303 + C37302 + C37301) * C4577 +
                      (C38165 + C38166 + C38167 + C38168) * C47945) *
                         C47896 -
                     ((C22601 * C47947 + C22602 * C31581 + C22600 * C31578 +
                       C22599 * C31580) *
                          C47945 +
                      (C38326 + C38325 + C38324 + C38323) * C4577) *
                         C47734) *
                        C47927) *
                       C47881 +
                   ((((C26311 * C31580 + C26312 * C31578 + C26313 * C31581 +
                       C26314 * C47947) *
                          C4577 +
                      (C37929 + C37930 + C37931 + C37932) * C47945) *
                         C47734 -
                     ((C37308 + C37307 + C37306 + C37305) * C47945 +
                      (C26312 * C47947 + C26311 * C31581 +
                       (C21567 * C128 + C47574 * C139) * C31578 +
                       (C21567 * C118 + C47574 * C125) * C31580) *
                          C4577) *
                         C47896) *
                        C942 +
                    (((C37305 + C37306 + C37307 + C37308) * C4577 +
                      (C37309 + C37310 + C37311 + C37312) * C47945) *
                         C47896 -
                     ((C38659 + C38660 + C38661 + C38662) * C47945 +
                      (C37932 + C37931 + C37930 + C37929) * C4577) *
                         C47734) *
                        C943 +
                    (((C38662 + C38661 + C38660 + C38659) * C4577 +
                      (C22871 * C31580 + C22870 * C31578 +
                       (C21567 * C5854 + C47574 * C5856) * C31581 +
                       (C21567 * C5858 + C47574 * C5860) * C47947) *
                          C47945) *
                         C47734 -
                     ((C38461 + C38462 + C38463 + C38464) * C47945 +
                      (C37312 + C37311 + C37310 + C37309) * C4577) *
                         C47896) *
                        C47927) *
                       C47612)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C31580 +
                     (C21567 * C127 + C47574 * C138) * C31578 +
                     C26307 * C31581 + C26308 * C47947) *
                        C4577 +
                    (C21715 * C31580 + C21716 * C31578 + C22249 * C31581 +
                     C22248 * C47947) *
                        C47945) *
                       C47647 * C47629 * C108 -
                   ((C22251 * C47947 + C22250 * C31581 + C21722 * C31578 +
                     C21721 * C31580) *
                        C47945 +
                    (C26312 * C47947 + C26311 * C31581 +
                     (C21567 * C128 + C47574 * C139) * C31578 +
                     (C21567 * C118 + C47574 * C125) * C31580) *
                        C4577) *
                       C47647 * C47629 * C109 +
                   (((C21567 * C119 + C47574 * C126) * C31580 +
                     (C21567 * C129 + C47574 * C140) * C31578 +
                     C26315 * C31581 + C26316 * C47947) *
                        C4577 +
                    (C21727 * C31580 + C21728 * C31578 + C22257 * C31581 +
                     C22256 * C47947) *
                        C47945) *
                       C47647 * C47629 * C110 -
                   ((C26458 * C47947 + C26457 * C31581 + C21971 * C31578 +
                     C21970 * C31580) *
                        C47945 +
                    (C26596 * C47947 + C26595 * C31581 +
                     (C21567 * C130 + C47574 * C141) * C31578 +
                     (C21567 * C120 + C47574 * C131) * C31580) *
                        C4577) *
                       C47647 * C47629 * C111 +
                   (((C21567 * C121 + C47574 * C132) * C31580 +
                     (C21567 * C133 + C47574 * C142) * C31578 +
                     (C21567 * C422 + C47574 * C441) * C31581 +
                     (C21567 * C440 + C47574 * C452) * C47947) *
                        C4577 +
                    ((C21567 * C269 + C47574 * C288) * C31580 +
                     (C21567 * C287 + C47574 * C299) * C31578 +
                     (C21567 * C816 + C47574 * C825) * C31581 +
                     (C21567 * C826 + C47574 * C831) * C47947) *
                        C47945) *
                       C47647 * C47629 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C47966 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C47954 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C258 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C47954 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C47966 -
                    ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
                      C21725 * C31580) *
                         C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47927) *
                       C259 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C47966 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C47954 +
                    ((C37320 + C37319 + C37318 + C37317) * C4577 +
                     (C21732 * C31580 + C21731 * C31578 +
                      (C21567 * C1544 + C47574 * C1547) * C31581 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C21567 * C117 + C47574 * C124) * C31580 +
                      (C21567 * C127 + C47574 * C138) * C31578 +
                      C26307 * C31581 + C26308 * C47947) *
                         C4577 +
                     (C37297 + C37298 + C37299 + C37300) * C47945) *
                        C47647 * C942 -
                    ((C37301 + C37302 + C37303 + C37304) * C47945 +
                     (C37300 + C37299 + C37298 + C37297) * C4577) *
                        C47647 * C943 +
                    ((C37304 + C37303 + C37302 + C37301) * C4577 +
                     (C21720 * C31580 + C21719 * C31578 + C22599 * C31581 +
                      C22600 * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47963 +
                   (((C37305 + C37306 + C37307 + C37308) * C4577 +
                     (C37309 + C37310 + C37311 + C37312) * C47945) *
                        C47647 * C943 -
                    ((C37308 + C37307 + C37306 + C37305) * C47945 +
                     (C26312 * C47947 + C26311 * C31581 +
                      (C21567 * C128 + C47574 * C139) * C31578 +
                      (C21567 * C118 + C47574 * C125) * C31580) *
                         C4577) *
                        C47647 * C942 -
                    ((C22870 * C47947 + C22871 * C31581 + C21726 * C31578 +
                      C21725 * C31580) *
                         C47945 +
                     (C37312 + C37311 + C37310 + C37309) * C4577) *
                        C47647 * C47927) *
                       C47950 +
                   ((((C21567 * C119 + C47574 * C126) * C31580 +
                      (C21567 * C129 + C47574 * C140) * C31578 +
                      C26315 * C31581 + C26316 * C47947) *
                         C4577 +
                     (C37313 + C37314 + C37315 + C37316) * C47945) *
                        C47647 * C942 -
                    ((C37317 + C37318 + C37319 + C37320) * C47945 +
                     (C37316 + C37315 + C37314 + C37313) * C4577) *
                        C47647 * C943 +
                    ((C37320 + C37319 + C37318 + C37317) * C4577 +
                     (C21732 * C31580 + C21731 * C31578 +
                      (C21567 * C1544 + C47574 * C1547) * C31581 +
                      (C21567 * C1550 + C47574 * C1553) * C47947) *
                         C47945) *
                        C47647 * C47927) *
                       C47921)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21567 * C117 + C47574 * C124) * C31580 +
                     (C21567 * C127 + C47574 * C138) * C31578 +
                     C26307 * C31581 + C26308 * C47947) *
                        C4577 +
                    (C37297 + C37298 + C37299 + C37300) * C47945) *
                       C47647 * C1010 -
                   ((C37301 + C37302 + C37303 + C37304) * C47945 +
                    (C37300 + C37299 + C37298 + C37297) * C4577) *
                       C47647 * C1011 +
                   ((C37304 + C37303 + C37302 + C37301) * C4577 +
                    (C38165 + C38166 + C38167 + C38168) * C47945) *
                       C47647 * C1012 -
                   ((C38169 + C38170 + C38171 + C38172) * C47945 +
                    (C38168 + C38167 + C38166 + C38165) * C4577) *
                       C47647 * C1013 +
                   ((C38172 + C38171 + C38170 + C38169) * C4577 +
                    (C22458 * C31580 + C22457 * C31578 +
                     (C21567 * C22971 + C47574 * C22972) * C31581 +
                     (C21567 * C22973 + C47574 * C22974) * C47947) *
                        C47945) *
                       C47647 * C1014) *
                  C47601) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47688 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47695 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C2700) *
              C47606 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47695 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47688 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C2700) *
              C47615 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C47688 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47695 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47896 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C47688 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47896) *
               C47695 +
           ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
             C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
                C47835 * C47896 -
            (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
             C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
                C47835 * C47734) *
               C2700) *
              C2440 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47896) *
               C47688 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47896 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47695 +
           ((C22252 * C42661 + C22253 * C42658 + C23426 * C42662 +
             C23425 * C42659 + (C21567 * C7244 + C47574 * C7246) * C42663 +
             (C21567 * C7248 + C47574 * C7250) * C42660) *
                C47835 * C47734 -
            (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
             C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
                C47835 * C47896) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47973 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47969 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47959 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C47647 * C47937) *
              C2440 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47969 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47973 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47959 +
           (C21725 * C42661 + C21726 * C42658 + C22871 * C42662 +
            C22870 * C42659 + (C21567 * C5854 + C47574 * C5856) * C42663 +
            (C21567 * C5858 + C47574 * C5860) * C42660) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C2332 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47692) *
              C47972 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47692 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C2332) *
              C47965 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C2332 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47692) *
              C47952 +
          ((C21970 * C42661 + C21971 * C42658 + C26457 * C42662 +
            C26458 * C42659 + (C21567 * C2014 + C47574 * C2015) * C42663 +
            (C21567 * C2016 + C47574 * C2017) * C42660) *
               C47835 * C47647 * C47692 -
           (C43092 * C42660 + C43091 * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47967 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47956 +
            (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
             C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
                C47835 * C47930) *
               C2332 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47956 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47967 -
            (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
             C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
                C47835 * C47930) *
               C47692) *
              C2440 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47956 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47967 -
            (C44403 * C42660 + C44404 * C42663 + C28397 * C42659 +
             C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
                C47835 * C47930) *
               C2332 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47967 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47956 +
            (C23428 * C42661 + C23427 * C42658 + C28260 * C42662 +
             C28259 * C42659 + (C21567 * C6770 + C47574 * C6772) * C42663 +
             (C21567 * C6774 + C47574 * C6776) * C42660) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47896 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C2332 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47896) *
               C47692) *
              C47606 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47896) *
               C2332 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47896 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C21567 * C119 + C47574 * C126) * C42661 +
             (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
             C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                C47835 * C47896 -
            (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
             C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
                C47835 * C47734) *
               C2332 +
           ((C22257 * C42661 + C22256 * C42658 + C26318 * C42662 +
             C26317 * C42659 + (C21567 * C2224 + C47574 * C2227) * C42663 +
             (C21567 * C2230 + C47574 * C2233) * C42660) *
                C47835 * C47734 -
            (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
             C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
                C47835 * C47896) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C2332 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47692) *
              C47972 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47692 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C2332) *
              C47965 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C2332 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47692) *
              C47952 +
          ((C21970 * C42661 + C21971 * C42658 + C26457 * C42662 +
            C26458 * C42659 + (C21567 * C2014 + C47574 * C2015) * C42663 +
            (C21567 * C2016 + C47574 * C2017) * C42660) *
               C47835 * C47647 * C47692 -
           (C43092 * C42660 + C43091 * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C47647 * C2332) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47973 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47969 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47959 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C47647 * C47937) *
              C2440 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47969 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47973 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47959 +
           (C21725 * C42661 + C21726 * C42658 + C22871 * C42662 +
            C22870 * C42659 + (C21567 * C5854 + C47574 * C5856) * C42663 +
            (C21567 * C5858 + C47574 * C5860) * C42660) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C3094 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C47688 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C3094) *
               C47695 +
           ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
             C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
                C47835 * C3094 -
            (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
             C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
                C47835 * C47734) *
               C2700) *
              C47881 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C3094) *
               C47688 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C3094 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47695 +
           ((C22252 * C42661 + C22253 * C42658 + C23426 * C42662 +
             C23425 * C42659 + (C21567 * C7244 + C47574 * C7246) * C42663 +
             (C21567 * C7248 + C47574 * C7250) * C42660) *
                C47835 * C47734 -
            (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
             C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
                C47835 * C3094) *
               C2700) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47730 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47737 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C3602) *
              C47688 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47737 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47730 -
           (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
            C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
               C47835 * C3602) *
              C47695 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47730 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C47737 +
           (C22597 * C42661 + C22598 * C42658 + C23642 * C42662 +
            C23641 * C42659 + (C21567 * C23266 + C47574 * C23267) * C42663 +
            (C21567 * C23268 + C47574 * C23269) * C42660) *
               C47835 * C3602) *
              C2700) *
         C47601) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C3094 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C47973 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47734 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C3094) *
              C47969 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C3094 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C47734) *
              C47959 +
          ((C22599 * C42661 + C22600 * C42658 + C22602 * C42662 +
            C22601 * C42659 + (C21567 * C23628 + C47574 * C23629) * C42663 +
            (C21567 * C23630 + C47574 * C23631) * C42660) *
               C47835 * C47734 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C3094 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C2332 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C3094) *
               C47692) *
              C47963 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C3094) *
               C2332 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C3094 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C42661 +
             (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
             C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                C47835 * C3094 -
            (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
             C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
                C47835 * C47734) *
               C2332 +
           ((C22257 * C42661 + C22256 * C42658 + C26318 * C42662 +
             C26317 * C42659 + (C21567 * C2224 + C47574 * C2227) * C42663 +
             (C21567 * C2230 + C47574 * C2233) * C42660) *
                C47835 * C47734 -
            (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
             C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
                C47835 * C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47974 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47971 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47962 -
           (C44153 * C42660 + C44154 * C42663 + C28057 * C42659 +
            C28058 * C42662 + C28054 * C42658 + C28053 * C42661) *
               C47835 * C47943) *
              C2332 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47971 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47974 -
           (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
            C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
               C47835 * C47962 +
           (C23644 * C42661 + C23643 * C42658 + C28056 * C42662 +
            C28055 * C42659 + (C21567 * C28036 + C47574 * C28037) * C42663 +
            (C21567 * C28038 + C47574 * C28039) * C42660) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47730 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47737 +
            (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
             C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
                C47835 * C3602) *
               C2332 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47737 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47730 -
            (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
             C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
                C47835 * C3602) *
               C47692) *
              C47881 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47737 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47730 -
            (C44403 * C42660 + C44404 * C42663 + C28397 * C42659 +
             C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
                C47835 * C3602) *
               C2332 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47730 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47737 +
            (C23428 * C42661 + C23427 * C42658 + C28260 * C42662 +
             C28259 * C42659 + (C21567 * C6770 + C47574 * C6772) * C42663 +
             (C21567 * C6774 + C47574 * C6776) * C42660) *
                C47835 * C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C3094 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C2332 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C3094) *
               C47692) *
              C47963 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C3094) *
               C2332 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C3094 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47692) *
              C47950 +
          ((((C21567 * C119 + C47574 * C126) * C42661 +
             (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
             C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                C47835 * C3094 -
            (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
             C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
                C47835 * C47734) *
               C2332 +
           ((C22257 * C42661 + C22256 * C42658 + C26318 * C42662 +
             C26317 * C42659 + (C21567 * C2224 + C47574 * C2227) * C42663 +
             (C21567 * C2230 + C47574 * C2233) * C42660) *
                C47835 * C47734 -
            (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
             C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
                C47835 * C3094) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C3094 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C47973 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47734 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C3094) *
              C47969 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C3094 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C47734) *
              C47959 +
          ((C22599 * C42661 + C22600 * C42658 + C22602 * C42662 +
            C22601 * C42659 + (C21567 * C23628 + C47574 * C23629) * C42663 +
            (C21567 * C23630 + C47574 * C23631) * C42660) *
               C47835 * C47734 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C3094) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C1284 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C1285 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C1286 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C47647 * C47937) *
              C47881 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C1285 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C1284 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C1286 +
           (C21725 * C42661 + C21726 * C42658 + C22871 * C42662 +
            C22870 * C42659 + (C21567 * C5854 + C47574 * C5856) * C42663 +
            (C21567 * C5858 + C47574 * C5860) * C42660) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47895 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47692) *
              C554 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47692 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47895) *
              C555 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C47895 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47692) *
              C556 +
          ((C21970 * C42661 + C21971 * C42658 + C26457 * C42662 +
            C26458 * C42659 + (C21567 * C2014 + C47574 * C2015) * C42663 +
            (C21567 * C2016 + C47574 * C2017) * C42660) *
               C47835 * C47647 * C47692 -
           ((C21567 * C438 + C47574 * C451) * C42660 +
            (C21567 * C421 + C47574 * C439) * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C1664 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C1665 +
            (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
             C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
                C47835 * C47930) *
               C47895 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C1665 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C1664 -
            (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
             C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
                C47835 * C47930) *
               C47692) *
              C47881 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C1665 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C1664 -
            ((C21567 * C1860 + C47574 * C1866) * C42660 +
             (C21567 * C1848 + C47574 * C1857) * C42663 + C28397 * C42659 +
             C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
                C47835 * C47930) *
               C47895 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C1664 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C1665 +
            (C23428 * C42661 + C23427 * C42658 + C28260 * C42662 +
             C28259 * C42659 + (C21567 * C6770 + C47574 * C6772) * C42663 +
             (C21567 * C6774 + C47574 * C6776) * C42660) *
                C47835 * C47930) *
               C47692) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47896 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C1284 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47734 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47896) *
              C1285 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47896 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C47734) *
              C1286 +
          ((C22599 * C42661 + C22600 * C42658 + C22602 * C42662 +
            C22601 * C42659 + (C21567 * C23628 + C47574 * C23629) * C42663 +
            (C21567 * C23630 + C47574 * C23631) * C42660) *
               C47835 * C47734 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47896 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C47895 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47896) *
               C47692) *
              C258 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47896) *
               C47895 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47896 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47692) *
              C259 +
          ((((C21567 * C119 + C47574 * C126) * C42661 +
             (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
             C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                C47835 * C47896 -
            (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
             C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
                C47835 * C47734) *
               C47895 +
           ((C22257 * C42661 + C22256 * C42658 + C26318 * C42662 +
             C26317 * C42659 + (C21567 * C2224 + C47574 * C2227) * C42663 +
             (C21567 * C2230 + C47574 * C2233) * C42660) *
                C47835 * C47734 -
            (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
             C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C2116 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C2117 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C2118 -
           (C44153 * C42660 + C44154 * C42663 + C28057 * C42659 +
            C28058 * C42662 + C28054 * C42658 + C28053 * C42661) *
               C47835 * C47943) *
              C47895 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C2117 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C2116 -
           (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
            C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
               C47835 * C2118 +
           (C23644 * C42661 + C23643 * C42658 + C28056 * C42662 +
            C28055 * C42659 + (C21567 * C28036 + C47574 * C28037) * C42663 +
            (C21567 * C28038 + C47574 * C28039) * C42660) *
               C47835 * C47943) *
              C47692) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C21567 * C117 + C47574 * C124) * C42661 +
               (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
               C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                  C47835 * C47647 * C47629 * C108 -
              (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
               C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
               (C21567 * C118 + C47574 * C125) * C42661) *
                  C47835 * C47647 * C47629 * C109 +
              ((C21567 * C119 + C47574 * C126) * C42661 +
               (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
               C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                  C47835 * C47647 * C47629 * C110 -
              ((C21567 * C438 + C47574 * C451) * C42660 +
               (C21567 * C421 + C47574 * C439) * C42663 + C26596 * C42659 +
               C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
               (C21567 * C120 + C47574 * C131) * C42661) *
                  C47835 * C47647 * C47629 * C111 +
              ((C21567 * C121 + C47574 * C132) * C42661 +
               (C21567 * C133 + C47574 * C142) * C42658 +
               (C21567 * C422 + C47574 * C441) * C42662 +
               (C21567 * C440 + C47574 * C452) * C42659 +
               (C21567 * C423 + C47574 * C442) * C42663 +
               (C21567 * C443 + C47574 * C453) * C42660) *
                  C47835 * C47647 * C47629 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21567 * C117 + C47574 * C124) * C42661 +
                (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
                C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                   C47835 * C47647 * C47966 -
               (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
                C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                   C47835 * C47647 * C47954 +
               (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
                C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
                   C47835 * C47647 * C47927) *
                  C258 +
              ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
                C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                   C47835 * C47647 * C47954 -
               (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
                C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
                (C21567 * C118 + C47574 * C125) * C42661) *
                   C47835 * C47647 * C47966 -
               (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
                C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
                   C47835 * C47647 * C47927) *
                  C259 +
              (((C21567 * C119 + C47574 * C126) * C42661 +
                (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
                C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                   C47835 * C47647 * C47966 -
               (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
                C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
                   C47835 * C47647 * C47954 +
               (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
                C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
                (C21567 * C1176 + C47574 * C1185) * C42660) *
                   C47835 * C47647 * C47927) *
                  C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47967 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47956 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C47629 * C258 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47956 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47967 -
           ((C21567 * C1860 + C47574 * C1866) * C42660 +
            (C21567 * C1848 + C47574 * C1857) * C42663 + C28397 * C42659 +
            C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
               C47835 * C47930) *
              C47629 * C259 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47967 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C47956 +
           (C26320 * C42661 + C26319 * C42658 + C42890 * C42662 +
            C42889 * C42659 + (C21567 * C1849 + C47574 * C1858) * C42663 +
            (C21567 * C1861 + C47574 * C1867) * C42660) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C942 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C943 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47927) *
              C47963 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C943 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C942 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C942 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C943 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C47647 * C1010 -
          (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
           C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
              C47835 * C47647 * C1011 +
          (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
           C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
              C47835 * C47647 * C1012 -
          (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
           C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
              C47835 * C47647 * C1013 +
          (C22455 * C42661 + C22456 * C42658 + C22982 * C42662 +
           C22981 * C42659 + (C21567 * C22573 + C47574 * C22574) * C42663 +
           (C21567 * C22575 + C47574 * C22576) * C42660) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47967 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47956 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C942 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47956 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47967 -
           (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
            C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
               C47835 * C47930) *
              C943 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47967 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C47956 +
           (C22597 * C42661 + C22598 * C42658 + C23642 * C42662 +
            C23641 * C42659 + (C21567 * C23266 + C47574 * C23267) * C42663 +
            (C21567 * C23268 + C47574 * C23269) * C42660) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C1664 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C1665 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C47629 * C47963 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C1665 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C1664 -
           ((C21567 * C1860 + C47574 * C1866) * C42660 +
            (C21567 * C1848 + C47574 * C1857) * C42663 + C28397 * C42659 +
            C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C1664 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C1665 +
           (C26320 * C42661 + C26319 * C42658 + C42890 * C42662 +
            C42889 * C42659 + (C21567 * C1849 + C47574 * C1858) * C42663 +
            (C21567 * C1861 + C47574 * C1867) * C42660) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C1664 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C1665 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C47966 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C1665 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C1664 -
           (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
            C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
               C47835 * C47930) *
              C47954 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C1664 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C1665 +
           (C22597 * C42661 + C22598 * C42658 + C23642 * C42662 +
            C23641 * C42659 + (C21567 * C23266 + C47574 * C23267) * C42663 +
            (C21567 * C23268 + C47574 * C23269) * C42660) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C1839 -
          (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
           C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
              C47835 * C1840 +
          (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
           C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
              C47835 * C1841 -
          (C44153 * C42660 + C44154 * C42663 + C28057 * C42659 +
           C28058 * C42662 + C28054 * C42658 + C28053 * C42661) *
              C47835 * C1842 +
          (C28058 * C42661 + C28057 * C42658 + C44154 * C42662 +
           C44153 * C42659 + (C21567 * C44144 + C47574 * C44145) * C42663 +
           (C21567 * C44146 + C47574 * C44147) * C42660) *
              C47835 * C1843) *
         C47629 * C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47896 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C942 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47896) *
               C943 +
           ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
             C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
                C47835 * C47896 -
            (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
             C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47896) *
               C942 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47896 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C943 +
           ((C22252 * C42661 + C22253 * C42658 + C23426 * C42662 +
             C23425 * C42659 + (C21567 * C7244 + C47574 * C7246) * C42663 +
             (C21567 * C7248 + C47574 * C7250) * C42660) *
                C47835 * C47734 -
            (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
             C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47896 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C47629 * C554 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47734 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47896) *
              C47629 * C555 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47896 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C47734) *
              C47629 * C556 +
          ((C26595 * C42661 + C26596 * C42658 + C43091 * C42662 +
            C43092 * C42659 + (C21567 * C2120 + C47574 * C2121) * C42663 +
            (C21567 * C2122 + C47574 * C2123) * C42660) *
               C47835 * C47734 -
           (C43092 * C42660 + C43091 * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C2116 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C2117 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C2118 -
           (C44153 * C42660 + C44154 * C42663 + C28057 * C42659 +
            C28058 * C42662 + C28054 * C42658 + C28053 * C42661) *
               C47835 * C47943) *
              C47629 * C47881 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C2117 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C2116 -
           (C44403 * C42660 + C44404 * C42663 + C28397 * C42659 +
            C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
               C47835 * C2118 +
           (C28398 * C42661 + C28397 * C42658 + C44404 * C42662 +
            C44403 * C42659 + (C21567 * C12346 + C47574 * C12348) * C42663 +
            (C21567 * C12350 + C47574 * C12352) * C42660) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47966 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47954 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47927) *
              C258 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47954 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47966 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C47966 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47954 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C47647 * C47629 * C108 -
          (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
           C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
           (C21567 * C118 + C47574 * C125) * C42661) *
              C47835 * C47647 * C47629 * C109 +
          ((C21567 * C119 + C47574 * C126) * C42661 +
           (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
           C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
              C47835 * C47647 * C47629 * C110 -
          ((C21567 * C438 + C47574 * C451) * C42660 +
           (C21567 * C421 + C47574 * C439) * C42663 + C26596 * C42659 +
           C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
           (C21567 * C120 + C47574 * C131) * C42661) *
              C47835 * C47647 * C47629 * C111 +
          ((C21567 * C121 + C47574 * C132) * C42661 +
           (C21567 * C133 + C47574 * C142) * C42658 +
           (C21567 * C422 + C47574 * C441) * C42662 +
           (C21567 * C440 + C47574 * C452) * C42659 +
           (C21567 * C423 + C47574 * C442) * C42663 +
           (C21567 * C443 + C47574 * C453) * C42660) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C942 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C943 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47927) *
              C47963 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C943 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C942 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C942 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C943 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C47647 * C1010 -
          (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
           C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
              C47835 * C47647 * C1011 +
          (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
           C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
              C47835 * C47647 * C1012 -
          (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
           C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
              C47835 * C47647 * C1013 +
          (C22455 * C42661 + C22456 * C42658 + C22982 * C42662 +
           C22981 * C42659 + (C21567 * C22573 + C47574 * C22574) * C42663 +
           (C21567 * C22575 + C47574 * C22576) * C42660) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C1664 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C1665 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C47629 * C47963 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C1665 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C1664 -
           ((C21567 * C1860 + C47574 * C1866) * C42660 +
            (C21567 * C1848 + C47574 * C1857) * C42663 + C28397 * C42659 +
            C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
               C47835 * C47930) *
              C47629 * C47950 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C1664 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C1665 +
           (C26320 * C42661 + C26319 * C42658 + C42890 * C42662 +
            C42889 * C42659 + (C21567 * C1849 + C47574 * C1858) * C42663 +
            (C21567 * C1861 + C47574 * C1867) * C42660) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C1664 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C1665 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C47966 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C1665 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C1664 -
           (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
            C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
               C47835 * C47930) *
              C47954 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C1664 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C1665 +
           (C22597 * C42661 + C22598 * C42658 + C23642 * C42662 +
            C23641 * C42659 + (C21567 * C23266 + C47574 * C23267) * C42663 +
            (C21567 * C23268 + C47574 * C23269) * C42660) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C3094 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C47895 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C3094) *
               C47692) *
              C47606 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C3094) *
               C47895 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C3094 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47692) *
              C47615 +
          ((((C21567 * C119 + C47574 * C126) * C42661 +
             (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
             C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                C47835 * C3094 -
            (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
             C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
                C47835 * C47734) *
               C47895 +
           ((C22257 * C42661 + C22256 * C42658 + C26318 * C42662 +
             C26317 * C42659 + (C21567 * C2224 + C47574 * C2227) * C42663 +
             (C21567 * C2230 + C47574 * C2233) * C42660) *
                C47835 * C47734 -
            (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
             C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
                C47835 * C3094) *
               C47692) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47730 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47737 +
            (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
             C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
                C47835 * C3602) *
               C47895 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47737 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47730 -
            (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
             C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
                C47835 * C3602) *
               C47692) *
              C2440 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47737 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47730 -
            (C44403 * C42660 + C44404 * C42663 + C28397 * C42659 +
             C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
                C47835 * C3602) *
               C47895 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47730 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47737 +
            (C23428 * C42661 + C23427 * C42658 + C28260 * C42662 +
             C28259 * C42659 + (C21567 * C6770 + C47574 * C6772) * C42663 +
             (C21567 * C6774 + C47574 * C6776) * C42660) *
                C47835 * C3602) *
               C47692) *
              C47612)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C3094 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C47966 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C3094) *
               C47954 +
           ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
             C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
                C47835 * C3094 -
            (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
             C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
                C47835 * C47734) *
               C47927) *
              C2440 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C3094) *
               C47966 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C3094 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47954 +
           ((C22252 * C42661 + C22253 * C42658 + C23426 * C42662 +
             C23425 * C42659 + (C21567 * C7244 + C47574 * C7246) * C42663 +
             (C21567 * C7248 + C47574 * C7250) * C42660) *
                C47835 * C47734 -
            (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
             C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
                C47835 * C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C3094 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C47629 * C47972 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47734 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C3094) *
              C47629 * C47965 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C3094 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C47734) *
              C47629 * C47952 +
          ((C26595 * C42661 + C26596 * C42658 + C43091 * C42662 +
            C43092 * C42659 + (C21567 * C2120 + C47574 * C2121) * C42663 +
            (C21567 * C2122 + C47574 * C2123) * C42660) *
               C47835 * C47734 -
           (C43092 * C42660 + C43091 * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47974 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47971 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47962 -
           (C44153 * C42660 + C44154 * C42663 + C28057 * C42659 +
            C28058 * C42662 + C28054 * C42658 + C28053 * C42661) *
               C47835 * C47943) *
              C47629 * C2440 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47971 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47974 -
           (C44403 * C42660 + C44404 * C42663 + C28397 * C42659 +
            C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
               C47835 * C47962 +
           (C28398 * C42661 + C28397 * C42658 + C44404 * C42662 +
            C44403 * C42659 + (C21567 * C12346 + C47574 * C12348) * C42663 +
            (C21567 * C12350 + C47574 * C12352) * C42660) *
               C47835 * C47943) *
              C47629 * C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47730 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47737 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C3602) *
              C47629 * C47606 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47737 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47730 -
           (C44403 * C42660 + C44404 * C42663 + C28397 * C42659 +
            C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
               C47835 * C3602) *
              C47629 * C47615 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47730 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C47737 +
           (C26320 * C42661 + C26319 * C42658 + C42890 * C42662 +
            C42889 * C42659 + (C21567 * C1849 + C47574 * C1858) * C42663 +
            (C21567 * C1861 + C47574 * C1867) * C42660) *
               C47835 * C3602) *
              C47629 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C3094 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C47629 * C47972 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47734 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C3094) *
              C47629 * C47965 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C3094 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C47734) *
              C47629 * C47952 +
          ((C26595 * C42661 + C26596 * C42658 + C43091 * C42662 +
            C43092 * C42659 + (C21567 * C2120 + C47574 * C2121) * C42663 +
            (C21567 * C2122 + C47574 * C2123) * C42660) *
               C47835 * C47734 -
           (C43092 * C42660 + C43091 * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C3094) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C3094 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C47966 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C3094) *
               C47954 +
           ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
             C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
                C47835 * C3094 -
            (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
             C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
                C47835 * C47734) *
               C47927) *
              C2440 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C3094) *
               C47966 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C3094 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47954 +
           ((C22252 * C42661 + C22253 * C42658 + C23426 * C42662 +
             C23425 * C42659 + (C21567 * C7244 + C47574 * C7246) * C42663 +
             (C21567 * C7248 + C47574 * C7250) * C42660) *
                C47835 * C47734 -
            (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
             C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
                C47835 * C3094) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47895 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47692) *
              C554 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47692 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47895) *
              C555 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C47895 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47692) *
              C556 +
          ((C21970 * C42661 + C21971 * C42658 + C26457 * C42662 +
            C26458 * C42659 + (C21567 * C2014 + C47574 * C2015) * C42663 +
            (C21567 * C2016 + C47574 * C2017) * C42660) *
               C47835 * C47647 * C47692 -
           ((C21567 * C438 + C47574 * C451) * C42660 +
            (C21567 * C421 + C47574 * C439) * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C47647 * C47895) *
              C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C1284 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C1285 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C1286 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C47647 * C47937) *
              C47881 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C1285 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C1284 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C1286 +
           (C21725 * C42661 + C21726 * C42658 + C22871 * C42662 +
            C22870 * C42659 + (C21567 * C5854 + C47574 * C5856) * C42663 +
            (C21567 * C5858 + C47574 * C5860) * C42660) *
               C47835 * C47647 * C47937) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47896 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C47895 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47896) *
               C47692) *
              C258 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47896) *
               C47895 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47896 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C47692) *
              C259 +
          ((((C21567 * C119 + C47574 * C126) * C42661 +
             (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
             C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
                C47835 * C47896 -
            (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
             C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
                C47835 * C47734) *
               C47895 +
           ((C22257 * C42661 + C22256 * C42658 + C26318 * C42662 +
             C26317 * C42659 + (C21567 * C2224 + C47574 * C2227) * C42663 +
             (C21567 * C2230 + C47574 * C2233) * C42660) *
                C47835 * C47734 -
            (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
             C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
                C47835 * C47896) *
               C47692) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47896 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C1284 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47734 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47896) *
              C1285 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47896 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C47734) *
              C1286 +
          ((C22599 * C42661 + C22600 * C42658 + C22602 * C42662 +
            C22601 * C42659 + (C21567 * C23628 + C47574 * C23629) * C42663 +
            (C21567 * C23630 + C47574 * C23631) * C42660) *
               C47835 * C47734 -
           (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
            C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
               C47835 * C47896) *
              C47937) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47966 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47954 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47927) *
              C258 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47954 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47966 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C47966 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47954 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C47647 * C47629 * C108 -
          (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
           C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
           (C21567 * C118 + C47574 * C125) * C42661) *
              C47835 * C47647 * C47629 * C109 +
          ((C21567 * C119 + C47574 * C126) * C42661 +
           (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
           C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
              C47835 * C47647 * C47629 * C110 -
          ((C21567 * C438 + C47574 * C451) * C42660 +
           (C21567 * C421 + C47574 * C439) * C42663 + C26596 * C42659 +
           C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
           (C21567 * C120 + C47574 * C131) * C42661) *
              C47835 * C47647 * C47629 * C111 +
          ((C21567 * C121 + C47574 * C132) * C42661 +
           (C21567 * C133 + C47574 * C142) * C42658 +
           (C21567 * C422 + C47574 * C441) * C42662 +
           (C21567 * C440 + C47574 * C452) * C42659 +
           (C21567 * C423 + C47574 * C442) * C42663 +
           (C21567 * C443 + C47574 * C453) * C42660) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47967 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47956 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C47629 * C258 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47956 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47967 -
           ((C21567 * C1860 + C47574 * C1866) * C42660 +
            (C21567 * C1848 + C47574 * C1857) * C42663 + C28397 * C42659 +
            C28398 * C42662 + C26314 * C42658 + C26313 * C42661) *
               C47835 * C47930) *
              C47629 * C259 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47967 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C47956 +
           (C26320 * C42661 + C26319 * C42658 + C42890 * C42662 +
            C42889 * C42659 + (C21567 * C1849 + C47574 * C1858) * C42663 +
            (C21567 * C1861 + C47574 * C1867) * C42660) *
               C47835 * C47930) *
              C47629 * C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C942 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C943 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47927) *
              C47963 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C943 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C942 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C942 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C943 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C47647 * C1010 -
          (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
           C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
              C47835 * C47647 * C1011 +
          (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
           C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
              C47835 * C47647 * C1012 -
          (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
           C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
              C47835 * C47647 * C1013 +
          (C22455 * C42661 + C22456 * C42658 + C22982 * C42662 +
           C22981 * C42659 + (C21567 * C22573 + C47574 * C22574) * C42663 +
           (C21567 * C22575 + C47574 * C22576) * C42660) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47967 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47956 +
           (C26310 * C42661 + C26309 * C42658 + C28053 * C42662 +
            C28054 * C42659 + C28058 * C42663 + C28057 * C42660) *
               C47835 * C47930) *
              C942 +
          ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
            C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
               C47835 * C47956 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47967 -
           (C28055 * C42660 + C28056 * C42663 + C23643 * C42659 +
            C23644 * C42662 + C22596 * C42658 + C22595 * C42661) *
               C47835 * C47930) *
              C943 +
          ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47967 -
           (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
            C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
               C47835 * C47956 +
           (C22597 * C42661 + C22598 * C42658 + C23642 * C42662 +
            C23641 * C42659 + (C21567 * C23266 + C47574 * C23267) * C42663 +
            (C21567 * C23268 + C47574 * C23269) * C42660) *
               C47835 * C47930) *
              C47927) *
         C47601) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47896 -
           (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
            C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
               C47835 * C47734) *
              C47629 * C554 +
          ((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
            C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
               C47835 * C47734 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47896) *
              C47629 * C555 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47896 -
           (C42889 * C42660 + C42890 * C42663 + C26319 * C42659 +
            C26320 * C42662 + C26316 * C42658 + C26315 * C42661) *
               C47835 * C47734) *
              C47629 * C556 +
          ((C26595 * C42661 + C26596 * C42658 + C43091 * C42662 +
            C43092 * C42659 + (C21567 * C2120 + C47574 * C2121) * C42663 +
            (C21567 * C2122 + C47574 * C2123) * C42660) *
               C47835 * C47734 -
           (C43092 * C42660 + C43091 * C42663 + C26596 * C42659 +
            C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
            (C21567 * C120 + C47574 * C131) * C42661) *
               C47835 * C47896) *
              C47629 * C47931)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21567 * C117 + C47574 * C124) * C42661 +
             (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
             C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
                C47835 * C47896 -
            (C28054 * C42660 + C28053 * C42663 + C26309 * C42659 +
             C26310 * C42662 + C26308 * C42658 + C26307 * C42661) *
                C47835 * C47734) *
               C942 +
           ((C22249 * C42661 + C22248 * C42658 + C22595 * C42662 +
             C22596 * C42659 + C23644 * C42663 + C23643 * C42660) *
                C47835 * C47734 -
            (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
             C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
                C47835 * C47896) *
               C943 +
           ((C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
             C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
                C47835 * C47896 -
            (C23641 * C42660 + C23642 * C42663 + C22598 * C42659 +
             C22597 * C42662 + C22246 * C42658 + C22247 * C42661) *
                C47835 * C47734) *
               C47927) *
              C47881 +
          (((C26311 * C42661 + C26312 * C42658 + C26313 * C42662 +
             C26314 * C42659 + C28398 * C42663 + C28397 * C42660) *
                C47835 * C47734 -
            (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
             C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
             (C21567 * C118 + C47574 * C125) * C42661) *
                C47835 * C47896) *
               C942 +
           ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
             C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
                C47835 * C47896 -
            (C28259 * C42660 + C28260 * C42663 + C23427 * C42659 +
             C23428 * C42662 + C22251 * C42658 + C22250 * C42661) *
                C47835 * C47734) *
               C943 +
           ((C22252 * C42661 + C22253 * C42658 + C23426 * C42662 +
             C23425 * C42659 + (C21567 * C7244 + C47574 * C7246) * C42663 +
             (C21567 * C7248 + C47574 * C7250) * C42660) *
                C47835 * C47734 -
            (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
             C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
                C47835 * C47896) *
               C47927) *
              C47612)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C47647 * C47629 * C108 -
          (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
           C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
           (C21567 * C118 + C47574 * C125) * C42661) *
              C47835 * C47647 * C47629 * C109 +
          ((C21567 * C119 + C47574 * C126) * C42661 +
           (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
           C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
              C47835 * C47647 * C47629 * C110 -
          ((C21567 * C438 + C47574 * C451) * C42660 +
           (C21567 * C421 + C47574 * C439) * C42663 + C26596 * C42659 +
           C26595 * C42662 + (C21567 * C130 + C47574 * C141) * C42658 +
           (C21567 * C120 + C47574 * C131) * C42661) *
              C47835 * C47647 * C47629 * C111 +
          ((C21567 * C121 + C47574 * C132) * C42661 +
           (C21567 * C133 + C47574 * C142) * C42658 +
           (C21567 * C422 + C47574 * C441) * C42662 +
           (C21567 * C440 + C47574 * C452) * C42659 +
           (C21567 * C423 + C47574 * C442) * C42663 +
           (C21567 * C443 + C47574 * C453) * C42660) *
              C47835 * C47647 * C47629 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C47966 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C47954 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47927) *
              C258 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C47954 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C47966 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47927) *
              C259 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C47966 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C47954 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21567 * C117 + C47574 * C124) * C42661 +
            (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
            C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
               C47835 * C47647 * C942 -
           (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
            C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
               C47835 * C47647 * C943 +
           (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
            C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
               C47835 * C47647 * C47927) *
              C47963 +
          ((C21721 * C42661 + C21722 * C42658 + C22250 * C42662 +
            C22251 * C42659 + C23428 * C42663 + C23427 * C42660) *
               C47835 * C47647 * C943 -
           (C26314 * C42660 + C26313 * C42663 + C26312 * C42659 +
            C26311 * C42662 + (C21567 * C128 + C47574 * C139) * C42658 +
            (C21567 * C118 + C47574 * C125) * C42661) *
               C47835 * C47647 * C942 -
           (C23425 * C42660 + C23426 * C42663 + C22253 * C42659 +
            C22252 * C42662 + C21724 * C42658 + C21723 * C42661) *
               C47835 * C47647 * C47927) *
              C47950 +
          (((C21567 * C119 + C47574 * C126) * C42661 +
            (C21567 * C129 + C47574 * C140) * C42658 + C26315 * C42662 +
            C26316 * C42659 + C26320 * C42663 + C26319 * C42660) *
               C47835 * C47647 * C942 -
           (C26317 * C42660 + C26318 * C42663 + C22256 * C42659 +
            C22257 * C42662 + C21728 * C42658 + C21727 * C42661) *
               C47835 * C47647 * C943 +
           (C21729 * C42661 + C21730 * C42658 + C22255 * C42662 +
            C22254 * C42659 + (C21567 * C1158 + C47574 * C1173) * C42663 +
            (C21567 * C1176 + C47574 * C1185) * C42660) *
               C47835 * C47647 * C47927) *
              C47921)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21567 * C117 + C47574 * C124) * C42661 +
           (C21567 * C127 + C47574 * C138) * C42658 + C26307 * C42662 +
           C26308 * C42659 + C26310 * C42663 + C26309 * C42660) *
              C47835 * C47647 * C1010 -
          (C22596 * C42660 + C22595 * C42663 + C22248 * C42659 +
           C22249 * C42662 + C21716 * C42658 + C21715 * C42661) *
              C47835 * C47647 * C1011 +
          (C21717 * C42661 + C21718 * C42658 + C22247 * C42662 +
           C22246 * C42659 + C22597 * C42663 + C22598 * C42660) *
              C47835 * C47647 * C1012 -
          (C22601 * C42660 + C22602 * C42663 + C22600 * C42659 +
           C22599 * C42662 + C21719 * C42658 + C21720 * C42661) *
              C47835 * C47647 * C1013 +
          (C22455 * C42661 + C22456 * C42658 + C22982 * C42662 +
           C22981 * C42659 + (C21567 * C22573 + C47574 * C22574) * C42663 +
           (C21567 * C22575 + C47574 * C22576) * C42660) *
              C47835 * C47647 * C1014) *
         C47601) /
            (p * q * std::sqrt(p + q));
}
