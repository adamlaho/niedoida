/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46743 = ae + be;
    const double C46742 = yA - yB;
    const double C46750 = zA - zB;
    const double C46764 = ae * be;
    const double C46762 = 0 * be;
    const double C46781 = 0 * be;
    const double C46796 = std::pow(ae, 2);
    const double C46795 = yP - yQ;
    const double C46794 = zP - zQ;
    const double C46793 = p + q;
    const double C46792 = p * q;
    const double C46804 = bs[4];
    const double C46802 = xP - xQ;
    const double C46809 = bs[5];
    const double C46816 = bs[6];
    const double C46824 = bs[7];
    const double C46838 = bs[3];
    const double C47261 = bs[2];
    const double C115 = bs[0];
    const double C47614 = xA - xB;
    const double C47633 = ce + de;
    const double C47632 = ce * de;
    const double C47631 = xC - xD;
    const double C47665 = yC - yD;
    const double C47683 = zC - zD;
    const double C46763 = std::pow(C46743, 2);
    const double C47624 = 2 * C46743;
    const double C47869 = std::pow(C46742, 2);
    const double C47951 = C46742 * be;
    const double C47949 = C46742 * ae;
    const double C47886 = std::pow(C46750, 2);
    const double C47952 = C46750 * be;
    const double C47950 = C46750 * ae;
    const double C46766 = C46764 * C46742;
    const double C46782 = C46764 * C46750;
    const double C46874 = C46795 * ae;
    const double C46929 = std::pow(C46795, 2);
    const double C46798 = C46794 * C46795;
    const double C46833 = C46794 * ae;
    const double C47012 = std::pow(C46794, 2);
    const double C46797 = 2 * C46792;
    const double C46810 = std::pow(C46802, 2);
    const double C47615 = std::pow(C47614, 2);
    const double C47917 = C47614 * be;
    const double C47916 = C47614 * ae;
    const double C47637 = 2 * C47633;
    const double C47636 = std::pow(C47633, 2);
    const double C47638 = C47631 * de;
    const double C47635 = C47631 * ce;
    const double C47634 = std::pow(C47631, 2);
    const double C47666 = std::pow(C47665, 2);
    const double C47725 = C47665 * de;
    const double C47723 = C47665 * ce;
    const double C47684 = std::pow(C47683, 2);
    const double C47767 = C47683 * de;
    const double C47765 = C47683 * ce;
    const double C46765 = 2 * C46763;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C46763;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C46763;
    const double C47918 = std::pow(C47624, -1);
    const double C47870 = C47869 * C46764;
    const double C47887 = C47886 * C46764;
    const double C46878 = C46838 * C46874;
    const double C46881 = C46804 * C46874;
    const double C46885 = C46809 * C46874;
    const double C46892 = C46816 * C46874;
    const double C46903 = C46824 * C46874;
    const double C46800 = C46798 * C46796;
    const double C46839 = C46838 * C46833;
    const double C46842 = C46804 * C46833;
    const double C46846 = C46809 * C46833;
    const double C46853 = C46816 * C46833;
    const double C46864 = C46824 * C46833;
    const double C46799 = C46797 / C46793;
    const double C122 = (-(bs[1] * C46874 * C46797) / C46793) / C46743;
    const double C123 = (-(bs[1] * C46833 * C46797) / C46793) / C46743;
    const double C116 = -(C46802 * bs[1] * C46797) / C46793;
    const double C304 = -(C46795 * bs[1] * C46797) / C46793;
    const double C507 = -(C46794 * bs[1] * C46797) / C46793;
    const double C47616 = C47615 * C46764;
    const double C47650 = std::pow(C47637, -1);
    const double C47926 = std::pow(C47637, -2);
    const double C47651 = 2 * C47636;
    const double C47930 = C47636 * C47637;
    const double C47929 = 4 * C47636;
    const double C47919 = std::pow(C47635, 2);
    const double C47639 = C47634 * C47632;
    const double C47667 = C47666 * C47632;
    const double C47931 = std::pow(C47723, 2);
    const double C47685 = C47684 * C47632;
    const double C47933 = std::pow(C47765, 2);
    const double C47871 = C47870 / C46743;
    const double C47888 = C47887 / C46743;
    const double C46805 = C46804 * C46800;
    const double C46812 = C46809 * C46800;
    const double C46817 = C46816 * C46800;
    const double C46826 = C46824 * C46800;
    const double C46803 = std::pow(C46799, 4);
    const double C46808 = -C46799;
    const double C46815 = std::pow(C46799, 6);
    const double C138 =
        (std::pow(-C46799, 3) * bs[3] * C46800 +
         std::pow(C46799, 4) * bs[4] * C46800 * std::pow(xP - xQ, 2)) /
        C46763;
    const double C47260 = std::pow(C46799, 2);
    const double C124 =
        (C46802 * std::pow(C46799, 2) * bs[2] * C46874) / C46743;
    const double C125 =
        (C46802 * std::pow(C46799, 2) * bs[2] * C46833) / C46743;
    const double C316 =
        (C46795 * std::pow(C46799, 2) * bs[2] * C46833) / C46743;
    const double C317 =
        (C46795 * std::pow(C46799, 2) * bs[2] * C46874) / C46743 -
        (ae * bs[1] * C46797) / (C46793 * C46743);
    const double C47617 = C47616 / C46743;
    const double C47964 = 4 * C47930;
    const double C47963 = C47633 * C47929;
    const double C47640 = C47639 / C47633;
    const double C47668 = C47667 / C47633;
    const double C47686 = C47685 / C47633;
    const double C47872 = -C47871;
    const double C47889 = -C47888;
    const double C46806 = C46803 * C46805;
    const double C46843 = C46803 * C46842;
    const double C46882 = C46803 * C46881;
    const double C46918 = C46804 * C46803;
    const double C46811 = std::pow(C46808, 5);
    const double C46823 = std::pow(C46808, 7);
    const double C46837 = std::pow(C46808, 3);
    const double C334 = (ae * std::pow(C46799, 2) * bs[2] * C46833 +
                         C46795 * std::pow(C46808, 3) * bs[3] * C46800) /
                        C46763;
    const double C46818 = C46815 * C46817;
    const double C46855 = C46815 * C46853;
    const double C46894 = C46815 * C46892;
    const double C46987 = C46816 * C46815;
    const double C47262 = C47261 * C47260;
    const double C519 = (C46794 * C47260 * C47261 * C46833) / C46743 -
                        (ae * bs[1] * C46797) / (C46793 * C46743);
    const double C520 = (C46794 * C47260 * C47261 * C46874) / C46743;
    const double C47618 = -C47617;
    const double C47641 = -C47640;
    const double C47669 = -C47668;
    const double C47687 = -C47686;
    const double C47873 = std::exp(C47872);
    const double C47890 = std::exp(C47889);
    const double C139 = (2 * C46802 * C46806 +
                         C46802 * (C46806 + std::pow(-C46799, 5) * bs[5] *
                                                C46800 * std::pow(C46802, 2))) /
                        C46763;
    const double C333 = (ae * C46802 * std::pow(C46808, 3) * bs[3] * C46833 +
                         C46795 * C46802 * C46806) /
                        C46763;
    const double C46844 = C46802 * C46843;
    const double C46927 = ae * C46843;
    const double C46926 = C46795 * C46843;
    const double C47376 = C46794 * C46843;
    const double C46883 = C46802 * C46882;
    const double C46959 = C46795 * C46882;
    const double C47010 = ae * C46882;
    const double C47009 = C46794 * C46882;
    const double C46955 = C46802 * C46918;
    const double C46969 = C46795 * C46918;
    const double C46968 = C46918 * ae;
    const double C47268 = C46918 * C46810;
    const double C47327 = C46918 * C46929;
    const double C47378 = C46918 * C47012;
    const double C47445 = C46794 * C46918;
    const double C46813 = C46811 * C46812;
    const double C46847 = C46811 * C46846;
    const double C46886 = C46811 * C46885;
    const double C46920 = C46809 * C46811;
    const double C46827 = C46823 * C46826;
    const double C46866 = C46823 * C46864;
    const double C46905 = C46823 * C46903;
    const double C46840 = C46837 * C46839;
    const double C46879 = C46837 * C46878;
    const double C46960 = C46838 * C46837;
    const double C536 =
        (ae * C46802 * C46837 * C46838 * C46874 + C46794 * C46802 * C46806) /
        C46763;
    const double C537 = (ae * std::pow(C46799, 2) * bs[2] * C46874 +
                         C46794 * C46837 * C46838 * C46800) /
                        C46763;
    const double C46819 = C46818 * C46810;
    const double C46822 = C46802 * C46818;
    const double C47041 = C46795 * C46818;
    const double C47123 = C46794 * C46818;
    const double C46856 = C46855 * C46810;
    const double C46863 = C46802 * C46855;
    const double C47042 = C46855 * C46929;
    const double C47152 = ae * C46855;
    const double C47151 = C46795 * C46855;
    const double C47505 = C46794 * C46855;
    const double C46895 = C46894 * C46810;
    const double C46902 = C46802 * C46894;
    const double C47070 = C46795 * C46894;
    const double C47124 = C46894 * C47012;
    const double C47221 = ae * C46894;
    const double C47220 = C46794 * C46894;
    const double C46988 = C46987 * C46810;
    const double C47087 = C46802 * C46987;
    const double C47176 = C46987 * C46929;
    const double C47175 = C46795 * C46987;
    const double C47174 = C46987 * ae;
    const double C47508 = C46987 * C47012;
    const double C117 = C47262 * C46810 - (bs[1] * C46797) / C46793;
    const double C303 = C46795 * C46802 * C47262;
    const double C305 = C47262 * C46929 - (bs[1] * C46797) / C46793;
    const double C506 = C46794 * C46802 * C47262;
    const double C508 = C47262 * C47012 - (bs[1] * C46797) / C46793;
    const double C971 = C46794 * C46795 * C47262;
    const double C47619 = std::exp(C47618);
    const double C47642 = std::exp(C47641);
    const double C47670 = std::exp(C47669);
    const double C47688 = std::exp(C47687);
    const double C151 = C47873 * C138;
    const double C147 = C47873 * C137;
    const double C145 = C47873 * C124;
    const double C10887 = C47873 * C520;
    const double C46767 = C46766 * C47873;
    const double C113 = -(2 * ae * be * (yA - yB) * C47873) / (ae + be);
    const double C4827 =
        ((C47873 - (C46742 * 2 * ae * be * C46742 * C47873) / C46743) * ae) /
            C46743 -
        (0 * be) / (2 * std::pow(C46743, 2));
    const double C4828 =
        (0 * ae) / C46743 - (ae * be * C46742 * C47873) / std::pow(C46743, 2);
    const double C16185 =
        (-(0 * be) / C46743) / (2 * C46743) -
        ((C47873 - (C46742 * 2 * ae * be * C46742 * C47873) / C46743) * be) /
            C46743;
    const double C16186 =
        (-(2 * ae * be * C46742 * C47873) / C46743) / (2 * C46743) -
        (0 * be) / C46743;
    const double C47985 = C47918 * C47873;
    const double C47984 = C47873 * C47949;
    const double C16181 = -(C47873 * C47951) / C46743;
    const double C46783 = C46782 * C47890;
    const double C114 = -(2 * ae * be * (zA - zB) * C47890) / (ae + be);
    const double C10559 =
        ((C47890 - (C46750 * 2 * ae * be * C46750 * C47890) / C46743) * ae) /
            C46743 -
        (0 * be) / (2 * std::pow(C46743, 2));
    const double C10560 =
        (0 * ae) / C46743 - (ae * be * C46750 * C47890) / std::pow(C46743, 2);
    const double C31580 =
        (-(0 * be) / C46743) / (2 * C46743) -
        ((C47890 - (C46750 * 2 * C46764 * C46750 * C47890) / C46743) * be) /
            C46743;
    const double C31581 =
        (-(2 * C46764 * C46750 * C47890) / C46743) / (2 * C46743) -
        (0 * be) / C46743;
    const double C47987 = C47918 * C47890;
    const double C47986 = C47890 * C47950;
    const double C31578 = -(C47890 * C47952) / C46743;
    const double C153 = C47873 * C139;
    const double C348 = C47873 * C333;
    const double C46956 = C46955 * ae;
    const double C47275 = 2 * C46955;
    const double C47331 = C46795 * C46955;
    const double C47384 = C46794 * C46955;
    const double C46971 = C46969 * ae;
    const double C47407 = 2 * C46969;
    const double C47427 = C46794 * C46969;
    const double C47450 = 2 * C47445;
    const double C47448 = C47445 * ae;
    const double C46923 = C46802 * C46813;
    const double C46928 = C46795 * C46813;
    const double C47011 = C46794 * C46813;
    const double C140 =
        (3 * (C46806 + C46813 * C46810) +
         C46802 * (2 * C46802 * C46813 +
                   C46802 * (C46813 +
                             std::pow(C46799, 6) * bs[6] * C46800 * C46810))) /
        C46763;
    const double C332 = (ae * (std::pow(C46808, 3) * bs[3] * C46833 +
                               C46803 * C46804 * C46833 * C46810) +
                         C46795 * (C46806 + C46813 * C46810)) /
                        C46763;
    const double C336 = (C46802 * C46806 + ae * C46795 * C46844 +
                         C46795 * (ae * C46844 + C46795 * C46802 * C46813)) /
                        C46763;
    const double C535 =
        (ae * (C46837 * C46838 * C46874 + C46803 * C46804 * C46874 * C46810) +
         C46794 * (C46806 + C46813 * C46810)) /
        C46763;
    const double C539 = (C46802 * C46806 + ae * C46794 * C46883 +
                         C46794 * (ae * C46883 + C46794 * C46802 * C46813)) /
                        C46763;
    const double C987 =
        (ae * (C46795 * C46883 + C46802 * C46838 * C46837 * ae) +
         C46794 * (ae * C46844 + C46795 * C46802 * C46813)) /
        C46763;
    const double C46848 = C46847 * C46810;
    const double C46852 = C46802 * C46847;
    const double C46931 = C46847 * C46929;
    const double C47040 = ae * C46847;
    const double C47039 = C46795 * C46847;
    const double C47444 = C46794 * C46847;
    const double C46887 = C46886 * C46810;
    const double C46891 = C46802 * C46886;
    const double C46967 = C46795 * C46886;
    const double C47014 = C46886 * C47012;
    const double C47122 = ae * C46886;
    const double C47121 = C46794 * C46886;
    const double C46949 = C46920 * C46810;
    const double C46977 = C46802 * C46920;
    const double C47073 = C46920 * C46929;
    const double C47072 = C46795 * C46920;
    const double C47071 = C46920 * ae;
    const double C47446 = C46920 * C47012;
    const double C47506 = C46794 * C46920;
    const double C46828 = C46827 * C46810;
    const double C47055 = C46802 * C46827;
    const double C47153 = C46795 * C46827;
    const double C47222 = C46794 * C46827;
    const double C46867 = C46866 * C46810;
    const double C47056 = C46802 * C46866;
    const double C47155 = C46866 * C46929;
    const double C46906 = C46905 * C46810;
    const double C47086 = C46802 * C46905;
    const double C47173 = C46795 * C46905;
    const double C47224 = C46905 * C47012;
    const double C335 = (C46837 * C46838 * C46800 + ae * C46795 * C46840 +
                         C46795 * (ae * C46840 + C46795 * C46806)) /
                        C46763;
    const double C1220 = (2 * (ae * C46840 + C46795 * C46806) +
                          ae * (C46840 + C46843 * std::pow(C46795, 2)) +
                          C46795 * (C46806 + ae * C46795 * C46843 +
                                    C46795 * (ae * C46843 + C46795 * C46813))) /
                         C46763;
    const double C127 =
        (std::pow(C46799, 2) * bs[2] * C46833 + C46840 * C46810) / C46743;
    const double C128 =
        (2 * C46802 * C46840 + C46802 * (C46840 + C46843 * C46810)) / C46743;
    const double C312 = (C46795 * (C46840 + C46843 * C46810)) / C46743;
    const double C314 = (C46795 * C46802 * C46840) / C46743;
    const double C319 = (C47260 * C47261 * C46833 + C46840 * C46929) / C46743;
    const double C321 = (C46802 * C46840 + C46844 * C46929) / C46743;
    const double C517 =
        (C46794 * C46802 * C46840 + C46802 * C47262 * ae) / C46743;
    const double C522 =
        (C47260 * C47261 * C46833 + C46794 * (C46794 * C46840 + C47262 * ae) +
         C46794 * C47262 * ae) /
        C46743;
    const double C977 =
        (C46794 * C46795 * C46840 + C46795 * C47262 * ae) / C46743;
    const double C1210 =
        (2 * C46795 * C46840 + C46795 * (C46840 + C46843 * C46929)) / C46743;
    const double C538 = (C46837 * C46838 * C46800 + ae * C46794 * C46879 +
                         C46794 * (ae * C46879 + C46794 * C46806)) /
                        C46763;
    const double C986 =
        (ae * (C46795 * C46879 + bs[2] * std::pow(C46799, 2) * ae) +
         C46794 * (ae * C46840 + C46795 * C46806)) /
        C46763;
    const double C2080 = (2 * (ae * C46879 + C46794 * C46806) +
                          ae * (C46879 + C46882 * std::pow(C46794, 2)) +
                          C46794 * (C46806 + ae * C46794 * C46882 +
                                    C46794 * (ae * C46882 + C46794 * C46813))) /
                         C46763;
    const double C126 =
        (std::pow(C46799, 2) * bs[2] * C46874 + C46879 * C46810) / C46743;
    const double C129 =
        (2 * C46802 * C46879 + C46802 * (C46879 + C46882 * C46810)) / C46743;
    const double C315 =
        (C46795 * C46802 * C46879 + C46802 * bs[2] * std::pow(C46799, 2) * ae) /
        C46743;
    const double C318 =
        (C47260 * C47261 * C46874 + C46795 * (C46795 * C46879 + C47262 * ae) +
         C46795 * C47262 * ae) /
        C46743;
    const double C516 = (C46794 * (C46879 + C46882 * C46810)) / C46743;
    const double C518 = (C46794 * C46802 * C46879) / C46743;
    const double C521 = (C47260 * C47261 * C46874 + C46879 * C47012) / C46743;
    const double C523 = (C46802 * C46879 + C46883 * C47012) / C46743;
    const double C976 = (C46794 * (C46795 * C46879 + C47262 * ae)) / C46743;
    const double C2071 =
        (2 * C46794 * C46879 + C46794 * (C46879 + C46882 * C47012)) / C46743;
    const double C46961 = C46960 * ae;
    const double C47265 = C46802 * C46960;
    const double C47269 = C46960 + C47268;
    const double C47326 = C46795 * C46960;
    const double C47328 = C46960 + C47327;
    const double C47377 = C46794 * C46960;
    const double C47380 = C46960 + C47378;
    const double C313 = (C46795 * (C46879 + C46882 * C46810) +
                         (bs[2] * std::pow(C46799, 2) + C46960 * C46810) * ae) /
                        C46743;
    const double C515 = (C46794 * (C46840 + C46843 * C46810) +
                         (C47262 + C46960 * C46810) * ae) /
                        C46743;
    const double C1353 = (C46794 * (C46840 + C46843 * C46929) +
                          (C47262 + C46960 * C46929) * ae) /
                         C46743;
    const double C118 =
        2 * C46802 * C47262 + C46802 * (C47262 + C46960 * C46810);
    const double C302 = C46795 * (C47262 + C46960 * C46810);
    const double C505 = C46794 * (C47262 + C46960 * C46810);
    const double C1202 =
        2 * C46795 * C47262 + C46795 * (C47262 + C46960 * C46929);
    const double C1339 = C46794 * (C47262 + C46960 * C46929);
    const double C2062 =
        2 * C46794 * C47262 + C46794 * (C47262 + C46960 * C47012);
    const double C551 = C47873 * C536;
    const double C10889 = C47873 * C537;
    const double C46820 = C46813 + C46819;
    const double C46825 = 2 * C46822;
    const double C46936 = C46795 * C46822;
    const double C47019 = C46794 * C46822;
    const double C46857 = C46847 + C46856;
    const double C46865 = 2 * C46863;
    const double C46937 = C46863 * C46929;
    const double C47054 = ae * C46863;
    const double C47053 = C46795 * C46863;
    const double C47458 = C46794 * C46863;
    const double C47046 = C46847 + C47042;
    const double C47159 = 2 * C47151;
    const double C47157 = ae * C47151;
    const double C47490 = C46794 * C47151;
    const double C46896 = C46886 + C46895;
    const double C46904 = 2 * C46902;
    const double C46976 = C46795 * C46902;
    const double C47020 = C46902 * C47012;
    const double C47136 = ae * C46902;
    const double C47135 = C46794 * C46902;
    const double C47128 = C46886 + C47124;
    const double C47228 = 2 * C47220;
    const double C47226 = ae * C47220;
    const double C46989 = C46920 + C46988;
    const double C47091 = C47087 * C46929;
    const double C47090 = C46795 * C47087;
    const double C47089 = C47087 * ae;
    const double C47460 = C47087 * C47012;
    const double C47180 = C46920 + C47176;
    const double C47179 = C47175 * ae;
    const double C47492 = C47175 * C47012;
    const double C47512 = C46920 + C47508;
    const double C47954 = C47918 * C47619;
    const double C47953 = C47619 * C47916;
    const double C4825 = -(C47619 * C47917) / C46743;
    const double C47644 = C47642 * C47635;
    const double C47643 = C47642 / C47637;
    const double C47653 = C47650 * C47642;
    const double C47922 = C47642 * C47638;
    const double C47961 = C47926 * C47642;
    const double C47955 = C47642 * C47919;
    const double C47724 = C47670 / C47637;
    const double C47726 = C47670 * C47723;
    const double C47733 = C47650 * C47670;
    const double C47937 = C47670 * C47725;
    const double C47967 = C47926 * C47670;
    const double C47965 = C47670 * C47931;
    const double C47766 = C47688 / C47637;
    const double C47768 = C47688 * C47765;
    const double C47775 = C47650 * C47688;
    const double C47943 = C47688 * C47767;
    const double C47970 = C47926 * C47688;
    const double C47968 = C47688 * C47933;
    const double C21861 = ((0 * ae) / C46743 - C46767 / C46763) / (2 * C46743) -
                          (0 * be) / C46743;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C349 = C113 * C303;
    const double C552 = C113 * C506;
    const double C10896 = C113 * C508;
    const double C10888 = C113 * C519;
    const double C10886 = C113 * C507;
    const double C11376 = C113 * C971;
    const double C4844 = C4827 * C117;
    const double C4834 = C4827 * C125;
    const double C4830 = C4827 * C116;
    const double C5030 = C4827 * C303;
    const double C5224 = C4827 * C506;
    const double C37417 = C4827 * C508;
    const double C37407 = C4827 * C519;
    const double C37403 = C4827 * C507;
    const double C37881 = C4827 * C971;
    const double C4832 = C4828 * C303;
    const double C37405 = C4828 * C971;
    const double C16202 = C16185 * C117;
    const double C16192 = C16185 * C125;
    const double C16188 = C16185 * C116;
    const double C16388 = C16185 * C303;
    const double C16582 = C16185 * C506;
    const double C26313 = C16185 * C508;
    const double C26303 = C16185 * C519;
    const double C26299 = C16185 * C507;
    const double C26777 = C16185 * C971;
    const double C16190 = C16186 * C303;
    const double C26301 = C16186 * C971;
    const double C4837 = C47985 * C333;
    const double C16195 = C47985 * C333;
    const double C21860 =
        (((C47873 - (C46742 * 2 * C46767) / C46743) * ae) / C46743 -
         C46762 / C46765) /
            (2 * C46743) -
        ((C46742 * ((0 * ae) / C46743 - C46767 / C46763) + C47985) * be) /
            C46743;
    const double C21857 = C47985 / C47624;
    const double C4823 = C47984 / C46743;
    const double C21855 = C47873 / C47624 - (C47984 * C47951) / C46763;
    const double C21856 = C47984 / C46765 - (C47985 * C47951) / C46743;
    const double C16209 = C16181 * C139;
    const double C16199 = C16181 * C138;
    const double C16193 = C16181 * C137;
    const double C16189 = C16181 * C124;
    const double C16385 = C16181 * C333;
    const double C16579 = C16181 * C536;
    const double C26304 = C16181 * C537;
    const double C26300 = C16181 * C520;
    const double C42663 = ((0 * ae) / C46743 - C46783 / C46763) / (2 * C46743) -
                          (0 * be) / C46743;
    const double C42662 =
        (((C47890 - (C46750 * 2 * C46783) / C46743) * ae) / C46743 -
         C46781 / C46765) /
            (2 * C46743) -
        ((C46750 * ((0 * ae) / C46743 - C46783 / C46763) + C47987) * be) /
            C46743;
    const double C42660 = C47987 / C47624;
    const double C10557 = C47986 / C46743;
    const double C42658 = C47890 / C47624 - (C47986 * C47952) / C46763;
    const double C42659 = C47986 / C46765 - (C47987 * C47952) / C46743;
    const double C46930 = C46927 + C46928;
    const double C47013 = C47010 + C47011;
    const double C159 = C47873 * C140;
    const double C16215 = C16181 * C140;
    const double C344 = C47873 * C332;
    const double C4839 = C47985 * C332;
    const double C16197 = C47985 * C332;
    const double C16403 = C16181 * C332;
    const double C354 = C47873 * C336;
    const double C5025 = C47985 * C336;
    const double C16395 = C16181 * C336;
    const double C16383 = C47985 * C336;
    const double C547 = C47873 * C535;
    const double C16597 = C16181 * C535;
    const double C557 = C47873 * C539;
    const double C16589 = C16181 * C539;
    const double C995 = C47873 * C987;
    const double C5219 = C47985 * C987;
    const double C16577 = C47985 * C987;
    const double C17107 = C16181 * C987;
    const double C46849 = C46843 + C46848;
    const double C46854 = 2 * C46852;
    const double C46935 = ae * C46852;
    const double C46934 = C46795 * C46852;
    const double C1219 = (2 * (ae * C46844 + C46795 * C46923) +
                          ae * (C46844 + C46852 * std::pow(C46795, 2)) +
                          C46795 * (C46923 + ae * C46795 * C46852 +
                                    C46795 * (ae * C46852 + C46795 * C46822))) /
                         C46763;
    const double C47383 = C46794 * C46852;
    const double C1208 =
        (2 * C46795 * C46844 + C46795 * (C46844 + C46852 * C46929)) / C46743;
    const double C46932 = C46843 + C46931;
    const double C47044 = C47040 + C47041;
    const double C47045 = 2 * C47039;
    const double C47043 = ae * C47039;
    const double C47426 = C46794 * C47039;
    const double C47447 = C47444 + C46968;
    const double C46888 = C46882 + C46887;
    const double C46893 = 2 * C46891;
    const double C46954 = C46795 * C46891;
    const double C47018 = ae * C46891;
    const double C47017 = C46794 * C46891;
    const double C2079 = (2 * (ae * C46883 + C46794 * C46923) +
                          ae * (C46883 + C46891 * std::pow(C46794, 2)) +
                          C46794 * (C46923 + ae * C46794 * C46891 +
                                    C46794 * (ae * C46891 + C46794 * C46822))) /
                         C46763;
    const double C2069 =
        (2 * C46794 * C46883 + C46794 * (C46883 + C46891 * C47012)) / C46743;
    const double C46970 = C46967 + C46968;
    const double C47015 = C46882 + C47014;
    const double C47126 = C47122 + C47123;
    const double C47127 = 2 * C47121;
    const double C47125 = ae * C47121;
    const double C46950 = C46918 + C46949;
    const double C46979 = C46795 * C46977;
    const double C46978 = C46977 * ae;
    const double C46999 = 2 * C46977;
    const double C47332 = C46977 * C46929;
    const double C47385 = C46977 * C47012;
    const double C47459 = C46794 * C46977;
    const double C47076 = C46918 + C47073;
    const double C47075 = C47072 * ae;
    const double C47177 = 2 * C47072;
    const double C47428 = C47072 * C47012;
    const double C47491 = C46794 * C47072;
    const double C47074 = C47070 + C47071;
    const double C47510 = C47505 + C47071;
    const double C47449 = C46918 + C47446;
    const double C47513 = 2 * C47506;
    const double C47511 = C47506 * ae;
    const double C46829 = C46818 + C46828;
    const double C47058 = C46795 * C47055;
    const double C47137 = C46794 * C47055;
    const double C47158 = C47152 + C47153;
    const double C47227 = C47221 + C47222;
    const double C46868 = C46855 + C46867;
    const double C47060 = C47056 * C46929;
    const double C47160 = C46855 + C47155;
    const double C46907 = C46894 + C46906;
    const double C47088 = C46795 * C47086;
    const double C47138 = C47086 * C47012;
    const double C47178 = C47173 + C47174;
    const double C47229 = C46894 + C47224;
    const double C150 = C113 * C127;
    const double C4840 = C4827 * C127;
    const double C16198 = C16185 * C127;
    const double C152 = C113 * C128;
    const double C4850 = C4827 * C128;
    const double C16208 = C16185 * C128;
    const double C343 = C113 * C312;
    const double C4838 = C4828 * C312;
    const double C5044 = C4827 * C312;
    const double C16196 = C16186 * C312;
    const double C16402 = C16185 * C312;
    const double C347 = C113 * C314;
    const double C4836 = C4828 * C314;
    const double C5026 = C4827 * C314;
    const double C16194 = C16186 * C314;
    const double C16384 = C16185 * C314;
    const double C353 = C113 * C321;
    const double C5036 = C4827 * C321;
    const double C5024 = C4828 * C321;
    const double C16394 = C16185 * C321;
    const double C16382 = C16186 * C321;
    const double C550 = C113 * C517;
    const double C5220 = C4827 * C517;
    const double C16578 = C16185 * C517;
    const double C10894 = C113 * C522;
    const double C26309 = C16185 * C522;
    const double C37413 = C4827 * C522;
    const double C11378 = C113 * C977;
    const double C26305 = C16186 * C977;
    const double C26781 = C16185 * C977;
    const double C37409 = C4828 * C977;
    const double C37885 = C4827 * C977;
    const double C10895 = C47873 * C538;
    const double C26310 = C16181 * C538;
    const double C11379 = C47873 * C986;
    const double C26306 = C47985 * C986;
    const double C26782 = C16181 * C986;
    const double C37410 = C47985 * C986;
    const double C12647 = C47873 * C2080;
    const double C28048 = C16181 * C2080;
    const double C149 = C47873 * C126;
    const double C16203 = C16181 * C126;
    const double C155 = C47873 * C129;
    const double C16205 = C16181 * C129;
    const double C350 = C47873 * C315;
    const double C4833 = C47985 * C315;
    const double C16191 = C47985 * C315;
    const double C16389 = C16181 * C315;
    const double C549 = C47873 * C516;
    const double C16593 = C16181 * C516;
    const double C553 = C47873 * C518;
    const double C16583 = C16181 * C518;
    const double C10897 = C47873 * C521;
    const double C26314 = C16181 * C521;
    const double C555 = C47873 * C523;
    const double C16585 = C16181 * C523;
    const double C11377 = C47873 * C976;
    const double C26302 = C47985 * C976;
    const double C26778 = C16181 * C976;
    const double C37406 = C47985 * C976;
    const double C12645 = C47873 * C2071;
    const double C28044 = C16181 * C2071;
    const double C46962 = C46959 + C46961;
    const double C47379 = C47376 + C46961;
    const double C2070 =
        (2 * (C46794 * C46840 + C47262 * ae) +
         C46794 * (C46840 + C46794 * (C46794 * C46843 + C46961) +
                   C46794 * C46960 * ae) +
         (C47262 + C46960 * C47012) * ae) /
        C46743;
    const double C320 =
        (C46802 * C46879 + C46795 * (C46795 * C46883 + C47265 * ae) +
         C46795 * C47265 * ae) /
        C46743;
    const double C524 =
        (C46802 * C46840 + C46794 * (C46794 * C46844 + C47265 * ae) +
         C46794 * C47265 * ae) /
        C46743;
    const double C978 = (C46794 * (C46795 * C46883 + C47265 * ae)) / C46743;
    const double C979 =
        (C46794 * C46795 * C46844 + C46795 * C47265 * ae) / C46743;
    const double C1351 = (C46794 * (C46844 + C46852 * C46929) +
                          (C47265 + C46955 * C46929) * ae) /
                         C46743;
    const double C2068 =
        (2 * (C46794 * C46844 + C47265 * ae) +
         C46794 * (C46844 + C46794 * (C46794 * C46852 + C46956) +
                   C46794 * C46955 * ae) +
         (C47265 + C46955 * C47012) * ae) /
        C46743;
    const double C306 = C46802 * C47262 + C47265 * C46929;
    const double C509 = C46802 * C47262 + C47265 * C47012;
    const double C972 = C46794 * C46795 * C47265;
    const double C1201 =
        2 * C46795 * C47265 + C46795 * (C47265 + C46955 * C46929);
    const double C1335 = C46795 * C47265 + C47331 * C47012;
    const double C1338 = C46794 * (C47265 + C46955 * C46929);
    const double C2061 =
        2 * C46794 * C47265 + C46794 * (C47265 + C46955 * C47012);
    const double C119 = 3 * (C47262 + C46960 * C46810) +
                        C46802 * (2 * C47265 + C46802 * C47269);
    const double C307 = C47262 + C46960 * C46810 + C47269 * C46929;
    const double C308 = C46795 * (2 * C47265 + C46802 * C47269);
    const double C510 = C47262 + C46960 * C46810 + C47269 * C47012;
    const double C511 = C46794 * (2 * C47265 + C46802 * C47269);
    const double C973 = C46794 * C46795 * C47269;
    const double C1347 =
        (C46795 * C46840 + C46794 * (C46794 * C46926 + C47326 * ae) +
         C46794 * C47326 * ae) /
        C46743;
    const double C2474 =
        (2 * (C46794 * C46926 + C47326 * ae) +
         C46794 * (C46926 + C46794 * (C46794 * C47039 + C46971) +
                   C46794 * C46969 * ae) +
         (C47326 + C46969 * C47012) * ae) /
        C46743;
    const double C1336 = C46795 * C47262 + C47326 * C47012;
    const double C2470 =
        2 * C46794 * C47326 + C46794 * (C47326 + C46969 * C47012);
    const double C1203 = 3 * (C47262 + C46960 * C46929) +
                         C46795 * (2 * C47326 + C46795 * C47328);
    const double C1340 = C47262 + C46960 * C46929 + C47328 * C47012;
    const double C1758 = C46794 * (2 * C47326 + C46795 * C47328);
    const double C2063 = 3 * (C47262 + C46960 * C47012) +
                         C46794 * (2 * C47377 + C46794 * C47380);
    const double C346 = C47873 * C313;
    const double C4843 = C47985 * C313;
    const double C16201 = C47985 * C313;
    const double C16399 = C16181 * C313;
    const double C546 = C113 * C515;
    const double C5238 = C4827 * C515;
    const double C16596 = C16185 * C515;
    const double C11770 = C113 * C1353;
    const double C26783 = C16186 * C1353;
    const double C27175 = C16185 * C1353;
    const double C37887 = C4828 * C1353;
    const double C38279 = C4827 * C1353;
    const double C154 = C113 * C118;
    const double C4846 = C4827 * C118;
    const double C16204 = C16185 * C118;
    const double C345 = C113 * C302;
    const double C4842 = C4828 * C302;
    const double C5040 = C4827 * C302;
    const double C16200 = C16186 * C302;
    const double C16398 = C16185 * C302;
    const double C548 = C113 * C505;
    const double C5234 = C4827 * C505;
    const double C16592 = C16185 * C505;
    const double C11768 = C113 * C1339;
    const double C26779 = C16186 * C1339;
    const double C27171 = C16185 * C1339;
    const double C37883 = C4828 * C1339;
    const double C38275 = C4827 * C1339;
    const double C12644 = C113 * C2062;
    const double C28043 = C16185 * C2062;
    const double C39143 = C4827 * C2062;
    const double C141 =
        (4 * (2 * C46802 * C46813 + C46802 * C46820) +
         C46802 * (3 * C46820 +
                   C46802 * (2 * C46802 * C46818 +
                             C46802 * (C46818 + std::pow(C46808, 7) * bs[7] *
                                                    C46800 * C46810)))) /
        C46763;
    const double C46858 = C46802 * C46857;
    const double C46862 = 3 * C46857;
    const double C46942 = ae * C46857;
    const double C46941 = C46795 * C46857;
    const double C47390 = C46794 * C46857;
    const double C46939 = C46852 + C46937;
    const double C47059 = 2 * C47053;
    const double C47057 = ae * C47053;
    const double C47433 = C46794 * C47053;
    const double C47049 = C46795 * C47046;
    const double C47154 = 3 * C47046;
    const double C47150 = ae * C47046;
    const double C47481 = C46794 * C47046;
    const double C47161 = C46818 + C47157;
    const double C46897 = C46802 * C46896;
    const double C46901 = 3 * C46896;
    const double C46948 = C46795 * C46896;
    const double C47025 = ae * C46896;
    const double C47024 = C46794 * C46896;
    const double C47022 = C46891 + C47020;
    const double C47141 = 2 * C47135;
    const double C47139 = ae * C47135;
    const double C47131 = C46794 * C47128;
    const double C47223 = 3 * C47128;
    const double C47219 = ae * C47128;
    const double C47230 = C46818 + C47226;
    const double C46991 = C46795 * C46989;
    const double C46990 = C46989 * ae;
    const double C47000 = C46802 * C46989;
    const double C47337 = C46989 * C46929;
    const double C47392 = C46989 * C47012;
    const double C47094 = C46977 + C47091;
    const double C47093 = C47090 * ae;
    const double C47435 = C47090 * C47012;
    const double C47463 = C46977 + C47460;
    const double C47183 = C46795 * C47180;
    const double C47182 = C47180 * ae;
    const double C47483 = C47180 * C47012;
    const double C47495 = C47072 + C47492;
    const double C47515 = C46794 * C47512;
    const double C105 = C47954 / C47624;
    const double C103 = C47619 / C47624 - (C47953 * C47917) / C46763;
    const double C104 = C47953 / C46765 - (C47954 * C47917) / C46743;
    const double C16183 = C47953 / C46743;
    const double C47645 = C47644 * C47638;
    const double C47652 = C47644 / C47651;
    const double C47923 = C47650 * C47644;
    const double C47921 = C47644 / C47633;
    const double C299 = (C47642 * std::pow(C47638, 2)) / C47636 + C47643;
    const double C47654 = C47653 * C47638;
    const double C47927 = C47635 * C47653;
    const double C47925 = 2 * C47653;
    const double C47971 = C47653 / C47929;
    const double C112 = C47653 / C47964;
    const double C2951 = C47653 / C47637;
    const double C47957 = C47922 / C47633;
    const double C300 = (-2 * C47650 * C47922) / C47633;
    const double C47988 = C47955 / C47636;
    const double C1126 = (C47670 * std::pow(C47725, 2)) / C47636 + C47724;
    const double C47727 = C47726 * C47725;
    const double C47732 = C47726 / C47651;
    const double C47935 = C47726 / C47633;
    const double C47932 = C47650 * C47726;
    const double C47734 = C47733 * C47725;
    const double C47941 = C47723 * C47733;
    const double C47940 = 2 * C47733;
    const double C47977 = C47733 / C47929;
    const double C1198 = C47733 / C47964;
    const double C2948 = C47733 / C47637;
    const double C47973 = C47937 / C47633;
    const double C1127 = (-2 * C47650 * C47937) / C47633;
    const double C47993 = C47965 / C47636;
    const double C1880 = (C47688 * std::pow(C47767, 2)) / C47636 + C47766;
    const double C47769 = C47768 * C47767;
    const double C47774 = C47768 / C47651;
    const double C47936 = C47768 / C47633;
    const double C47934 = C47650 * C47768;
    const double C47776 = C47775 * C47767;
    const double C47947 = C47765 * C47775;
    const double C47946 = 2 * C47775;
    const double C47983 = C47775 / C47929;
    const double C2059 = C47775 / C47964;
    const double C3850 = C47775 / C47637;
    const double C47979 = C47943 / C47633;
    const double C1881 = (-2 * C47650 * C47943) / C47633;
    const double C47995 = C47968 / C47636;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C10911 = C10888 + C10889;
    const double C10910 = C10886 + C10887;
    const double C4857 = C4823 * C140;
    const double C4851 = C4823 * C139;
    const double C4847 = C4823 * C129;
    const double C4845 = C4823 * C126;
    const double C4841 = C4823 * C138;
    const double C4835 = C4823 * C137;
    const double C4831 = C4823 * C124;
    const double C5045 = C4823 * C332;
    const double C5041 = C4823 * C313;
    const double C5037 = C4823 * C336;
    const double C5031 = C4823 * C315;
    const double C5027 = C4823 * C333;
    const double C5239 = C4823 * C535;
    const double C5235 = C4823 * C516;
    const double C5231 = C4823 * C539;
    const double C5227 = C4823 * C523;
    const double C5225 = C4823 * C518;
    const double C5221 = C4823 * C536;
    const double C5749 = C4823 * C987;
    const double C37418 = C4823 * C521;
    const double C37414 = C4823 * C538;
    const double C37408 = C4823 * C537;
    const double C37404 = C4823 * C520;
    const double C37886 = C4823 * C986;
    const double C37882 = C4823 * C976;
    const double C39148 = C4823 * C2080;
    const double C39144 = C4823 * C2071;
    const double C21859 =
        (((0 - (C46742 * C46762) / C46743) * ae) / C46743 - (0 * be) / C46765) /
            (2 * C46743) -
        ((C46742 * (((C47873 - (C46742 * 2 * C46767) / C46743) * ae) / C46743 -
                    C46762 / C46765) +
          C4823) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46767 / C46763;
    const double C16222 = C16192 + C16193;
    const double C16220 = C16188 + C16189;
    const double C26317 = C26303 + C26304;
    const double C26315 = C26299 + C26300;
    const double C42661 =
        (((0 - (C46750 * C46781) / C46743) * ae) / C46743 - (0 * be) / C46765) /
            (2 * C46743) -
        ((C46750 * (((C47890 - (C46750 * 2 * C46783) / C46743) * ae) / C46743 -
                    C46781 / C46765) +
          C10557) *
         be) /
            C46743 +
        (0 * ae) / C46743 - C46783 / C46763;
    const double C337 = (C46806 + C46813 * C46810 + ae * C46795 * C46849 +
                         C46795 * (ae * C46849 + C46795 * C46820)) /
                        C46763;
    const double C338 = (ae * (2 * C46844 + C46802 * C46849) +
                         C46795 * (2 * C46802 * C46813 + C46802 * C46820)) /
                        C46763;
    const double C131 = (3 * (C46840 + C46843 * C46810) +
                         C46802 * (2 * C46844 + C46802 * C46849)) /
                        C46743;
    const double C323 = (C46840 + C46843 * C46810 + C46849 * C46929) / C46743;
    const double C325 = (C46795 * (2 * C46844 + C46802 * C46849)) / C46743;
    const double C526 =
        (C46840 + C46843 * C46810 + C46794 * (C46794 * C46849 + C47269 * ae) +
         C46794 * C47269 * ae) /
        C46743;
    const double C528 = (C46794 * (2 * C46844 + C46802 * C46849) +
                         (2 * C47265 + C46802 * C47269) * ae) /
                        C46743;
    const double C981 =
        (C46794 * C46795 * C46849 + C46795 * C47269 * ae) / C46743;
    const double C1206 =
        (2 * C46795 * C46849 + C46795 * (C46849 + C46857 * C46929)) / C46743;
    const double C46938 = C46935 + C46936;
    const double C1345 =
        (C46795 * C46844 + C46794 * (C46794 * C46934 + C47331 * ae) +
         C46794 * C47331 * ae) /
        C46743;
    const double C1484 = C47873 * C1219;
    const double C5039 = C47985 * C1219;
    const double C6291 = C4823 * C1219;
    const double C16397 = C47985 * C1219;
    const double C17633 = C16181 * C1219;
    const double C47386 = C47383 + C46956;
    const double C1483 = C113 * C1208;
    const double C5038 = C4828 * C1208;
    const double C6290 = C4827 * C1208;
    const double C16396 = C16186 * C1208;
    const double C17632 = C16185 * C1208;
    const double C1221 =
        (3 * (C46806 + ae * C46926 + C46795 * C46930) +
         ae * (2 * C46926 + C46795 * C46932) +
         C46795 * (2 * C46930 + ae * C46932 +
                   C46795 * (C46813 + ae * C46795 * C46847 +
                             C46795 * (ae * C46847 + C46795 * C46818)))) /
        C46763;
    const double C1213 = (3 * (C46840 + C46843 * C46929) +
                          C46795 * (2 * C46926 + C46795 * C46932)) /
                         C46743;
    const double C1356 =
        (C46840 + C46843 * C46929 + C46794 * (C46794 * C46932 + C47328 * ae) +
         C46794 * C47328 * ae) /
        C46743;
    const double C1762 = (C46794 * (2 * C46926 + C46795 * C46932) +
                          (2 * C47326 + C46795 * C47328) * ae) /
                         C46743;
    const double C47048 = C46795 * C47044;
    const double C47107 = C46794 * C47044;
    const double C47149 = 2 * C47044;
    const double C47047 = C46813 + C47043;
    const double C47429 = C47426 + C46971;
    const double C47451 = C46794 * C47447;
    const double C47504 = 2 * C47447;
    const double C540 = (C46806 + C46813 * C46810 + ae * C46794 * C46888 +
                         C46794 * (ae * C46888 + C46794 * C46820)) /
                        C46763;
    const double C541 = (ae * (2 * C46883 + C46802 * C46888) +
                         C46794 * (2 * C46802 * C46813 + C46802 * C46820)) /
                        C46763;
    const double C988 =
        (ae * (C46795 * C46888 +
               (C46838 * C46837 + C46804 * C46803 * C46810) * ae) +
         C46794 * (ae * C46849 + C46795 * C46820)) /
        C46763;
    const double C130 = (3 * (C46879 + C46882 * C46810) +
                         C46802 * (2 * C46883 + C46802 * C46888)) /
                        C46743;
    const double C322 =
        (C46879 + C46882 * C46810 + C46795 * (C46795 * C46888 + C47269 * ae) +
         C46795 * C47269 * ae) /
        C46743;
    const double C324 = (C46795 * (2 * C46883 + C46802 * C46888) +
                         (2 * C47265 + C46802 * C47269) * ae) /
                        C46743;
    const double C525 = (C46879 + C46882 * C46810 + C46888 * C47012) / C46743;
    const double C527 = (C46794 * (2 * C46883 + C46802 * C46888)) / C46743;
    const double C980 = (C46794 * (C46795 * C46888 + C47269 * ae)) / C46743;
    const double C2067 =
        (2 * C46794 * C46888 + C46794 * (C46888 + C46896 * C47012)) / C46743;
    const double C46957 = C46954 + C46956;
    const double C47021 = C47018 + C47019;
    const double C2362 = C47873 * C2079;
    const double C7365 = C4823 * C2079;
    const double C18691 = C16181 * C2079;
    const double C2364 = C47873 * C2069;
    const double C7369 = C4823 * C2069;
    const double C18695 = C16181 * C2069;
    const double C46972 = C46795 * C46970;
    const double C47069 = 2 * C46970;
    const double C47106 = ae * C46970;
    const double C47105 = C46794 * C46970;
    const double C2081 =
        (3 * (C46806 + ae * C47009 + C46794 * C47013) +
         ae * (2 * C47009 + C46794 * C47015) +
         C46794 * (2 * C47013 + ae * C47015 +
                   C46794 * (C46813 + ae * C46794 * C46886 +
                             C46794 * (ae * C46886 + C46794 * C46818)))) /
        C46763;
    const double C2072 = (3 * (C46879 + C46882 * C47012) +
                          C46794 * (2 * C47009 + C46794 * C47015)) /
                         C46743;
    const double C47130 = C46794 * C47126;
    const double C47218 = 2 * C47126;
    const double C47129 = C46813 + C47125;
    const double C46951 = C46950 * ae;
    const double C47276 = C46802 * C46950;
    const double C47281 = 3 * C46950;
    const double C47336 = C46795 * C46950;
    const double C47391 = C46794 * C46950;
    const double C1349 = (C46794 * (C46849 + C46857 * C46929) +
                          (C47269 + C46950 * C46929) * ae) /
                         C46743;
    const double C1200 =
        2 * C46795 * C47269 + C46795 * (C47269 + C46950 * C46929);
    const double C1337 = C46794 * (C47269 + C46950 * C46929);
    const double C2060 =
        2 * C46794 * C47269 + C46794 * (C47269 + C46950 * C47012);
    const double C46981 = C46979 * ae;
    const double C47412 = 2 * C46979;
    const double C47434 = C46794 * C46979;
    const double C2471 =
        2 * C46794 * C47331 + C46794 * (C47331 + C46979 * C47012);
    const double C46980 = C46976 + C46978;
    const double C47461 = C47458 + C46978;
    const double C47333 = C46955 + C47332;
    const double C47387 = C46955 + C47385;
    const double C47464 = 2 * C47459;
    const double C47462 = C47459 * ae;
    const double C47078 = C47076 * ae;
    const double C47408 = C46795 * C47076;
    const double C47471 = 3 * C47076;
    const double C47482 = C46794 * C47076;
    const double C7503 =
        2 * C46794 * C47328 + C46794 * (C47328 + C47076 * C47012);
    const double C47493 = C47490 + C47075;
    const double C47430 = C46969 + C47428;
    const double C47496 = 2 * C47491;
    const double C47494 = C47491 * ae;
    const double C47077 = C46795 * C47074;
    const double C47108 = C47074 * C47012;
    const double C47172 = 2 * C47074;
    const double C47205 = ae * C47074;
    const double C47204 = C46794 * C47074;
    const double C47514 = C46794 * C47510;
    const double C47452 = C46794 * C47449;
    const double C47509 = 3 * C47449;
    const double C47507 = C47449 * ae;
    const double C46830 = C46802 * C46829;
    const double C46943 = C46795 * C46829;
    const double C47026 = C46794 * C46829;
    const double C1218 = (2 * (ae * C46849 + C46795 * C46820) +
                          ae * (C46849 + C46857 * std::pow(C46795, 2)) +
                          C46795 * (C46820 + ae * C46795 * C46857 +
                                    C46795 * (ae * C46857 + C46795 * C46829))) /
                         C46763;
    const double C2078 = (2 * (ae * C46888 + C46794 * C46820) +
                          ae * (C46888 + C46896 * std::pow(C46794, 2)) +
                          C46794 * (C46820 + ae * C46794 * C46896 +
                                    C46794 * (ae * C46896 + C46794 * C46829))) /
                         C46763;
    const double C47062 = C47054 + C47058;
    const double C47140 = C47136 + C47137;
    const double C47162 = C46795 * C47158;
    const double C47206 = C46794 * C47158;
    const double C47231 = C46794 * C47227;
    const double C46869 = C46802 * C46868;
    const double C46944 = C46868 * C46929;
    const double C47063 = C46863 + C47060;
    const double C47163 = C46795 * C47160;
    const double C46908 = C46802 * C46907;
    const double C46986 = C46795 * C46907;
    const double C47027 = C46907 * C47012;
    const double C47092 = C47088 + C47089;
    const double C47142 = C46902 + C47138;
    const double C47181 = C46795 * C47178;
    const double C47207 = C47178 * C47012;
    const double C47232 = C46794 * C47229;
    const double C167 = C150 + C151;
    const double C16225 = C16198 + C16199;
    const double C168 = C152 + C153;
    const double C16230 = C16208 + C16209;
    const double C367 = C343 + C344;
    const double C4866 = C4838 + C4839;
    const double C16224 = C16196 + C16197;
    const double C16424 = C16402 + C16403;
    const double C369 = C347 + C348;
    const double C4865 = C4836 + C4837;
    const double C16223 = C16194 + C16195;
    const double C16415 = C16384 + C16385;
    const double C372 = C353 + C354;
    const double C5056 = C5024 + C5025;
    const double C16420 = C16394 + C16395;
    const double C16414 = C16382 + C16383;
    const double C572 = C550 + C551;
    const double C16609 = C16578 + C16579;
    const double C10912 = C10894 + C10895;
    const double C26320 = C26309 + C26310;
    const double C11389 = C11378 + C11379;
    const double C26318 = C26305 + C26306;
    const double C26787 = C26781 + C26782;
    const double C37422 = C37409 + C37410;
    const double C166 = C148 + C149;
    const double C16227 = C16202 + C16203;
    const double C370 = C349 + C350;
    const double C4863 = C4832 + C4833;
    const double C16221 = C16190 + C16191;
    const double C16417 = C16388 + C16389;
    const double C573 = C552 + C553;
    const double C16611 = C16582 + C16583;
    const double C10913 = C10896 + C10897;
    const double C26322 = C26313 + C26314;
    const double C11388 = C11376 + C11377;
    const double C26316 = C26301 + C26302;
    const double C26785 = C26777 + C26778;
    const double C37420 = C37405 + C37406;
    const double C1363 = (ae * C46840 + C46795 * C46806 + ae * C46794 * C46962 +
                          C46794 * (ae * C46962 + C46794 * C46930)) /
                         C46763;
    const double C1366 =
        (ae * (C46879 + C46795 * C46962 + C46795 * C46960 * ae) +
         C46794 * (C46806 + ae * C46926 + C46795 * C46930)) /
        C46763;
    const double C2479 =
        (2 * (ae * C46962 + C46794 * C46930) + ae * (C46962 + C46970 * C47012) +
         C46794 * (C46930 + ae * C46794 * C46970 +
                   C46794 * (ae * C46970 +
                             C46794 * (ae * C46847 + C46795 * C46818)))) /
        C46763;
    const double C1211 =
        (2 * (C46795 * C46879 + C47262 * ae) +
         C46795 * (C46879 + C46795 * C46962 + C46795 * C46960 * ae) +
         (C47262 + C46960 * C46929) * ae) /
        C46743;
    const double C1348 =
        (C46795 * C46879 + C47262 * ae + C46962 * C47012) / C46743;
    const double C1354 =
        (C46794 * (C46879 + C46795 * C46962 + C47326 * ae)) / C46743;
    const double C2473 =
        (2 * C46794 * C46962 + C46794 * (C46962 + C46970 * C47012)) / C46743;
    const double C2073 =
        (3 * (C46840 + C46794 * C47379 + C47377 * ae) +
         C46794 * (2 * C47379 +
                   C46794 * (C46843 + C46794 * (C46794 * C46847 + C46968) +
                             C46794 * C46918 * ae) +
                   C47380 * ae) +
         (2 * C47377 + C46794 * C47380) * ae) /
        C46743;
    const double C12646 = C113 * C2070;
    const double C28047 = C16185 * C2070;
    const double C39147 = C4827 * C2070;
    const double C352 = C47873 * C320;
    const double C5033 = C4823 * C320;
    const double C5029 = C47985 * C320;
    const double C16391 = C16181 * C320;
    const double C16387 = C47985 * C320;
    const double C556 = C113 * C524;
    const double C5230 = C4827 * C524;
    const double C16588 = C16185 * C524;
    const double C993 = C47873 * C978;
    const double C5223 = C47985 * C978;
    const double C5745 = C4823 * C978;
    const double C16581 = C47985 * C978;
    const double C17103 = C16181 * C978;
    const double C994 = C113 * C979;
    const double C5218 = C4828 * C979;
    const double C5748 = C4827 * C979;
    const double C16576 = C16186 * C979;
    const double C17106 = C16185 * C979;
    const double C1649 = C113 * C1351;
    const double C5750 = C4828 * C1351;
    const double C6496 = C4827 * C1351;
    const double C17108 = C16186 * C1351;
    const double C17838 = C16185 * C1351;
    const double C2361 = C113 * C2068;
    const double C7364 = C4827 * C2068;
    const double C18690 = C16185 * C2068;
    const double C351 = C113 * C306;
    const double C5032 = C4827 * C306;
    const double C5028 = C4828 * C306;
    const double C16390 = C16185 * C306;
    const double C16386 = C16186 * C306;
    const double C554 = C113 * C509;
    const double C5226 = C4827 * C509;
    const double C16584 = C16185 * C509;
    const double C992 = C113 * C972;
    const double C5222 = C4828 * C972;
    const double C5744 = C4827 * C972;
    const double C16580 = C16186 * C972;
    const double C17102 = C16185 * C972;
    const double C1485 = C113 * C1201;
    const double C5034 = C4828 * C1201;
    const double C6294 = C4827 * C1201;
    const double C16392 = C16186 * C1201;
    const double C17636 = C16185 * C1201;
    const double C2241 = C113 * C1335;
    const double C5228 = C4828 * C1335;
    const double C7226 = C4827 * C1335;
    const double C16586 = C16186 * C1335;
    const double C18552 = C16185 * C1335;
    const double C1651 = C113 * C1338;
    const double C5746 = C4828 * C1338;
    const double C6500 = C4827 * C1338;
    const double C17104 = C16186 * C1338;
    const double C17842 = C16185 * C1338;
    const double C2363 = C113 * C2061;
    const double C7368 = C4827 * C2061;
    const double C18694 = C16185 * C2061;
    const double C156 = C113 * C119;
    const double C4860 = C4827 * C119;
    const double C16218 = C16185 * C119;
    const double C355 = C113 * C307;
    const double C5054 = C4827 * C307;
    const double C5042 = C4828 * C307;
    const double C16412 = C16185 * C307;
    const double C16400 = C16186 * C307;
    const double C359 = C113 * C308;
    const double C4848 = C4828 * C308;
    const double C5402 = C4827 * C308;
    const double C16206 = C16186 * C308;
    const double C16760 = C16185 * C308;
    const double C558 = C113 * C510;
    const double C5248 = C4827 * C510;
    const double C16606 = C16185 * C510;
    const double C562 = C113 * C511;
    const double C5544 = C4827 * C511;
    const double C16902 = C16185 * C511;
    const double C996 = C113 * C973;
    const double C5236 = C4828 * C973;
    const double C5758 = C4827 * C973;
    const double C16594 = C16186 * C973;
    const double C17116 = C16185 * C973;
    const double C11766 = C113 * C1347;
    const double C26307 = C16186 * C1347;
    const double C27167 = C16185 * C1347;
    const double C37411 = C4828 * C1347;
    const double C38271 = C4827 * C1347;
    const double C13130 = C113 * C2474;
    const double C28049 = C16186 * C2474;
    const double C28523 = C16185 * C2474;
    const double C39149 = C4828 * C2474;
    const double C39623 = C4827 * C2474;
    const double C11764 = C113 * C1336;
    const double C26311 = C16186 * C1336;
    const double C27163 = C16185 * C1336;
    const double C37415 = C4828 * C1336;
    const double C38267 = C4827 * C1336;
    const double C13132 = C113 * C2470;
    const double C28045 = C16186 * C2470;
    const double C28527 = C16185 * C2470;
    const double C39145 = C4828 * C2470;
    const double C39627 = C4827 * C2470;
    const double C11778 = C113 * C1340;
    const double C27185 = C16185 * C1340;
    const double C27165 = C16186 * C1340;
    const double C38289 = C4827 * C1340;
    const double C38269 = C4828 * C1340;
    const double C12256 = C113 * C1758;
    const double C27173 = C16186 * C1758;
    const double C27653 = C16185 * C1758;
    const double C38277 = C4828 * C1758;
    const double C38757 = C4827 * C1758;
    const double C12654 = C113 * C2063;
    const double C28057 = C16185 * C2063;
    const double C39157 = C4827 * C2063;
    const double C570 = C546 + C547;
    const double C16618 = C16596 + C16597;
    const double C169 = C154 + C155;
    const double C16228 = C16204 + C16205;
    const double C368 = C345 + C346;
    const double C4868 = C4842 + C4843;
    const double C16226 = C16200 + C16201;
    const double C16422 = C16398 + C16399;
    const double C571 = C548 + C549;
    const double C16616 = C16592 + C16593;
    const double C12656 = C12644 + C12645;
    const double C28059 = C28043 + C28044;
    const double C161 = C47873 * C141;
    const double C46859 = C46854 + C46858;
    const double C1215 = (3 * (C46844 + C46852 * C46929) +
                          C46795 * (2 * C46934 + C46795 * C46939)) /
                         C46743;
    const double C47061 = C46822 + C47057;
    const double C47051 = C47045 + C47049;
    const double C46898 = C46893 + C46897;
    const double C2074 = (3 * (C46883 + C46891 * C47012) +
                          C46794 * (2 * C47017 + C46794 * C47022)) /
                         C46743;
    const double C47143 = C46822 + C47139;
    const double C47133 = C47127 + C47131;
    const double C46993 = C46991 * ae;
    const double C47001 = C46999 + C47000;
    const double C47338 = C46950 + C47337;
    const double C47394 = C46950 + C47392;
    const double C47096 = C47094 * ae;
    const double C47413 = C46795 * C47094;
    const double C47437 = C46979 + C47435;
    const double C47466 = C46794 * C47463;
    const double C47185 = C47177 + C47183;
    const double C47485 = C47076 + C47483;
    const double C47498 = C46794 * C47495;
    const double C47517 = C47513 + C47515;
    const double C47646 = C47645 / C47636;
    const double C47958 = 2 * C47923;
    const double C47655 = C47654 / C47633;
    const double C47962 = C47927 / C47651;
    const double C47989 = C47921 - C47957;
    const double C2688 = -C47957;
    const double C48003 = C47988 + C47643;
    const double C47728 = C47727 / C47636;
    const double C47966 = 2 * C47932;
    const double C47735 = C47734 / C47633;
    const double C47976 = C47941 / C47651;
    const double C47997 = C47935 - C47973;
    const double C2580 = -C47973;
    const double C48006 = C47993 + C47724;
    const double C47770 = C47769 / C47636;
    const double C47969 = 2 * C47934;
    const double C47777 = C47776 / C47633;
    const double C47982 = C47947 / C47651;
    const double C48000 = C47936 - C47979;
    const double C3342 = -C47979;
    const double C48007 = C47995 + C47766;
    const double C175 = C165 * C47890;
    const double C10563 = C165 * C10557;
    const double C31584 = C165 * C31578;
    const double C174 = C164 * C114;
    const double C10562 = C164 * C10559;
    const double C31583 = C164 * C31580;
    const double C4872 = C4850 + C4851;
    const double C4870 = C4846 + C4847;
    const double C4869 = C4844 + C4845;
    const double C4867 = C4840 + C4841;
    const double C4864 = C4834 + C4835;
    const double C4862 = C4830 + C4831;
    const double C5066 = C5044 + C5045;
    const double C5064 = C5040 + C5041;
    const double C5062 = C5036 + C5037;
    const double C5059 = C5030 + C5031;
    const double C5057 = C5026 + C5027;
    const double C5260 = C5238 + C5239;
    const double C5258 = C5234 + C5235;
    const double C5253 = C5224 + C5225;
    const double C5251 = C5220 + C5221;
    const double C37426 = C37417 + C37418;
    const double C37424 = C37413 + C37414;
    const double C37421 = C37407 + C37408;
    const double C37419 = C37403 + C37404;
    const double C37891 = C37885 + C37886;
    const double C37889 = C37881 + C37882;
    const double C39159 = C39143 + C39144;
    const double C358 = C47873 * C337;
    const double C5051 = C4823 * C337;
    const double C5047 = C47985 * C337;
    const double C16409 = C16181 * C337;
    const double C16405 = C47985 * C337;
    const double C362 = C47873 * C338;
    const double C4853 = C47985 * C338;
    const double C5399 = C4823 * C338;
    const double C16211 = C47985 * C338;
    const double C16757 = C16181 * C338;
    const double C158 = C113 * C131;
    const double C4856 = C4827 * C131;
    const double C16214 = C16185 * C131;
    const double C357 = C113 * C323;
    const double C5050 = C4827 * C323;
    const double C5046 = C4828 * C323;
    const double C16408 = C16185 * C323;
    const double C16404 = C16186 * C323;
    const double C361 = C113 * C325;
    const double C4852 = C4828 * C325;
    const double C5398 = C4827 * C325;
    const double C16210 = C16186 * C325;
    const double C16756 = C16185 * C325;
    const double C560 = C113 * C526;
    const double C5244 = C4827 * C526;
    const double C16602 = C16185 * C526;
    const double C564 = C113 * C528;
    const double C5540 = C4827 * C528;
    const double C16898 = C16185 * C528;
    const double C998 = C113 * C981;
    const double C5240 = C4828 * C981;
    const double C5754 = C4827 * C981;
    const double C16598 = C16186 * C981;
    const double C17112 = C16185 * C981;
    const double C1479 = C113 * C1206;
    const double C5048 = C4828 * C1206;
    const double C16406 = C16186 * C1206;
    const double C1222 =
        (3 * (C46923 + ae * C46934 + C46795 * C46938) +
         ae * (2 * C46934 + C46795 * C46939) +
         C46795 *
             (2 * C46938 + ae * C46939 +
              C46795 * (C46822 + ae * C46795 * C46863 +
                        C46795 * (ae * C46863 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C2239 = C113 * C1345;
    const double C5232 = C4828 * C1345;
    const double C7222 = C4827 * C1345;
    const double C16590 = C16186 * C1345;
    const double C18548 = C16185 * C1345;
    const double C1489 = C1483 + C1484;
    const double C5063 = C5038 + C5039;
    const double C6297 = C6290 + C6291;
    const double C16421 = C16396 + C16397;
    const double C17639 = C17632 + C17633;
    const double C11776 = C113 * C1356;
    const double C27181 = C16185 * C1356;
    const double C27169 = C16186 * C1356;
    const double C38285 = C4827 * C1356;
    const double C38273 = C4828 * C1356;
    const double C12258 = C113 * C1762;
    const double C27177 = C16186 * C1762;
    const double C27657 = C16185 * C1762;
    const double C38281 = C4828 * C1762;
    const double C38761 = C4827 * C1762;
    const double C47156 = C47149 + C47150;
    const double C47050 = C47047 + C47048;
    const double C47453 = C46843 + C47451;
    const double C561 = C47873 * C540;
    const double C5245 = C4823 * C540;
    const double C16603 = C16181 * C540;
    const double C565 = C47873 * C541;
    const double C5541 = C4823 * C541;
    const double C16899 = C16181 * C541;
    const double C999 = C47873 * C988;
    const double C5241 = C47985 * C988;
    const double C5755 = C4823 * C988;
    const double C16599 = C47985 * C988;
    const double C17113 = C16181 * C988;
    const double C157 = C47873 * C130;
    const double C4861 = C4823 * C130;
    const double C16219 = C16181 * C130;
    const double C356 = C47873 * C322;
    const double C5055 = C4823 * C322;
    const double C5043 = C47985 * C322;
    const double C16413 = C16181 * C322;
    const double C16401 = C47985 * C322;
    const double C360 = C47873 * C324;
    const double C4849 = C47985 * C324;
    const double C5403 = C4823 * C324;
    const double C16207 = C47985 * C324;
    const double C16761 = C16181 * C324;
    const double C559 = C47873 * C525;
    const double C5249 = C4823 * C525;
    const double C16607 = C16181 * C525;
    const double C563 = C47873 * C527;
    const double C5545 = C4823 * C527;
    const double C16903 = C16181 * C527;
    const double C997 = C47873 * C980;
    const double C5237 = C47985 * C980;
    const double C5759 = C4823 * C980;
    const double C16595 = C47985 * C980;
    const double C17117 = C16181 * C980;
    const double C2360 = C47873 * C2067;
    const double C1362 = (ae * C46844 + C46795 * C46923 + ae * C46794 * C46957 +
                          C46794 * (ae * C46957 + C46794 * C46938)) /
                         C46763;
    const double C1365 =
        (ae * (C46883 + C46795 * C46957 + C46795 * C46955 * ae) +
         C46794 * (C46923 + ae * C46934 + C46795 * C46938)) /
        C46763;
    const double C1209 =
        (2 * (C46795 * C46883 + C47265 * ae) +
         C46795 * (C46883 + C46795 * C46957 + C46795 * C46955 * ae) +
         (C47265 + C46955 * C46929) * ae) /
        C46743;
    const double C1346 =
        (C46795 * C46883 + C47265 * ae + C46957 * C47012) / C46743;
    const double C1352 =
        (C46794 * (C46883 + C46795 * C46957 + C47331 * ae)) / C46743;
    const double C2082 =
        (3 * (C46923 + ae * C47017 + C46794 * C47021) +
         ae * (2 * C47017 + C46794 * C47022) +
         C46794 *
             (2 * C47021 + ae * C47022 +
              C46794 * (C46822 + ae * C46794 * C46902 +
                        C46794 * (ae * C46902 + C46794 * C46802 * C46827)))) /
        C46763;
    const double C46973 = C46882 + C46972;
    const double C47109 = C47106 + C47107;
    const double C12653 = C47873 * C2081;
    const double C28054 = C16181 * C2081;
    const double C39154 = C4823 * C2081;
    const double C12655 = C47873 * C2072;
    const double C28058 = C16181 * C2072;
    const double C39158 = C4823 * C2072;
    const double C47225 = C47218 + C47219;
    const double C47132 = C47129 + C47130;
    const double C46952 = C46948 + C46951;
    const double C47393 = C47390 + C46951;
    const double C2066 =
        (2 * (C46794 * C46849 + C47269 * ae) +
         C46794 * (C46849 + C46794 * (C46794 * C46857 + C46951) +
                   C46794 * C46950 * ae) +
         (C47269 + C46950 * C47012) * ae) /
        C46743;
    const double C47277 = C47275 + C47276;
    const double C1343 =
        (C46795 * C46849 + C46794 * (C46794 * C46941 + C47336 * ae) +
         C46794 * C47336 * ae) /
        C46743;
    const double C1334 = C46795 * C47269 + C47336 * C47012;
    const double C2472 =
        2 * C46794 * C47336 + C46794 * (C47336 + C46991 * C47012);
    const double C1645 = C113 * C1349;
    const double C5752 = C4828 * C1349;
    const double C17110 = C16186 * C1349;
    const double C1481 = C113 * C1200;
    const double C5052 = C4828 * C1200;
    const double C16410 = C16186 * C1200;
    const double C1647 = C113 * C1337;
    const double C5756 = C4828 * C1337;
    const double C17114 = C16186 * C1337;
    const double C2359 = C113 * C2060;
    const double C47436 = C47433 + C46981;
    const double C2476 =
        (2 * (C46794 * C46934 + C47331 * ae) +
         C46794 * (C46934 + C46794 * (C46794 * C47053 + C46981) +
                   C46794 * C46979 * ae) +
         (C47331 + C46979 * C47012) * ae) /
        C46743;
    const double C7366 = C4828 * C2471;
    const double C12858 = C113 * C2471;
    const double C18692 = C16186 * C2471;
    const double C46982 = C46795 * C46980;
    const double C47085 = 2 * C46980;
    const double C47113 = ae * C46980;
    const double C47112 = C46794 * C46980;
    const double C2480 =
        (2 * (ae * C46957 + C46794 * C46938) + ae * (C46957 + C46980 * C47012) +
         C46794 *
             (C46938 + ae * C46794 * C46980 +
              C46794 * (ae * C46980 +
                        C46794 * (ae * C46863 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C2475 =
        (2 * C46794 * C46957 + C46794 * (C46957 + C46980 * C47012)) / C46743;
    const double C47465 = C46794 * C47461;
    const double C1358 =
        (C46844 + C46852 * C46929 + C46794 * (C46794 * C46939 + C47333 * ae) +
         C46794 * C47333 * ae) /
        C46743;
    const double C1764 = (C46794 * (2 * C46934 + C46795 * C46939) +
                          (2 * C47331 + C46795 * C47333) * ae) /
                         C46743;
    const double C1204 = 3 * (C47265 + C46955 * C46929) +
                         C46795 * (2 * C47331 + C46795 * C47333);
    const double C1341 = C47265 + C46955 * C46929 + C47333 * C47012;
    const double C1759 = C46794 * (2 * C47331 + C46795 * C47333);
    const double C7504 =
        2 * C46794 * C47333 + C46794 * (C47333 + C47094 * C47012);
    const double C2075 =
        (3 * (C46844 + C46794 * C47386 + C47384 * ae) +
         C46794 * (2 * C47386 +
                   C46794 * (C46852 + C46794 * (C46794 * C46863 + C46978) +
                             C46794 * C46977 * ae) +
                   C47387 * ae) +
         (2 * C47384 + C46794 * C47387) * ae) /
        C46743;
    const double C2064 = 3 * (C47265 + C46955 * C47012) +
                         C46794 * (2 * C47384 + C46794 * C47387);
    const double C47484 = C47481 + C47078;
    const double C7506 =
        (2 * (C46794 * C46932 + C47328 * ae) +
         C46794 * (C46932 + C46794 * (C46794 * C47046 + C47078) +
                   C46794 * C47076 * ae) +
         (C47328 + C47076 * C47012) * ae) /
        C46743;
    const double C47409 = C47407 + C47408;
    const double C28525 = C16186 * C7503;
    const double C39625 = C4828 * C7503;
    const double C43511 = C113 * C7503;
    const double C47497 = C46794 * C47493;
    const double C7020 =
        (3 * (C46926 + C46794 * C47429 + C47427 * ae) +
         C46794 * (2 * C47429 +
                   C46794 * (C47039 + C46794 * (C46794 * C47151 + C47075) +
                             C46794 * C47072 * ae) +
                   C47430 * ae) +
         (2 * C47427 + C46794 * C47430) * ae) /
        C46743;
    const double C7017 = 3 * (C47326 + C46969 * C47012) +
                         C46794 * (2 * C47427 + C46794 * C47430);
    const double C47079 = C46886 + C47077;
    const double C47110 = C46970 + C47108;
    const double C47210 = 2 * C47204;
    const double C47208 = ae * C47204;
    const double C47516 = C46847 + C47514;
    const double C47454 = C47450 + C47452;
    const double C46831 = C46825 + C46830;
    const double C46945 = C46942 + C46943;
    const double C47028 = C47025 + C47026;
    const double C1480 = C47873 * C1218;
    const double C5049 = C47985 * C1218;
    const double C16407 = C47985 * C1218;
    const double C2358 = C47873 * C2078;
    const double C47064 = C46795 * C47062;
    const double C47114 = C46794 * C47062;
    const double C47144 = C46794 * C47140;
    const double C47164 = C47161 + C47162;
    const double C47209 = C47205 + C47206;
    const double C47233 = C47230 + C47231;
    const double C46870 = C46865 + C46869;
    const double C46946 = C46857 + C46944;
    const double C47065 = C46795 * C47063;
    const double C47165 = C47159 + C47163;
    const double C46909 = C46904 + C46908;
    const double C46992 = C46986 + C46990;
    const double C47029 = C46896 + C47027;
    const double C47095 = C46795 * C47092;
    const double C47115 = C47092 * C47012;
    const double C47145 = C46794 * C47142;
    const double C47184 = C46894 + C47181;
    const double C47211 = C47074 + C47207;
    const double C47234 = C47228 + C47232;
    const double C177 = C167 * C47890;
    const double C10568 = C167 * C10557;
    const double C31589 = C167 * C31578;
    const double C178 = C168 * C47890;
    const double C10571 = C168 * C10557;
    const double C31592 = C168 * C31578;
    const double C379 = C367 * C47890;
    const double C10733 = C367 * C10557;
    const double C31754 = C367 * C31578;
    const double C381 = C369 * C47890;
    const double C10726 = C369 * C10557;
    const double C31747 = C369 * C31578;
    const double C384 = C372 * C47890;
    const double C10729 = C372 * C10557;
    const double C31750 = C372 * C31578;
    const double C584 = C572 * C47890;
    const double C10565 = C572 * C47987;
    const double C10892 = C572 * C10557;
    const double C31586 = C572 * C47987;
    const double C31909 = C572 * C31578;
    const double C176 = C166 * C114;
    const double C10569 = C166 * C10559;
    const double C31590 = C166 * C31580;
    const double C382 = C370 * C114;
    const double C10727 = C370 * C10559;
    const double C31748 = C370 * C31580;
    const double C585 = C573 * C114;
    const double C10564 = C573 * C10560;
    const double C10893 = C573 * C10559;
    const double C31585 = C573 * C31581;
    const double C31910 = C573 * C31580;
    const double C11767 = C47873 * C1363;
    const double C26308 = C47985 * C1363;
    const double C27168 = C16181 * C1363;
    const double C37412 = C47985 * C1363;
    const double C38272 = C4823 * C1363;
    const double C11771 = C47873 * C1366;
    const double C26784 = C47985 * C1366;
    const double C27176 = C16181 * C1366;
    const double C37888 = C47985 * C1366;
    const double C38280 = C4823 * C1366;
    const double C13131 = C47873 * C2479;
    const double C28050 = C47985 * C2479;
    const double C28524 = C16181 * C2479;
    const double C39150 = C47985 * C2479;
    const double C39624 = C4823 * C2479;
    const double C11765 = C47873 * C1348;
    const double C26312 = C47985 * C1348;
    const double C27164 = C16181 * C1348;
    const double C37416 = C47985 * C1348;
    const double C38268 = C4823 * C1348;
    const double C11769 = C47873 * C1354;
    const double C26780 = C47985 * C1354;
    const double C27172 = C16181 * C1354;
    const double C37884 = C47985 * C1354;
    const double C38276 = C4823 * C1354;
    const double C13133 = C47873 * C2473;
    const double C28046 = C47985 * C2473;
    const double C28528 = C16181 * C2473;
    const double C39146 = C47985 * C2473;
    const double C39628 = C4823 * C2473;
    const double C12652 = C113 * C2073;
    const double C28053 = C16185 * C2073;
    const double C39153 = C4827 * C2073;
    const double C12657 = C12646 + C12647;
    const double C28061 = C28047 + C28048;
    const double C39161 = C39147 + C39148;
    const double C575 = C556 + C557;
    const double C5256 = C5230 + C5231;
    const double C16614 = C16588 + C16589;
    const double C1005 = C994 + C995;
    const double C5250 = C5218 + C5219;
    const double C5762 = C5748 + C5749;
    const double C16608 = C16576 + C16577;
    const double C17120 = C17106 + C17107;
    const double C2367 = C2361 + C2362;
    const double C7371 = C7364 + C7365;
    const double C18697 = C18690 + C18691;
    const double C371 = C351 + C352;
    const double C5060 = C5032 + C5033;
    const double C5058 = C5028 + C5029;
    const double C16418 = C16390 + C16391;
    const double C16416 = C16386 + C16387;
    const double C574 = C554 + C555;
    const double C5254 = C5226 + C5227;
    const double C16612 = C16584 + C16585;
    const double C1004 = C992 + C993;
    const double C5252 = C5222 + C5223;
    const double C5760 = C5744 + C5745;
    const double C16610 = C16580 + C16581;
    const double C17118 = C17102 + C17103;
    const double C2368 = C2363 + C2364;
    const double C7373 = C7368 + C7369;
    const double C18699 = C18694 + C18695;
    const double C582 = C570 * C47890;
    const double C10566 = C570 * C47987;
    const double C10903 = C570 * C10557;
    const double C31587 = C570 * C47987;
    const double C31916 = C570 * C31578;
    const double C179 = C169 * C114;
    const double C10570 = C169 * C10559;
    const double C31591 = C169 * C31580;
    const double C380 = C368 * C114;
    const double C10732 = C368 * C10559;
    const double C31753 = C368 * C31580;
    const double C583 = C571 * C114;
    const double C10567 = C571 * C10560;
    const double C10902 = C571 * C10559;
    const double C31588 = C571 * C31581;
    const double C31915 = C571 * C31580;
    const double C132 = (4 * (2 * C46844 + C46802 * C46849) +
                         C46802 * (3 * C46849 + C46802 * C46859)) /
                        C46743;
    const double C326 =
        (2 * C46844 + C46802 * C46849 + C46859 * C46929) / C46743;
    const double C328 = (C46795 * (3 * C46849 + C46802 * C46859)) / C46743;
    const double C6288 = C4828 * C1215;
    const double C17630 = C16186 * C1215;
    const double C5998 = (4 * (2 * C46926 + C46795 * C46932) +
                          C46795 * (3 * C46932 + C46795 * C47051)) /
                         C46743;
    const double C133 = (4 * (2 * C46883 + C46802 * C46888) +
                         C46802 * (3 * C46888 + C46802 * C46898)) /
                        C46743;
    const double C530 =
        (2 * C46883 + C46802 * C46888 + C46898 * C47012) / C46743;
    const double C532 = (C46794 * (3 * C46888 + C46802 * C46898)) / C46743;
    const double C12651 = C47873 * C2074;
    const double C12637 = (4 * (2 * C47009 + C46794 * C47015) +
                           C46794 * (3 * C47015 + C46794 * C47133)) /
                          C46743;
    const double C2478 =
        (2 * (C46794 * C46941 + C47336 * ae) +
         C46794 * (C46941 + C46794 * (C46794 * C46795 * C46868 + C46993) +
                   C46794 * C46991 * ae) +
         (C47336 + C46991 * C47012) * ae) /
        C46743;
    const double C47032 = C47001 * ae;
    const double C47282 = C46802 * C47001;
    const double C47397 = C46795 * C47001;
    const double C1205 = 3 * (C47269 + C46950 * C46929) +
                         C46795 * (2 * C47336 + C46795 * C47338);
    const double C1342 = C47269 + C46950 * C46929 + C47338 * C47012;
    const double C1760 = C46794 * (2 * C47336 + C46795 * C47338);
    const double C2065 = 3 * (C47269 + C46950 * C47012) +
                         C46794 * (2 * C47391 + C46794 * C47394);
    const double C7508 =
        (2 * (C46794 * C46939 + C47333 * ae) +
         C46794 * (C46939 + C46794 * (C46794 * C47063 + C47096) +
                   C46794 * C47094 * ae) +
         (C47333 + C47094 * C47012) * ae) /
        C46743;
    const double C47414 = C47412 + C47413;
    const double C7018 = 3 * (C47331 + C46979 * C47012) +
                         C46794 * (2 * C47434 + C46794 * C47437);
    const double C47468 = C47464 + C47466;
    const double C47187 = C47185 * ae;
    const double C47472 = C46795 * C47185;
    const double C23342 = 3 * (C47328 + C47076 * C47012) +
                          C46794 * (2 * C47482 + C46794 * C47485);
    const double C47500 = C47496 + C47498;
    const double C47519 = C46794 * C47517;
    const double C47647 = C47643 - C47646;
    const double C47990 = C47958 / C47633;
    const double C47656 = C47652 - C47655;
    const double C48004 = C47989 / C47637;
    const double C47729 = C47724 - C47728;
    const double C47994 = C47966 / C47633;
    const double C47736 = C47732 - C47735;
    const double C48008 = C47997 / C47637;
    const double C47771 = C47766 - C47770;
    const double C47996 = C47969 / C47633;
    const double C47778 = C47774 - C47777;
    const double C48010 = C48000 / C47637;
    const double C171 = C158 + C159;
    const double C4875 = C4856 + C4857;
    const double C16233 = C16214 + C16215;
    const double C374 = C357 + C358;
    const double C5069 = C5050 + C5051;
    const double C5067 = C5046 + C5047;
    const double C16427 = C16408 + C16409;
    const double C16425 = C16404 + C16405;
    const double C376 = C361 + C362;
    const double C4873 = C4852 + C4853;
    const double C5405 = C5398 + C5399;
    const double C16231 = C16210 + C16211;
    const double C16763 = C16756 + C16757;
    const double C6289 = C47985 * C1222;
    const double C17631 = C47985 * C1222;
    const double C1493 = C1489 * C47890;
    const double C11922 = C1489 * C10557;
    const double C32899 = C1489 * C31578;
    const double C6001 =
        (4 * (2 * C46930 + ae * C46932 + C46795 * C47050) +
         ae * (3 * C46932 + C46795 * C47051) +
         C46795 *
             (3 * C47050 + ae * C47051 +
              C46795 * (2 * C47044 + ae * C47046 +
                        C46795 * (C46818 + ae * C46795 * C46855 +
                                  C46795 * (ae * C46855 + C46795 * C46827))))) /
        C46763;
    const double C47455 = C47453 + C47448;
    const double C577 = C560 + C561;
    const double C5263 = C5244 + C5245;
    const double C16621 = C16602 + C16603;
    const double C579 = C564 + C565;
    const double C5547 = C5540 + C5541;
    const double C16905 = C16898 + C16899;
    const double C1007 = C998 + C999;
    const double C5261 = C5240 + C5241;
    const double C5765 = C5754 + C5755;
    const double C16619 = C16598 + C16599;
    const double C17123 = C17112 + C17113;
    const double C170 = C156 + C157;
    const double C4877 = C4860 + C4861;
    const double C16235 = C16218 + C16219;
    const double C373 = C355 + C356;
    const double C5071 = C5054 + C5055;
    const double C5065 = C5042 + C5043;
    const double C16429 = C16412 + C16413;
    const double C16423 = C16400 + C16401;
    const double C375 = C359 + C360;
    const double C4871 = C4848 + C4849;
    const double C5407 = C5402 + C5403;
    const double C16229 = C16206 + C16207;
    const double C16765 = C16760 + C16761;
    const double C576 = C558 + C559;
    const double C5265 = C5248 + C5249;
    const double C16623 = C16606 + C16607;
    const double C578 = C562 + C563;
    const double C5549 = C5544 + C5545;
    const double C16907 = C16902 + C16903;
    const double C1006 = C996 + C997;
    const double C5259 = C5236 + C5237;
    const double C5767 = C5758 + C5759;
    const double C16617 = C16594 + C16595;
    const double C17125 = C17116 + C17117;
    const double C2240 = C47873 * C1362;
    const double C5233 = C47985 * C1362;
    const double C7223 = C4823 * C1362;
    const double C16591 = C47985 * C1362;
    const double C18549 = C16181 * C1362;
    const double C1650 = C47873 * C1365;
    const double C5751 = C47985 * C1365;
    const double C6497 = C4823 * C1365;
    const double C17109 = C47985 * C1365;
    const double C17839 = C16181 * C1365;
    const double C1486 = C47873 * C1209;
    const double C5035 = C47985 * C1209;
    const double C6295 = C4823 * C1209;
    const double C16393 = C47985 * C1209;
    const double C17637 = C16181 * C1209;
    const double C2242 = C47873 * C1346;
    const double C5229 = C47985 * C1346;
    const double C7227 = C4823 * C1346;
    const double C16587 = C47985 * C1346;
    const double C18553 = C16181 * C1346;
    const double C1652 = C47873 * C1352;
    const double C5747 = C47985 * C1352;
    const double C6501 = C4823 * C1352;
    const double C17105 = C47985 * C1352;
    const double C17843 = C16181 * C1352;
    const double C12649 = C47873 * C2082;
    const double C46974 = C46973 + C46971;
    const double C12661 = C12654 + C12655;
    const double C28066 = C28057 + C28058;
    const double C39166 = C39157 + C39158;
    const double C12641 =
        (4 * (2 * C47013 + ae * C47015 + C46794 * C47132) +
         ae * (3 * C47015 + C46794 * C47133) +
         C46794 *
             (3 * C47132 + ae * C47133 +
              C46794 * (2 * C47126 + ae * C47128 +
                        C46794 * (C46818 + ae * C46794 * C46894 +
                                  C46794 * (ae * C46894 + C46794 * C46827))))) /
        C46763;
    const double C1207 =
        (2 * (C46795 * C46888 + C47269 * ae) +
         C46795 * (C46888 + C46795 * C46952 + C46795 * C46950 * ae) +
         (C47269 + C46950 * C46929) * ae) /
        C46743;
    const double C1344 =
        (C46795 * C46888 + C47269 * ae + C46952 * C47012) / C46743;
    const double C1350 =
        (C46794 * (C46888 + C46795 * C46952 + C47336 * ae)) / C46743;
    const double C2077 =
        (3 * (C46849 + C46794 * C47393 + C47391 * ae) +
         C46794 * (2 * C47393 +
                   C46794 * (C46857 + C46794 * (C46794 * C46868 + C46990) +
                             C46794 * C46989 * ae) +
                   C47394 * ae) +
         (2 * C47391 + C46794 * C47394) * ae) /
        C46743;
    const double C2357 = C113 * C2066;
    const double C327 =
        (2 * C46883 + C46802 * C46888 +
         C46795 * (C46795 * C46898 + C47277 * ae) + C46795 * C47277 * ae) /
        C46743;
    const double C329 = (C46795 * (3 * C46888 + C46802 * C46898) +
                         (3 * C47269 + C46802 * C47277) * ae) /
                        C46743;
    const double C529 =
        (2 * C46844 + C46802 * C46849 +
         C46794 * (C46794 * C46859 + C47277 * ae) + C46794 * C47277 * ae) /
        C46743;
    const double C531 = (C46794 * (3 * C46849 + C46802 * C46859) +
                         (3 * C47269 + C46802 * C47277) * ae) /
                        C46743;
    const double C982 =
        (C46794 * C46795 * C46859 + C46795 * C47277 * ae) / C46743;
    const double C983 = (C46794 * (C46795 * C46898 + C47277 * ae)) / C46743;
    const double C120 = 4 * (2 * C47265 + C46802 * C47269) +
                        C46802 * (3 * C47269 + C46802 * C47277);
    const double C309 = 2 * C47265 + C46802 * C47269 + C47277 * C46929;
    const double C310 = C46795 * (3 * C47269 + C46802 * C47277);
    const double C512 = 2 * C47265 + C46802 * C47269 + C47277 * C47012;
    const double C513 = C46794 * (3 * C47269 + C46802 * C47277);
    const double C974 = C46794 * C46795 * C47277;
    const double C1474 =
        2 * C46795 * C47277 + C46795 * (C47277 + C47001 * C46929);
    const double C1640 = C46794 * (C47277 + C47001 * C46929);
    const double C2352 =
        2 * C46794 * C47277 + C46794 * (C47277 + C47001 * C47012);
    const double C2235 = C113 * C1343;
    const double C5242 = C4828 * C1343;
    const double C16600 = C16186 * C1343;
    const double C2237 = C113 * C1334;
    const double C5246 = C4828 * C1334;
    const double C16604 = C16186 * C1334;
    const double C2366 = C2359 + C2360;
    const double C7022 =
        (3 * (C46934 + C46794 * C47436 + C47434 * ae) +
         C46794 *
             (2 * C47436 +
              C46794 * (C47053 + C46794 * (C46794 * C46795 * C47056 + C47093) +
                        C46794 * C47090 * ae) +
              C47437 * ae) +
         (2 * C47434 + C46794 * C47437) * ae) /
        C46743;
    const double C7362 = C4828 * C2476;
    const double C12856 = C113 * C2476;
    const double C18688 = C16186 * C2476;
    const double C46983 = C46891 + C46982;
    const double C7363 = C47985 * C2480;
    const double C12857 = C47873 * C2480;
    const double C18689 = C47985 * C2480;
    const double C7367 = C47985 * C2475;
    const double C12859 = C47873 * C2475;
    const double C18693 = C47985 * C2475;
    const double C47467 = C46852 + C47465;
    const double C7220 = C4828 * C1358;
    const double C11772 = C113 * C1358;
    const double C18546 = C16186 * C1358;
    const double C6494 = C4828 * C1764;
    const double C11918 = C113 * C1764;
    const double C17836 = C16186 * C1764;
    const double C6292 = C4828 * C1204;
    const double C17634 = C16186 * C1204;
    const double C7224 = C4828 * C1341;
    const double C11774 = C113 * C1341;
    const double C18550 = C16186 * C1341;
    const double C6498 = C4828 * C1759;
    const double C11920 = C113 * C1759;
    const double C17840 = C16186 * C1759;
    const double C12648 = C113 * C2075;
    const double C12650 = C113 * C2064;
    const double C23344 =
        (3 * (C46932 + C46794 * C47484 + C47482 * ae) +
         C46794 * (2 * C47484 +
                   C46794 * (C47046 + C46794 * (C46794 * C47160 + C47182) +
                             C46794 * C47180 * ae) +
                   C47485 * ae) +
         (2 * C47482 + C46794 * C47485) * ae) /
        C46743;
    const double C28521 = C16186 * C7506;
    const double C39621 = C4828 * C7506;
    const double C43509 = C113 * C7506;
    const double C6152 =
        (2 * C46926 + C46795 * C46932 +
         C46794 * (C46794 * C47051 + C47409 * ae) + C46794 * C47409 * ae) /
        C46743;
    const double C6638 = (C46794 * (3 * C46932 + C46795 * C47051) +
                          (3 * C47328 + C46795 * C47409) * ae) /
                         C46743;
    const double C5995 = 4 * (2 * C47326 + C46795 * C47328) +
                         C46795 * (3 * C47328 + C46795 * C47409);
    const double C6149 = 2 * C47326 + C46795 * C47328 + C47409 * C47012;
    const double C6635 = C46794 * (3 * C47328 + C46795 * C47409);
    const double C23688 =
        2 * C46794 * C47409 + C46794 * (C47409 + C47185 * C47012);
    const double C47499 = C47039 + C47497;
    const double C28051 = C16186 * C7020;
    const double C39151 = C4828 * C7020;
    const double C44497 = C113 * C7020;
    const double C28055 = C16186 * C7017;
    const double C39155 = C4828 * C7017;
    const double C44499 = C113 * C7017;
    const double C47080 = C47079 + C47075;
    const double C7023 =
        (3 * (C46930 + ae * C47105 + C46794 * C47109) +
         ae * (2 * C47105 + C46794 * C47110) +
         C46794 *
             (2 * C47109 + ae * C47110 +
              C46794 * (C47044 + ae * C46794 * C47074 +
                        C46794 * (ae * C47074 +
                                  C46794 * (ae * C46855 + C46795 * C46827))))) /
        C46763;
    const double C7019 = (3 * (C46962 + C46970 * C47012) +
                          C46794 * (2 * C47105 + C46794 * C47110)) /
                         C46743;
    const double C47212 = C47044 + C47208;
    const double C47518 = C47516 + C47511;
    const double C12635 = 4 * (2 * C47377 + C46794 * C47380) +
                          C46794 * (3 * C47380 + C46794 * C47454);
    const double C142 =
        (5 * (3 * C46820 + C46802 * C46831) +
         C46802 * (4 * C46831 +
                   C46802 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C339 =
        (2 * C46802 * C46813 + C46802 * C46820 + ae * C46795 * C46859 +
         C46795 * (ae * C46859 + C46795 * C46831)) /
        C46763;
    const double C340 = (ae * (3 * C46849 + C46802 * C46859) +
                         C46795 * (3 * C46820 + C46802 * C46831)) /
                        C46763;
    const double C542 =
        (2 * C46802 * C46813 + C46802 * C46820 + ae * C46794 * C46898 +
         C46794 * (ae * C46898 + C46794 * C46831)) /
        C46763;
    const double C543 = (ae * (3 * C46888 + C46802 * C46898) +
                         C46794 * (3 * C46820 + C46802 * C46831)) /
                        C46763;
    const double C989 = (ae * (C46795 * C46898 +
                               (2 * C46802 * C46918 +
                                C46802 * (C46918 + C46809 * C46811 * C46810)) *
                                   ae) +
                         C46794 * (ae * C46859 + C46795 * C46831)) /
                        C46763;
    const double C1361 = (ae * C46849 + C46795 * C46820 + ae * C46794 * C46952 +
                          C46794 * (ae * C46952 + C46794 * C46945)) /
                         C46763;
    const double C1364 =
        (ae * (C46888 + C46795 * C46952 + C46795 * C46950 * ae) +
         C46794 * (C46820 + ae * C46941 + C46795 * C46945)) /
        C46763;
    const double C1487 = C1479 + C1480;
    const double C5068 = C5048 + C5049;
    const double C16426 = C16406 + C16407;
    const double C47066 = C47061 + C47064;
    const double C47116 = C47113 + C47114;
    const double C47146 = C47143 + C47144;
    const double C47166 = C46795 * C47164;
    const double C47198 = C46794 * C47164;
    const double C47213 = C46794 * C47209;
    const double C47235 = C46794 * C47233;
    const double C46871 = C46802 * C46870;
    const double C1477 =
        (2 * (ae * C46859 + C46795 * C46831) + ae * (C46859 + C46870 * C46929) +
         C46795 * (C46831 + ae * C46795 * C46870 +
                   C46795 * (ae * C46870 +
                             C46795 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1476 =
        (2 * C46795 * C46859 + C46795 * (C46859 + C46870 * C46929)) / C46743;
    const double C1642 = (C46794 * (C46859 + C46870 * C46929) +
                          (C47277 + C47001 * C46929) * ae) /
                         C46743;
    const double C1223 =
        (3 * (C46820 + ae * C46941 + C46795 * C46945) +
         ae * (2 * C46941 + C46795 * C46946) +
         C46795 * (2 * C46945 + ae * C46946 +
                   C46795 * (C46829 + ae * C46795 * C46868 +
                             C46795 * (ae * C46868 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1217 = (3 * (C46849 + C46857 * C46929) +
                          C46795 * (2 * C46941 + C46795 * C46946)) /
                         C46743;
    const double C1360 =
        (C46849 + C46857 * C46929 + C46794 * (C46794 * C46946 + C47338 * ae) +
         C46794 * C47338 * ae) /
        C46743;
    const double C1766 = (C46794 * (2 * C46941 + C46795 * C46946) +
                          (2 * C47336 + C46795 * C47338) * ae) /
                         C46743;
    const double C47067 = C47059 + C47065;
    const double C47167 = C46795 * C47165;
    const double C46910 = C46802 * C46909;
    const double C47031 = C46795 * C46909;
    const double C1643 =
        (ae * (C46898 + C46795 * (C46795 * C46909 + C47001 * ae) +
               C46795 * C47001 * ae) +
         C46794 * (C46831 + ae * C46795 * C46870 +
                   C46795 * (ae * C46870 +
                             C46795 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2355 =
        (2 * (ae * C46898 + C46794 * C46831) + ae * (C46898 + C46909 * C47012) +
         C46794 * (C46831 + ae * C46794 * C46909 +
                   C46794 * (ae * C46909 +
                             C46794 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2353 =
        (2 * C46794 * C46898 + C46794 * (C46898 + C46909 * C47012)) / C46743;
    const double C46994 = C46795 * C46992;
    const double C2481 =
        (2 * (ae * C46952 + C46794 * C46945) + ae * (C46952 + C46992 * C47012) +
         C46794 * (C46945 + ae * C46794 * C46992 +
                   C46794 * (ae * C46992 +
                             C46794 * (ae * C46868 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2477 =
        (2 * C46794 * C46952 + C46794 * (C46952 + C46992 * C47012)) / C46743;
    const double C2083 =
        (3 * (C46820 + ae * C47024 + C46794 * C47028) +
         ae * (2 * C47024 + C46794 * C47029) +
         C46794 * (2 * C47028 + ae * C47029 +
                   C46794 * (C46829 + ae * C46794 * C46907 +
                             C46794 * (ae * C46907 +
                                       C46794 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C2076 = (3 * (C46888 + C46896 * C47012) +
                          C46794 * (2 * C47024 + C46794 * C47029)) /
                         C46743;
    const double C47097 = C46902 + C47095;
    const double C47117 = C46980 + C47115;
    const double C47147 = C47141 + C47145;
    const double C47186 = C47184 + C47179;
    const double C47214 = C46794 * C47211;
    const double C47236 = C46794 * C47234;
    const double C184 = C176 + C177;
    const double C11781 = C11766 + C11767;
    const double C26319 = C26307 + C26308;
    const double C27189 = C27167 + C27168;
    const double C37423 = C37411 + C37412;
    const double C38293 = C38271 + C38272;
    const double C11783 = C11770 + C11771;
    const double C26788 = C26783 + C26784;
    const double C27193 = C27175 + C27176;
    const double C37892 = C37887 + C37888;
    const double C38297 = C38279 + C38280;
    const double C13134 = C13130 + C13131;
    const double C28062 = C28049 + C28050;
    const double C28530 = C28523 + C28524;
    const double C39162 = C39149 + C39150;
    const double C39630 = C39623 + C39624;
    const double C11780 = C11764 + C11765;
    const double C26321 = C26311 + C26312;
    const double C27187 = C27163 + C27164;
    const double C37425 = C37415 + C37416;
    const double C38291 = C38267 + C38268;
    const double C11782 = C11768 + C11769;
    const double C26786 = C26779 + C26780;
    const double C27191 = C27171 + C27172;
    const double C37890 = C37883 + C37884;
    const double C38295 = C38275 + C38276;
    const double C13135 = C13132 + C13133;
    const double C28060 = C28045 + C28046;
    const double C28532 = C28527 + C28528;
    const double C39160 = C39145 + C39146;
    const double C39632 = C39627 + C39628;
    const double C12660 = C12652 + C12653;
    const double C28064 = C28053 + C28054;
    const double C39164 = C39153 + C39154;
    const double C587 = C575 * C47890;
    const double C10899 = C575 * C10557;
    const double C10890 = C575 * C47987;
    const double C31912 = C575 * C31578;
    const double C31907 = C575 * C47987;
    const double C1011 = C1005 * C47890;
    const double C10724 = C1005 * C47987;
    const double C11381 = C1005 * C10557;
    const double C31745 = C1005 * C47987;
    const double C32386 = C1005 * C31578;
    const double C2371 = C2367 * C47890;
    const double C10901 = C2367 * C47987;
    const double C12998 = C2367 * C10557;
    const double C31914 = C2367 * C47987;
    const double C33933 = C2367 * C31578;
    const double C383 = C371 * C114;
    const double C10728 = C371 * C10559;
    const double C31749 = C371 * C31580;
    const double C586 = C574 * C114;
    const double C10898 = C574 * C10559;
    const double C10891 = C574 * C10560;
    const double C31911 = C574 * C31580;
    const double C31908 = C574 * C31581;
    const double C1010 = C1004 * C114;
    const double C10725 = C1004 * C10560;
    const double C11380 = C1004 * C10559;
    const double C31746 = C1004 * C31581;
    const double C32385 = C1004 * C31580;
    const double C2372 = C2368 * C114;
    const double C10900 = C2368 * C10560;
    const double C12999 = C2368 * C10559;
    const double C31913 = C2368 * C31581;
    const double C33934 = C2368 * C31580;
    const double C185 = C178 + C179;
    const double C391 = C379 + C380;
    const double C594 = C582 + C583;
    const double C160 = C113 * C132;
    const double C363 = C113 * C326;
    const double C5396 = C4828 * C326;
    const double C16754 = C16186 * C326;
    const double C705 = C113 * C328;
    const double C4854 = C4828 * C328;
    const double C16212 = C16186 * C328;
    const double C163 = C47873 * C133;
    const double C569 = C47873 * C530;
    const double C821 = C47873 * C532;
    const double C44152 = C47873 * C12637;
    const double C2354 =
        (2 * (C46794 * C46859 + C47277 * ae) +
         C46794 * (C46859 + C46794 * (C46794 * C46870 + C47032) +
                   C46794 * C47001 * ae) +
         (C47277 + C47001 * C47012) * ae) /
        C46743;
    const double C47283 = C47281 + C47282;
    const double C2232 =
        (C46795 * C46859 + C46794 * (C46794 * C46795 * C46870 + C47397 * ae) +
         C46794 * C47397 * ae) /
        C46743;
    const double C2230 = C46795 * C47277 + C47397 * C47012;
    const double C5996 = 4 * (2 * C47331 + C46795 * C47333) +
                         C46795 * (3 * C47333 + C46795 * C47414);
    const double C6150 = 2 * C47331 + C46795 * C47333 + C47414 * C47012;
    const double C6636 = C46794 * (3 * C47333 + C46795 * C47414);
    const double C12636 = 4 * (2 * C47384 + C46794 * C47387) +
                          C46794 * (3 * C47387 + C46794 * C47468);
    const double C23690 =
        (2 * (C46794 * C47051 + C47409 * ae) +
         C46794 * (C47051 + C46794 * (C46794 * C47165 + C47187) +
                   C46794 * C47185 * ae) +
         (C47409 + C47185 * C47012) * ae) /
        C46743;
    const double C47473 = C47471 + C47472;
    const double C28038 = 4 * (2 * C47427 + C46794 * C47430) +
                          C46794 * (3 * C47430 + C46794 * C47500);
    const double C47521 = C47509 + C47519;
    const double C47920 = C47647 * C47635;
    const double C47960 = C47925 + C47647;
    const double C47928 = C47656 / C47637;
    const double C47924 = C47656 * C47635;
    const double C695 = C48004 - (C47647 * C47638) / C47633;
    const double C47938 = C47729 * C47723;
    const double C47975 = C47940 + C47729;
    const double C47942 = C47736 / C47637;
    const double C47939 = C47736 * C47723;
    const double C1468 = C48008 - (C47729 * C47725) / C47633;
    const double C47944 = C47771 * C47765;
    const double C47981 = C47946 + C47771;
    const double C47948 = C47778 / C47637;
    const double C47945 = C47778 * C47765;
    const double C2348 = C48010 - (C47771 * C47767) / C47633;
    const double C181 = C171 * C47890;
    const double C10576 = C171 * C10557;
    const double C31597 = C171 * C31578;
    const double C386 = C374 * C47890;
    const double C10738 = C374 * C10557;
    const double C31759 = C374 * C31578;
    const double C388 = C376 * C47890;
    const double C11046 = C376 * C10557;
    const double C32055 = C376 * C31578;
    const double C6296 = C6288 + C6289;
    const double C17638 = C17630 + C17631;
    const double C12638 =
        (4 * (2 * C47379 + C46794 * C47455 + C47380 * ae) +
         C46794 *
             (3 * C47455 +
              C46794 * (2 * C47447 +
                        C46794 * (C46847 + C46794 * (C46794 * C46855 + C47071) +
                                  C46794 * C46920 * ae) +
                        C47449 * ae) +
              C47454 * ae) +
         (3 * C47380 + C46794 * C47454) * ae) /
        C46743;
    const double C589 = C577 * C47890;
    const double C10908 = C577 * C10557;
    const double C10905 = C577 * C47987;
    const double C31921 = C577 * C31578;
    const double C31918 = C577 * C47987;
    const double C591 = C579 * C47890;
    const double C10573 = C579 * C47987;
    const double C11180 = C579 * C10557;
    const double C31594 = C579 * C47987;
    const double C32189 = C579 * C31578;
    const double C1013 = C1007 * C47890;
    const double C10735 = C1007 * C47987;
    const double C11386 = C1007 * C10557;
    const double C31756 = C1007 * C47987;
    const double C32391 = C1007 * C31578;
    const double C180 = C170 * C114;
    const double C10577 = C170 * C10559;
    const double C31598 = C170 * C31580;
    const double C385 = C373 * C114;
    const double C10739 = C373 * C10559;
    const double C31760 = C373 * C31580;
    const double C387 = C375 * C114;
    const double C11047 = C375 * C10559;
    const double C32056 = C375 * C31580;
    const double C588 = C576 * C114;
    const double C10909 = C576 * C10559;
    const double C10904 = C576 * C10560;
    const double C31922 = C576 * C31580;
    const double C31917 = C576 * C31581;
    const double C590 = C578 * C114;
    const double C10572 = C578 * C10560;
    const double C11181 = C578 * C10559;
    const double C31593 = C578 * C31581;
    const double C32190 = C578 * C31580;
    const double C1012 = C1006 * C114;
    const double C10734 = C1006 * C10560;
    const double C11387 = C1006 * C10559;
    const double C31755 = C1006 * C31581;
    const double C32392 = C1006 * C31580;
    const double C2245 = C2239 + C2240;
    const double C5257 = C5232 + C5233;
    const double C7229 = C7222 + C7223;
    const double C16615 = C16590 + C16591;
    const double C18555 = C18548 + C18549;
    const double C1655 = C1649 + C1650;
    const double C5763 = C5750 + C5751;
    const double C6503 = C6496 + C6497;
    const double C17121 = C17108 + C17109;
    const double C17845 = C17838 + C17839;
    const double C1490 = C1485 + C1486;
    const double C5061 = C5034 + C5035;
    const double C6299 = C6294 + C6295;
    const double C16419 = C16392 + C16393;
    const double C17641 = C17636 + C17637;
    const double C2246 = C2241 + C2242;
    const double C5255 = C5228 + C5229;
    const double C7231 = C7226 + C7227;
    const double C16613 = C16586 + C16587;
    const double C18557 = C18552 + C18553;
    const double C1656 = C1651 + C1652;
    const double C5761 = C5746 + C5747;
    const double C6505 = C6500 + C6501;
    const double C17119 = C17104 + C17105;
    const double C17847 = C17842 + C17843;
    const double C1367 =
        (C46806 + ae * C46926 + C46795 * C46930 + ae * C46794 * C46974 +
         C46794 * (ae * C46974 +
                   C46794 * (C46813 + ae * C46795 * C46847 +
                             C46795 * (ae * C46847 + C46795 * C46818)))) /
        C46763;
    const double C1767 =
        (ae * (2 * C46962 + C46795 * C46974 + (C46960 + C46918 * C46929) * ae) +
         C46794 * (2 * C46930 + ae * C46932 +
                   C46795 * (C46813 + ae * C46795 * C46847 +
                             C46795 * (ae * C46847 + C46795 * C46818)))) /
        C46763;
    const double C1212 =
        (3 * (C46879 + C46795 * C46962 + C47326 * ae) +
         C46795 * (2 * C46962 + C46795 * C46974 + C47328 * ae) +
         (2 * C47326 + C46795 * C47328) * ae) /
        C46743;
    const double C1355 =
        (C46879 + C46795 * C46962 + C47326 * ae + C46974 * C47012) / C46743;
    const double C1761 =
        (C46794 * (2 * C46962 + C46795 * C46974 + C47328 * ae)) / C46743;
    const double C44150 = C47873 * C12641;
    const double C1482 = C47873 * C1207;
    const double C5053 = C47985 * C1207;
    const double C16411 = C47985 * C1207;
    const double C2238 = C47873 * C1344;
    const double C5247 = C47985 * C1344;
    const double C16605 = C47985 * C1344;
    const double C1648 = C47873 * C1350;
    const double C5757 = C47985 * C1350;
    const double C17115 = C47985 * C1350;
    const double C2365 = C2357 + C2358;
    const double C366 = C47873 * C327;
    const double C5401 = C47985 * C327;
    const double C16759 = C47985 * C327;
    const double C708 = C47873 * C329;
    const double C4859 = C47985 * C329;
    const double C16217 = C47985 * C329;
    const double C566 = C113 * C529;
    const double C818 = C113 * C531;
    const double C1000 = C113 * C982;
    const double C5538 = C4828 * C982;
    const double C16896 = C16186 * C982;
    const double C1003 = C47873 * C983;
    const double C5543 = C47985 * C983;
    const double C16901 = C47985 * C983;
    const double C162 = C113 * C120;
    const double C365 = C113 * C309;
    const double C5400 = C4828 * C309;
    const double C16758 = C16186 * C309;
    const double C707 = C113 * C310;
    const double C4858 = C4828 * C310;
    const double C16216 = C16186 * C310;
    const double C568 = C113 * C512;
    const double C820 = C113 * C513;
    const double C1002 = C113 * C974;
    const double C5542 = C4828 * C974;
    const double C16900 = C16186 * C974;
    const double C2370 = C2366 * C114;
    const double C10907 = C2366 * C10560;
    const double C31920 = C2366 * C31581;
    const double C46984 = C46983 + C46981;
    const double C7370 = C7362 + C7363;
    const double C12862 = C12856 + C12857;
    const double C18696 = C18688 + C18689;
    const double C7372 = C7366 + C7367;
    const double C12863 = C12858 + C12859;
    const double C18698 = C18692 + C18693;
    const double C47469 = C47467 + C47462;
    const double C12658 = C12648 + C12649;
    const double C12659 = C12650 + C12651;
    const double C27179 = C16186 * C6152;
    const double C38283 = C4828 * C6152;
    const double C43859 = C113 * C6152;
    const double C27659 = C16186 * C6638;
    const double C38763 = C4828 * C6638;
    const double C27183 = C16186 * C6149;
    const double C38287 = C4828 * C6149;
    const double C43857 = C113 * C6149;
    const double C27655 = C16186 * C6635;
    const double C38759 = C4828 * C6635;
    const double C47501 = C47499 + C47494;
    const double C47081 = C46795 * C47080;
    const double C47171 = 3 * C47080;
    const double C47197 = ae * C47080;
    const double C47196 = C46794 * C47080;
    const double C7509 =
        (2 * (ae * C46974 + C46794 * C47050) + ae * (C46974 + C47080 * C47012) +
         C46794 *
             (C47050 + ae * C46794 * C47080 +
              C46794 * (ae * C47080 +
                        C46794 * (C46818 + ae * C46795 * C46855 +
                                  C46795 * (ae * C46855 + C46795 * C46827))))) /
        C46763;
    const double C7505 =
        (2 * C46794 * C46974 + C46794 * (C46974 + C47080 * C47012)) / C46743;
    const double C28052 = C47985 * C7023;
    const double C39152 = C47985 * C7023;
    const double C44498 = C47873 * C7023;
    const double C28056 = C47985 * C7019;
    const double C39156 = C47985 * C7019;
    const double C44500 = C47873 * C7019;
    const double C47520 = C46794 * C47518;
    const double C44151 = C113 * C12635;
    const double C364 = C47873 * C339;
    const double C5397 = C47985 * C339;
    const double C16755 = C47985 * C339;
    const double C706 = C47873 * C340;
    const double C4855 = C47985 * C340;
    const double C16213 = C47985 * C340;
    const double C567 = C47873 * C542;
    const double C819 = C47873 * C543;
    const double C1001 = C47873 * C989;
    const double C5539 = C47985 * C989;
    const double C16897 = C47985 * C989;
    const double C2236 = C47873 * C1361;
    const double C5243 = C47985 * C1361;
    const double C16601 = C47985 * C1361;
    const double C1646 = C47873 * C1364;
    const double C5753 = C47985 * C1364;
    const double C17111 = C47985 * C1364;
    const double C1491 = C1487 * C47890;
    const double C47168 = C47156 + C47166;
    const double C47215 = C47212 + C47213;
    const double C47237 = C47225 + C47235;
    const double C46872 = C46862 + C46871;
    const double C6002 =
        (4 * (2 * C46938 + ae * C46939 + C46795 * C47066) +
         ae * (3 * C46939 + C46795 * C47067) +
         C46795 * (3 * C47066 + ae * C47067 +
                   C46795 * (2 * C47062 + ae * C47063 +
                             C46795 * (C47055 + ae * C46795 * C47056 +
                                       C46795 * (ae * C47056 +
                                                 C46795 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C6000 = (4 * (2 * C46934 + C46795 * C46939) +
                          C46795 * (3 * C46939 + C46795 * C47067)) /
                         C46743;
    const double C6154 =
        (2 * C46934 + C46795 * C46939 +
         C46794 * (C46794 * C47067 + C47414 * ae) + C46794 * C47414 * ae) /
        C46743;
    const double C6640 = (C46794 * (3 * C46939 + C46795 * C47067) +
                          (3 * C47333 + C46795 * C47414) * ae) /
                         C46743;
    const double C47169 = C47154 + C47167;
    const double C46911 = C46901 + C46910;
    const double C47033 = C47031 + C47032;
    const double C46995 = C46896 + C46994;
    const double C47098 = C47097 + C47093;
    const double C7024 =
        (3 * (C46938 + ae * C47112 + C46794 * C47116) +
         ae * (2 * C47112 + C46794 * C47117) +
         C46794 * (2 * C47116 + ae * C47117 +
                   C46794 * (C47062 + ae * C46794 * C47092 +
                             C46794 * (ae * C47092 +
                                       C46794 * (ae * C47056 +
                                                 C46795 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C7021 = (3 * (C46957 + C46980 * C47012) +
                          C46794 * (2 * C47112 + C46794 * C47117)) /
                         C46743;
    const double C12642 =
        (4 * (2 * C47021 + ae * C47022 + C46794 * C47146) +
         ae * (3 * C47022 + C46794 * C47147) +
         C46794 * (3 * C47146 + ae * C47147 +
                   C46794 * (2 * C47140 + ae * C47142 +
                             C46794 * (C47055 + ae * C46794 * C47086 +
                                       C46794 * (ae * C47086 +
                                                 C46794 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C12639 = (4 * (2 * C47017 + C46794 * C47022) +
                           C46794 * (3 * C47022 + C46794 * C47147)) /
                          C46743;
    const double C47188 = C46795 * C47186;
    const double C47199 = C47186 * C47012;
    const double C47216 = C47210 + C47214;
    const double C47238 = C47223 + C47236;
    const double C172 = C160 + C161;
    const double C121 = 5 * (3 * C47269 + C46802 * C47277) +
                        C46802 * (4 * C47277 + C46802 * C47283);
    const double C311 = 3 * C47269 + C46802 * C47277 + C47283 * C46929;
    const double C514 = 3 * C47269 + C46802 * C47277 + C47283 * C47012;
    const double C699 = C46795 * (4 * C47277 + C46802 * C47283);
    const double C812 = C46794 * (4 * C47277 + C46802 * C47283);
    const double C975 = C46794 * C46795 * C47283;
    const double C22596 = 5 * (3 * C47328 + C46795 * C47409) +
                          C46795 * (4 * C47409 + C46795 * C47473);
    const double C22710 = 3 * C47328 + C46795 * C47409 + C47473 * C47012;
    const double C23056 = C46794 * (4 * C47409 + C46795 * C47473);
    const double C44144 = 5 * (3 * C47380 + C46794 * C47454) +
                          C46794 * (4 * C47454 + C46794 * C47521);
    const double C47956 = C47920 / C47633;
    const double C47991 = C47960 / C47637;
    const double C47992 = C47962 + C47928;
    const double C697 = C47928 - C47654 / C47651;
    const double C47959 = C47924 / C47633;
    const double C47972 = C47938 / C47633;
    const double C47998 = C47975 / C47637;
    const double C47999 = C47976 + C47942;
    const double C1470 = C47942 - C47734 / C47651;
    const double C47974 = C47939 / C47633;
    const double C47978 = C47944 / C47633;
    const double C48001 = C47981 / C47637;
    const double C48002 = C47982 + C47948;
    const double C2350 = C47948 - C47776 / C47651;
    const double C47980 = C47945 / C47633;
    const double C44149 = C113 * C12638;
    const double C186 = C180 + C181;
    const double C392 = C385 + C386;
    const double C704 = C387 + C388;
    const double C595 = C588 + C589;
    const double C817 = C590 + C591;
    const double C1016 = C1012 + C1013;
    const double C2249 = C2245 * C47890;
    const double C11383 = C2245 * C47987;
    const double C12860 = C2245 * C10557;
    const double C32388 = C2245 * C47987;
    const double C33799 = C2245 * C31578;
    const double C1659 = C1655 * C47890;
    const double C10731 = C1655 * C47987;
    const double C12124 = C1655 * C10557;
    const double C31752 = C1655 * C47987;
    const double C33097 = C1655 * C31578;
    const double C1494 = C1490 * C114;
    const double C11923 = C1490 * C10559;
    const double C32900 = C1490 * C31580;
    const double C2250 = C2246 * C114;
    const double C11382 = C2246 * C10560;
    const double C12861 = C2246 * C10559;
    const double C32387 = C2246 * C31581;
    const double C33800 = C2246 * C31580;
    const double C1660 = C1656 * C114;
    const double C10730 = C1656 * C10560;
    const double C12125 = C1656 * C10559;
    const double C31751 = C1656 * C31581;
    const double C33098 = C1656 * C31580;
    const double C11777 = C47873 * C1367;
    const double C27182 = C16181 * C1367;
    const double C27170 = C47985 * C1367;
    const double C38286 = C4823 * C1367;
    const double C38274 = C47985 * C1367;
    const double C12259 = C47873 * C1767;
    const double C27178 = C47985 * C1767;
    const double C27658 = C16181 * C1767;
    const double C38282 = C47985 * C1767;
    const double C38762 = C4823 * C1767;
    const double C11779 = C47873 * C1355;
    const double C27186 = C16181 * C1355;
    const double C27166 = C47985 * C1355;
    const double C38290 = C4823 * C1355;
    const double C38270 = C47985 * C1355;
    const double C12257 = C47873 * C1761;
    const double C27174 = C47985 * C1761;
    const double C27654 = C16181 * C1761;
    const double C38278 = C47985 * C1761;
    const double C38758 = C4823 * C1761;
    const double C1488 = C1481 + C1482;
    const double C5070 = C5052 + C5053;
    const double C16428 = C16410 + C16411;
    const double C2244 = C2237 + C2238;
    const double C5264 = C5246 + C5247;
    const double C16622 = C16604 + C16605;
    const double C1654 = C1647 + C1648;
    const double C5766 = C5756 + C5757;
    const double C17124 = C17114 + C17115;
    const double C2369 = C2365 * C47890;
    const double C10906 = C2365 * C47987;
    const double C31919 = C2365 * C47987;
    const double C173 = C162 + C163;
    const double C378 = C365 + C366;
    const double C5406 = C5400 + C5401;
    const double C16764 = C16758 + C16759;
    const double C710 = C707 + C708;
    const double C4876 = C4858 + C4859;
    const double C16234 = C16216 + C16217;
    const double C581 = C568 + C569;
    const double C823 = C820 + C821;
    const double C1009 = C1002 + C1003;
    const double C5548 = C5542 + C5543;
    const double C16906 = C16900 + C16901;
    const double C1368 =
        (C46923 + ae * C46934 + C46795 * C46938 + ae * C46794 * C46984 +
         C46794 *
             (ae * C46984 +
              C46794 * (C46822 + ae * C46795 * C46863 +
                        C46795 * (ae * C46863 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C1768 =
        (ae * (2 * C46957 + C46795 * C46984 + (C46955 + C46977 * C46929) * ae) +
         C46794 *
             (2 * C46938 + ae * C46939 +
              C46795 * (C46822 + ae * C46795 * C46863 +
                        C46795 * (ae * C46863 + C46795 * C46802 * C46827)))) /
        C46763;
    const double C1214 =
        (3 * (C46883 + C46795 * C46957 + C47331 * ae) +
         C46795 * (2 * C46957 + C46795 * C46984 + C47333 * ae) +
         (2 * C47331 + C46795 * C47333) * ae) /
        C46743;
    const double C1357 =
        (C46883 + C46795 * C46957 + C47331 * ae + C46984 * C47012) / C46743;
    const double C1763 =
        (C46794 * (2 * C46957 + C46795 * C46984 + C47333 * ae)) / C46743;
    const double C12864 = C12862 * C47987;
    const double C33797 = C12862 * C47987;
    const double C12865 = C12863 * C10560;
    const double C33798 = C12863 * C31581;
    const double C12640 =
        (4 * (2 * C47386 + C46794 * C47469 + C47387 * ae) +
         C46794 *
             (3 * C47469 +
              C46794 * (2 * C47461 +
                        C46794 * (C46863 + C46794 * (C46794 * C47056 + C47089) +
                                  C46794 * C47087 * ae) +
                        C47463 * ae) +
              C47468 * ae) +
         (3 * C47387 + C46794 * C47468) * ae) /
        C46743;
    const double C12996 = C12658 * C47987;
    const double C33931 = C12658 * C47987;
    const double C12997 = C12659 * C10560;
    const double C33932 = C12659 * C31581;
    const double C28040 =
        (4 * (2 * C47429 + C46794 * C47501 + C47430 * ae) +
         C46794 *
             (3 * C47501 +
              C46794 * (2 * C47493 +
                        C46794 * (C47151 +
                                  C46794 * (C46794 * C46795 * C46866 + C47179) +
                                  C46794 * C47175 * ae) +
                        C47495 * ae) +
              C47500 * ae) +
         (3 * C47430 + C46794 * C47500) * ae) /
        C46743;
    const double C47082 = C47069 + C47081;
    const double C47200 = C47197 + C47198;
    const double C28522 = C47985 * C7509;
    const double C39622 = C47985 * C7509;
    const double C43510 = C47873 * C7509;
    const double C28526 = C47985 * C7505;
    const double C39626 = C47985 * C7505;
    const double C43512 = C47873 * C7505;
    const double C28063 = C28051 + C28052;
    const double C39163 = C39151 + C39152;
    const double C44501 = C44497 + C44498;
    const double C28065 = C28055 + C28056;
    const double C39165 = C39155 + C39156;
    const double C44502 = C44499 + C44500;
    const double C47522 = C47504 + C47520;
    const double C44154 = C44151 + C44152;
    const double C377 = C363 + C364;
    const double C5404 = C5396 + C5397;
    const double C16762 = C16754 + C16755;
    const double C709 = C705 + C706;
    const double C4874 = C4854 + C4855;
    const double C16232 = C16212 + C16213;
    const double C580 = C566 + C567;
    const double C822 = C818 + C819;
    const double C1008 = C1000 + C1001;
    const double C5546 = C5538 + C5539;
    const double C16904 = C16896 + C16897;
    const double C2243 = C2235 + C2236;
    const double C5262 = C5242 + C5243;
    const double C16620 = C16600 + C16601;
    const double C1653 = C1645 + C1646;
    const double C5764 = C5752 + C5753;
    const double C17122 = C17110 + C17111;
    const double C341 =
        (3 * C46820 + C46802 * C46831 + ae * C46795 * C46872 +
         C46795 * (ae * C46872 +
                   C46795 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C702 =
        (ae * (4 * C46859 + C46802 * C46872) +
         C46795 * (4 * C46831 +
                   C46802 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C135 = (5 * (3 * C46849 + C46802 * C46859) +
                         C46802 * (4 * C46859 + C46802 * C46872)) /
                        C46743;
    const double C331 =
        (3 * C46849 + C46802 * C46859 + C46872 * C46929) / C46743;
    const double C534 =
        (3 * C46849 + C46802 * C46859 +
         C46794 * (C46794 * C46872 + C47283 * ae) + C46794 * C47283 * ae) /
        C46743;
    const double C701 = (C46795 * (4 * C46859 + C46802 * C46872)) / C46743;
    const double C814 = (C46794 * (4 * C46859 + C46802 * C46872) +
                         (4 * C47277 + C46802 * C47283) * ae) /
                        C46743;
    const double C985 =
        (C46794 * C46795 * C46872 + C46795 * C47283 * ae) / C46743;
    const double C22599 =
        (5 * (3 * C47050 + ae * C47051 + C46795 * C47168) +
         ae * (4 * C47051 + C46795 * C47169) +
         C46795 *
             (4 * C47168 + ae * C47169 +
              C46795 *
                  (3 * C47164 + ae * C47165 +
                   C46795 * (2 * C47158 + ae * C47160 +
                             C46795 * (C46827 + ae * C46795 * C46866 +
                                       C46795 * (ae * C46866 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C22598 = (5 * (3 * C46932 + C46795 * C47051) +
                           C46795 * (4 * C47051 + C46795 * C47169)) /
                          C46743;
    const double C22712 =
        (3 * C46932 + C46795 * C47051 +
         C46794 * (C46794 * C47169 + C47473 * ae) + C46794 * C47473 * ae) /
        C46743;
    const double C23058 = (C46794 * (4 * C47051 + C46795 * C47169) +
                           (4 * C47409 + C46795 * C47473) * ae) /
                          C46743;
    const double C544 =
        (3 * C46820 + C46802 * C46831 + ae * C46794 * C46911 +
         C46794 * (ae * C46911 +
                   C46794 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C815 =
        (ae * (4 * C46898 + C46802 * C46911) +
         C46794 * (4 * C46831 +
                   C46802 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C990 =
        (ae * (C46795 * C46911 +
               (3 * (C46918 + C46920 * C46810) +
                C46802 * (2 * C46802 * C46920 +
                          C46802 * (C46920 + C46816 * C46815 * C46810))) *
                   ae) +
         C46794 * (ae * C46872 +
                   C46795 * (3 * C46829 +
                             C46802 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C134 = (5 * (3 * C46888 + C46802 * C46898) +
                         C46802 * (4 * C46898 + C46802 * C46911)) /
                        C46743;
    const double C330 =
        (3 * C46888 + C46802 * C46898 +
         C46795 * (C46795 * C46911 + C47283 * ae) + C46795 * C47283 * ae) /
        C46743;
    const double C533 =
        (3 * C46888 + C46802 * C46898 + C46911 * C47012) / C46743;
    const double C700 = (C46795 * (4 * C46898 + C46802 * C46911) +
                         (4 * C47277 + C46802 * C47283) * ae) /
                        C46743;
    const double C813 = (C46794 * (4 * C46898 + C46802 * C46911)) / C46743;
    const double C984 = (C46794 * (C46795 * C46911 + C47283 * ae)) / C46743;
    const double C2233 =
        (ae * C46859 + C46795 * C46831 + ae * C46794 * C47033 +
         C46794 * (ae * C47033 +
                   C46794 * (ae * C46870 +
                             C46795 * (2 * C46802 * C46827 +
                                       C46802 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1475 =
        (2 * (C46795 * C46898 + C47277 * ae) +
         C46795 * (C46898 + C46795 * C47033 + C46795 * C47001 * ae) +
         (C47277 + C47001 * C46929) * ae) /
        C46743;
    const double C1641 =
        (C46794 * (C46898 + C46795 * C47033 + C46795 * C47001 * ae)) / C46743;
    const double C2231 =
        (C46795 * C46898 + C47277 * ae + C47033 * C47012) / C46743;
    const double C46996 = C46995 + C46993;
    const double C47099 = C46795 * C47098;
    const double C7510 =
        (2 * (ae * C46984 + C46794 * C47066) + ae * (C46984 + C47098 * C47012) +
         C46794 * (C47066 + ae * C46794 * C47098 +
                   C46794 * (ae * C47098 +
                             C46794 * (C47055 + ae * C46795 * C47056 +
                                       C46795 * (ae * C47056 +
                                                 C46795 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C7507 =
        (2 * C46794 * C46984 + C46794 * (C46984 + C47098 * C47012)) / C46743;
    const double C47189 = C47172 + C47188;
    const double C47201 = C47080 + C47199;
    const double C28041 =
        (4 * (2 * C47109 + ae * C47110 + C46794 * C47215) +
         ae * (3 * C47110 + C46794 * C47216) +
         C46794 *
             (3 * C47215 + ae * C47216 +
              C46794 *
                  (2 * C47209 + ae * C47211 +
                   C46794 * (C47158 + ae * C46794 * C47178 +
                             C46794 * (ae * C47178 +
                                       C46794 * (ae * C46866 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C28039 = (4 * (2 * C47105 + C46794 * C47110) +
                           C46794 * (3 * C47110 + C46794 * C47216)) /
                          C46743;
    const double C44147 =
        (5 * (3 * C47132 + ae * C47133 + C46794 * C47237) +
         ae * (4 * C47133 + C46794 * C47238) +
         C46794 *
             (4 * C47237 + ae * C47238 +
              C46794 *
                  (3 * C47233 + ae * C47234 +
                   C46794 * (2 * C47227 + ae * C47229 +
                             C46794 * (C46827 + ae * C46794 * C46905 +
                                       C46794 * (ae * C46905 +
                                                 C46794 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C44145 = (5 * (3 * C47015 + C46794 * C47133) +
                           C46794 * (4 * C47133 + C46794 * C47238)) /
                          C46743;
    const double C182 = C172 * C47890;
    const double C48012 = C47956 + C48004;
    const double C696 = C47991 - (C47656 * C47638) / C47633;
    const double C111 = C47992 / C47637 - C47654 / C47963;
    const double C48005 = C47959 + C47991;
    const double C48013 = C47972 + C48008;
    const double C1469 = C47998 - (C47736 * C47725) / C47633;
    const double C1197 = C47999 / C47637 - C47734 / C47963;
    const double C48009 = C47974 + C47998;
    const double C48014 = C47978 + C48010;
    const double C2349 = C48001 - (C47778 * C47767) / C47633;
    const double C2058 = C48002 / C47637 - C47776 / C47963;
    const double C48011 = C47980 + C48001;
    const double C44153 = C44149 + C44150;
    const double C11786 = C11776 + C11777;
    const double C27196 = C27181 + C27182;
    const double C27190 = C27169 + C27170;
    const double C38300 = C38285 + C38286;
    const double C38294 = C38273 + C38274;
    const double C12261 = C12258 + C12259;
    const double C27194 = C27177 + C27178;
    const double C27663 = C27657 + C27658;
    const double C38298 = C38281 + C38282;
    const double C38767 = C38761 + C38762;
    const double C11787 = C11778 + C11779;
    const double C27198 = C27185 + C27186;
    const double C27188 = C27165 + C27166;
    const double C38302 = C38289 + C38290;
    const double C38292 = C38269 + C38270;
    const double C12260 = C12256 + C12257;
    const double C27192 = C27173 + C27174;
    const double C27661 = C27653 + C27654;
    const double C38296 = C38277 + C38278;
    const double C38765 = C38757 + C38758;
    const double C1492 = C1488 * C114;
    const double C2248 = C2244 * C114;
    const double C11385 = C2244 * C10560;
    const double C32390 = C2244 * C31581;
    const double C1658 = C1654 * C114;
    const double C10737 = C1654 * C10560;
    const double C31758 = C1654 * C31581;
    const double C183 = C173 * C114;
    const double C390 = C378 * C114;
    const double C712 = C710 * C114;
    const double C593 = C581 * C114;
    const double C11179 = C581 * C10560;
    const double C32188 = C581 * C31581;
    const double C825 = C823 * C114;
    const double C10575 = C823 * C10560;
    const double C31596 = C823 * C31581;
    const double C1015 = C1009 * C114;
    const double C11045 = C1009 * C10560;
    const double C32054 = C1009 * C31581;
    const double C7221 = C47985 * C1368;
    const double C11773 = C47873 * C1368;
    const double C18547 = C47985 * C1368;
    const double C6495 = C47985 * C1768;
    const double C11919 = C47873 * C1768;
    const double C17837 = C47985 * C1768;
    const double C6293 = C47985 * C1214;
    const double C17635 = C47985 * C1214;
    const double C7225 = C47985 * C1357;
    const double C11775 = C47873 * C1357;
    const double C18551 = C47985 * C1357;
    const double C6499 = C47985 * C1763;
    const double C11921 = C47873 * C1763;
    const double C17841 = C47985 * C1763;
    const double C47083 = C47082 + C47078;
    const double C28529 = C28521 + C28522;
    const double C39629 = C39621 + C39622;
    const double C43513 = C43509 + C43510;
    const double C28531 = C28525 + C28526;
    const double C39631 = C39625 + C39626;
    const double C43514 = C43511 + C43512;
    const double C47523 = C47522 + C47507;
    const double C389 = C377 * C47890;
    const double C711 = C709 * C47890;
    const double C592 = C580 * C47890;
    const double C11178 = C580 * C47987;
    const double C32187 = C580 * C47987;
    const double C824 = C822 * C47890;
    const double C10574 = C822 * C47987;
    const double C31595 = C822 * C47987;
    const double C1014 = C1008 * C47890;
    const double C11044 = C1008 * C47987;
    const double C32053 = C1008 * C47987;
    const double C2247 = C2243 * C47890;
    const double C11384 = C2243 * C47987;
    const double C32389 = C2243 * C47987;
    const double C1657 = C1653 * C47890;
    const double C10736 = C1653 * C47987;
    const double C31757 = C1653 * C47987;
    const double C1369 =
        (C46820 + ae * C46941 + C46795 * C46945 + ae * C46794 * C46996 +
         C46794 * (ae * C46996 +
                   C46794 * (C46829 + ae * C46795 * C46868 +
                             C46795 * (ae * C46868 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1769 =
        (ae * (2 * C46952 + C46795 * C46996 + (C46950 + C46989 * C46929) * ae) +
         C46794 * (2 * C46945 + ae * C46946 +
                   C46795 * (C46829 + ae * C46795 * C46868 +
                             C46795 * (ae * C46868 +
                                       C46795 * (C46827 + std::pow(C46799, 8) *
                                                              bs[8] * C46800 *
                                                              C46810))))) /
        C46763;
    const double C1216 =
        (3 * (C46888 + C46795 * C46952 + C47336 * ae) +
         C46795 * (2 * C46952 + C46795 * C46996 + C47338 * ae) +
         (2 * C47336 + C46795 * C47338) * ae) /
        C46743;
    const double C1359 =
        (C46888 + C46795 * C46952 + C47336 * ae + C46996 * C47012) / C46743;
    const double C1765 =
        (C46794 * (2 * C46952 + C46795 * C46996 + C47338 * ae)) / C46743;
    const double C47100 = C47085 + C47099;
    const double C47190 = C47189 + C47182;
    const double C23345 =
        (3 * (C47050 + ae * C47196 + C46794 * C47200) +
         ae * (2 * C47196 + C46794 * C47201) +
         C46794 *
             (2 * C47200 + ae * C47201 +
              C46794 *
                  (C47164 + ae * C46794 * C47186 +
                   C46794 * (ae * C47186 +
                             C46794 * (C46827 + ae * C46795 * C46866 +
                                       C46795 * (ae * C46866 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C23343 = (3 * (C46974 + C47080 * C47012) +
                           C46794 * (2 * C47196 + C46794 * C47201)) /
                          C46743;
    const double C108 =
        (C48003 + 2 * C47647) / C47637 - (C48012 * C47638) / C47633;
    const double C109 =
        (C47990 + 2 * C47656 + C48012) / C47637 - (C48005 * C47638) / C47633;
    const double C110 = (C47961 + C47653 / C47633 + C48005) / C47637 -
                        (C47992 * C47638) / C47633;
    const double C1194 =
        (C48006 + 2 * C47729) / C47637 - (C48013 * C47725) / C47633;
    const double C1195 =
        (C47994 + 2 * C47736 + C48013) / C47637 - (C48009 * C47725) / C47633;
    const double C1196 = (C47967 + C47733 / C47633 + C48009) / C47637 -
                         (C47999 * C47725) / C47633;
    const double C2055 =
        (C48007 + 2 * C47771) / C47637 - (C48014 * C47767) / C47633;
    const double C2056 =
        (C47996 + 2 * C47778 + C48014) / C47637 - (C48011 * C47767) / C47633;
    const double C2057 = (C47970 + C47775 / C47633 + C48011) / C47637 -
                         (C48002 * C47767) / C47633;
    const double C7228 = C7220 + C7221;
    const double C11784 = C11772 + C11773;
    const double C18554 = C18546 + C18547;
    const double C6502 = C6494 + C6495;
    const double C11924 = C11918 + C11919;
    const double C17844 = C17836 + C17837;
    const double C6298 = C6292 + C6293;
    const double C17640 = C17634 + C17635;
    const double C7230 = C7224 + C7225;
    const double C11785 = C11774 + C11775;
    const double C18556 = C18550 + C18551;
    const double C6504 = C6498 + C6499;
    const double C11925 = C11920 + C11921;
    const double C17846 = C17840 + C17841;
    const double C6155 =
        (2 * C46930 + ae * C46932 + C46795 * C47050 + ae * C46794 * C47083 +
         C46794 *
             (ae * C47083 +
              C46794 * (2 * C47044 + ae * C47046 +
                        C46795 * (C46818 + ae * C46795 * C46855 +
                                  C46795 * (ae * C46855 + C46795 * C46827))))) /
        C46763;
    const double C6641 =
        (ae * (3 * C46974 + C46795 * C47083 +
               (2 * C46969 + C46795 * C47076) * ae) +
         C46794 *
             (3 * C47050 + ae * C47051 +
              C46795 * (2 * C47044 + ae * C47046 +
                        C46795 * (C46818 + ae * C46795 * C46855 +
                                  C46795 * (ae * C46855 + C46795 * C46827))))) /
        C46763;
    const double C5997 =
        (4 * (2 * C46962 + C46795 * C46974 + C47328 * ae) +
         C46795 * (3 * C46974 + C46795 * C47083 + C47409 * ae) +
         (3 * C47328 + C46795 * C47409) * ae) /
        C46743;
    const double C6151 =
        (2 * C46962 + C46795 * C46974 + C47328 * ae + C47083 * C47012) / C46743;
    const double C6637 =
        (C46794 * (3 * C46974 + C46795 * C47083 + C47409 * ae)) / C46743;
    const double C44146 =
        (5 * (3 * C47455 + C46794 * C47523 + C47454 * ae) +
         C46794 *
             (4 * C47523 +
              C46794 *
                  (3 * C47518 +
                   C46794 *
                       (2 * C47510 +
                        C46794 * (C46855 + C46794 * (C46794 * C46866 + C47174) +
                                  C46794 * C46987 * ae) +
                        C47512 * ae) +
                   C47517 * ae) +
              C47521 * ae) +
         (4 * C47454 + C46794 * C47521) * ae) /
        C46743;
    const double C47101 = C47100 + C47096;
    const double C47191 = C46795 * C47190;
    const double C23691 =
        (2 * (ae * C47083 + C46794 * C47168) + ae * (C47083 + C47190 * C47012) +
         C46794 *
             (C47168 + ae * C46794 * C47190 +
              C46794 *
                  (ae * C47190 +
                   C46794 * (2 * C47158 + ae * C47160 +
                             C46795 * (C46827 + ae * C46795 * C46866 +
                                       C46795 * (ae * C46866 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C23689 =
        (2 * C46794 * C47083 + C46794 * (C47083 + C47190 * C47012)) / C46743;
    const double C12122 = C11784 * C47987;
    const double C33095 = C11784 * C47987;
    const double C11926 = C11924 * C47987;
    const double C32897 = C11924 * C47987;
    const double C12123 = C11785 * C10560;
    const double C33096 = C11785 * C31581;
    const double C11927 = C11925 * C10560;
    const double C32898 = C11925 * C31581;
    const double C27180 = C47985 * C6155;
    const double C38284 = C47985 * C6155;
    const double C43860 = C47873 * C6155;
    const double C27660 = C47985 * C6641;
    const double C38764 = C47985 * C6641;
    const double C27184 = C47985 * C6151;
    const double C38288 = C47985 * C6151;
    const double C43858 = C47873 * C6151;
    const double C27656 = C47985 * C6637;
    const double C38760 = C47985 * C6637;
    const double C6156 =
        (2 * C46938 + ae * C46939 + C46795 * C47066 + ae * C46794 * C47101 +
         C46794 * (ae * C47101 +
                   C46794 * (2 * C47062 + ae * C47063 +
                             C46795 * (C47055 + ae * C46795 * C47056 +
                                       C46795 * (ae * C47056 +
                                                 C46795 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C6642 =
        (ae * (3 * C46984 + C46795 * C47101 +
               (2 * C46979 + C46795 * C47094) * ae) +
         C46794 * (3 * C47066 + ae * C47067 +
                   C46795 * (2 * C47062 + ae * C47063 +
                             C46795 * (C47055 + ae * C46795 * C47056 +
                                       C46795 * (ae * C47056 +
                                                 C46795 * C46802 *
                                                     std::pow(C46799, 8) *
                                                     bs[8] * C46800))))) /
        C46763;
    const double C5999 =
        (4 * (2 * C46957 + C46795 * C46984 + C47333 * ae) +
         C46795 * (3 * C46984 + C46795 * C47101 + C47414 * ae) +
         (3 * C47333 + C46795 * C47414) * ae) /
        C46743;
    const double C6153 =
        (2 * C46957 + C46795 * C46984 + C47333 * ae + C47101 * C47012) / C46743;
    const double C6639 =
        (C46794 * (3 * C46984 + C46795 * C47101 + C47414 * ae)) / C46743;
    const double C47192 = C47171 + C47191;
    const double C27195 = C27179 + C27180;
    const double C38299 = C38283 + C38284;
    const double C43862 = C43859 + C43860;
    const double C27664 = C27659 + C27660;
    const double C38768 = C38763 + C38764;
    const double C27197 = C27183 + C27184;
    const double C38301 = C38287 + C38288;
    const double C43861 = C43857 + C43858;
    const double C27662 = C27655 + C27656;
    const double C38766 = C38759 + C38760;
    const double C47193 = C47192 + C47187;
    const double C22713 =
        (3 * C47050 + ae * C47051 + C46795 * C47168 + ae * C46794 * C47193 +
         C46794 *
             (ae * C47193 +
              C46794 *
                  (3 * C47164 + ae * C47165 +
                   C46795 * (2 * C47158 + ae * C47160 +
                             C46795 * (C46827 + ae * C46795 * C46866 +
                                       C46795 * (ae * C46866 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C23059 =
        (ae * (4 * C47083 + C46795 * C47193 +
               (3 * C47076 + C46795 * C47185) * ae) +
         C46794 *
             (4 * C47168 + ae * C47169 +
              C46795 *
                  (3 * C47164 + ae * C47165 +
                   C46795 * (2 * C47158 + ae * C47160 +
                             C46795 * (C46827 + ae * C46795 * C46866 +
                                       C46795 * (ae * C46866 +
                                                 C46795 * std::pow(C46799, 8) *
                                                     bs[8] * C46800)))))) /
        C46763;
    const double C22597 =
        (5 * (3 * C46974 + C46795 * C47083 + C47409 * ae) +
         C46795 * (4 * C47083 + C46795 * C47193 + C47473 * ae) +
         (4 * C47409 + C46795 * C47473) * ae) /
        C46743;
    const double C22711 =
        (3 * C46974 + C46795 * C47083 + C47409 * ae + C47193 * C47012) / C46743;
    const double C23057 =
        (C46794 * (4 * C47083 + C46795 * C47193 + C47473 * ae)) / C46743;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47873 * C122) * C114 +
                    (C113 * C123 + C47873 * C136) * C47890) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C47688 * C47729 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47873 * C334) * C47890 +
                    (C113 * C304 + C47873 * C317) * C114) *
                       C103) *
                      C47688 * C47736 +
                  (((C113 * C305 + C47873 * C318) * C114 +
                    (C113 * C319 + C47873 * C335) * C47890) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C47688 * C2948) *
                     C47647 +
                 (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                      C47688 * C47736 -
                  (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                      C47688 * C47729 -
                  ((C389 + C390) * C105 + (C386 + C385) * C104 +
                   (C384 + C383) * C103) *
                      C47688 * C2948) *
                     C47656 +
                 ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
                      C47729 -
                  ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                      C47688 * C47736 +
                  (C392 * C103 + (C390 + C389) * C104 +
                   ((C113 * C311 + C47873 * C330) * C114 +
                    (C113 * C331 + C47873 * C341) * C47890) *
                       C105) *
                      C47688 * C2948) *
                     C2951)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47936 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47873 * C537) * C47890 +
                     (C113 * C507 + C47873 * C520) * C114) *
                        C103) *
                       C47775) *
                      C47729 +
                  ((((C113 * C971 + C47873 * C976) * C114 +
                     (C113 * C977 + C47873 * C986) * C47890) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47775 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C47936) *
                      C47736 +
                  ((((C113 * C305 + C47873 * C318) * C114 +
                     (C113 * C319 + C47873 * C335) * C47890) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C47936 -
                   ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                    ((C113 * C1353 + C47873 * C1366) * C47890 +
                     (C113 * C1339 + C47873 * C1354) * C114) *
                        C103) *
                       C47775) *
                      C2948) *
                     C2688 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47775 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47936) *
                      C47729 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47936 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47775) *
                      C47736 +
                  (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
                    ((C113 * C1640 + C47873 * C1641) * C114 +
                     (C113 * C1642 + C47873 * C1643) * C47890) *
                        C105) *
                       C47775 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C47936) *
                      C2948) *
                     C47653)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C48013 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C48009 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47999 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47873 * C1220) * C47890 +
             (C113 * C1202 + C47873 * C1211) * C114) *
                C103) *
               C47688 * C47977) *
              C2688 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C48009 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C48013 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47999 +
           ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
            ((C113 * C1474 + C47873 * C1475) * C114 +
             (C113 * C1476 + C47873 * C1477) * C47890) *
                C105) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C2580 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C47733) *
              C48012 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C47733 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C2580) *
              C48005 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C2580 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47688 * C47733) *
              C47992 +
          ((C704 * C103 + (C712 + C711) * C104 +
            ((C113 * C699 + C47873 * C700) * C114 +
             (C113 * C701 + C47873 * C702) * C47890) *
                C105) *
               C47688 * C47733 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C48007 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47996 +
            (((C113 * C508 + C47873 * C521) * C114 +
              (C113 * C522 + C47873 * C538) * C47890) *
                 C103 +
             (C586 + C587) * C104 + C595 * C105) *
                C47970) *
               C2580 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47996 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C48007 -
            ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
             ((C113 * C1347 + C47873 * C1363) * C47890 +
              (C113 * C1336 + C47873 * C1348) * C114) *
                 C103) *
                C47970) *
               C47733) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47996 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C48007 -
            ((C592 + C593) * C105 + (C589 + C588) * C104 +
             (C587 + C586) * C103) *
                C47970) *
               C2580 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C48007 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47996 +
            ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
             ((C113 * C2230 + C47873 * C2231) * C114 +
              (C113 * C2232 + C47873 * C2233) * C47890) *
                 C105) *
                C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47936 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47873 * C537) * C47890 +
                     (C113 * C507 + C47873 * C520) * C114) *
                        C103) *
                       C47775) *
                      C2580 +
                  ((((C113 * C971 + C47873 * C976) * C114 +
                     (C113 * C977 + C47873 * C986) * C47890) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47775 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C47936) *
                      C47733) *
                     C47647 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47775 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47936) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47936 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47775) *
                      C47733) *
                     C47656 +
                 (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47936 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47775) *
                      C2580 +
                  ((C1016 * C103 + (C1015 + C1014) * C104 +
                    ((C113 * C975 + C47873 * C984) * C114 +
                     (C113 * C985 + C47873 * C990) * C47890) *
                        C105) *
                       C47775 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C47936) *
                      C47733) *
                     C2951)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C2580 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C47733) *
              C48012 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C47733 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C2580) *
              C48005 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C2580 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47688 * C47733) *
              C47992 +
          ((C704 * C103 + (C712 + C711) * C104 +
            ((C113 * C699 + C47873 * C700) * C114 +
             (C113 * C701 + C47873 * C702) * C47890) *
                C105) *
               C47688 * C47733 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C48013 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C48009 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47999 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47873 * C1220) * C47890 +
             (C113 * C1202 + C47873 * C1211) * C114) *
                C103) *
               C47688 * C47977) *
              C2688 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C48009 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C48013 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47999 +
           ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
            ((C113 * C1474 + C47873 * C1475) * C114 +
             (C113 * C1476 + C47873 * C1477) * C47890) *
                C105) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C3342 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47873 * C537) * C47890 +
                     (C113 * C507 + C47873 * C520) * C114) *
                        C103) *
                       C47775) *
                      C47729 +
                  ((((C113 * C971 + C47873 * C976) * C114 +
                     (C113 * C977 + C47873 * C986) * C47890) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47775 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C3342) *
                      C47736 +
                  ((((C113 * C305 + C47873 * C318) * C114 +
                     (C113 * C319 + C47873 * C335) * C47890) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C3342 -
                   ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                    ((C113 * C1353 + C47873 * C1366) * C47890 +
                     (C113 * C1339 + C47873 * C1354) * C114) *
                        C103) *
                       C47775) *
                      C2948) *
                     C47921 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47775 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C3342) *
                      C47729 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C3342 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47775) *
                      C47736 +
                  (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
                    ((C113 * C1640 + C47873 * C1641) * C114 +
                     (C113 * C1642 + C47873 * C1643) * C47890) *
                        C105) *
                       C47775 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C3342) *
                      C2948) *
                     C47653)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47873 * C122) * C114 +
                    (C113 * C123 + C47873 * C136) * C47890) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C47771 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47873 * C537) * C47890 +
                    (C113 * C507 + C47873 * C520) * C114) *
                       C103) *
                      C47778 +
                  (((C113 * C508 + C47873 * C521) * C114 +
                    (C113 * C522 + C47873 * C538) * C47890) *
                       C103 +
                   (C586 + C587) * C104 + C595 * C105) *
                      C3850) *
                     C47729 +
                 ((((C113 * C971 + C47873 * C976) * C114 +
                    (C113 * C977 + C47873 * C986) * C47890) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C47778 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47873 * C334) * C47890 +
                    (C113 * C304 + C47873 * C317) * C114) *
                       C103) *
                      C47771 -
                  ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
                   ((C113 * C1347 + C47873 * C1363) * C47890 +
                    (C113 * C1336 + C47873 * C1348) * C114) *
                       C103) *
                      C3850) *
                     C47736 +
                 ((((C113 * C305 + C47873 * C318) * C114 +
                    (C113 * C319 + C47873 * C335) * C47890) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C47771 -
                  ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                   ((C113 * C1353 + C47873 * C1366) * C47890 +
                    (C113 * C1339 + C47873 * C1354) * C114) *
                       C103) *
                      C47778 +
                  (((C113 * C1340 + C47873 * C1355) * C114 +
                    (C113 * C1356 + C47873 * C1367) * C47890) *
                       C103 +
                   ((C113 * C1341 + C47873 * C1357) * C114 +
                    (C113 * C1358 + C47873 * C1368) * C47890) *
                       C104 +
                   ((C113 * C1342 + C47873 * C1359) * C114 +
                    (C113 * C1360 + C47873 * C1369) * C47890) *
                       C105) *
                      C3850) *
                     C2948) *
                C47642) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47873 * C122) * C114 +
                    (C113 * C123 + C47873 * C136) * C47890) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C3342 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47873 * C537) * C47890 +
                    (C113 * C507 + C47873 * C520) * C114) *
                       C103) *
                      C47775) *
                     C48013 +
                 ((((C113 * C971 + C47873 * C976) * C114 +
                    (C113 * C977 + C47873 * C986) * C47890) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C47775 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47873 * C334) * C47890 +
                    (C113 * C304 + C47873 * C317) * C114) *
                       C103) *
                      C3342) *
                     C48009 +
                 ((((C113 * C305 + C47873 * C318) * C114 +
                    (C113 * C319 + C47873 * C335) * C47890) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C3342 -
                  ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                   ((C113 * C1353 + C47873 * C1366) * C47890 +
                    (C113 * C1339 + C47873 * C1354) * C114) *
                       C103) *
                      C47775) *
                     C47999 +
                 ((((C113 * C1758 + C47873 * C1761) * C114 +
                    (C113 * C1762 + C47873 * C1767) * C47890) *
                       C103 +
                   ((C113 * C1759 + C47873 * C1763) * C114 +
                    (C113 * C1764 + C47873 * C1768) * C47890) *
                       C104 +
                   ((C113 * C1760 + C47873 * C1765) * C114 +
                    (C113 * C1766 + C47873 * C1769) * C47890) *
                       C105) *
                      C47775 -
                  ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
                   ((C113 * C1210 + C47873 * C1220) * C47890 +
                    (C113 * C1202 + C47873 * C1211) * C114) *
                       C103) *
                      C3342) *
                     C47977) *
                C47642) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C3342 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47873 * C537) * C47890 +
                     (C113 * C507 + C47873 * C520) * C114) *
                        C103) *
                       C47775) *
                      C2580 +
                  ((((C113 * C971 + C47873 * C976) * C114 +
                     (C113 * C977 + C47873 * C986) * C47890) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47775 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C3342) *
                      C47733) *
                     C48003 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47775 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C3342) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C3342 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47775) *
                      C47733) *
                     C47990 +
                 (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47775) *
                      C2580 +
                  ((C1016 * C103 + (C1015 + C1014) * C104 +
                    ((C113 * C975 + C47873 * C984) * C114 +
                     (C113 * C985 + C47873 * C990) * C47890) *
                        C105) *
                       C47775 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C3342) *
                      C47733) *
                     C47961)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47873 * C122) * C114 +
                    (C113 * C123 + C47873 * C136) * C47890) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C48014 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47873 * C537) * C47890 +
                    (C113 * C507 + C47873 * C520) * C114) *
                       C103) *
                      C48011 +
                  (((C113 * C508 + C47873 * C521) * C114 +
                    (C113 * C522 + C47873 * C538) * C47890) *
                       C103 +
                   (C586 + C587) * C104 + C595 * C105) *
                      C48002 -
                  ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
                   ((C113 * C2070 + C47873 * C2080) * C47890 +
                    (C113 * C2062 + C47873 * C2071) * C114) *
                       C103) *
                      C47983) *
                     C2580 +
                 ((((C113 * C971 + C47873 * C976) * C114 +
                    (C113 * C977 + C47873 * C986) * C47890) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C48011 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47873 * C334) * C47890 +
                    (C113 * C304 + C47873 * C317) * C114) *
                       C103) *
                      C48014 -
                  ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
                   ((C113 * C1347 + C47873 * C1363) * C47890 +
                    (C113 * C1336 + C47873 * C1348) * C114) *
                       C103) *
                      C48002 +
                  (((C113 * C2470 + C47873 * C2473) * C114 +
                    (C113 * C2474 + C47873 * C2479) * C47890) *
                       C103 +
                   ((C113 * C2471 + C47873 * C2475) * C114 +
                    (C113 * C2476 + C47873 * C2480) * C47890) *
                       C104 +
                   ((C113 * C2472 + C47873 * C2477) * C114 +
                    (C113 * C2478 + C47873 * C2481) * C47890) *
                       C105) *
                      C47983) *
                     C47733) *
                C47642) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47771 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47873 * C537) * C47890 +
                     (C113 * C507 + C47873 * C520) * C114) *
                        C103) *
                       C47778 +
                   (((C113 * C508 + C47873 * C521) * C114 +
                     (C113 * C522 + C47873 * C538) * C47890) *
                        C103 +
                    (C586 + C587) * C104 + C595 * C105) *
                       C3850) *
                      C2580 +
                  ((((C113 * C971 + C47873 * C976) * C114 +
                     (C113 * C977 + C47873 * C986) * C47890) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47778 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C47771 -
                   ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
                    ((C113 * C1347 + C47873 * C1363) * C47890 +
                     (C113 * C1336 + C47873 * C1348) * C114) *
                        C103) *
                       C3850) *
                      C47733) *
                     C47921 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47778 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47771 -
                   ((C592 + C593) * C105 + (C589 + C588) * C104 +
                    (C587 + C586) * C103) *
                       C3850) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47771 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47778 +
                   ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
                    ((C113 * C2230 + C47873 * C2231) * C114 +
                     (C113 * C2232 + C47873 * C2233) * C47890) *
                        C105) *
                       C3850) *
                      C47733) *
                     C47653)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C3342 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47873 * C537) * C47890 +
                     (C113 * C507 + C47873 * C520) * C114) *
                        C103) *
                       C47775) *
                      C2580 +
                  ((((C113 * C971 + C47873 * C976) * C114 +
                     (C113 * C977 + C47873 * C986) * C47890) *
                        C103 +
                    (C1010 + C1011) * C104 + C1016 * C105) *
                       C47775 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C3342) *
                      C47733) *
                     C48003 +
                 ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47775 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C3342) *
                      C2580 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C3342 -
                   ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
                    (C1011 + C1010) * C103) *
                       C47775) *
                      C47733) *
                     C47990 +
                 (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47775) *
                      C2580 +
                  ((C1016 * C103 + (C1015 + C1014) * C104 +
                    ((C113 * C975 + C47873 * C984) * C114 +
                     (C113 * C985 + C47873 * C990) * C47890) *
                        C105) *
                       C47775 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C3342) *
                      C47733) *
                     C47961)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C47873 * C122) * C114 +
                    (C113 * C123 + C47873 * C136) * C47890) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C3342 -
                  (C594 * C105 + (C584 + C585) * C104 +
                   ((C113 * C519 + C47873 * C537) * C47890 +
                    (C113 * C507 + C47873 * C520) * C114) *
                       C103) *
                      C47775) *
                     C48013 +
                 ((((C113 * C971 + C47873 * C976) * C114 +
                    (C113 * C977 + C47873 * C986) * C47890) *
                       C103 +
                   (C1010 + C1011) * C104 + C1016 * C105) *
                      C47775 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C47873 * C334) * C47890 +
                    (C113 * C304 + C47873 * C317) * C114) *
                       C103) *
                      C3342) *
                     C48009 +
                 ((((C113 * C305 + C47873 * C318) * C114 +
                    (C113 * C319 + C47873 * C335) * C47890) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C3342 -
                  ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
                   ((C113 * C1353 + C47873 * C1366) * C47890 +
                    (C113 * C1339 + C47873 * C1354) * C114) *
                       C103) *
                      C47775) *
                     C47999 +
                 ((((C113 * C1758 + C47873 * C1761) * C114 +
                    (C113 * C1762 + C47873 * C1767) * C47890) *
                       C103 +
                   ((C113 * C1759 + C47873 * C1763) * C114 +
                    (C113 * C1764 + C47873 * C1768) * C47890) *
                       C104 +
                   ((C113 * C1760 + C47873 * C1765) * C114 +
                    (C113 * C1766 + C47873 * C1769) * C47890) *
                       C105) *
                      C47775 -
                  ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
                   ((C113 * C1210 + C47873 * C1220) * C47890 +
                    (C113 * C1202 + C47873 * C1211) * C114) *
                       C103) *
                      C3342) *
                     C47977) *
                C47642) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C1468 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C1469 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C1470 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47873 * C1220) * C47890 +
             (C113 * C1202 + C47873 * C1211) * C114) *
                C103) *
               C47688 * C47977) *
              C47921 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C1469 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C1468 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C1470 +
           ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
            ((C113 * C1474 + C47873 * C1475) * C114 +
             (C113 * C1476 + C47873 * C1477) * C47890) *
                C105) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C47935 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C47733) *
              C695 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C47733 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C47935) *
              C696 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
               C47935 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47688 * C47733) *
              C697 +
          ((C704 * C103 + (C712 + C711) * C104 +
            ((C113 * C699 + C47873 * C700) * C114 +
             (C113 * C701 + C47873 * C702) * C47890) *
                C105) *
               C47688 * C47733 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C1880 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C1881 +
            (((C113 * C508 + C47873 * C521) * C114 +
              (C113 * C522 + C47873 * C538) * C47890) *
                 C103 +
             (C586 + C587) * C104 + C595 * C105) *
                C47970) *
               C47935 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C1881 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C1880 -
            ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
             ((C113 * C1347 + C47873 * C1363) * C47890 +
              (C113 * C1336 + C47873 * C1348) * C114) *
                 C103) *
                C47970) *
               C47733) *
              C47921 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C1881 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C1880 -
            ((C592 + C593) * C105 + (C589 + C588) * C104 +
             (C587 + C586) * C103) *
                C47970) *
               C47935 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C1880 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C1881 +
            ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
             ((C113 * C2230 + C47873 * C2231) * C114 +
              (C113 * C2232 + C47873 * C2233) * C47890) *
                 C105) *
                C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47936 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47775) *
              C1468 +
          ((((C113 * C971 + C47873 * C976) * C114 +
             (C113 * C977 + C47873 * C986) * C47890) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47775 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47936) *
              C1469 +
          ((((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47936 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47873 * C1366) * C47890 +
             (C113 * C1339 + C47873 * C1354) * C114) *
                C103) *
               C47775) *
              C1470 +
          ((((C113 * C1758 + C47873 * C1761) * C114 +
             (C113 * C1762 + C47873 * C1767) * C47890) *
                C103 +
            ((C113 * C1759 + C47873 * C1763) * C114 +
             (C113 * C1764 + C47873 * C1768) * C47890) *
                C104 +
            ((C113 * C1760 + C47873 * C1765) * C114 +
             (C113 * C1766 + C47873 * C1769) * C47890) *
                C105) *
               C47775 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47873 * C1220) * C47890 +
             (C113 * C1202 + C47873 * C1211) * C114) *
                C103) *
               C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47936 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47775) *
               C47935 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47775 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C47936) *
               C47733) *
              C299 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47775 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47936) *
               C47935 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47936 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47775) *
               C47733) *
              C300 +
          (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47936 -
            ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                C47775) *
               C47935 +
           ((C1016 * C103 + (C1015 + C1014) * C104 +
             ((C113 * C975 + C47873 * C984) * C114 +
              (C113 * C985 + C47873 * C990) * C47890) *
                 C105) *
                C47775 -
            ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C2348 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C2349 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C2350 -
           ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
            ((C113 * C2070 + C47873 * C2080) * C47890 +
             (C113 * C2062 + C47873 * C2071) * C114) *
                C103) *
               C47983) *
              C47935 +
          ((((C113 * C971 + C47873 * C976) * C114 +
             (C113 * C977 + C47873 * C986) * C47890) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C2349 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C2348 -
           ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
            ((C113 * C1347 + C47873 * C1363) * C47890 +
             (C113 * C1336 + C47873 * C1348) * C114) *
                C103) *
               C2350 +
           (((C113 * C2470 + C47873 * C2473) * C114 +
             (C113 * C2474 + C47873 * C2479) * C47890) *
                C103 +
            ((C113 * C2471 + C47873 * C2475) * C114 +
             (C113 * C2476 + C47873 * C2480) * C47890) *
                C104 +
            ((C113 * C2472 + C47873 * C2477) * C114 +
             (C113 * C2478 + C47873 * C2481) * C47890) *
                C105) *
               C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47873 * C122) * C114 +
                (C113 * C123 + C47873 * C136) * C47890) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105) *
                  C47688 * C47670 * C108 -
              (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                  C47688 * C47670 * C109 +
              (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
                  C47670 * C110 -
              ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                  C47688 * C47670 * C111 +
              (C186 * C103 + (C183 + C182) * C104 +
               ((C113 * C121 + C47873 * C134) * C114 +
                (C113 * C135 + C47873 * C142) * C47890) *
                   C105) *
                  C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C47873 * C122) * C114 +
                 (C113 * C123 + C47873 * C136) * C47890) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105) *
                   C47688 * C48006 -
               (C391 * C105 + (C381 + C382) * C104 +
                ((C113 * C316 + C47873 * C334) * C47890 +
                 (C113 * C304 + C47873 * C317) * C114) *
                    C103) *
                   C47688 * C47994 +
               (((C113 * C305 + C47873 * C318) * C114 +
                 (C113 * C319 + C47873 * C335) * C47890) *
                    C103 +
                (C383 + C384) * C104 + C392 * C105) *
                   C47688 * C47967) *
                  C299 +
              (((C382 + C381) * C103 + (C380 + C379) * C104 +
                (C387 + C388) * C105) *
                   C47688 * C47994 -
               (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                   C47688 * C48006 -
               ((C389 + C390) * C105 + (C386 + C385) * C104 +
                (C384 + C383) * C103) *
                   C47688 * C47967) *
                  C300 +
              ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
                   C48006 -
               (((C113 * C328 + C47873 * C340) * C47890 +
                 (C113 * C310 + C47873 * C329) * C114) *
                    C105 +
                (C388 + C387) * C104 + C391 * C103) *
                   C47688 * C47994 +
               (C392 * C103 + (C390 + C389) * C104 +
                ((C113 * C311 + C47873 * C330) * C114 +
                 (C113 * C331 + C47873 * C341) * C47890) *
                    C105) *
                   C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48007 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47996 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C47670 * C299 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 +
            (C590 + C591) * C105) *
               C47996 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48007 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47970) *
              C47670 * C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48007 -
           (((C113 * C531 + C47873 * C543) * C47890 +
             (C113 * C513 + C47873 * C532) * C114) *
                C105 +
            (C591 + C590) * C104 + C594 * C103) *
               C47996 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47873 * C533) * C114 +
             (C113 * C534 + C47873 * C544) * C47890) *
                C105) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47967) *
              C48003 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47967) *
              C47990 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47688 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47873 * C330) * C114 +
             (C113 * C331 + C47873 * C341) * C47890) *
                C105) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47688 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47873 * C334) * C47890 +
            (C113 * C304 + C47873 * C317) * C114) *
               C103) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C114 +
            (C113 * C319 + C47873 * C335) * C47890) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47688 * C1196 -
          (((C113 * C1206 + C47873 * C1218) * C47890 +
            (C113 * C1200 + C47873 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47873 * C1219) * C47890 +
            (C113 * C1201 + C47873 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47873 * C1220) * C47890 +
            (C113 * C1202 + C47873 * C1211) * C114) *
               C103) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C114 +
            (C113 * C1213 + C47873 * C1221) * C47890) *
               C103 +
           ((C113 * C1204 + C47873 * C1214) * C114 +
            (C113 * C1215 + C47873 * C1222) * C47890) *
               C104 +
           ((C113 * C1205 + C47873 * C1216) * C114 +
            (C113 * C1217 + C47873 * C1223) * C47890) *
               C105) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48007 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47996 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C1126 +
          ((((C113 * C971 + C47873 * C976) * C114 +
             (C113 * C977 + C47873 * C986) * C47890) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47996 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C48007 -
           (((C113 * C1343 + C47873 * C1361) * C47890 +
             (C113 * C1334 + C47873 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47873 * C1362) * C47890 +
             (C113 * C1335 + C47873 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47873 * C1363) * C47890 +
             (C113 * C1336 + C47873 * C1348) * C114) *
                C103) *
               C47970) *
              C1127 +
          ((((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48007 -
           (((C113 * C1349 + C47873 * C1364) * C47890 +
             (C113 * C1337 + C47873 * C1350) * C114) *
                C105 +
            ((C113 * C1351 + C47873 * C1365) * C47890 +
             (C113 * C1338 + C47873 * C1352) * C114) *
                C104 +
            ((C113 * C1353 + C47873 * C1366) * C47890 +
             (C113 * C1339 + C47873 * C1354) * C114) *
                C103) *
               C47996 +
           (((C113 * C1340 + C47873 * C1355) * C114 +
             (C113 * C1356 + C47873 * C1367) * C47890) *
                C103 +
            ((C113 * C1341 + C47873 * C1357) * C114 +
             (C113 * C1358 + C47873 * C1368) * C47890) *
                C104 +
            ((C113 * C1342 + C47873 * C1359) * C114 +
             (C113 * C1360 + C47873 * C1369) * C47890) *
                C105) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C47670 * C48003 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) * C1881 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C1880 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47970) *
              C47670 * C47990 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C1880 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) * C1881 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47873 * C533) * C114 +
             (C113 * C534 + C47873 * C544) * C47890) *
                C105) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C48006 +
          ((((C113 * C971 + C47873 * C976) * C114 +
             (C113 * C977 + C47873 * C986) * C47890) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C1881 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C1880 -
           (((C113 * C1343 + C47873 * C1361) * C47890 +
             (C113 * C1334 + C47873 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47873 * C1362) * C47890 +
             (C113 * C1335 + C47873 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47873 * C1363) * C47890 +
             (C113 * C1336 + C47873 * C1348) * C114) *
                C103) *
               C47970) *
              C47994 +
          ((((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C1880 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47873 * C1366) * C47890 +
             (C113 * C1339 + C47873 * C1354) * C114) *
                C103) *
               C1881 +
           (((C113 * C1340 + C47873 * C1355) * C114 +
             (C113 * C1356 + C47873 * C1367) * C47890) *
                C103 +
            ((C113 * C1341 + C47873 * C1357) * C114 +
             (C113 * C1358 + C47873 * C1368) * C47890) *
                C104 +
            ((C113 * C1342 + C47873 * C1359) * C114 +
             (C113 * C1360 + C47873 * C1369) * C47890) *
                C105) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C2055 -
          (C594 * C105 + (C584 + C585) * C104 +
           ((C113 * C519 + C47873 * C537) * C47890 +
            (C113 * C507 + C47873 * C520) * C114) *
               C103) *
              C2056 +
          (((C113 * C508 + C47873 * C521) * C114 +
            (C113 * C522 + C47873 * C538) * C47890) *
               C103 +
           (C586 + C587) * C104 + C595 * C105) *
              C2057 -
          (((C113 * C2066 + C47873 * C2078) * C47890 +
            (C113 * C2060 + C47873 * C2067) * C114) *
               C105 +
           ((C113 * C2068 + C47873 * C2079) * C47890 +
            (C113 * C2061 + C47873 * C2069) * C114) *
               C104 +
           ((C113 * C2070 + C47873 * C2080) * C47890 +
            (C113 * C2062 + C47873 * C2071) * C114) *
               C103) *
              C2058 +
          (((C113 * C2063 + C47873 * C2072) * C114 +
            (C113 * C2073 + C47873 * C2081) * C47890) *
               C103 +
           ((C113 * C2064 + C47873 * C2074) * C114 +
            (C113 * C2075 + C47873 * C2082) * C47890) *
               C104 +
           ((C113 * C2065 + C47873 * C2076) * C114 +
            (C113 * C2077 + C47873 * C2083) * C47890) *
               C105) *
              C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47936 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47775) *
               C1126 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47775 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C47936) *
               C1127 +
           ((((C113 * C305 + C47873 * C318) * C114 +
              (C113 * C319 + C47873 * C335) * C47890) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C47936 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47873 * C1366) * C47890 +
              (C113 * C1339 + C47873 * C1354) * C114) *
                 C103) *
                C47775) *
               C47967) *
              C47921 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47775 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47936) *
               C1126 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47936 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47775) *
               C1127 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47873 * C1641) * C114 +
              (C113 * C1642 + C47873 * C1643) * C47890) *
                 C105) *
                C47775 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47936 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47775) *
              C47670 * C695 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47775 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47936) *
              C47670 * C696 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47936 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47775) *
              C47670 * C697 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47873 * C813) * C114 +
             (C113 * C814 + C47873 * C815) * C47890) *
                C105) *
               C47775 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C2348 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C2349 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C2350 -
           ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
            ((C113 * C2070 + C47873 * C2080) * C47890 +
             (C113 * C2062 + C47873 * C2071) * C114) *
                C103) *
               C47983) *
              C47670 * C47921 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) * C2349 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C2348 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C2350 +
           ((C2372 + C2371) * C103 + (C2370 + C2369) * C104 +
            ((C113 * C2352 + C47873 * C2353) * C114 +
             (C113 * C2354 + C47873 * C2355) * C47890) *
                C105) *
               C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C48006 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47967) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C47688 * C47994 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C48006 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47967) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
               C48006 -
           (((C113 * C328 + C47873 * C340) * C47890 +
             (C113 * C310 + C47873 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C47688 * C47994 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47873 * C330) * C114 +
             (C113 * C331 + C47873 * C341) * C47890) *
                C105) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47688 * C47670 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C47688 *
              C47670 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C47670 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C47688 *
              C47670 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C47873 * C134) * C114 +
            (C113 * C135 + C47873 * C142) * C47890) *
               C105) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47967) *
              C48003 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47967) *
              C47990 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47688 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47873 * C330) * C114 +
             (C113 * C331 + C47873 * C341) * C47890) *
                C105) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47688 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47873 * C334) * C47890 +
            (C113 * C304 + C47873 * C317) * C114) *
               C103) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C114 +
            (C113 * C319 + C47873 * C335) * C47890) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47688 * C1196 -
          (((C113 * C1206 + C47873 * C1218) * C47890 +
            (C113 * C1200 + C47873 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47873 * C1219) * C47890 +
            (C113 * C1201 + C47873 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47873 * C1220) * C47890 +
            (C113 * C1202 + C47873 * C1211) * C114) *
               C103) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C114 +
            (C113 * C1213 + C47873 * C1221) * C47890) *
               C103 +
           ((C113 * C1204 + C47873 * C1214) * C114 +
            (C113 * C1215 + C47873 * C1222) * C47890) *
               C104 +
           ((C113 * C1205 + C47873 * C1216) * C114 +
            (C113 * C1217 + C47873 * C1223) * C47890) *
               C105) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C47670 * C48003 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) * C1881 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C1880 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47970) *
              C47670 * C47990 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C1880 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) * C1881 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47873 * C533) * C114 +
             (C113 * C534 + C47873 * C544) * C47890) *
                C105) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C1880 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C1881 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C48006 +
          ((((C113 * C971 + C47873 * C976) * C114 +
             (C113 * C977 + C47873 * C986) * C47890) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C1881 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C1880 -
           (((C113 * C1343 + C47873 * C1361) * C47890 +
             (C113 * C1334 + C47873 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47873 * C1362) * C47890 +
             (C113 * C1335 + C47873 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47873 * C1363) * C47890 +
             (C113 * C1336 + C47873 * C1348) * C114) *
                C103) *
               C47970) *
              C47994 +
          ((((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C1880 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47873 * C1366) * C47890 +
             (C113 * C1339 + C47873 * C1354) * C114) *
                C103) *
               C1881 +
           (((C113 * C1340 + C47873 * C1355) * C114 +
             (C113 * C1356 + C47873 * C1367) * C47890) *
                C103 +
            ((C113 * C1341 + C47873 * C1357) * C114 +
             (C113 * C1358 + C47873 * C1368) * C47890) *
                C104 +
            ((C113 * C1342 + C47873 * C1359) * C114 +
             (C113 * C1360 + C47873 * C1369) * C47890) *
                C105) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C3342 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47775) *
               C47935 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47775 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C3342) *
               C47733) *
              C47647 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47775 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C3342) *
               C47935 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C3342 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47775) *
               C47733) *
              C47656 +
          (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
            ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                C47775) *
               C47935 +
           ((C1016 * C103 + (C1015 + C1014) * C104 +
             ((C113 * C975 + C47873 * C984) * C114 +
              (C113 * C985 + C47873 * C990) * C47890) *
                 C105) *
                C47775 -
            ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                C3342) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47771 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47778 +
            (((C113 * C508 + C47873 * C521) * C114 +
              (C113 * C522 + C47873 * C538) * C47890) *
                 C103 +
             (C586 + C587) * C104 + C595 * C105) *
                C3850) *
               C47935 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47778 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C47771 -
            ((C2247 + C2248) * C105 + (C2249 + C2250) * C104 +
             ((C113 * C1347 + C47873 * C1363) * C47890 +
              (C113 * C1336 + C47873 * C1348) * C114) *
                 C103) *
                C3850) *
               C47733) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47778 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47771 -
            ((C592 + C593) * C105 + (C589 + C588) * C104 +
             (C587 + C586) * C103) *
                C3850) *
               C47935 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47771 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47778 +
            ((C2250 + C2249) * C103 + (C2248 + C2247) * C104 +
             ((C113 * C2230 + C47873 * C2231) * C114 +
              (C113 * C2232 + C47873 * C2233) * C47890) *
                 C105) *
                C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C3342 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47775) *
               C48006 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47775 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C3342) *
               C47994 +
           ((((C113 * C305 + C47873 * C318) * C114 +
              (C113 * C319 + C47873 * C335) * C47890) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C3342 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47873 * C1366) * C47890 +
              (C113 * C1339 + C47873 * C1354) * C114) *
                 C103) *
                C47775) *
               C47967) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47775 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C3342) *
               C48006 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C3342 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47775) *
               C47994 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47873 * C1641) * C114 +
              (C113 * C1642 + C47873 * C1643) * C47890) *
                 C105) *
                C47775 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C3342 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47775) *
              C47670 * C48012 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47775 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C3342) *
              C47670 * C48005 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47775) *
              C47670 * C47992 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47873 * C813) * C114 +
             (C113 * C814 + C47873 * C815) * C47890) *
                C105) *
               C47775 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48014 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C48011 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C48002 -
           ((C2369 + C2370) * C105 + (C2371 + C2372) * C104 +
            ((C113 * C2070 + C47873 * C2080) * C47890 +
             (C113 * C2062 + C47873 * C2071) * C114) *
                C103) *
               C47983) *
              C47670 * C2688 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C48011 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48014 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C48002 +
           ((C2372 + C2371) * C103 + (C2370 + C2369) * C104 +
            ((C113 * C2352 + C47873 * C2353) * C114 +
             (C113 * C2354 + C47873 * C2355) * C47890) *
                C105) *
               C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47771 -
                   (C594 * C105 + (C584 + C585) * C104 +
                    ((C113 * C519 + C47873 * C537) * C47890 +
                     (C113 * C507 + C47873 * C520) * C114) *
                        C103) *
                       C47778 +
                   (((C113 * C508 + C47873 * C521) * C114 +
                     (C113 * C522 + C47873 * C538) * C47890) *
                        C103 +
                    (C586 + C587) * C104 + C595 * C105) *
                       C3850) *
                      C47670 * C47647 +
                  (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                       C47778 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47771 -
                   ((C592 + C593) * C105 + (C589 + C588) * C104 +
                    (C587 + C586) * C103) *
                       C3850) *
                      C47670 * C47656 +
                  ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47771 -
                   ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                       C47778 +
                   (C595 * C103 + (C593 + C592) * C104 +
                    ((C113 * C514 + C47873 * C533) * C114 +
                     (C113 * C534 + C47873 * C544) * C47890) *
                        C105) *
                       C3850) *
                      C47670 * C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C3342 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47775) *
              C47670 * C48012 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47775 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C3342) *
              C47670 * C48005 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C3342 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47775) *
              C47670 * C47992 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47873 * C813) * C114 +
             (C113 * C814 + C47873 * C815) * C47890) *
                C105) *
               C47775 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C3342 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47775) *
               C48006 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47775 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C3342) *
               C47994 +
           ((((C113 * C305 + C47873 * C318) * C114 +
              (C113 * C319 + C47873 * C335) * C47890) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C3342 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47873 * C1366) * C47890 +
              (C113 * C1339 + C47873 * C1354) * C114) *
                 C103) *
                C47775) *
               C47967) *
              C2688 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47775 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C3342) *
               C48006 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C3342 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47775) *
               C47994 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47873 * C1641) * C114 +
              (C113 * C1642 + C47873 * C1643) * C47890) *
                 C105) *
                C47775 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47688 * C47935 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C47688 * C47733) *
                      C695 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47688 * C47733 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47688 * C47935) *
                      C696 +
                  ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
                       C47935 -
                   ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C47688 * C47733) *
                      C697 +
                  ((C704 * C103 + (C712 + C711) * C104 +
                    ((C113 * C699 + C47873 * C700) * C114 +
                     (C113 * C701 + C47873 * C702) * C47890) *
                        C105) *
                       C47688 * C47733 -
                   ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                       C47688 * C47935) *
                      C47971)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C114 +
                     (C113 * C123 + C47873 * C136) * C47890) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C47688 * C1468 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C47873 * C334) * C47890 +
                     (C113 * C304 + C47873 * C317) * C114) *
                        C103) *
                       C47688 * C1469 +
                   (((C113 * C305 + C47873 * C318) * C114 +
                     (C113 * C319 + C47873 * C335) * C47890) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C47688 * C1470 -
                   ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
                    ((C113 * C1210 + C47873 * C1220) * C47890 +
                     (C113 * C1202 + C47873 * C1211) * C114) *
                        C103) *
                       C47688 * C47977) *
                      C47921 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                       C47688 * C1469 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C47688 * C1468 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C47688 * C1470 +
                   ((C1494 + C1493) * C103 + (C1492 + C1491) * C104 +
                    ((C113 * C1474 + C47873 * C1475) * C114 +
                     (C113 * C1476 + C47873 * C1477) * C47890) *
                        C105) *
                       C47688 * C47977) *
                      C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47936 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47775) *
               C47935 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47775 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C47936) *
               C47733) *
              C299 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47775 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47936) *
               C47935 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47936 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47775) *
               C47733) *
              C300 +
          (((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47936 -
            ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
                C47775) *
               C47935 +
           ((C1016 * C103 + (C1015 + C1014) * C104 +
             ((C113 * C975 + C47873 * C984) * C114 +
              (C113 * C985 + C47873 * C990) * C47890) *
                 C105) *
                C47775 -
            ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
                C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47936 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47775) *
              C1468 +
          ((((C113 * C971 + C47873 * C976) * C114 +
             (C113 * C977 + C47873 * C986) * C47890) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47775 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47936) *
              C1469 +
          ((((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47936 -
           ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
            ((C113 * C1353 + C47873 * C1366) * C47890 +
             (C113 * C1339 + C47873 * C1354) * C114) *
                C103) *
               C47775) *
              C1470 +
          ((((C113 * C1758 + C47873 * C1761) * C114 +
             (C113 * C1762 + C47873 * C1767) * C47890) *
                C103 +
            ((C113 * C1759 + C47873 * C1763) * C114 +
             (C113 * C1764 + C47873 * C1768) * C47890) *
                C104 +
            ((C113 * C1760 + C47873 * C1765) * C114 +
             (C113 * C1766 + C47873 * C1769) * C47890) *
                C105) *
               C47775 -
           ((C1491 + C1492) * C105 + (C1493 + C1494) * C104 +
            ((C113 * C1210 + C47873 * C1220) * C47890 +
             (C113 * C1202 + C47873 * C1211) * C114) *
                C103) *
               C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C48006 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47967) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C47688 * C47994 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C48006 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47967) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
               C48006 -
           (((C113 * C328 + C47873 * C340) * C47890 +
             (C113 * C310 + C47873 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C47688 * C47994 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47873 * C330) * C114 +
             (C113 * C331 + C47873 * C341) * C47890) *
                C105) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47688 * C47670 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C47688 *
              C47670 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C47670 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C47688 *
              C47670 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C47873 * C134) * C114 +
            (C113 * C135 + C47873 * C142) * C47890) *
               C105) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48007 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47996 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C47670 * C299 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 +
            (C590 + C591) * C105) *
               C47996 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48007 -
           ((C592 + C593) * C105 + (C589 + C588) * C104 +
            (C587 + C586) * C103) *
               C47970) *
              C47670 * C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48007 -
           (((C113 * C531 + C47873 * C543) * C47890 +
             (C113 * C513 + C47873 * C532) * C114) *
                C105 +
            (C591 + C590) * C104 + C594 * C103) *
               C47996 +
           (C595 * C103 + (C593 + C592) * C104 +
            ((C113 * C514 + C47873 * C533) * C114 +
             (C113 * C534 + C47873 * C544) * C47890) *
                C105) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47967) *
              C48003 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47967) *
              C47990 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47688 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47873 * C330) * C114 +
             (C113 * C331 + C47873 * C341) * C47890) *
                C105) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47688 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47873 * C334) * C47890 +
            (C113 * C304 + C47873 * C317) * C114) *
               C103) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C114 +
            (C113 * C319 + C47873 * C335) * C47890) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47688 * C1196 -
          (((C113 * C1206 + C47873 * C1218) * C47890 +
            (C113 * C1200 + C47873 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47873 * C1219) * C47890 +
            (C113 * C1201 + C47873 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47873 * C1220) * C47890 +
            (C113 * C1202 + C47873 * C1211) * C114) *
               C103) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C114 +
            (C113 * C1213 + C47873 * C1221) * C47890) *
               C103 +
           ((C113 * C1204 + C47873 * C1214) * C114 +
            (C113 * C1215 + C47873 * C1222) * C47890) *
               C104 +
           ((C113 * C1205 + C47873 * C1216) * C114 +
            (C113 * C1217 + C47873 * C1223) * C47890) *
               C105) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48007 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47996 +
           (((C113 * C508 + C47873 * C521) * C114 +
             (C113 * C522 + C47873 * C538) * C47890) *
                C103 +
            (C586 + C587) * C104 + C595 * C105) *
               C47970) *
              C1126 +
          ((((C113 * C971 + C47873 * C976) * C114 +
             (C113 * C977 + C47873 * C986) * C47890) *
                C103 +
            (C1010 + C1011) * C104 + C1016 * C105) *
               C47996 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C48007 -
           (((C113 * C1343 + C47873 * C1361) * C47890 +
             (C113 * C1334 + C47873 * C1344) * C114) *
                C105 +
            ((C113 * C1345 + C47873 * C1362) * C47890 +
             (C113 * C1335 + C47873 * C1346) * C114) *
                C104 +
            ((C113 * C1347 + C47873 * C1363) * C47890 +
             (C113 * C1336 + C47873 * C1348) * C114) *
                C103) *
               C47970) *
              C1127 +
          ((((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48007 -
           (((C113 * C1349 + C47873 * C1364) * C47890 +
             (C113 * C1337 + C47873 * C1350) * C114) *
                C105 +
            ((C113 * C1351 + C47873 * C1365) * C47890 +
             (C113 * C1338 + C47873 * C1352) * C114) *
                C104 +
            ((C113 * C1353 + C47873 * C1366) * C47890 +
             (C113 * C1339 + C47873 * C1354) * C114) *
                C103) *
               C47996 +
           (((C113 * C1340 + C47873 * C1355) * C114 +
             (C113 * C1356 + C47873 * C1367) * C47890) *
                C103 +
            ((C113 * C1341 + C47873 * C1357) * C114 +
             (C113 * C1358 + C47873 * C1368) * C47890) *
                C104 +
            ((C113 * C1342 + C47873 * C1359) * C114 +
             (C113 * C1360 + C47873 * C1369) * C47890) *
                C105) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47936 -
           (C594 * C105 + (C584 + C585) * C104 +
            ((C113 * C519 + C47873 * C537) * C47890 +
             (C113 * C507 + C47873 * C520) * C114) *
                C103) *
               C47775) *
              C47670 * C695 +
          (((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
               C47775 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47936) *
              C47670 * C696 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47936 -
           ((C824 + C825) * C105 + (C591 + C590) * C104 + C594 * C103) *
               C47775) *
              C47670 * C697 +
          ((C817 * C103 + (C825 + C824) * C104 +
            ((C113 * C812 + C47873 * C813) * C114 +
             (C113 * C814 + C47873 * C815) * C47890) *
                C105) *
               C47775 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C47873 * C122) * C114 +
              (C113 * C123 + C47873 * C136) * C47890) *
                 C103 +
             (C174 + C175) * C104 + C184 * C105) *
                C47936 -
            (C594 * C105 + (C584 + C585) * C104 +
             ((C113 * C519 + C47873 * C537) * C47890 +
              (C113 * C507 + C47873 * C520) * C114) *
                 C103) *
                C47775) *
               C1126 +
           ((((C113 * C971 + C47873 * C976) * C114 +
              (C113 * C977 + C47873 * C986) * C47890) *
                 C103 +
             (C1010 + C1011) * C104 + C1016 * C105) *
                C47775 -
            (C391 * C105 + (C381 + C382) * C104 +
             ((C113 * C316 + C47873 * C334) * C47890 +
              (C113 * C304 + C47873 * C317) * C114) *
                 C103) *
                C47936) *
               C1127 +
           ((((C113 * C305 + C47873 * C318) * C114 +
              (C113 * C319 + C47873 * C335) * C47890) *
                 C103 +
             (C383 + C384) * C104 + C392 * C105) *
                C47936 -
            ((C1657 + C1658) * C105 + (C1659 + C1660) * C104 +
             ((C113 * C1353 + C47873 * C1366) * C47890 +
              (C113 * C1339 + C47873 * C1354) * C114) *
                 C103) *
                C47775) *
               C47967) *
              C47921 +
          ((((C585 + C584) * C103 + (C583 + C582) * C104 + C817 * C105) *
                C47775 -
            (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                C47936) *
               C1126 +
           (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
                C47936 -
            ((C1014 + C1015) * C105 + (C1013 + C1012) * C104 +
             (C1011 + C1010) * C103) *
                C47775) *
               C1127 +
           (((C1660 + C1659) * C103 + (C1658 + C1657) * C104 +
             ((C113 * C1640 + C47873 * C1641) * C114 +
              (C113 * C1642 + C47873 * C1643) * C47890) *
                 C105) *
                C47775 -
            ((C389 + C390) * C105 + (C386 + C385) * C104 +
             (C384 + C383) * C103) *
                C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47688 * C47670 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C47688 *
              C47670 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C47670 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C47688 *
              C47670 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C47873 * C134) * C114 +
            (C113 * C135 + C47873 * C142) * C47890) *
               C105) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C48006 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47967) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C47688 * C47994 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C48006 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47967) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 *
               C48006 -
           (((C113 * C328 + C47873 * C340) * C47890 +
             (C113 * C310 + C47873 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C47688 * C47994 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47873 * C330) * C114 +
             (C113 * C331 + C47873 * C341) * C47890) *
                C105) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C114 +
             (C113 * C123 + C47873 * C136) * C47890) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C47688 * C1126 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C47873 * C334) * C47890 +
             (C113 * C304 + C47873 * C317) * C114) *
                C103) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C114 +
             (C113 * C319 + C47873 * C335) * C47890) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C47688 * C47967) *
              C48003 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C704 * C105) *
               C47688 * C1127 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C47688 * C1126 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C47688 * C47967) *
              C47990 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C47688 * C1126 -
           ((C711 + C712) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C47688 * C1127 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C47873 * C330) * C114 +
             (C113 * C331 + C47873 * C341) * C47890) *
                C105) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C114 +
            (C113 * C123 + C47873 * C136) * C47890) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C47688 * C1194 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C47873 * C334) * C47890 +
            (C113 * C304 + C47873 * C317) * C114) *
               C103) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C114 +
            (C113 * C319 + C47873 * C335) * C47890) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C47688 * C1196 -
          (((C113 * C1206 + C47873 * C1218) * C47890 +
            (C113 * C1200 + C47873 * C1207) * C114) *
               C105 +
           ((C113 * C1208 + C47873 * C1219) * C47890 +
            (C113 * C1201 + C47873 * C1209) * C114) *
               C104 +
           ((C113 * C1210 + C47873 * C1220) * C47890 +
            (C113 * C1202 + C47873 * C1211) * C114) *
               C103) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C114 +
            (C113 * C1213 + C47873 * C1221) * C47890) *
               C103 +
           ((C113 * C1204 + C47873 * C1214) * C114 +
            (C113 * C1215 + C47873 * C1222) * C47890) *
               C104 +
           ((C113 * C1205 + C47873 * C1216) * C114 +
            (C113 * C1217 + C47873 * C1223) * C47890) *
               C105) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C47729 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47736 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C2948) *
              C47647 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47736 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C47729 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C2948) *
              C47656 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C47729 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47736 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47936 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C47729 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47936) *
               C47736 +
           ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                  C114 +
              (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                  C47890) *
                 C4825 +
             ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
                C47936 -
            (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
             ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                  C47890 +
              (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                  C114) *
                 C4825) *
                C47775) *
               C2948) *
              C2688 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47936) *
               C47729 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47936 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47736 +
           ((((C6505 + C6504) * C114 + (C6503 + C6502) * C47890) * C4825 +
             ((C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                  C114 +
              (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
             ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
                C47936) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C48013 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C48009 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47999 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C47688 * C47977) *
              C2688 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C48009 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C48013 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47999 +
           (((C6299 + C6298) * C114 + (C6297 + C6296) * C47890) * C4825 +
            ((C4827 * C1200 + C4823 * C1207 + C4828 * C1205 + C47985 * C1216) *
                 C114 +
             (C4827 * C1206 + C4823 * C1218 + C4828 * C1217 + C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C2580 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47733) *
              C48012 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47733 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C2580) *
              C48005 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C2580 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47733) *
              C47992 +
          ((((C5407 + C5406) * C114 + (C5405 + C5404) * C47890) * C4825 +
            ((C4827 * C310 + C4823 * C329 + C4828 * C311 + C47985 * C330) *
                 C114 +
             (C4827 * C328 + C4823 * C340 + C4828 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C48007 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47996 +
            (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                  C114 +
              (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                  C47890) *
                 C4825 +
             ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
                C47970) *
               C2580 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47996 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C48007 -
            (((C7228 + C7229) * C47890 + (C7230 + C7231) * C114) * C47954 +
             ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                  C47890 +
              (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                  C114) *
                 C4825) *
                C47970) *
               C47733) *
              C2688 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47996 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C48007 -
            (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
             ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
                C47970) *
               C2580 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C48007 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47996 +
            (((C7231 + C7230) * C114 + (C7229 + C7228) * C47890) * C4825 +
             ((C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                  C114 +
              (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                  C47890) *
                 C47954) *
                C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47936 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C2580 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47936) *
               C47733) *
              C47647 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47936) *
               C2580 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47936 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47733) *
              C47656 +
          (((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
             ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                C47936 -
            (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
             ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
                C47775) *
               C2580 +
           ((((C5767 + C5766) * C114 + (C5765 + C5764) * C47890) * C4825 +
             ((C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                  C114 +
              (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
             ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
                C47936) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C2580 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47733) *
              C48012 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47733 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C2580) *
              C48005 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C2580 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47733) *
              C47992 +
          ((((C5407 + C5406) * C114 + (C5405 + C5404) * C47890) * C4825 +
            ((C4827 * C310 + C4823 * C329 + C4828 * C311 + C47985 * C330) *
                 C114 +
             (C4827 * C328 + C4823 * C340 + C4828 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C48013 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C48009 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47999 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C47688 * C47977) *
              C2688 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C48009 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C48013 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47999 +
           (((C6299 + C6298) * C114 + (C6297 + C6296) * C47890) * C4825 +
            ((C4827 * C1200 + C4823 * C1207 + C4828 * C1205 + C47985 * C1216) *
                 C114 +
             (C4827 * C1206 + C4823 * C1218 + C4828 * C1217 + C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C3342 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C47729 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47736 +
           ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                  C114 +
              (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                  C47890) *
                 C4825 +
             ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
                C3342 -
            (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
             ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                  C47890 +
              (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                  C114) *
                 C4825) *
                C47775) *
               C2948) *
              C47921 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C3342) *
               C47729 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C3342 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47736 +
           ((((C6505 + C6504) * C114 + (C6503 + C6502) * C47890) * C4825 +
             ((C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                  C114 +
              (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
             ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
                C3342) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47771 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47778 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C3850) *
              C47729 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C47778 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47771 -
           (((C7228 + C7229) * C47890 + (C7230 + C7231) * C114) * C47954 +
            ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                 C47890 +
             (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                 C114) *
                C4825) *
               C3850) *
              C47736 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47771 -
           (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C47778 +
           (((C4827 * C1340 + C4823 * C1355 + C4828 * C6149 + C47985 * C6151) *
                 C114 +
             (C4827 * C1356 + C4823 * C1367 + C4828 * C6152 + C47985 * C6155) *
                 C47890) *
                C4825 +
            ((C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C114 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47890) *
                C47954) *
               C3850) *
              C2948) *
         C47642) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C3342 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C48013 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C47775 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C3342) *
              C48009 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C3342 -
           (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C47775) *
              C47999 +
          ((((C4827 * C1758 + C4823 * C1761 + C4828 * C6635 + C47985 * C6637) *
                 C114 +
             (C4827 * C1762 + C4823 * C1767 + C4828 * C6638 + C47985 * C6641) *
                 C47890) *
                C4825 +
            ((C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                 C114 +
             (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C3342 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C2580 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47733) *
              C48003 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C3342) *
               C2580 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C3342 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47733) *
              C47990 +
          (((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
             ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                C3342 -
            (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
             ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
                C47775) *
               C2580 +
           ((((C5767 + C5766) * C114 + (C5765 + C5764) * C47890) * C4825 +
             ((C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                  C114 +
              (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
             ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
                C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C48014 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C48011 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C48002 -
           (((C7370 + C7371) * C47890 + (C7372 + C7373) * C114) * C47954 +
            ((C4828 * C2474 + C47985 * C2479 + C4827 * C2070 + C4823 * C2080) *
                 C47890 +
             (C4828 * C2470 + C47985 * C2473 + C4827 * C2062 + C4823 * C2071) *
                 C114) *
                C4825) *
               C47983) *
              C2580 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C48011 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C48014 -
           (((C7228 + C7229) * C47890 + (C7230 + C7231) * C114) * C47954 +
            ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                 C47890 +
             (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                 C114) *
                C4825) *
               C48002 +
           (((C4827 * C2470 + C4823 * C2473 + C4828 * C7503 + C47985 * C7505) *
                 C114 +
             (C4827 * C2474 + C4823 * C2479 + C4828 * C7506 + C47985 * C7509) *
                 C47890) *
                C4825 +
            ((C4827 * C2471 + C4823 * C2475 + C4828 * C7504 + C47985 * C7507) *
                 C114 +
             (C4827 * C2476 + C4823 * C2480 + C4828 * C7508 + C47985 * C7510) *
                 C47890) *
                C47954) *
               C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47771 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47778 +
            (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                  C114 +
              (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                  C47890) *
                 C4825 +
             ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
                C3850) *
               C2580 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47778 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47771 -
            (((C7228 + C7229) * C47890 + (C7230 + C7231) * C114) * C47954 +
             ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                  C47890 +
              (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                  C114) *
                 C4825) *
                C3850) *
               C47733) *
              C47921 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47778 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47771 -
            (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
             ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
                C3850) *
               C2580 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47771 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47778 +
            (((C7231 + C7230) * C114 + (C7229 + C7228) * C47890) * C4825 +
             ((C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                  C114 +
              (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                  C47890) *
                 C47954) *
                C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C3342 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C2580 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47733) *
              C48003 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C3342) *
               C2580 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C3342 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47733) *
              C47990 +
          (((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
             ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                C3342 -
            (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
             ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
                C47775) *
               C2580 +
           ((((C5767 + C5766) * C114 + (C5765 + C5764) * C47890) * C4825 +
             ((C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                  C114 +
              (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
             ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
                C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C3342 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C48013 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C47775 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C3342) *
              C48009 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C3342 -
           (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C47775) *
              C47999 +
          ((((C4827 * C1758 + C4823 * C1761 + C4828 * C6635 + C47985 * C6637) *
                 C114 +
             (C4827 * C1762 + C4823 * C1767 + C4828 * C6638 + C47985 * C6641) *
                 C47890) *
                C4825 +
            ((C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                 C114 +
             (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C1468 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C1469 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C1470 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C47688 * C47977) *
              C47921 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C1469 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C1468 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C1470 +
           (((C6299 + C6298) * C114 + (C6297 + C6296) * C47890) * C4825 +
            ((C4827 * C1200 + C4823 * C1207 + C4828 * C1205 + C47985 * C1216) *
                 C114 +
             (C4827 * C1206 + C4823 * C1218 + C4828 * C1217 + C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C47935 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47733) *
              C695 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47733 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C47935) *
              C696 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C47935 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47733) *
              C697 +
          ((((C5407 + C5406) * C114 + (C5405 + C5404) * C47890) * C4825 +
            ((C4827 * C310 + C4823 * C329 + C4828 * C311 + C47985 * C330) *
                 C114 +
             (C4827 * C328 + C4823 * C340 + C4828 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C1880 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C1881 +
            (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                  C114 +
              (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                  C47890) *
                 C4825 +
             ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
                C47970) *
               C47935 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C1881 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C1880 -
            (((C7228 + C7229) * C47890 + (C7230 + C7231) * C114) * C47954 +
             ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                  C47890 +
              (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                  C114) *
                 C4825) *
                C47970) *
               C47733) *
              C47921 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C1881 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C1880 -
            (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
             ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
                C47970) *
               C47935 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C1880 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C1881 +
            (((C7231 + C7230) * C114 + (C7229 + C7228) * C47890) * C4825 +
             ((C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                  C114 +
              (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                  C47890) *
                 C47954) *
                C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47936 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C1468 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C47775 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47936) *
              C1469 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47936 -
           (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C47775) *
              C1470 +
          ((((C4827 * C1758 + C4823 * C1761 + C4828 * C6635 + C47985 * C6637) *
                 C114 +
             (C4827 * C1762 + C4823 * C1767 + C4828 * C6638 + C47985 * C6641) *
                 C47890) *
                C4825 +
            ((C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                 C114 +
             (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47936 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C47935 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47936) *
               C47733) *
              C299 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47936) *
               C47935 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47936 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47733) *
              C300 +
          (((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
             ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                C47936 -
            (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
             ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
                C47775) *
               C47935 +
           ((((C5767 + C5766) * C114 + (C5765 + C5764) * C47890) * C4825 +
             ((C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                  C114 +
              (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
             ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
                C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C2348 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C2349 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C2350 -
           (((C7370 + C7371) * C47890 + (C7372 + C7373) * C114) * C47954 +
            ((C4828 * C2474 + C47985 * C2479 + C4827 * C2070 + C4823 * C2080) *
                 C47890 +
             (C4828 * C2470 + C47985 * C2473 + C4827 * C2062 + C4823 * C2071) *
                 C114) *
                C4825) *
               C47983) *
              C47935 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C2349 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C2348 -
           (((C7228 + C7229) * C47890 + (C7230 + C7231) * C114) * C47954 +
            ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                 C47890 +
             (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                 C114) *
                C4825) *
               C2350 +
           (((C4827 * C2470 + C4823 * C2473 + C4828 * C7503 + C47985 * C7505) *
                 C114 +
             (C4827 * C2474 + C4823 * C2479 + C4828 * C7506 + C47985 * C7509) *
                 C47890) *
                C4825 +
            ((C4827 * C2471 + C4823 * C2475 + C4828 * C7504 + C47985 * C7507) *
                 C114 +
             (C4827 * C2476 + C4823 * C2480 + C4828 * C7508 + C47985 * C7510) *
                 C47890) *
                C47954) *
               C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                    C114 +
                (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                    C47890) *
                   C4825 +
               ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                  C47688 * C47670 * C108 -
              (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
               ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                  C47688 * C47670 * C109 +
              (((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
               ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                  C47688 * C47670 * C110 -
              (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
               ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
                  C47688 * C47670 * C111 +
              (((C4877 + C4876) * C114 + (C4875 + C4874) * C47890) * C4825 +
               ((C4827 * C120 + C4823 * C133 + C4828 * C699 + C47985 * C700) *
                    C114 +
                (C4827 * C132 + C4823 * C141 + C4828 * C701 + C47985 * C702) *
                    C47890) *
                   C47954) *
                  C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                     C114 +
                 (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                     C47890) *
                    C4825 +
                ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                   C47688 * C48006 -
               (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
                ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                     C47890 +
                 (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                     C114) *
                    C4825) *
                   C47688 * C47994 +
               (((C4827 * C305 + C4823 * C318 + C4828 * C1202 +
                  C47985 * C1211) *
                     C114 +
                 (C4827 * C319 + C4823 * C335 + C4828 * C1210 +
                  C47985 * C1220) *
                     C47890) *
                    C4825 +
                ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
                   C47688 * C47967) *
                  C299 +
              ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
                ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                   C47688 * C47994 -
               (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
                ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                   C47688 * C48006 -
               (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
                ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
                   C47688 * C47967) *
                  C300 +
              ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
                ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                   C47688 * C48006 -
               (((C4828 * C326 + C47985 * C339 + C4827 * C325 + C4823 * C338) *
                     C47890 +
                 (C4828 * C309 + C47985 * C327 + C4827 * C308 + C4823 * C324) *
                     C114) *
                    C47954 +
                ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
                   C47688 * C47994 +
               (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
                ((C4827 * C309 + C4823 * C327 + C4828 * C1474 +
                  C47985 * C1475) *
                     C114 +
                 (C4827 * C326 + C4823 * C339 + C4828 * C1476 +
                  C47985 * C1477) *
                     C47890) *
                    C47954) *
                   C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C48007 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47996 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C47670 * C299 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C47996 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C48007 -
           (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
            ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
               C47970) *
              C47670 * C300 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C48007 -
           (((C4828 * C982 + C47985 * C989 + C4827 * C528 + C4823 * C541) *
                 C47890 +
             (C4828 * C974 + C47985 * C983 + C4827 * C511 + C4823 * C527) *
                 C114) *
                C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C47996 +
           (((C5265 + C5264) * C114 + (C5263 + C5262) * C47890) * C4825 +
            ((C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                 C114 +
             (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C1127 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C1127 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C1126 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47967) *
              C47990 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C1127 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C47688 * C1194 -
          (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
           ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C47890 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C114) *
               C4825) *
              C47688 * C1195 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C114 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C47890) *
               C4825 +
           ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
              C47688 * C1196 -
          (((C4828 * C1215 + C47985 * C1222 + C4827 * C1208 + C4823 * C1219) *
                C47890 +
            (C4828 * C1204 + C47985 * C1214 + C4827 * C1201 + C4823 * C1209) *
                C114) *
               C47954 +
           ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C47890 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C114) *
               C4825) *
              C47688 * C1197 +
          (((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
                C114 +
            (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
                C47890) *
               C4825 +
           ((C4827 * C1204 + C4823 * C1214 + C4828 * C5996 + C47985 * C5999) *
                C114 +
            (C4827 * C1215 + C4823 * C1222 + C4828 * C6000 + C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C48007 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47996 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C1126 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C47996 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C48007 -
           (((C4828 * C1358 + C47985 * C1368 + C4827 * C1345 + C4823 * C1362) *
                 C47890 +
             (C4828 * C1341 + C47985 * C1357 + C4827 * C1335 + C4823 * C1346) *
                 C114) *
                C47954 +
            ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                 C47890 +
             (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                 C114) *
                C4825) *
               C47970) *
              C1127 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C48007 -
           (((C4828 * C1764 + C47985 * C1768 + C4827 * C1351 + C4823 * C1365) *
                 C47890 +
             (C4828 * C1759 + C47985 * C1763 + C4827 * C1338 + C4823 * C1352) *
                 C114) *
                C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C47996 +
           (((C4827 * C1340 + C4823 * C1355 + C4828 * C6149 + C47985 * C6151) *
                 C114 +
             (C4827 * C1356 + C4823 * C1367 + C4828 * C6152 + C47985 * C6155) *
                 C47890) *
                C4825 +
            ((C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C114 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C1880 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C47670 * C48003 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C1881 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C1880 -
           (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
            ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
               C47970) *
              C47670 * C47990 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C1880 -
           (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C1881 +
           (((C5265 + C5264) * C114 + (C5263 + C5262) * C47890) * C4825 +
            ((C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                 C114 +
             (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C1880 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C48006 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C1881 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C1880 -
           (((C4828 * C1358 + C47985 * C1368 + C4827 * C1345 + C4823 * C1362) *
                 C47890 +
             (C4828 * C1341 + C47985 * C1357 + C4827 * C1335 + C4823 * C1346) *
                 C114) *
                C47954 +
            ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                 C47890 +
             (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                 C114) *
                C4825) *
               C47970) *
              C47994 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C1880 -
           (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C1881 +
           (((C4827 * C1340 + C4823 * C1355 + C4828 * C6149 + C47985 * C6151) *
                 C114 +
             (C4827 * C1356 + C4823 * C1367 + C4828 * C6152 + C47985 * C6155) *
                 C47890) *
                C4825 +
            ((C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C114 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C2055 -
          (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
           ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                C47890 +
            (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                C114) *
               C4825) *
              C2056 +
          (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                C114 +
            (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                C47890) *
               C4825 +
           ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
              C2057 -
          (((C4828 * C2476 + C47985 * C2480 + C4827 * C2068 + C4823 * C2079) *
                C47890 +
            (C4828 * C2471 + C47985 * C2475 + C4827 * C2061 + C4823 * C2069) *
                C114) *
               C47954 +
           ((C4828 * C2474 + C47985 * C2479 + C4827 * C2070 + C4823 * C2080) *
                C47890 +
            (C4828 * C2470 + C47985 * C2473 + C4827 * C2062 + C4823 * C2071) *
                C114) *
               C4825) *
              C2058 +
          (((C4827 * C2063 + C4823 * C2072 + C4828 * C7017 + C47985 * C7019) *
                C114 +
            (C4827 * C2073 + C4823 * C2081 + C4828 * C7020 + C47985 * C7023) *
                C47890) *
               C4825 +
           ((C4827 * C2064 + C4823 * C2074 + C4828 * C7018 + C47985 * C7021) *
                C114 +
            (C4827 * C2075 + C4823 * C2082 + C4828 * C7022 + C47985 * C7024) *
                C47890) *
               C47954) *
              C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47936 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C1126 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47936) *
               C1127 +
           ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                  C114 +
              (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                  C47890) *
                 C4825 +
             ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
                C47936 -
            (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
             ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                  C47890 +
              (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                  C114) *
                 C4825) *
                C47775) *
               C47967) *
              C47921 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47936) *
               C1126 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47936 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C1127 +
           ((((C6505 + C6504) * C114 + (C6503 + C6502) * C47890) * C4825 +
             ((C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                  C114 +
              (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
             ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
                C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47936 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C47670 * C695 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C47775 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47936) *
              C47670 * C696 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47936 -
           (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C47775) *
              C47670 * C697 +
          ((((C5549 + C5548) * C114 + (C5547 + C5546) * C47890) * C4825 +
            ((C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
                 C114 +
             (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C2348 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C2349 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C2350 -
           (((C7370 + C7371) * C47890 + (C7372 + C7373) * C114) * C47954 +
            ((C4828 * C2474 + C47985 * C2479 + C4827 * C2070 + C4823 * C2080) *
                 C47890 +
             (C4828 * C2470 + C47985 * C2473 + C4827 * C2062 + C4823 * C2071) *
                 C114) *
                C4825) *
               C47983) *
              C47670 * C47921 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C2349 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C2348 -
           (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
            ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
               C2350 +
           (((C7373 + C7372) * C114 + (C7371 + C7370) * C47890) * C4825 +
            ((C4827 * C2060 + C4823 * C2067 + C4828 * C2472 + C47985 * C2477) *
                 C114 +
             (C4827 * C2066 + C4823 * C2078 + C4828 * C2478 + C47985 * C2481) *
                 C47890) *
                C47954) *
               C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C48006 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47994 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47967) *
              C299 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47994 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C48006 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47967) *
              C300 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C48006 -
           (((C4828 * C326 + C47985 * C339 + C4827 * C325 + C4823 * C338) *
                 C47890 +
             (C4828 * C309 + C47985 * C327 + C4827 * C308 + C4823 * C324) *
                 C114) *
                C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47994 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C47688 * C47670 * C108 -
          (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
           ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
              C47688 * C47670 * C109 +
          (((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
           ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
              C47688 * C47670 * C110 -
          (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
           ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
              C47688 * C47670 * C111 +
          (((C4877 + C4876) * C114 + (C4875 + C4874) * C47890) * C4825 +
           ((C4827 * C120 + C4823 * C133 + C4828 * C699 + C47985 * C700) *
                C114 +
            (C4827 * C132 + C4823 * C141 + C4828 * C701 + C47985 * C702) *
                C47890) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C1127 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C1127 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C1126 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47967) *
              C47990 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C1127 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C47688 * C1194 -
          (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
           ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C47890 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C114) *
               C4825) *
              C47688 * C1195 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C114 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C47890) *
               C4825 +
           ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
              C47688 * C1196 -
          (((C4828 * C1215 + C47985 * C1222 + C4827 * C1208 + C4823 * C1219) *
                C47890 +
            (C4828 * C1204 + C47985 * C1214 + C4827 * C1201 + C4823 * C1209) *
                C114) *
               C47954 +
           ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C47890 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C114) *
               C4825) *
              C47688 * C1197 +
          (((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
                C114 +
            (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
                C47890) *
               C4825 +
           ((C4827 * C1204 + C4823 * C1214 + C4828 * C5996 + C47985 * C5999) *
                C114 +
            (C4827 * C1215 + C4823 * C1222 + C4828 * C6000 + C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C1880 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C47670 * C48003 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C1881 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C1880 -
           (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
            ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
               C47970) *
              C47670 * C47990 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C1880 -
           (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C1881 +
           (((C5265 + C5264) * C114 + (C5263 + C5262) * C47890) * C4825 +
            ((C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                 C114 +
             (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C1880 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C1881 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C48006 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C1881 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C1880 -
           (((C4828 * C1358 + C47985 * C1368 + C4827 * C1345 + C4823 * C1362) *
                 C47890 +
             (C4828 * C1341 + C47985 * C1357 + C4827 * C1335 + C4823 * C1346) *
                 C114) *
                C47954 +
            ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                 C47890 +
             (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                 C114) *
                C4825) *
               C47970) *
              C47994 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C1880 -
           (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C1881 +
           (((C4827 * C1340 + C4823 * C1355 + C4828 * C6149 + C47985 * C6151) *
                 C114 +
             (C4827 * C1356 + C4823 * C1367 + C4828 * C6152 + C47985 * C6155) *
                 C47890) *
                C4825 +
            ((C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C114 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C3342 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C47935 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47733) *
              C47647 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C3342) *
               C47935 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C3342 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47733) *
              C47656 +
          (((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
             ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                C3342 -
            (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
             ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
                C47775) *
               C47935 +
           ((((C5767 + C5766) * C114 + (C5765 + C5764) * C47890) * C4825 +
             ((C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                  C114 +
              (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
             ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
                C3342) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47771 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47778 +
            (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                  C114 +
              (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                  C47890) *
                 C4825 +
             ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
                C3850) *
               C47935 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47778 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47771 -
            (((C7228 + C7229) * C47890 + (C7230 + C7231) * C114) * C47954 +
             ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                  C47890 +
              (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                  C114) *
                 C4825) *
                C3850) *
               C47733) *
              C2688 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47778 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47771 -
            (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
             ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
                C3850) *
               C47935 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47771 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47778 +
            (((C7231 + C7230) * C114 + (C7229 + C7228) * C47890) * C4825 +
             ((C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                  C114 +
              (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                  C47890) *
                 C47954) *
                C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C3342 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C48006 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47994 +
           ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                  C114 +
              (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                  C47890) *
                 C4825 +
             ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
                C3342 -
            (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
             ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                  C47890 +
              (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                  C114) *
                 C4825) *
                C47775) *
               C47967) *
              C2688 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C3342) *
               C48006 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C3342 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47994 +
           ((((C6505 + C6504) * C114 + (C6503 + C6502) * C47890) * C4825 +
             ((C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                  C114 +
              (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
             ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
                C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C3342 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C47670 * C48012 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C47775 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C3342) *
              C47670 * C48005 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C3342 -
           (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C47775) *
              C47670 * C47992 +
          ((((C5549 + C5548) * C114 + (C5547 + C5546) * C47890) * C4825 +
            ((C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
                 C114 +
             (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C48014 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C48011 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C48002 -
           (((C7370 + C7371) * C47890 + (C7372 + C7373) * C114) * C47954 +
            ((C4828 * C2474 + C47985 * C2479 + C4827 * C2070 + C4823 * C2080) *
                 C47890 +
             (C4828 * C2470 + C47985 * C2473 + C4827 * C2062 + C4823 * C2071) *
                 C114) *
                C4825) *
               C47983) *
              C47670 * C2688 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C48011 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C48014 -
           (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
            ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
               C48002 +
           (((C7373 + C7372) * C114 + (C7371 + C7370) * C47890) * C4825 +
            ((C4827 * C2060 + C4823 * C2067 + C4828 * C2472 + C47985 * C2477) *
                 C114 +
             (C4827 * C2066 + C4823 * C2078 + C4828 * C2478 + C47985 * C2481) *
                 C47890) *
                C47954) *
               C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47771 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47778 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C3850) *
              C47670 * C47647 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C47778 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47771 -
           (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
            ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
               C3850) *
              C47670 * C47656 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47771 -
           (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C47778 +
           (((C5265 + C5264) * C114 + (C5263 + C5262) * C47890) * C4825 +
            ((C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                 C114 +
             (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C3850) *
              C47670 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C3342 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C47670 * C48012 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C47775 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C3342) *
              C47670 * C48005 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C3342 -
           (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C47775) *
              C47670 * C47992 +
          ((((C5549 + C5548) * C114 + (C5547 + C5546) * C47890) * C4825 +
            ((C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
                 C114 +
             (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C3342 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C48006 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C3342) *
               C47994 +
           ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                  C114 +
              (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                  C47890) *
                 C4825 +
             ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
                C3342 -
            (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
             ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                  C47890 +
              (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                  C114) *
                 C4825) *
                C47775) *
               C47967) *
              C2688 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C3342) *
               C48006 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C3342 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47994 +
           ((((C6505 + C6504) * C114 + (C6503 + C6502) * C47890) * C4825 +
             ((C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                  C114 +
              (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
             ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
                C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C47935 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47733) *
              C695 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47733 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C47935) *
              C696 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C47935 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47733) *
              C697 +
          ((((C5407 + C5406) * C114 + (C5405 + C5404) * C47890) * C4825 +
            ((C4827 * C310 + C4823 * C329 + C4828 * C311 + C47985 * C330) *
                 C114 +
             (C4827 * C328 + C4823 * C340 + C4828 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C1468 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C1469 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C1470 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C47688 * C47977) *
              C47921 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C1469 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C1468 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C1470 +
           (((C6299 + C6298) * C114 + (C6297 + C6296) * C47890) * C4825 +
            ((C4827 * C1200 + C4823 * C1207 + C4828 * C1205 + C47985 * C1216) *
                 C114 +
             (C4827 * C1206 + C4823 * C1218 + C4828 * C1217 + C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47936 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C47935 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47936) *
               C47733) *
              C299 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47936) *
               C47935 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47936 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C47733) *
              C300 +
          (((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
             ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
                C47936 -
            (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
             ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
                C47775) *
               C47935 +
           ((((C5767 + C5766) * C114 + (C5765 + C5764) * C47890) * C4825 +
             ((C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                  C114 +
              (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
             ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
                C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47936 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C1468 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C47775 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47936) *
              C1469 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47936 -
           (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C47775) *
              C1470 +
          ((((C4827 * C1758 + C4823 * C1761 + C4828 * C6635 + C47985 * C6637) *
                 C114 +
             (C4827 * C1762 + C4823 * C1767 + C4828 * C6638 + C47985 * C6641) *
                 C47890) *
                C4825 +
            ((C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                 C114 +
             (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C6296 + C6297) * C47890 + (C6298 + C6299) * C114) * C47954 +
            ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                 C47890 +
             (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                 C114) *
                C4825) *
               C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C48006 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47994 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47967) *
              C299 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47994 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C48006 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47967) *
              C300 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C48006 -
           (((C4828 * C326 + C47985 * C339 + C4827 * C325 + C4823 * C338) *
                 C47890 +
             (C4828 * C309 + C47985 * C327 + C4827 * C308 + C4823 * C324) *
                 C114) *
                C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47994 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C47688 * C47670 * C108 -
          (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
           ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
              C47688 * C47670 * C109 +
          (((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
           ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
              C47688 * C47670 * C110 -
          (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
           ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
              C47688 * C47670 * C111 +
          (((C4877 + C4876) * C114 + (C4875 + C4874) * C47890) * C4825 +
           ((C4827 * C120 + C4823 * C133 + C4828 * C699 + C47985 * C700) *
                C114 +
            (C4827 * C132 + C4823 * C141 + C4828 * C701 + C47985 * C702) *
                C47890) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C48007 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47996 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C47670 * C299 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C47996 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C48007 -
           (((C5262 + C5263) * C47890 + (C5264 + C5265) * C114) * C47954 +
            ((C5257 + C5256) * C47890 + (C5255 + C5254) * C114) * C4825) *
               C47970) *
              C47670 * C300 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C48007 -
           (((C4828 * C982 + C47985 * C989 + C4827 * C528 + C4823 * C541) *
                 C47890 +
             (C4828 * C974 + C47985 * C983 + C4827 * C511 + C4823 * C527) *
                 C114) *
                C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C47996 +
           (((C5265 + C5264) * C114 + (C5263 + C5262) * C47890) * C4825 +
            ((C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                 C114 +
             (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C1127 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C1127 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C1126 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47967) *
              C47990 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C1127 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C47688 * C1194 -
          (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
           ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C47890 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C114) *
               C4825) *
              C47688 * C1195 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C114 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C47890) *
               C4825 +
           ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
              C47688 * C1196 -
          (((C4828 * C1215 + C47985 * C1222 + C4827 * C1208 + C4823 * C1219) *
                C47890 +
            (C4828 * C1204 + C47985 * C1214 + C4827 * C1201 + C4823 * C1209) *
                C114) *
               C47954 +
           ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C47890 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C114) *
               C4825) *
              C47688 * C1197 +
          (((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
                C114 +
            (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
                C47890) *
               C4825 +
           ((C4827 * C1204 + C4823 * C1214 + C4828 * C5996 + C47985 * C5999) *
                C114 +
            (C4827 * C1215 + C4823 * C1222 + C4828 * C6000 + C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C48007 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47996 +
           (((C4827 * C508 + C4823 * C521 + C4828 * C1336 + C47985 * C1348) *
                 C114 +
             (C4827 * C522 + C4823 * C538 + C4828 * C1347 + C47985 * C1363) *
                 C47890) *
                C4825 +
            ((C5254 + C5255) * C114 + (C5256 + C5257) * C47890) * C47954) *
               C47970) *
              C1126 +
          ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                 C114 +
             (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                 C47890) *
                C4825 +
            ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
               C47996 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C48007 -
           (((C4828 * C1358 + C47985 * C1368 + C4827 * C1345 + C4823 * C1362) *
                 C47890 +
             (C4828 * C1341 + C47985 * C1357 + C4827 * C1335 + C4823 * C1346) *
                 C114) *
                C47954 +
            ((C4828 * C1356 + C47985 * C1367 + C4827 * C1347 + C4823 * C1363) *
                 C47890 +
             (C4828 * C1340 + C47985 * C1355 + C4827 * C1336 + C4823 * C1348) *
                 C114) *
                C4825) *
               C47970) *
              C1127 +
          ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C48007 -
           (((C4828 * C1764 + C47985 * C1768 + C4827 * C1351 + C4823 * C1365) *
                 C47890 +
             (C4828 * C1759 + C47985 * C1763 + C4827 * C1338 + C4823 * C1352) *
                 C114) *
                C47954 +
            ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                 C47890 +
             (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                 C114) *
                C4825) *
               C47996 +
           (((C4827 * C1340 + C4823 * C1355 + C4828 * C6149 + C47985 * C6151) *
                 C114 +
             (C4827 * C1356 + C4823 * C1367 + C4828 * C6152 + C47985 * C6155) *
                 C47890) *
                C4825 +
            ((C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C114 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47936 -
           (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
            ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                 C47890 +
             (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                 C114) *
                C4825) *
               C47775) *
              C47670 * C695 +
          ((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
            ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
               C47775 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47936) *
              C47670 * C696 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47936 -
           (((C5546 + C5547) * C47890 + (C5548 + C5549) * C114) * C47954 +
            ((C5261 + C5260) * C47890 + (C5259 + C5258) * C114) * C4825) *
               C47775) *
              C47670 * C697 +
          ((((C5549 + C5548) * C114 + (C5547 + C5546) * C47890) * C4825 +
            ((C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
                 C114 +
             (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
            ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
               C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                  C114 +
              (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                  C47890) *
                 C4825 +
             ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
                C47936 -
            (((C5250 + C5251) * C47890 + (C5252 + C5253) * C114) * C47954 +
             ((C4828 * C977 + C47985 * C986 + C4827 * C519 + C4823 * C537) *
                  C47890 +
              (C4828 * C971 + C47985 * C976 + C4827 * C507 + C4823 * C520) *
                  C114) *
                 C4825) *
                C47775) *
               C1126 +
           ((((C4827 * C971 + C4823 * C976 + C4828 * C1339 + C47985 * C1354) *
                  C114 +
              (C4827 * C977 + C4823 * C986 + C4828 * C1353 + C47985 * C1366) *
                  C47890) *
                 C4825 +
             ((C5760 + C5761) * C114 + (C5762 + C5763) * C47890) * C47954) *
                C47775 -
            (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
             ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                  C47890 +
              (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                  C114) *
                 C4825) *
                C47936) *
               C1127 +
           ((((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                  C114 +
              (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                  C47890) *
                 C4825 +
             ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
                C47936 -
            (((C6502 + C6503) * C47890 + (C6504 + C6505) * C114) * C47954 +
             ((C4828 * C1762 + C47985 * C1767 + C4827 * C1353 + C4823 * C1366) *
                  C47890 +
              (C4828 * C1758 + C47985 * C1761 + C4827 * C1339 + C4823 * C1354) *
                  C114) *
                 C4825) *
                C47775) *
               C47967) *
              C47921 +
          (((((C5253 + C5252) * C114 + (C5251 + C5250) * C47890) * C4825 +
             ((C5258 + C5259) * C114 + (C5260 + C5261) * C47890) * C47954) *
                C47775 -
            (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
             ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
                C47936) *
               C1126 +
           ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
             ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
                C47936 -
            (((C5764 + C5765) * C47890 + (C5766 + C5767) * C114) * C47954 +
             ((C5763 + C5762) * C47890 + (C5761 + C5760) * C114) * C4825) *
                C47775) *
               C1127 +
           ((((C6505 + C6504) * C114 + (C6503 + C6502) * C47890) * C4825 +
             ((C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                  C114 +
              (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
             ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
                C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C47688 * C47670 * C108 -
          (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
           ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
              C47688 * C47670 * C109 +
          (((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
           ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
              C47688 * C47670 * C110 -
          (((C4874 + C4875) * C47890 + (C4876 + C4877) * C114) * C47954 +
           ((C4873 + C4872) * C47890 + (C4871 + C4870) * C114) * C4825) *
              C47688 * C47670 * C111 +
          (((C4877 + C4876) * C114 + (C4875 + C4874) * C47890) * C4825 +
           ((C4827 * C120 + C4823 * C133 + C4828 * C699 + C47985 * C700) *
                C114 +
            (C4827 * C132 + C4823 * C141 + C4828 * C701 + C47985 * C702) *
                C47890) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C48006 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C47994 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47967) *
              C299 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C47994 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C48006 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47967) *
              C300 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C48006 -
           (((C4828 * C326 + C47985 * C339 + C4827 * C325 + C4823 * C338) *
                 C47890 +
             (C4828 * C309 + C47985 * C327 + C4827 * C308 + C4823 * C324) *
                 C114) *
                C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C47994 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C114 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C47890) *
                C4825 +
            ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
            ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C47890 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C114) *
                C4825) *
               C47688 * C1127 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C114 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C47890) *
                C4825 +
            ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C5059 + C5058) * C114 + (C5057 + C5056) * C47890) * C4825 +
            ((C5064 + C5065) * C114 + (C5066 + C5067) * C47890) * C47954) *
               C47688 * C1127 -
           (((C4866 + C4867) * C47890 + (C4868 + C4869) * C114) * C47954 +
            ((C4865 + C4864) * C47890 + (C4863 + C4862) * C114) * C4825) *
               C47688 * C1126 -
           (((C5068 + C5069) * C47890 + (C5070 + C5071) * C114) * C47954 +
            ((C5063 + C5062) * C47890 + (C5061 + C5060) * C114) * C4825) *
               C47688 * C47967) *
              C47990 +
          ((((C4869 + C4868) * C114 + (C4867 + C4866) * C47890) * C4825 +
            ((C4870 + C4871) * C114 + (C4872 + C4873) * C47890) * C47954) *
               C47688 * C1126 -
           (((C5404 + C5405) * C47890 + (C5406 + C5407) * C114) * C47954 +
            ((C5067 + C5066) * C47890 + (C5065 + C5064) * C114) * C4825) *
               C47688 * C1127 +
           (((C5071 + C5070) * C114 + (C5069 + C5068) * C47890) * C4825 +
            ((C4827 * C309 + C4823 * C327 + C4828 * C1474 + C47985 * C1475) *
                 C114 +
             (C4827 * C326 + C4823 * C339 + C4828 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C114 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C47890) *
               C4825 +
           ((C4862 + C4863) * C114 + (C4864 + C4865) * C47890) * C47954) *
              C47688 * C1194 -
          (((C5056 + C5057) * C47890 + (C5058 + C5059) * C114) * C47954 +
           ((C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C47890 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C114) *
               C4825) *
              C47688 * C1195 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C114 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C47890) *
               C4825 +
           ((C5060 + C5061) * C114 + (C5062 + C5063) * C47890) * C47954) *
              C47688 * C1196 -
          (((C4828 * C1215 + C47985 * C1222 + C4827 * C1208 + C4823 * C1219) *
                C47890 +
            (C4828 * C1204 + C47985 * C1214 + C4827 * C1201 + C4823 * C1209) *
                C114) *
               C47954 +
           ((C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C47890 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C114) *
               C4825) *
              C47688 * C1197 +
          (((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
                C114 +
            (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
                C47890) *
               C4825 +
           ((C4827 * C1204 + C4823 * C1214 + C4828 * C5996 + C47985 * C5999) *
                C114 +
            (C4827 * C1215 + C4823 * C1222 + C4828 * C6000 + C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C47729 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C47736 +
                   (((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47688 * C2948) *
                      C47647 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C47736 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C47729 -
                   ((C10736 + C10737 + C10738 + C10739) * C47954 +
                    (C10731 + C10730 + C10729 + C10728) * C4825) *
                       C47688 * C2948) *
                      C47656 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47688 * C47729 -
                   ((C11044 + C11045 + C11046 + C11047) * C47954 +
                    (C10735 + C10734 + C10733 + C10732) * C4825) *
                       C47688 * C47736 +
                   ((C10739 + C10738 + C10737 + C10736) * C4825 +
                    (C378 * C10559 + C377 * C10557 +
                     (C113 * C1640 + C47873 * C1641) * C10560 +
                     (C113 * C1642 + C47873 * C1643) * C47987) *
                        C47954) *
                       C47688 * C2948) *
                      C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47936 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C47729 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47936) *
                       C47736 +
                   ((((C113 * C305 + C47873 * C318) * C10559 +
                      (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                      C11783 * C47987) *
                         C4825 +
                     (C10728 + C10729 + C10730 + C10731) * C47954) *
                        C47936 -
                    ((C12122 + C12123 + C12124 + C12125) * C47954 +
                     (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                      C11782 * C10559) *
                         C4825) *
                        C47775) *
                       C2948) *
                      C2688 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47936) *
                       C47729 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47936 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47736 +
                   (((C12125 + C12124 + C12123 + C12122) * C4825 +
                     (C1654 * C10559 + C1653 * C10557 +
                      (C113 * C1342 + C47873 * C1359) * C10560 +
                      (C113 * C1360 + C47873 * C1369) * C47987) *
                         C47954) *
                        C47775 -
                    ((C10736 + C10737 + C10738 + C10739) * C47954 +
                     (C10731 + C10730 + C10729 + C10728) * C4825) *
                        C47936) *
                       C2948) *
                      C47653)) /
                (p * q * std::sqrt(p + q));
    d2ee[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C48013 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C48009 +
                   (((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47688 * C47999 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    (C12261 * C47987 + C12260 * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C47688 * C47977) *
                      C2688 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C48009 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C48013 -
                   ((C10736 + C10737 + C10738 + C10739) * C47954 +
                    (C10731 + C10730 + C10729 + C10728) * C4825) *
                       C47688 * C47999 +
                   ((C11923 + C11922 + C11927 + C11926) * C4825 +
                    (C1488 * C10559 + C1487 * C10557 +
                     (C113 * C1760 + C47873 * C1765) * C10560 +
                     (C113 * C1766 + C47873 * C1769) * C47987) *
                        C47954) *
                       C47688 * C47977) *
                      C47653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C2580 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C47733) *
                      C48012 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C47733 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C2580) *
                      C48005 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47688 * C2580 -
                   ((C11044 + C11045 + C11046 + C11047) * C47954 +
                    (C10735 + C10734 + C10733 + C10732) * C4825) *
                       C47688 * C47733) *
                      C47992 +
                  (((C11047 + C11046 + C11045 + C11044) * C4825 +
                    (C710 * C10559 + C709 * C10557 +
                     (C113 * C975 + C47873 * C984) * C10560 +
                     (C113 * C985 + C47873 * C990) * C47987) *
                        C47954) *
                       C47688 * C47733 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C47688 * C2580) *
                      C47971)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C48007 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47996 +
                    ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                      C12657 * C47987) *
                         C4825 +
                     (C10898 + C10899 + C10900 + C10901) * C47954) *
                        C47970) *
                       C2580 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47996 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C48007 -
                    ((C12864 + C12865 + C12860 + C12861) * C47954 +
                     (C13134 * C47987 + C13135 * C10560 + C11781 * C10557 +
                      C11780 * C10559) *
                         C4825) *
                        C47970) *
                       C47733) *
                      C2688 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47996 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C48007 -
                    ((C10906 + C10907 + C10908 + C10909) * C47954 +
                     (C10901 + C10900 + C10899 + C10898) * C4825) *
                        C47970) *
                       C2580 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C48007 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47996 +
                    ((C12861 + C12860 + C12865 + C12864) * C4825 +
                     (C2244 * C10559 + C2243 * C10557 +
                      (C113 * C2472 + C47873 * C2477) * C10560 +
                      (C113 * C2478 + C47873 * C2481) * C47987) *
                         C47954) *
                        C47970) *
                       C47733) *
                      C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47936 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C2580 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47936) *
                       C47733) *
                      C47647 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47936) *
                       C2580 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47936 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47733) *
                      C47656 +
                  ((((C10569 + C10568 + C10567 + C10566) * C4825 +
                     (C10570 + C10571 + C10572 + C10573) * C47954) *
                        C47936 -
                    ((C11178 + C11179 + C11180 + C11181) * C47954 +
                     (C10905 + C10904 + C10903 + C10902) * C4825) *
                        C47775) *
                       C2580 +
                   (((C11387 + C11386 + C11385 + C11384) * C4825 +
                     (C1009 * C10559 + C1008 * C10557 +
                      (C113 * C2230 + C47873 * C2231) * C10560 +
                      (C113 * C2232 + C47873 * C2233) * C47987) *
                         C47954) *
                        C47775 -
                    ((C11044 + C11045 + C11046 + C11047) * C47954 +
                     (C10735 + C10734 + C10733 + C10732) * C4825) *
                        C47936) *
                       C47733) *
                      C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C2580 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C47733) *
                      C48012 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C47733 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C2580) *
                      C48005 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47688 * C2580 -
                   ((C11044 + C11045 + C11046 + C11047) * C47954 +
                    (C10735 + C10734 + C10733 + C10732) * C4825) *
                       C47688 * C47733) *
                      C47992 +
                  (((C11047 + C11046 + C11045 + C11044) * C4825 +
                    (C710 * C10559 + C709 * C10557 +
                     (C113 * C975 + C47873 * C984) * C10560 +
                     (C113 * C985 + C47873 * C990) * C47987) *
                        C47954) *
                       C47688 * C47733 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C47688 * C2580) *
                      C47971)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C48013 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C48009 +
                   (((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47688 * C47999 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    (C12261 * C47987 + C12260 * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C47688 * C47977) *
                      C2688 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C48009 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C48013 -
                   ((C10736 + C10737 + C10738 + C10739) * C47954 +
                    (C10731 + C10730 + C10729 + C10728) * C4825) *
                       C47688 * C47999 +
                   ((C11923 + C11922 + C11927 + C11926) * C4825 +
                    (C1488 * C10559 + C1487 * C10557 +
                     (C113 * C1760 + C47873 * C1765) * C10560 +
                     (C113 * C1766 + C47873 * C1769) * C47987) *
                        C47954) *
                       C47688 * C47977) *
                      C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C3342 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C47729 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C3342) *
                       C47736 +
                   ((((C113 * C305 + C47873 * C318) * C10559 +
                      (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                      C11783 * C47987) *
                         C4825 +
                     (C10728 + C10729 + C10730 + C10731) * C47954) *
                        C3342 -
                    ((C12122 + C12123 + C12124 + C12125) * C47954 +
                     (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                      C11782 * C10559) *
                         C4825) *
                        C47775) *
                       C2948) *
                      C47921 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C3342) *
                       C47729 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C3342 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47736 +
                   (((C12125 + C12124 + C12123 + C12122) * C4825 +
                     (C1654 * C10559 + C1653 * C10557 +
                      (C113 * C1342 + C47873 * C1359) * C10560 +
                      (C113 * C1360 + C47873 * C1369) * C47987) *
                         C47954) *
                        C47775 -
                    ((C10736 + C10737 + C10738 + C10739) * C47954 +
                     (C10731 + C10730 + C10729 + C10728) * C4825) *
                        C3342) *
                       C2948) *
                      C47653)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47771 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47778 +
                   ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                     C12657 * C47987) *
                        C4825 +
                    (C10898 + C10899 + C10900 + C10901) * C47954) *
                       C3850) *
                      C47729 +
                  (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                     C11781 * C47987) *
                        C4825 +
                    (C11380 + C11381 + C11382 + C11383) * C47954) *
                       C47778 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47771 -
                   ((C12864 + C12865 + C12860 + C12861) * C47954 +
                    (C13134 * C47987 + C13135 * C10560 + C11781 * C10557 +
                     C11780 * C10559) *
                        C4825) *
                       C3850) *
                      C47736 +
                  ((((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47771 -
                   ((C12122 + C12123 + C12124 + C12125) * C47954 +
                    (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                     C11782 * C10559) *
                        C4825) *
                       C47778 +
                   ((C11787 * C10559 + C11786 * C10557 +
                     (C113 * C7503 + C47873 * C7505) * C10560 +
                     (C113 * C7506 + C47873 * C7509) * C47987) *
                        C4825 +
                    (C11785 * C10559 + C11784 * C10557 +
                     (C113 * C7504 + C47873 * C7507) * C10560 +
                     (C113 * C7508 + C47873 * C7510) * C47987) *
                        C47954) *
                       C3850) *
                      C2948) *
                 C47642) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C3342 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C48013 +
                  (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                     C11781 * C47987) *
                        C4825 +
                    (C11380 + C11381 + C11382 + C11383) * C47954) *
                       C47775 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C3342) *
                      C48009 +
                  ((((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C3342 -
                   ((C12122 + C12123 + C12124 + C12125) * C47954 +
                    (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                     C11782 * C10559) *
                        C4825) *
                       C47775) *
                      C47999 +
                  (((C12260 * C10559 + C12261 * C10557 +
                     (C113 * C6149 + C47873 * C6151) * C10560 +
                     (C113 * C6152 + C47873 * C6155) * C47987) *
                        C4825 +
                    (C11925 * C10559 + C11924 * C10557 +
                     (C113 * C6150 + C47873 * C6153) * C10560 +
                     (C113 * C6154 + C47873 * C6156) * C47987) *
                        C47954) *
                       C47775 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    (C12261 * C47987 + C12260 * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C3342) *
                      C47977) *
                 C47642) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C3342 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C2580 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C3342) *
                       C47733) *
                      C48003 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C3342) *
                       C2580 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C3342 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47733) *
                      C47990 +
                  ((((C10569 + C10568 + C10567 + C10566) * C4825 +
                     (C10570 + C10571 + C10572 + C10573) * C47954) *
                        C3342 -
                    ((C11178 + C11179 + C11180 + C11181) * C47954 +
                     (C10905 + C10904 + C10903 + C10902) * C4825) *
                        C47775) *
                       C2580 +
                   (((C11387 + C11386 + C11385 + C11384) * C4825 +
                     (C1009 * C10559 + C1008 * C10557 +
                      (C113 * C2230 + C47873 * C2231) * C10560 +
                      (C113 * C2232 + C47873 * C2233) * C47987) *
                         C47954) *
                        C47775 -
                    ((C11044 + C11045 + C11046 + C11047) * C47954 +
                     (C10735 + C10734 + C10733 + C10732) * C4825) *
                        C3342) *
                       C47733) *
                      C47961)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C48014 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C48011 +
                   ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                     C12657 * C47987) *
                        C4825 +
                    (C10898 + C10899 + C10900 + C10901) * C47954) *
                       C48002 -
                   ((C12996 + C12997 + C12998 + C12999) * C47954 +
                    (C12660 * C47987 + C12661 * C10560 + C12657 * C10557 +
                     C12656 * C10559) *
                        C4825) *
                       C47983) *
                      C2580 +
                  (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                     C11781 * C47987) *
                        C4825 +
                    (C11380 + C11381 + C11382 + C11383) * C47954) *
                       C48011 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C48014 -
                   ((C12864 + C12865 + C12860 + C12861) * C47954 +
                    (C13134 * C47987 + C13135 * C10560 + C11781 * C10557 +
                     C11780 * C10559) *
                        C4825) *
                       C48002 +
                   ((C13135 * C10559 + C13134 * C10557 +
                     (C113 * C7017 + C47873 * C7019) * C10560 +
                     (C113 * C7020 + C47873 * C7023) * C47987) *
                        C4825 +
                    (C12863 * C10559 + C12862 * C10557 +
                     (C113 * C7018 + C47873 * C7021) * C10560 +
                     (C113 * C7022 + C47873 * C7024) * C47987) *
                        C47954) *
                       C47983) *
                      C47733) *
                 C47642) /
                    (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47771 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47778 +
                    ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                      C12657 * C47987) *
                         C4825 +
                     (C10898 + C10899 + C10900 + C10901) * C47954) *
                        C3850) *
                       C2580 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47778 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47771 -
                    ((C12864 + C12865 + C12860 + C12861) * C47954 +
                     (C13134 * C47987 + C13135 * C10560 + C11781 * C10557 +
                      C11780 * C10559) *
                         C4825) *
                        C3850) *
                       C47733) *
                      C47921 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47778 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47771 -
                    ((C10906 + C10907 + C10908 + C10909) * C47954 +
                     (C10901 + C10900 + C10899 + C10898) * C4825) *
                        C3850) *
                       C2580 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47771 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47778 +
                    ((C12861 + C12860 + C12865 + C12864) * C4825 +
                     (C2244 * C10559 + C2243 * C10557 +
                      (C113 * C2472 + C47873 * C2477) * C10560 +
                      (C113 * C2478 + C47873 * C2481) * C47987) *
                         C47954) *
                        C3850) *
                       C47733) *
                      C47653)) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C3342 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C2580 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C3342) *
                       C47733) *
                      C48003 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C3342) *
                       C2580 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C3342 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47733) *
                      C47990 +
                  ((((C10569 + C10568 + C10567 + C10566) * C4825 +
                     (C10570 + C10571 + C10572 + C10573) * C47954) *
                        C3342 -
                    ((C11178 + C11179 + C11180 + C11181) * C47954 +
                     (C10905 + C10904 + C10903 + C10902) * C4825) *
                        C47775) *
                       C2580 +
                   (((C11387 + C11386 + C11385 + C11384) * C4825 +
                     (C1009 * C10559 + C1008 * C10557 +
                      (C113 * C2230 + C47873 * C2231) * C10560 +
                      (C113 * C2232 + C47873 * C2233) * C47987) *
                         C47954) *
                        C47775 -
                    ((C11044 + C11045 + C11046 + C11047) * C47954 +
                     (C10735 + C10734 + C10733 + C10732) * C4825) *
                        C3342) *
                       C47733) *
                      C47961)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C3342 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C48013 +
                  (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                     C11781 * C47987) *
                        C4825 +
                    (C11380 + C11381 + C11382 + C11383) * C47954) *
                       C47775 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C3342) *
                      C48009 +
                  ((((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C3342 -
                   ((C12122 + C12123 + C12124 + C12125) * C47954 +
                    (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                     C11782 * C10559) *
                        C4825) *
                       C47775) *
                      C47999 +
                  (((C12260 * C10559 + C12261 * C10557 +
                     (C113 * C6149 + C47873 * C6151) * C10560 +
                     (C113 * C6152 + C47873 * C6155) * C47987) *
                        C4825 +
                    (C11925 * C10559 + C11924 * C10557 +
                     (C113 * C6150 + C47873 * C6153) * C10560 +
                     (C113 * C6154 + C47873 * C6156) * C47987) *
                        C47954) *
                       C47775 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    (C12261 * C47987 + C12260 * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C3342) *
                      C47977) *
                 C47642) /
                    (p * q * std::sqrt(p + q));
    d2ee[60] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C1468 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C1469 +
                   (((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47688 * C1470 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    ((C113 * C1762 + C47873 * C1767) * C47987 +
                     (C113 * C1758 + C47873 * C1761) * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C47688 * C47977) *
                      C47921 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C1469 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C1468 -
                   ((C10736 + C10737 + C10738 + C10739) * C47954 +
                    (C10731 + C10730 + C10729 + C10728) * C4825) *
                       C47688 * C1470 +
                   ((C11923 + C11922 + C11927 + C11926) * C4825 +
                    (C1488 * C10559 + C1487 * C10557 +
                     (C113 * C1760 + C47873 * C1765) * C10560 +
                     (C113 * C1766 + C47873 * C1769) * C47987) *
                        C47954) *
                       C47688 * C47977) *
                      C47653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C47935 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    ((C113 * C977 + C47873 * C986) * C47987 +
                     (C113 * C971 + C47873 * C976) * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C47733) *
                      C695 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C47733 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C47935) *
                      C696 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47688 * C47935 -
                   ((C11044 + C11045 + C11046 + C11047) * C47954 +
                    (C10735 + C10734 + C10733 + C10732) * C4825) *
                       C47688 * C47733) *
                      C697 +
                  (((C11047 + C11046 + C11045 + C11044) * C4825 +
                    (C710 * C10559 + C709 * C10557 +
                     (C113 * C975 + C47873 * C984) * C10560 +
                     (C113 * C985 + C47873 * C990) * C47987) *
                        C47954) *
                       C47688 * C47733 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C47688 * C47935) *
                      C47971)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C1880 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C1881 +
                    ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                      C12657 * C47987) *
                         C4825 +
                     (C10898 + C10899 + C10900 + C10901) * C47954) *
                        C47970) *
                       C47935 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C1881 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C1880 -
                    ((C12864 + C12865 + C12860 + C12861) * C47954 +
                     ((C113 * C2474 + C47873 * C2479) * C47987 +
                      (C113 * C2470 + C47873 * C2473) * C10560 +
                      C11781 * C10557 + C11780 * C10559) *
                         C4825) *
                        C47970) *
                       C47733) *
                      C47921 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C1881 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C1880 -
                    ((C10906 + C10907 + C10908 + C10909) * C47954 +
                     (C10901 + C10900 + C10899 + C10898) * C4825) *
                        C47970) *
                       C47935 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C1880 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C1881 +
                    ((C12861 + C12860 + C12865 + C12864) * C4825 +
                     (C2244 * C10559 + C2243 * C10557 +
                      (C113 * C2472 + C47873 * C2477) * C10560 +
                      (C113 * C2478 + C47873 * C2481) * C47987) *
                         C47954) *
                        C47970) *
                       C47733) *
                      C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47936 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C1468 +
                  (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                     C11781 * C47987) *
                        C4825 +
                    (C11380 + C11381 + C11382 + C11383) * C47954) *
                       C47775 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47936) *
                      C1469 +
                  ((((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47936 -
                   ((C12122 + C12123 + C12124 + C12125) * C47954 +
                    (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                     C11782 * C10559) *
                        C4825) *
                       C47775) *
                      C1470 +
                  (((C12260 * C10559 + C12261 * C10557 +
                     (C113 * C6149 + C47873 * C6151) * C10560 +
                     (C113 * C6152 + C47873 * C6155) * C47987) *
                        C4825 +
                    (C11925 * C10559 + C11924 * C10557 +
                     (C113 * C6150 + C47873 * C6153) * C10560 +
                     (C113 * C6154 + C47873 * C6156) * C47987) *
                        C47954) *
                       C47775 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    (C12261 * C47987 + C12260 * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C47936) *
                      C47977) *
                 C47642) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47936 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C47935 +
                   (((C11388 * C10559 + C11389 * C10557 +
                      (C113 * C1336 + C47873 * C1348) * C10560 +
                      (C113 * C1347 + C47873 * C1363) * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47936) *
                       C47733) *
                      C299 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47936) *
                       C47935 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47936 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47733) *
                      C300 +
                  ((((C10569 + C10568 + C10567 + C10566) * C4825 +
                     (C10570 + C10571 + C10572 + C10573) * C47954) *
                        C47936 -
                    ((C11178 + C11179 + C11180 + C11181) * C47954 +
                     (C10905 + C10904 + C10903 + C10902) * C4825) *
                        C47775) *
                       C47935 +
                   (((C11387 + C11386 + C11385 + C11384) * C4825 +
                     (C1009 * C10559 + C1008 * C10557 +
                      (C113 * C2230 + C47873 * C2231) * C10560 +
                      (C113 * C2232 + C47873 * C2233) * C47987) *
                         C47954) *
                        C47775 -
                    ((C11044 + C11045 + C11046 + C11047) * C47954 +
                     (C10735 + C10734 + C10733 + C10732) * C4825) *
                        C47936) *
                       C47733) *
                      C47961)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C2348 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C2349 +
                   ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                     C12657 * C47987) *
                        C4825 +
                    (C10898 + C10899 + C10900 + C10901) * C47954) *
                       C2350 -
                   ((C12996 + C12997 + C12998 + C12999) * C47954 +
                    (C12660 * C47987 + C12661 * C10560 + C12657 * C10557 +
                     C12656 * C10559) *
                        C4825) *
                       C47983) *
                      C47935 +
                  (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                     C11781 * C47987) *
                        C4825 +
                    (C11380 + C11381 + C11382 + C11383) * C47954) *
                       C2349 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C2348 -
                   ((C12864 + C12865 + C12860 + C12861) * C47954 +
                    (C13134 * C47987 + C13135 * C10560 + C11781 * C10557 +
                     C11780 * C10559) *
                        C4825) *
                       C2350 +
                   ((C13135 * C10559 + C13134 * C10557 +
                     (C113 * C7017 + C47873 * C7019) * C10560 +
                     (C113 * C7020 + C47873 * C7023) * C47987) *
                        C4825 +
                    (C12863 * C10559 + C12862 * C10557 +
                     (C113 * C7018 + C47873 * C7021) * C10560 +
                     (C113 * C7022 + C47873 * C7024) * C47987) *
                        C47954) *
                       C47983) *
                      C47733) *
                 C47642) /
                    (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47873 * C122) * C10559 +
                (C113 * C123 + C47873 * C136) * C10557 +
                (C113 * C507 + C47873 * C520) * C10560 +
                (C113 * C519 + C47873 * C537) * C47987) *
                   C4825 +
               (C10562 + C10563 + C10564 + C10565) * C47954) *
                  C47688 * C47670 * C108 -
              ((C10566 + C10567 + C10568 + C10569) * C47954 +
               (C10565 + C10564 + C10563 + C10562) * C4825) *
                  C47688 * C47670 * C109 +
              ((C10569 + C10568 + C10567 + C10566) * C4825 +
               (C10570 + C10571 + C10572 + C10573) * C47954) *
                  C47688 * C47670 * C110 -
              ((C10574 + C10575 + C10576 + C10577) * C47954 +
               (C10573 + C10572 + C10571 + C10570) * C4825) *
                  C47688 * C47670 * C111 +
              ((C10577 + C10576 + C10575 + C10574) * C4825 +
               (C173 * C10559 + C172 * C10557 +
                (C113 * C812 + C47873 * C813) * C10560 +
                (C113 * C814 + C47873 * C815) * C47987) *
                   C47954) *
                  C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C47873 * C122) * C10559 +
                 (C113 * C123 + C47873 * C136) * C10557 +
                 (C113 * C507 + C47873 * C520) * C10560 +
                 (C113 * C519 + C47873 * C537) * C47987) *
                    C4825 +
                (C10562 + C10563 + C10564 + C10565) * C47954) *
                   C47688 * C48006 -
               ((C10724 + C10725 + C10726 + C10727) * C47954 +
                ((C113 * C977 + C47873 * C986) * C47987 +
                 (C113 * C971 + C47873 * C976) * C10560 +
                 (C113 * C316 + C47873 * C334) * C10557 +
                 (C113 * C304 + C47873 * C317) * C10559) *
                    C4825) *
                   C47688 * C47994 +
               (((C113 * C305 + C47873 * C318) * C10559 +
                 (C113 * C319 + C47873 * C335) * C10557 +
                 (C113 * C1339 + C47873 * C1354) * C10560 +
                 (C113 * C1353 + C47873 * C1366) * C47987) *
                    C4825 +
                (C10728 + C10729 + C10730 + C10731) * C47954) *
                   C47688 * C47967) *
                  C299 +
              (((C10727 + C10726 + C10725 + C10724) * C4825 +
                (C10732 + C10733 + C10734 + C10735) * C47954) *
                   C47688 * C47994 -
               ((C10566 + C10567 + C10568 + C10569) * C47954 +
                (C10565 + C10564 + C10563 + C10562) * C4825) *
                   C47688 * C48006 -
               ((C10736 + C10737 + C10738 + C10739) * C47954 +
                (C10731 + C10730 + C10729 + C10728) * C4825) *
                   C47688 * C47967) *
                  C300 +
              (((C10569 + C10568 + C10567 + C10566) * C4825 +
                (C10570 + C10571 + C10572 + C10573) * C47954) *
                   C47688 * C48006 -
               ((C1008 * C47987 + C1009 * C10560 + C376 * C10557 +
                 C375 * C10559) *
                    C47954 +
                (C10735 + C10734 + C10733 + C10732) * C4825) *
                   C47688 * C47994 +
               ((C10739 + C10738 + C10737 + C10736) * C4825 +
                (C378 * C10559 + C377 * C10557 +
                 (C113 * C1640 + C47873 * C1641) * C10560 +
                 (C113 * C1642 + C47873 * C1643) * C47987) *
                    C47954) *
                   C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C48007 -
           ((C10890 + C10891 + C10892 + C10893) * C47954 +
            (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
             C10910 * C10559) *
                C4825) *
               C47996 +
           ((C10913 * C10559 + C10912 * C10557 +
             (C113 * C2062 + C47873 * C2071) * C10560 +
             (C113 * C2070 + C47873 * C2080) * C47987) *
                C4825 +
            (C10898 + C10899 + C10900 + C10901) * C47954) *
               C47970) *
              C47670 * C299 +
          (((C10893 + C10892 + C10891 + C10890) * C4825 +
            (C10902 + C10903 + C10904 + C10905) * C47954) *
               C47996 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C48007 -
           ((C10906 + C10907 + C10908 + C10909) * C47954 +
            (C10901 + C10900 + C10899 + C10898) * C4825) *
               C47970) *
              C47670 * C300 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C48007 -
           ((C580 * C47987 + C581 * C10560 + C579 * C10557 + C578 * C10559) *
                C47954 +
            (C10905 + C10904 + C10903 + C10902) * C4825) *
               C47996 +
           ((C10909 + C10908 + C10907 + C10906) * C4825 +
            (C581 * C10559 + C580 * C10557 +
             (C113 * C2352 + C47873 * C2353) * C10560 +
             (C113 * C2354 + C47873 * C2355) * C47987) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C47688 * C1126 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 +
             (C113 * C1339 + C47873 * C1354) * C10560 +
             (C113 * C1353 + C47873 * C1366) * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C10727 + C10726 + C10725 + C10724) * C4825 +
            (C10732 + C10733 + C10734 + C10735) * C47954) *
               C47688 * C1127 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C47688 * C1126 -
           ((C10736 + C10737 + C10738 + C10739) * C47954 +
            (C10731 + C10730 + C10729 + C10728) * C4825) *
               C47688 * C47967) *
              C47990 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C47688 * C1126 -
           ((C11044 + C11045 + C11046 + C11047) * C47954 +
            (C10735 + C10734 + C10733 + C10732) * C4825) *
               C47688 * C1127 +
           ((C10739 + C10738 + C10737 + C10736) * C4825 +
            (C378 * C10559 + C377 * C10557 +
             (C113 * C1640 + C47873 * C1641) * C10560 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
            C10911 * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C47688 * C1194 -
          ((C10724 + C10725 + C10726 + C10727) * C47954 +
           (C11389 * C47987 + C11388 * C10560 +
            (C113 * C316 + C47873 * C334) * C10557 +
            (C113 * C304 + C47873 * C317) * C10559) *
               C4825) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C10559 +
            (C113 * C319 + C47873 * C335) * C10557 +
            (C113 * C1339 + C47873 * C1354) * C10560 +
            (C113 * C1353 + C47873 * C1366) * C47987) *
               C4825 +
           (C10728 + C10729 + C10730 + C10731) * C47954) *
              C47688 * C1196 -
          (((C113 * C1764 + C47873 * C1768) * C47987 +
            (C113 * C1759 + C47873 * C1763) * C10560 + C1489 * C10557 +
            C1490 * C10559) *
               C47954 +
           ((C113 * C1762 + C47873 * C1767) * C47987 +
            (C113 * C1758 + C47873 * C1761) * C10560 +
            (C113 * C1210 + C47873 * C1220) * C10557 +
            (C113 * C1202 + C47873 * C1211) * C10559) *
               C4825) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C10559 +
            (C113 * C1213 + C47873 * C1221) * C10557 +
            (C113 * C6635 + C47873 * C6637) * C10560 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C4825 +
           ((C113 * C1204 + C47873 * C1214) * C10559 +
            (C113 * C1215 + C47873 * C1222) * C10557 +
            (C113 * C6636 + C47873 * C6639) * C10560 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C48007 -
           ((C10890 + C10891 + C10892 + C10893) * C47954 +
            (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
             C10910 * C10559) *
                C4825) *
               C47996 +
           ((C10913 * C10559 + C10912 * C10557 +
             (C113 * C2062 + C47873 * C2071) * C10560 +
             (C113 * C2070 + C47873 * C2080) * C47987) *
                C4825 +
            (C10898 + C10899 + C10900 + C10901) * C47954) *
               C47970) *
              C1126 +
          (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
             C11781 * C47987) *
                C4825 +
            (C11380 + C11381 + C11382 + C11383) * C47954) *
               C47996 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C48007 -
           (((C113 * C2476 + C47873 * C2480) * C47987 +
             (C113 * C2471 + C47873 * C2475) * C10560 + C2245 * C10557 +
             C2246 * C10559) *
                C47954 +
            ((C113 * C2474 + C47873 * C2479) * C47987 +
             (C113 * C2470 + C47873 * C2473) * C10560 + C11781 * C10557 +
             C11780 * C10559) *
                C4825) *
               C47970) *
              C1127 +
          ((((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
             C11783 * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C48007 -
           ((C11784 * C47987 + C11785 * C10560 + C1655 * C10557 +
             C1656 * C10559) *
                C47954 +
            (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
             C11782 * C10559) *
                C4825) *
               C47996 +
           ((C11787 * C10559 + C11786 * C10557 +
             (C113 * C7503 + C47873 * C7505) * C10560 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C4825 +
            (C11785 * C10559 + C11784 * C10557 +
             (C113 * C7504 + C47873 * C7507) * C10560 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C113 * C115 + C47873 * C122) * C10559 +
                                 (C113 * C123 + C47873 * C136) * C10557 +
                                 C10910 * C10560 + C10911 * C47987) *
                                    C4825 +
                                (C10562 + C10563 + C10564 + C10565) * C47954) *
                                   C1880 -
                               ((C10890 + C10891 + C10892 + C10893) * C47954 +
                                (C10912 * C47987 + C10913 * C10560 +
                                 C10911 * C10557 + C10910 * C10559) *
                                    C4825) *
                                   C1881 +
                               ((C10913 * C10559 + C10912 * C10557 +
                                 (C113 * C2062 + C47873 * C2071) * C10560 +
                                 (C113 * C2070 + C47873 * C2080) * C47987) *
                                    C4825 +
                                (C10898 + C10899 + C10900 + C10901) * C47954) *
                                   C47970) *
                                  C47670 * C48003 +
                              (((C10893 + C10892 + C10891 + C10890) * C4825 +
                                (C10902 + C10903 + C10904 + C10905) * C47954) *
                                   C1881 -
                               ((C10566 + C10567 + C10568 + C10569) * C47954 +
                                (C10565 + C10564 + C10563 + C10562) * C4825) *
                                   C1880 -
                               ((C10906 + C10907 + C10908 + C10909) * C47954 +
                                (C10901 + C10900 + C10899 + C10898) * C4825) *
                                   C47970) *
                                  C47670 * C47990 +
                              (((C10569 + C10568 + C10567 + C10566) * C4825 +
                                (C10570 + C10571 + C10572 + C10573) * C47954) *
                                   C1880 -
                               ((C11178 + C11179 + C11180 + C11181) * C47954 +
                                (C10905 + C10904 + C10903 + C10902) * C4825) *
                                   C1881 +
                               ((C10909 + C10908 + C10907 + C10906) * C4825 +
                                (C581 * C10559 + C580 * C10557 +
                                 (C113 * C2352 + C47873 * C2353) * C10560 +
                                 (C113 * C2354 + C47873 * C2355) * C47987) *
                                    C47954) *
                                   C47970) *
                                  C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C1880 -
           ((C10890 + C10891 + C10892 + C10893) * C47954 +
            (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
             C10910 * C10559) *
                C4825) *
               C1881 +
           ((C10913 * C10559 + C10912 * C10557 +
             (C113 * C2062 + C47873 * C2071) * C10560 +
             (C113 * C2070 + C47873 * C2080) * C47987) *
                C4825 +
            (C10898 + C10899 + C10900 + C10901) * C47954) *
               C47970) *
              C48006 +
          (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
             C11781 * C47987) *
                C4825 +
            (C11380 + C11381 + C11382 + C11383) * C47954) *
               C1881 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C1880 -
           (((C113 * C2476 + C47873 * C2480) * C47987 +
             (C113 * C2471 + C47873 * C2475) * C10560 + C2245 * C10557 +
             C2246 * C10559) *
                C47954 +
            ((C113 * C2474 + C47873 * C2479) * C47987 +
             (C113 * C2470 + C47873 * C2473) * C10560 + C11781 * C10557 +
             C11780 * C10559) *
                C4825) *
               C47970) *
              C47994 +
          ((((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
             C11783 * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C1880 -
           ((C12122 + C12123 + C12124 + C12125) * C47954 +
            (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
             C11782 * C10559) *
                C4825) *
               C1881 +
           ((C11787 * C10559 + C11786 * C10557 +
             (C113 * C7503 + C47873 * C7505) * C10560 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C4825 +
            (C11785 * C10559 + C11784 * C10557 +
             (C113 * C7504 + C47873 * C7507) * C10560 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
            C10911 * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C2055 -
          ((C10890 + C10891 + C10892 + C10893) * C47954 +
           (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
            C10910 * C10559) *
               C4825) *
              C2056 +
          ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
            C12657 * C47987) *
               C4825 +
           (C10898 + C10899 + C10900 + C10901) * C47954) *
              C2057 -
          ((C12658 * C47987 + C12659 * C10560 + C2367 * C10557 +
            C2368 * C10559) *
               C47954 +
           (C12660 * C47987 + C12661 * C10560 + C12657 * C10557 +
            C12656 * C10559) *
               C4825) *
              C2058 +
          ((C12661 * C10559 + C12660 * C10557 +
            (C113 * C12635 + C47873 * C12637) * C10560 +
            (C113 * C12638 + C47873 * C12641) * C47987) *
               C4825 +
           (C12659 * C10559 + C12658 * C10557 +
            (C113 * C12636 + C47873 * C12639) * C10560 +
            (C113 * C12640 + C47873 * C12642) * C47987) *
               C47954) *
              C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[63] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47936 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C1126 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47936) *
                       C1127 +
                   ((((C113 * C305 + C47873 * C318) * C10559 +
                      (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                      C11783 * C47987) *
                         C4825 +
                     (C10728 + C10729 + C10730 + C10731) * C47954) *
                        C47936 -
                    ((C12122 + C12123 + C12124 + C12125) * C47954 +
                     (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                      C11782 * C10559) *
                         C4825) *
                        C47775) *
                       C47967) *
                      C47921 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47936) *
                       C1126 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47936 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C1127 +
                   (((C12125 + C12124 + C12123 + C12122) * C4825 +
                     (C1654 * C10559 + C1653 * C10557 +
                      (C113 * C1342 + C47873 * C1359) * C10560 +
                      (C113 * C1360 + C47873 * C1369) * C47987) *
                         C47954) *
                        C47775 -
                    ((C10736 + C10737 + C10738 + C10739) * C47954 +
                     (C10731 + C10730 + C10729 + C10728) * C4825) *
                        C47936) *
                       C47967) *
                      C47653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47936 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C47670 * C695 +
                  (((C10893 + C10892 + C10891 + C10890) * C4825 +
                    (C10902 + C10903 + C10904 + C10905) * C47954) *
                       C47775 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47936) *
                      C47670 * C696 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47936 -
                   ((C11178 + C11179 + C11180 + C11181) * C47954 +
                    (C10905 + C10904 + C10903 + C10902) * C4825) *
                       C47775) *
                      C47670 * C697 +
                  (((C11181 + C11180 + C11179 + C11178) * C4825 +
                    (C823 * C10559 + C822 * C10557 +
                     (C113 * C514 + C47873 * C533) * C10560 +
                     (C113 * C534 + C47873 * C544) * C47987) *
                        C47954) *
                       C47775 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C47936) *
                      C47670 * C47971)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C2348 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C2349 +
                   ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                     C12657 * C47987) *
                        C4825 +
                    (C10898 + C10899 + C10900 + C10901) * C47954) *
                       C2350 -
                   ((C12996 + C12997 + C12998 + C12999) * C47954 +
                    (C12660 * C47987 + C12661 * C10560 + C12657 * C10557 +
                     C12656 * C10559) *
                        C4825) *
                       C47983) *
                      C47670 * C47921 +
                  (((C10893 + C10892 + C10891 + C10890) * C4825 +
                    (C10902 + C10903 + C10904 + C10905) * C47954) *
                       C2349 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C2348 -
                   ((C10906 + C10907 + C10908 + C10909) * C47954 +
                    (C10901 + C10900 + C10899 + C10898) * C4825) *
                       C2350 +
                   ((C12999 + C12998 + C12997 + C12996) * C4825 +
                    (C2366 * C10559 + C2365 * C10557 +
                     (C113 * C2065 + C47873 * C2076) * C10560 +
                     (C113 * C2077 + C47873 * C2083) * C47987) *
                        C47954) *
                       C47983) *
                      C47670 * C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 +
             (C113 * C507 + C47873 * C520) * C10560 +
             (C113 * C519 + C47873 * C537) * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C47688 * C48006 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            ((C113 * C977 + C47873 * C986) * C47987 +
             (C113 * C971 + C47873 * C976) * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 +
             (C113 * C1339 + C47873 * C1354) * C10560 +
             (C113 * C1353 + C47873 * C1366) * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C47688 * C47967) *
              C299 +
          (((C10727 + C10726 + C10725 + C10724) * C4825 +
            (C10732 + C10733 + C10734 + C10735) * C47954) *
               C47688 * C47994 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C47688 * C48006 -
           ((C10736 + C10737 + C10738 + C10739) * C47954 +
            (C10731 + C10730 + C10729 + C10728) * C4825) *
               C47688 * C47967) *
              C300 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C47688 * C48006 -
           ((C1008 * C47987 + C1009 * C10560 + C376 * C10557 + C375 * C10559) *
                C47954 +
            (C10735 + C10734 + C10733 + C10732) * C4825) *
               C47688 * C47994 +
           ((C10739 + C10738 + C10737 + C10736) * C4825 +
            (C378 * C10559 + C377 * C10557 +
             (C113 * C1640 + C47873 * C1641) * C10560 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 +
            (C113 * C507 + C47873 * C520) * C10560 +
            (C113 * C519 + C47873 * C537) * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C47688 * C47670 * C108 -
          ((C10566 + C10567 + C10568 + C10569) * C47954 +
           (C10565 + C10564 + C10563 + C10562) * C4825) *
              C47688 * C47670 * C109 +
          ((C10569 + C10568 + C10567 + C10566) * C4825 +
           (C10570 + C10571 + C10572 + C10573) * C47954) *
              C47688 * C47670 * C110 -
          ((C10574 + C10575 + C10576 + C10577) * C47954 +
           (C10573 + C10572 + C10571 + C10570) * C4825) *
              C47688 * C47670 * C111 +
          ((C10577 + C10576 + C10575 + C10574) * C4825 +
           (C173 * C10559 + C172 * C10557 +
            (C113 * C812 + C47873 * C813) * C10560 +
            (C113 * C814 + C47873 * C815) * C47987) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C47688 * C1126 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 +
             (C113 * C1339 + C47873 * C1354) * C10560 +
             (C113 * C1353 + C47873 * C1366) * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C10727 + C10726 + C10725 + C10724) * C4825 +
            (C10732 + C10733 + C10734 + C10735) * C47954) *
               C47688 * C1127 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C47688 * C1126 -
           ((C10736 + C10737 + C10738 + C10739) * C47954 +
            (C10731 + C10730 + C10729 + C10728) * C4825) *
               C47688 * C47967) *
              C47990 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C47688 * C1126 -
           ((C11044 + C11045 + C11046 + C11047) * C47954 +
            (C10735 + C10734 + C10733 + C10732) * C4825) *
               C47688 * C1127 +
           ((C10739 + C10738 + C10737 + C10736) * C4825 +
            (C378 * C10559 + C377 * C10557 +
             (C113 * C1640 + C47873 * C1641) * C10560 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
            C10911 * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C47688 * C1194 -
          ((C10724 + C10725 + C10726 + C10727) * C47954 +
           (C11389 * C47987 + C11388 * C10560 +
            (C113 * C316 + C47873 * C334) * C10557 +
            (C113 * C304 + C47873 * C317) * C10559) *
               C4825) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C10559 +
            (C113 * C319 + C47873 * C335) * C10557 +
            (C113 * C1339 + C47873 * C1354) * C10560 +
            (C113 * C1353 + C47873 * C1366) * C47987) *
               C4825 +
           (C10728 + C10729 + C10730 + C10731) * C47954) *
              C47688 * C1196 -
          (((C113 * C1764 + C47873 * C1768) * C47987 +
            (C113 * C1759 + C47873 * C1763) * C10560 + C1489 * C10557 +
            C1490 * C10559) *
               C47954 +
           ((C113 * C1762 + C47873 * C1767) * C47987 +
            (C113 * C1758 + C47873 * C1761) * C10560 +
            (C113 * C1210 + C47873 * C1220) * C10557 +
            (C113 * C1202 + C47873 * C1211) * C10559) *
               C4825) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C10559 +
            (C113 * C1213 + C47873 * C1221) * C10557 +
            (C113 * C6635 + C47873 * C6637) * C10560 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C4825 +
           ((C113 * C1204 + C47873 * C1214) * C10559 +
            (C113 * C1215 + C47873 * C1222) * C10557 +
            (C113 * C6636 + C47873 * C6639) * C10560 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C1880 -
           ((C10890 + C10891 + C10892 + C10893) * C47954 +
            (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
             C10910 * C10559) *
                C4825) *
               C1881 +
           ((C10913 * C10559 + C10912 * C10557 +
             (C113 * C2062 + C47873 * C2071) * C10560 +
             (C113 * C2070 + C47873 * C2080) * C47987) *
                C4825 +
            (C10898 + C10899 + C10900 + C10901) * C47954) *
               C47970) *
              C47670 * C48003 +
          (((C10893 + C10892 + C10891 + C10890) * C4825 +
            (C10902 + C10903 + C10904 + C10905) * C47954) *
               C1881 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C1880 -
           ((C10906 + C10907 + C10908 + C10909) * C47954 +
            (C10901 + C10900 + C10899 + C10898) * C4825) *
               C47970) *
              C47670 * C47990 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C1880 -
           ((C11178 + C11179 + C11180 + C11181) * C47954 +
            (C10905 + C10904 + C10903 + C10902) * C4825) *
               C1881 +
           ((C10909 + C10908 + C10907 + C10906) * C4825 +
            (C581 * C10559 + C580 * C10557 +
             (C113 * C2352 + C47873 * C2353) * C10560 +
             (C113 * C2354 + C47873 * C2355) * C47987) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C1880 -
           ((C10890 + C10891 + C10892 + C10893) * C47954 +
            (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
             C10910 * C10559) *
                C4825) *
               C1881 +
           ((C10913 * C10559 + C10912 * C10557 +
             (C113 * C2062 + C47873 * C2071) * C10560 +
             (C113 * C2070 + C47873 * C2080) * C47987) *
                C4825 +
            (C10898 + C10899 + C10900 + C10901) * C47954) *
               C47970) *
              C48006 +
          (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
             C11781 * C47987) *
                C4825 +
            (C11380 + C11381 + C11382 + C11383) * C47954) *
               C1881 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C1880 -
           (((C113 * C2476 + C47873 * C2480) * C47987 +
             (C113 * C2471 + C47873 * C2475) * C10560 + C2245 * C10557 +
             C2246 * C10559) *
                C47954 +
            ((C113 * C2474 + C47873 * C2479) * C47987 +
             (C113 * C2470 + C47873 * C2473) * C10560 + C11781 * C10557 +
             C11780 * C10559) *
                C4825) *
               C47970) *
              C47994 +
          ((((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
             C11783 * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C1880 -
           ((C12122 + C12123 + C12124 + C12125) * C47954 +
            (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
             C11782 * C10559) *
                C4825) *
               C1881 +
           ((C11787 * C10559 + C11786 * C10557 +
             (C113 * C7503 + C47873 * C7505) * C10560 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C4825 +
            (C11785 * C10559 + C11784 * C10557 +
             (C113 * C7504 + C47873 * C7507) * C10560 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C3342 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C47935 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C3342) *
                       C47733) *
                      C47647 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C3342) *
                       C47935 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C3342 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47733) *
                      C47656 +
                  ((((C10569 + C10568 + C10567 + C10566) * C4825 +
                     (C10570 + C10571 + C10572 + C10573) * C47954) *
                        C3342 -
                    ((C11178 + C11179 + C11180 + C11181) * C47954 +
                     (C10905 + C10904 + C10903 + C10902) * C4825) *
                        C47775) *
                       C47935 +
                   (((C11387 + C11386 + C11385 + C11384) * C4825 +
                     (C1009 * C10559 + C1008 * C10557 +
                      (C113 * C2230 + C47873 * C2231) * C10560 +
                      (C113 * C2232 + C47873 * C2233) * C47987) *
                         C47954) *
                        C47775 -
                    ((C11044 + C11045 + C11046 + C11047) * C47954 +
                     (C10735 + C10734 + C10733 + C10732) * C4825) *
                        C3342) *
                       C47733) *
                      C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[66] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47771 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47778 +
                    ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                      C12657 * C47987) *
                         C4825 +
                     (C10898 + C10899 + C10900 + C10901) * C47954) *
                        C3850) *
                       C47935 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47778 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47771 -
                    ((C12864 + C12865 + C12860 + C12861) * C47954 +
                     (C13134 * C47987 + C13135 * C10560 + C11781 * C10557 +
                      C11780 * C10559) *
                         C4825) *
                        C3850) *
                       C47733) *
                      C2688 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47778 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47771 -
                    ((C10906 + C10907 + C10908 + C10909) * C47954 +
                     (C10901 + C10900 + C10899 + C10898) * C4825) *
                        C3850) *
                       C47935 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47771 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47778 +
                    ((C12861 + C12860 + C12865 + C12864) * C4825 +
                     (C2244 * C10559 + C2243 * C10557 +
                      (C113 * C2472 + C47873 * C2477) * C10560 +
                      (C113 * C2478 + C47873 * C2481) * C47987) *
                         C47954) *
                        C3850) *
                       C47733) *
                      C47653)) /
                (p * q * std::sqrt(p + q));
    d2ee[67] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C3342 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C48006 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C3342) *
                       C47994 +
                   ((((C113 * C305 + C47873 * C318) * C10559 +
                      (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                      C11783 * C47987) *
                         C4825 +
                     (C10728 + C10729 + C10730 + C10731) * C47954) *
                        C3342 -
                    ((C12122 + C12123 + C12124 + C12125) * C47954 +
                     (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                      C11782 * C10559) *
                         C4825) *
                        C47775) *
                       C47967) *
                      C2688 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C3342) *
                       C48006 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C3342 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47994 +
                   (((C12125 + C12124 + C12123 + C12122) * C4825 +
                     (C1654 * C10559 + C1653 * C10557 +
                      (C113 * C1342 + C47873 * C1359) * C10560 +
                      (C113 * C1360 + C47873 * C1369) * C47987) *
                         C47954) *
                        C47775 -
                    ((C10736 + C10737 + C10738 + C10739) * C47954 +
                     (C10731 + C10730 + C10729 + C10728) * C4825) *
                        C3342) *
                       C47967) *
                      C47653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C3342 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C47670 * C48012 +
                  (((C10893 + C10892 + C10891 + C10890) * C4825 +
                    (C10902 + C10903 + C10904 + C10905) * C47954) *
                       C47775 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C3342) *
                      C47670 * C48005 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C3342 -
                   ((C11178 + C11179 + C11180 + C11181) * C47954 +
                    (C10905 + C10904 + C10903 + C10902) * C4825) *
                       C47775) *
                      C47670 * C47992 +
                  (((C11181 + C11180 + C11179 + C11178) * C4825 +
                    (C823 * C10559 + C822 * C10557 +
                     (C113 * C514 + C47873 * C533) * C10560 +
                     (C113 * C534 + C47873 * C544) * C47987) *
                        C47954) *
                       C47775 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C3342) *
                      C47670 * C47971)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C48014 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C48011 +
                   ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                     C12657 * C47987) *
                        C4825 +
                    (C10898 + C10899 + C10900 + C10901) * C47954) *
                       C48002 -
                   ((C12996 + C12997 + C12998 + C12999) * C47954 +
                    (C12660 * C47987 + C12661 * C10560 + C12657 * C10557 +
                     C12656 * C10559) *
                        C4825) *
                       C47983) *
                      C47670 * C2688 +
                  (((C10893 + C10892 + C10891 + C10890) * C4825 +
                    (C10902 + C10903 + C10904 + C10905) * C47954) *
                       C48011 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C48014 -
                   ((C10906 + C10907 + C10908 + C10909) * C47954 +
                    (C10901 + C10900 + C10899 + C10898) * C4825) *
                       C48002 +
                   ((C12999 + C12998 + C12997 + C12996) * C4825 +
                    (C2366 * C10559 + C2365 * C10557 +
                     (C113 * C2065 + C47873 * C2076) * C10560 +
                     (C113 * C2077 + C47873 * C2083) * C47987) *
                        C47954) *
                       C47983) *
                      C47670 * C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47771 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47778 +
                   ((C10913 * C10559 + C10912 * C10557 + C12656 * C10560 +
                     C12657 * C47987) *
                        C4825 +
                    (C10898 + C10899 + C10900 + C10901) * C47954) *
                       C3850) *
                      C47670 * C47647 +
                  (((C10893 + C10892 + C10891 + C10890) * C4825 +
                    (C10902 + C10903 + C10904 + C10905) * C47954) *
                       C47778 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47771 -
                   ((C10906 + C10907 + C10908 + C10909) * C47954 +
                    (C10901 + C10900 + C10899 + C10898) * C4825) *
                       C3850) *
                      C47670 * C47656 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47771 -
                   ((C11178 + C11179 + C11180 + C11181) * C47954 +
                    (C10905 + C10904 + C10903 + C10902) * C4825) *
                       C47778 +
                   ((C10909 + C10908 + C10907 + C10906) * C4825 +
                    (C581 * C10559 + C580 * C10557 +
                     (C113 * C2352 + C47873 * C2353) * C10560 +
                     (C113 * C2354 + C47873 * C2355) * C47987) *
                        C47954) *
                       C3850) *
                      C47670 * C2951)) /
                (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C3342 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C47670 * C48012 +
                  (((C10893 + C10892 + C10891 + C10890) * C4825 +
                    (C10902 + C10903 + C10904 + C10905) * C47954) *
                       C47775 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C3342) *
                      C47670 * C48005 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C3342 -
                   ((C11178 + C11179 + C11180 + C11181) * C47954 +
                    (C10905 + C10904 + C10903 + C10902) * C4825) *
                       C47775) *
                      C47670 * C47992 +
                  (((C11181 + C11180 + C11179 + C11178) * C4825 +
                    (C823 * C10559 + C822 * C10557 +
                     (C113 * C514 + C47873 * C533) * C10560 +
                     (C113 * C534 + C47873 * C544) * C47987) *
                        C47954) *
                       C47775 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C3342) *
                      C47670 * C47971)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C3342 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C48006 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C3342) *
                       C47994 +
                   ((((C113 * C305 + C47873 * C318) * C10559 +
                      (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                      C11783 * C47987) *
                         C4825 +
                     (C10728 + C10729 + C10730 + C10731) * C47954) *
                        C3342 -
                    ((C12122 + C12123 + C12124 + C12125) * C47954 +
                     (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                      C11782 * C10559) *
                         C4825) *
                        C47775) *
                       C47967) *
                      C2688 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C3342) *
                       C48006 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C3342 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47994 +
                   (((C12125 + C12124 + C12123 + C12122) * C4825 +
                     (C1654 * C10559 + C1653 * C10557 +
                      (C113 * C1342 + C47873 * C1359) * C10560 +
                      (C113 * C1360 + C47873 * C1369) * C47987) *
                         C47954) *
                        C47775 -
                    ((C10736 + C10737 + C10738 + C10739) * C47954 +
                     (C10731 + C10730 + C10729 + C10728) * C4825) *
                        C3342) *
                       C47967) *
                      C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C47935 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    ((C113 * C977 + C47873 * C986) * C47987 +
                     (C113 * C971 + C47873 * C976) * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C47733) *
                      C695 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C47733 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C47935) *
                      C696 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47688 * C47935 -
                   ((C11044 + C11045 + C11046 + C11047) * C47954 +
                    (C10735 + C10734 + C10733 + C10732) * C4825) *
                       C47688 * C47733) *
                      C697 +
                  (((C11047 + C11046 + C11045 + C11044) * C4825 +
                    (C710 * C10559 + C709 * C10557 +
                     (C113 * C975 + C47873 * C984) * C10560 +
                     (C113 * C985 + C47873 * C990) * C47987) *
                        C47954) *
                       C47688 * C47733 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C47688 * C47935) *
                      C47971)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47688 * C1468 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47688 * C1469 +
                   (((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47688 * C1470 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    ((C113 * C1762 + C47873 * C1767) * C47987 +
                     (C113 * C1758 + C47873 * C1761) * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C47688 * C47977) *
                      C47921 +
                  (((C10727 + C10726 + C10725 + C10724) * C4825 +
                    (C10732 + C10733 + C10734 + C10735) * C47954) *
                       C47688 * C1469 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47688 * C1468 -
                   ((C10736 + C10737 + C10738 + C10739) * C47954 +
                    (C10731 + C10730 + C10729 + C10728) * C4825) *
                       C47688 * C1470 +
                   ((C11923 + C11922 + C11927 + C11926) * C4825 +
                    (C1488 * C10559 + C1487 * C10557 +
                     (C113 * C1760 + C47873 * C1765) * C10560 +
                     (C113 * C1766 + C47873 * C1769) * C47987) *
                        C47954) *
                       C47688 * C47977) *
                      C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47936 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C47935 +
                   (((C11388 * C10559 + C11389 * C10557 +
                      (C113 * C1336 + C47873 * C1348) * C10560 +
                      (C113 * C1347 + C47873 * C1363) * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47936) *
                       C47733) *
                      C299 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47936) *
                       C47935 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47936 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C47733) *
                      C300 +
                  ((((C10569 + C10568 + C10567 + C10566) * C4825 +
                     (C10570 + C10571 + C10572 + C10573) * C47954) *
                        C47936 -
                    ((C11178 + C11179 + C11180 + C11181) * C47954 +
                     (C10905 + C10904 + C10903 + C10902) * C4825) *
                        C47775) *
                       C47935 +
                   (((C11387 + C11386 + C11385 + C11384) * C4825 +
                     (C1009 * C10559 + C1008 * C10557 +
                      (C113 * C2230 + C47873 * C2231) * C10560 +
                      (C113 * C2232 + C47873 * C2233) * C47987) *
                         C47954) *
                        C47775 -
                    ((C11044 + C11045 + C11046 + C11047) * C47954 +
                     (C10735 + C10734 + C10733 + C10732) * C4825) *
                        C47936) *
                       C47733) *
                      C47961)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47936 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C1468 +
                  (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                     C11781 * C47987) *
                        C4825 +
                    (C11380 + C11381 + C11382 + C11383) * C47954) *
                       C47775 -
                   ((C10724 + C10725 + C10726 + C10727) * C47954 +
                    (C11389 * C47987 + C11388 * C10560 +
                     (C113 * C316 + C47873 * C334) * C10557 +
                     (C113 * C304 + C47873 * C317) * C10559) *
                        C4825) *
                       C47936) *
                      C1469 +
                  ((((C113 * C305 + C47873 * C318) * C10559 +
                     (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                     C11783 * C47987) *
                        C4825 +
                    (C10728 + C10729 + C10730 + C10731) * C47954) *
                       C47936 -
                   ((C12122 + C12123 + C12124 + C12125) * C47954 +
                    (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                     C11782 * C10559) *
                        C4825) *
                       C47775) *
                      C1470 +
                  (((C12260 * C10559 + C12261 * C10557 +
                     (C113 * C6149 + C47873 * C6151) * C10560 +
                     (C113 * C6152 + C47873 * C6155) * C47987) *
                        C4825 +
                    (C11925 * C10559 + C11924 * C10557 +
                     (C113 * C6150 + C47873 * C6153) * C10560 +
                     (C113 * C6154 + C47873 * C6156) * C47987) *
                        C47954) *
                       C47775 -
                   ((C11926 + C11927 + C11922 + C11923) * C47954 +
                    (C12261 * C47987 + C12260 * C10560 +
                     (C113 * C1210 + C47873 * C1220) * C10557 +
                     (C113 * C1202 + C47873 * C1211) * C10559) *
                        C4825) *
                       C47936) *
                      C47977) *
                 C47642) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 +
             (C113 * C507 + C47873 * C520) * C10560 +
             (C113 * C519 + C47873 * C537) * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C47688 * C48006 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            ((C113 * C977 + C47873 * C986) * C47987 +
             (C113 * C971 + C47873 * C976) * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 +
             (C113 * C1339 + C47873 * C1354) * C10560 +
             (C113 * C1353 + C47873 * C1366) * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C47688 * C47967) *
              C299 +
          (((C10727 + C10726 + C10725 + C10724) * C4825 +
            (C10732 + C10733 + C10734 + C10735) * C47954) *
               C47688 * C47994 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C47688 * C48006 -
           ((C10736 + C10737 + C10738 + C10739) * C47954 +
            (C10731 + C10730 + C10729 + C10728) * C4825) *
               C47688 * C47967) *
              C300 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C47688 * C48006 -
           ((C1008 * C47987 + C1009 * C10560 + C376 * C10557 + C375 * C10559) *
                C47954 +
            (C10735 + C10734 + C10733 + C10732) * C4825) *
               C47688 * C47994 +
           ((C10739 + C10738 + C10737 + C10736) * C4825 +
            (C378 * C10559 + C377 * C10557 +
             (C113 * C1640 + C47873 * C1641) * C10560 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 +
            (C113 * C507 + C47873 * C520) * C10560 +
            (C113 * C519 + C47873 * C537) * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C47688 * C47670 * C108 -
          ((C10566 + C10567 + C10568 + C10569) * C47954 +
           (C10565 + C10564 + C10563 + C10562) * C4825) *
              C47688 * C47670 * C109 +
          ((C10569 + C10568 + C10567 + C10566) * C4825 +
           (C10570 + C10571 + C10572 + C10573) * C47954) *
              C47688 * C47670 * C110 -
          ((C10574 + C10575 + C10576 + C10577) * C47954 +
           (C10573 + C10572 + C10571 + C10570) * C4825) *
              C47688 * C47670 * C111 +
          ((C10577 + C10576 + C10575 + C10574) * C4825 +
           (C173 * C10559 + C172 * C10557 +
            (C113 * C812 + C47873 * C813) * C10560 +
            (C113 * C814 + C47873 * C815) * C47987) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C48007 -
           ((C10890 + C10891 + C10892 + C10893) * C47954 +
            (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
             C10910 * C10559) *
                C4825) *
               C47996 +
           ((C10913 * C10559 + C10912 * C10557 +
             (C113 * C2062 + C47873 * C2071) * C10560 +
             (C113 * C2070 + C47873 * C2080) * C47987) *
                C4825 +
            (C10898 + C10899 + C10900 + C10901) * C47954) *
               C47970) *
              C47670 * C299 +
          (((C10893 + C10892 + C10891 + C10890) * C4825 +
            (C10902 + C10903 + C10904 + C10905) * C47954) *
               C47996 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C48007 -
           ((C10906 + C10907 + C10908 + C10909) * C47954 +
            (C10901 + C10900 + C10899 + C10898) * C4825) *
               C47970) *
              C47670 * C300 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C48007 -
           ((C580 * C47987 + C581 * C10560 + C579 * C10557 + C578 * C10559) *
                C47954 +
            (C10905 + C10904 + C10903 + C10902) * C4825) *
               C47996 +
           ((C10909 + C10908 + C10907 + C10906) * C4825 +
            (C581 * C10559 + C580 * C10557 +
             (C113 * C2352 + C47873 * C2353) * C10560 +
             (C113 * C2354 + C47873 * C2355) * C47987) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C47688 * C1126 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 +
             (C113 * C1339 + C47873 * C1354) * C10560 +
             (C113 * C1353 + C47873 * C1366) * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C10727 + C10726 + C10725 + C10724) * C4825 +
            (C10732 + C10733 + C10734 + C10735) * C47954) *
               C47688 * C1127 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C47688 * C1126 -
           ((C10736 + C10737 + C10738 + C10739) * C47954 +
            (C10731 + C10730 + C10729 + C10728) * C4825) *
               C47688 * C47967) *
              C47990 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C47688 * C1126 -
           ((C11044 + C11045 + C11046 + C11047) * C47954 +
            (C10735 + C10734 + C10733 + C10732) * C4825) *
               C47688 * C1127 +
           ((C10739 + C10738 + C10737 + C10736) * C4825 +
            (C378 * C10559 + C377 * C10557 +
             (C113 * C1640 + C47873 * C1641) * C10560 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
            C10911 * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C47688 * C1194 -
          ((C10724 + C10725 + C10726 + C10727) * C47954 +
           (C11389 * C47987 + C11388 * C10560 +
            (C113 * C316 + C47873 * C334) * C10557 +
            (C113 * C304 + C47873 * C317) * C10559) *
               C4825) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C10559 +
            (C113 * C319 + C47873 * C335) * C10557 +
            (C113 * C1339 + C47873 * C1354) * C10560 +
            (C113 * C1353 + C47873 * C1366) * C47987) *
               C4825 +
           (C10728 + C10729 + C10730 + C10731) * C47954) *
              C47688 * C1196 -
          (((C113 * C1764 + C47873 * C1768) * C47987 +
            (C113 * C1759 + C47873 * C1763) * C10560 + C1489 * C10557 +
            C1490 * C10559) *
               C47954 +
           ((C113 * C1762 + C47873 * C1767) * C47987 +
            (C113 * C1758 + C47873 * C1761) * C10560 +
            (C113 * C1210 + C47873 * C1220) * C10557 +
            (C113 * C1202 + C47873 * C1211) * C10559) *
               C4825) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C10559 +
            (C113 * C1213 + C47873 * C1221) * C10557 +
            (C113 * C6635 + C47873 * C6637) * C10560 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C4825 +
           ((C113 * C1204 + C47873 * C1214) * C10559 +
            (C113 * C1215 + C47873 * C1222) * C10557 +
            (C113 * C6636 + C47873 * C6639) * C10560 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C48007 -
           ((C10890 + C10891 + C10892 + C10893) * C47954 +
            (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
             C10910 * C10559) *
                C4825) *
               C47996 +
           ((C10913 * C10559 + C10912 * C10557 +
             (C113 * C2062 + C47873 * C2071) * C10560 +
             (C113 * C2070 + C47873 * C2080) * C47987) *
                C4825 +
            (C10898 + C10899 + C10900 + C10901) * C47954) *
               C47970) *
              C1126 +
          (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
             C11781 * C47987) *
                C4825 +
            (C11380 + C11381 + C11382 + C11383) * C47954) *
               C47996 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C48007 -
           (((C113 * C2476 + C47873 * C2480) * C47987 +
             (C113 * C2471 + C47873 * C2475) * C10560 + C2245 * C10557 +
             C2246 * C10559) *
                C47954 +
            ((C113 * C2474 + C47873 * C2479) * C47987 +
             (C113 * C2470 + C47873 * C2473) * C10560 + C11781 * C10557 +
             C11780 * C10559) *
                C4825) *
               C47970) *
              C1127 +
          ((((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
             C11783 * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C48007 -
           ((C11784 * C47987 + C11785 * C10560 + C1655 * C10557 +
             C1656 * C10559) *
                C47954 +
            (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
             C11782 * C10559) *
                C4825) *
               C47996 +
           ((C11787 * C10559 + C11786 * C10557 +
             (C113 * C7503 + C47873 * C7505) * C10560 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C4825 +
            (C11785 * C10559 + C11784 * C10557 +
             (C113 * C7504 + C47873 * C7507) * C10560 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C47873 * C122) * C10559 +
                     (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                     C10911 * C47987) *
                        C4825 +
                    (C10562 + C10563 + C10564 + C10565) * C47954) *
                       C47936 -
                   ((C10890 + C10891 + C10892 + C10893) * C47954 +
                    (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                     C10910 * C10559) *
                        C4825) *
                       C47775) *
                      C47670 * C695 +
                  (((C10893 + C10892 + C10891 + C10890) * C4825 +
                    (C10902 + C10903 + C10904 + C10905) * C47954) *
                       C47775 -
                   ((C10566 + C10567 + C10568 + C10569) * C47954 +
                    (C10565 + C10564 + C10563 + C10562) * C4825) *
                       C47936) *
                      C47670 * C696 +
                  (((C10569 + C10568 + C10567 + C10566) * C4825 +
                    (C10570 + C10571 + C10572 + C10573) * C47954) *
                       C47936 -
                   ((C11178 + C11179 + C11180 + C11181) * C47954 +
                    (C10905 + C10904 + C10903 + C10902) * C4825) *
                       C47775) *
                      C47670 * C697 +
                  (((C11181 + C11180 + C11179 + C11178) * C4825 +
                    (C823 * C10559 + C822 * C10557 +
                     (C113 * C514 + C47873 * C533) * C10560 +
                     (C113 * C534 + C47873 * C544) * C47987) *
                        C47954) *
                       C47775 -
                   ((C10574 + C10575 + C10576 + C10577) * C47954 +
                    (C10573 + C10572 + C10571 + C10570) * C4825) *
                       C47936) *
                      C47670 * C47971)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C47873 * C122) * C10559 +
                      (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
                      C10911 * C47987) *
                         C4825 +
                     (C10562 + C10563 + C10564 + C10565) * C47954) *
                        C47936 -
                    ((C10890 + C10891 + C10892 + C10893) * C47954 +
                     (C10912 * C47987 + C10913 * C10560 + C10911 * C10557 +
                      C10910 * C10559) *
                         C4825) *
                        C47775) *
                       C1126 +
                   (((C11388 * C10559 + C11389 * C10557 + C11780 * C10560 +
                      C11781 * C47987) *
                         C4825 +
                     (C11380 + C11381 + C11382 + C11383) * C47954) *
                        C47775 -
                    ((C10724 + C10725 + C10726 + C10727) * C47954 +
                     (C11389 * C47987 + C11388 * C10560 +
                      (C113 * C316 + C47873 * C334) * C10557 +
                      (C113 * C304 + C47873 * C317) * C10559) *
                         C4825) *
                        C47936) *
                       C1127 +
                   ((((C113 * C305 + C47873 * C318) * C10559 +
                      (C113 * C319 + C47873 * C335) * C10557 + C11782 * C10560 +
                      C11783 * C47987) *
                         C4825 +
                     (C10728 + C10729 + C10730 + C10731) * C47954) *
                        C47936 -
                    ((C12122 + C12123 + C12124 + C12125) * C47954 +
                     (C11786 * C47987 + C11787 * C10560 + C11783 * C10557 +
                      C11782 * C10559) *
                         C4825) *
                        C47775) *
                       C47967) *
                      C47921 +
                  ((((C10893 + C10892 + C10891 + C10890) * C4825 +
                     (C10902 + C10903 + C10904 + C10905) * C47954) *
                        C47775 -
                    ((C10566 + C10567 + C10568 + C10569) * C47954 +
                     (C10565 + C10564 + C10563 + C10562) * C4825) *
                        C47936) *
                       C1126 +
                   (((C10727 + C10726 + C10725 + C10724) * C4825 +
                     (C10732 + C10733 + C10734 + C10735) * C47954) *
                        C47936 -
                    ((C11384 + C11385 + C11386 + C11387) * C47954 +
                     (C11383 + C11382 + C11381 + C11380) * C4825) *
                        C47775) *
                       C1127 +
                   (((C12125 + C12124 + C12123 + C12122) * C4825 +
                     (C1654 * C10559 + C1653 * C10557 +
                      (C113 * C1342 + C47873 * C1359) * C10560 +
                      (C113 * C1360 + C47873 * C1369) * C47987) *
                         C47954) *
                        C47775 -
                    ((C10736 + C10737 + C10738 + C10739) * C47954 +
                     (C10731 + C10730 + C10729 + C10728) * C4825) *
                        C47936) *
                       C47967) *
                      C47653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 +
            (C113 * C507 + C47873 * C520) * C10560 +
            (C113 * C519 + C47873 * C537) * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C47688 * C47670 * C108 -
          ((C10566 + C10567 + C10568 + C10569) * C47954 +
           (C10565 + C10564 + C10563 + C10562) * C4825) *
              C47688 * C47670 * C109 +
          ((C10569 + C10568 + C10567 + C10566) * C4825 +
           (C10570 + C10571 + C10572 + C10573) * C47954) *
              C47688 * C47670 * C110 -
          ((C10574 + C10575 + C10576 + C10577) * C47954 +
           (C10573 + C10572 + C10571 + C10570) * C4825) *
              C47688 * C47670 * C111 +
          ((C10577 + C10576 + C10575 + C10574) * C4825 +
           (C173 * C10559 + C172 * C10557 +
            (C113 * C812 + C47873 * C813) * C10560 +
            (C113 * C814 + C47873 * C815) * C47987) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 +
             (C113 * C507 + C47873 * C520) * C10560 +
             (C113 * C519 + C47873 * C537) * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C47688 * C48006 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            ((C113 * C977 + C47873 * C986) * C47987 +
             (C113 * C971 + C47873 * C976) * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 +
             (C113 * C1339 + C47873 * C1354) * C10560 +
             (C113 * C1353 + C47873 * C1366) * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C47688 * C47967) *
              C299 +
          (((C10727 + C10726 + C10725 + C10724) * C4825 +
            (C10732 + C10733 + C10734 + C10735) * C47954) *
               C47688 * C47994 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C47688 * C48006 -
           ((C10736 + C10737 + C10738 + C10739) * C47954 +
            (C10731 + C10730 + C10729 + C10728) * C4825) *
               C47688 * C47967) *
              C300 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C47688 * C48006 -
           ((C1008 * C47987 + C1009 * C10560 + C376 * C10557 + C375 * C10559) *
                C47954 +
            (C10735 + C10734 + C10733 + C10732) * C4825) *
               C47688 * C47994 +
           ((C10739 + C10738 + C10737 + C10736) * C4825 +
            (C378 * C10559 + C377 * C10557 +
             (C113 * C1640 + C47873 * C1641) * C10560 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C10559 +
             (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
             C10911 * C47987) *
                C4825 +
            (C10562 + C10563 + C10564 + C10565) * C47954) *
               C47688 * C1126 -
           ((C10724 + C10725 + C10726 + C10727) * C47954 +
            (C11389 * C47987 + C11388 * C10560 +
             (C113 * C316 + C47873 * C334) * C10557 +
             (C113 * C304 + C47873 * C317) * C10559) *
                C4825) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C10559 +
             (C113 * C319 + C47873 * C335) * C10557 +
             (C113 * C1339 + C47873 * C1354) * C10560 +
             (C113 * C1353 + C47873 * C1366) * C47987) *
                C4825 +
            (C10728 + C10729 + C10730 + C10731) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C10727 + C10726 + C10725 + C10724) * C4825 +
            (C10732 + C10733 + C10734 + C10735) * C47954) *
               C47688 * C1127 -
           ((C10566 + C10567 + C10568 + C10569) * C47954 +
            (C10565 + C10564 + C10563 + C10562) * C4825) *
               C47688 * C1126 -
           ((C10736 + C10737 + C10738 + C10739) * C47954 +
            (C10731 + C10730 + C10729 + C10728) * C4825) *
               C47688 * C47967) *
              C47990 +
          (((C10569 + C10568 + C10567 + C10566) * C4825 +
            (C10570 + C10571 + C10572 + C10573) * C47954) *
               C47688 * C1126 -
           ((C11044 + C11045 + C11046 + C11047) * C47954 +
            (C10735 + C10734 + C10733 + C10732) * C4825) *
               C47688 * C1127 +
           ((C10739 + C10738 + C10737 + C10736) * C4825 +
            (C378 * C10559 + C377 * C10557 +
             (C113 * C1640 + C47873 * C1641) * C10560 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C10559 +
            (C113 * C123 + C47873 * C136) * C10557 + C10910 * C10560 +
            C10911 * C47987) *
               C4825 +
           (C10562 + C10563 + C10564 + C10565) * C47954) *
              C47688 * C1194 -
          ((C10724 + C10725 + C10726 + C10727) * C47954 +
           (C11389 * C47987 + C11388 * C10560 +
            (C113 * C316 + C47873 * C334) * C10557 +
            (C113 * C304 + C47873 * C317) * C10559) *
               C4825) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C10559 +
            (C113 * C319 + C47873 * C335) * C10557 +
            (C113 * C1339 + C47873 * C1354) * C10560 +
            (C113 * C1353 + C47873 * C1366) * C47987) *
               C4825 +
           (C10728 + C10729 + C10730 + C10731) * C47954) *
              C47688 * C1196 -
          (((C113 * C1764 + C47873 * C1768) * C47987 +
            (C113 * C1759 + C47873 * C1763) * C10560 + C1489 * C10557 +
            C1490 * C10559) *
               C47954 +
           ((C113 * C1762 + C47873 * C1767) * C47987 +
            (C113 * C1758 + C47873 * C1761) * C10560 +
            (C113 * C1210 + C47873 * C1220) * C10557 +
            (C113 * C1202 + C47873 * C1211) * C10559) *
               C4825) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C10559 +
            (C113 * C1213 + C47873 * C1221) * C10557 +
            (C113 * C6635 + C47873 * C6637) * C10560 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C4825 +
           ((C113 * C1204 + C47873 * C1214) * C10559 +
            (C113 * C1215 + C47873 * C1222) * C10557 +
            (C113 * C6636 + C47873 * C6639) * C10560 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C47729 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47736 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C2948) *
              C47647 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47736 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C47729 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C2948) *
              C47656 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C47729 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47736 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47936 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C47729 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47936) *
               C47736 +
           ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
               C47985 * C1211) *
                  C114 +
              (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
               C47985 * C1220) *
                  C47890) *
                 C16183 +
             ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
                C47936 -
            (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
             ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
               C16181 * C1366) *
                  C47890 +
              (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
               C16181 * C1354) *
                  C114) *
                 C16183) *
                C47775) *
               C2948) *
              C2688 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47936) *
               C47729 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47936 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47736 +
           ((((C17847 + C17846) * C114 + (C17845 + C17844) * C47890) * C16183 +
             ((C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
               C47985 * C1765) *
                  C114 +
              (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
               C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
             ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
                C47936) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C48013 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C48009 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47999 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C47688 * C47977) *
              C2688 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C48009 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C48013 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47999 +
           (((C17641 + C17640) * C114 + (C17639 + C17638) * C47890) * C16183 +
            ((C16185 * C1200 + C16181 * C1207 + C16186 * C1205 +
              C47985 * C1216) *
                 C114 +
             (C16185 * C1206 + C16181 * C1218 + C16186 * C1217 +
              C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C2580 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47733) *
              C48012 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47733 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C2580) *
              C48005 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C2580 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47733) *
              C47992 +
          ((((C16765 + C16764) * C114 + (C16763 + C16762) * C47890) * C16183 +
            ((C16185 * C310 + C16181 * C329 + C16186 * C311 + C47985 * C330) *
                 C114 +
             (C16185 * C328 + C16181 * C340 + C16186 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C48007 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47996 +
            (((C16185 * C508 + C16181 * C521 + C16186 * C1336 +
               C47985 * C1348) *
                  C114 +
              (C16185 * C522 + C16181 * C538 + C16186 * C1347 +
               C47985 * C1363) *
                  C47890) *
                 C16183 +
             ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
                C47970) *
               C2580 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47996 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C48007 -
            (((C18554 + C18555) * C47890 + (C18556 + C18557) * C114) * C47954 +
             ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
               C16181 * C1363) *
                  C47890 +
              (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
               C16181 * C1348) *
                  C114) *
                 C16183) *
                C47970) *
               C47733) *
              C2688 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47996 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C48007 -
            (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
             ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
                C47970) *
               C2580 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C48007 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47996 +
            (((C18557 + C18556) * C114 + (C18555 + C18554) * C47890) * C16183 +
             ((C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
               C47985 * C1359) *
                  C114 +
              (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
               C47985 * C1369) *
                  C47890) *
                 C47954) *
                C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47936 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C2580 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47936) *
               C47733) *
              C47647 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47936) *
               C2580 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47936 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47733) *
              C47656 +
          (((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
             ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
                C47936 -
            (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
             ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
                C47775) *
               C2580 +
           ((((C17125 + C17124) * C114 + (C17123 + C17122) * C47890) * C16183 +
             ((C16185 * C974 + C16181 * C983 + C16186 * C1640 +
               C47985 * C1641) *
                  C114 +
              (C16185 * C982 + C16181 * C989 + C16186 * C1642 +
               C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
             ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
                C47936) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C2580 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47733) *
              C48012 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47733 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C2580) *
              C48005 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C2580 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47733) *
              C47992 +
          ((((C16765 + C16764) * C114 + (C16763 + C16762) * C47890) * C16183 +
            ((C16185 * C310 + C16181 * C329 + C16186 * C311 + C47985 * C330) *
                 C114 +
             (C16185 * C328 + C16181 * C340 + C16186 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C48013 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C48009 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47999 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C47688 * C47977) *
              C2688 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C48009 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C48013 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47999 +
           (((C17641 + C17640) * C114 + (C17639 + C17638) * C47890) * C16183 +
            ((C16185 * C1200 + C16181 * C1207 + C16186 * C1205 +
              C47985 * C1216) *
                 C114 +
             (C16185 * C1206 + C16181 * C1218 + C16186 * C1217 +
              C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C3342 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C47729 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47736 +
           ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
               C47985 * C1211) *
                  C114 +
              (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
               C47985 * C1220) *
                  C47890) *
                 C16183 +
             ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
                C3342 -
            (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
             ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
               C16181 * C1366) *
                  C47890 +
              (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
               C16181 * C1354) *
                  C114) *
                 C16183) *
                C47775) *
               C2948) *
              C47921 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C3342) *
               C47729 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C3342 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47736 +
           ((((C17847 + C17846) * C114 + (C17845 + C17844) * C47890) * C16183 +
             ((C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
               C47985 * C1765) *
                  C114 +
              (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
               C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
             ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
                C3342) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47771 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47778 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C3850) *
              C47729 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C47778 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47771 -
           (((C18554 + C18555) * C47890 + (C18556 + C18557) * C114) * C47954 +
            ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
              C16181 * C1363) *
                 C47890 +
             (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
              C16181 * C1348) *
                 C114) *
                C16183) *
               C3850) *
              C47736 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47771 -
           (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C47778 +
           (((C16185 * C1340 + C16181 * C1355 + C16186 * C6149 +
              C47985 * C6151) *
                 C114 +
             (C16185 * C1356 + C16181 * C1367 + C16186 * C6152 +
              C47985 * C6155) *
                 C47890) *
                C16183 +
            ((C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C114 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47890) *
                C47954) *
               C3850) *
              C2948) *
         C47642) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C3342 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C48013 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C47775 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C3342) *
              C48009 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C3342 -
           (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C47775) *
              C47999 +
          ((((C16185 * C1758 + C16181 * C1761 + C16186 * C6635 +
              C47985 * C6637) *
                 C114 +
             (C16185 * C1762 + C16181 * C1767 + C16186 * C6638 +
              C47985 * C6641) *
                 C47890) *
                C16183 +
            ((C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
              C47985 * C6639) *
                 C114 +
             (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
              C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C3342 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C2580 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47733) *
              C48003 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C3342) *
               C2580 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C3342 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47733) *
              C47990 +
          (((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
             ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
                C3342 -
            (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
             ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
                C47775) *
               C2580 +
           ((((C17125 + C17124) * C114 + (C17123 + C17122) * C47890) * C16183 +
             ((C16185 * C974 + C16181 * C983 + C16186 * C1640 +
               C47985 * C1641) *
                  C114 +
              (C16185 * C982 + C16181 * C989 + C16186 * C1642 +
               C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
             ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
                C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C48014 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C48011 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C48002 -
           (((C18696 + C18697) * C47890 + (C18698 + C18699) * C114) * C47954 +
            ((C16186 * C2474 + C47985 * C2479 + C16185 * C2070 +
              C16181 * C2080) *
                 C47890 +
             (C16186 * C2470 + C47985 * C2473 + C16185 * C2062 +
              C16181 * C2071) *
                 C114) *
                C16183) *
               C47983) *
              C2580 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C48011 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C48014 -
           (((C18554 + C18555) * C47890 + (C18556 + C18557) * C114) * C47954 +
            ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
              C16181 * C1363) *
                 C47890 +
             (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
              C16181 * C1348) *
                 C114) *
                C16183) *
               C48002 +
           (((C16185 * C2470 + C16181 * C2473 + C16186 * C7503 +
              C47985 * C7505) *
                 C114 +
             (C16185 * C2474 + C16181 * C2479 + C16186 * C7506 +
              C47985 * C7509) *
                 C47890) *
                C16183 +
            ((C16185 * C2471 + C16181 * C2475 + C16186 * C7504 +
              C47985 * C7507) *
                 C114 +
             (C16185 * C2476 + C16181 * C2480 + C16186 * C7508 +
              C47985 * C7510) *
                 C47890) *
                C47954) *
               C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47771 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47778 +
            (((C16185 * C508 + C16181 * C521 + C16186 * C1336 +
               C47985 * C1348) *
                  C114 +
              (C16185 * C522 + C16181 * C538 + C16186 * C1347 +
               C47985 * C1363) *
                  C47890) *
                 C16183 +
             ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
                C3850) *
               C2580 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47778 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47771 -
            (((C18554 + C18555) * C47890 + (C18556 + C18557) * C114) * C47954 +
             ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
               C16181 * C1363) *
                  C47890 +
              (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
               C16181 * C1348) *
                  C114) *
                 C16183) *
                C3850) *
               C47733) *
              C47921 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47778 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47771 -
            (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
             ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
                C3850) *
               C2580 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47771 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47778 +
            (((C18557 + C18556) * C114 + (C18555 + C18554) * C47890) * C16183 +
             ((C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
               C47985 * C1359) *
                  C114 +
              (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
               C47985 * C1369) *
                  C47890) *
                 C47954) *
                C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C3342 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C2580 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47733) *
              C48003 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C3342) *
               C2580 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C3342 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47733) *
              C47990 +
          (((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
             ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
                C3342 -
            (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
             ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
                C47775) *
               C2580 +
           ((((C17125 + C17124) * C114 + (C17123 + C17122) * C47890) * C16183 +
             ((C16185 * C974 + C16181 * C983 + C16186 * C1640 +
               C47985 * C1641) *
                  C114 +
              (C16185 * C982 + C16181 * C989 + C16186 * C1642 +
               C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
             ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
                C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C3342 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C48013 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C47775 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C3342) *
              C48009 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C3342 -
           (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C47775) *
              C47999 +
          ((((C16185 * C1758 + C16181 * C1761 + C16186 * C6635 +
              C47985 * C6637) *
                 C114 +
             (C16185 * C1762 + C16181 * C1767 + C16186 * C6638 +
              C47985 * C6641) *
                 C47890) *
                C16183 +
            ((C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
              C47985 * C6639) *
                 C114 +
             (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
              C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C1468 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C1469 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C1470 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C47688 * C47977) *
              C47921 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C1469 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C1468 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C1470 +
           (((C17641 + C17640) * C114 + (C17639 + C17638) * C47890) * C16183 +
            ((C16185 * C1200 + C16181 * C1207 + C16186 * C1205 +
              C47985 * C1216) *
                 C114 +
             (C16185 * C1206 + C16181 * C1218 + C16186 * C1217 +
              C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C47935 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47733) *
              C695 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47733 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C47935) *
              C696 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C47935 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47733) *
              C697 +
          ((((C16765 + C16764) * C114 + (C16763 + C16762) * C47890) * C16183 +
            ((C16185 * C310 + C16181 * C329 + C16186 * C311 + C47985 * C330) *
                 C114 +
             (C16185 * C328 + C16181 * C340 + C16186 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C1880 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C1881 +
            (((C16185 * C508 + C16181 * C521 + C16186 * C1336 +
               C47985 * C1348) *
                  C114 +
              (C16185 * C522 + C16181 * C538 + C16186 * C1347 +
               C47985 * C1363) *
                  C47890) *
                 C16183 +
             ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
                C47970) *
               C47935 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C1881 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C1880 -
            (((C18554 + C18555) * C47890 + (C18556 + C18557) * C114) * C47954 +
             ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
               C16181 * C1363) *
                  C47890 +
              (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
               C16181 * C1348) *
                  C114) *
                 C16183) *
                C47970) *
               C47733) *
              C47921 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C1881 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C1880 -
            (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
             ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
                C47970) *
               C47935 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C1880 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C1881 +
            (((C18557 + C18556) * C114 + (C18555 + C18554) * C47890) * C16183 +
             ((C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
               C47985 * C1359) *
                  C114 +
              (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
               C47985 * C1369) *
                  C47890) *
                 C47954) *
                C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47936 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C1468 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C47775 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47936) *
              C1469 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47936 -
           (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C47775) *
              C1470 +
          ((((C16185 * C1758 + C16181 * C1761 + C16186 * C6635 +
              C47985 * C6637) *
                 C114 +
             (C16185 * C1762 + C16181 * C1767 + C16186 * C6638 +
              C47985 * C6641) *
                 C47890) *
                C16183 +
            ((C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
              C47985 * C6639) *
                 C114 +
             (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
              C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47936 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C47935 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47936) *
               C47733) *
              C299 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47936) *
               C47935 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47936 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47733) *
              C300 +
          (((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
             ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
                C47936 -
            (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
             ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
                C47775) *
               C47935 +
           ((((C17125 + C17124) * C114 + (C17123 + C17122) * C47890) * C16183 +
             ((C16185 * C974 + C16181 * C983 + C16186 * C1640 +
               C47985 * C1641) *
                  C114 +
              (C16185 * C982 + C16181 * C989 + C16186 * C1642 +
               C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
             ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
                C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C2348 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C2349 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C2350 -
           (((C18696 + C18697) * C47890 + (C18698 + C18699) * C114) * C47954 +
            ((C16186 * C2474 + C47985 * C2479 + C16185 * C2070 +
              C16181 * C2080) *
                 C47890 +
             (C16186 * C2470 + C47985 * C2473 + C16185 * C2062 +
              C16181 * C2071) *
                 C114) *
                C16183) *
               C47983) *
              C47935 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C2349 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C2348 -
           (((C18554 + C18555) * C47890 + (C18556 + C18557) * C114) * C47954 +
            ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
              C16181 * C1363) *
                 C47890 +
             (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
              C16181 * C1348) *
                 C114) *
                C16183) *
               C2350 +
           (((C16185 * C2470 + C16181 * C2473 + C16186 * C7503 +
              C47985 * C7505) *
                 C114 +
             (C16185 * C2474 + C16181 * C2479 + C16186 * C7506 +
              C47985 * C7509) *
                 C47890) *
                C16183 +
            ((C16185 * C2471 + C16181 * C2475 + C16186 * C7504 +
              C47985 * C7507) *
                 C114 +
             (C16185 * C2476 + C16181 * C2480 + C16186 * C7508 +
              C47985 * C7510) *
                 C47890) *
                C47954) *
               C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16185 * C115 + C16181 * C122 + C16186 * C304 +
                 C47985 * C317) *
                    C114 +
                (C16185 * C123 + C16181 * C136 + C16186 * C316 +
                 C47985 * C334) *
                    C47890) *
                   C16183 +
               ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) *
                   C47954) *
                  C47688 * C47670 * C108 -
              (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) *
                   C47954 +
               ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) *
                   C16183) *
                  C47688 * C47670 * C109 +
              (((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) *
                   C16183 +
               ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) *
                   C47954) *
                  C47688 * C47670 * C110 -
              (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) *
                   C47954 +
               ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) *
                   C16183) *
                  C47688 * C47670 * C111 +
              (((C16235 + C16234) * C114 + (C16233 + C16232) * C47890) *
                   C16183 +
               ((C16185 * C120 + C16181 * C133 + C16186 * C699 +
                 C47985 * C700) *
                    C114 +
                (C16185 * C132 + C16181 * C141 + C16186 * C701 +
                 C47985 * C702) *
                    C47890) *
                   C47954) *
                  C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16185 * C115 + C16181 * C122 + C16186 * C304 +
                  C47985 * C317) *
                     C114 +
                 (C16185 * C123 + C16181 * C136 + C16186 * C316 +
                  C47985 * C334) *
                     C47890) *
                    C16183 +
                ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) *
                    C47954) *
                   C47688 * C48006 -
               (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) *
                    C47954 +
                ((C16186 * C319 + C47985 * C335 + C16185 * C316 +
                  C16181 * C334) *
                     C47890 +
                 (C16186 * C305 + C47985 * C318 + C16185 * C304 +
                  C16181 * C317) *
                     C114) *
                    C16183) *
                   C47688 * C47994 +
               (((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
                  C47985 * C1211) *
                     C114 +
                 (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
                  C47985 * C1220) *
                     C47890) *
                    C16183 +
                ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) *
                    C47954) *
                   C47688 * C47967) *
                  C299 +
              ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) *
                    C16183 +
                ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) *
                    C47954) *
                   C47688 * C47994 -
               (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) *
                    C47954 +
                ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) *
                    C16183) *
                   C47688 * C48006 -
               (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) *
                    C47954 +
                ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) *
                    C16183) *
                   C47688 * C47967) *
                  C300 +
              ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) *
                    C16183 +
                ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) *
                    C47954) *
                   C47688 * C48006 -
               (((C16186 * C326 + C47985 * C339 + C16185 * C325 +
                  C16181 * C338) *
                     C47890 +
                 (C16186 * C309 + C47985 * C327 + C16185 * C308 +
                  C16181 * C324) *
                     C114) *
                    C47954 +
                ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) *
                    C16183) *
                   C47688 * C47994 +
               (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) *
                    C16183 +
                ((C16185 * C309 + C16181 * C327 + C16186 * C1474 +
                  C47985 * C1475) *
                     C114 +
                 (C16185 * C326 + C16181 * C339 + C16186 * C1476 +
                  C47985 * C1477) *
                     C47890) *
                    C47954) *
                   C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C48007 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47996 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C47670 * C299 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C47996 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C48007 -
           (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
            ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
               C47970) *
              C47670 * C300 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C48007 -
           (((C16186 * C982 + C47985 * C989 + C16185 * C528 + C16181 * C541) *
                 C47890 +
             (C16186 * C974 + C47985 * C983 + C16185 * C511 + C16181 * C527) *
                 C114) *
                C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C47996 +
           (((C16623 + C16622) * C114 + (C16621 + C16620) * C47890) * C16183 +
            ((C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                 C114 +
             (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C1127 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C1127 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C1126 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47967) *
              C47990 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C1127 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C47688 * C1194 -
          (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
           ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C47890 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C114) *
               C16183) *
              C47688 * C1195 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C114 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C47890) *
               C16183 +
           ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
              C47688 * C1196 -
          (((C16186 * C1215 + C47985 * C1222 + C16185 * C1208 +
             C16181 * C1219) *
                C47890 +
            (C16186 * C1204 + C47985 * C1214 + C16185 * C1201 +
             C16181 * C1209) *
                C114) *
               C47954 +
           ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C47890 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C114) *
               C16183) *
              C47688 * C1197 +
          (((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 +
             C47985 * C5997) *
                C114 +
            (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 +
             C47985 * C6001) *
                C47890) *
               C16183 +
           ((C16185 * C1204 + C16181 * C1214 + C16186 * C5996 +
             C47985 * C5999) *
                C114 +
            (C16185 * C1215 + C16181 * C1222 + C16186 * C6000 +
             C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C48007 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47996 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C1126 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C47996 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C48007 -
           (((C16186 * C1358 + C47985 * C1368 + C16185 * C1345 +
              C16181 * C1362) *
                 C47890 +
             (C16186 * C1341 + C47985 * C1357 + C16185 * C1335 +
              C16181 * C1346) *
                 C114) *
                C47954 +
            ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
              C16181 * C1363) *
                 C47890 +
             (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
              C16181 * C1348) *
                 C114) *
                C16183) *
               C47970) *
              C1127 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C48007 -
           (((C16186 * C1764 + C47985 * C1768 + C16185 * C1351 +
              C16181 * C1365) *
                 C47890 +
             (C16186 * C1759 + C47985 * C1763 + C16185 * C1338 +
              C16181 * C1352) *
                 C114) *
                C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C47996 +
           (((C16185 * C1340 + C16181 * C1355 + C16186 * C6149 +
              C47985 * C6151) *
                 C114 +
             (C16185 * C1356 + C16181 * C1367 + C16186 * C6152 +
              C47985 * C6155) *
                 C47890) *
                C16183 +
            ((C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C114 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C1880 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C47670 * C48003 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C1881 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C1880 -
           (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
            ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
               C47970) *
              C47670 * C47990 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C1880 -
           (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C1881 +
           (((C16623 + C16622) * C114 + (C16621 + C16620) * C47890) * C16183 +
            ((C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                 C114 +
             (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C1880 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C48006 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C1881 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C1880 -
           (((C16186 * C1358 + C47985 * C1368 + C16185 * C1345 +
              C16181 * C1362) *
                 C47890 +
             (C16186 * C1341 + C47985 * C1357 + C16185 * C1335 +
              C16181 * C1346) *
                 C114) *
                C47954 +
            ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
              C16181 * C1363) *
                 C47890 +
             (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
              C16181 * C1348) *
                 C114) *
                C16183) *
               C47970) *
              C47994 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C1880 -
           (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C1881 +
           (((C16185 * C1340 + C16181 * C1355 + C16186 * C6149 +
              C47985 * C6151) *
                 C114 +
             (C16185 * C1356 + C16181 * C1367 + C16186 * C6152 +
              C47985 * C6155) *
                 C47890) *
                C16183 +
            ((C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C114 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C2055 -
          (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
           ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                C47890 +
            (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                C114) *
               C16183) *
              C2056 +
          (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                C114 +
            (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                C47890) *
               C16183 +
           ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
              C2057 -
          (((C16186 * C2476 + C47985 * C2480 + C16185 * C2068 +
             C16181 * C2079) *
                C47890 +
            (C16186 * C2471 + C47985 * C2475 + C16185 * C2061 +
             C16181 * C2069) *
                C114) *
               C47954 +
           ((C16186 * C2474 + C47985 * C2479 + C16185 * C2070 +
             C16181 * C2080) *
                C47890 +
            (C16186 * C2470 + C47985 * C2473 + C16185 * C2062 +
             C16181 * C2071) *
                C114) *
               C16183) *
              C2058 +
          (((C16185 * C2063 + C16181 * C2072 + C16186 * C7017 +
             C47985 * C7019) *
                C114 +
            (C16185 * C2073 + C16181 * C2081 + C16186 * C7020 +
             C47985 * C7023) *
                C47890) *
               C16183 +
           ((C16185 * C2064 + C16181 * C2074 + C16186 * C7018 +
             C47985 * C7021) *
                C114 +
            (C16185 * C2075 + C16181 * C2082 + C16186 * C7022 +
             C47985 * C7024) *
                C47890) *
               C47954) *
              C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47936 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C1126 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47936) *
               C1127 +
           ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
               C47985 * C1211) *
                  C114 +
              (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
               C47985 * C1220) *
                  C47890) *
                 C16183 +
             ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
                C47936 -
            (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
             ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
               C16181 * C1366) *
                  C47890 +
              (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
               C16181 * C1354) *
                  C114) *
                 C16183) *
                C47775) *
               C47967) *
              C47921 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47936) *
               C1126 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47936 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C1127 +
           ((((C17847 + C17846) * C114 + (C17845 + C17844) * C47890) * C16183 +
             ((C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
               C47985 * C1765) *
                  C114 +
              (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
               C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
             ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
                C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47936 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C47670 * C695 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C47775 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47936) *
              C47670 * C696 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47936 -
           (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C47775) *
              C47670 * C697 +
          ((((C16907 + C16906) * C114 + (C16905 + C16904) * C47890) * C16183 +
            ((C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
                 C114 +
             (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C2348 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C2349 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C2350 -
           (((C18696 + C18697) * C47890 + (C18698 + C18699) * C114) * C47954 +
            ((C16186 * C2474 + C47985 * C2479 + C16185 * C2070 +
              C16181 * C2080) *
                 C47890 +
             (C16186 * C2470 + C47985 * C2473 + C16185 * C2062 +
              C16181 * C2071) *
                 C114) *
                C16183) *
               C47983) *
              C47670 * C47921 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C2349 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C2348 -
           (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
            ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
               C2350 +
           (((C18699 + C18698) * C114 + (C18697 + C18696) * C47890) * C16183 +
            ((C16185 * C2060 + C16181 * C2067 + C16186 * C2472 +
              C47985 * C2477) *
                 C114 +
             (C16185 * C2066 + C16181 * C2078 + C16186 * C2478 +
              C47985 * C2481) *
                 C47890) *
                C47954) *
               C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C48006 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47994 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47967) *
              C299 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47994 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C48006 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47967) *
              C300 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C48006 -
           (((C16186 * C326 + C47985 * C339 + C16185 * C325 + C16181 * C338) *
                 C47890 +
             (C16186 * C309 + C47985 * C327 + C16185 * C308 + C16181 * C324) *
                 C114) *
                C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47994 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C47688 * C47670 * C108 -
          (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
           ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
              C47688 * C47670 * C109 +
          (((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
           ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
              C47688 * C47670 * C110 -
          (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
           ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
              C47688 * C47670 * C111 +
          (((C16235 + C16234) * C114 + (C16233 + C16232) * C47890) * C16183 +
           ((C16185 * C120 + C16181 * C133 + C16186 * C699 + C47985 * C700) *
                C114 +
            (C16185 * C132 + C16181 * C141 + C16186 * C701 + C47985 * C702) *
                C47890) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C1127 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C1127 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C1126 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47967) *
              C47990 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C1127 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C47688 * C1194 -
          (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
           ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C47890 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C114) *
               C16183) *
              C47688 * C1195 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C114 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C47890) *
               C16183 +
           ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
              C47688 * C1196 -
          (((C16186 * C1215 + C47985 * C1222 + C16185 * C1208 +
             C16181 * C1219) *
                C47890 +
            (C16186 * C1204 + C47985 * C1214 + C16185 * C1201 +
             C16181 * C1209) *
                C114) *
               C47954 +
           ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C47890 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C114) *
               C16183) *
              C47688 * C1197 +
          (((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 +
             C47985 * C5997) *
                C114 +
            (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 +
             C47985 * C6001) *
                C47890) *
               C16183 +
           ((C16185 * C1204 + C16181 * C1214 + C16186 * C5996 +
             C47985 * C5999) *
                C114 +
            (C16185 * C1215 + C16181 * C1222 + C16186 * C6000 +
             C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C1880 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C47670 * C48003 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C1881 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C1880 -
           (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
            ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
               C47970) *
              C47670 * C47990 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C1880 -
           (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C1881 +
           (((C16623 + C16622) * C114 + (C16621 + C16620) * C47890) * C16183 +
            ((C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                 C114 +
             (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C1880 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C1881 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C48006 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C1881 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C1880 -
           (((C16186 * C1358 + C47985 * C1368 + C16185 * C1345 +
              C16181 * C1362) *
                 C47890 +
             (C16186 * C1341 + C47985 * C1357 + C16185 * C1335 +
              C16181 * C1346) *
                 C114) *
                C47954 +
            ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
              C16181 * C1363) *
                 C47890 +
             (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
              C16181 * C1348) *
                 C114) *
                C16183) *
               C47970) *
              C47994 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C1880 -
           (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C1881 +
           (((C16185 * C1340 + C16181 * C1355 + C16186 * C6149 +
              C47985 * C6151) *
                 C114 +
             (C16185 * C1356 + C16181 * C1367 + C16186 * C6152 +
              C47985 * C6155) *
                 C47890) *
                C16183 +
            ((C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C114 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C3342 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C47935 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47733) *
              C47647 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C3342) *
               C47935 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C3342 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47733) *
              C47656 +
          (((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
             ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
                C3342 -
            (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
             ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
                C47775) *
               C47935 +
           ((((C17125 + C17124) * C114 + (C17123 + C17122) * C47890) * C16183 +
             ((C16185 * C974 + C16181 * C983 + C16186 * C1640 +
               C47985 * C1641) *
                  C114 +
              (C16185 * C982 + C16181 * C989 + C16186 * C1642 +
               C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
             ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
                C3342) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47771 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47778 +
            (((C16185 * C508 + C16181 * C521 + C16186 * C1336 +
               C47985 * C1348) *
                  C114 +
              (C16185 * C522 + C16181 * C538 + C16186 * C1347 +
               C47985 * C1363) *
                  C47890) *
                 C16183 +
             ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
                C3850) *
               C47935 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47778 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47771 -
            (((C18554 + C18555) * C47890 + (C18556 + C18557) * C114) * C47954 +
             ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
               C16181 * C1363) *
                  C47890 +
              (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
               C16181 * C1348) *
                  C114) *
                 C16183) *
                C3850) *
               C47733) *
              C2688 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47778 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47771 -
            (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
             ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
                C3850) *
               C47935 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47771 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47778 +
            (((C18557 + C18556) * C114 + (C18555 + C18554) * C47890) * C16183 +
             ((C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
               C47985 * C1359) *
                  C114 +
              (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
               C47985 * C1369) *
                  C47890) *
                 C47954) *
                C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C3342 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C48006 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47994 +
           ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
               C47985 * C1211) *
                  C114 +
              (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
               C47985 * C1220) *
                  C47890) *
                 C16183 +
             ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
                C3342 -
            (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
             ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
               C16181 * C1366) *
                  C47890 +
              (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
               C16181 * C1354) *
                  C114) *
                 C16183) *
                C47775) *
               C47967) *
              C2688 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C3342) *
               C48006 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C3342 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47994 +
           ((((C17847 + C17846) * C114 + (C17845 + C17844) * C47890) * C16183 +
             ((C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
               C47985 * C1765) *
                  C114 +
              (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
               C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
             ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
                C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C3342 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C47670 * C48012 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C47775 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C3342) *
              C47670 * C48005 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C3342 -
           (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C47775) *
              C47670 * C47992 +
          ((((C16907 + C16906) * C114 + (C16905 + C16904) * C47890) * C16183 +
            ((C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
                 C114 +
             (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C48014 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C48011 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C48002 -
           (((C18696 + C18697) * C47890 + (C18698 + C18699) * C114) * C47954 +
            ((C16186 * C2474 + C47985 * C2479 + C16185 * C2070 +
              C16181 * C2080) *
                 C47890 +
             (C16186 * C2470 + C47985 * C2473 + C16185 * C2062 +
              C16181 * C2071) *
                 C114) *
                C16183) *
               C47983) *
              C47670 * C2688 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C48011 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C48014 -
           (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
            ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
               C48002 +
           (((C18699 + C18698) * C114 + (C18697 + C18696) * C47890) * C16183 +
            ((C16185 * C2060 + C16181 * C2067 + C16186 * C2472 +
              C47985 * C2477) *
                 C114 +
             (C16185 * C2066 + C16181 * C2078 + C16186 * C2478 +
              C47985 * C2481) *
                 C47890) *
                C47954) *
               C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47771 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47778 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C3850) *
              C47670 * C47647 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C47778 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47771 -
           (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
            ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
               C3850) *
              C47670 * C47656 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47771 -
           (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C47778 +
           (((C16623 + C16622) * C114 + (C16621 + C16620) * C47890) * C16183 +
            ((C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                 C114 +
             (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C3850) *
              C47670 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C3342 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C47670 * C48012 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C47775 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C3342) *
              C47670 * C48005 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C3342 -
           (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C47775) *
              C47670 * C47992 +
          ((((C16907 + C16906) * C114 + (C16905 + C16904) * C47890) * C16183 +
            ((C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
                 C114 +
             (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C3342 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C48006 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C3342) *
               C47994 +
           ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
               C47985 * C1211) *
                  C114 +
              (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
               C47985 * C1220) *
                  C47890) *
                 C16183 +
             ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
                C3342 -
            (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
             ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
               C16181 * C1366) *
                  C47890 +
              (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
               C16181 * C1354) *
                  C114) *
                 C16183) *
                C47775) *
               C47967) *
              C2688 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C3342) *
               C48006 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C3342 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47994 +
           ((((C17847 + C17846) * C114 + (C17845 + C17844) * C47890) * C16183 +
             ((C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
               C47985 * C1765) *
                  C114 +
              (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
               C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
             ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
                C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C47935 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47733) *
              C695 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47733 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C47935) *
              C696 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C47935 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47733) *
              C697 +
          ((((C16765 + C16764) * C114 + (C16763 + C16762) * C47890) * C16183 +
            ((C16185 * C310 + C16181 * C329 + C16186 * C311 + C47985 * C330) *
                 C114 +
             (C16185 * C328 + C16181 * C340 + C16186 * C331 + C47985 * C341) *
                 C47890) *
                C47954) *
               C47688 * C47733 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C1468 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C1469 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C1470 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C47688 * C47977) *
              C47921 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C1469 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C1468 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C1470 +
           (((C17641 + C17640) * C114 + (C17639 + C17638) * C47890) * C16183 +
            ((C16185 * C1200 + C16181 * C1207 + C16186 * C1205 +
              C47985 * C1216) *
                 C114 +
             (C16185 * C1206 + C16181 * C1218 + C16186 * C1217 +
              C47985 * C1223) *
                 C47890) *
                C47954) *
               C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47936 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C47935 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47936) *
               C47733) *
              C299 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47936) *
               C47935 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47936 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C47733) *
              C300 +
          (((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
             ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
                C47936 -
            (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
             ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
                C47775) *
               C47935 +
           ((((C17125 + C17124) * C114 + (C17123 + C17122) * C47890) * C16183 +
             ((C16185 * C974 + C16181 * C983 + C16186 * C1640 +
               C47985 * C1641) *
                  C114 +
              (C16185 * C982 + C16181 * C989 + C16186 * C1642 +
               C47985 * C1643) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
             ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
                C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47936 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C1468 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C47775 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47936) *
              C1469 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47936 -
           (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C47775) *
              C1470 +
          ((((C16185 * C1758 + C16181 * C1761 + C16186 * C6635 +
              C47985 * C6637) *
                 C114 +
             (C16185 * C1762 + C16181 * C1767 + C16186 * C6638 +
              C47985 * C6641) *
                 C47890) *
                C16183 +
            ((C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
              C47985 * C6639) *
                 C114 +
             (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
              C47985 * C6642) *
                 C47890) *
                C47954) *
               C47775 -
           (((C17638 + C17639) * C47890 + (C17640 + C17641) * C114) * C47954 +
            ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
              C16181 * C1220) *
                 C47890 +
             (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
              C16181 * C1211) *
                 C114) *
                C16183) *
               C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C48006 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47994 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47967) *
              C299 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47994 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C48006 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47967) *
              C300 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C48006 -
           (((C16186 * C326 + C47985 * C339 + C16185 * C325 + C16181 * C338) *
                 C47890 +
             (C16186 * C309 + C47985 * C327 + C16185 * C308 + C16181 * C324) *
                 C114) *
                C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47994 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C47688 * C47670 * C108 -
          (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
           ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
              C47688 * C47670 * C109 +
          (((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
           ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
              C47688 * C47670 * C110 -
          (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
           ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
              C47688 * C47670 * C111 +
          (((C16235 + C16234) * C114 + (C16233 + C16232) * C47890) * C16183 +
           ((C16185 * C120 + C16181 * C133 + C16186 * C699 + C47985 * C700) *
                C114 +
            (C16185 * C132 + C16181 * C141 + C16186 * C701 + C47985 * C702) *
                C47890) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C48007 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47996 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C47670 * C299 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C47996 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C48007 -
           (((C16620 + C16621) * C47890 + (C16622 + C16623) * C114) * C47954 +
            ((C16615 + C16614) * C47890 + (C16613 + C16612) * C114) * C16183) *
               C47970) *
              C47670 * C300 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C48007 -
           (((C16186 * C982 + C47985 * C989 + C16185 * C528 + C16181 * C541) *
                 C47890 +
             (C16186 * C974 + C47985 * C983 + C16185 * C511 + C16181 * C527) *
                 C114) *
                C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C47996 +
           (((C16623 + C16622) * C114 + (C16621 + C16620) * C47890) * C16183 +
            ((C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                 C114 +
             (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                 C47890) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C1127 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C1127 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C1126 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47967) *
              C47990 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C1127 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C47688 * C1194 -
          (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
           ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C47890 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C114) *
               C16183) *
              C47688 * C1195 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C114 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C47890) *
               C16183 +
           ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
              C47688 * C1196 -
          (((C16186 * C1215 + C47985 * C1222 + C16185 * C1208 +
             C16181 * C1219) *
                C47890 +
            (C16186 * C1204 + C47985 * C1214 + C16185 * C1201 +
             C16181 * C1209) *
                C114) *
               C47954 +
           ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C47890 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C114) *
               C16183) *
              C47688 * C1197 +
          (((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 +
             C47985 * C5997) *
                C114 +
            (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 +
             C47985 * C6001) *
                C47890) *
               C16183 +
           ((C16185 * C1204 + C16181 * C1214 + C16186 * C5996 +
             C47985 * C5999) *
                C114 +
            (C16185 * C1215 + C16181 * C1222 + C16186 * C6000 +
             C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C48007 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47996 +
           (((C16185 * C508 + C16181 * C521 + C16186 * C1336 + C47985 * C1348) *
                 C114 +
             (C16185 * C522 + C16181 * C538 + C16186 * C1347 + C47985 * C1363) *
                 C47890) *
                C16183 +
            ((C16612 + C16613) * C114 + (C16614 + C16615) * C47890) * C47954) *
               C47970) *
              C1126 +
          ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 + C47985 * C1354) *
                 C114 +
             (C16185 * C977 + C16181 * C986 + C16186 * C1353 + C47985 * C1366) *
                 C47890) *
                C16183 +
            ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
               C47996 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C48007 -
           (((C16186 * C1358 + C47985 * C1368 + C16185 * C1345 +
              C16181 * C1362) *
                 C47890 +
             (C16186 * C1341 + C47985 * C1357 + C16185 * C1335 +
              C16181 * C1346) *
                 C114) *
                C47954 +
            ((C16186 * C1356 + C47985 * C1367 + C16185 * C1347 +
              C16181 * C1363) *
                 C47890 +
             (C16186 * C1340 + C47985 * C1355 + C16185 * C1336 +
              C16181 * C1348) *
                 C114) *
                C16183) *
               C47970) *
              C1127 +
          ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C48007 -
           (((C16186 * C1764 + C47985 * C1768 + C16185 * C1351 +
              C16181 * C1365) *
                 C47890 +
             (C16186 * C1759 + C47985 * C1763 + C16185 * C1338 +
              C16181 * C1352) *
                 C114) *
                C47954 +
            ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
              C16181 * C1366) *
                 C47890 +
             (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
              C16181 * C1354) *
                 C114) *
                C16183) *
               C47996 +
           (((C16185 * C1340 + C16181 * C1355 + C16186 * C6149 +
              C47985 * C6151) *
                 C114 +
             (C16185 * C1356 + C16181 * C1367 + C16186 * C6152 +
              C47985 * C6155) *
                 C47890) *
                C16183 +
            ((C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C114 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47890) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47936 -
           (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
            ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                 C47890 +
             (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                 C114) *
                C16183) *
               C47775) *
              C47670 * C695 +
          ((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
            ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
               C47775 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47936) *
              C47670 * C696 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47936 -
           (((C16904 + C16905) * C47890 + (C16906 + C16907) * C114) * C47954 +
            ((C16619 + C16618) * C47890 + (C16617 + C16616) * C114) * C16183) *
               C47775) *
              C47670 * C697 +
          ((((C16907 + C16906) * C114 + (C16905 + C16904) * C47890) * C16183 +
            ((C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
                 C114 +
             (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
                 C47890) *
                C47954) *
               C47775 -
           (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
            ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
               C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                  C114 +
              (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                  C47890) *
                 C16183 +
             ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
                C47936 -
            (((C16608 + C16609) * C47890 + (C16610 + C16611) * C114) * C47954 +
             ((C16186 * C977 + C47985 * C986 + C16185 * C519 + C16181 * C537) *
                  C47890 +
              (C16186 * C971 + C47985 * C976 + C16185 * C507 + C16181 * C520) *
                  C114) *
                 C16183) *
                C47775) *
               C1126 +
           ((((C16185 * C971 + C16181 * C976 + C16186 * C1339 +
               C47985 * C1354) *
                  C114 +
              (C16185 * C977 + C16181 * C986 + C16186 * C1353 +
               C47985 * C1366) *
                  C47890) *
                 C16183 +
             ((C17118 + C17119) * C114 + (C17120 + C17121) * C47890) * C47954) *
                C47775 -
            (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
             ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                  C47890 +
              (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                  C114) *
                 C16183) *
                C47936) *
               C1127 +
           ((((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
               C47985 * C1211) *
                  C114 +
              (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
               C47985 * C1220) *
                  C47890) *
                 C16183 +
             ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
                C47936 -
            (((C17844 + C17845) * C47890 + (C17846 + C17847) * C114) * C47954 +
             ((C16186 * C1762 + C47985 * C1767 + C16185 * C1353 +
               C16181 * C1366) *
                  C47890 +
              (C16186 * C1758 + C47985 * C1761 + C16185 * C1339 +
               C16181 * C1354) *
                  C114) *
                 C16183) *
                C47775) *
               C47967) *
              C47921 +
          (((((C16611 + C16610) * C114 + (C16609 + C16608) * C47890) * C16183 +
             ((C16616 + C16617) * C114 + (C16618 + C16619) * C47890) * C47954) *
                C47775 -
            (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
             ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
                C47936) *
               C1126 +
           ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
             ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
                C47936 -
            (((C17122 + C17123) * C47890 + (C17124 + C17125) * C114) * C47954 +
             ((C17121 + C17120) * C47890 + (C17119 + C17118) * C114) * C16183) *
                C47775) *
               C1127 +
           ((((C17847 + C17846) * C114 + (C17845 + C17844) * C47890) * C16183 +
             ((C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
               C47985 * C1765) *
                  C114 +
              (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
               C47985 * C1769) *
                  C47890) *
                 C47954) *
                C47775 -
            (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
             ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
                C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C47688 * C47670 * C108 -
          (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
           ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
              C47688 * C47670 * C109 +
          (((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
           ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
              C47688 * C47670 * C110 -
          (((C16232 + C16233) * C47890 + (C16234 + C16235) * C114) * C47954 +
           ((C16231 + C16230) * C47890 + (C16229 + C16228) * C114) * C16183) *
              C47688 * C47670 * C111 +
          (((C16235 + C16234) * C114 + (C16233 + C16232) * C47890) * C16183 +
           ((C16185 * C120 + C16181 * C133 + C16186 * C699 + C47985 * C700) *
                C114 +
            (C16185 * C132 + C16181 * C141 + C16186 * C701 + C47985 * C702) *
                C47890) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C48006 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C47994 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47967) *
              C299 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C47994 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C48006 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47967) *
              C300 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C48006 -
           (((C16186 * C326 + C47985 * C339 + C16185 * C325 + C16181 * C338) *
                 C47890 +
             (C16186 * C309 + C47985 * C327 + C16185 * C308 + C16181 * C324) *
                 C114) *
                C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C47994 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C114 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C47890) *
                C16183 +
            ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
            ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C47890 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C114) *
                C16183) *
               C47688 * C1127 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C114 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C47890) *
                C16183 +
            ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
               C47688 * C47967) *
              C48003 +
          ((((C16417 + C16416) * C114 + (C16415 + C16414) * C47890) * C16183 +
            ((C16422 + C16423) * C114 + (C16424 + C16425) * C47890) * C47954) *
               C47688 * C1127 -
           (((C16224 + C16225) * C47890 + (C16226 + C16227) * C114) * C47954 +
            ((C16223 + C16222) * C47890 + (C16221 + C16220) * C114) * C16183) *
               C47688 * C1126 -
           (((C16426 + C16427) * C47890 + (C16428 + C16429) * C114) * C47954 +
            ((C16421 + C16420) * C47890 + (C16419 + C16418) * C114) * C16183) *
               C47688 * C47967) *
              C47990 +
          ((((C16227 + C16226) * C114 + (C16225 + C16224) * C47890) * C16183 +
            ((C16228 + C16229) * C114 + (C16230 + C16231) * C47890) * C47954) *
               C47688 * C1126 -
           (((C16762 + C16763) * C47890 + (C16764 + C16765) * C114) * C47954 +
            ((C16425 + C16424) * C47890 + (C16423 + C16422) * C114) * C16183) *
               C47688 * C1127 +
           (((C16429 + C16428) * C114 + (C16427 + C16426) * C47890) * C16183 +
            ((C16185 * C309 + C16181 * C327 + C16186 * C1474 + C47985 * C1475) *
                 C114 +
             (C16185 * C326 + C16181 * C339 + C16186 * C1476 + C47985 * C1477) *
                 C47890) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C114 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C47890) *
               C16183 +
           ((C16220 + C16221) * C114 + (C16222 + C16223) * C47890) * C47954) *
              C47688 * C1194 -
          (((C16414 + C16415) * C47890 + (C16416 + C16417) * C114) * C47954 +
           ((C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C47890 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C114) *
               C16183) *
              C47688 * C1195 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C114 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C47890) *
               C16183 +
           ((C16418 + C16419) * C114 + (C16420 + C16421) * C47890) * C47954) *
              C47688 * C1196 -
          (((C16186 * C1215 + C47985 * C1222 + C16185 * C1208 +
             C16181 * C1219) *
                C47890 +
            (C16186 * C1204 + C47985 * C1214 + C16185 * C1201 +
             C16181 * C1209) *
                C114) *
               C47954 +
           ((C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C47890 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C114) *
               C16183) *
              C47688 * C1197 +
          (((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 +
             C47985 * C5997) *
                C114 +
            (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 +
             C47985 * C6001) *
                C47890) *
               C16183 +
           ((C16185 * C1204 + C16181 * C1214 + C16186 * C5996 +
             C47985 * C5999) *
                C114 +
            (C16185 * C1215 + C16181 * C1222 + C16186 * C6000 +
             C47985 * C6002) *
                C47890) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C47729 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47736 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C2948) *
                       C47647 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47736 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C47729 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C2948) *
                       C47656 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C47729 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47736 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C2948) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C47729 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47936) *
                        C47736 +
                    (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                       C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                          C114 +
                      (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                       C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                       C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                          C47890 +
                      (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                       C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                          C114) *
                         C47619 * C47775) *
                        C2948) *
                       C2688 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47936) *
                        C47729 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47736 +
                    (((C21859 * C1338 + C21855 * C1352 + C21860 * C1759 +
                       C21856 * C1763 + C21861 * C6636 + C21857 * C6639) *
                          C114 +
                      (C21859 * C1351 + C21855 * C1365 + C21860 * C1764 +
                       C21856 * C1768 + C21861 * C6640 + C21857 * C6642) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                       C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                          C47890 +
                      (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                       C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                          C114) *
                         C47619 * C47936) *
                        C2948) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C48013 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C48009 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47999 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C47688 * C47977) *
                       C2688 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C48009 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C48013 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47999 +
                    ((C21859 * C1201 + C21855 * C1209 + C21860 * C1204 +
                      C21856 * C1214 + C21861 * C5996 + C21857 * C5999) *
                         C114 +
                     (C21859 * C1208 + C21855 * C1219 + C21860 * C1215 +
                      C21856 * C1222 + C21861 * C6000 + C21857 * C6002) *
                         C47890) *
                        C47619 * C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C2580 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C48012 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C2580) *
                       C48005 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C2580 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C47992 +
                   (((C21859 * C308 + C21855 * C324 + C21860 * C309 +
                      C21856 * C327 + C21861 * C1474 + C21857 * C1475) *
                         C114 +
                     (C21859 * C325 + C21855 * C338 + C21860 * C326 +
                      C21856 * C339 + C21861 * C1476 + C21857 * C1477) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C47688 * C2580) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C48007 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47996 +
                     ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                       C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                          C114 +
                      (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                       C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                          C47890) *
                         C47619 * C47970) *
                        C2580 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47996 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C48007 -
                     ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                       C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                          C47890 +
                      (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                       C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                          C114) *
                         C47619 * C47970) *
                        C47733) *
                       C2688 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47996 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C48007 -
                     ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                       C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                          C47890 +
                      (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                       C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                          C114) *
                         C47619 * C47970) *
                        C2580 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C48007 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47996 +
                     ((C21859 * C1335 + C21855 * C1346 + C21860 * C1341 +
                       C21856 * C1357 + C21861 * C6150 + C21857 * C6153) *
                          C114 +
                      (C21859 * C1345 + C21855 * C1362 + C21860 * C1358 +
                       C21856 * C1368 + C21861 * C6154 + C21857 * C6156) *
                          C47890) *
                         C47619 * C47970) *
                        C47733) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C2580 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47936) *
                        C47733) *
                       C47647 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47936) *
                        C2580 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47733) *
                       C47656 +
                   ((((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                       C21856 * C313 + C21861 * C307 + C21857 * C322) *
                          C114 +
                      (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                       C21856 * C332 + C21861 * C323 + C21857 * C337) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                       C21856 * C988 + C21859 * C515 + C21855 * C535) *
                          C47890 +
                      (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                       C21856 * C980 + C21859 * C505 + C21855 * C516) *
                          C114) *
                         C47619 * C47775) *
                        C2580 +
                    (((C21859 * C973 + C21855 * C980 + C21860 * C1337 +
                       C21856 * C1350 + C21861 * C1760 + C21857 * C1765) *
                          C114 +
                      (C21859 * C981 + C21855 * C988 + C21860 * C1349 +
                       C21856 * C1364 + C21861 * C1766 + C21857 * C1769) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                       C21856 * C337 + C21859 * C312 + C21855 * C332) *
                          C47890 +
                      (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                       C21856 * C322 + C21859 * C302 + C21855 * C313) *
                          C114) *
                         C47619 * C47936) *
                        C47733) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C2580 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C48012 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C2580) *
                       C48005 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C2580 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C47992 +
                   (((C21859 * C308 + C21855 * C324 + C21860 * C309 +
                      C21856 * C327 + C21861 * C1474 + C21857 * C1475) *
                         C114 +
                     (C21859 * C325 + C21855 * C338 + C21860 * C326 +
                      C21856 * C339 + C21861 * C1476 + C21857 * C1477) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C47688 * C2580) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C48013 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C48009 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47999 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C47688 * C47977) *
                       C2688 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C48009 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C48013 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47999 +
                    ((C21859 * C1201 + C21855 * C1209 + C21860 * C1204 +
                      C21856 * C1214 + C21861 * C5996 + C21857 * C5999) *
                         C114 +
                     (C21859 * C1208 + C21855 * C1219 + C21860 * C1215 +
                      C21856 * C1222 + C21861 * C6000 + C21857 * C6002) *
                         C47890) *
                        C47619 * C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C47729 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C3342) *
                        C47736 +
                    (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                       C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                          C114 +
                      (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                       C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                       C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                          C47890 +
                      (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                       C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                          C114) *
                         C47619 * C47775) *
                        C2948) *
                       C47921 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C3342) *
                        C47729 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47736 +
                    (((C21859 * C1338 + C21855 * C1352 + C21860 * C1759 +
                       C21856 * C1763 + C21861 * C6636 + C21857 * C6639) *
                          C114 +
                      (C21859 * C1351 + C21855 * C1365 + C21860 * C1764 +
                       C21856 * C1768 + C21861 * C6640 + C21857 * C6642) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                       C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                          C47890 +
                      (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                       C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                          C114) *
                         C47619 * C3342) *
                        C2948) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47771 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47778 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C3850) *
                       C47729 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C47778 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47771 -
                    ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                      C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                         C47890 +
                     (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                      C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                         C114) *
                        C47619 * C3850) *
                       C47736 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47771 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C47778 +
                    ((C21859 * C1340 + C21855 * C1355 + C21860 * C6149 +
                      C21856 * C6151 + C21861 * C22710 + C21857 * C22711) *
                         C114 +
                     (C21859 * C1356 + C21855 * C1367 + C21860 * C6152 +
                      C21856 * C6155 + C21861 * C22712 + C21857 * C22713) *
                         C47890) *
                        C47619 * C3850) *
                       C2948) *
                  C47642) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C48013 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C3342) *
                       C48009 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C47775) *
                       C47999 +
                   (((C21859 * C1758 + C21855 * C1761 + C21860 * C6635 +
                      C21856 * C6637 + C21861 * C23056 + C21857 * C23057) *
                         C114 +
                     (C21859 * C1762 + C21855 * C1767 + C21860 * C6638 +
                      C21856 * C6641 + C21861 * C23058 + C21857 * C23059) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C3342) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C2580 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C3342) *
                        C47733) *
                       C48003 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C3342) *
                        C2580 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47733) *
                       C47990 +
                   ((((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                       C21856 * C313 + C21861 * C307 + C21857 * C322) *
                          C114 +
                      (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                       C21856 * C332 + C21861 * C323 + C21857 * C337) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                       C21856 * C988 + C21859 * C515 + C21855 * C535) *
                          C47890 +
                      (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                       C21856 * C980 + C21859 * C505 + C21855 * C516) *
                          C114) *
                         C47619 * C47775) *
                        C2580 +
                    (((C21859 * C973 + C21855 * C980 + C21860 * C1337 +
                       C21856 * C1350 + C21861 * C1760 + C21857 * C1765) *
                          C114 +
                      (C21859 * C981 + C21855 * C988 + C21860 * C1349 +
                       C21856 * C1364 + C21861 * C1766 + C21857 * C1769) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                       C21856 * C337 + C21859 * C312 + C21855 * C332) *
                          C47890 +
                      (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                       C21856 * C322 + C21859 * C302 + C21855 * C313) *
                          C114) *
                         C47619 * C3342) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C48014 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C48011 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C48002 -
                    ((C21861 * C7506 + C21857 * C7509 + C21860 * C2474 +
                      C21856 * C2479 + C21859 * C2070 + C21855 * C2080) *
                         C47890 +
                     (C21861 * C7503 + C21857 * C7505 + C21860 * C2470 +
                      C21856 * C2473 + C21859 * C2062 + C21855 * C2071) *
                         C114) *
                        C47619 * C47983) *
                       C2580 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C48011 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C48014 -
                    ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                      C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                         C47890 +
                     (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                      C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                         C114) *
                        C47619 * C48002 +
                    ((C21859 * C2470 + C21855 * C2473 + C21860 * C7503 +
                      C21856 * C7505 + C21861 * C23688 + C21857 * C23689) *
                         C114 +
                     (C21859 * C2474 + C21855 * C2479 + C21860 * C7506 +
                      C21856 * C7509 + C21861 * C23690 + C21857 * C23691) *
                         C47890) *
                        C47619 * C47983) *
                       C47733) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47771 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47778 +
                     ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                       C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                          C114 +
                      (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                       C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                          C47890) *
                         C47619 * C3850) *
                        C2580 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47778 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47771 -
                     ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                       C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                          C47890 +
                      (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                       C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                          C114) *
                         C47619 * C3850) *
                        C47733) *
                       C47921 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47778 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47771 -
                     ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                       C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                          C47890 +
                      (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                       C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                          C114) *
                         C47619 * C3850) *
                        C2580 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47771 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47778 +
                     ((C21859 * C1335 + C21855 * C1346 + C21860 * C1341 +
                       C21856 * C1357 + C21861 * C6150 + C21857 * C6153) *
                          C114 +
                      (C21859 * C1345 + C21855 * C1362 + C21860 * C1358 +
                       C21856 * C1368 + C21861 * C6154 + C21857 * C6156) *
                          C47890) *
                         C47619 * C3850) *
                        C47733) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C2580 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C3342) *
                        C47733) *
                       C48003 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C3342) *
                        C2580 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47733) *
                       C47990 +
                   ((((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                       C21856 * C313 + C21861 * C307 + C21857 * C322) *
                          C114 +
                      (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                       C21856 * C332 + C21861 * C323 + C21857 * C337) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                       C21856 * C988 + C21859 * C515 + C21855 * C535) *
                          C47890 +
                      (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                       C21856 * C980 + C21859 * C505 + C21855 * C516) *
                          C114) *
                         C47619 * C47775) *
                        C2580 +
                    (((C21859 * C973 + C21855 * C980 + C21860 * C1337 +
                       C21856 * C1350 + C21861 * C1760 + C21857 * C1765) *
                          C114 +
                      (C21859 * C981 + C21855 * C988 + C21860 * C1349 +
                       C21856 * C1364 + C21861 * C1766 + C21857 * C1769) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                       C21856 * C337 + C21859 * C312 + C21855 * C332) *
                          C47890 +
                      (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                       C21856 * C322 + C21859 * C302 + C21855 * C313) *
                          C114) *
                         C47619 * C3342) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C48013 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C3342) *
                       C48009 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C47775) *
                       C47999 +
                   (((C21859 * C1758 + C21855 * C1761 + C21860 * C6635 +
                      C21856 * C6637 + C21861 * C23056 + C21857 * C23057) *
                         C114 +
                     (C21859 * C1762 + C21855 * C1767 + C21860 * C6638 +
                      C21856 * C6641 + C21861 * C23058 + C21857 * C23059) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C3342) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C1468 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C1469 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C1470 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C47688 * C47977) *
                       C47921 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C1469 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C1468 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C1470 +
                    ((C21859 * C1201 + C21855 * C1209 + C21860 * C1204 +
                      C21856 * C1214 + C21861 * C5996 + C21857 * C5999) *
                         C114 +
                     (C21859 * C1208 + C21855 * C1219 + C21860 * C1215 +
                      C21856 * C1222 + C21861 * C6000 + C21857 * C6002) *
                         C47890) *
                        C47619 * C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C47935 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C695 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C47935) *
                       C696 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C47935 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C697 +
                   (((C21859 * C308 + C21855 * C324 + C21860 * C309 +
                      C21856 * C327 + C21861 * C1474 + C21857 * C1475) *
                         C114 +
                     (C21859 * C325 + C21855 * C338 + C21860 * C326 +
                      C21856 * C339 + C21861 * C1476 + C21857 * C1477) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C47688 * C47935) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C1880 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C1881 +
                     ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                       C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                          C114 +
                      (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                       C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                          C47890) *
                         C47619 * C47970) *
                        C47935 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C1881 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C1880 -
                     ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                       C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                          C47890 +
                      (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                       C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                          C114) *
                         C47619 * C47970) *
                        C47733) *
                       C47921 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C1881 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C1880 -
                     ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                       C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                          C47890 +
                      (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                       C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                          C114) *
                         C47619 * C47970) *
                        C47935 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C1880 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C1881 +
                     ((C21859 * C1335 + C21855 * C1346 + C21860 * C1341 +
                       C21856 * C1357 + C21861 * C6150 + C21857 * C6153) *
                          C114 +
                      (C21859 * C1345 + C21855 * C1362 + C21860 * C1358 +
                       C21856 * C1368 + C21861 * C6154 + C21857 * C6156) *
                          C47890) *
                         C47619 * C47970) *
                        C47733) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C1468 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47936) *
                       C1469 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C47775) *
                       C1470 +
                   (((C21859 * C1758 + C21855 * C1761 + C21860 * C6635 +
                      C21856 * C6637 + C21861 * C23056 + C21857 * C23057) *
                         C114 +
                     (C21859 * C1762 + C21855 * C1767 + C21860 * C6638 +
                      C21856 * C6641 + C21861 * C23058 + C21857 * C23059) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C47936) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C47935 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47936) *
                        C47733) *
                       C299 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47936) *
                        C47935 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47733) *
                       C300 +
                   ((((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                       C21856 * C313 + C21861 * C307 + C21857 * C322) *
                          C114 +
                      (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                       C21856 * C332 + C21861 * C323 + C21857 * C337) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                       C21856 * C988 + C21859 * C515 + C21855 * C535) *
                          C47890 +
                      (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                       C21856 * C980 + C21859 * C505 + C21855 * C516) *
                          C114) *
                         C47619 * C47775) *
                        C47935 +
                    (((C21859 * C973 + C21855 * C980 + C21860 * C1337 +
                       C21856 * C1350 + C21861 * C1760 + C21857 * C1765) *
                          C114 +
                      (C21859 * C981 + C21855 * C988 + C21860 * C1349 +
                       C21856 * C1364 + C21861 * C1766 + C21857 * C1769) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                       C21856 * C337 + C21859 * C312 + C21855 * C332) *
                          C47890 +
                      (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                       C21856 * C322 + C21859 * C302 + C21855 * C313) *
                          C114) *
                         C47619 * C47936) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C2348 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C2349 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C2350 -
                    ((C21861 * C7506 + C21857 * C7509 + C21860 * C2474 +
                      C21856 * C2479 + C21859 * C2070 + C21855 * C2080) *
                         C47890 +
                     (C21861 * C7503 + C21857 * C7505 + C21860 * C2470 +
                      C21856 * C2473 + C21859 * C2062 + C21855 * C2071) *
                         C114) *
                        C47619 * C47983) *
                       C47935 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C2349 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C2348 -
                    ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                      C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                         C47890 +
                     (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                      C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                         C114) *
                        C47619 * C2350 +
                    ((C21859 * C2470 + C21855 * C2473 + C21860 * C7503 +
                      C21856 * C7505 + C21861 * C23688 + C21857 * C23689) *
                         C114 +
                     (C21859 * C2474 + C21855 * C2479 + C21860 * C7506 +
                      C21856 * C7509 + C21861 * C23690 + C21857 * C23691) *
                         C47890) *
                        C47619 * C47983) *
                       C47733) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                         C21856 * C317 + C21861 * C305 + C21857 * C318) *
                            C114 +
                        (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                         C21856 * C334 + C21861 * C319 + C21857 * C335) *
                            C47890) *
                           C47619 * C47688 * C47670 * C108 -
                       ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                         C21856 * C333 + C21859 * C125 + C21855 * C137) *
                            C47890 +
                        (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                         C21856 * C315 + C21859 * C116 + C21855 * C124) *
                            C114) *
                           C47619 * C47688 * C47670 * C109 +
                       ((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                         C21856 * C313 + C21861 * C307 + C21857 * C322) *
                            C114 +
                        (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                         C21856 * C332 + C21861 * C323 + C21857 * C337) *
                            C47890) *
                           C47619 * C47688 * C47670 * C110 -
                       ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                         C21856 * C338 + C21859 * C128 + C21855 * C139) *
                            C47890 +
                        (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                         C21856 * C324 + C21859 * C118 + C21855 * C129) *
                            C114) *
                           C47619 * C47688 * C47670 * C111 +
                       ((C21859 * C119 + C21855 * C130 + C21860 * C310 +
                         C21856 * C329 + C21861 * C311 + C21857 * C330) *
                            C114 +
                        (C21859 * C131 + C21855 * C140 + C21860 * C328 +
                         C21856 * C340 + C21861 * C331 + C21857 * C341) *
                            C47890) *
                           C47619 * C47688 * C47670 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                          C21856 * C317 + C21861 * C305 + C21857 * C318) *
                             C114 +
                         (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                          C21856 * C334 + C21861 * C319 + C21857 * C335) *
                             C47890) *
                            C47619 * C47688 * C48006 -
                        ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                          C21856 * C335 + C21859 * C316 + C21855 * C334) *
                             C47890 +
                         (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                          C21856 * C318 + C21859 * C304 + C21855 * C317) *
                             C114) *
                            C47619 * C47688 * C47994 +
                        ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                          C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                             C114 +
                         (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                          C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                             C47890) *
                            C47619 * C47688 * C47967) *
                           C299 +
                       (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                          C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                             C114 +
                         (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                          C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                             C47890) *
                            C47619 * C47688 * C47994 -
                        ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                          C21856 * C333 + C21859 * C125 + C21855 * C137) *
                             C47890 +
                         (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                          C21856 * C315 + C21859 * C116 + C21855 * C124) *
                             C114) *
                            C47619 * C47688 * C48006 -
                        ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                          C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                             C47890 +
                         (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                          C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                             C114) *
                            C47619 * C47688 * C47967) *
                           C300 +
                       (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                          C21856 * C313 + C21861 * C307 + C21857 * C322) *
                             C114 +
                         (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                          C21856 * C332 + C21861 * C323 + C21857 * C337) *
                             C47890) *
                            C47619 * C47688 * C48006 -
                        ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                          C21856 * C337 + C21859 * C312 + C21855 * C332) *
                             C47890 +
                         (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                          C21856 * C322 + C21859 * C302 + C21855 * C313) *
                             C114) *
                            C47619 * C47688 * C47994 +
                        ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                          C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                             C114 +
                         (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                          C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                             C47890) *
                            C47619 * C47688 * C47967) *
                           C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C299 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C47996 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C48007 -
                    ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                      C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                         C47890 +
                     (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                      C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                         C114) *
                        C47619 * C47970) *
                       C47670 * C300 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C510 + C21855 * C525 + C21860 * C1334 +
                      C21856 * C1344 + C21861 * C1342 + C21857 * C1359) *
                         C114 +
                     (C21859 * C526 + C21855 * C540 + C21860 * C1343 +
                      C21856 * C1361 + C21861 * C1360 + C21857 * C1369) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C48003 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C1127 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47967) *
                       C47990 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C47688 * C1194 -
                   ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                     C21856 * C335 + C21859 * C316 + C21855 * C334) *
                        C47890 +
                    (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                     C21856 * C318 + C21859 * C304 + C21855 * C317) *
                        C114) *
                       C47619 * C47688 * C1195 +
                   ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                     C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                        C114 +
                    (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                     C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                        C47890) *
                       C47619 * C47688 * C1196 -
                   ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                     C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                        C47890 +
                    (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                     C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                        C114) *
                       C47619 * C47688 * C1197 +
                   ((C21859 * C1203 + C21855 * C1212 + C21860 * C5995 +
                     C21856 * C5997 + C21861 * C22596 + C21857 * C22597) *
                        C114 +
                    (C21859 * C1213 + C21855 * C1221 + C21860 * C5998 +
                     C21856 * C6001 + C21861 * C22598 + C21857 * C22599) *
                        C47890) *
                       C47619 * C47688 * C1198) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C1126 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C47996 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C48007 -
                    ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                      C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                         C47890 +
                     (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                      C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                         C114) *
                        C47619 * C47970) *
                       C1127 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C1340 + C21855 * C1355 + C21860 * C6149 +
                      C21856 * C6151 + C21861 * C22710 + C21857 * C22711) *
                         C114 +
                     (C21859 * C1356 + C21855 * C1367 + C21860 * C6152 +
                      C21856 * C6155 + C21861 * C22712 + C21857 * C22713) *
                         C47890) *
                        C47619 * C47970) *
                       C47967) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C48003 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C1881 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C1880 -
                    ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                      C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                         C47890 +
                     (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                      C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                         C114) *
                        C47619 * C47970) *
                       C47670 * C47990 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C510 + C21855 * C525 + C21860 * C1334 +
                      C21856 * C1344 + C21861 * C1342 + C21857 * C1359) *
                         C114 +
                     (C21859 * C526 + C21855 * C540 + C21860 * C1343 +
                      C21856 * C1361 + C21861 * C1360 + C21857 * C1369) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C48006 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C1881 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C1880 -
                    ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                      C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                         C47890 +
                     (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                      C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                         C114) *
                        C47619 * C47970) *
                       C47994 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C1340 + C21855 * C1355 + C21860 * C6149 +
                      C21856 * C6151 + C21861 * C22710 + C21857 * C22711) *
                         C114 +
                     (C21859 * C1356 + C21855 * C1367 + C21860 * C6152 +
                      C21856 * C6155 + C21861 * C22712 + C21857 * C22713) *
                         C47890) *
                        C47619 * C47970) *
                       C47967) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C2055 -
                   ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                     C21856 * C986 + C21859 * C519 + C21855 * C537) *
                        C47890 +
                    (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                     C21856 * C976 + C21859 * C507 + C21855 * C520) *
                        C114) *
                       C47619 * C2056 +
                   ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                     C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                        C114 +
                    (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                     C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                        C47890) *
                       C47619 * C2057 -
                   ((C21861 * C7506 + C21857 * C7509 + C21860 * C2474 +
                     C21856 * C2479 + C21859 * C2070 + C21855 * C2080) *
                        C47890 +
                    (C21861 * C7503 + C21857 * C7505 + C21860 * C2470 +
                     C21856 * C2473 + C21859 * C2062 + C21855 * C2071) *
                        C114) *
                       C47619 * C2058 +
                   ((C21859 * C2063 + C21855 * C2072 + C21860 * C7017 +
                     C21856 * C7019 + C21861 * C23342 + C21857 * C23343) *
                        C114 +
                    (C21859 * C2073 + C21855 * C2081 + C21860 * C7020 +
                     C21856 * C7023 + C21861 * C23344 + C21857 * C23345) *
                        C47890) *
                       C47619 * C2059) *
                  C47670 * C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C1126 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47936) *
                        C1127 +
                    (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                       C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                          C114 +
                      (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                       C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                       C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                          C47890 +
                      (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                       C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                          C114) *
                         C47619 * C47775) *
                        C47967) *
                       C47921 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47936) *
                        C1126 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C1127 +
                    (((C21859 * C1338 + C21855 * C1352 + C21860 * C1759 +
                       C21856 * C1763 + C21861 * C6636 + C21857 * C6639) *
                          C114 +
                      (C21859 * C1351 + C21855 * C1365 + C21860 * C1764 +
                       C21856 * C1768 + C21861 * C6640 + C21857 * C6642) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                       C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                          C47890 +
                      (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                       C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                          C114) *
                         C47619 * C47936) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C695 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47936) *
                       C47670 * C696 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C697 +
                   (((C21859 * C511 + C21855 * C527 + C21860 * C974 +
                      C21856 * C983 + C21861 * C1640 + C21857 * C1641) *
                         C114 +
                     (C21859 * C528 + C21855 * C541 + C21860 * C982 +
                      C21856 * C989 + C21861 * C1642 + C21857 * C1643) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C47936) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C2348 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C2349 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C2350 -
                    ((C21861 * C7506 + C21857 * C7509 + C21860 * C2474 +
                      C21856 * C2479 + C21859 * C2070 + C21855 * C2080) *
                         C47890 +
                     (C21861 * C7503 + C21857 * C7505 + C21860 * C2470 +
                      C21856 * C2473 + C21859 * C2062 + C21855 * C2071) *
                         C114) *
                        C47619 * C47983) *
                       C47670 * C47921 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C2349 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C2348 -
                    ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                      C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                         C47890 +
                     (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                      C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                         C114) *
                        C47619 * C2350 +
                    ((C21859 * C2061 + C21855 * C2069 + C21860 * C2471 +
                      C21856 * C2475 + C21861 * C7504 + C21857 * C7507) *
                         C114 +
                     (C21859 * C2068 + C21855 * C2079 + C21860 * C2476 +
                      C21856 * C2480 + C21861 * C7508 + C21857 * C7510) *
                         C47890) *
                        C47619 * C47983) *
                       C47670 * C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47994 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C299 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47994 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47967) *
                       C300 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47994 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C47688 * C47670 * C108 -
                   ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                     C21856 * C333 + C21859 * C125 + C21855 * C137) *
                        C47890 +
                    (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                     C21856 * C315 + C21859 * C116 + C21855 * C124) *
                        C114) *
                       C47619 * C47688 * C47670 * C109 +
                   ((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                     C21856 * C313 + C21861 * C307 + C21857 * C322) *
                        C114 +
                    (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                     C21856 * C332 + C21861 * C323 + C21857 * C337) *
                        C47890) *
                       C47619 * C47688 * C47670 * C110 -
                   ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                     C21856 * C338 + C21859 * C128 + C21855 * C139) *
                        C47890 +
                    (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                     C21856 * C324 + C21859 * C118 + C21855 * C129) *
                        C114) *
                       C47619 * C47688 * C47670 * C111 +
                   ((C21859 * C119 + C21855 * C130 + C21860 * C310 +
                     C21856 * C329 + C21861 * C311 + C21857 * C330) *
                        C114 +
                    (C21859 * C131 + C21855 * C140 + C21860 * C328 +
                     C21856 * C340 + C21861 * C331 + C21857 * C341) *
                        C47890) *
                       C47619 * C47688 * C47670 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C48003 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C1127 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47967) *
                       C47990 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C47688 * C1194 -
                   ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                     C21856 * C335 + C21859 * C316 + C21855 * C334) *
                        C47890 +
                    (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                     C21856 * C318 + C21859 * C304 + C21855 * C317) *
                        C114) *
                       C47619 * C47688 * C1195 +
                   ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                     C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                        C114 +
                    (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                     C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                        C47890) *
                       C47619 * C47688 * C1196 -
                   ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                     C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                        C47890 +
                    (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                     C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                        C114) *
                       C47619 * C47688 * C1197 +
                   ((C21859 * C1203 + C21855 * C1212 + C21860 * C5995 +
                     C21856 * C5997 + C21861 * C22596 + C21857 * C22597) *
                        C114 +
                    (C21859 * C1213 + C21855 * C1221 + C21860 * C5998 +
                     C21856 * C6001 + C21861 * C22598 + C21857 * C22599) *
                        C47890) *
                       C47619 * C47688 * C1198) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C48003 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C1881 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C1880 -
                    ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                      C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                         C47890 +
                     (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                      C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                         C114) *
                        C47619 * C47970) *
                       C47670 * C47990 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C510 + C21855 * C525 + C21860 * C1334 +
                      C21856 * C1344 + C21861 * C1342 + C21857 * C1359) *
                         C114 +
                     (C21859 * C526 + C21855 * C540 + C21860 * C1343 +
                      C21856 * C1361 + C21861 * C1360 + C21857 * C1369) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C48006 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C1881 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C1880 -
                    ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                      C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                         C47890 +
                     (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                      C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                         C114) *
                        C47619 * C47970) *
                       C47994 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C1880 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C1881 +
                    ((C21859 * C1340 + C21855 * C1355 + C21860 * C6149 +
                      C21856 * C6151 + C21861 * C22710 + C21857 * C22711) *
                         C114 +
                     (C21859 * C1356 + C21855 * C1367 + C21860 * C6152 +
                      C21856 * C6155 + C21861 * C22712 + C21857 * C22713) *
                         C47890) *
                        C47619 * C47970) *
                       C47967) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C47935 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C3342) *
                        C47733) *
                       C47647 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C3342) *
                        C47935 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47733) *
                       C47656 +
                   ((((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                       C21856 * C313 + C21861 * C307 + C21857 * C322) *
                          C114 +
                      (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                       C21856 * C332 + C21861 * C323 + C21857 * C337) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                       C21856 * C988 + C21859 * C515 + C21855 * C535) *
                          C47890 +
                      (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                       C21856 * C980 + C21859 * C505 + C21855 * C516) *
                          C114) *
                         C47619 * C47775) *
                        C47935 +
                    (((C21859 * C973 + C21855 * C980 + C21860 * C1337 +
                       C21856 * C1350 + C21861 * C1760 + C21857 * C1765) *
                          C114 +
                      (C21859 * C981 + C21855 * C988 + C21860 * C1349 +
                       C21856 * C1364 + C21861 * C1766 + C21857 * C1769) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                       C21856 * C337 + C21859 * C312 + C21855 * C332) *
                          C47890 +
                      (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                       C21856 * C322 + C21859 * C302 + C21855 * C313) *
                          C114) *
                         C47619 * C3342) *
                        C47733) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47771 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47778 +
                     ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                       C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                          C114 +
                      (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                       C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                          C47890) *
                         C47619 * C3850) *
                        C47935 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47778 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47771 -
                     ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                       C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                          C47890 +
                      (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                       C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                          C114) *
                         C47619 * C3850) *
                        C47733) *
                       C2688 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47778 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47771 -
                     ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                       C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                          C47890 +
                      (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                       C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                          C114) *
                         C47619 * C3850) *
                        C47935 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47771 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47778 +
                     ((C21859 * C1335 + C21855 * C1346 + C21860 * C1341 +
                       C21856 * C1357 + C21861 * C6150 + C21857 * C6153) *
                          C114 +
                      (C21859 * C1345 + C21855 * C1362 + C21860 * C1358 +
                       C21856 * C1368 + C21861 * C6154 + C21857 * C6156) *
                          C47890) *
                         C47619 * C3850) *
                        C47733) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C48006 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C3342) *
                        C47994 +
                    (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                       C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                          C114 +
                      (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                       C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                       C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                          C47890 +
                      (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                       C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                          C114) *
                         C47619 * C47775) *
                        C47967) *
                       C2688 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C3342) *
                        C48006 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47994 +
                    (((C21859 * C1338 + C21855 * C1352 + C21860 * C1759 +
                       C21856 * C1763 + C21861 * C6636 + C21857 * C6639) *
                          C114 +
                      (C21859 * C1351 + C21855 * C1365 + C21860 * C1764 +
                       C21856 * C1768 + C21861 * C6640 + C21857 * C6642) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                       C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                          C47890 +
                      (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                       C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                          C114) *
                         C47619 * C3342) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C48012 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C3342) *
                       C47670 * C48005 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C47992 +
                   (((C21859 * C511 + C21855 * C527 + C21860 * C974 +
                      C21856 * C983 + C21861 * C1640 + C21857 * C1641) *
                         C114 +
                     (C21859 * C528 + C21855 * C541 + C21860 * C982 +
                      C21856 * C989 + C21861 * C1642 + C21857 * C1643) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C3342) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C48014 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C48011 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C48002 -
                    ((C21861 * C7506 + C21857 * C7509 + C21860 * C2474 +
                      C21856 * C2479 + C21859 * C2070 + C21855 * C2080) *
                         C47890 +
                     (C21861 * C7503 + C21857 * C7505 + C21860 * C2470 +
                      C21856 * C2473 + C21859 * C2062 + C21855 * C2071) *
                         C114) *
                        C47619 * C47983) *
                       C47670 * C2688 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C48011 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C48014 -
                    ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                      C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                         C47890 +
                     (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                      C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                         C114) *
                        C47619 * C48002 +
                    ((C21859 * C2061 + C21855 * C2069 + C21860 * C2471 +
                      C21856 * C2475 + C21861 * C7504 + C21857 * C7507) *
                         C114 +
                     (C21859 * C2068 + C21855 * C2079 + C21860 * C2476 +
                      C21856 * C2480 + C21861 * C7508 + C21857 * C7510) *
                         C47890) *
                        C47619 * C47983) *
                       C47670 * C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47771 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47778 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C3850) *
                       C47670 * C47647 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C47778 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47771 -
                    ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                      C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                         C47890 +
                     (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                      C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                         C114) *
                        C47619 * C3850) *
                       C47670 * C47656 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47771 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C47778 +
                    ((C21859 * C510 + C21855 * C525 + C21860 * C1334 +
                      C21856 * C1344 + C21861 * C1342 + C21857 * C1359) *
                         C114 +
                     (C21859 * C526 + C21855 * C540 + C21860 * C1343 +
                      C21856 * C1361 + C21861 * C1360 + C21857 * C1369) *
                         C47890) *
                        C47619 * C3850) *
                       C47670 * C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C48012 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C3342) *
                       C47670 * C48005 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C3342 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C47992 +
                   (((C21859 * C511 + C21855 * C527 + C21860 * C974 +
                      C21856 * C983 + C21861 * C1640 + C21857 * C1641) *
                         C114 +
                     (C21859 * C528 + C21855 * C541 + C21860 * C982 +
                      C21856 * C989 + C21861 * C1642 + C21857 * C1643) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C3342) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C48006 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C3342) *
                        C47994 +
                    (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                       C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                          C114 +
                      (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                       C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                       C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                          C47890 +
                      (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                       C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                          C114) *
                         C47619 * C47775) *
                        C47967) *
                       C2688 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C3342) *
                        C48006 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C3342 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47994 +
                    (((C21859 * C1338 + C21855 * C1352 + C21860 * C1759 +
                       C21856 * C1763 + C21861 * C6636 + C21857 * C6639) *
                          C114 +
                      (C21859 * C1351 + C21855 * C1365 + C21860 * C1764 +
                       C21856 * C1768 + C21861 * C6640 + C21857 * C6642) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                       C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                          C47890 +
                      (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                       C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                          C114) *
                         C47619 * C3342) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C47935 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C695 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C47935) *
                       C696 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C47935 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47733) *
                       C697 +
                   (((C21859 * C308 + C21855 * C324 + C21860 * C309 +
                      C21856 * C327 + C21861 * C1474 + C21857 * C1475) *
                         C114 +
                     (C21859 * C325 + C21855 * C338 + C21860 * C326 +
                      C21856 * C339 + C21861 * C1476 + C21857 * C1477) *
                         C47890) *
                        C47619 * C47688 * C47733 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C47688 * C47935) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C1468 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C1469 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C1470 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C47688 * C47977) *
                       C47921 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C1469 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C1468 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C1470 +
                    ((C21859 * C1201 + C21855 * C1209 + C21860 * C1204 +
                      C21856 * C1214 + C21861 * C5996 + C21857 * C5999) *
                         C114 +
                     (C21859 * C1208 + C21855 * C1219 + C21860 * C1215 +
                      C21856 * C1222 + C21861 * C6000 + C21857 * C6002) *
                         C47890) *
                        C47619 * C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C47935 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47936) *
                        C47733) *
                       C299 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47936) *
                        C47935 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C47733) *
                       C300 +
                   ((((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                       C21856 * C313 + C21861 * C307 + C21857 * C322) *
                          C114 +
                      (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                       C21856 * C332 + C21861 * C323 + C21857 * C337) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                       C21856 * C988 + C21859 * C515 + C21855 * C535) *
                          C47890 +
                      (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                       C21856 * C980 + C21859 * C505 + C21855 * C516) *
                          C114) *
                         C47619 * C47775) *
                        C47935 +
                    (((C21859 * C973 + C21855 * C980 + C21860 * C1337 +
                       C21856 * C1350 + C21861 * C1760 + C21857 * C1765) *
                          C114 +
                      (C21859 * C981 + C21855 * C988 + C21860 * C1349 +
                       C21856 * C1364 + C21861 * C1766 + C21857 * C1769) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                       C21856 * C337 + C21859 * C312 + C21855 * C332) *
                          C47890 +
                      (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                       C21856 * C322 + C21859 * C302 + C21855 * C313) *
                          C114) *
                         C47619 * C47936) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C1468 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47936) *
                       C1469 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C47775) *
                       C1470 +
                   (((C21859 * C1758 + C21855 * C1761 + C21860 * C6635 +
                      C21856 * C6637 + C21861 * C23056 + C21857 * C23057) *
                         C114 +
                     (C21859 * C1762 + C21855 * C1767 + C21860 * C6638 +
                      C21856 * C6641 + C21861 * C23058 + C21857 * C23059) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                      C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                         C47890 +
                     (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                      C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                         C114) *
                        C47619 * C47936) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47994 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C299 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47994 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47967) *
                       C300 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47994 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C47688 * C47670 * C108 -
                   ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                     C21856 * C333 + C21859 * C125 + C21855 * C137) *
                        C47890 +
                    (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                     C21856 * C315 + C21859 * C116 + C21855 * C124) *
                        C114) *
                       C47619 * C47688 * C47670 * C109 +
                   ((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                     C21856 * C313 + C21861 * C307 + C21857 * C322) *
                        C114 +
                    (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                     C21856 * C332 + C21861 * C323 + C21857 * C337) *
                        C47890) *
                       C47619 * C47688 * C47670 * C110 -
                   ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                     C21856 * C338 + C21859 * C128 + C21855 * C139) *
                        C47890 +
                    (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                     C21856 * C324 + C21859 * C118 + C21855 * C129) *
                        C114) *
                       C47619 * C47688 * C47670 * C111 +
                   ((C21859 * C119 + C21855 * C130 + C21860 * C310 +
                     C21856 * C329 + C21861 * C311 + C21857 * C330) *
                        C114 +
                    (C21859 * C131 + C21855 * C140 + C21860 * C328 +
                     C21856 * C340 + C21861 * C331 + C21857 * C341) *
                        C47890) *
                       C47619 * C47688 * C47670 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C299 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C47996 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C48007 -
                    ((C21861 * C1358 + C21857 * C1368 + C21860 * C1345 +
                      C21856 * C1362 + C21859 * C524 + C21855 * C539) *
                         C47890 +
                     (C21861 * C1341 + C21857 * C1357 + C21860 * C1335 +
                      C21856 * C1346 + C21859 * C509 + C21855 * C523) *
                         C114) *
                        C47619 * C47970) *
                       C47670 * C300 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C510 + C21855 * C525 + C21860 * C1334 +
                      C21856 * C1344 + C21861 * C1342 + C21857 * C1359) *
                         C114 +
                     (C21859 * C526 + C21855 * C540 + C21860 * C1343 +
                      C21856 * C1361 + C21861 * C1360 + C21857 * C1369) *
                         C47890) *
                        C47619 * C47970) *
                       C47670 * C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C48003 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C1127 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47967) *
                       C47990 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C47688 * C1194 -
                   ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                     C21856 * C335 + C21859 * C316 + C21855 * C334) *
                        C47890 +
                    (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                     C21856 * C318 + C21859 * C304 + C21855 * C317) *
                        C114) *
                       C47619 * C47688 * C1195 +
                   ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                     C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                        C114 +
                    (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                     C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                        C47890) *
                       C47619 * C47688 * C1196 -
                   ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                     C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                        C47890 +
                    (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                     C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                        C114) *
                       C47619 * C47688 * C1197 +
                   ((C21859 * C1203 + C21855 * C1212 + C21860 * C5995 +
                     C21856 * C5997 + C21861 * C22596 + C21857 * C22597) *
                        C114 +
                    (C21859 * C1213 + C21855 * C1221 + C21860 * C5998 +
                     C21856 * C6001 + C21861 * C22598 + C21857 * C22599) *
                        C47890) *
                       C47619 * C47688 * C1198) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C508 + C21855 * C521 + C21860 * C1336 +
                      C21856 * C1348 + C21861 * C1340 + C21857 * C1355) *
                         C114 +
                     (C21859 * C522 + C21855 * C538 + C21860 * C1347 +
                      C21856 * C1363 + C21861 * C1356 + C21857 * C1367) *
                         C47890) *
                        C47619 * C47970) *
                       C1126 +
                   (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                      C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                         C114 +
                     (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                      C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                         C47890) *
                        C47619 * C47996 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C48007 -
                    ((C21861 * C6152 + C21857 * C6155 + C21860 * C1356 +
                      C21856 * C1367 + C21859 * C1347 + C21855 * C1363) *
                         C47890 +
                     (C21861 * C6149 + C21857 * C6151 + C21860 * C1340 +
                      C21856 * C1355 + C21859 * C1336 + C21855 * C1348) *
                         C114) *
                        C47619 * C47970) *
                       C1127 +
                   (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C48007 -
                    ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                      C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                         C47890 +
                     (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                      C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                         C114) *
                        C47619 * C47996 +
                    ((C21859 * C1340 + C21855 * C1355 + C21860 * C6149 +
                      C21856 * C6151 + C21861 * C22710 + C21857 * C22711) *
                         C114 +
                     (C21859 * C1356 + C21855 * C1367 + C21860 * C6152 +
                      C21856 * C6155 + C21861 * C22712 + C21857 * C22713) *
                         C47890) *
                        C47619 * C47970) *
                       C47967) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                      C21856 * C986 + C21859 * C519 + C21855 * C537) *
                         C47890 +
                     (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                      C21856 * C976 + C21859 * C507 + C21855 * C520) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C695 +
                   (((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                      C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                         C114 +
                     (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                      C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47936) *
                       C47670 * C696 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47936 -
                    ((C21861 * C1349 + C21857 * C1364 + C21860 * C981 +
                      C21856 * C988 + C21859 * C515 + C21855 * C535) *
                         C47890 +
                     (C21861 * C1337 + C21857 * C1350 + C21860 * C973 +
                      C21856 * C980 + C21859 * C505 + C21855 * C516) *
                         C114) *
                        C47619 * C47775) *
                       C47670 * C697 +
                   (((C21859 * C511 + C21855 * C527 + C21860 * C974 +
                      C21856 * C983 + C21861 * C1640 + C21857 * C1641) *
                         C114 +
                     (C21859 * C528 + C21855 * C541 + C21860 * C982 +
                      C21856 * C989 + C21861 * C1642 + C21857 * C1643) *
                         C47890) *
                        C47619 * C47775 -
                    ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                      C21856 * C338 + C21859 * C128 + C21855 * C139) *
                         C47890 +
                     (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                      C21856 * C324 + C21859 * C118 + C21855 * C129) *
                         C114) *
                        C47619 * C47936) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                       C21856 * C317 + C21861 * C305 + C21857 * C318) *
                          C114 +
                      (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                       C21856 * C334 + C21861 * C319 + C21857 * C335) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1353 + C21857 * C1366 + C21860 * C977 +
                       C21856 * C986 + C21859 * C519 + C21855 * C537) *
                          C47890 +
                      (C21861 * C1339 + C21857 * C1354 + C21860 * C971 +
                       C21856 * C976 + C21859 * C507 + C21855 * C520) *
                          C114) *
                         C47619 * C47775) *
                        C1126 +
                    (((C21859 * C971 + C21855 * C976 + C21860 * C1339 +
                       C21856 * C1354 + C21861 * C1758 + C21857 * C1761) *
                          C114 +
                      (C21859 * C977 + C21855 * C986 + C21860 * C1353 +
                       C21856 * C1366 + C21861 * C1762 + C21857 * C1767) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                       C21856 * C335 + C21859 * C316 + C21855 * C334) *
                          C47890 +
                      (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                       C21856 * C318 + C21859 * C304 + C21855 * C317) *
                          C114) *
                         C47619 * C47936) *
                        C1127 +
                    (((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                       C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                          C114 +
                      (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                       C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C6638 + C21857 * C6641 + C21860 * C1762 +
                       C21856 * C1767 + C21859 * C1353 + C21855 * C1366) *
                          C47890 +
                      (C21861 * C6635 + C21857 * C6637 + C21860 * C1758 +
                       C21856 * C1761 + C21859 * C1339 + C21855 * C1354) *
                          C114) *
                         C47619 * C47775) *
                        C47967) *
                       C47921 +
                   ((((C21859 * C506 + C21855 * C518 + C21860 * C972 +
                       C21856 * C978 + C21861 * C1338 + C21857 * C1352) *
                          C114 +
                      (C21859 * C517 + C21855 * C536 + C21860 * C979 +
                       C21856 * C987 + C21861 * C1351 + C21857 * C1365) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                       C21856 * C333 + C21859 * C125 + C21855 * C137) *
                          C47890 +
                      (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                       C21856 * C315 + C21859 * C116 + C21855 * C124) *
                          C114) *
                         C47619 * C47936) *
                        C1126 +
                    (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                       C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                          C114 +
                      (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                       C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                          C47890) *
                         C47619 * C47936 -
                     ((C21861 * C1764 + C21857 * C1768 + C21860 * C1351 +
                       C21856 * C1365 + C21859 * C979 + C21855 * C987) *
                          C47890 +
                      (C21861 * C1759 + C21857 * C1763 + C21860 * C1338 +
                       C21856 * C1352 + C21859 * C972 + C21855 * C978) *
                          C114) *
                         C47619 * C47775) *
                        C1127 +
                    (((C21859 * C1338 + C21855 * C1352 + C21860 * C1759 +
                       C21856 * C1763 + C21861 * C6636 + C21857 * C6639) *
                          C114 +
                      (C21859 * C1351 + C21855 * C1365 + C21860 * C1764 +
                       C21856 * C1768 + C21861 * C6640 + C21857 * C6642) *
                          C47890) *
                         C47619 * C47775 -
                     ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                       C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                          C47890 +
                      (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                       C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                          C114) *
                         C47619 * C47936) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C47688 * C47670 * C108 -
                   ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                     C21856 * C333 + C21859 * C125 + C21855 * C137) *
                        C47890 +
                    (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                     C21856 * C315 + C21859 * C116 + C21855 * C124) *
                        C114) *
                       C47619 * C47688 * C47670 * C109 +
                   ((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                     C21856 * C313 + C21861 * C307 + C21857 * C322) *
                        C114 +
                    (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                     C21856 * C332 + C21861 * C323 + C21857 * C337) *
                        C47890) *
                       C47619 * C47688 * C47670 * C110 -
                   ((C21861 * C326 + C21857 * C339 + C21860 * C325 +
                     C21856 * C338 + C21859 * C128 + C21855 * C139) *
                        C47890 +
                    (C21861 * C309 + C21857 * C327 + C21860 * C308 +
                     C21856 * C324 + C21859 * C118 + C21855 * C129) *
                        C114) *
                       C47619 * C47688 * C47670 * C111 +
                   ((C21859 * C119 + C21855 * C130 + C21860 * C310 +
                     C21856 * C329 + C21861 * C311 + C21857 * C330) *
                        C114 +
                    (C21859 * C131 + C21855 * C140 + C21860 * C328 +
                     C21856 * C340 + C21861 * C331 + C21857 * C341) *
                        C47890) *
                       C47619 * C47688 * C47670 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C47994 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C299 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C47994 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47967) *
                       C300 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C48006 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C47994 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                      C21856 * C317 + C21861 * C305 + C21857 * C318) *
                         C114 +
                     (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                      C21856 * C334 + C21861 * C319 + C21857 * C335) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                      C21856 * C335 + C21859 * C316 + C21855 * C334) *
                         C47890 +
                     (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                      C21856 * C318 + C21859 * C304 + C21855 * C317) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                      C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                         C114 +
                     (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                      C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C48003 +
                   (((C21859 * C303 + C21855 * C315 + C21860 * C306 +
                      C21856 * C320 + C21861 * C1201 + C21857 * C1209) *
                         C114 +
                     (C21859 * C314 + C21855 * C333 + C21860 * C321 +
                      C21856 * C336 + C21861 * C1208 + C21857 * C1219) *
                         C47890) *
                        C47619 * C47688 * C1127 -
                    ((C21861 * C321 + C21857 * C336 + C21860 * C314 +
                      C21856 * C333 + C21859 * C125 + C21855 * C137) *
                         C47890 +
                     (C21861 * C306 + C21857 * C320 + C21860 * C303 +
                      C21856 * C315 + C21859 * C116 + C21855 * C124) *
                         C114) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1215 + C21857 * C1222 + C21860 * C1208 +
                      C21856 * C1219 + C21859 * C321 + C21855 * C336) *
                         C47890 +
                     (C21861 * C1204 + C21857 * C1214 + C21860 * C1201 +
                      C21856 * C1209 + C21859 * C306 + C21855 * C320) *
                         C114) *
                        C47619 * C47688 * C47967) *
                       C47990 +
                   (((C21859 * C117 + C21855 * C126 + C21860 * C302 +
                      C21856 * C313 + C21861 * C307 + C21857 * C322) *
                         C114 +
                     (C21859 * C127 + C21855 * C138 + C21860 * C312 +
                      C21856 * C332 + C21861 * C323 + C21857 * C337) *
                         C47890) *
                        C47619 * C47688 * C1126 -
                    ((C21861 * C1206 + C21857 * C1218 + C21860 * C323 +
                      C21856 * C337 + C21859 * C312 + C21855 * C332) *
                         C47890 +
                     (C21861 * C1200 + C21857 * C1207 + C21860 * C307 +
                      C21856 * C322 + C21859 * C302 + C21855 * C313) *
                         C114) *
                        C47619 * C47688 * C1127 +
                    ((C21859 * C307 + C21855 * C322 + C21860 * C1200 +
                      C21856 * C1207 + C21861 * C1205 + C21857 * C1216) *
                         C114 +
                     (C21859 * C323 + C21855 * C337 + C21860 * C1206 +
                      C21856 * C1218 + C21861 * C1217 + C21857 * C1223) *
                         C47890) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21859 * C115 + C21855 * C122 + C21860 * C304 +
                     C21856 * C317 + C21861 * C305 + C21857 * C318) *
                        C114 +
                    (C21859 * C123 + C21855 * C136 + C21860 * C316 +
                     C21856 * C334 + C21861 * C319 + C21857 * C335) *
                        C47890) *
                       C47619 * C47688 * C1194 -
                   ((C21861 * C1210 + C21857 * C1220 + C21860 * C319 +
                     C21856 * C335 + C21859 * C316 + C21855 * C334) *
                        C47890 +
                    (C21861 * C1202 + C21857 * C1211 + C21860 * C305 +
                     C21856 * C318 + C21859 * C304 + C21855 * C317) *
                        C114) *
                       C47619 * C47688 * C1195 +
                   ((C21859 * C305 + C21855 * C318 + C21860 * C1202 +
                     C21856 * C1211 + C21861 * C1203 + C21857 * C1212) *
                        C114 +
                    (C21859 * C319 + C21855 * C335 + C21860 * C1210 +
                     C21856 * C1220 + C21861 * C1213 + C21857 * C1221) *
                        C47890) *
                       C47619 * C47688 * C1196 -
                   ((C21861 * C5998 + C21857 * C6001 + C21860 * C1213 +
                     C21856 * C1221 + C21859 * C1210 + C21855 * C1220) *
                        C47890 +
                    (C21861 * C5995 + C21857 * C5997 + C21860 * C1203 +
                     C21856 * C1212 + C21859 * C1202 + C21855 * C1211) *
                        C114) *
                       C47619 * C47688 * C1197 +
                   ((C21859 * C1203 + C21855 * C1212 + C21860 * C5995 +
                     C21856 * C5997 + C21861 * C22596 + C21857 * C22597) *
                        C114 +
                    (C21859 * C1213 + C21855 * C1221 + C21860 * C5998 +
                     C21856 * C6001 + C21861 * C22598 + C21857 * C22599) *
                        C47890) *
                       C47619 * C47688 * C1198) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C47729 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47736 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47688 * C2948) *
              C47647 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47736 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C47729 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C2948) *
              C47656 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C47729 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47736 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47936 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C47729 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47936) *
               C47736 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C10559 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C10557 +
             (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
                C47619 * C47936 -
            ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
             (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
                C47619 * C47775) *
               C2948) *
              C2688 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47936) *
               C47729 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47936 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47736 +
           (((C17847 + C17846) * C10559 + (C17845 + C17844) * C10557 +
             (C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C10560 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
             (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
                C47619 * C47936) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C48013 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C48009 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47688 * C47999 -
           ((C27664 + C27663) * C47987 + (C27662 + C27661) * C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C47688 * C47977) *
              C2688 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C48009 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C48013 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47999 +
           ((C17641 + C17640) * C10559 + (C17639 + C17638) * C10557 +
            (C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
             C47985 * C6639) *
                C10560 +
            (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
             C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C2580 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47733) *
              C48012 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47733 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C2580) *
              C48005 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C2580 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47733) *
              C47992 +
          (((C16765 + C16764) * C10559 + (C16763 + C16762) * C10557 +
            (C16185 * C974 + C16181 * C983 + C16186 * C1640 + C47985 * C1641) *
                C10560 +
            (C16185 * C982 + C16181 * C989 + C16186 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C48007 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47996 +
            ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
             (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
                C47619 * C47970) *
               C2580 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47996 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C48007 -
            ((C28529 + C28530) * C47987 + (C28531 + C28532) * C10560 +
             (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
                C47619 * C47970) *
               C47733) *
              C2688 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47996 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C48007 -
            ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
             (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
                C47619 * C47970) *
               C2580 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C48007 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47996 +
            ((C18557 + C18556) * C10559 + (C18555 + C18554) * C10557 +
             (C16185 * C2471 + C16181 * C2475 + C16186 * C7504 +
              C47985 * C7507) *
                 C10560 +
             (C16185 * C2476 + C16181 * C2480 + C16186 * C7508 +
              C47985 * C7510) *
                 C47987) *
                C47619 * C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47936 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C2580 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47936) *
               C47733) *
              C47647 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47936) *
               C2580 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47936 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47733) *
              C47656 +
          ((((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
             (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                C47619 * C47936 -
            ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
             (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
                C47619 * C47775) *
               C2580 +
           (((C17125 + C17124) * C10559 + (C17123 + C17122) * C10557 +
             (C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
              C47985 * C1359) *
                 C10560 +
             (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
              C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
             (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
                C47619 * C47936) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C2580 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47733) *
              C48012 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47733 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C2580) *
              C48005 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C2580 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47733) *
              C47992 +
          (((C16765 + C16764) * C10559 + (C16763 + C16762) * C10557 +
            (C16185 * C974 + C16181 * C983 + C16186 * C1640 + C47985 * C1641) *
                C10560 +
            (C16185 * C982 + C16181 * C989 + C16186 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C48013 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C48009 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47688 * C47999 -
           ((C27664 + C27663) * C47987 + (C27662 + C27661) * C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C47688 * C47977) *
              C2688 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C48009 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C48013 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47999 +
           ((C17641 + C17640) * C10559 + (C17639 + C17638) * C10557 +
            (C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
             C47985 * C6639) *
                C10560 +
            (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
             C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C3342 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C47729 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C3342) *
               C47736 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C10559 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C10557 +
             (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
                C47619 * C3342 -
            ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
             (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
                C47619 * C47775) *
               C2948) *
              C47921 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C3342) *
               C47729 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C3342 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47736 +
           (((C17847 + C17846) * C10559 + (C17845 + C17844) * C10557 +
             (C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C10560 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
             (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
                C47619 * C3342) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47771 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47778 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
               C47619 * C3850) *
              C47729 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C47778 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47771 -
           ((C28529 + C28530) * C47987 + (C28531 + C28532) * C10560 +
            (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
               C47619 * C3850) *
              C47736 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47771 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C47778 +
           ((C27198 + C27197) * C10559 + (C27196 + C27195) * C10557 +
            (C16185 * C7503 + C16181 * C7505 + C16186 * C23688 +
             C47985 * C23689) *
                C10560 +
            (C16185 * C7506 + C16181 * C7509 + C16186 * C23690 +
             C47985 * C23691) *
                C47987) *
               C47619 * C3850) *
              C2948) *
         C47642) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C3342 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C48013 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C47775 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C3342) *
              C48009 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C3342 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C47775) *
              C47999 +
          (((C27661 + C27662) * C10559 + (C27663 + C27664) * C10557 +
            (C16185 * C6149 + C16181 * C6151 + C16186 * C22710 +
             C47985 * C22711) *
                C10560 +
            (C16185 * C6152 + C16181 * C6155 + C16186 * C22712 +
             C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C27664 + C27663) * C47987 + (C27662 + C27661) * C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C3342 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C2580 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C3342) *
               C47733) *
              C48003 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C3342) *
               C2580 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C3342 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47733) *
              C47990 +
          ((((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
             (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                C47619 * C3342 -
            ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
             (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
                C47619 * C47775) *
               C2580 +
           (((C17125 + C17124) * C10559 + (C17123 + C17122) * C10557 +
             (C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
              C47985 * C1359) *
                 C10560 +
             (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
              C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
             (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
                C47619 * C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C48014 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C48011 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
               C47619 * C48002 -
           ((C28063 + C28064) * C47987 + (C28065 + C28066) * C10560 +
            (C28062 + C28061) * C10557 + (C28060 + C28059) * C10559) *
               C47619 * C47983) *
              C2580 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C48011 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C48014 -
           ((C28529 + C28530) * C47987 + (C28531 + C28532) * C10560 +
            (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
               C47619 * C48002 +
           ((C28532 + C28531) * C10559 + (C28530 + C28529) * C10557 +
            (C16185 * C7017 + C16181 * C7019 + C16186 * C23342 +
             C47985 * C23343) *
                C10560 +
            (C16185 * C7020 + C16181 * C7023 + C16186 * C23344 +
             C47985 * C23345) *
                C47987) *
               C47619 * C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47771 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47778 +
            ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
             (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
                C47619 * C3850) *
               C2580 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47778 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47771 -
            ((C28529 + C28530) * C47987 + (C28531 + C28532) * C10560 +
             (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
                C47619 * C3850) *
               C47733) *
              C47921 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47778 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47771 -
            ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
             (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
                C47619 * C3850) *
               C2580 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47771 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47778 +
            ((C18557 + C18556) * C10559 + (C18555 + C18554) * C10557 +
             (C16185 * C2471 + C16181 * C2475 + C16186 * C7504 +
              C47985 * C7507) *
                 C10560 +
             (C16185 * C2476 + C16181 * C2480 + C16186 * C7508 +
              C47985 * C7510) *
                 C47987) *
                C47619 * C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C3342 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C2580 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C3342) *
               C47733) *
              C48003 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C3342) *
               C2580 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C3342 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47733) *
              C47990 +
          ((((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
             (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                C47619 * C3342 -
            ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
             (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
                C47619 * C47775) *
               C2580 +
           (((C17125 + C17124) * C10559 + (C17123 + C17122) * C10557 +
             (C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
              C47985 * C1359) *
                 C10560 +
             (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
              C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
             (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
                C47619 * C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C3342 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C48013 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C47775 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C3342) *
              C48009 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C3342 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C47775) *
              C47999 +
          (((C27661 + C27662) * C10559 + (C27663 + C27664) * C10557 +
            (C16185 * C6149 + C16181 * C6151 + C16186 * C22710 +
             C47985 * C22711) *
                C10560 +
            (C16185 * C6152 + C16181 * C6155 + C16186 * C22712 +
             C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C27664 + C27663) * C47987 + (C27662 + C27661) * C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C1468 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C1469 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47688 * C1470 -
           ((C16186 * C6638 + C47985 * C6641 + C16185 * C1762 +
             C16181 * C1767) *
                C47987 +
            (C16186 * C6635 + C47985 * C6637 + C16185 * C1758 +
             C16181 * C1761) *
                C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C47688 * C47977) *
              C47921 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C1469 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C1468 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C1470 +
           ((C17641 + C17640) * C10559 + (C17639 + C17638) * C10557 +
            (C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
             C47985 * C6639) *
                C10560 +
            (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
             C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C47935 -
           ((C16186 * C1353 + C47985 * C1366 + C16185 * C977 + C16181 * C986) *
                C47987 +
            (C16186 * C1339 + C47985 * C1354 + C16185 * C971 + C16181 * C976) *
                C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47733) *
              C695 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47733 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C47935) *
              C696 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C47935 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47733) *
              C697 +
          (((C16765 + C16764) * C10559 + (C16763 + C16762) * C10557 +
            (C16185 * C974 + C16181 * C983 + C16186 * C1640 + C47985 * C1641) *
                C10560 +
            (C16185 * C982 + C16181 * C989 + C16186 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C1880 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C1881 +
            ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
             (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
                C47619 * C47970) *
               C47935 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C1881 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C1880 -
            ((C16186 * C7506 + C47985 * C7509 + C16185 * C2474 +
              C16181 * C2479) *
                 C47987 +
             (C16186 * C7503 + C47985 * C7505 + C16185 * C2470 +
              C16181 * C2473) *
                 C10560 +
             (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
                C47619 * C47970) *
               C47733) *
              C47921 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C1881 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C1880 -
            ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
             (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
                C47619 * C47970) *
               C47935 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C1880 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C1881 +
            ((C18557 + C18556) * C10559 + (C18555 + C18554) * C10557 +
             (C16185 * C2471 + C16181 * C2475 + C16186 * C7504 +
              C47985 * C7507) *
                 C10560 +
             (C16185 * C2476 + C16181 * C2480 + C16186 * C7508 +
              C47985 * C7510) *
                 C47987) *
                C47619 * C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47936 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C1468 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C47775 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47936) *
              C1469 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47936 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C47775) *
              C1470 +
          (((C27661 + C27662) * C10559 + (C27663 + C27664) * C10557 +
            (C16185 * C6149 + C16181 * C6151 + C16186 * C22710 +
             C47985 * C22711) *
                C10560 +
            (C16185 * C6152 + C16181 * C6155 + C16186 * C22712 +
             C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C27664 + C27663) * C47987 + (C27662 + C27661) * C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47936 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C47935 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C16185 * C1336 + C16181 * C1348 + C16186 * C1340 +
              C47985 * C1355) *
                 C10560 +
             (C16185 * C1347 + C16181 * C1363 + C16186 * C1356 +
              C47985 * C1367) *
                 C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47936) *
               C47733) *
              C299 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47936) *
               C47935 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47936 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47733) *
              C300 +
          ((((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
             (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                C47619 * C47936 -
            ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
             (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
                C47619 * C47775) *
               C47935 +
           (((C17125 + C17124) * C10559 + (C17123 + C17122) * C10557 +
             (C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
              C47985 * C1359) *
                 C10560 +
             (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
              C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
             (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
                C47619 * C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C2348 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C2349 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
               C47619 * C2350 -
           ((C28063 + C28064) * C47987 + (C28065 + C28066) * C10560 +
            (C28062 + C28061) * C10557 + (C28060 + C28059) * C10559) *
               C47619 * C47983) *
              C47935 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C2349 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C2348 -
           ((C28529 + C28530) * C47987 + (C28531 + C28532) * C10560 +
            (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
               C47619 * C2350 +
           ((C28532 + C28531) * C10559 + (C28530 + C28529) * C10557 +
            (C16185 * C7017 + C16181 * C7019 + C16186 * C23342 +
             C47985 * C23343) *
                C10560 +
            (C16185 * C7020 + C16181 * C7023 + C16186 * C23344 +
             C47985 * C23345) *
                C47987) *
               C47619 * C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                   C10559 +
               (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                   C10557 +
               (C16185 * C507 + C16181 * C520 + C16186 * C971 + C47985 * C976) *
                   C10560 +
               (C16185 * C519 + C16181 * C537 + C16186 * C977 + C47985 * C986) *
                   C47987) *
                  C47619 * C47688 * C47670 * C108 -
              ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
               (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                  C47619 * C47688 * C47670 * C109 +
              ((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
               (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                  C47619 * C47688 * C47670 * C110 -
              ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
               (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
                  C47619 * C47688 * C47670 * C111 +
              ((C16235 + C16234) * C10559 + (C16233 + C16232) * C10557 +
               (C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
                   C10560 +
               (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
                   C47987) *
                  C47619 * C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16185 * C115 + C16181 * C122 + C16186 * C304 +
                 C47985 * C317) *
                    C10559 +
                (C16185 * C123 + C16181 * C136 + C16186 * C316 +
                 C47985 * C334) *
                    C10557 +
                (C16185 * C507 + C16181 * C520 + C16186 * C971 +
                 C47985 * C976) *
                    C10560 +
                (C16185 * C519 + C16181 * C537 + C16186 * C977 +
                 C47985 * C986) *
                    C47987) *
                   C47619 * C47688 * C48006 -
               ((C16186 * C1353 + C47985 * C1366 + C16185 * C977 +
                 C16181 * C986) *
                    C47987 +
                (C16186 * C1339 + C47985 * C1354 + C16185 * C971 +
                 C16181 * C976) *
                    C10560 +
                (C16186 * C319 + C47985 * C335 + C16185 * C316 +
                 C16181 * C334) *
                    C10557 +
                (C16186 * C305 + C47985 * C318 + C16185 * C304 +
                 C16181 * C317) *
                    C10559) *
                   C47619 * C47688 * C47994 +
               ((C16185 * C305 + C16181 * C318 + C16186 * C1202 +
                 C47985 * C1211) *
                    C10559 +
                (C16185 * C319 + C16181 * C335 + C16186 * C1210 +
                 C47985 * C1220) *
                    C10557 +
                (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
                 C47985 * C1761) *
                    C10560 +
                (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
                 C47985 * C1767) *
                    C47987) *
                   C47619 * C47688 * C47967) *
                  C299 +
              (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
                (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                   C47619 * C47688 * C47994 -
               ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
                (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                   C47619 * C47688 * C48006 -
               ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
                (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
                   C47619 * C47688 * C47967) *
                  C300 +
              (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
                (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                   C47619 * C47688 * C48006 -
               ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
                (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
                   C47619 * C47688 * C47994 +
               ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
                (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
                 C47985 * C1765) *
                    C10560 +
                (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
                 C47985 * C1769) *
                    C47987) *
                   C47619 * C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C48007 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47996 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C299 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C47996 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C48007 -
           ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
            (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
               C47619 * C47970) *
              C47670 * C300 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C48007 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C47996 +
           ((C16623 + C16622) * C10559 + (C16621 + C16620) * C10557 +
            (C16185 * C2060 + C16181 * C2067 + C16186 * C2472 +
             C47985 * C2477) *
                C10560 +
            (C16185 * C2066 + C16181 * C2078 + C16186 * C2478 +
             C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C1126 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C1127 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
             C47985 * C1761) *
                C10560 +
            (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
             C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C1127 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C1126 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C1126 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C1127 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
              C47619 * C47688 * C1194 -
          ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
           (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
               C10557 +
           (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
               C10559) *
              C47619 * C47688 * C1195 +
          ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
               C10559 +
           (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
               C10557 +
           (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 + C47985 * C1761) *
               C10560 +
           (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C16186 * C6638 + C47985 * C6641 + C16185 * C1762 + C16181 * C1767) *
               C47987 +
           (C16186 * C6635 + C47985 * C6637 + C16185 * C1758 + C16181 * C1761) *
               C10560 +
           (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 + C16181 * C1220) *
               C10557 +
           (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 + C16181 * C1211) *
               C10559) *
              C47619 * C47688 * C1197 +
          ((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 + C47985 * C5997) *
               C10559 +
           (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 + C47985 * C6001) *
               C10557 +
           (C16185 * C6635 + C16181 * C6637 + C16186 * C23056 +
            C47985 * C23057) *
               C10560 +
           (C16185 * C6638 + C16181 * C6641 + C16186 * C23058 +
            C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C48007 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47996 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C1126 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C47996 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C48007 -
           ((C16186 * C7506 + C47985 * C7509 + C16185 * C2474 +
             C16181 * C2479) *
                C47987 +
            (C16186 * C7503 + C47985 * C7505 + C16185 * C2470 +
             C16181 * C2473) *
                C10560 +
            (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
               C47619 * C47970) *
              C1127 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C48007 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C47996 +
           ((C27198 + C27197) * C10559 + (C27196 + C27195) * C10557 +
            (C16185 * C7503 + C16181 * C7505 + C16186 * C23688 +
             C47985 * C23689) *
                C10560 +
            (C16185 * C7506 + C16181 * C7509 + C16186 * C23690 +
             C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C1880 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C1881 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C48003 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C1881 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C1880 -
           ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
            (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
               C47619 * C47970) *
              C47670 * C47990 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C1880 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C1881 +
           ((C16623 + C16622) * C10559 + (C16621 + C16620) * C10557 +
            (C16185 * C2060 + C16181 * C2067 + C16186 * C2472 +
             C47985 * C2477) *
                C10560 +
            (C16185 * C2066 + C16181 * C2078 + C16186 * C2478 +
             C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C1880 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C1881 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C48006 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C1881 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C1880 -
           ((C16186 * C7506 + C47985 * C7509 + C16185 * C2474 +
             C16181 * C2479) *
                C47987 +
            (C16186 * C7503 + C47985 * C7505 + C16185 * C2470 +
             C16181 * C2473) *
                C10560 +
            (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
               C47619 * C47970) *
              C47994 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C1880 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C1881 +
           ((C27198 + C27197) * C10559 + (C27196 + C27195) * C10557 +
            (C16185 * C7503 + C16181 * C7505 + C16186 * C23688 +
             C47985 * C23689) *
                C10560 +
            (C16185 * C7506 + C16181 * C7509 + C16186 * C23690 +
             C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
              C47619 * C2055 -
          ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
           (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
              C47619 * C2056 +
          ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
           (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
              C47619 * C2057 -
          ((C28063 + C28064) * C47987 + (C28065 + C28066) * C10560 +
           (C28062 + C28061) * C10557 + (C28060 + C28059) * C10559) *
              C47619 * C2058 +
          ((C28066 + C28065) * C10559 + (C28064 + C28063) * C10557 +
           (C16185 * C12635 + C16181 * C12637 + C16186 * C28038 +
            C47985 * C28039) *
               C10560 +
           (C16185 * C12638 + C16181 * C12641 + C16186 * C28040 +
            C47985 * C28041) *
               C47987) *
              C47619 * C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47936 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C1126 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47936) *
               C1127 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C10559 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C10557 +
             (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
                C47619 * C47936 -
            ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
             (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
                C47619 * C47775) *
               C47967) *
              C47921 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47936) *
               C1126 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47936 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C1127 +
           (((C17847 + C17846) * C10559 + (C17845 + C17844) * C10557 +
             (C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C10560 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
             (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
                C47619 * C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47936 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C47670 * C695 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C47775 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47936) *
              C47670 * C696 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47936 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C47775) *
              C47670 * C697 +
          (((C16907 + C16906) * C10559 + (C16905 + C16904) * C10557 +
            (C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                C10560 +
            (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C2348 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C2349 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
               C47619 * C2350 -
           ((C28063 + C28064) * C47987 + (C28065 + C28066) * C10560 +
            (C28062 + C28061) * C10557 + (C28060 + C28059) * C10559) *
               C47619 * C47983) *
              C47670 * C47921 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C2349 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C2348 -
           ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
            (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
               C47619 * C2350 +
           ((C18699 + C18698) * C10559 + (C18697 + C18696) * C10557 +
            (C16185 * C2064 + C16181 * C2074 + C16186 * C7018 +
             C47985 * C7021) *
                C10560 +
            (C16185 * C2075 + C16181 * C2082 + C16186 * C7022 +
             C47985 * C7024) *
                C47987) *
               C47619 * C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C16185 * C507 + C16181 * C520 + C16186 * C971 + C47985 * C976) *
                C10560 +
            (C16185 * C519 + C16181 * C537 + C16186 * C977 + C47985 * C986) *
                C47987) *
               C47619 * C47688 * C48006 -
           ((C16186 * C1353 + C47985 * C1366 + C16185 * C977 + C16181 * C986) *
                C47987 +
            (C16186 * C1339 + C47985 * C1354 + C16185 * C971 + C16181 * C976) *
                C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47994 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
             C47985 * C1761) *
                C10560 +
            (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
             C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C299 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47994 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C48006 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47967) *
              C300 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C48006 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47994 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C16185 * C507 + C16181 * C520 + C16186 * C971 + C47985 * C976) *
               C10560 +
           (C16185 * C519 + C16181 * C537 + C16186 * C977 + C47985 * C986) *
               C47987) *
              C47619 * C47688 * C47670 * C108 -
          ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
           (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
              C47619 * C47688 * C47670 * C109 +
          ((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
           (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
              C47619 * C47688 * C47670 * C110 -
          ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
           (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
              C47619 * C47688 * C47670 * C111 +
          ((C16235 + C16234) * C10559 + (C16233 + C16232) * C10557 +
           (C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
               C10560 +
           (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
               C47987) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C1126 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C1127 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
             C47985 * C1761) *
                C10560 +
            (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
             C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C1127 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C1126 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C1126 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C1127 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
              C47619 * C47688 * C1194 -
          ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
           (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
               C10557 +
           (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
               C10559) *
              C47619 * C47688 * C1195 +
          ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
               C10559 +
           (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
               C10557 +
           (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 + C47985 * C1761) *
               C10560 +
           (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C16186 * C6638 + C47985 * C6641 + C16185 * C1762 + C16181 * C1767) *
               C47987 +
           (C16186 * C6635 + C47985 * C6637 + C16185 * C1758 + C16181 * C1761) *
               C10560 +
           (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 + C16181 * C1220) *
               C10557 +
           (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 + C16181 * C1211) *
               C10559) *
              C47619 * C47688 * C1197 +
          ((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 + C47985 * C5997) *
               C10559 +
           (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 + C47985 * C6001) *
               C10557 +
           (C16185 * C6635 + C16181 * C6637 + C16186 * C23056 +
            C47985 * C23057) *
               C10560 +
           (C16185 * C6638 + C16181 * C6641 + C16186 * C23058 +
            C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C1880 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C1881 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C48003 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C1881 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C1880 -
           ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
            (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
               C47619 * C47970) *
              C47670 * C47990 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C1880 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C1881 +
           ((C16623 + C16622) * C10559 + (C16621 + C16620) * C10557 +
            (C16185 * C2060 + C16181 * C2067 + C16186 * C2472 +
             C47985 * C2477) *
                C10560 +
            (C16185 * C2066 + C16181 * C2078 + C16186 * C2478 +
             C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C1880 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C1881 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C48006 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C1881 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C1880 -
           ((C16186 * C7506 + C47985 * C7509 + C16185 * C2474 +
             C16181 * C2479) *
                C47987 +
            (C16186 * C7503 + C47985 * C7505 + C16185 * C2470 +
             C16181 * C2473) *
                C10560 +
            (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
               C47619 * C47970) *
              C47994 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C1880 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C1881 +
           ((C27198 + C27197) * C10559 + (C27196 + C27195) * C10557 +
            (C16185 * C7503 + C16181 * C7505 + C16186 * C23688 +
             C47985 * C23689) *
                C10560 +
            (C16185 * C7506 + C16181 * C7509 + C16186 * C23690 +
             C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C3342 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C47935 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C3342) *
               C47733) *
              C47647 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C3342) *
               C47935 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C3342 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47733) *
              C47656 +
          ((((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
             (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                C47619 * C3342 -
            ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
             (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
                C47619 * C47775) *
               C47935 +
           (((C17125 + C17124) * C10559 + (C17123 + C17122) * C10557 +
             (C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
              C47985 * C1359) *
                 C10560 +
             (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
              C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
             (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
                C47619 * C3342) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47771 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47778 +
            ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
             (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
                C47619 * C3850) *
               C47935 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47778 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47771 -
            ((C28529 + C28530) * C47987 + (C28531 + C28532) * C10560 +
             (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
                C47619 * C3850) *
               C47733) *
              C2688 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47778 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47771 -
            ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
             (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
                C47619 * C3850) *
               C47935 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47771 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47778 +
            ((C18557 + C18556) * C10559 + (C18555 + C18554) * C10557 +
             (C16185 * C2471 + C16181 * C2475 + C16186 * C7504 +
              C47985 * C7507) *
                 C10560 +
             (C16185 * C2476 + C16181 * C2480 + C16186 * C7508 +
              C47985 * C7510) *
                 C47987) *
                C47619 * C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C3342 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C48006 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C3342) *
               C47994 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C10559 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C10557 +
             (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
                C47619 * C3342 -
            ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
             (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
                C47619 * C47775) *
               C47967) *
              C2688 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C3342) *
               C48006 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C3342 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47994 +
           (((C17847 + C17846) * C10559 + (C17845 + C17844) * C10557 +
             (C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C10560 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
             (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
                C47619 * C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C3342 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C47670 * C48012 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C47775 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C3342) *
              C47670 * C48005 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C3342 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C47775) *
              C47670 * C47992 +
          (((C16907 + C16906) * C10559 + (C16905 + C16904) * C10557 +
            (C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                C10560 +
            (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C48014 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C48011 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
               C47619 * C48002 -
           ((C28063 + C28064) * C47987 + (C28065 + C28066) * C10560 +
            (C28062 + C28061) * C10557 + (C28060 + C28059) * C10559) *
               C47619 * C47983) *
              C47670 * C2688 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C48011 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C48014 -
           ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
            (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
               C47619 * C48002 +
           ((C18699 + C18698) * C10559 + (C18697 + C18696) * C10557 +
            (C16185 * C2064 + C16181 * C2074 + C16186 * C7018 +
             C47985 * C7021) *
                C10560 +
            (C16185 * C2075 + C16181 * C2082 + C16186 * C7022 +
             C47985 * C7024) *
                C47987) *
               C47619 * C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47771 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47778 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C28059 + C28060) * C10560 + (C28061 + C28062) * C47987) *
               C47619 * C3850) *
              C47670 * C47647 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C47778 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47771 -
           ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
            (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
               C47619 * C3850) *
              C47670 * C47656 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47771 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C47778 +
           ((C16623 + C16622) * C10559 + (C16621 + C16620) * C10557 +
            (C16185 * C2060 + C16181 * C2067 + C16186 * C2472 +
             C47985 * C2477) *
                C10560 +
            (C16185 * C2066 + C16181 * C2078 + C16186 * C2478 +
             C47985 * C2481) *
                C47987) *
               C47619 * C3850) *
              C47670 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C3342 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C47670 * C48012 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C47775 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C3342) *
              C47670 * C48005 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C3342 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C47775) *
              C47670 * C47992 +
          (((C16907 + C16906) * C10559 + (C16905 + C16904) * C10557 +
            (C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                C10560 +
            (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C3342 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C48006 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C3342) *
               C47994 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C10559 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C10557 +
             (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
                C47619 * C3342 -
            ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
             (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
                C47619 * C47775) *
               C47967) *
              C2688 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C3342) *
               C48006 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C3342 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47994 +
           (((C17847 + C17846) * C10559 + (C17845 + C17844) * C10557 +
             (C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C10560 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
             (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
                C47619 * C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C47935 -
           ((C16186 * C1353 + C47985 * C1366 + C16185 * C977 + C16181 * C986) *
                C47987 +
            (C16186 * C1339 + C47985 * C1354 + C16185 * C971 + C16181 * C976) *
                C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47733) *
              C695 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47733 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C47935) *
              C696 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C47935 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47733) *
              C697 +
          (((C16765 + C16764) * C10559 + (C16763 + C16762) * C10557 +
            (C16185 * C974 + C16181 * C983 + C16186 * C1640 + C47985 * C1641) *
                C10560 +
            (C16185 * C982 + C16181 * C989 + C16186 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C1468 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C1469 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47688 * C1470 -
           ((C16186 * C6638 + C47985 * C6641 + C16185 * C1762 +
             C16181 * C1767) *
                C47987 +
            (C16186 * C6635 + C47985 * C6637 + C16185 * C1758 +
             C16181 * C1761) *
                C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C47688 * C47977) *
              C47921 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C1469 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C1468 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C1470 +
           ((C17641 + C17640) * C10559 + (C17639 + C17638) * C10557 +
            (C16185 * C1759 + C16181 * C1763 + C16186 * C6636 +
             C47985 * C6639) *
                C10560 +
            (C16185 * C1764 + C16181 * C1768 + C16186 * C6640 +
             C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47936 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C47935 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C16185 * C1336 + C16181 * C1348 + C16186 * C1340 +
              C47985 * C1355) *
                 C10560 +
             (C16185 * C1347 + C16181 * C1363 + C16186 * C1356 +
              C47985 * C1367) *
                 C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47936) *
               C47733) *
              C299 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47936) *
               C47935 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47936 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C47733) *
              C300 +
          ((((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
             (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
                C47619 * C47936 -
            ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
             (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
                C47619 * C47775) *
               C47935 +
           (((C17125 + C17124) * C10559 + (C17123 + C17122) * C10557 +
             (C16185 * C1334 + C16181 * C1344 + C16186 * C1342 +
              C47985 * C1359) *
                 C10560 +
             (C16185 * C1343 + C16181 * C1361 + C16186 * C1360 +
              C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
             (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
                C47619 * C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47936 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C1468 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C47775 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47936) *
              C1469 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C47936 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C47775) *
              C1470 +
          (((C27661 + C27662) * C10559 + (C27663 + C27664) * C10557 +
            (C16185 * C6149 + C16181 * C6151 + C16186 * C22710 +
             C47985 * C22711) *
                C10560 +
            (C16185 * C6152 + C16181 * C6155 + C16186 * C22712 +
             C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C27664 + C27663) * C47987 + (C27662 + C27661) * C10560 +
            (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 +
             C16181 * C1220) *
                C10557 +
            (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 +
             C16181 * C1211) *
                C10559) *
               C47619 * C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C16185 * C507 + C16181 * C520 + C16186 * C971 + C47985 * C976) *
                C10560 +
            (C16185 * C519 + C16181 * C537 + C16186 * C977 + C47985 * C986) *
                C47987) *
               C47619 * C47688 * C48006 -
           ((C16186 * C1353 + C47985 * C1366 + C16185 * C977 + C16181 * C986) *
                C47987 +
            (C16186 * C1339 + C47985 * C1354 + C16185 * C971 + C16181 * C976) *
                C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47994 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
             C47985 * C1761) *
                C10560 +
            (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
             C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C299 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47994 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C48006 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47967) *
              C300 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C48006 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47994 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C16185 * C507 + C16181 * C520 + C16186 * C971 + C47985 * C976) *
               C10560 +
           (C16185 * C519 + C16181 * C537 + C16186 * C977 + C47985 * C986) *
               C47987) *
              C47619 * C47688 * C47670 * C108 -
          ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
           (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
              C47619 * C47688 * C47670 * C109 +
          ((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
           (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
              C47619 * C47688 * C47670 * C110 -
          ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
           (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
              C47619 * C47688 * C47670 * C111 +
          ((C16235 + C16234) * C10559 + (C16233 + C16232) * C10557 +
           (C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
               C10560 +
           (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
               C47987) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C48007 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47996 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C299 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C47996 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C48007 -
           ((C18696 + C18697) * C47987 + (C18698 + C18699) * C10560 +
            (C16615 + C16614) * C10557 + (C16613 + C16612) * C10559) *
               C47619 * C47970) *
              C47670 * C300 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C48007 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C47996 +
           ((C16623 + C16622) * C10559 + (C16621 + C16620) * C10557 +
            (C16185 * C2060 + C16181 * C2067 + C16186 * C2472 +
             C47985 * C2477) *
                C10560 +
            (C16185 * C2066 + C16181 * C2078 + C16186 * C2478 +
             C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C1126 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C1127 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
             C47985 * C1761) *
                C10560 +
            (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
             C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C1127 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C1126 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C1126 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C1127 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
              C47619 * C47688 * C1194 -
          ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
           (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
               C10557 +
           (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
               C10559) *
              C47619 * C47688 * C1195 +
          ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
               C10559 +
           (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
               C10557 +
           (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 + C47985 * C1761) *
               C10560 +
           (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C16186 * C6638 + C47985 * C6641 + C16185 * C1762 + C16181 * C1767) *
               C47987 +
           (C16186 * C6635 + C47985 * C6637 + C16185 * C1758 + C16181 * C1761) *
               C10560 +
           (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 + C16181 * C1220) *
               C10557 +
           (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 + C16181 * C1211) *
               C10559) *
              C47619 * C47688 * C1197 +
          ((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 + C47985 * C5997) *
               C10559 +
           (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 + C47985 * C6001) *
               C10557 +
           (C16185 * C6635 + C16181 * C6637 + C16186 * C23056 +
            C47985 * C23057) *
               C10560 +
           (C16185 * C6638 + C16181 * C6641 + C16186 * C23058 +
            C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C48007 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47996 +
           ((C26322 + C26321) * C10559 + (C26320 + C26319) * C10557 +
            (C16185 * C2062 + C16181 * C2071 + C16186 * C2470 +
             C47985 * C2473) *
                C10560 +
            (C16185 * C2070 + C16181 * C2080 + C16186 * C2474 +
             C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C1126 +
          (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
            (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
               C47619 * C47996 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C48007 -
           ((C16186 * C7506 + C47985 * C7509 + C16185 * C2474 +
             C16181 * C2479) *
                C47987 +
            (C16186 * C7503 + C47985 * C7505 + C16185 * C2470 +
             C16181 * C2473) *
                C10560 +
            (C27190 + C27189) * C10557 + (C27188 + C27187) * C10559) *
               C47619 * C47970) *
              C1127 +
          (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
               C47619 * C48007 -
           ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
            (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
               C47619 * C47996 +
           ((C27198 + C27197) * C10559 + (C27196 + C27195) * C10557 +
            (C16185 * C7503 + C16181 * C7505 + C16186 * C23688 +
             C47985 * C23689) *
                C10560 +
            (C16185 * C7506 + C16181 * C7509 + C16186 * C23690 +
             C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47936 -
           ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
            (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
               C47619 * C47775) *
              C47670 * C695 +
          (((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
            (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
               C47619 * C47775 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47936) *
              C47670 * C696 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47936 -
           ((C16620 + C16621) * C47987 + (C16622 + C16623) * C10560 +
            (C16619 + C16618) * C10557 + (C16617 + C16616) * C10559) *
               C47619 * C47775) *
              C47670 * C697 +
          (((C16907 + C16906) * C10559 + (C16905 + C16904) * C10557 +
            (C16185 * C512 + C16181 * C530 + C16186 * C2230 + C47985 * C2231) *
                C10560 +
            (C16185 * C529 + C16181 * C542 + C16186 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
            (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
               C47619 * C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                 C10559 +
             (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                 C10557 +
             (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
                C47619 * C47936 -
            ((C26319 + C26320) * C47987 + (C26321 + C26322) * C10560 +
             (C26318 + C26317) * C10557 + (C26316 + C26315) * C10559) *
                C47619 * C47775) *
               C1126 +
           (((C26785 + C26786) * C10559 + (C26787 + C26788) * C10557 +
             (C27187 + C27188) * C10560 + (C27189 + C27190) * C47987) *
                C47619 * C47775 -
            ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
             (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                 C10557 +
             (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                 C10559) *
                C47619 * C47936) *
               C1127 +
           (((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                 C10559 +
             (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                 C10557 +
             (C27191 + C27192) * C10560 + (C27193 + C27194) * C47987) *
                C47619 * C47936 -
            ((C27195 + C27196) * C47987 + (C27197 + C27198) * C10560 +
             (C27194 + C27193) * C10557 + (C27192 + C27191) * C10559) *
                C47619 * C47775) *
               C47967) *
              C47921 +
          ((((C16611 + C16610) * C10559 + (C16609 + C16608) * C10557 +
             (C16612 + C16613) * C10560 + (C16614 + C16615) * C47987) *
                C47619 * C47775 -
            ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
             (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
                C47619 * C47936) *
               C1126 +
           (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
             (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
                C47619 * C47936 -
            ((C18554 + C18555) * C47987 + (C18556 + C18557) * C10560 +
             (C17121 + C17120) * C10557 + (C17119 + C17118) * C10559) *
                C47619 * C47775) *
               C1127 +
           (((C17847 + C17846) * C10559 + (C17845 + C17844) * C10557 +
             (C16185 * C1341 + C16181 * C1357 + C16186 * C6150 +
              C47985 * C6153) *
                 C10560 +
             (C16185 * C1358 + C16181 * C1368 + C16186 * C6154 +
              C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
             (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
                C47619 * C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C16185 * C507 + C16181 * C520 + C16186 * C971 + C47985 * C976) *
               C10560 +
           (C16185 * C519 + C16181 * C537 + C16186 * C977 + C47985 * C986) *
               C47987) *
              C47619 * C47688 * C47670 * C108 -
          ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
           (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
              C47619 * C47688 * C47670 * C109 +
          ((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
           (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
              C47619 * C47688 * C47670 * C110 -
          ((C16904 + C16905) * C47987 + (C16906 + C16907) * C10560 +
           (C16231 + C16230) * C10557 + (C16229 + C16228) * C10559) *
              C47619 * C47688 * C47670 * C111 +
          ((C16235 + C16234) * C10559 + (C16233 + C16232) * C10557 +
           (C16185 * C513 + C16181 * C532 + C16186 * C975 + C47985 * C984) *
               C10560 +
           (C16185 * C531 + C16181 * C543 + C16186 * C985 + C47985 * C990) *
               C47987) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C16185 * C507 + C16181 * C520 + C16186 * C971 + C47985 * C976) *
                C10560 +
            (C16185 * C519 + C16181 * C537 + C16186 * C977 + C47985 * C986) *
                C47987) *
               C47619 * C47688 * C48006 -
           ((C16186 * C1353 + C47985 * C1366 + C16185 * C977 + C16181 * C986) *
                C47987 +
            (C16186 * C1339 + C47985 * C1354 + C16185 * C971 + C16181 * C976) *
                C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C47994 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
             C47985 * C1761) *
                C10560 +
            (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
             C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C299 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C47994 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C48006 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47967) *
              C300 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C48006 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C47994 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
                C10559 +
            (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
                C10557 +
            (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
               C47619 * C47688 * C1126 -
           ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
            (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
                C10557 +
            (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
                C10559) *
               C47619 * C47688 * C1127 +
           ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
                C10559 +
            (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
                C10557 +
            (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 +
             C47985 * C1761) *
                C10560 +
            (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 +
             C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C16417 + C16416) * C10559 + (C16415 + C16414) * C10557 +
            (C17118 + C17119) * C10560 + (C17120 + C17121) * C47987) *
               C47619 * C47688 * C1127 -
           ((C16608 + C16609) * C47987 + (C16610 + C16611) * C10560 +
            (C16223 + C16222) * C10557 + (C16221 + C16220) * C10559) *
               C47619 * C47688 * C1126 -
           ((C17844 + C17845) * C47987 + (C17846 + C17847) * C10560 +
            (C16421 + C16420) * C10557 + (C16419 + C16418) * C10559) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C16227 + C16226) * C10559 + (C16225 + C16224) * C10557 +
            (C16616 + C16617) * C10560 + (C16618 + C16619) * C47987) *
               C47619 * C47688 * C1126 -
           ((C17122 + C17123) * C47987 + (C17124 + C17125) * C10560 +
            (C16425 + C16424) * C10557 + (C16423 + C16422) * C10559) *
               C47619 * C47688 * C1127 +
           ((C16429 + C16428) * C10559 + (C16427 + C16426) * C10557 +
            (C16185 * C1337 + C16181 * C1350 + C16186 * C1760 +
             C47985 * C1765) *
                C10560 +
            (C16185 * C1349 + C16181 * C1364 + C16186 * C1766 +
             C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16185 * C115 + C16181 * C122 + C16186 * C304 + C47985 * C317) *
               C10559 +
           (C16185 * C123 + C16181 * C136 + C16186 * C316 + C47985 * C334) *
               C10557 +
           (C26315 + C26316) * C10560 + (C26317 + C26318) * C47987) *
              C47619 * C47688 * C1194 -
          ((C26788 + C26787) * C47987 + (C26786 + C26785) * C10560 +
           (C16186 * C319 + C47985 * C335 + C16185 * C316 + C16181 * C334) *
               C10557 +
           (C16186 * C305 + C47985 * C318 + C16185 * C304 + C16181 * C317) *
               C10559) *
              C47619 * C47688 * C1195 +
          ((C16185 * C305 + C16181 * C318 + C16186 * C1202 + C47985 * C1211) *
               C10559 +
           (C16185 * C319 + C16181 * C335 + C16186 * C1210 + C47985 * C1220) *
               C10557 +
           (C16185 * C1339 + C16181 * C1354 + C16186 * C1758 + C47985 * C1761) *
               C10560 +
           (C16185 * C1353 + C16181 * C1366 + C16186 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C16186 * C6638 + C47985 * C6641 + C16185 * C1762 + C16181 * C1767) *
               C47987 +
           (C16186 * C6635 + C47985 * C6637 + C16185 * C1758 + C16181 * C1761) *
               C10560 +
           (C16186 * C1213 + C47985 * C1221 + C16185 * C1210 + C16181 * C1220) *
               C10557 +
           (C16186 * C1203 + C47985 * C1212 + C16185 * C1202 + C16181 * C1211) *
               C10559) *
              C47619 * C47688 * C1197 +
          ((C16185 * C1203 + C16181 * C1212 + C16186 * C5995 + C47985 * C5997) *
               C10559 +
           (C16185 * C1213 + C16181 * C1221 + C16186 * C5998 + C47985 * C6001) *
               C10557 +
           (C16185 * C6635 + C16181 * C6637 + C16186 * C23056 +
            C47985 * C23057) *
               C10560 +
           (C16185 * C6638 + C16181 * C6641 + C16186 * C23058 +
            C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[150] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C47729 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C47736 +
                    (((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47688 * C2948) *
                       C47647 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C47736 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C47729 -
                    ((C31757 + C31758 + C31759 + C31760) * C47954 +
                     (C31752 + C31751 + C31750 + C31749) * C16183) *
                        C47688 * C2948) *
                       C47656 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47688 * C47729 -
                    ((C32053 + C32054 + C32055 + C32056) * C47954 +
                     (C31756 + C31755 + C31754 + C31753) * C16183) *
                        C47688 * C47736 +
                    ((C31760 + C31759 + C31758 + C31757) * C16183 +
                     (C378 * C31580 + C377 * C31578 +
                      (C113 * C1640 + C47873 * C1641) * C31581 +
                      (C113 * C1642 + C47873 * C1643) * C47987) *
                         C47954) *
                        C47688 * C2948) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[151] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47936 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C47729 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47936) *
                        C47736 +
                    ((((C113 * C305 + C47873 * C318) * C31580 +
                       (C113 * C319 + C47873 * C335) * C31578 +
                       C11782 * C31581 + C11783 * C47987) *
                          C16183 +
                      (C31749 + C31750 + C31751 + C31752) * C47954) *
                         C47936 -
                     ((C33095 + C33096 + C33097 + C33098) * C47954 +
                      (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                       C11782 * C31580) *
                          C16183) *
                         C47775) *
                        C2948) *
                       C2688 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47936) *
                        C47729 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47936 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47736 +
                    (((C33098 + C33097 + C33096 + C33095) * C16183 +
                      (C1654 * C31580 + C1653 * C31578 +
                       (C113 * C1342 + C47873 * C1359) * C31581 +
                       (C113 * C1360 + C47873 * C1369) * C47987) *
                          C47954) *
                         C47775 -
                     ((C31757 + C31758 + C31759 + C31760) * C47954 +
                      (C31752 + C31751 + C31750 + C31749) * C16183) *
                         C47936) *
                        C2948) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[152] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C48013 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C48009 +
                    (((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47688 * C47999 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C47688 * C47977) *
                       C2688 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C48009 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C48013 -
                    ((C31757 + C31758 + C31759 + C31760) * C47954 +
                     (C31752 + C31751 + C31750 + C31749) * C16183) *
                        C47688 * C47999 +
                    ((C32900 + C32899 + C32898 + C32897) * C16183 +
                     (C1488 * C31580 + C1487 * C31578 +
                      (C113 * C1760 + C47873 * C1765) * C31581 +
                      (C113 * C1766 + C47873 * C1769) * C47987) *
                         C47954) *
                        C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C2580 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C47733) *
                       C48012 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C47733 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C2580) *
                       C48005 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47688 * C2580 -
                    ((C32053 + C32054 + C32055 + C32056) * C47954 +
                     (C31756 + C31755 + C31754 + C31753) * C16183) *
                        C47688 * C47733) *
                       C47992 +
                   (((C32056 + C32055 + C32054 + C32053) * C16183 +
                     (C710 * C31580 + C709 * C31578 +
                      (C113 * C975 + C47873 * C984) * C31581 +
                      (C113 * C985 + C47873 * C990) * C47987) *
                         C47954) *
                        C47688 * C47733 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C47688 * C2580) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C48007 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47996 +
                     ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                       C12657 * C47987) *
                          C16183 +
                      (C31911 + C31912 + C31913 + C31914) * C47954) *
                         C47970) *
                        C2580 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47996 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C48007 -
                     ((C33797 + C33798 + C33799 + C33800) * C47954 +
                      (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
                       C11780 * C31580) *
                          C16183) *
                         C47970) *
                        C47733) *
                       C2688 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47996 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C48007 -
                     ((C31919 + C31920 + C31921 + C31922) * C47954 +
                      (C31914 + C31913 + C31912 + C31911) * C16183) *
                         C47970) *
                        C2580 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C48007 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47996 +
                     ((C33800 + C33799 + C33798 + C33797) * C16183 +
                      (C2244 * C31580 + C2243 * C31578 +
                       (C113 * C2472 + C47873 * C2477) * C31581 +
                       (C113 * C2478 + C47873 * C2481) * C47987) *
                          C47954) *
                         C47970) *
                        C47733) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[153] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47936 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C2580 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47936) *
                        C47733) *
                       C47647 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47936) *
                        C2580 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47936 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47733) *
                       C47656 +
                   ((((C31590 + C31589 + C31588 + C31587) * C16183 +
                      (C31591 + C31592 + C31593 + C31594) * C47954) *
                         C47936 -
                     ((C32187 + C32188 + C32189 + C32190) * C47954 +
                      (C31918 + C31917 + C31916 + C31915) * C16183) *
                         C47775) *
                        C2580 +
                    (((C32392 + C32391 + C32390 + C32389) * C16183 +
                      (C1009 * C31580 + C1008 * C31578 +
                       (C113 * C2230 + C47873 * C2231) * C31581 +
                       (C113 * C2232 + C47873 * C2233) * C47987) *
                          C47954) *
                         C47775 -
                     ((C32053 + C32054 + C32055 + C32056) * C47954 +
                      (C31756 + C31755 + C31754 + C31753) * C16183) *
                         C47936) *
                        C47733) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[154] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C2580 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C47733) *
                       C48012 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C47733 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C2580) *
                       C48005 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47688 * C2580 -
                    ((C32053 + C32054 + C32055 + C32056) * C47954 +
                     (C31756 + C31755 + C31754 + C31753) * C16183) *
                        C47688 * C47733) *
                       C47992 +
                   (((C32056 + C32055 + C32054 + C32053) * C16183 +
                     (C710 * C31580 + C709 * C31578 +
                      (C113 * C975 + C47873 * C984) * C31581 +
                      (C113 * C985 + C47873 * C990) * C47987) *
                         C47954) *
                        C47688 * C47733 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C47688 * C2580) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C48013 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C48009 +
                    (((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47688 * C47999 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C47688 * C47977) *
                       C2688 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C48009 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C48013 -
                    ((C31757 + C31758 + C31759 + C31760) * C47954 +
                     (C31752 + C31751 + C31750 + C31749) * C16183) *
                        C47688 * C47999 +
                    ((C32900 + C32899 + C32898 + C32897) * C16183 +
                     (C1488 * C31580 + C1487 * C31578 +
                      (C113 * C1760 + C47873 * C1765) * C31581 +
                      (C113 * C1766 + C47873 * C1769) * C47987) *
                         C47954) *
                        C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[155] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C3342 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C47729 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C3342) *
                        C47736 +
                    ((((C113 * C305 + C47873 * C318) * C31580 +
                       (C113 * C319 + C47873 * C335) * C31578 +
                       C11782 * C31581 + C11783 * C47987) *
                          C16183 +
                      (C31749 + C31750 + C31751 + C31752) * C47954) *
                         C3342 -
                     ((C33095 + C33096 + C33097 + C33098) * C47954 +
                      (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                       C11782 * C31580) *
                          C16183) *
                         C47775) *
                        C2948) *
                       C47921 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C3342) *
                        C47729 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C3342 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47736 +
                    (((C33098 + C33097 + C33096 + C33095) * C16183 +
                      (C1654 * C31580 + C1653 * C31578 +
                       (C113 * C1342 + C47873 * C1359) * C31581 +
                       (C113 * C1360 + C47873 * C1369) * C47987) *
                          C47954) *
                         C47775 -
                     ((C31757 + C31758 + C31759 + C31760) * C47954 +
                      (C31752 + C31751 + C31750 + C31749) * C16183) *
                         C3342) *
                        C2948) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[156] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47771 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47778 +
                    ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                      C12657 * C47987) *
                         C16183 +
                     (C31911 + C31912 + C31913 + C31914) * C47954) *
                        C3850) *
                       C47729 +
                   (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                      C11781 * C47987) *
                         C16183 +
                     (C32385 + C32386 + C32387 + C32388) * C47954) *
                        C47778 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47771 -
                    ((C33797 + C33798 + C33799 + C33800) * C47954 +
                     (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
                      C11780 * C31580) *
                         C16183) *
                        C3850) *
                       C47736 +
                   ((((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47771 -
                    ((C33095 + C33096 + C33097 + C33098) * C47954 +
                     (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                      C11782 * C31580) *
                         C16183) *
                        C47778 +
                    ((C11787 * C31580 + C11786 * C31578 +
                      (C113 * C7503 + C47873 * C7505) * C31581 +
                      (C113 * C7506 + C47873 * C7509) * C47987) *
                         C16183 +
                     (C11785 * C31580 + C11784 * C31578 +
                      (C113 * C7504 + C47873 * C7507) * C31581 +
                      (C113 * C7508 + C47873 * C7510) * C47987) *
                         C47954) *
                        C3850) *
                       C2948) *
                  C47642) /
                 (p * q * std::sqrt(p + q));
    d2ee[157] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C3342 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C48013 +
                   (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                      C11781 * C47987) *
                         C16183 +
                     (C32385 + C32386 + C32387 + C32388) * C47954) *
                        C47775 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C3342) *
                       C48009 +
                   ((((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C3342 -
                    ((C33095 + C33096 + C33097 + C33098) * C47954 +
                     (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                      C11782 * C31580) *
                         C16183) *
                        C47775) *
                       C47999 +
                   (((C12260 * C31580 + C12261 * C31578 +
                      (C113 * C6149 + C47873 * C6151) * C31581 +
                      (C113 * C6152 + C47873 * C6155) * C47987) *
                         C16183 +
                     (C11925 * C31580 + C11924 * C31578 +
                      (C113 * C6150 + C47873 * C6153) * C31581 +
                      (C113 * C6154 + C47873 * C6156) * C47987) *
                         C47954) *
                        C47775 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C3342) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C3342 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C2580 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C3342) *
                        C47733) *
                       C48003 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C3342) *
                        C2580 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C3342 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47733) *
                       C47990 +
                   ((((C31590 + C31589 + C31588 + C31587) * C16183 +
                      (C31591 + C31592 + C31593 + C31594) * C47954) *
                         C3342 -
                     ((C32187 + C32188 + C32189 + C32190) * C47954 +
                      (C31918 + C31917 + C31916 + C31915) * C16183) *
                         C47775) *
                        C2580 +
                    (((C32392 + C32391 + C32390 + C32389) * C16183 +
                      (C1009 * C31580 + C1008 * C31578 +
                       (C113 * C2230 + C47873 * C2231) * C31581 +
                       (C113 * C2232 + C47873 * C2233) * C47987) *
                          C47954) *
                         C47775 -
                     ((C32053 + C32054 + C32055 + C32056) * C47954 +
                      (C31756 + C31755 + C31754 + C31753) * C16183) *
                         C3342) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C48014 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C48011 +
                    ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                      C12657 * C47987) *
                         C16183 +
                     (C31911 + C31912 + C31913 + C31914) * C47954) *
                        C48002 -
                    ((C33931 + C33932 + C33933 + C33934) * C47954 +
                     (C12660 * C47987 + C12661 * C31581 + C12657 * C31578 +
                      C12656 * C31580) *
                         C16183) *
                        C47983) *
                       C2580 +
                   (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                      C11781 * C47987) *
                         C16183 +
                     (C32385 + C32386 + C32387 + C32388) * C47954) *
                        C48011 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C48014 -
                    ((C33797 + C33798 + C33799 + C33800) * C47954 +
                     (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
                      C11780 * C31580) *
                         C16183) *
                        C48002 +
                    ((C13135 * C31580 + C13134 * C31578 +
                      (C113 * C7017 + C47873 * C7019) * C31581 +
                      (C113 * C7020 + C47873 * C7023) * C47987) *
                         C16183 +
                     (C12863 * C31580 + C12862 * C31578 +
                      (C113 * C7018 + C47873 * C7021) * C31581 +
                      (C113 * C7022 + C47873 * C7024) * C47987) *
                         C47954) *
                        C47983) *
                       C47733) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[158] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47771 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47778 +
                     ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                       C12657 * C47987) *
                          C16183 +
                      (C31911 + C31912 + C31913 + C31914) * C47954) *
                         C3850) *
                        C2580 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47778 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47771 -
                     ((C33797 + C33798 + C33799 + C33800) * C47954 +
                      (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
                       C11780 * C31580) *
                          C16183) *
                         C3850) *
                        C47733) *
                       C47921 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47778 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47771 -
                     ((C31919 + C31920 + C31921 + C31922) * C47954 +
                      (C31914 + C31913 + C31912 + C31911) * C16183) *
                         C3850) *
                        C2580 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47771 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47778 +
                     ((C33800 + C33799 + C33798 + C33797) * C16183 +
                      (C2244 * C31580 + C2243 * C31578 +
                       (C113 * C2472 + C47873 * C2477) * C31581 +
                       (C113 * C2478 + C47873 * C2481) * C47987) *
                          C47954) *
                         C3850) *
                        C47733) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[159] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C3342 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C2580 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C3342) *
                        C47733) *
                       C48003 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C3342) *
                        C2580 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C3342 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47733) *
                       C47990 +
                   ((((C31590 + C31589 + C31588 + C31587) * C16183 +
                      (C31591 + C31592 + C31593 + C31594) * C47954) *
                         C3342 -
                     ((C32187 + C32188 + C32189 + C32190) * C47954 +
                      (C31918 + C31917 + C31916 + C31915) * C16183) *
                         C47775) *
                        C2580 +
                    (((C32392 + C32391 + C32390 + C32389) * C16183 +
                      (C1009 * C31580 + C1008 * C31578 +
                       (C113 * C2230 + C47873 * C2231) * C31581 +
                       (C113 * C2232 + C47873 * C2233) * C47987) *
                          C47954) *
                         C47775 -
                     ((C32053 + C32054 + C32055 + C32056) * C47954 +
                      (C31756 + C31755 + C31754 + C31753) * C16183) *
                         C3342) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C3342 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C48013 +
                   (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                      C11781 * C47987) *
                         C16183 +
                     (C32385 + C32386 + C32387 + C32388) * C47954) *
                        C47775 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C3342) *
                       C48009 +
                   ((((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C3342 -
                    ((C33095 + C33096 + C33097 + C33098) * C47954 +
                     (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                      C11782 * C31580) *
                         C16183) *
                        C47775) *
                       C47999 +
                   (((C12260 * C31580 + C12261 * C31578 +
                      (C113 * C6149 + C47873 * C6151) * C31581 +
                      (C113 * C6152 + C47873 * C6155) * C47987) *
                         C16183 +
                     (C11925 * C31580 + C11924 * C31578 +
                      (C113 * C6150 + C47873 * C6153) * C31581 +
                      (C113 * C6154 + C47873 * C6156) * C47987) *
                         C47954) *
                        C47775 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C3342) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[160] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C1468 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C1469 +
                    (((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47688 * C1470 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C47688 * C47977) *
                       C47921 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C1469 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C1468 -
                    ((C31757 + C31758 + C31759 + C31760) * C47954 +
                     (C31752 + C31751 + C31750 + C31749) * C16183) *
                        C47688 * C1470 +
                    ((C32900 + C32899 + C32898 + C32897) * C16183 +
                     (C1488 * C31580 + C1487 * C31578 +
                      (C113 * C1760 + C47873 * C1765) * C31581 +
                      (C113 * C1766 + C47873 * C1769) * C47987) *
                         C47954) *
                        C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C47935 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C47733) *
                       C695 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C47733 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C47935) *
                       C696 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47688 * C47935 -
                    ((C32053 + C32054 + C32055 + C32056) * C47954 +
                     (C31756 + C31755 + C31754 + C31753) * C16183) *
                        C47688 * C47733) *
                       C697 +
                   (((C32056 + C32055 + C32054 + C32053) * C16183 +
                     (C710 * C31580 + C709 * C31578 +
                      (C113 * C975 + C47873 * C984) * C31581 +
                      (C113 * C985 + C47873 * C990) * C47987) *
                         C47954) *
                        C47688 * C47733 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C47688 * C47935) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C1880 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C1881 +
                     ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                       C12657 * C47987) *
                          C16183 +
                      (C31911 + C31912 + C31913 + C31914) * C47954) *
                         C47970) *
                        C47935 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C1881 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C1880 -
                     ((C33797 + C33798 + C33799 + C33800) * C47954 +
                      (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
                       C11780 * C31580) *
                          C16183) *
                         C47970) *
                        C47733) *
                       C47921 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C1881 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C1880 -
                     ((C31919 + C31920 + C31921 + C31922) * C47954 +
                      (C31914 + C31913 + C31912 + C31911) * C16183) *
                         C47970) *
                        C47935 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C1880 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C1881 +
                     ((C33800 + C33799 + C33798 + C33797) * C16183 +
                      (C2244 * C31580 + C2243 * C31578 +
                       (C113 * C2472 + C47873 * C2477) * C31581 +
                       (C113 * C2478 + C47873 * C2481) * C47987) *
                          C47954) *
                         C47970) *
                        C47733) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[161] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47936 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C1468 +
                   (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                      C11781 * C47987) *
                         C16183 +
                     (C32385 + C32386 + C32387 + C32388) * C47954) *
                        C47775 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47936) *
                       C1469 +
                   ((((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47936 -
                    ((C33095 + C33096 + C33097 + C33098) * C47954 +
                     (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                      C11782 * C31580) *
                         C16183) *
                        C47775) *
                       C1470 +
                   (((C12260 * C31580 + C12261 * C31578 +
                      (C113 * C6149 + C47873 * C6151) * C31581 +
                      (C113 * C6152 + C47873 * C6155) * C47987) *
                         C16183 +
                     (C11925 * C31580 + C11924 * C31578 +
                      (C113 * C6150 + C47873 * C6153) * C31581 +
                      (C113 * C6154 + C47873 * C6156) * C47987) *
                         C47954) *
                        C47775 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C47936) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47936 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C47935 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47936) *
                        C47733) *
                       C299 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47936) *
                        C47935 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47936 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47733) *
                       C300 +
                   ((((C31590 + C31589 + C31588 + C31587) * C16183 +
                      (C31591 + C31592 + C31593 + C31594) * C47954) *
                         C47936 -
                     ((C32187 + C32188 + C32189 + C32190) * C47954 +
                      (C31918 + C31917 + C31916 + C31915) * C16183) *
                         C47775) *
                        C47935 +
                    (((C32392 + C32391 + C32390 + C32389) * C16183 +
                      (C1009 * C31580 + C1008 * C31578 +
                       (C113 * C2230 + C47873 * C2231) * C31581 +
                       (C113 * C2232 + C47873 * C2233) * C47987) *
                          C47954) *
                         C47775 -
                     ((C32053 + C32054 + C32055 + C32056) * C47954 +
                      (C31756 + C31755 + C31754 + C31753) * C16183) *
                         C47936) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C2348 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C2349 +
                    ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                      C12657 * C47987) *
                         C16183 +
                     (C31911 + C31912 + C31913 + C31914) * C47954) *
                        C2350 -
                    ((C33931 + C33932 + C33933 + C33934) * C47954 +
                     (C12660 * C47987 + C12661 * C31581 + C12657 * C31578 +
                      C12656 * C31580) *
                         C16183) *
                        C47983) *
                       C47935 +
                   (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                      C11781 * C47987) *
                         C16183 +
                     (C32385 + C32386 + C32387 + C32388) * C47954) *
                        C2349 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C2348 -
                    ((C33797 + C33798 + C33799 + C33800) * C47954 +
                     (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
                      C11780 * C31580) *
                         C16183) *
                        C2350 +
                    ((C13135 * C31580 + C13134 * C31578 +
                      (C113 * C7017 + C47873 * C7019) * C31581 +
                      (C113 * C7020 + C47873 * C7023) * C47987) *
                         C16183 +
                     (C12863 * C31580 + C12862 * C31578 +
                      (C113 * C7018 + C47873 * C7021) * C31581 +
                      (C113 * C7022 + C47873 * C7024) * C47987) *
                         C47954) *
                        C47983) *
                       C47733) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47873 * C122) * C31580 +
                (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                C10911 * C47987) *
                   C16183 +
               (C31583 + C31584 + C31585 + C31586) * C47954) *
                  C47688 * C47670 * C108 -
              ((C31587 + C31588 + C31589 + C31590) * C47954 +
               (C31586 + C31585 + C31584 + C31583) * C16183) *
                  C47688 * C47670 * C109 +
              ((C31590 + C31589 + C31588 + C31587) * C16183 +
               (C31591 + C31592 + C31593 + C31594) * C47954) *
                  C47688 * C47670 * C110 -
              ((C31595 + C31596 + C31597 + C31598) * C47954 +
               (C31594 + C31593 + C31592 + C31591) * C16183) *
                  C47688 * C47670 * C111 +
              ((C31598 + C31597 + C31596 + C31595) * C16183 +
               (C173 * C31580 + C172 * C31578 +
                (C113 * C812 + C47873 * C813) * C31581 +
                (C113 * C814 + C47873 * C815) * C47987) *
                   C47954) *
                  C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C47873 * C122) * C31580 +
                 (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                 C10911 * C47987) *
                    C16183 +
                (C31583 + C31584 + C31585 + C31586) * C47954) *
                   C47688 * C48006 -
               ((C31745 + C31746 + C31747 + C31748) * C47954 +
                (C11389 * C47987 + C11388 * C31581 +
                 (C113 * C316 + C47873 * C334) * C31578 +
                 (C113 * C304 + C47873 * C317) * C31580) *
                    C16183) *
                   C47688 * C47994 +
               (((C113 * C305 + C47873 * C318) * C31580 +
                 (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                 C11783 * C47987) *
                    C16183 +
                (C31749 + C31750 + C31751 + C31752) * C47954) *
                   C47688 * C47967) *
                  C299 +
              (((C31748 + C31747 + C31746 + C31745) * C16183 +
                (C31753 + C31754 + C31755 + C31756) * C47954) *
                   C47688 * C47994 -
               ((C31587 + C31588 + C31589 + C31590) * C47954 +
                (C31586 + C31585 + C31584 + C31583) * C16183) *
                   C47688 * C48006 -
               ((C31757 + C31758 + C31759 + C31760) * C47954 +
                (C31752 + C31751 + C31750 + C31749) * C16183) *
                   C47688 * C47967) *
                  C300 +
              (((C31590 + C31589 + C31588 + C31587) * C16183 +
                (C31591 + C31592 + C31593 + C31594) * C47954) *
                   C47688 * C48006 -
               ((C1008 * C47987 + C1009 * C31581 + C376 * C31578 +
                 C375 * C31580) *
                    C47954 +
                (C31756 + C31755 + C31754 + C31753) * C16183) *
                   C47688 * C47994 +
               ((C31760 + C31759 + C31758 + C31757) * C16183 +
                (C378 * C31580 + C377 * C31578 +
                 (C113 * C1640 + C47873 * C1641) * C31581 +
                 (C113 * C1642 + C47873 * C1643) * C47987) *
                    C47954) *
                   C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C48007 -
           ((C31907 + C31908 + C31909 + C31910) * C47954 +
            (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
             C10910 * C31580) *
                C16183) *
               C47996 +
           ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
             C12657 * C47987) *
                C16183 +
            (C31911 + C31912 + C31913 + C31914) * C47954) *
               C47970) *
              C47670 * C299 +
          (((C31910 + C31909 + C31908 + C31907) * C16183 +
            (C31915 + C31916 + C31917 + C31918) * C47954) *
               C47996 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C48007 -
           ((C31919 + C31920 + C31921 + C31922) * C47954 +
            (C31914 + C31913 + C31912 + C31911) * C16183) *
               C47970) *
              C47670 * C300 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C48007 -
           ((C580 * C47987 + C581 * C31581 + C579 * C31578 + C578 * C31580) *
                C47954 +
            (C31918 + C31917 + C31916 + C31915) * C16183) *
               C47996 +
           ((C31922 + C31921 + C31920 + C31919) * C16183 +
            (C581 * C31580 + C580 * C31578 +
             (C113 * C2352 + C47873 * C2353) * C31581 +
             (C113 * C2354 + C47873 * C2355) * C47987) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C47688 * C1126 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C31748 + C31747 + C31746 + C31745) * C16183 +
            (C31753 + C31754 + C31755 + C31756) * C47954) *
               C47688 * C1127 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C47688 * C1126 -
           ((C31757 + C31758 + C31759 + C31760) * C47954 +
            (C31752 + C31751 + C31750 + C31749) * C16183) *
               C47688 * C47967) *
              C47990 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C47688 * C1126 -
           ((C32053 + C32054 + C32055 + C32056) * C47954 +
            (C31756 + C31755 + C31754 + C31753) * C16183) *
               C47688 * C1127 +
           ((C31760 + C31759 + C31758 + C31757) * C16183 +
            (C378 * C31580 + C377 * C31578 +
             (C113 * C1640 + C47873 * C1641) * C31581 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C47688 * C1194 -
          ((C31745 + C31746 + C31747 + C31748) * C47954 +
           (C11389 * C47987 + C11388 * C31581 +
            (C113 * C316 + C47873 * C334) * C31578 +
            (C113 * C304 + C47873 * C317) * C31580) *
               C16183) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C31580 +
            (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
            C11783 * C47987) *
               C16183 +
           (C31749 + C31750 + C31751 + C31752) * C47954) *
              C47688 * C1196 -
          ((C11924 * C47987 + C11925 * C31581 + C1489 * C31578 +
            C1490 * C31580) *
               C47954 +
           (C12261 * C47987 + C12260 * C31581 +
            (C113 * C1210 + C47873 * C1220) * C31578 +
            (C113 * C1202 + C47873 * C1211) * C31580) *
               C16183) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C31580 +
            (C113 * C1213 + C47873 * C1221) * C31578 +
            (C113 * C6635 + C47873 * C6637) * C31581 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C16183 +
           ((C113 * C1204 + C47873 * C1214) * C31580 +
            (C113 * C1215 + C47873 * C1222) * C31578 +
            (C113 * C6636 + C47873 * C6639) * C31581 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C48007 -
           ((C31907 + C31908 + C31909 + C31910) * C47954 +
            (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
             C10910 * C31580) *
                C16183) *
               C47996 +
           ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
             C12657 * C47987) *
                C16183 +
            (C31911 + C31912 + C31913 + C31914) * C47954) *
               C47970) *
              C1126 +
          (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
             C11781 * C47987) *
                C16183 +
            (C32385 + C32386 + C32387 + C32388) * C47954) *
               C47996 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C48007 -
           ((C12862 * C47987 + C12863 * C31581 + C2245 * C31578 +
             C2246 * C31580) *
                C47954 +
            (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
             C11780 * C31580) *
                C16183) *
               C47970) *
              C1127 +
          ((((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C48007 -
           ((C11784 * C47987 + C11785 * C31581 + C1655 * C31578 +
             C1656 * C31580) *
                C47954 +
            (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
             C11782 * C31580) *
                C16183) *
               C47996 +
           ((C11787 * C31580 + C11786 * C31578 +
             (C113 * C7503 + C47873 * C7505) * C31581 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C16183 +
            (C11785 * C31580 + C11784 * C31578 +
             (C113 * C7504 + C47873 * C7507) * C31581 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C113 * C115 + C47873 * C122) * C31580 +
                                 (C113 * C123 + C47873 * C136) * C31578 +
                                 C10910 * C31581 + C10911 * C47987) *
                                    C16183 +
                                (C31583 + C31584 + C31585 + C31586) * C47954) *
                                   C1880 -
                               ((C31907 + C31908 + C31909 + C31910) * C47954 +
                                (C10912 * C47987 + C10913 * C31581 +
                                 C10911 * C31578 + C10910 * C31580) *
                                    C16183) *
                                   C1881 +
                               ((C10913 * C31580 + C10912 * C31578 +
                                 C12656 * C31581 + C12657 * C47987) *
                                    C16183 +
                                (C31911 + C31912 + C31913 + C31914) * C47954) *
                                   C47970) *
                                  C47670 * C48003 +
                              (((C31910 + C31909 + C31908 + C31907) * C16183 +
                                (C31915 + C31916 + C31917 + C31918) * C47954) *
                                   C1881 -
                               ((C31587 + C31588 + C31589 + C31590) * C47954 +
                                (C31586 + C31585 + C31584 + C31583) * C16183) *
                                   C1880 -
                               ((C31919 + C31920 + C31921 + C31922) * C47954 +
                                (C31914 + C31913 + C31912 + C31911) * C16183) *
                                   C47970) *
                                  C47670 * C47990 +
                              (((C31590 + C31589 + C31588 + C31587) * C16183 +
                                (C31591 + C31592 + C31593 + C31594) * C47954) *
                                   C1880 -
                               ((C32187 + C32188 + C32189 + C32190) * C47954 +
                                (C31918 + C31917 + C31916 + C31915) * C16183) *
                                   C1881 +
                               ((C31922 + C31921 + C31920 + C31919) * C16183 +
                                (C581 * C31580 + C580 * C31578 +
                                 (C113 * C2352 + C47873 * C2353) * C31581 +
                                 (C113 * C2354 + C47873 * C2355) * C47987) *
                                    C47954) *
                                   C47970) *
                                  C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C1880 -
           ((C31907 + C31908 + C31909 + C31910) * C47954 +
            (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
             C10910 * C31580) *
                C16183) *
               C1881 +
           ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
             C12657 * C47987) *
                C16183 +
            (C31911 + C31912 + C31913 + C31914) * C47954) *
               C47970) *
              C48006 +
          (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
             C11781 * C47987) *
                C16183 +
            (C32385 + C32386 + C32387 + C32388) * C47954) *
               C1881 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C1880 -
           ((C12862 * C47987 + C12863 * C31581 + C2245 * C31578 +
             C2246 * C31580) *
                C47954 +
            (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
             C11780 * C31580) *
                C16183) *
               C47970) *
              C47994 +
          ((((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C1880 -
           ((C33095 + C33096 + C33097 + C33098) * C47954 +
            (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
             C11782 * C31580) *
                C16183) *
               C1881 +
           ((C11787 * C31580 + C11786 * C31578 +
             (C113 * C7503 + C47873 * C7505) * C31581 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C16183 +
            (C11785 * C31580 + C11784 * C31578 +
             (C113 * C7504 + C47873 * C7507) * C31581 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C2055 -
          ((C31907 + C31908 + C31909 + C31910) * C47954 +
           (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
            C10910 * C31580) *
               C16183) *
              C2056 +
          ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
            C12657 * C47987) *
               C16183 +
           (C31911 + C31912 + C31913 + C31914) * C47954) *
              C2057 -
          ((C12658 * C47987 + C12659 * C31581 + C2367 * C31578 +
            C2368 * C31580) *
               C47954 +
           (C12660 * C47987 + C12661 * C31581 + C12657 * C31578 +
            C12656 * C31580) *
               C16183) *
              C2058 +
          ((C12661 * C31580 + C12660 * C31578 +
            (C113 * C12635 + C47873 * C12637) * C31581 +
            (C113 * C12638 + C47873 * C12641) * C47987) *
               C16183 +
           (C12659 * C31580 + C12658 * C31578 +
            (C113 * C12636 + C47873 * C12639) * C31581 +
            (C113 * C12640 + C47873 * C12642) * C47987) *
               C47954) *
              C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[163] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47936 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C1126 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47936) *
                        C1127 +
                    ((((C113 * C305 + C47873 * C318) * C31580 +
                       (C113 * C319 + C47873 * C335) * C31578 +
                       C11782 * C31581 + C11783 * C47987) *
                          C16183 +
                      (C31749 + C31750 + C31751 + C31752) * C47954) *
                         C47936 -
                     ((C33095 + C33096 + C33097 + C33098) * C47954 +
                      (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                       C11782 * C31580) *
                          C16183) *
                         C47775) *
                        C47967) *
                       C47921 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47936) *
                        C1126 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47936 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C1127 +
                    (((C33098 + C33097 + C33096 + C33095) * C16183 +
                      (C1654 * C31580 + C1653 * C31578 +
                       (C113 * C1342 + C47873 * C1359) * C31581 +
                       (C113 * C1360 + C47873 * C1369) * C47987) *
                          C47954) *
                         C47775 -
                     ((C31757 + C31758 + C31759 + C31760) * C47954 +
                      (C31752 + C31751 + C31750 + C31749) * C16183) *
                         C47936) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47936 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C47670 * C695 +
                   (((C31910 + C31909 + C31908 + C31907) * C16183 +
                     (C31915 + C31916 + C31917 + C31918) * C47954) *
                        C47775 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47936) *
                       C47670 * C696 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47936 -
                    ((C32187 + C32188 + C32189 + C32190) * C47954 +
                     (C31918 + C31917 + C31916 + C31915) * C16183) *
                        C47775) *
                       C47670 * C697 +
                   (((C32190 + C32189 + C32188 + C32187) * C16183 +
                     (C823 * C31580 + C822 * C31578 +
                      (C113 * C514 + C47873 * C533) * C31581 +
                      (C113 * C534 + C47873 * C544) * C47987) *
                         C47954) *
                        C47775 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C47936) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C2348 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C2349 +
                    ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                      C12657 * C47987) *
                         C16183 +
                     (C31911 + C31912 + C31913 + C31914) * C47954) *
                        C2350 -
                    ((C33931 + C33932 + C33933 + C33934) * C47954 +
                     (C12660 * C47987 + C12661 * C31581 + C12657 * C31578 +
                      C12656 * C31580) *
                         C16183) *
                        C47983) *
                       C47670 * C47921 +
                   (((C31910 + C31909 + C31908 + C31907) * C16183 +
                     (C31915 + C31916 + C31917 + C31918) * C47954) *
                        C2349 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C2348 -
                    ((C31919 + C31920 + C31921 + C31922) * C47954 +
                     (C31914 + C31913 + C31912 + C31911) * C16183) *
                        C2350 +
                    ((C33934 + C33933 + C33932 + C33931) * C16183 +
                     (C2366 * C31580 + C2365 * C31578 +
                      (C113 * C2065 + C47873 * C2076) * C31581 +
                      (C113 * C2077 + C47873 * C2083) * C47987) *
                         C47954) *
                        C47983) *
                       C47670 * C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C47688 * C48006 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C47688 * C47967) *
              C299 +
          (((C31748 + C31747 + C31746 + C31745) * C16183 +
            (C31753 + C31754 + C31755 + C31756) * C47954) *
               C47688 * C47994 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C47688 * C48006 -
           ((C31757 + C31758 + C31759 + C31760) * C47954 +
            (C31752 + C31751 + C31750 + C31749) * C16183) *
               C47688 * C47967) *
              C300 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C47688 * C48006 -
           ((C1008 * C47987 + C1009 * C31581 + C376 * C31578 + C375 * C31580) *
                C47954 +
            (C31756 + C31755 + C31754 + C31753) * C16183) *
               C47688 * C47994 +
           ((C31760 + C31759 + C31758 + C31757) * C16183 +
            (C378 * C31580 + C377 * C31578 +
             (C113 * C1640 + C47873 * C1641) * C31581 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C47688 * C47670 * C108 -
          ((C31587 + C31588 + C31589 + C31590) * C47954 +
           (C31586 + C31585 + C31584 + C31583) * C16183) *
              C47688 * C47670 * C109 +
          ((C31590 + C31589 + C31588 + C31587) * C16183 +
           (C31591 + C31592 + C31593 + C31594) * C47954) *
              C47688 * C47670 * C110 -
          ((C31595 + C31596 + C31597 + C31598) * C47954 +
           (C31594 + C31593 + C31592 + C31591) * C16183) *
              C47688 * C47670 * C111 +
          ((C31598 + C31597 + C31596 + C31595) * C16183 +
           (C173 * C31580 + C172 * C31578 +
            (C113 * C812 + C47873 * C813) * C31581 +
            (C113 * C814 + C47873 * C815) * C47987) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C47688 * C1126 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C31748 + C31747 + C31746 + C31745) * C16183 +
            (C31753 + C31754 + C31755 + C31756) * C47954) *
               C47688 * C1127 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C47688 * C1126 -
           ((C31757 + C31758 + C31759 + C31760) * C47954 +
            (C31752 + C31751 + C31750 + C31749) * C16183) *
               C47688 * C47967) *
              C47990 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C47688 * C1126 -
           ((C32053 + C32054 + C32055 + C32056) * C47954 +
            (C31756 + C31755 + C31754 + C31753) * C16183) *
               C47688 * C1127 +
           ((C31760 + C31759 + C31758 + C31757) * C16183 +
            (C378 * C31580 + C377 * C31578 +
             (C113 * C1640 + C47873 * C1641) * C31581 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C47688 * C1194 -
          ((C31745 + C31746 + C31747 + C31748) * C47954 +
           (C11389 * C47987 + C11388 * C31581 +
            (C113 * C316 + C47873 * C334) * C31578 +
            (C113 * C304 + C47873 * C317) * C31580) *
               C16183) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C31580 +
            (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
            C11783 * C47987) *
               C16183 +
           (C31749 + C31750 + C31751 + C31752) * C47954) *
              C47688 * C1196 -
          ((C11924 * C47987 + C11925 * C31581 + C1489 * C31578 +
            C1490 * C31580) *
               C47954 +
           (C12261 * C47987 + C12260 * C31581 +
            (C113 * C1210 + C47873 * C1220) * C31578 +
            (C113 * C1202 + C47873 * C1211) * C31580) *
               C16183) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C31580 +
            (C113 * C1213 + C47873 * C1221) * C31578 +
            (C113 * C6635 + C47873 * C6637) * C31581 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C16183 +
           ((C113 * C1204 + C47873 * C1214) * C31580 +
            (C113 * C1215 + C47873 * C1222) * C31578 +
            (C113 * C6636 + C47873 * C6639) * C31581 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C1880 -
           ((C31907 + C31908 + C31909 + C31910) * C47954 +
            (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
             C10910 * C31580) *
                C16183) *
               C1881 +
           ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
             C12657 * C47987) *
                C16183 +
            (C31911 + C31912 + C31913 + C31914) * C47954) *
               C47970) *
              C47670 * C48003 +
          (((C31910 + C31909 + C31908 + C31907) * C16183 +
            (C31915 + C31916 + C31917 + C31918) * C47954) *
               C1881 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C1880 -
           ((C31919 + C31920 + C31921 + C31922) * C47954 +
            (C31914 + C31913 + C31912 + C31911) * C16183) *
               C47970) *
              C47670 * C47990 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C1880 -
           ((C32187 + C32188 + C32189 + C32190) * C47954 +
            (C31918 + C31917 + C31916 + C31915) * C16183) *
               C1881 +
           ((C31922 + C31921 + C31920 + C31919) * C16183 +
            (C581 * C31580 + C580 * C31578 +
             (C113 * C2352 + C47873 * C2353) * C31581 +
             (C113 * C2354 + C47873 * C2355) * C47987) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C1880 -
           ((C31907 + C31908 + C31909 + C31910) * C47954 +
            (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
             C10910 * C31580) *
                C16183) *
               C1881 +
           ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
             C12657 * C47987) *
                C16183 +
            (C31911 + C31912 + C31913 + C31914) * C47954) *
               C47970) *
              C48006 +
          (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
             C11781 * C47987) *
                C16183 +
            (C32385 + C32386 + C32387 + C32388) * C47954) *
               C1881 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C1880 -
           ((C12862 * C47987 + C12863 * C31581 + C2245 * C31578 +
             C2246 * C31580) *
                C47954 +
            (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
             C11780 * C31580) *
                C16183) *
               C47970) *
              C47994 +
          ((((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C1880 -
           ((C33095 + C33096 + C33097 + C33098) * C47954 +
            (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
             C11782 * C31580) *
                C16183) *
               C1881 +
           ((C11787 * C31580 + C11786 * C31578 +
             (C113 * C7503 + C47873 * C7505) * C31581 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C16183 +
            (C11785 * C31580 + C11784 * C31578 +
             (C113 * C7504 + C47873 * C7507) * C31581 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C3342 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C47935 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C3342) *
                        C47733) *
                       C47647 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C3342) *
                        C47935 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C3342 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47733) *
                       C47656 +
                   ((((C31590 + C31589 + C31588 + C31587) * C16183 +
                      (C31591 + C31592 + C31593 + C31594) * C47954) *
                         C3342 -
                     ((C32187 + C32188 + C32189 + C32190) * C47954 +
                      (C31918 + C31917 + C31916 + C31915) * C16183) *
                         C47775) *
                        C47935 +
                    (((C32392 + C32391 + C32390 + C32389) * C16183 +
                      (C1009 * C31580 + C1008 * C31578 +
                       (C113 * C2230 + C47873 * C2231) * C31581 +
                       (C113 * C2232 + C47873 * C2233) * C47987) *
                          C47954) *
                         C47775 -
                     ((C32053 + C32054 + C32055 + C32056) * C47954 +
                      (C31756 + C31755 + C31754 + C31753) * C16183) *
                         C3342) *
                        C47733) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47771 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47778 +
                     ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                       C12657 * C47987) *
                          C16183 +
                      (C31911 + C31912 + C31913 + C31914) * C47954) *
                         C3850) *
                        C47935 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47778 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47771 -
                     ((C33797 + C33798 + C33799 + C33800) * C47954 +
                      (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
                       C11780 * C31580) *
                          C16183) *
                         C3850) *
                        C47733) *
                       C2688 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47778 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47771 -
                     ((C31919 + C31920 + C31921 + C31922) * C47954 +
                      (C31914 + C31913 + C31912 + C31911) * C16183) *
                         C3850) *
                        C47935 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47771 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47778 +
                     ((C33800 + C33799 + C33798 + C33797) * C16183 +
                      (C2244 * C31580 + C2243 * C31578 +
                       (C113 * C2472 + C47873 * C2477) * C31581 +
                       (C113 * C2478 + C47873 * C2481) * C47987) *
                          C47954) *
                         C3850) *
                        C47733) *
                       C47653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C3342 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C48006 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C3342) *
                        C47994 +
                    ((((C113 * C305 + C47873 * C318) * C31580 +
                       (C113 * C319 + C47873 * C335) * C31578 +
                       C11782 * C31581 + C11783 * C47987) *
                          C16183 +
                      (C31749 + C31750 + C31751 + C31752) * C47954) *
                         C3342 -
                     ((C33095 + C33096 + C33097 + C33098) * C47954 +
                      (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                       C11782 * C31580) *
                          C16183) *
                         C47775) *
                        C47967) *
                       C2688 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C3342) *
                        C48006 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C3342 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47994 +
                    (((C33098 + C33097 + C33096 + C33095) * C16183 +
                      (C1654 * C31580 + C1653 * C31578 +
                       (C113 * C1342 + C47873 * C1359) * C31581 +
                       (C113 * C1360 + C47873 * C1369) * C47987) *
                          C47954) *
                         C47775 -
                     ((C31757 + C31758 + C31759 + C31760) * C47954 +
                      (C31752 + C31751 + C31750 + C31749) * C16183) *
                         C3342) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C3342 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C47670 * C48012 +
                   (((C31910 + C31909 + C31908 + C31907) * C16183 +
                     (C31915 + C31916 + C31917 + C31918) * C47954) *
                        C47775 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C3342) *
                       C47670 * C48005 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C3342 -
                    ((C32187 + C32188 + C32189 + C32190) * C47954 +
                     (C31918 + C31917 + C31916 + C31915) * C16183) *
                        C47775) *
                       C47670 * C47992 +
                   (((C32190 + C32189 + C32188 + C32187) * C16183 +
                     (C823 * C31580 + C822 * C31578 +
                      (C113 * C514 + C47873 * C533) * C31581 +
                      (C113 * C534 + C47873 * C544) * C47987) *
                         C47954) *
                        C47775 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C3342) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C48014 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C48011 +
                    ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                      C12657 * C47987) *
                         C16183 +
                     (C31911 + C31912 + C31913 + C31914) * C47954) *
                        C48002 -
                    ((C33931 + C33932 + C33933 + C33934) * C47954 +
                     (C12660 * C47987 + C12661 * C31581 + C12657 * C31578 +
                      C12656 * C31580) *
                         C16183) *
                        C47983) *
                       C47670 * C2688 +
                   (((C31910 + C31909 + C31908 + C31907) * C16183 +
                     (C31915 + C31916 + C31917 + C31918) * C47954) *
                        C48011 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C48014 -
                    ((C31919 + C31920 + C31921 + C31922) * C47954 +
                     (C31914 + C31913 + C31912 + C31911) * C16183) *
                        C48002 +
                    ((C33934 + C33933 + C33932 + C33931) * C16183 +
                     (C2366 * C31580 + C2365 * C31578 +
                      (C113 * C2065 + C47873 * C2076) * C31581 +
                      (C113 * C2077 + C47873 * C2083) * C47987) *
                         C47954) *
                        C47983) *
                       C47670 * C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47771 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47778 +
                    ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
                      C12657 * C47987) *
                         C16183 +
                     (C31911 + C31912 + C31913 + C31914) * C47954) *
                        C3850) *
                       C47670 * C47647 +
                   (((C31910 + C31909 + C31908 + C31907) * C16183 +
                     (C31915 + C31916 + C31917 + C31918) * C47954) *
                        C47778 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47771 -
                    ((C31919 + C31920 + C31921 + C31922) * C47954 +
                     (C31914 + C31913 + C31912 + C31911) * C16183) *
                        C3850) *
                       C47670 * C47656 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47771 -
                    ((C32187 + C32188 + C32189 + C32190) * C47954 +
                     (C31918 + C31917 + C31916 + C31915) * C16183) *
                        C47778 +
                    ((C31922 + C31921 + C31920 + C31919) * C16183 +
                     (C581 * C31580 + C580 * C31578 +
                      (C113 * C2352 + C47873 * C2353) * C31581 +
                      (C113 * C2354 + C47873 * C2355) * C47987) *
                         C47954) *
                        C3850) *
                       C47670 * C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C3342 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C47670 * C48012 +
                   (((C31910 + C31909 + C31908 + C31907) * C16183 +
                     (C31915 + C31916 + C31917 + C31918) * C47954) *
                        C47775 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C3342) *
                       C47670 * C48005 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C3342 -
                    ((C32187 + C32188 + C32189 + C32190) * C47954 +
                     (C31918 + C31917 + C31916 + C31915) * C16183) *
                        C47775) *
                       C47670 * C47992 +
                   (((C32190 + C32189 + C32188 + C32187) * C16183 +
                     (C823 * C31580 + C822 * C31578 +
                      (C113 * C514 + C47873 * C533) * C31581 +
                      (C113 * C534 + C47873 * C544) * C47987) *
                         C47954) *
                        C47775 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C3342) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C3342 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C48006 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C3342) *
                        C47994 +
                    ((((C113 * C305 + C47873 * C318) * C31580 +
                       (C113 * C319 + C47873 * C335) * C31578 +
                       C11782 * C31581 + C11783 * C47987) *
                          C16183 +
                      (C31749 + C31750 + C31751 + C31752) * C47954) *
                         C3342 -
                     ((C33095 + C33096 + C33097 + C33098) * C47954 +
                      (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                       C11782 * C31580) *
                          C16183) *
                         C47775) *
                        C47967) *
                       C2688 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C3342) *
                        C48006 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C3342 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47994 +
                    (((C33098 + C33097 + C33096 + C33095) * C16183 +
                      (C1654 * C31580 + C1653 * C31578 +
                       (C113 * C1342 + C47873 * C1359) * C31581 +
                       (C113 * C1360 + C47873 * C1369) * C47987) *
                          C47954) *
                         C47775 -
                     ((C31757 + C31758 + C31759 + C31760) * C47954 +
                      (C31752 + C31751 + C31750 + C31749) * C16183) *
                         C3342) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C47935 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C47733) *
                       C695 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C47733 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C47935) *
                       C696 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47688 * C47935 -
                    ((C32053 + C32054 + C32055 + C32056) * C47954 +
                     (C31756 + C31755 + C31754 + C31753) * C16183) *
                        C47688 * C47733) *
                       C697 +
                   (((C32056 + C32055 + C32054 + C32053) * C16183 +
                     (C710 * C31580 + C709 * C31578 +
                      (C113 * C975 + C47873 * C984) * C31581 +
                      (C113 * C985 + C47873 * C990) * C47987) *
                         C47954) *
                        C47688 * C47733 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C47688 * C47935) *
                       C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47688 * C1468 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47688 * C1469 +
                    (((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47688 * C1470 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C47688 * C47977) *
                       C47921 +
                   (((C31748 + C31747 + C31746 + C31745) * C16183 +
                     (C31753 + C31754 + C31755 + C31756) * C47954) *
                        C47688 * C1469 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47688 * C1468 -
                    ((C31757 + C31758 + C31759 + C31760) * C47954 +
                     (C31752 + C31751 + C31750 + C31749) * C16183) *
                        C47688 * C1470 +
                    ((C32900 + C32899 + C32898 + C32897) * C16183 +
                     (C1488 * C31580 + C1487 * C31578 +
                      (C113 * C1760 + C47873 * C1765) * C31581 +
                      (C113 * C1766 + C47873 * C1769) * C47987) *
                         C47954) *
                        C47688 * C47977) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[171] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47936 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C47935 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47936) *
                        C47733) *
                       C299 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47936) *
                        C47935 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47936 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C47733) *
                       C300 +
                   ((((C31590 + C31589 + C31588 + C31587) * C16183 +
                      (C31591 + C31592 + C31593 + C31594) * C47954) *
                         C47936 -
                     ((C32187 + C32188 + C32189 + C32190) * C47954 +
                      (C31918 + C31917 + C31916 + C31915) * C16183) *
                         C47775) *
                        C47935 +
                    (((C32392 + C32391 + C32390 + C32389) * C16183 +
                      (C1009 * C31580 + C1008 * C31578 +
                       (C113 * C2230 + C47873 * C2231) * C31581 +
                       (C113 * C2232 + C47873 * C2233) * C47987) *
                          C47954) *
                         C47775 -
                     ((C32053 + C32054 + C32055 + C32056) * C47954 +
                      (C31756 + C31755 + C31754 + C31753) * C16183) *
                         C47936) *
                        C47733) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47936 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C1468 +
                   (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                      C11781 * C47987) *
                         C16183 +
                     (C32385 + C32386 + C32387 + C32388) * C47954) *
                        C47775 -
                    ((C31745 + C31746 + C31747 + C31748) * C47954 +
                     (C11389 * C47987 + C11388 * C31581 +
                      (C113 * C316 + C47873 * C334) * C31578 +
                      (C113 * C304 + C47873 * C317) * C31580) *
                         C16183) *
                        C47936) *
                       C1469 +
                   ((((C113 * C305 + C47873 * C318) * C31580 +
                      (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
                      C11783 * C47987) *
                         C16183 +
                     (C31749 + C31750 + C31751 + C31752) * C47954) *
                        C47936 -
                    ((C33095 + C33096 + C33097 + C33098) * C47954 +
                     (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                      C11782 * C31580) *
                         C16183) *
                        C47775) *
                       C1470 +
                   (((C12260 * C31580 + C12261 * C31578 +
                      (C113 * C6149 + C47873 * C6151) * C31581 +
                      (C113 * C6152 + C47873 * C6155) * C47987) *
                         C16183 +
                     (C11925 * C31580 + C11924 * C31578 +
                      (C113 * C6150 + C47873 * C6153) * C31581 +
                      (C113 * C6154 + C47873 * C6156) * C47987) *
                         C47954) *
                        C47775 -
                    ((C32897 + C32898 + C32899 + C32900) * C47954 +
                     (C12261 * C47987 + C12260 * C31581 +
                      (C113 * C1210 + C47873 * C1220) * C31578 +
                      (C113 * C1202 + C47873 * C1211) * C31580) *
                         C16183) *
                        C47936) *
                       C47977) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C47688 * C48006 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C47688 * C47967) *
              C299 +
          (((C31748 + C31747 + C31746 + C31745) * C16183 +
            (C31753 + C31754 + C31755 + C31756) * C47954) *
               C47688 * C47994 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C47688 * C48006 -
           ((C31757 + C31758 + C31759 + C31760) * C47954 +
            (C31752 + C31751 + C31750 + C31749) * C16183) *
               C47688 * C47967) *
              C300 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C47688 * C48006 -
           ((C1008 * C47987 + C1009 * C31581 + C376 * C31578 + C375 * C31580) *
                C47954 +
            (C31756 + C31755 + C31754 + C31753) * C16183) *
               C47688 * C47994 +
           ((C31760 + C31759 + C31758 + C31757) * C16183 +
            (C378 * C31580 + C377 * C31578 +
             (C113 * C1640 + C47873 * C1641) * C31581 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C47688 * C47670 * C108 -
          ((C31587 + C31588 + C31589 + C31590) * C47954 +
           (C31586 + C31585 + C31584 + C31583) * C16183) *
              C47688 * C47670 * C109 +
          ((C31590 + C31589 + C31588 + C31587) * C16183 +
           (C31591 + C31592 + C31593 + C31594) * C47954) *
              C47688 * C47670 * C110 -
          ((C31595 + C31596 + C31597 + C31598) * C47954 +
           (C31594 + C31593 + C31592 + C31591) * C16183) *
              C47688 * C47670 * C111 +
          ((C31598 + C31597 + C31596 + C31595) * C16183 +
           (C173 * C31580 + C172 * C31578 +
            (C113 * C812 + C47873 * C813) * C31581 +
            (C113 * C814 + C47873 * C815) * C47987) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C48007 -
           ((C31907 + C31908 + C31909 + C31910) * C47954 +
            (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
             C10910 * C31580) *
                C16183) *
               C47996 +
           ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
             C12657 * C47987) *
                C16183 +
            (C31911 + C31912 + C31913 + C31914) * C47954) *
               C47970) *
              C47670 * C299 +
          (((C31910 + C31909 + C31908 + C31907) * C16183 +
            (C31915 + C31916 + C31917 + C31918) * C47954) *
               C47996 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C48007 -
           ((C31919 + C31920 + C31921 + C31922) * C47954 +
            (C31914 + C31913 + C31912 + C31911) * C16183) *
               C47970) *
              C47670 * C300 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C48007 -
           ((C580 * C47987 + C581 * C31581 + C579 * C31578 + C578 * C31580) *
                C47954 +
            (C31918 + C31917 + C31916 + C31915) * C16183) *
               C47996 +
           ((C31922 + C31921 + C31920 + C31919) * C16183 +
            (C581 * C31580 + C580 * C31578 +
             (C113 * C2352 + C47873 * C2353) * C31581 +
             (C113 * C2354 + C47873 * C2355) * C47987) *
                C47954) *
               C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C47688 * C1126 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C31748 + C31747 + C31746 + C31745) * C16183 +
            (C31753 + C31754 + C31755 + C31756) * C47954) *
               C47688 * C1127 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C47688 * C1126 -
           ((C31757 + C31758 + C31759 + C31760) * C47954 +
            (C31752 + C31751 + C31750 + C31749) * C16183) *
               C47688 * C47967) *
              C47990 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C47688 * C1126 -
           ((C32053 + C32054 + C32055 + C32056) * C47954 +
            (C31756 + C31755 + C31754 + C31753) * C16183) *
               C47688 * C1127 +
           ((C31760 + C31759 + C31758 + C31757) * C16183 +
            (C378 * C31580 + C377 * C31578 +
             (C113 * C1640 + C47873 * C1641) * C31581 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C47688 * C1194 -
          ((C31745 + C31746 + C31747 + C31748) * C47954 +
           (C11389 * C47987 + C11388 * C31581 +
            (C113 * C316 + C47873 * C334) * C31578 +
            (C113 * C304 + C47873 * C317) * C31580) *
               C16183) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C31580 +
            (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
            C11783 * C47987) *
               C16183 +
           (C31749 + C31750 + C31751 + C31752) * C47954) *
              C47688 * C1196 -
          ((C11924 * C47987 + C11925 * C31581 + C1489 * C31578 +
            C1490 * C31580) *
               C47954 +
           (C12261 * C47987 + C12260 * C31581 +
            (C113 * C1210 + C47873 * C1220) * C31578 +
            (C113 * C1202 + C47873 * C1211) * C31580) *
               C16183) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C31580 +
            (C113 * C1213 + C47873 * C1221) * C31578 +
            (C113 * C6635 + C47873 * C6637) * C31581 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C16183 +
           ((C113 * C1204 + C47873 * C1214) * C31580 +
            (C113 * C1215 + C47873 * C1222) * C31578 +
            (C113 * C6636 + C47873 * C6639) * C31581 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C48007 -
           ((C31907 + C31908 + C31909 + C31910) * C47954 +
            (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
             C10910 * C31580) *
                C16183) *
               C47996 +
           ((C10913 * C31580 + C10912 * C31578 + C12656 * C31581 +
             C12657 * C47987) *
                C16183 +
            (C31911 + C31912 + C31913 + C31914) * C47954) *
               C47970) *
              C1126 +
          (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
             C11781 * C47987) *
                C16183 +
            (C32385 + C32386 + C32387 + C32388) * C47954) *
               C47996 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C48007 -
           ((C12862 * C47987 + C12863 * C31581 + C2245 * C31578 +
             C2246 * C31580) *
                C47954 +
            (C13134 * C47987 + C13135 * C31581 + C11781 * C31578 +
             C11780 * C31580) *
                C16183) *
               C47970) *
              C1127 +
          ((((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C48007 -
           ((C11784 * C47987 + C11785 * C31581 + C1655 * C31578 +
             C1656 * C31580) *
                C47954 +
            (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
             C11782 * C31580) *
                C16183) *
               C47996 +
           ((C11787 * C31580 + C11786 * C31578 +
             (C113 * C7503 + C47873 * C7505) * C31581 +
             (C113 * C7506 + C47873 * C7509) * C47987) *
                C16183 +
            (C11785 * C31580 + C11784 * C31578 +
             (C113 * C7504 + C47873 * C7507) * C31581 +
             (C113 * C7508 + C47873 * C7510) * C47987) *
                C47954) *
               C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[173] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C47873 * C122) * C31580 +
                      (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
                      C10911 * C47987) *
                         C16183 +
                     (C31583 + C31584 + C31585 + C31586) * C47954) *
                        C47936 -
                    ((C31907 + C31908 + C31909 + C31910) * C47954 +
                     (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                      C10910 * C31580) *
                         C16183) *
                        C47775) *
                       C47670 * C695 +
                   (((C31910 + C31909 + C31908 + C31907) * C16183 +
                     (C31915 + C31916 + C31917 + C31918) * C47954) *
                        C47775 -
                    ((C31587 + C31588 + C31589 + C31590) * C47954 +
                     (C31586 + C31585 + C31584 + C31583) * C16183) *
                        C47936) *
                       C47670 * C696 +
                   (((C31590 + C31589 + C31588 + C31587) * C16183 +
                     (C31591 + C31592 + C31593 + C31594) * C47954) *
                        C47936 -
                    ((C32187 + C32188 + C32189 + C32190) * C47954 +
                     (C31918 + C31917 + C31916 + C31915) * C16183) *
                        C47775) *
                       C47670 * C697 +
                   (((C32190 + C32189 + C32188 + C32187) * C16183 +
                     (C823 * C31580 + C822 * C31578 +
                      (C113 * C514 + C47873 * C533) * C31581 +
                      (C113 * C534 + C47873 * C544) * C47987) *
                         C47954) *
                        C47775 -
                    ((C31595 + C31596 + C31597 + C31598) * C47954 +
                     (C31594 + C31593 + C31592 + C31591) * C16183) *
                        C47936) *
                       C47670 * C47971)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C47873 * C122) * C31580 +
                       (C113 * C123 + C47873 * C136) * C31578 +
                       C10910 * C31581 + C10911 * C47987) *
                          C16183 +
                      (C31583 + C31584 + C31585 + C31586) * C47954) *
                         C47936 -
                     ((C31907 + C31908 + C31909 + C31910) * C47954 +
                      (C10912 * C47987 + C10913 * C31581 + C10911 * C31578 +
                       C10910 * C31580) *
                          C16183) *
                         C47775) *
                        C1126 +
                    (((C11388 * C31580 + C11389 * C31578 + C11780 * C31581 +
                       C11781 * C47987) *
                          C16183 +
                      (C32385 + C32386 + C32387 + C32388) * C47954) *
                         C47775 -
                     ((C31745 + C31746 + C31747 + C31748) * C47954 +
                      (C11389 * C47987 + C11388 * C31581 +
                       (C113 * C316 + C47873 * C334) * C31578 +
                       (C113 * C304 + C47873 * C317) * C31580) *
                          C16183) *
                         C47936) *
                        C1127 +
                    ((((C113 * C305 + C47873 * C318) * C31580 +
                       (C113 * C319 + C47873 * C335) * C31578 +
                       C11782 * C31581 + C11783 * C47987) *
                          C16183 +
                      (C31749 + C31750 + C31751 + C31752) * C47954) *
                         C47936 -
                     ((C33095 + C33096 + C33097 + C33098) * C47954 +
                      (C11786 * C47987 + C11787 * C31581 + C11783 * C31578 +
                       C11782 * C31580) *
                          C16183) *
                         C47775) *
                        C47967) *
                       C47921 +
                   ((((C31910 + C31909 + C31908 + C31907) * C16183 +
                      (C31915 + C31916 + C31917 + C31918) * C47954) *
                         C47775 -
                     ((C31587 + C31588 + C31589 + C31590) * C47954 +
                      (C31586 + C31585 + C31584 + C31583) * C16183) *
                         C47936) *
                        C1126 +
                    (((C31748 + C31747 + C31746 + C31745) * C16183 +
                      (C31753 + C31754 + C31755 + C31756) * C47954) *
                         C47936 -
                     ((C32389 + C32390 + C32391 + C32392) * C47954 +
                      (C32388 + C32387 + C32386 + C32385) * C16183) *
                         C47775) *
                        C1127 +
                    (((C33098 + C33097 + C33096 + C33095) * C16183 +
                      (C1654 * C31580 + C1653 * C31578 +
                       (C113 * C1342 + C47873 * C1359) * C31581 +
                       (C113 * C1360 + C47873 * C1369) * C47987) *
                          C47954) *
                         C47775 -
                     ((C31757 + C31758 + C31759 + C31760) * C47954 +
                      (C31752 + C31751 + C31750 + C31749) * C16183) *
                         C47936) *
                        C47967) *
                       C47653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C47688 * C47670 * C108 -
          ((C31587 + C31588 + C31589 + C31590) * C47954 +
           (C31586 + C31585 + C31584 + C31583) * C16183) *
              C47688 * C47670 * C109 +
          ((C31590 + C31589 + C31588 + C31587) * C16183 +
           (C31591 + C31592 + C31593 + C31594) * C47954) *
              C47688 * C47670 * C110 -
          ((C31595 + C31596 + C31597 + C31598) * C47954 +
           (C31594 + C31593 + C31592 + C31591) * C16183) *
              C47688 * C47670 * C111 +
          ((C31598 + C31597 + C31596 + C31595) * C16183 +
           (C173 * C31580 + C172 * C31578 +
            (C113 * C812 + C47873 * C813) * C31581 +
            (C113 * C814 + C47873 * C815) * C47987) *
               C47954) *
              C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C47688 * C48006 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C47688 * C47994 +
           (((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C47688 * C47967) *
              C299 +
          (((C31748 + C31747 + C31746 + C31745) * C16183 +
            (C31753 + C31754 + C31755 + C31756) * C47954) *
               C47688 * C47994 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C47688 * C48006 -
           ((C31757 + C31758 + C31759 + C31760) * C47954 +
            (C31752 + C31751 + C31750 + C31749) * C16183) *
               C47688 * C47967) *
              C300 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C47688 * C48006 -
           ((C1008 * C47987 + C1009 * C31581 + C376 * C31578 + C375 * C31580) *
                C47954 +
            (C31756 + C31755 + C31754 + C31753) * C16183) *
               C47688 * C47994 +
           ((C31760 + C31759 + C31758 + C31757) * C16183 +
            (C378 * C31580 + C377 * C31578 +
             (C113 * C1640 + C47873 * C1641) * C31581 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C31580 +
             (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
             C10911 * C47987) *
                C16183 +
            (C31583 + C31584 + C31585 + C31586) * C47954) *
               C47688 * C1126 -
           ((C31745 + C31746 + C31747 + C31748) * C47954 +
            (C11389 * C47987 + C11388 * C31581 +
             (C113 * C316 + C47873 * C334) * C31578 +
             (C113 * C304 + C47873 * C317) * C31580) *
                C16183) *
               C47688 * C1127 +
           (((C113 * C305 + C47873 * C318) * C31580 +
             (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
             C11783 * C47987) *
                C16183 +
            (C31749 + C31750 + C31751 + C31752) * C47954) *
               C47688 * C47967) *
              C48003 +
          (((C31748 + C31747 + C31746 + C31745) * C16183 +
            (C31753 + C31754 + C31755 + C31756) * C47954) *
               C47688 * C1127 -
           ((C31587 + C31588 + C31589 + C31590) * C47954 +
            (C31586 + C31585 + C31584 + C31583) * C16183) *
               C47688 * C1126 -
           ((C31757 + C31758 + C31759 + C31760) * C47954 +
            (C31752 + C31751 + C31750 + C31749) * C16183) *
               C47688 * C47967) *
              C47990 +
          (((C31590 + C31589 + C31588 + C31587) * C16183 +
            (C31591 + C31592 + C31593 + C31594) * C47954) *
               C47688 * C1126 -
           ((C32053 + C32054 + C32055 + C32056) * C47954 +
            (C31756 + C31755 + C31754 + C31753) * C16183) *
               C47688 * C1127 +
           ((C31760 + C31759 + C31758 + C31757) * C16183 +
            (C378 * C31580 + C377 * C31578 +
             (C113 * C1640 + C47873 * C1641) * C31581 +
             (C113 * C1642 + C47873 * C1643) * C47987) *
                C47954) *
               C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C31580 +
            (C113 * C123 + C47873 * C136) * C31578 + C10910 * C31581 +
            C10911 * C47987) *
               C16183 +
           (C31583 + C31584 + C31585 + C31586) * C47954) *
              C47688 * C1194 -
          ((C31745 + C31746 + C31747 + C31748) * C47954 +
           (C11389 * C47987 + C11388 * C31581 +
            (C113 * C316 + C47873 * C334) * C31578 +
            (C113 * C304 + C47873 * C317) * C31580) *
               C16183) *
              C47688 * C1195 +
          (((C113 * C305 + C47873 * C318) * C31580 +
            (C113 * C319 + C47873 * C335) * C31578 + C11782 * C31581 +
            C11783 * C47987) *
               C16183 +
           (C31749 + C31750 + C31751 + C31752) * C47954) *
              C47688 * C1196 -
          ((C11924 * C47987 + C11925 * C31581 + C1489 * C31578 +
            C1490 * C31580) *
               C47954 +
           (C12261 * C47987 + C12260 * C31581 +
            (C113 * C1210 + C47873 * C1220) * C31578 +
            (C113 * C1202 + C47873 * C1211) * C31580) *
               C16183) *
              C47688 * C1197 +
          (((C113 * C1203 + C47873 * C1212) * C31580 +
            (C113 * C1213 + C47873 * C1221) * C31578 +
            (C113 * C6635 + C47873 * C6637) * C31581 +
            (C113 * C6638 + C47873 * C6641) * C47987) *
               C16183 +
           ((C113 * C1204 + C47873 * C1214) * C31580 +
            (C113 * C1215 + C47873 * C1222) * C31578 +
            (C113 * C6636 + C47873 * C6639) * C31581 +
            (C113 * C6640 + C47873 * C6642) * C47987) *
               C47954) *
              C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C47729 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47736 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47688 * C2948) *
              C47647 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47736 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C47729 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C2948) *
              C47656 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C47729 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47736 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C2948) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47936 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C47729 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47936) *
               C47736 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C31580 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C31578 +
             (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
                C47619 * C47936 -
            ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
             (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
                C47619 * C47775) *
               C2948) *
              C2688 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47936) *
               C47729 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47936 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47736 +
           (((C6505 + C6504) * C31580 + (C6503 + C6502) * C31578 +
             (C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C31581 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
             (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
                C47619 * C47936) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C48013 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C48009 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47688 * C47999 -
           ((C38768 + C38767) * C47987 + (C38766 + C38765) * C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C47688 * C47977) *
              C2688 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C48009 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C48013 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47999 +
           ((C6299 + C6298) * C31580 + (C6297 + C6296) * C31578 +
            (C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                C31581 +
            (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C2580 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47733) *
              C48012 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47733 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C2580) *
              C48005 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C2580 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47733) *
              C47992 +
          (((C5407 + C5406) * C31580 + (C5405 + C5404) * C31578 +
            (C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                C31581 +
            (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C48007 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47996 +
            ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
             (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
                C47619 * C47970) *
               C2580 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47996 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C48007 -
            ((C39629 + C39630) * C47987 + (C39631 + C39632) * C31581 +
             (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
                C47619 * C47970) *
               C47733) *
              C2688 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47996 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C48007 -
            ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
             (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
                C47619 * C47970) *
               C2580 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C48007 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47996 +
            ((C7231 + C7230) * C31580 + (C7229 + C7228) * C31578 +
             (C4827 * C2471 + C4823 * C2475 + C4828 * C7504 + C47985 * C7507) *
                 C31581 +
             (C4827 * C2476 + C4823 * C2480 + C4828 * C7508 + C47985 * C7510) *
                 C47987) *
                C47619 * C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47936 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C2580 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47936) *
               C47733) *
              C47647 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47936) *
               C2580 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47936 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47733) *
              C47656 +
          ((((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
             (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                C47619 * C47936 -
            ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
             (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
                C47619 * C47775) *
               C2580 +
           (((C5767 + C5766) * C31580 + (C5765 + C5764) * C31578 +
             (C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                 C31581 +
             (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
             (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
                C47619 * C47936) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C2580 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47733) *
              C48012 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47733 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C2580) *
              C48005 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C2580 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47733) *
              C47992 +
          (((C5407 + C5406) * C31580 + (C5405 + C5404) * C31578 +
            (C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                C31581 +
            (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C48013 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C48009 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47688 * C47999 -
           ((C38768 + C38767) * C47987 + (C38766 + C38765) * C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C47688 * C47977) *
              C2688 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C48009 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C48013 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47999 +
           ((C6299 + C6298) * C31580 + (C6297 + C6296) * C31578 +
            (C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                C31581 +
            (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C3342 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C47729 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C3342) *
               C47736 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C31580 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C31578 +
             (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
                C47619 * C3342 -
            ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
             (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
                C47619 * C47775) *
               C2948) *
              C47921 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C3342) *
               C47729 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C3342 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47736 +
           (((C6505 + C6504) * C31580 + (C6503 + C6502) * C31578 +
             (C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C31581 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
             (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
                C47619 * C3342) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47771 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47778 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
               C47619 * C3850) *
              C47729 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C47778 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47771 -
           ((C39629 + C39630) * C47987 + (C39631 + C39632) * C31581 +
            (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
               C47619 * C3850) *
              C47736 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47771 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C47778 +
           ((C38302 + C38301) * C31580 + (C38300 + C38299) * C31578 +
            (C4827 * C7503 + C4823 * C7505 + C4828 * C23688 + C47985 * C23689) *
                C31581 +
            (C4827 * C7506 + C4823 * C7509 + C4828 * C23690 + C47985 * C23691) *
                C47987) *
               C47619 * C3850) *
              C2948) *
         C47642) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C3342 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C48013 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C47775 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C3342) *
              C48009 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C3342 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C47775) *
              C47999 +
          (((C38765 + C38766) * C31580 + (C38767 + C38768) * C31578 +
            (C4827 * C6149 + C4823 * C6151 + C4828 * C22710 + C47985 * C22711) *
                C31581 +
            (C4827 * C6152 + C4823 * C6155 + C4828 * C22712 + C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C38768 + C38767) * C47987 + (C38766 + C38765) * C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C3342 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C2580 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C3342) *
               C47733) *
              C48003 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C3342) *
               C2580 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C3342 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47733) *
              C47990 +
          ((((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
             (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                C47619 * C3342 -
            ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
             (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
                C47619 * C47775) *
               C2580 +
           (((C5767 + C5766) * C31580 + (C5765 + C5764) * C31578 +
             (C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                 C31581 +
             (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
             (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
                C47619 * C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C48014 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C48011 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
               C47619 * C48002 -
           ((C39163 + C39164) * C47987 + (C39165 + C39166) * C31581 +
            (C39162 + C39161) * C31578 + (C39160 + C39159) * C31580) *
               C47619 * C47983) *
              C2580 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C48011 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C48014 -
           ((C39629 + C39630) * C47987 + (C39631 + C39632) * C31581 +
            (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
               C47619 * C48002 +
           ((C39632 + C39631) * C31580 + (C39630 + C39629) * C31578 +
            (C4827 * C7017 + C4823 * C7019 + C4828 * C23342 + C47985 * C23343) *
                C31581 +
            (C4827 * C7020 + C4823 * C7023 + C4828 * C23344 + C47985 * C23345) *
                C47987) *
               C47619 * C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47771 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47778 +
            ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
             (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
                C47619 * C3850) *
               C2580 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47778 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47771 -
            ((C39629 + C39630) * C47987 + (C39631 + C39632) * C31581 +
             (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
                C47619 * C3850) *
               C47733) *
              C47921 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47778 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47771 -
            ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
             (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
                C47619 * C3850) *
               C2580 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47771 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47778 +
            ((C7231 + C7230) * C31580 + (C7229 + C7228) * C31578 +
             (C4827 * C2471 + C4823 * C2475 + C4828 * C7504 + C47985 * C7507) *
                 C31581 +
             (C4827 * C2476 + C4823 * C2480 + C4828 * C7508 + C47985 * C7510) *
                 C47987) *
                C47619 * C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C3342 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C2580 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C3342) *
               C47733) *
              C48003 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C3342) *
               C2580 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C3342 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47733) *
              C47990 +
          ((((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
             (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                C47619 * C3342 -
            ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
             (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
                C47619 * C47775) *
               C2580 +
           (((C5767 + C5766) * C31580 + (C5765 + C5764) * C31578 +
             (C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                 C31581 +
             (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
             (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
                C47619 * C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C3342 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C48013 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C47775 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C3342) *
              C48009 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C3342 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C47775) *
              C47999 +
          (((C38765 + C38766) * C31580 + (C38767 + C38768) * C31578 +
            (C4827 * C6149 + C4823 * C6151 + C4828 * C22710 + C47985 * C22711) *
                C31581 +
            (C4827 * C6152 + C4823 * C6155 + C4828 * C22712 + C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C38768 + C38767) * C47987 + (C38766 + C38765) * C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C1468 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C1469 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47688 * C1470 -
           ((C4828 * C6638 + C47985 * C6641 + C4827 * C1762 + C4823 * C1767) *
                C47987 +
            (C4828 * C6635 + C47985 * C6637 + C4827 * C1758 + C4823 * C1761) *
                C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C47688 * C47977) *
              C47921 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C1469 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C1468 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C1470 +
           ((C6299 + C6298) * C31580 + (C6297 + C6296) * C31578 +
            (C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                C31581 +
            (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C47935 -
           ((C4828 * C1353 + C47985 * C1366 + C4827 * C977 + C4823 * C986) *
                C47987 +
            (C4828 * C1339 + C47985 * C1354 + C4827 * C971 + C4823 * C976) *
                C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47733) *
              C695 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47733 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C47935) *
              C696 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C47935 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47733) *
              C697 +
          (((C5407 + C5406) * C31580 + (C5405 + C5404) * C31578 +
            (C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                C31581 +
            (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C1880 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C1881 +
            ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
             (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
                C47619 * C47970) *
               C47935 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C1881 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C1880 -
            ((C4828 * C7506 + C47985 * C7509 + C4827 * C2474 + C4823 * C2479) *
                 C47987 +
             (C4828 * C7503 + C47985 * C7505 + C4827 * C2470 + C4823 * C2473) *
                 C31581 +
             (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
                C47619 * C47970) *
               C47733) *
              C47921 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C1881 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C1880 -
            ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
             (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
                C47619 * C47970) *
               C47935 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C1880 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C1881 +
            ((C7231 + C7230) * C31580 + (C7229 + C7228) * C31578 +
             (C4827 * C2471 + C4823 * C2475 + C4828 * C7504 + C47985 * C7507) *
                 C31581 +
             (C4827 * C2476 + C4823 * C2480 + C4828 * C7508 + C47985 * C7510) *
                 C47987) *
                C47619 * C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47936 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C1468 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C47775 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47936) *
              C1469 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47936 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C47775) *
              C1470 +
          (((C38765 + C38766) * C31580 + (C38767 + C38768) * C31578 +
            (C4827 * C6149 + C4823 * C6151 + C4828 * C22710 + C47985 * C22711) *
                C31581 +
            (C4827 * C6152 + C4823 * C6155 + C4828 * C22712 + C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C38768 + C38767) * C47987 + (C38766 + C38765) * C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47936 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C47935 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C4827 * C1336 + C4823 * C1348 + C4828 * C1340 + C47985 * C1355) *
                 C31581 +
             (C4827 * C1347 + C4823 * C1363 + C4828 * C1356 + C47985 * C1367) *
                 C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47936) *
               C47733) *
              C299 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47936) *
               C47935 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47936 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47733) *
              C300 +
          ((((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
             (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                C47619 * C47936 -
            ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
             (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
                C47619 * C47775) *
               C47935 +
           (((C5767 + C5766) * C31580 + (C5765 + C5764) * C31578 +
             (C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                 C31581 +
             (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
             (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
                C47619 * C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C2348 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C2349 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
               C47619 * C2350 -
           ((C39163 + C39164) * C47987 + (C39165 + C39166) * C31581 +
            (C39162 + C39161) * C31578 + (C39160 + C39159) * C31580) *
               C47619 * C47983) *
              C47935 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C2349 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C2348 -
           ((C39629 + C39630) * C47987 + (C39631 + C39632) * C31581 +
            (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
               C47619 * C2350 +
           ((C39632 + C39631) * C31580 + (C39630 + C39629) * C31578 +
            (C4827 * C7017 + C4823 * C7019 + C4828 * C23342 + C47985 * C23343) *
                C31581 +
            (C4827 * C7020 + C4823 * C7023 + C4828 * C23344 + C47985 * C23345) *
                C47987) *
               C47619 * C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                   C31580 +
               (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                   C31578 +
               (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
                   C31581 +
               (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
                   C47987) *
                  C47619 * C47688 * C47670 * C108 -
              ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
               (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                  C47619 * C47688 * C47670 * C109 +
              ((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
               (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                  C47619 * C47688 * C47670 * C110 -
              ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
               (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
                  C47619 * C47688 * C47670 * C111 +
              ((C4877 + C4876) * C31580 + (C4875 + C4874) * C31578 +
               (C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
                   C31581 +
               (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
                   C47987) *
                  C47619 * C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                    C31580 +
                (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                    C31578 +
                (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
                    C31581 +
                (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
                    C47987) *
                   C47619 * C47688 * C48006 -
               ((C4828 * C1353 + C47985 * C1366 + C4827 * C977 + C4823 * C986) *
                    C47987 +
                (C4828 * C1339 + C47985 * C1354 + C4827 * C971 + C4823 * C976) *
                    C31581 +
                (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                    C31578 +
                (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                    C31580) *
                   C47619 * C47688 * C47994 +
               ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                    C31580 +
                (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                    C31578 +
                (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 +
                 C47985 * C1761) *
                    C31581 +
                (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 +
                 C47985 * C1767) *
                    C47987) *
                   C47619 * C47688 * C47967) *
                  C299 +
              (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
                (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                   C47619 * C47688 * C47994 -
               ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
                (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                   C47619 * C47688 * C48006 -
               ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
                (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
                   C47619 * C47688 * C47967) *
                  C300 +
              (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
                (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                   C47619 * C47688 * C48006 -
               ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
                (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
                   C47619 * C47688 * C47994 +
               ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
                (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 +
                 C47985 * C1765) *
                    C31581 +
                (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 +
                 C47985 * C1769) *
                    C47987) *
                   C47619 * C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C48007 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47996 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C299 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C47996 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C48007 -
           ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
            (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
               C47619 * C47970) *
              C47670 * C300 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C48007 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C47996 +
           ((C5265 + C5264) * C31580 + (C5263 + C5262) * C31578 +
            (C4827 * C2060 + C4823 * C2067 + C4828 * C2472 + C47985 * C2477) *
                C31581 +
            (C4827 * C2066 + C4823 * C2078 + C4828 * C2478 + C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C1126 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C1127 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
                C31581 +
            (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C1127 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C1126 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C1126 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C1127 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
              C47619 * C47688 * C1194 -
          ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
           (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
               C31578 +
           (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
               C31580) *
              C47619 * C47688 * C1195 +
          ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
               C31580 +
           (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
               C31578 +
           (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
               C31581 +
           (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C4828 * C6638 + C47985 * C6641 + C4827 * C1762 + C4823 * C1767) *
               C47987 +
           (C4828 * C6635 + C47985 * C6637 + C4827 * C1758 + C4823 * C1761) *
               C31581 +
           (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
               C31578 +
           (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
               C31580) *
              C47619 * C47688 * C1197 +
          ((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
               C31580 +
           (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
               C31578 +
           (C4827 * C6635 + C4823 * C6637 + C4828 * C23056 + C47985 * C23057) *
               C31581 +
           (C4827 * C6638 + C4823 * C6641 + C4828 * C23058 + C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C48007 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47996 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C1126 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C47996 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C48007 -
           ((C4828 * C7506 + C47985 * C7509 + C4827 * C2474 + C4823 * C2479) *
                C47987 +
            (C4828 * C7503 + C47985 * C7505 + C4827 * C2470 + C4823 * C2473) *
                C31581 +
            (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
               C47619 * C47970) *
              C1127 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C48007 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C47996 +
           ((C38302 + C38301) * C31580 + (C38300 + C38299) * C31578 +
            (C4827 * C7503 + C4823 * C7505 + C4828 * C23688 + C47985 * C23689) *
                C31581 +
            (C4827 * C7506 + C4823 * C7509 + C4828 * C23690 + C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C1880 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C1881 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C48003 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C1881 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C1880 -
           ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
            (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
               C47619 * C47970) *
              C47670 * C47990 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C1880 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C1881 +
           ((C5265 + C5264) * C31580 + (C5263 + C5262) * C31578 +
            (C4827 * C2060 + C4823 * C2067 + C4828 * C2472 + C47985 * C2477) *
                C31581 +
            (C4827 * C2066 + C4823 * C2078 + C4828 * C2478 + C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C1880 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C1881 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C48006 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C1881 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C1880 -
           ((C4828 * C7506 + C47985 * C7509 + C4827 * C2474 + C4823 * C2479) *
                C47987 +
            (C4828 * C7503 + C47985 * C7505 + C4827 * C2470 + C4823 * C2473) *
                C31581 +
            (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
               C47619 * C47970) *
              C47994 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C1880 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C1881 +
           ((C38302 + C38301) * C31580 + (C38300 + C38299) * C31578 +
            (C4827 * C7503 + C4823 * C7505 + C4828 * C23688 + C47985 * C23689) *
                C31581 +
            (C4827 * C7506 + C4823 * C7509 + C4828 * C23690 + C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
              C47619 * C2055 -
          ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
           (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
              C47619 * C2056 +
          ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
           (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
              C47619 * C2057 -
          ((C39163 + C39164) * C47987 + (C39165 + C39166) * C31581 +
           (C39162 + C39161) * C31578 + (C39160 + C39159) * C31580) *
              C47619 * C2058 +
          ((C39166 + C39165) * C31580 + (C39164 + C39163) * C31578 +
           (C4827 * C12635 + C4823 * C12637 + C4828 * C28038 +
            C47985 * C28039) *
               C31581 +
           (C4827 * C12638 + C4823 * C12641 + C4828 * C28040 +
            C47985 * C28041) *
               C47987) *
              C47619 * C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47936 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C1126 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47936) *
               C1127 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C31580 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C31578 +
             (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
                C47619 * C47936 -
            ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
             (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
                C47619 * C47775) *
               C47967) *
              C47921 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47936) *
               C1126 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47936 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C1127 +
           (((C6505 + C6504) * C31580 + (C6503 + C6502) * C31578 +
             (C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C31581 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
             (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
                C47619 * C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47936 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C47670 * C695 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C47775 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47936) *
              C47670 * C696 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47936 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C47775) *
              C47670 * C697 +
          (((C5549 + C5548) * C31580 + (C5547 + C5546) * C31578 +
            (C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                C31581 +
            (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C2348 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C2349 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
               C47619 * C2350 -
           ((C39163 + C39164) * C47987 + (C39165 + C39166) * C31581 +
            (C39162 + C39161) * C31578 + (C39160 + C39159) * C31580) *
               C47619 * C47983) *
              C47670 * C47921 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C2349 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C2348 -
           ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
            (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
               C47619 * C2350 +
           ((C7373 + C7372) * C31580 + (C7371 + C7370) * C31578 +
            (C4827 * C2064 + C4823 * C2074 + C4828 * C7018 + C47985 * C7021) *
                C31581 +
            (C4827 * C2075 + C4823 * C2082 + C4828 * C7022 + C47985 * C7024) *
                C47987) *
               C47619 * C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
                C31581 +
            (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
                C47987) *
               C47619 * C47688 * C48006 -
           ((C4828 * C1353 + C47985 * C1366 + C4827 * C977 + C4823 * C986) *
                C47987 +
            (C4828 * C1339 + C47985 * C1354 + C4827 * C971 + C4823 * C976) *
                C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47994 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
                C31581 +
            (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C299 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47994 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C48006 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47967) *
              C300 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C48006 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47994 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
               C31581 +
           (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
               C47987) *
              C47619 * C47688 * C47670 * C108 -
          ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
           (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
              C47619 * C47688 * C47670 * C109 +
          ((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
           (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
              C47619 * C47688 * C47670 * C110 -
          ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
           (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
              C47619 * C47688 * C47670 * C111 +
          ((C4877 + C4876) * C31580 + (C4875 + C4874) * C31578 +
           (C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
               C31581 +
           (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
               C47987) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C1126 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C1127 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
                C31581 +
            (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C1127 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C1126 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C1126 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C1127 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
              C47619 * C47688 * C1194 -
          ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
           (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
               C31578 +
           (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
               C31580) *
              C47619 * C47688 * C1195 +
          ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
               C31580 +
           (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
               C31578 +
           (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
               C31581 +
           (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C4828 * C6638 + C47985 * C6641 + C4827 * C1762 + C4823 * C1767) *
               C47987 +
           (C4828 * C6635 + C47985 * C6637 + C4827 * C1758 + C4823 * C1761) *
               C31581 +
           (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
               C31578 +
           (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
               C31580) *
              C47619 * C47688 * C1197 +
          ((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
               C31580 +
           (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
               C31578 +
           (C4827 * C6635 + C4823 * C6637 + C4828 * C23056 + C47985 * C23057) *
               C31581 +
           (C4827 * C6638 + C4823 * C6641 + C4828 * C23058 + C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C1880 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C1881 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C48003 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C1881 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C1880 -
           ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
            (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
               C47619 * C47970) *
              C47670 * C47990 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C1880 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C1881 +
           ((C5265 + C5264) * C31580 + (C5263 + C5262) * C31578 +
            (C4827 * C2060 + C4823 * C2067 + C4828 * C2472 + C47985 * C2477) *
                C31581 +
            (C4827 * C2066 + C4823 * C2078 + C4828 * C2478 + C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C1880 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C1881 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C48006 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C1881 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C1880 -
           ((C4828 * C7506 + C47985 * C7509 + C4827 * C2474 + C4823 * C2479) *
                C47987 +
            (C4828 * C7503 + C47985 * C7505 + C4827 * C2470 + C4823 * C2473) *
                C31581 +
            (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
               C47619 * C47970) *
              C47994 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C1880 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C1881 +
           ((C38302 + C38301) * C31580 + (C38300 + C38299) * C31578 +
            (C4827 * C7503 + C4823 * C7505 + C4828 * C23688 + C47985 * C23689) *
                C31581 +
            (C4827 * C7506 + C4823 * C7509 + C4828 * C23690 + C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C3342 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C47935 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C3342) *
               C47733) *
              C47647 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C3342) *
               C47935 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C3342 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47733) *
              C47656 +
          ((((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
             (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                C47619 * C3342 -
            ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
             (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
                C47619 * C47775) *
               C47935 +
           (((C5767 + C5766) * C31580 + (C5765 + C5764) * C31578 +
             (C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                 C31581 +
             (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
             (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
                C47619 * C3342) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47771 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47778 +
            ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
             (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
                C47619 * C3850) *
               C47935 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47778 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47771 -
            ((C39629 + C39630) * C47987 + (C39631 + C39632) * C31581 +
             (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
                C47619 * C3850) *
               C47733) *
              C2688 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47778 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47771 -
            ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
             (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
                C47619 * C3850) *
               C47935 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47771 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47778 +
            ((C7231 + C7230) * C31580 + (C7229 + C7228) * C31578 +
             (C4827 * C2471 + C4823 * C2475 + C4828 * C7504 + C47985 * C7507) *
                 C31581 +
             (C4827 * C2476 + C4823 * C2480 + C4828 * C7508 + C47985 * C7510) *
                 C47987) *
                C47619 * C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C3342 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C48006 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C3342) *
               C47994 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C31580 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C31578 +
             (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
                C47619 * C3342 -
            ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
             (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
                C47619 * C47775) *
               C47967) *
              C2688 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C3342) *
               C48006 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C3342 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47994 +
           (((C6505 + C6504) * C31580 + (C6503 + C6502) * C31578 +
             (C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C31581 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
             (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
                C47619 * C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C3342 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C47670 * C48012 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C47775 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C3342) *
              C47670 * C48005 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C3342 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C47775) *
              C47670 * C47992 +
          (((C5549 + C5548) * C31580 + (C5547 + C5546) * C31578 +
            (C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                C31581 +
            (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C48014 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C48011 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
               C47619 * C48002 -
           ((C39163 + C39164) * C47987 + (C39165 + C39166) * C31581 +
            (C39162 + C39161) * C31578 + (C39160 + C39159) * C31580) *
               C47619 * C47983) *
              C47670 * C2688 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C48011 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C48014 -
           ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
            (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
               C47619 * C48002 +
           ((C7373 + C7372) * C31580 + (C7371 + C7370) * C31578 +
            (C4827 * C2064 + C4823 * C2074 + C4828 * C7018 + C47985 * C7021) *
                C31581 +
            (C4827 * C2075 + C4823 * C2082 + C4828 * C7022 + C47985 * C7024) *
                C47987) *
               C47619 * C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47771 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47778 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C39159 + C39160) * C31581 + (C39161 + C39162) * C47987) *
               C47619 * C3850) *
              C47670 * C47647 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C47778 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47771 -
           ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
            (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
               C47619 * C3850) *
              C47670 * C47656 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47771 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C47778 +
           ((C5265 + C5264) * C31580 + (C5263 + C5262) * C31578 +
            (C4827 * C2060 + C4823 * C2067 + C4828 * C2472 + C47985 * C2477) *
                C31581 +
            (C4827 * C2066 + C4823 * C2078 + C4828 * C2478 + C47985 * C2481) *
                C47987) *
               C47619 * C3850) *
              C47670 * C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C3342 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C47670 * C48012 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C47775 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C3342) *
              C47670 * C48005 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C3342 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C47775) *
              C47670 * C47992 +
          (((C5549 + C5548) * C31580 + (C5547 + C5546) * C31578 +
            (C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                C31581 +
            (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C3342 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C48006 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C3342) *
               C47994 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C31580 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C31578 +
             (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
                C47619 * C3342 -
            ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
             (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
                C47619 * C47775) *
               C47967) *
              C2688 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C3342) *
               C48006 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C3342 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47994 +
           (((C6505 + C6504) * C31580 + (C6503 + C6502) * C31578 +
             (C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C31581 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
             (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
                C47619 * C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C47935 -
           ((C4828 * C1353 + C47985 * C1366 + C4827 * C977 + C4823 * C986) *
                C47987 +
            (C4828 * C1339 + C47985 * C1354 + C4827 * C971 + C4823 * C976) *
                C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47733) *
              C695 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47733 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C47935) *
              C696 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C47935 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47733) *
              C697 +
          (((C5407 + C5406) * C31580 + (C5405 + C5404) * C31578 +
            (C4827 * C974 + C4823 * C983 + C4828 * C1640 + C47985 * C1641) *
                C31581 +
            (C4827 * C982 + C4823 * C989 + C4828 * C1642 + C47985 * C1643) *
                C47987) *
               C47619 * C47688 * C47733 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C1468 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C1469 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47688 * C1470 -
           ((C4828 * C6638 + C47985 * C6641 + C4827 * C1762 + C4823 * C1767) *
                C47987 +
            (C4828 * C6635 + C47985 * C6637 + C4827 * C1758 + C4823 * C1761) *
                C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C47688 * C47977) *
              C47921 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C1469 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C1468 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C1470 +
           ((C6299 + C6298) * C31580 + (C6297 + C6296) * C31578 +
            (C4827 * C1759 + C4823 * C1763 + C4828 * C6636 + C47985 * C6639) *
                C31581 +
            (C4827 * C1764 + C4823 * C1768 + C4828 * C6640 + C47985 * C6642) *
                C47987) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47936 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C47935 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C4827 * C1336 + C4823 * C1348 + C4828 * C1340 + C47985 * C1355) *
                 C31581 +
             (C4827 * C1347 + C4823 * C1363 + C4828 * C1356 + C47985 * C1367) *
                 C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47936) *
               C47733) *
              C299 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47936) *
               C47935 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47936 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C47733) *
              C300 +
          ((((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
             (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
                C47619 * C47936 -
            ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
             (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
                C47619 * C47775) *
               C47935 +
           (((C5767 + C5766) * C31580 + (C5765 + C5764) * C31578 +
             (C4827 * C1334 + C4823 * C1344 + C4828 * C1342 + C47985 * C1359) *
                 C31581 +
             (C4827 * C1343 + C4823 * C1361 + C4828 * C1360 + C47985 * C1369) *
                 C47987) *
                C47619 * C47775 -
            ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
             (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
                C47619 * C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47936 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C1468 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C47775 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47936) *
              C1469 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C47936 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C47775) *
              C1470 +
          (((C38765 + C38766) * C31580 + (C38767 + C38768) * C31578 +
            (C4827 * C6149 + C4823 * C6151 + C4828 * C22710 + C47985 * C22711) *
                C31581 +
            (C4827 * C6152 + C4823 * C6155 + C4828 * C22712 + C47985 * C22713) *
                C47987) *
               C47619 * C47775 -
           ((C38768 + C38767) * C47987 + (C38766 + C38765) * C31581 +
            (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
                C31578 +
            (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
                C31580) *
               C47619 * C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
                C31581 +
            (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
                C47987) *
               C47619 * C47688 * C48006 -
           ((C4828 * C1353 + C47985 * C1366 + C4827 * C977 + C4823 * C986) *
                C47987 +
            (C4828 * C1339 + C47985 * C1354 + C4827 * C971 + C4823 * C976) *
                C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47994 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
                C31581 +
            (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C299 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47994 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C48006 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47967) *
              C300 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C48006 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47994 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
               C31581 +
           (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
               C47987) *
              C47619 * C47688 * C47670 * C108 -
          ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
           (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
              C47619 * C47688 * C47670 * C109 +
          ((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
           (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
              C47619 * C47688 * C47670 * C110 -
          ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
           (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
              C47619 * C47688 * C47670 * C111 +
          ((C4877 + C4876) * C31580 + (C4875 + C4874) * C31578 +
           (C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
               C31581 +
           (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
               C47987) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C48007 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47996 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C47670 * C299 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C47996 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C48007 -
           ((C7370 + C7371) * C47987 + (C7372 + C7373) * C31581 +
            (C5257 + C5256) * C31578 + (C5255 + C5254) * C31580) *
               C47619 * C47970) *
              C47670 * C300 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C48007 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C47996 +
           ((C5265 + C5264) * C31580 + (C5263 + C5262) * C31578 +
            (C4827 * C2060 + C4823 * C2067 + C4828 * C2472 + C47985 * C2477) *
                C31581 +
            (C4827 * C2066 + C4823 * C2078 + C4828 * C2478 + C47985 * C2481) *
                C47987) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C1126 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C1127 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
                C31581 +
            (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C1127 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C1126 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C1126 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C1127 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
              C47619 * C47688 * C1194 -
          ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
           (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
               C31578 +
           (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
               C31580) *
              C47619 * C47688 * C1195 +
          ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
               C31580 +
           (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
               C31578 +
           (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
               C31581 +
           (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C4828 * C6638 + C47985 * C6641 + C4827 * C1762 + C4823 * C1767) *
               C47987 +
           (C4828 * C6635 + C47985 * C6637 + C4827 * C1758 + C4823 * C1761) *
               C31581 +
           (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
               C31578 +
           (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
               C31580) *
              C47619 * C47688 * C1197 +
          ((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
               C31580 +
           (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
               C31578 +
           (C4827 * C6635 + C4823 * C6637 + C4828 * C23056 + C47985 * C23057) *
               C31581 +
           (C4827 * C6638 + C4823 * C6641 + C4828 * C23058 + C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C48007 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47996 +
           ((C37426 + C37425) * C31580 + (C37424 + C37423) * C31578 +
            (C4827 * C2062 + C4823 * C2071 + C4828 * C2470 + C47985 * C2473) *
                C31581 +
            (C4827 * C2070 + C4823 * C2080 + C4828 * C2474 + C47985 * C2479) *
                C47987) *
               C47619 * C47970) *
              C1126 +
          (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
            (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
               C47619 * C47996 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C48007 -
           ((C4828 * C7506 + C47985 * C7509 + C4827 * C2474 + C4823 * C2479) *
                C47987 +
            (C4828 * C7503 + C47985 * C7505 + C4827 * C2470 + C4823 * C2473) *
                C31581 +
            (C38294 + C38293) * C31578 + (C38292 + C38291) * C31580) *
               C47619 * C47970) *
              C1127 +
          (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
               C47619 * C48007 -
           ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
            (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
               C47619 * C47996 +
           ((C38302 + C38301) * C31580 + (C38300 + C38299) * C31578 +
            (C4827 * C7503 + C4823 * C7505 + C4828 * C23688 + C47985 * C23689) *
                C31581 +
            (C4827 * C7506 + C4823 * C7509 + C4828 * C23690 + C47985 * C23691) *
                C47987) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47936 -
           ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
            (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
               C47619 * C47775) *
              C47670 * C695 +
          (((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
            (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
               C47619 * C47775 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47936) *
              C47670 * C696 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47936 -
           ((C5262 + C5263) * C47987 + (C5264 + C5265) * C31581 +
            (C5261 + C5260) * C31578 + (C5259 + C5258) * C31580) *
               C47619 * C47775) *
              C47670 * C697 +
          (((C5549 + C5548) * C31580 + (C5547 + C5546) * C31578 +
            (C4827 * C512 + C4823 * C530 + C4828 * C2230 + C47985 * C2231) *
                C31581 +
            (C4827 * C529 + C4823 * C542 + C4828 * C2232 + C47985 * C2233) *
                C47987) *
               C47619 * C47775 -
           ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
            (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
               C47619 * C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                 C31580 +
             (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                 C31578 +
             (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
                C47619 * C47936 -
            ((C37423 + C37424) * C47987 + (C37425 + C37426) * C31581 +
             (C37422 + C37421) * C31578 + (C37420 + C37419) * C31580) *
                C47619 * C47775) *
               C1126 +
           (((C37889 + C37890) * C31580 + (C37891 + C37892) * C31578 +
             (C38291 + C38292) * C31581 + (C38293 + C38294) * C47987) *
                C47619 * C47775 -
            ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
             (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                 C31578 +
             (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                 C31580) *
                C47619 * C47936) *
               C1127 +
           (((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                 C31580 +
             (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                 C31578 +
             (C38295 + C38296) * C31581 + (C38297 + C38298) * C47987) *
                C47619 * C47936 -
            ((C38299 + C38300) * C47987 + (C38301 + C38302) * C31581 +
             (C38298 + C38297) * C31578 + (C38296 + C38295) * C31580) *
                C47619 * C47775) *
               C47967) *
              C47921 +
          ((((C5253 + C5252) * C31580 + (C5251 + C5250) * C31578 +
             (C5254 + C5255) * C31581 + (C5256 + C5257) * C47987) *
                C47619 * C47775 -
            ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
             (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
                C47619 * C47936) *
               C1126 +
           (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
             (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
                C47619 * C47936 -
            ((C7228 + C7229) * C47987 + (C7230 + C7231) * C31581 +
             (C5763 + C5762) * C31578 + (C5761 + C5760) * C31580) *
                C47619 * C47775) *
               C1127 +
           (((C6505 + C6504) * C31580 + (C6503 + C6502) * C31578 +
             (C4827 * C1341 + C4823 * C1357 + C4828 * C6150 + C47985 * C6153) *
                 C31581 +
             (C4827 * C1358 + C4823 * C1368 + C4828 * C6154 + C47985 * C6156) *
                 C47987) *
                C47619 * C47775 -
            ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
             (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
                C47619 * C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
               C31581 +
           (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
               C47987) *
              C47619 * C47688 * C47670 * C108 -
          ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
           (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
              C47619 * C47688 * C47670 * C109 +
          ((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
           (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
              C47619 * C47688 * C47670 * C110 -
          ((C5546 + C5547) * C47987 + (C5548 + C5549) * C31581 +
           (C4873 + C4872) * C31578 + (C4871 + C4870) * C31580) *
              C47619 * C47688 * C47670 * C111 +
          ((C4877 + C4876) * C31580 + (C4875 + C4874) * C31578 +
           (C4827 * C513 + C4823 * C532 + C4828 * C975 + C47985 * C984) *
               C31581 +
           (C4827 * C531 + C4823 * C543 + C4828 * C985 + C47985 * C990) *
               C47987) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C4827 * C507 + C4823 * C520 + C4828 * C971 + C47985 * C976) *
                C31581 +
            (C4827 * C519 + C4823 * C537 + C4828 * C977 + C47985 * C986) *
                C47987) *
               C47619 * C47688 * C48006 -
           ((C4828 * C1353 + C47985 * C1366 + C4827 * C977 + C4823 * C986) *
                C47987 +
            (C4828 * C1339 + C47985 * C1354 + C4827 * C971 + C4823 * C976) *
                C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C47994 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
                C31581 +
            (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C299 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C47994 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C48006 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47967) *
              C300 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C48006 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C47994 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
                C31580 +
            (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
                C31578 +
            (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
               C47619 * C47688 * C1126 -
           ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
            (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
                C31578 +
            (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
                C31580) *
               C47619 * C47688 * C1127 +
           ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
                C31580 +
            (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
                C31578 +
            (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
                C31581 +
            (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
                C47987) *
               C47619 * C47688 * C47967) *
              C48003 +
          (((C5059 + C5058) * C31580 + (C5057 + C5056) * C31578 +
            (C5760 + C5761) * C31581 + (C5762 + C5763) * C47987) *
               C47619 * C47688 * C1127 -
           ((C5250 + C5251) * C47987 + (C5252 + C5253) * C31581 +
            (C4865 + C4864) * C31578 + (C4863 + C4862) * C31580) *
               C47619 * C47688 * C1126 -
           ((C6502 + C6503) * C47987 + (C6504 + C6505) * C31581 +
            (C5063 + C5062) * C31578 + (C5061 + C5060) * C31580) *
               C47619 * C47688 * C47967) *
              C47990 +
          (((C4869 + C4868) * C31580 + (C4867 + C4866) * C31578 +
            (C5258 + C5259) * C31581 + (C5260 + C5261) * C47987) *
               C47619 * C47688 * C1126 -
           ((C5764 + C5765) * C47987 + (C5766 + C5767) * C31581 +
            (C5067 + C5066) * C31578 + (C5065 + C5064) * C31580) *
               C47619 * C47688 * C1127 +
           ((C5071 + C5070) * C31580 + (C5069 + C5068) * C31578 +
            (C4827 * C1337 + C4823 * C1350 + C4828 * C1760 + C47985 * C1765) *
                C31581 +
            (C4827 * C1349 + C4823 * C1364 + C4828 * C1766 + C47985 * C1769) *
                C47987) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4827 * C115 + C4823 * C122 + C4828 * C304 + C47985 * C317) *
               C31580 +
           (C4827 * C123 + C4823 * C136 + C4828 * C316 + C47985 * C334) *
               C31578 +
           (C37419 + C37420) * C31581 + (C37421 + C37422) * C47987) *
              C47619 * C47688 * C1194 -
          ((C37892 + C37891) * C47987 + (C37890 + C37889) * C31581 +
           (C4828 * C319 + C47985 * C335 + C4827 * C316 + C4823 * C334) *
               C31578 +
           (C4828 * C305 + C47985 * C318 + C4827 * C304 + C4823 * C317) *
               C31580) *
              C47619 * C47688 * C1195 +
          ((C4827 * C305 + C4823 * C318 + C4828 * C1202 + C47985 * C1211) *
               C31580 +
           (C4827 * C319 + C4823 * C335 + C4828 * C1210 + C47985 * C1220) *
               C31578 +
           (C4827 * C1339 + C4823 * C1354 + C4828 * C1758 + C47985 * C1761) *
               C31581 +
           (C4827 * C1353 + C4823 * C1366 + C4828 * C1762 + C47985 * C1767) *
               C47987) *
              C47619 * C47688 * C1196 -
          ((C4828 * C6638 + C47985 * C6641 + C4827 * C1762 + C4823 * C1767) *
               C47987 +
           (C4828 * C6635 + C47985 * C6637 + C4827 * C1758 + C4823 * C1761) *
               C31581 +
           (C4828 * C1213 + C47985 * C1221 + C4827 * C1210 + C4823 * C1220) *
               C31578 +
           (C4828 * C1203 + C47985 * C1212 + C4827 * C1202 + C4823 * C1211) *
               C31580) *
              C47619 * C47688 * C1197 +
          ((C4827 * C1203 + C4823 * C1212 + C4828 * C5995 + C47985 * C5997) *
               C31580 +
           (C4827 * C1213 + C4823 * C1221 + C4828 * C5998 + C47985 * C6001) *
               C31578 +
           (C4827 * C6635 + C4823 * C6637 + C4828 * C23056 + C47985 * C23057) *
               C31581 +
           (C4827 * C6638 + C4823 * C6641 + C4828 * C23058 + C47985 * C23059) *
               C47987) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47873 * C122) * C42661 +
                     (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
                     C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                        C47619 * C47688 * C47729 -
                    (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
                     C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
                     (C113 * C304 + C47873 * C317) * C42661) *
                        C47619 * C47688 * C47736 +
                    ((C113 * C305 + C47873 * C318) * C42661 +
                     (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
                     C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                        C47619 * C47688 * C2948) *
                       C47647 +
                   ((C370 * C42661 + C369 * C42658 + C1004 * C42662 +
                     C1005 * C42659 + C2246 * C42663 + C2245 * C42660) *
                        C47619 * C47688 * C47736 -
                    (C575 * C42660 + C574 * C42663 + C572 * C42659 +
                     C573 * C42662 + C165 * C42658 + C164 * C42661) *
                        C47619 * C47688 * C47729 -
                    (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
                     C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                        C47619 * C47688 * C2948) *
                       C47656 +
                   ((C166 * C42661 + C167 * C42658 + C571 * C42662 +
                     C570 * C42659 + C576 * C42663 + C577 * C42660) *
                        C47619 * C47688 * C47729 -
                    (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 +
                     C1006 * C42662 + C367 * C42658 + C368 * C42661) *
                        C47619 * C47688 * C47736 +
                    (C373 * C42661 + C374 * C42658 + C1654 * C42662 +
                     C1653 * C42659 + (C113 * C1342 + C47873 * C1359) * C42663 +
                     (C113 * C1360 + C47873 * C1369) * C42660) *
                        C47619 * C47688 * C2948) *
                       C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47936 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C47729 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47936) *
               C47736 +
           (((C113 * C305 + C47873 * C318) * C42661 +
             (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
             C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                C47619 * C47936 -
            (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
             C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
                C47619 * C47775) *
               C2948) *
              C2688 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47936) *
               C47729 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47936 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47736 +
           ((C1656 * C42661 + C1655 * C42658 + C11785 * C42662 +
             C11784 * C42659 + (C113 * C7504 + C47873 * C7507) * C42663 +
             (C113 * C7508 + C47873 * C7510) * C42660) *
                C47619 * C47775 -
            (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
             C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                C47619 * C47936) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C48013 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C48009 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C47999 -
           (C43862 * C42660 + C43861 * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C47688 * C47977) *
              C2688 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C48009 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C48013 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C47999 +
           (C1490 * C42661 + C1489 * C42658 + C11925 * C42662 +
            C11924 * C42659 + (C113 * C6150 + C47873 * C6153) * C42663 +
            (C113 * C6154 + C47873 * C6156) * C42660) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C2580 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C47733) *
              C48012 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C47733 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C2580) *
              C48005 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C2580 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C47733) *
              C47992 +
          ((C375 * C42661 + C376 * C42658 + C1009 * C42662 + C1008 * C42659 +
            (C113 * C2230 + C47873 * C2231) * C42663 +
            (C113 * C2232 + C47873 * C2233) * C42660) *
               C47619 * C47688 * C47733 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C48007 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47996 +
            (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
             C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
                C47619 * C47970) *
               C2580 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47996 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C48007 -
            (C44501 * C42660 + C44502 * C42663 + C13134 * C42659 +
             C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
                C47619 * C47970) *
               C47733) *
              C2688 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47996 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C48007 -
            (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
             C2368 * C42662 + C575 * C42658 + C574 * C42661) *
                C47619 * C47970) *
               C2580 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C48007 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47996 +
            (C2246 * C42661 + C2245 * C42658 + C12863 * C42662 +
             C12862 * C42659 + (C113 * C7018 + C47873 * C7021) * C42663 +
             (C113 * C7022 + C47873 * C7024) * C42660) *
                C47619 * C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47936 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C2580 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47936) *
               C47733) *
              C47647 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47936) *
               C2580 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47936 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47733) *
              C47656 +
          (((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
             C576 * C42663 + C577 * C42660) *
                C47619 * C47936 -
            (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
             C570 * C42658 + C571 * C42661) *
                C47619 * C47775) *
               C2580 +
           ((C1006 * C42661 + C1007 * C42658 + C2244 * C42662 + C2243 * C42659 +
             (C113 * C2472 + C47873 * C2477) * C42663 +
             (C113 * C2478 + C47873 * C2481) * C42660) *
                C47619 * C47775 -
            (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
             C367 * C42658 + C368 * C42661) *
                C47619 * C47936) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C2580 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C47733) *
              C48012 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C47733 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C2580) *
              C48005 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C2580 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C47733) *
              C47992 +
          ((C375 * C42661 + C376 * C42658 + C1009 * C42662 + C1008 * C42659 +
            (C113 * C2230 + C47873 * C2231) * C42663 +
            (C113 * C2232 + C47873 * C2233) * C42660) *
               C47619 * C47688 * C47733 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C47688 * C2580) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C48013 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C48009 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C47999 -
           (C43862 * C42660 + C43861 * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C47688 * C47977) *
              C2688 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C48009 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C48013 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C47999 +
           (C1490 * C42661 + C1489 * C42658 + C11925 * C42662 +
            C11924 * C42659 + (C113 * C6150 + C47873 * C6153) * C42663 +
            (C113 * C6154 + C47873 * C6156) * C42660) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C3342 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C47729 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C3342) *
               C47736 +
           (((C113 * C305 + C47873 * C318) * C42661 +
             (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
             C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                C47619 * C3342 -
            (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
             C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
                C47619 * C47775) *
               C2948) *
              C47921 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C3342) *
               C47729 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C3342 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47736 +
           ((C1656 * C42661 + C1655 * C42658 + C11785 * C42662 +
             C11784 * C42659 + (C113 * C7504 + C47873 * C7507) * C42663 +
             (C113 * C7508 + C47873 * C7510) * C42660) *
                C47619 * C47775 -
            (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
             C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                C47619 * C3342) *
               C2948) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47771 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47778 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C3850) *
              C47729 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C47778 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47771 -
           (C44501 * C42660 + C44502 * C42663 + C13134 * C42659 +
            C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
               C47619 * C3850) *
              C47736 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47771 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C47778 +
           (C11787 * C42661 + C11786 * C42658 + C43514 * C42662 +
            C43513 * C42659 + (C113 * C23342 + C47873 * C23343) * C42663 +
            (C113 * C23344 + C47873 * C23345) * C42660) *
               C47619 * C3850) *
              C2948) *
         C47642) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C3342 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C48013 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C47775 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C3342) *
              C48009 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C3342 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C47775) *
              C47999 +
          ((C12260 * C42661 + C12261 * C42658 + C43861 * C42662 +
            C43862 * C42659 + (C113 * C23688 + C47873 * C23689) * C42663 +
            (C113 * C23690 + C47873 * C23691) * C42660) *
               C47619 * C47775 -
           (C43862 * C42660 + C43861 * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C3342 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C2580 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C3342) *
               C47733) *
              C48003 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C3342) *
               C2580 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C3342 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47733) *
              C47990 +
          (((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
             C576 * C42663 + C577 * C42660) *
                C47619 * C3342 -
            (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
             C570 * C42658 + C571 * C42661) *
                C47619 * C47775) *
               C2580 +
           ((C1006 * C42661 + C1007 * C42658 + C2244 * C42662 + C2243 * C42659 +
             (C113 * C2472 + C47873 * C2477) * C42663 +
             (C113 * C2478 + C47873 * C2481) * C42660) *
                C47619 * C47775 -
            (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
             C367 * C42658 + C368 * C42661) *
                C47619 * C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C48014 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C48011 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C48002 -
           (C44153 * C42660 + C44154 * C42663 + C12660 * C42659 +
            C12661 * C42662 + C12657 * C42658 + C12656 * C42661) *
               C47619 * C47983) *
              C2580 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C48011 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C48014 -
           (C44501 * C42660 + C44502 * C42663 + C13134 * C42659 +
            C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
               C47619 * C48002 +
           (C13135 * C42661 + C13134 * C42658 + C44502 * C42662 +
            C44501 * C42659 + (C113 * C28038 + C47873 * C28039) * C42663 +
            (C113 * C28040 + C47873 * C28041) * C42660) *
               C47619 * C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47771 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47778 +
            (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
             C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
                C47619 * C3850) *
               C2580 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47778 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47771 -
            (C44501 * C42660 + C44502 * C42663 + C13134 * C42659 +
             C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
                C47619 * C3850) *
               C47733) *
              C47921 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47778 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47771 -
            (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
             C2368 * C42662 + C575 * C42658 + C574 * C42661) *
                C47619 * C3850) *
               C2580 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47771 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47778 +
            (C2246 * C42661 + C2245 * C42658 + C12863 * C42662 +
             C12862 * C42659 + (C113 * C7018 + C47873 * C7021) * C42663 +
             (C113 * C7022 + C47873 * C7024) * C42660) *
                C47619 * C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C3342 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C2580 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C3342) *
               C47733) *
              C48003 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C3342) *
               C2580 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C3342 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47733) *
              C47990 +
          (((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
             C576 * C42663 + C577 * C42660) *
                C47619 * C3342 -
            (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
             C570 * C42658 + C571 * C42661) *
                C47619 * C47775) *
               C2580 +
           ((C1006 * C42661 + C1007 * C42658 + C2244 * C42662 + C2243 * C42659 +
             (C113 * C2472 + C47873 * C2477) * C42663 +
             (C113 * C2478 + C47873 * C2481) * C42660) *
                C47619 * C47775 -
            (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
             C367 * C42658 + C368 * C42661) *
                C47619 * C3342) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C3342 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C48013 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C47775 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C3342) *
              C48009 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C3342 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C47775) *
              C47999 +
          ((C12260 * C42661 + C12261 * C42658 + C43861 * C42662 +
            C43862 * C42659 + (C113 * C23688 + C47873 * C23689) * C42663 +
            (C113 * C23690 + C47873 * C23691) * C42660) *
               C47619 * C47775 -
           (C43862 * C42660 + C43861 * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C3342) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C1468 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C1469 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C1470 -
           ((C113 * C6152 + C47873 * C6155) * C42660 +
            (C113 * C6149 + C47873 * C6151) * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C47688 * C47977) *
              C47921 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C1469 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C1468 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C1470 +
           (C1490 * C42661 + C1489 * C42658 + C11925 * C42662 +
            C11924 * C42659 + (C113 * C6150 + C47873 * C6153) * C42663 +
            (C113 * C6154 + C47873 * C6156) * C42660) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C47935 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C47733) *
              C695 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C47733 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C47935) *
              C696 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C47935 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C47733) *
              C697 +
          ((C375 * C42661 + C376 * C42658 + C1009 * C42662 + C1008 * C42659 +
            (C113 * C2230 + C47873 * C2231) * C42663 +
            (C113 * C2232 + C47873 * C2233) * C42660) *
               C47619 * C47688 * C47733 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C1880 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C1881 +
            (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
             C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
                C47619 * C47970) *
               C47935 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C1881 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C1880 -
            ((C113 * C7020 + C47873 * C7023) * C42660 +
             (C113 * C7017 + C47873 * C7019) * C42663 + C13134 * C42659 +
             C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
                C47619 * C47970) *
               C47733) *
              C47921 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C1881 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C1880 -
            (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
             C2368 * C42662 + C575 * C42658 + C574 * C42661) *
                C47619 * C47970) *
               C47935 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C1880 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C1881 +
            (C2246 * C42661 + C2245 * C42658 + C12863 * C42662 +
             C12862 * C42659 + (C113 * C7018 + C47873 * C7021) * C42663 +
             (C113 * C7022 + C47873 * C7024) * C42660) *
                C47619 * C47970) *
               C47733) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47936 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C1468 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C47775 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47936) *
              C1469 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47936 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C47775) *
              C1470 +
          ((C12260 * C42661 + C12261 * C42658 + C43861 * C42662 +
            C43862 * C42659 + (C113 * C23688 + C47873 * C23689) * C42663 +
            (C113 * C23690 + C47873 * C23691) * C42660) *
               C47619 * C47775 -
           (C43862 * C42660 + C43861 * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47936 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C47935 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47936) *
               C47733) *
              C299 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47936) *
               C47935 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47936 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47733) *
              C300 +
          (((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
             C576 * C42663 + C577 * C42660) *
                C47619 * C47936 -
            (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
             C570 * C42658 + C571 * C42661) *
                C47619 * C47775) *
               C47935 +
           ((C1006 * C42661 + C1007 * C42658 + C2244 * C42662 + C2243 * C42659 +
             (C113 * C2472 + C47873 * C2477) * C42663 +
             (C113 * C2478 + C47873 * C2481) * C42660) *
                C47619 * C47775 -
            (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
             C367 * C42658 + C368 * C42661) *
                C47619 * C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C2348 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C2349 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C2350 -
           (C44153 * C42660 + C44154 * C42663 + C12660 * C42659 +
            C12661 * C42662 + C12657 * C42658 + C12656 * C42661) *
               C47619 * C47983) *
              C47935 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C2349 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C2348 -
           (C44501 * C42660 + C44502 * C42663 + C13134 * C42659 +
            C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
               C47619 * C2350 +
           (C13135 * C42661 + C13134 * C42658 + C44502 * C42662 +
            C44501 * C42659 + (C113 * C28038 + C47873 * C28039) * C42663 +
            (C113 * C28040 + C47873 * C28041) * C42660) *
               C47619 * C47983) *
              C47733) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C47873 * C122) * C42661 +
               (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
               C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                  C47619 * C47688 * C47670 * C108 -
              (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
               C165 * C42658 + C164 * C42661) *
                  C47619 * C47688 * C47670 * C109 +
              (C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
               C576 * C42663 + C577 * C42660) *
                  C47619 * C47688 * C47670 * C110 -
              (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
               C168 * C42658 + C169 * C42661) *
                  C47619 * C47688 * C47670 * C111 +
              (C170 * C42661 + C171 * C42658 + C823 * C42662 + C822 * C42659 +
               (C113 * C514 + C47873 * C533) * C42663 +
               (C113 * C534 + C47873 * C544) * C42660) *
                  C47619 * C47688 * C47670 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C47873 * C122) * C42661 +
                (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
                C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                   C47619 * C47688 * C48006 -
               (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
                C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
                (C113 * C304 + C47873 * C317) * C42661) *
                   C47619 * C47688 * C47994 +
               ((C113 * C305 + C47873 * C318) * C42661 +
                (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
                C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                   C47619 * C47688 * C47967) *
                  C299 +
              ((C370 * C42661 + C369 * C42658 + C1004 * C42662 +
                C1005 * C42659 + C2246 * C42663 + C2245 * C42660) *
                   C47619 * C47688 * C47994 -
               (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
                C165 * C42658 + C164 * C42661) *
                   C47619 * C47688 * C48006 -
               (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
                C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                   C47619 * C47688 * C47967) *
                  C300 +
              ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
                C576 * C42663 + C577 * C42660) *
                   C47619 * C47688 * C48006 -
               (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 +
                C1006 * C42662 + C367 * C42658 + C368 * C42661) *
                   C47619 * C47688 * C47994 +
               (C373 * C42661 + C374 * C42658 + C1654 * C42662 +
                C1653 * C42659 + (C113 * C1342 + C47873 * C1359) * C42663 +
                (C113 * C1360 + C47873 * C1369) * C42660) *
                   C47619 * C47688 * C47967) *
                  C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C48007 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47996 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C47670 * C299 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C47996 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C48007 -
           (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
            C2368 * C42662 + C575 * C42658 + C574 * C42661) *
               C47619 * C47970) *
              C47670 * C300 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C48007 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C47996 +
           (C576 * C42661 + C577 * C42658 + C2366 * C42662 + C2365 * C42659 +
            (C113 * C2065 + C47873 * C2076) * C42663 +
            (C113 * C2077 + C47873 * C2083) * C42660) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C1126 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C1127 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C47967) *
              C48003 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C1127 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C1126 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C47967) *
              C47990 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C1126 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C1127 +
           (C373 * C42661 + C374 * C42658 + C1654 * C42662 + C1653 * C42659 +
            (C113 * C1342 + C47873 * C1359) * C42663 +
            (C113 * C1360 + C47873 * C1369) * C42660) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47873 * C122) * C42661 +
           (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
           C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
              C47619 * C47688 * C1194 -
          (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
           C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
           (C113 * C304 + C47873 * C317) * C42661) *
              C47619 * C47688 * C1195 +
          ((C113 * C305 + C47873 * C318) * C42661 +
           (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
           C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
              C47619 * C47688 * C1196 -
          ((C113 * C6152 + C47873 * C6155) * C42660 +
           (C113 * C6149 + C47873 * C6151) * C42663 + C12261 * C42659 +
           C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
           (C113 * C1202 + C47873 * C1211) * C42661) *
              C47619 * C47688 * C1197 +
          ((C113 * C1203 + C47873 * C1212) * C42661 +
           (C113 * C1213 + C47873 * C1221) * C42658 +
           (C113 * C6635 + C47873 * C6637) * C42662 +
           (C113 * C6638 + C47873 * C6641) * C42659 +
           (C113 * C22710 + C47873 * C22711) * C42663 +
           (C113 * C22712 + C47873 * C22713) * C42660) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C48007 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47996 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C1126 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C47996 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C48007 -
           ((C113 * C7020 + C47873 * C7023) * C42660 +
            (C113 * C7017 + C47873 * C7019) * C42663 + C13134 * C42659 +
            C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
               C47619 * C47970) *
              C1127 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C48007 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C47996 +
           (C11787 * C42661 + C11786 * C42658 + C43514 * C42662 +
            C43513 * C42659 + (C113 * C23342 + C47873 * C23343) * C42663 +
            (C113 * C23344 + C47873 * C23345) * C42660) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C1880 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C1881 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C47670 * C48003 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C1881 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C1880 -
           (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
            C2368 * C42662 + C575 * C42658 + C574 * C42661) *
               C47619 * C47970) *
              C47670 * C47990 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C1880 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C1881 +
           (C576 * C42661 + C577 * C42658 + C2366 * C42662 + C2365 * C42659 +
            (C113 * C2065 + C47873 * C2076) * C42663 +
            (C113 * C2077 + C47873 * C2083) * C42660) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C1880 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C1881 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C48006 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C1881 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C1880 -
           ((C113 * C7020 + C47873 * C7023) * C42660 +
            (C113 * C7017 + C47873 * C7019) * C42663 + C13134 * C42659 +
            C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
               C47619 * C47970) *
              C47994 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C1880 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C1881 +
           (C11787 * C42661 + C11786 * C42658 + C43514 * C42662 +
            C43513 * C42659 + (C113 * C23342 + C47873 * C23343) * C42663 +
            (C113 * C23344 + C47873 * C23345) * C42660) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47873 * C122) * C42661 +
           (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
           C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
              C47619 * C2055 -
          (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
           C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
              C47619 * C2056 +
          (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
           C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
              C47619 * C2057 -
          (C44153 * C42660 + C44154 * C42663 + C12660 * C42659 +
           C12661 * C42662 + C12657 * C42658 + C12656 * C42661) *
              C47619 * C2058 +
          (C12661 * C42661 + C12660 * C42658 + C44154 * C42662 +
           C44153 * C42659 + (C113 * C44144 + C47873 * C44145) * C42663 +
           (C113 * C44146 + C47873 * C44147) * C42660) *
              C47619 * C2059) *
         C47670 * C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47936 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C1126 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47936) *
               C1127 +
           (((C113 * C305 + C47873 * C318) * C42661 +
             (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
             C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                C47619 * C47936 -
            (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
             C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
                C47619 * C47775) *
               C47967) *
              C47921 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47936) *
               C1126 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47936 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C1127 +
           ((C1656 * C42661 + C1655 * C42658 + C11785 * C42662 +
             C11784 * C42659 + (C113 * C7504 + C47873 * C7507) * C42663 +
             (C113 * C7508 + C47873 * C7510) * C42660) *
                C47619 * C47775 -
            (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
             C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                C47619 * C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47936 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C47670 * C695 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C47775 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47936) *
              C47670 * C696 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47936 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C47775) *
              C47670 * C697 +
          ((C578 * C42661 + C579 * C42658 + C581 * C42662 + C580 * C42659 +
            (C113 * C2352 + C47873 * C2353) * C42663 +
            (C113 * C2354 + C47873 * C2355) * C42660) *
               C47619 * C47775 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C2348 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C2349 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C2350 -
           (C44153 * C42660 + C44154 * C42663 + C12660 * C42659 +
            C12661 * C42662 + C12657 * C42658 + C12656 * C42661) *
               C47619 * C47983) *
              C47670 * C47921 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C2349 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C2348 -
           (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
            C2368 * C42662 + C575 * C42658 + C574 * C42661) *
               C47619 * C2350 +
           (C2368 * C42661 + C2367 * C42658 + C12659 * C42662 +
            C12658 * C42659 + (C113 * C12636 + C47873 * C12639) * C42663 +
            (C113 * C12640 + C47873 * C12642) * C42660) *
               C47619 * C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C48006 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C47994 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C47967) *
              C299 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C47994 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C48006 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C47967) *
              C300 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C48006 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C47994 +
           (C373 * C42661 + C374 * C42658 + C1654 * C42662 + C1653 * C42659 +
            (C113 * C1342 + C47873 * C1359) * C42663 +
            (C113 * C1360 + C47873 * C1369) * C42660) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47873 * C122) * C42661 +
           (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
           C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
              C47619 * C47688 * C47670 * C108 -
          (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
           C165 * C42658 + C164 * C42661) *
              C47619 * C47688 * C47670 * C109 +
          (C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
           C576 * C42663 + C577 * C42660) *
              C47619 * C47688 * C47670 * C110 -
          (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
           C168 * C42658 + C169 * C42661) *
              C47619 * C47688 * C47670 * C111 +
          (C170 * C42661 + C171 * C42658 + C823 * C42662 + C822 * C42659 +
           (C113 * C514 + C47873 * C533) * C42663 +
           (C113 * C534 + C47873 * C544) * C42660) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C1126 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C1127 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C47967) *
              C48003 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C1127 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C1126 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C47967) *
              C47990 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C1126 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C1127 +
           (C373 * C42661 + C374 * C42658 + C1654 * C42662 + C1653 * C42659 +
            (C113 * C1342 + C47873 * C1359) * C42663 +
            (C113 * C1360 + C47873 * C1369) * C42660) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47873 * C122) * C42661 +
           (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
           C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
              C47619 * C47688 * C1194 -
          (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
           C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
           (C113 * C304 + C47873 * C317) * C42661) *
              C47619 * C47688 * C1195 +
          ((C113 * C305 + C47873 * C318) * C42661 +
           (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
           C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
              C47619 * C47688 * C1196 -
          ((C113 * C6152 + C47873 * C6155) * C42660 +
           (C113 * C6149 + C47873 * C6151) * C42663 + C12261 * C42659 +
           C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
           (C113 * C1202 + C47873 * C1211) * C42661) *
              C47619 * C47688 * C1197 +
          ((C113 * C1203 + C47873 * C1212) * C42661 +
           (C113 * C1213 + C47873 * C1221) * C42658 +
           (C113 * C6635 + C47873 * C6637) * C42662 +
           (C113 * C6638 + C47873 * C6641) * C42659 +
           (C113 * C22710 + C47873 * C22711) * C42663 +
           (C113 * C22712 + C47873 * C22713) * C42660) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C1880 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C1881 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C47670 * C48003 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C1881 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C1880 -
           (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
            C2368 * C42662 + C575 * C42658 + C574 * C42661) *
               C47619 * C47970) *
              C47670 * C47990 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C1880 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C1881 +
           (C576 * C42661 + C577 * C42658 + C2366 * C42662 + C2365 * C42659 +
            (C113 * C2065 + C47873 * C2076) * C42663 +
            (C113 * C2077 + C47873 * C2083) * C42660) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C1880 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C1881 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C48006 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C1881 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C1880 -
           ((C113 * C7020 + C47873 * C7023) * C42660 +
            (C113 * C7017 + C47873 * C7019) * C42663 + C13134 * C42659 +
            C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
               C47619 * C47970) *
              C47994 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C1880 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C1881 +
           (C11787 * C42661 + C11786 * C42658 + C43514 * C42662 +
            C43513 * C42659 + (C113 * C23342 + C47873 * C23343) * C42663 +
            (C113 * C23344 + C47873 * C23345) * C42660) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C3342 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C47935 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C3342) *
               C47733) *
              C47647 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C3342) *
               C47935 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C3342 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47733) *
              C47656 +
          (((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
             C576 * C42663 + C577 * C42660) *
                C47619 * C3342 -
            (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
             C570 * C42658 + C571 * C42661) *
                C47619 * C47775) *
               C47935 +
           ((C1006 * C42661 + C1007 * C42658 + C2244 * C42662 + C2243 * C42659 +
             (C113 * C2472 + C47873 * C2477) * C42663 +
             (C113 * C2478 + C47873 * C2481) * C42660) *
                C47619 * C47775 -
            (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
             C367 * C42658 + C368 * C42661) *
                C47619 * C3342) *
               C47733) *
              C2951)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47771 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47778 +
            (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
             C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
                C47619 * C3850) *
               C47935 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47778 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47771 -
            (C44501 * C42660 + C44502 * C42663 + C13134 * C42659 +
             C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
                C47619 * C3850) *
               C47733) *
              C2688 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47778 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47771 -
            (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
             C2368 * C42662 + C575 * C42658 + C574 * C42661) *
                C47619 * C3850) *
               C47935 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47771 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47778 +
            (C2246 * C42661 + C2245 * C42658 + C12863 * C42662 +
             C12862 * C42659 + (C113 * C7018 + C47873 * C7021) * C42663 +
             (C113 * C7022 + C47873 * C7024) * C42660) *
                C47619 * C3850) *
               C47733) *
              C47653)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C3342 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C48006 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C3342) *
               C47994 +
           (((C113 * C305 + C47873 * C318) * C42661 +
             (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
             C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                C47619 * C3342 -
            (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
             C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
                C47619 * C47775) *
               C47967) *
              C2688 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C3342) *
               C48006 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C3342 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47994 +
           ((C1656 * C42661 + C1655 * C42658 + C11785 * C42662 +
             C11784 * C42659 + (C113 * C7504 + C47873 * C7507) * C42663 +
             (C113 * C7508 + C47873 * C7510) * C42660) *
                C47619 * C47775 -
            (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
             C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                C47619 * C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C3342 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C47670 * C48012 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C47775 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C3342) *
              C47670 * C48005 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C3342 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C47775) *
              C47670 * C47992 +
          ((C578 * C42661 + C579 * C42658 + C581 * C42662 + C580 * C42659 +
            (C113 * C2352 + C47873 * C2353) * C42663 +
            (C113 * C2354 + C47873 * C2355) * C42660) *
               C47619 * C47775 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C48014 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C48011 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C48002 -
           (C44153 * C42660 + C44154 * C42663 + C12660 * C42659 +
            C12661 * C42662 + C12657 * C42658 + C12656 * C42661) *
               C47619 * C47983) *
              C47670 * C2688 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C48011 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C48014 -
           (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
            C2368 * C42662 + C575 * C42658 + C574 * C42661) *
               C47619 * C48002 +
           (C2368 * C42661 + C2367 * C42658 + C12659 * C42662 +
            C12658 * C42659 + (C113 * C12636 + C47873 * C12639) * C42663 +
            (C113 * C12640 + C47873 * C12642) * C42660) *
               C47619 * C47983) *
              C47670 * C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47873 * C122) * C42661 +
                     (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
                     C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                        C47619 * C47771 -
                    (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
                     C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                        C47619 * C47778 +
                    (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
                     C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
                        C47619 * C3850) *
                       C47670 * C47647 +
                   ((C573 * C42661 + C572 * C42658 + C574 * C42662 +
                     C575 * C42659 + C2368 * C42663 + C2367 * C42660) *
                        C47619 * C47778 -
                    (C575 * C42660 + C574 * C42663 + C572 * C42659 +
                     C573 * C42662 + C165 * C42658 + C164 * C42661) *
                        C47619 * C47771 -
                    (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
                     C2368 * C42662 + C575 * C42658 + C574 * C42661) *
                        C47619 * C3850) *
                       C47670 * C47656 +
                   ((C166 * C42661 + C167 * C42658 + C571 * C42662 +
                     C570 * C42659 + C576 * C42663 + C577 * C42660) *
                        C47619 * C47771 -
                    (C2365 * C42660 + C2366 * C42663 + C577 * C42659 +
                     C576 * C42662 + C570 * C42658 + C571 * C42661) *
                        C47619 * C47778 +
                    (C576 * C42661 + C577 * C42658 + C2366 * C42662 +
                     C2365 * C42659 + (C113 * C2065 + C47873 * C2076) * C42663 +
                     (C113 * C2077 + C47873 * C2083) * C42660) *
                        C47619 * C3850) *
                       C47670 * C2951)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C3342 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C47670 * C48012 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C47775 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C3342) *
              C47670 * C48005 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C3342 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C47775) *
              C47670 * C47992 +
          ((C578 * C42661 + C579 * C42658 + C581 * C42662 + C580 * C42659 +
            (C113 * C2352 + C47873 * C2353) * C42663 +
            (C113 * C2354 + C47873 * C2355) * C42660) *
               C47619 * C47775 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C3342) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C3342 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C48006 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C3342) *
               C47994 +
           (((C113 * C305 + C47873 * C318) * C42661 +
             (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
             C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                C47619 * C3342 -
            (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
             C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
                C47619 * C47775) *
               C47967) *
              C2688 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C3342) *
               C48006 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C3342 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47994 +
           ((C1656 * C42661 + C1655 * C42658 + C11785 * C42662 +
             C11784 * C42659 + (C113 * C7504 + C47873 * C7507) * C42663 +
             (C113 * C7508 + C47873 * C7510) * C42660) *
                C47619 * C47775 -
            (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
             C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                C47619 * C3342) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C47935 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C47733) *
              C695 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C47733 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C47935) *
              C696 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C47935 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C47733) *
              C697 +
          ((C375 * C42661 + C376 * C42658 + C1009 * C42662 + C1008 * C42659 +
            (C113 * C2230 + C47873 * C2231) * C42663 +
            (C113 * C2232 + C47873 * C2233) * C42660) *
               C47619 * C47688 * C47733 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C47688 * C47935) *
              C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C1468 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C1469 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C1470 -
           ((C113 * C6152 + C47873 * C6155) * C42660 +
            (C113 * C6149 + C47873 * C6151) * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C47688 * C47977) *
              C47921 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C1469 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C1468 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C1470 +
           (C1490 * C42661 + C1489 * C42658 + C11925 * C42662 +
            C11924 * C42659 + (C113 * C6150 + C47873 * C6153) * C42663 +
            (C113 * C6154 + C47873 * C6156) * C42660) *
               C47619 * C47688 * C47977) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47936 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C47935 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47936) *
               C47733) *
              C299 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47936) *
               C47935 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47936 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C47733) *
              C300 +
          (((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
             C576 * C42663 + C577 * C42660) *
                C47619 * C47936 -
            (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
             C570 * C42658 + C571 * C42661) *
                C47619 * C47775) *
               C47935 +
           ((C1006 * C42661 + C1007 * C42658 + C2244 * C42662 + C2243 * C42659 +
             (C113 * C2472 + C47873 * C2477) * C42663 +
             (C113 * C2478 + C47873 * C2481) * C42660) *
                C47619 * C47775 -
            (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
             C367 * C42658 + C368 * C42661) *
                C47619 * C47936) *
               C47733) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47936 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C1468 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C47775 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47936) *
              C1469 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47936 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C47775) *
              C1470 +
          ((C12260 * C42661 + C12261 * C42658 + C43861 * C42662 +
            C43862 * C42659 + (C113 * C23688 + C47873 * C23689) * C42663 +
            (C113 * C23690 + C47873 * C23691) * C42660) *
               C47619 * C47775 -
           (C43862 * C42660 + C43861 * C42663 + C12261 * C42659 +
            C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
            (C113 * C1202 + C47873 * C1211) * C42661) *
               C47619 * C47936) *
              C47977) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C48006 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C47994 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C47967) *
              C299 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C47994 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C48006 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C47967) *
              C300 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C48006 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C47994 +
           (C373 * C42661 + C374 * C42658 + C1654 * C42662 + C1653 * C42659 +
            (C113 * C1342 + C47873 * C1359) * C42663 +
            (C113 * C1360 + C47873 * C1369) * C42660) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47873 * C122) * C42661 +
           (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
           C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
              C47619 * C47688 * C47670 * C108 -
          (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
           C165 * C42658 + C164 * C42661) *
              C47619 * C47688 * C47670 * C109 +
          (C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
           C576 * C42663 + C577 * C42660) *
              C47619 * C47688 * C47670 * C110 -
          (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
           C168 * C42658 + C169 * C42661) *
              C47619 * C47688 * C47670 * C111 +
          (C170 * C42661 + C171 * C42658 + C823 * C42662 + C822 * C42659 +
           (C113 * C514 + C47873 * C533) * C42663 +
           (C113 * C534 + C47873 * C544) * C42660) *
              C47619 * C47688 * C47670 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C48007 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47996 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C47670 * C299 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C47996 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C48007 -
           (C12658 * C42660 + C12659 * C42663 + C2367 * C42659 +
            C2368 * C42662 + C575 * C42658 + C574 * C42661) *
               C47619 * C47970) *
              C47670 * C300 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C48007 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C47996 +
           (C576 * C42661 + C577 * C42658 + C2366 * C42662 + C2365 * C42659 +
            (C113 * C2065 + C47873 * C2076) * C42663 +
            (C113 * C2077 + C47873 * C2083) * C42660) *
               C47619 * C47970) *
              C47670 * C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47688 * C1126 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C47688 * C1127 +
           ((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C47688 * C47967) *
              C48003 +
          ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
            C2246 * C42663 + C2245 * C42660) *
               C47619 * C47688 * C1127 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47688 * C1126 -
           (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
            C1656 * C42662 + C372 * C42658 + C371 * C42661) *
               C47619 * C47688 * C47967) *
              C47990 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47688 * C1126 -
           (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 + C1006 * C42662 +
            C367 * C42658 + C368 * C42661) *
               C47619 * C47688 * C1127 +
           (C373 * C42661 + C374 * C42658 + C1654 * C42662 + C1653 * C42659 +
            (C113 * C1342 + C47873 * C1359) * C42663 +
            (C113 * C1360 + C47873 * C1369) * C42660) *
               C47619 * C47688 * C47967) *
              C47961)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C47873 * C122) * C42661 +
           (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
           C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
              C47619 * C47688 * C1194 -
          (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
           C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
           (C113 * C304 + C47873 * C317) * C42661) *
              C47619 * C47688 * C1195 +
          ((C113 * C305 + C47873 * C318) * C42661 +
           (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
           C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
              C47619 * C47688 * C1196 -
          ((C113 * C6152 + C47873 * C6155) * C42660 +
           (C113 * C6149 + C47873 * C6151) * C42663 + C12261 * C42659 +
           C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
           (C113 * C1202 + C47873 * C1211) * C42661) *
              C47619 * C47688 * C1197 +
          ((C113 * C1203 + C47873 * C1212) * C42661 +
           (C113 * C1213 + C47873 * C1221) * C42658 +
           (C113 * C6635 + C47873 * C6637) * C42662 +
           (C113 * C6638 + C47873 * C6641) * C42659 +
           (C113 * C22710 + C47873 * C22711) * C42663 +
           (C113 * C22712 + C47873 * C22713) * C42660) *
              C47619 * C47688 * C1198) *
         C47642) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C48007 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47996 +
           (C10913 * C42661 + C10912 * C42658 + C12656 * C42662 +
            C12657 * C42659 + C12661 * C42663 + C12660 * C42660) *
               C47619 * C47970) *
              C1126 +
          ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
            C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
               C47619 * C47996 -
           (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
            C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
            (C113 * C304 + C47873 * C317) * C42661) *
               C47619 * C48007 -
           ((C113 * C7020 + C47873 * C7023) * C42660 +
            (C113 * C7017 + C47873 * C7019) * C42663 + C13134 * C42659 +
            C13135 * C42662 + C11781 * C42658 + C11780 * C42661) *
               C47619 * C47970) *
              C1127 +
          (((C113 * C305 + C47873 * C318) * C42661 +
            (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
            C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
               C47619 * C48007 -
           (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
            C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
               C47619 * C47996 +
           (C11787 * C42661 + C11786 * C42658 + C43514 * C42662 +
            C43513 * C42659 + (C113 * C23342 + C47873 * C23343) * C42663 +
            (C113 * C23344 + C47873 * C23345) * C42660) *
               C47619 * C47970) *
              C47967) *
         C47642) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C47873 * C122) * C42661 +
            (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
            C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
               C47619 * C47936 -
           (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
            C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
               C47619 * C47775) *
              C47670 * C695 +
          ((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
            C2368 * C42663 + C2367 * C42660) *
               C47619 * C47775 -
           (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
            C165 * C42658 + C164 * C42661) *
               C47619 * C47936) *
              C47670 * C696 +
          ((C166 * C42661 + C167 * C42658 + C571 * C42662 + C570 * C42659 +
            C576 * C42663 + C577 * C42660) *
               C47619 * C47936 -
           (C2365 * C42660 + C2366 * C42663 + C577 * C42659 + C576 * C42662 +
            C570 * C42658 + C571 * C42661) *
               C47619 * C47775) *
              C47670 * C697 +
          ((C578 * C42661 + C579 * C42658 + C581 * C42662 + C580 * C42659 +
            (C113 * C2352 + C47873 * C2353) * C42663 +
            (C113 * C2354 + C47873 * C2355) * C42660) *
               C47619 * C47775 -
           (C580 * C42660 + C581 * C42663 + C579 * C42659 + C578 * C42662 +
            C168 * C42658 + C169 * C42661) *
               C47619 * C47936) *
              C47670 * C47971)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C47873 * C122) * C42661 +
             (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
             C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                C47619 * C47936 -
            (C12657 * C42660 + C12656 * C42663 + C10912 * C42659 +
             C10913 * C42662 + C10911 * C42658 + C10910 * C42661) *
                C47619 * C47775) *
               C1126 +
           ((C11388 * C42661 + C11389 * C42658 + C11780 * C42662 +
             C11781 * C42659 + C13135 * C42663 + C13134 * C42660) *
                C47619 * C47775 -
            (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
             C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
             (C113 * C304 + C47873 * C317) * C42661) *
                C47619 * C47936) *
               C1127 +
           (((C113 * C305 + C47873 * C318) * C42661 +
             (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
             C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                C47619 * C47936 -
            (C43513 * C42660 + C43514 * C42663 + C11786 * C42659 +
             C11787 * C42662 + C11783 * C42658 + C11782 * C42661) *
                C47619 * C47775) *
               C47967) *
              C47921 +
          (((C573 * C42661 + C572 * C42658 + C574 * C42662 + C575 * C42659 +
             C2368 * C42663 + C2367 * C42660) *
                C47619 * C47775 -
            (C575 * C42660 + C574 * C42663 + C572 * C42659 + C573 * C42662 +
             C165 * C42658 + C164 * C42661) *
                C47619 * C47936) *
               C1126 +
           ((C370 * C42661 + C369 * C42658 + C1004 * C42662 + C1005 * C42659 +
             C2246 * C42663 + C2245 * C42660) *
                C47619 * C47936 -
            (C12862 * C42660 + C12863 * C42663 + C2245 * C42659 +
             C2246 * C42662 + C1005 * C42658 + C1004 * C42661) *
                C47619 * C47775) *
               C1127 +
           ((C1656 * C42661 + C1655 * C42658 + C11785 * C42662 +
             C11784 * C42659 + (C113 * C7504 + C47873 * C7507) * C42663 +
             (C113 * C7508 + C47873 * C7510) * C42660) *
                C47619 * C47775 -
            (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
             C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                C47619 * C47936) *
               C47967) *
              C47653)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C115 + C47873 * C122) * C42661 +
                    (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
                    C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                       C47619 * C47688 * C47670 * C108 -
                   (C575 * C42660 + C574 * C42663 + C572 * C42659 +
                    C573 * C42662 + C165 * C42658 + C164 * C42661) *
                       C47619 * C47688 * C47670 * C109 +
                   (C166 * C42661 + C167 * C42658 + C571 * C42662 +
                    C570 * C42659 + C576 * C42663 + C577 * C42660) *
                       C47619 * C47688 * C47670 * C110 -
                   (C580 * C42660 + C581 * C42663 + C579 * C42659 +
                    C578 * C42662 + C168 * C42658 + C169 * C42661) *
                       C47619 * C47688 * C47670 * C111 +
                   (C170 * C42661 + C171 * C42658 + C823 * C42662 +
                    C822 * C42659 + (C113 * C514 + C47873 * C533) * C42663 +
                    (C113 * C534 + C47873 * C544) * C42660) *
                       C47619 * C47688 * C47670 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47873 * C122) * C42661 +
                     (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
                     C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                        C47619 * C47688 * C48006 -
                    (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
                     C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
                     (C113 * C304 + C47873 * C317) * C42661) *
                        C47619 * C47688 * C47994 +
                    ((C113 * C305 + C47873 * C318) * C42661 +
                     (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
                     C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                        C47619 * C47688 * C47967) *
                       C299 +
                   ((C370 * C42661 + C369 * C42658 + C1004 * C42662 +
                     C1005 * C42659 + C2246 * C42663 + C2245 * C42660) *
                        C47619 * C47688 * C47994 -
                    (C575 * C42660 + C574 * C42663 + C572 * C42659 +
                     C573 * C42662 + C165 * C42658 + C164 * C42661) *
                        C47619 * C47688 * C48006 -
                    (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
                     C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                        C47619 * C47688 * C47967) *
                       C300 +
                   ((C166 * C42661 + C167 * C42658 + C571 * C42662 +
                     C570 * C42659 + C576 * C42663 + C577 * C42660) *
                        C47619 * C47688 * C48006 -
                    (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 +
                     C1006 * C42662 + C367 * C42658 + C368 * C42661) *
                        C47619 * C47688 * C47994 +
                    (C373 * C42661 + C374 * C42658 + C1654 * C42662 +
                     C1653 * C42659 + (C113 * C1342 + C47873 * C1359) * C42663 +
                     (C113 * C1360 + C47873 * C1369) * C42660) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C47873 * C122) * C42661 +
                     (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
                     C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                        C47619 * C47688 * C1126 -
                    (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
                     C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
                     (C113 * C304 + C47873 * C317) * C42661) *
                        C47619 * C47688 * C1127 +
                    ((C113 * C305 + C47873 * C318) * C42661 +
                     (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
                     C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                        C47619 * C47688 * C47967) *
                       C48003 +
                   ((C370 * C42661 + C369 * C42658 + C1004 * C42662 +
                     C1005 * C42659 + C2246 * C42663 + C2245 * C42660) *
                        C47619 * C47688 * C1127 -
                    (C575 * C42660 + C574 * C42663 + C572 * C42659 +
                     C573 * C42662 + C165 * C42658 + C164 * C42661) *
                        C47619 * C47688 * C1126 -
                    (C11784 * C42660 + C11785 * C42663 + C1655 * C42659 +
                     C1656 * C42662 + C372 * C42658 + C371 * C42661) *
                        C47619 * C47688 * C47967) *
                       C47990 +
                   ((C166 * C42661 + C167 * C42658 + C571 * C42662 +
                     C570 * C42659 + C576 * C42663 + C577 * C42660) *
                        C47619 * C47688 * C1126 -
                    (C2243 * C42660 + C2244 * C42663 + C1007 * C42659 +
                     C1006 * C42662 + C367 * C42658 + C368 * C42661) *
                        C47619 * C47688 * C1127 +
                    (C373 * C42661 + C374 * C42658 + C1654 * C42662 +
                     C1653 * C42659 + (C113 * C1342 + C47873 * C1359) * C42663 +
                     (C113 * C1360 + C47873 * C1369) * C42660) *
                        C47619 * C47688 * C47967) *
                       C47961)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C115 + C47873 * C122) * C42661 +
                    (C113 * C123 + C47873 * C136) * C42658 + C10910 * C42662 +
                    C10911 * C42659 + C10913 * C42663 + C10912 * C42660) *
                       C47619 * C47688 * C1194 -
                   (C11781 * C42660 + C11780 * C42663 + C11389 * C42659 +
                    C11388 * C42662 + (C113 * C316 + C47873 * C334) * C42658 +
                    (C113 * C304 + C47873 * C317) * C42661) *
                       C47619 * C47688 * C1195 +
                   ((C113 * C305 + C47873 * C318) * C42661 +
                    (C113 * C319 + C47873 * C335) * C42658 + C11782 * C42662 +
                    C11783 * C42659 + C11787 * C42663 + C11786 * C42660) *
                       C47619 * C47688 * C1196 -
                   ((C113 * C6152 + C47873 * C6155) * C42660 +
                    (C113 * C6149 + C47873 * C6151) * C42663 + C12261 * C42659 +
                    C12260 * C42662 + (C113 * C1210 + C47873 * C1220) * C42658 +
                    (C113 * C1202 + C47873 * C1211) * C42661) *
                       C47619 * C47688 * C1197 +
                   ((C113 * C1203 + C47873 * C1212) * C42661 +
                    (C113 * C1213 + C47873 * C1221) * C42658 +
                    (C113 * C6635 + C47873 * C6637) * C42662 +
                    (C113 * C6638 + C47873 * C6641) * C42659 +
                    (C113 * C22710 + C47873 * C22711) * C42663 +
                    (C113 * C22712 + C47873 * C22713) * C42660) *
                       C47619 * C47688 * C1198) *
                  C47642) /
                     (p * q * std::sqrt(p + q));
}
