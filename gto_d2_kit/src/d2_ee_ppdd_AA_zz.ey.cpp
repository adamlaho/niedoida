/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AA_zz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_11_33(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46772 = ae + be;
    const double C46771 = ae * be;
    const double C46770 = zA - zB;
    const double C46797 = 0 * be;
    const double C46822 = p + q;
    const double C46821 = p * q;
    const double C46830 = std::pow(ae, 2);
    const double C46828 = bs[3];
    const double C46827 = zP - zQ;
    const double C46836 = bs[4];
    const double C46834 = xP - xQ;
    const double C46844 = bs[5];
    const double C46853 = bs[6];
    const double C46864 = bs[7];
    const double C46890 = bs[2];
    const double C46968 = yP - yQ;
    const double C115 = bs[0];
    const double C47711 = xA - xB;
    const double C47730 = ce + de;
    const double C47729 = ce * de;
    const double C47728 = xC - xD;
    const double C47762 = yC - yD;
    const double C47780 = zC - zD;
    const double C47946 = yA - yB;
    const double C46798 = std::pow(C46772, 2);
    const double C47721 = 2 * C46772;
    const double C46800 = 2 * C46771;
    const double C46777 = C46771 * C46770;
    const double C47984 = std::pow(C46770, 2);
    const double C48040 = C46770 * be;
    const double C48038 = C46770 * ae;
    const double C46823 = 2 * C46821;
    const double C46831 = std::pow(C46827, 2);
    const double C46886 = C46827 * ae;
    const double C46846 = std::pow(C46834, 2);
    const double C46978 = std::pow(C46968, 2);
    const double C47712 = std::pow(C47711, 2);
    const double C48005 = C47711 * be;
    const double C48004 = C47711 * ae;
    const double C47734 = 2 * C47730;
    const double C47733 = std::pow(C47730, 2);
    const double C47735 = C47728 * de;
    const double C47732 = C47728 * ce;
    const double C47731 = std::pow(C47728, 2);
    const double C47763 = std::pow(C47762, 2);
    const double C47822 = C47762 * de;
    const double C47820 = C47762 * ce;
    const double C47781 = std::pow(C47780, 2);
    const double C47864 = C47780 * de;
    const double C47862 = C47780 * ce;
    const double C47967 = std::pow(C47946, 2);
    const double C48039 = C47946 * be;
    const double C48037 = C47946 * ae;
    const double C46802 = 2 * C46798;
    const double C48006 = std::pow(C47721, -1);
    const double C47985 = C47984 * C46771;
    const double C46825 = C46823 / C46822;
    const double C129 =
        ((std::pow(zP - zQ, 2) * bs[2] * std::pow(C46823 / C46822, 2) -
          (bs[1] * C46823) / C46822) *
         std::pow(ae, 2)) /
        C46798;
    const double C116 = -(C46834 * bs[1] * C46823) / C46822;
    const double C291 = -(C46968 * bs[1] * C46823) / C46822;
    const double C480 = -(C46827 * bs[1] * C46823) / C46822;
    const double C46838 = C46831 * C46836;
    const double C46847 = C46831 * C46844;
    const double C46855 = C46831 * C46853;
    const double C46867 = C46831 * C46864;
    const double C46893 = C46828 * C46886;
    const double C46900 = C46836 * C46886;
    const double C46909 = C46844 * C46886;
    const double C46922 = C46853 * C46886;
    const double C46943 = C46864 * C46886;
    const double C122 = (-(bs[1] * C46886 * C46823) / C46822) / C46772;
    const double C47713 = C47712 * C46771;
    const double C47747 = std::pow(C47734, -1);
    const double C48014 = std::pow(C47734, -2);
    const double C47748 = 2 * C47733;
    const double C48018 = C47733 * C47734;
    const double C48017 = 4 * C47733;
    const double C48007 = std::pow(C47732, 2);
    const double C47736 = C47731 * C47729;
    const double C47764 = C47763 * C47729;
    const double C48019 = std::pow(C47820, 2);
    const double C47782 = C47781 * C47729;
    const double C48021 = std::pow(C47862, 2);
    const double C47968 = C47967 * C46771;
    const double C47986 = C47985 / C46772;
    const double C46829 = -C46825;
    const double C46837 = std::pow(C46825, 4);
    const double C46854 = std::pow(C46825, 6);
    const double C46889 = std::pow(C46825, 2);
    const double C130 = ((xP - xQ) *
                         (bs[2] * std::pow(C46825, 2) +
                          std::pow(zP - zQ, 2) * bs[3] * std::pow(-C46825, 3)) *
                         std::pow(ae, 2)) /
                        C46798;
    const double C47714 = C47713 / C46772;
    const double C48052 = 4 * C48018;
    const double C48051 = C47730 * C48017;
    const double C47737 = C47736 / C47730;
    const double C47765 = C47764 / C47730;
    const double C47783 = C47782 / C47730;
    const double C47969 = C47968 / C46772;
    const double C47987 = -C47986;
    const double C46832 = std::pow(C46829, 3);
    const double C46845 = std::pow(C46829, 5);
    const double C46865 = std::pow(C46829, 7);
    const double C46839 = C46838 * C46837;
    const double C46843 = C46836 * C46837;
    const double C46902 = C46837 * C46900;
    const double C46856 = C46855 * C46854;
    const double C46863 = C46853 * C46854;
    const double C46926 = C46854 * C46922;
    const double C46892 = C46890 * C46889;
    const double C123 = (C46834 * C46889 * C46890 * C46886) / C46772;
    const double C301 = (C46968 * C46889 * C46890 * C46886) / C46772;
    const double C490 = (C46827 * C46889 * C46890 * C46886) / C46772 -
                        (ae * bs[1] * C46823) / (C46822 * C46772);
    const double C47715 = -C47714;
    const double C47738 = -C47737;
    const double C47766 = -C47765;
    const double C47784 = -C47783;
    const double C47970 = -C47969;
    const double C47988 = std::exp(C47987);
    const double C46835 = C46828 * C46832;
    const double C46894 = C46832 * C46893;
    const double C131 =
        ((bs[2] * std::pow(C46825, 2) + C46831 * C46828 * C46832) * C46830 +
         (C46828 * C46832 + C46831 * bs[4] * std::pow(C46825, 4)) * C46830 *
             std::pow(xP - xQ, 2)) /
        C46798;
    const double C311 =
        ((yP - yQ) * (bs[2] * std::pow(C46825, 2) + C46831 * C46828 * C46832) *
         C46830) /
        C46798;
    const double C500 =
        (2 * ae * C46889 * C46890 * C46886 +
         C46827 * (C46890 * C46889 + C46831 * C46828 * C46832) * C46830) /
        C46798;
    const double C46848 = C46847 * C46845;
    const double C46852 = C46844 * C46845;
    const double C46911 = C46845 * C46909;
    const double C46868 = C46867 * C46865;
    const double C46948 = C46865 * C46943;
    const double C46910 = C46843 * C46846;
    const double C46923 = C46834 * C46843;
    const double C47007 = C46843 * C46978;
    const double C47077 = C46843 * C46831;
    const double C47076 = C46827 * C46843;
    const double C47075 = C46843 * ae;
    const double C47160 = C46968 * C46843;
    const double C46904 = C46834 * C46902;
    const double C46996 = C46968 * C46902;
    const double C47060 = C46827 * C46902;
    const double C47071 = ae * C46902;
    const double C46946 = C46863 * C46846;
    const double C47225 = C46834 * C46863;
    const double C47398 = C46863 * C46978;
    const double C47455 = C46968 * C46863;
    const double C47498 = C46863 * C46831;
    const double C47497 = C46827 * C46863;
    const double C47496 = C46863 * ae;
    const double C46929 = C46926 * C46846;
    const double C46942 = C46834 * C46926;
    const double C47208 = C46926 * C46978;
    const double C47244 = C46968 * C46926;
    const double C47320 = C46827 * C46926;
    const double C47490 = ae * C46926;
    const double C46895 = C46892 * ae;
    const double C117 = C46892 * C46846 - (bs[1] * C46823) / C46822;
    const double C290 = C46968 * C46834 * C46892;
    const double C292 = C46892 * C46978 - (bs[1] * C46823) / C46822;
    const double C479 = C46827 * C46834 * C46892;
    const double C481 = C46892 * C46831 - (bs[1] * C46823) / C46822;
    const double C924 = C46827 * C46968 * C46892;
    const double C47716 = std::exp(C47715);
    const double C47739 = std::exp(C47738);
    const double C47767 = std::exp(C47766);
    const double C47785 = std::exp(C47784);
    const double C47971 = std::exp(C47970);
    const double C140 = C47988 * C130;
    const double C46778 = C46777 * C47988;
    const double C113 =
        -((C47988 - (C46770 * 2 * C46771 * C46770 * C47988) / C46772) * 2 *
          C46771) /
        C46772;
    const double C114 = -(2 * C46771 * C46770 * C47988) / C46772;
    const double C48075 = C48006 * C47988;
    const double C48074 = C47988 * C48038;
    const double C31316 = -(C47988 * C48040) / C46772;
    const double C46840 = C46835 + C46839;
    const double C46901 = C46834 * C46835;
    const double C46997 = C46968 * C46835;
    const double C47062 = C46827 * C46835;
    const double C47061 = C46835 * ae;
    const double C118 =
        2 * C46834 * C46892 + C46834 * (C46892 + C46835 * C46846);
    const double C289 = C46968 * (C46892 + C46835 * C46846);
    const double C478 = C46827 * (C46892 + C46835 * C46846);
    const double C1148 =
        2 * C46968 * C46892 + C46968 * (C46892 + C46835 * C46978);
    const double C1285 = C46827 * (C46892 + C46835 * C46978);
    const double C2000 =
        2 * C46827 * C46892 + C46827 * (C46892 + C46835 * C46831);
    const double C46896 = C46827 * C46894;
    const double C124 = (C46889 * C46890 * C46886 + C46894 * C46846) / C46772;
    const double C125 =
        (2 * C46834 * C46894 + C46834 * (C46894 + C46902 * C46846)) / C46772;
    const double C299 = (C46968 * (C46894 + C46902 * C46846)) / C46772;
    const double C300 = (C46968 * C46834 * C46894) / C46772;
    const double C302 = (C46889 * C46890 * C46886 + C46894 * C46978) / C46772;
    const double C488 = (C46827 * (C46894 + C46902 * C46846) +
                         (C46892 + C46835 * C46846) * ae) /
                        C46772;
    const double C489 =
        (C46827 * C46834 * C46894 + C46834 * C46892 * ae) / C46772;
    const double C929 =
        (C46827 * C46968 * C46894 + C46968 * C46892 * ae) / C46772;
    const double C1154 =
        (2 * C46968 * C46894 + C46968 * (C46894 + C46902 * C46978)) / C46772;
    const double C1294 = (C46827 * (C46894 + C46902 * C46978) +
                          (C46892 + C46835 * C46978) * ae) /
                         C46772;
    const double C143 = C47988 * C131;
    const double C4913 = C47988 * C311;
    const double C46849 = C46843 + C46848;
    const double C46857 = C46852 + C46856;
    const double C46924 = C46852 * C46846;
    const double C46945 = C46834 * C46852;
    const double C47210 = C46852 * C46978;
    const double C47245 = C46968 * C46852;
    const double C47323 = C46852 * C46831;
    const double C47322 = C46827 * C46852;
    const double C47321 = C46852 * ae;
    const double C46913 = C46911 * C46846;
    const double C46921 = C46834 * C46911;
    const double C47006 = C46911 * C46978;
    const double C47074 = C46827 * C46911;
    const double C47159 = C46968 * C46911;
    const double C47316 = ae * C46911;
    const double C46869 = C46863 + C46868;
    const double C46951 = C46948 * C46846;
    const double C47223 = C46834 * C46948;
    const double C47395 = C46948 * C46978;
    const double C47454 = C46968 * C46948;
    const double C47495 = C46827 * C46948;
    const double C46912 = C46835 + C46910;
    const double C46927 = 2 * C46923;
    const double C46990 = C46968 * C46923;
    const double C47051 = C46827 * C46923;
    const double C47050 = C46923 * ae;
    const double C47009 = C46835 + C47007;
    const double C47081 = C46835 + C47077;
    const double C47080 = C47076 * ae;
    const double C47324 = 2 * C47076;
    const double C47163 = C46827 * C47160;
    const double C47162 = C47160 * ae;
    const double C47209 = 2 * C47160;
    const double C46905 = C46827 * C46904;
    const double C303 = (C46834 * C46894 + C46904 * C46978) / C46772;
    const double C46998 = C46827 * C46996;
    const double C47078 = 2 * C47071;
    const double C46950 = C46852 + C46946;
    const double C47227 = C47225 * C46978;
    const double C47271 = C46968 * C47225;
    const double C47359 = C47225 * C46831;
    const double C47358 = C46827 * C47225;
    const double C47357 = C47225 * ae;
    const double C47400 = C46852 + C47398;
    const double C47463 = C47455 * C46831;
    const double C47462 = C46827 * C47455;
    const double C47461 = C47455 * ae;
    const double C47506 = C46852 + C47498;
    const double C47505 = C47497 * ae;
    const double C46931 = C46911 + C46929;
    const double C46947 = 2 * C46942;
    const double C47015 = C46942 * C46978;
    const double C47097 = C46827 * C46942;
    const double C47173 = C46968 * C46942;
    const double C47352 = ae * C46942;
    const double C47211 = C46911 + C47208;
    const double C47248 = C46827 * C47244;
    const double C47394 = 2 * C47244;
    const double C47450 = ae * C47244;
    const double C47503 = 2 * C47490;
    const double C48042 = C48006 * C47716;
    const double C48041 = C47716 * C48004;
    const double C4755 = -(C47716 * C48005) / C46772;
    const double C47741 = C47739 * C47732;
    const double C47740 = C47739 / C47734;
    const double C47750 = C47747 * C47739;
    const double C48010 = C47739 * C47735;
    const double C48049 = C48014 * C47739;
    const double C48043 = C47739 * C48007;
    const double C47821 = C47767 / C47734;
    const double C47823 = C47767 * C47820;
    const double C47830 = C47747 * C47767;
    const double C48025 = C47767 * C47822;
    const double C48055 = C48014 * C47767;
    const double C48053 = C47767 * C48019;
    const double C47863 = C47785 / C47734;
    const double C47865 = C47785 * C47862;
    const double C47872 = C47747 * C47785;
    const double C48031 = C47785 * C47864;
    const double C48058 = C48014 * C47785;
    const double C48056 = C47785 * C48021;
    const double C48073 = C48006 * C47971;
    const double C48072 = C47971 * C48037;
    const double C16115 = -(C47971 * C48039) / C46772;
    const double C46799 = 2 * C46778;
    const double C10357 =
        (((-4 * C46778) / C46772 -
          (C46770 * (C47988 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) /
              C46772) *
         ae) /
        C46772;
    const double C10358 =
        ((C47988 - (C46770 * 2 * C46778) / C46772) * ae) / C46772 -
        (0 * be) / (2 * std::pow(C46772, 2));
    const double C10359 =
        (-((C47988 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) / C46772) /
        (2 * C46772);
    const double C10360 = (0 * ae) / C46772 - C46778 / std::pow(C46772, 2);
    const double C31318 =
        -(((-4 * C46778) / C46772 -
           (C46770 * (C47988 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) /
               C46772) *
          be) /
        C46772;
    const double C31319 =
        (-(0 * be) / C46772) / (2 * C46772) -
        ((C47988 - (C46770 * 2 * C46778) / C46772) * be) / C46772;
    const double C31320 =
        (-((C47988 - (C46770 * 2 * C46778) / C46772) * 2 * C46771) / C46772) /
        (2 * C46772);
    const double C31321 =
        (-(2 * C46778) / C46772) / (2 * C46772) - (0 * be) / C46772;
    const double C42616 = ((0 * ae) / C46772 - C46778 / C46798) / (2 * C46772) -
                          (0 * be) / C46772;
    const double C141 = C113 * C117;
    const double C138 = C113 * C116;
    const double C323 = C113 * C290;
    const double C512 = C113 * C479;
    const double C4916 = C113 * C292;
    const double C4912 = C113 * C291;
    const double C5542 = C113 * C924;
    const double C139 = C114 * C123;
    const double C137 = C114 * C122;
    const double C326 = C114 * C301;
    const double C515 = C114 * C490;
    const double C42610 = C48075 / C47721;
    const double C10355 = C48074 / C46772;
    const double C42608 = C47988 / C47721 - (C48074 * C48040) / C46798;
    const double C42609 = C48074 / C46802 - (C48075 * C48040) / C46772;
    const double C31336 = C31316 * C131;
    const double C31327 = C31316 * C130;
    const double C37218 = C31316 * C311;
    const double C46841 = C46840 * C46830;
    const double C46903 = C46901 * ae;
    const double C930 =
        (C46827 * C46968 * C46904 + C46968 * C46901 * ae) / C46772;
    const double C293 = C46834 * C46892 + C46901 * C46978;
    const double C482 = C46834 * C46892 + C46901 * C46831;
    const double C925 = C46827 * C46968 * C46901;
    const double C1147 =
        2 * C46968 * C46901 + C46968 * (C46901 + C46923 * C46978);
    const double C1284 = C46827 * (C46901 + C46923 * C46978);
    const double C1999 =
        2 * C46827 * C46901 + C46827 * (C46901 + C46923 * C46831);
    const double C46999 = C46997 * ae;
    const double C1282 = C46968 * C46892 + C46997 * C46831;
    const double C2400 =
        2 * C46827 * C46997 + C46827 * (C46997 + C47160 * C46831);
    const double C47064 = C47062 * ae;
    const double C47063 = C47060 + C47061;
    const double C144 = C113 * C118;
    const double C320 = C113 * C289;
    const double C509 = C113 * C478;
    const double C5785 = C113 * C1148;
    const double C5956 = C113 * C1285;
    const double C46897 = C46896 + C46895;
    const double C142 = C114 * C124;
    const double C145 = C114 * C125;
    const double C321 = C114 * C299;
    const double C324 = C114 * C300;
    const double C327 = C114 * C302;
    const double C510 = C114 * C488;
    const double C513 = C114 * C489;
    const double C940 = C114 * C929;
    const double C1167 = C114 * C1154;
    const double C1313 = C114 * C1294;
    const double C46850 = C46849 * C46830;
    const double C46858 = C46857 * C46830;
    const double C46928 = C46843 + C46924;
    const double C46949 = 2 * C46945;
    const double C47016 = C46945 * C46978;
    const double C47100 = C46945 * C46831;
    const double C47099 = C46827 * C46945;
    const double C47098 = C46945 * ae;
    const double C47174 = C46968 * C46945;
    const double C47212 = C46843 + C47210;
    const double C47251 = C47245 * C46831;
    const double C47250 = C46827 * C47245;
    const double C47249 = C47245 * ae;
    const double C47397 = 2 * C47245;
    const double C47329 = C46843 + C47323;
    const double C47328 = C47322 * ae;
    const double C47499 = 2 * C47322;
    const double C47327 = C47320 + C47321;
    const double C46915 = C46902 + C46913;
    const double C46925 = 2 * C46921;
    const double C46989 = C46968 * C46921;
    const double C47049 = C46827 * C46921;
    const double C47094 = ae * C46921;
    const double C1153 =
        (2 * C46968 * C46904 + C46968 * (C46904 + C46921 * C46978)) / C46772;
    const double C1293 = (C46827 * (C46904 + C46921 * C46978) +
                          (C46901 + C46923 * C46978) * ae) /
                         C46772;
    const double C47008 = C46902 + C47006;
    const double C47079 = C47074 + C47075;
    const double C47161 = C46827 * C47159;
    const double C47207 = 2 * C47159;
    const double C47241 = ae * C47159;
    const double C47326 = 2 * C47316;
    const double C46870 = C46869 * C46830;
    const double C46953 = C46926 + C46951;
    const double C47226 = C47223 * C46978;
    const double C47270 = C46968 * C47223;
    const double C47356 = C46827 * C47223;
    const double C47399 = C46926 + C47395;
    const double C47460 = C46827 * C47454;
    const double C47504 = C47495 + C47496;
    const double C46914 = C46912 * ae;
    const double C119 = 3 * (C46892 + C46835 * C46846) +
                        C46834 * (2 * C46901 + C46834 * C46912);
    const double C294 = C46892 + C46835 * C46846 + C46912 * C46978;
    const double C295 = C46968 * (2 * C46901 + C46834 * C46912);
    const double C483 = C46892 + C46835 * C46846 + C46912 * C46831;
    const double C484 = C46827 * (2 * C46901 + C46834 * C46912);
    const double C926 = C46827 * C46968 * C46912;
    const double C46992 = C46990 * ae;
    const double C1281 = C46968 * C46901 + C46990 * C46831;
    const double C47053 = C47051 * ae;
    const double C47011 = C47009 * ae;
    const double C1149 = 3 * (C46892 + C46835 * C46978) +
                         C46968 * (2 * C46997 + C46968 * C47009);
    const double C1286 = C46892 + C46835 * C46978 + C47009 * C46831;
    const double C1696 = C46827 * (2 * C46997 + C46968 * C47009);
    const double C47084 = C47081 * ae;
    const double C2001 = 3 * (C46892 + C46835 * C46831) +
                         C46827 * (2 * C47062 + C46827 * C47081);
    const double C47165 = C47163 * ae;
    const double C329 = C114 * C303;
    const double C46952 = C46834 * C46950;
    const double C47025 = C46950 * C46978;
    const double C47123 = C46950 * C46831;
    const double C47122 = C46827 * C46950;
    const double C47121 = C46950 * ae;
    const double C47188 = C46968 * C46950;
    const double C47229 = C46945 + C47227;
    const double C47277 = C47271 * C46831;
    const double C47276 = C46827 * C47271;
    const double C47275 = C47271 * ae;
    const double C47365 = C46945 + C47359;
    const double C47364 = C47358 * ae;
    const double C47402 = C46968 * C47400;
    const double C47421 = C47400 * C46831;
    const double C47420 = C46827 * C47400;
    const double C47419 = C47400 * ae;
    const double C47467 = C47245 + C47463;
    const double C47466 = C47462 * ae;
    const double C47511 = C46827 * C47506;
    const double C47510 = C47506 * ae;
    const double C46933 = C46834 * C46931;
    const double C46941 = 3 * C46931;
    const double C46982 = C46968 * C46931;
    const double C47038 = C46827 * C46931;
    const double C47117 = ae * C46931;
    const double C47017 = C46921 + C47015;
    const double C47175 = C46827 * C47173;
    const double C47222 = 2 * C47173;
    const double C47267 = ae * C47173;
    const double C47362 = 2 * C47352;
    const double C47213 = C46968 * C47211;
    const double C47293 = C46827 * C47211;
    const double C47393 = 3 * C47211;
    const double C47415 = ae * C47211;
    const double C47458 = 2 * C47450;
    const double C105 = C48042 / C47721;
    const double C103 = C47716 / C47721 - (C48041 * C48005) / C46798;
    const double C104 = C48041 / C46802 - (C48042 * C48005) / C46772;
    const double C16117 = C48041 / C46772;
    const double C47742 = C47741 * C47735;
    const double C47749 = C47741 / C47748;
    const double C48011 = C47747 * C47741;
    const double C48009 = C47741 / C47730;
    const double C286 = (C47739 * std::pow(C47735, 2)) / C47733 + C47740;
    const double C47751 = C47750 * C47735;
    const double C48015 = C47732 * C47750;
    const double C48013 = 2 * C47750;
    const double C48059 = C47750 / C48017;
    const double C112 = C47750 / C48052;
    const double C2881 = C47750 / C47734;
    const double C48045 = C48010 / C47730;
    const double C287 = (-2 * C47747 * C48010) / C47730;
    const double C48076 = C48043 / C47733;
    const double C1072 = (C47767 * std::pow(C47822, 2)) / C47733 + C47821;
    const double C47824 = C47823 * C47822;
    const double C47829 = C47823 / C47748;
    const double C48023 = C47823 / C47730;
    const double C48020 = C47747 * C47823;
    const double C47831 = C47830 * C47822;
    const double C48029 = C47820 * C47830;
    const double C48028 = 2 * C47830;
    const double C48065 = C47830 / C48017;
    const double C1144 = C47830 / C48052;
    const double C2878 = C47830 / C47734;
    const double C48061 = C48025 / C47730;
    const double C1073 = (-2 * C47747 * C48025) / C47730;
    const double C48081 = C48053 / C47733;
    const double C1818 = (C47785 * std::pow(C47864, 2)) / C47733 + C47863;
    const double C47866 = C47865 * C47864;
    const double C47871 = C47865 / C47748;
    const double C48024 = C47865 / C47730;
    const double C48022 = C47747 * C47865;
    const double C47873 = C47872 * C47864;
    const double C48035 = C47862 * C47872;
    const double C48034 = 2 * C47872;
    const double C48071 = C47872 / C48017;
    const double C1997 = C47872 / C48052;
    const double C3780 = C47872 / C47734;
    const double C48067 = C48031 / C47730;
    const double C1819 = (-2 * C47747 * C48031) / C47730;
    const double C48083 = C48056 / C47733;
    const double C21589 = C48073 / C47721;
    const double C4753 = C48072 / C46772;
    const double C21587 = C47971 / C47721 - (C48072 * C48039) / C46798;
    const double C21588 = C48072 / C46802 - (C48073 * C48039) / C46772;
    const double C46801 = C46770 * C46799;
    const double C10376 = C10357 * C118;
    const double C10373 = C10357 * C117;
    const double C10364 = C10357 * C116;
    const double C10576 = C10357 * C289;
    const double C10563 = C10357 * C290;
    const double C10778 = C10357 * C478;
    const double C10765 = C10357 * C479;
    const double C25908 = C10357 * C292;
    const double C25902 = C10357 * C291;
    const double C26524 = C10357 * C924;
    const double C26760 = C10357 * C1148;
    const double C26932 = C10357 * C1285;
    const double C10377 = C10358 * C125;
    const double C10374 = C10358 * C124;
    const double C10365 = C10358 * C123;
    const double C10362 = C10358 * C122;
    const double C10577 = C10358 * C299;
    const double C10571 = C10358 * C303;
    const double C10568 = C10358 * C302;
    const double C10567 = C10358 * C301;
    const double C10564 = C10358 * C300;
    const double C10779 = C10358 * C488;
    const double C10769 = C10358 * C490;
    const double C10766 = C10358 * C489;
    const double C11296 = C10358 * C929;
    const double C11555 = C10358 * C1154;
    const double C11713 = C10358 * C1294;
    const double C10370 = C10359 * C478;
    const double C10367 = C10359 * C479;
    const double C25906 = C10359 * C1285;
    const double C25904 = C10359 * C924;
    const double C10371 = C10360 * C488;
    const double C10368 = C10360 * C489;
    const double C10363 = C10360 * C490;
    const double C10569 = C10360 * C1294;
    const double C10566 = C10360 * C929;
    const double C31337 = C31318 * C118;
    const double C31334 = C31318 * C117;
    const double C31325 = C31318 * C116;
    const double C31537 = C31318 * C289;
    const double C31524 = C31318 * C290;
    const double C31739 = C31318 * C478;
    const double C31726 = C31318 * C479;
    const double C37223 = C31318 * C292;
    const double C37217 = C31318 * C291;
    const double C37839 = C31318 * C924;
    const double C38075 = C31318 * C1148;
    const double C38247 = C31318 * C1285;
    const double C31338 = C31319 * C125;
    const double C31335 = C31319 * C124;
    const double C31326 = C31319 * C123;
    const double C31323 = C31319 * C122;
    const double C31538 = C31319 * C299;
    const double C31532 = C31319 * C303;
    const double C31529 = C31319 * C302;
    const double C31528 = C31319 * C301;
    const double C31525 = C31319 * C300;
    const double C31740 = C31319 * C488;
    const double C31730 = C31319 * C490;
    const double C31727 = C31319 * C489;
    const double C32257 = C31319 * C929;
    const double C32516 = C31319 * C1154;
    const double C32674 = C31319 * C1294;
    const double C31331 = C31320 * C478;
    const double C31328 = C31320 * C479;
    const double C37221 = C31320 * C1285;
    const double C37219 = C31320 * C924;
    const double C31332 = C31321 * C488;
    const double C31329 = C31321 * C489;
    const double C31324 = C31321 * C490;
    const double C31530 = C31321 * C1294;
    const double C31527 = C31321 * C929;
    const double C154 = C138 + C139;
    const double C4924 = C4912 + C326;
    const double C10375 = C10355 * C131;
    const double C10366 = C10355 * C130;
    const double C25903 = C10355 * C311;
    const double C132 =
        (2 * C46834 * C46841 +
         C46834 * (C46841 +
                   (C46836 * C46837 + C46831 * bs[5] * std::pow(C46829, 5)) *
                       C46830 * std::pow(C46834, 2))) /
        C46798;
    const double C310 = ((yP - yQ) * C46834 * C46841) / C46798;
    const double C312 =
        ((bs[2] * std::pow(C46825, 2) + C46831 * C46828 * C46832) * C46830 +
         C46841 * std::pow(yP - yQ, 2)) /
        C46798;
    const double C499 = (2 * ae * C46834 * C46832 * C46828 * C46886 +
                         C46827 * C46834 * C46841) /
                        C46798;
    const double C934 =
        (2 * ae * C46968 * C46894 + C46827 * C46968 * C46841) / C46798;
    const double C46906 = C46905 + C46903;
    const double C942 = C114 * C930;
    const double C10561 = C10360 * C930;
    const double C11299 = C10358 * C930;
    const double C31522 = C31321 * C930;
    const double C32260 = C31319 * C930;
    const double C328 = C113 * C293;
    const double C10570 = C10357 * C293;
    const double C31531 = C31318 * C293;
    const double C517 = C113 * C482;
    const double C10772 = C10357 * C482;
    const double C10762 = C10359 * C482;
    const double C31733 = C31318 * C482;
    const double C31723 = C31320 * C482;
    const double C941 = C113 * C925;
    const double C10560 = C10359 * C925;
    const double C11298 = C10357 * C925;
    const double C31521 = C31320 * C925;
    const double C32259 = C31318 * C925;
    const double C1426 = C113 * C1147;
    const double C11850 = C10357 * C1147;
    const double C32811 = C31318 * C1147;
    const double C1588 = C113 * C1284;
    const double C10573 = C10359 * C1284;
    const double C12056 = C10357 * C1284;
    const double C31534 = C31320 * C1284;
    const double C33017 = C31318 * C1284;
    const double C2292 = C113 * C1999;
    const double C10775 = C10359 * C1999;
    const double C12926 = C10357 * C1999;
    const double C31736 = C31320 * C1999;
    const double C33881 = C31318 * C1999;
    const double C47000 = C46998 + C46999;
    const double C5954 = C113 * C1282;
    const double C26522 = C10359 * C1282;
    const double C26928 = C10357 * C1282;
    const double C37837 = C31320 * C1282;
    const double C38243 = C31318 * C1282;
    const double C7303 = C113 * C2400;
    const double C26930 = C10359 * C2400;
    const double C28261 = C10357 * C2400;
    const double C38245 = C31320 * C2400;
    const double C39573 = C31318 * C2400;
    const double C47066 = ae * C47063;
    const double C47065 = C46827 * C47063;
    const double C47073 = 2 * C47063;
    const double C46898 = ae * C46897;
    const double C491 =
        (C46889 * C46890 * C46886 + C46827 * C46897 + C46827 * C46892 * ae) /
        C46772;
    const double C155 = C141 + C142;
    const double C156 = C144 + C145;
    const double C342 = C320 + C321;
    const double C343 = C323 + C324;
    const double C4925 = C4916 + C327;
    const double C531 = C509 + C510;
    const double C532 = C512 + C513;
    const double C5548 = C5542 + C940;
    const double C5793 = C5785 + C1167;
    const double C5965 = C5956 + C1313;
    const double C46975 = C46834 * C46850;
    const double C47072 = C46827 * C46850;
    const double C47158 = C46968 * C46850;
    const double C133 =
        (3 * (C46841 + C46850 * C46846) +
         C46834 * (2 * C46834 * C46850 +
                   C46834 * (C46850 + (C46844 * C46845 +
                                       C46831 * bs[6] * std::pow(C46825, 6)) *
                                          C46830 * C46846))) /
        C46798;
    const double C309 = ((yP - yQ) * (C46841 + C46850 * C46846)) / C46798;
    const double C313 =
        (C46834 * C46841 + C46834 * C46850 * std::pow(yP - yQ, 2)) / C46798;
    const double C498 =
        (2 * ae *
             (C46832 * C46828 * C46886 + C46837 * C46836 * C46886 * C46846) +
         C46827 * (C46841 + C46850 * C46846)) /
        C46798;
    const double C935 =
        (2 * ae * C46968 * C46904 + C46827 * C46968 * C46834 * C46850) / C46798;
    const double C1160 = (2 * C46968 * C46841 +
                          C46968 * (C46841 + C46850 * std::pow(C46968, 2))) /
                         C46798;
    const double C1303 = (2 * ae * (C46894 + C46902 * C46978) +
                          C46827 * (C46841 + C46850 * C46978)) /
                         C46798;
    const double C46859 = C46858 * C46846;
    const double C46862 = C46834 * C46858;
    const double C47200 = C46858 * C46978;
    const double C47242 = C46968 * C46858;
    const double C47317 = C46827 * C46858;
    const double C1161 =
        (3 * (C46841 + C46850 * C46978) +
         C46968 * (2 * C46968 * C46850 + C46968 * (C46850 + C46858 * C46978))) /
        C46798;
    const double C46930 = C46834 * C46928;
    const double C46944 = 3 * C46928;
    const double C46983 = C46968 * C46928;
    const double C47040 = C46827 * C46928;
    const double C47039 = C46928 * ae;
    const double C1146 =
        2 * C46968 * C46912 + C46968 * (C46912 + C46928 * C46978);
    const double C1283 = C46827 * (C46912 + C46928 * C46978);
    const double C1998 =
        2 * C46827 * C46912 + C46827 * (C46912 + C46928 * C46831);
    const double C47018 = C46923 + C47016;
    const double C47104 = C46923 + C47100;
    const double C47103 = C47099 * ae;
    const double C47360 = 2 * C47099;
    const double C47102 = C47097 + C47098;
    const double C47177 = C46827 * C47174;
    const double C47176 = C47174 * ae;
    const double C47224 = 2 * C47174;
    const double C2401 =
        2 * C46827 * C46990 + C46827 * (C46990 + C47174 * C46831);
    const double C47214 = C46968 * C47212;
    const double C47295 = C46827 * C47212;
    const double C47294 = C47212 * ae;
    const double C47396 = 3 * C47212;
    const double C7296 =
        2 * C46827 * C47009 + C46827 * (C47009 + C47212 * C46831);
    const double C47255 = C47160 + C47251;
    const double C47254 = C47250 * ae;
    const double C47456 = 2 * C47250;
    const double C47253 = C47248 + C47249;
    const double C47333 = C46827 * C47329;
    const double C47332 = C47329 * ae;
    const double C47500 = 3 * C47329;
    const double C47334 = ae * C47327;
    const double C47331 = C46827 * C47327;
    const double C47494 = 2 * C47327;
    const double C46916 = C46827 * C46915;
    const double C126 = (3 * (C46894 + C46902 * C46846) +
                         C46834 * (2 * C46904 + C46834 * C46915)) /
                        C46772;
    const double C304 = (C46894 + C46902 * C46846 + C46915 * C46978) / C46772;
    const double C305 = (C46968 * (2 * C46904 + C46834 * C46915)) / C46772;
    const double C494 = (C46827 * (2 * C46904 + C46834 * C46915) +
                         (2 * C46901 + C46834 * C46912) * ae) /
                        C46772;
    const double C931 =
        (C46827 * C46968 * C46915 + C46968 * C46912 * ae) / C46772;
    const double C1152 =
        (2 * C46968 * C46915 + C46968 * (C46915 + C46931 * C46978)) / C46772;
    const double C1292 = (C46827 * (C46915 + C46931 * C46978) +
                          (C46912 + C46928 * C46978) * ae) /
                         C46772;
    const double C46991 = C46827 * C46989;
    const double C47052 = C47049 + C47050;
    const double C47101 = 2 * C47094;
    const double C1166 = C114 * C1153;
    const double C11553 = C10358 * C1153;
    const double C32514 = C31319 * C1153;
    const double C1312 = C114 * C1293;
    const double C10574 = C10360 * C1293;
    const double C11711 = C10358 * C1293;
    const double C31535 = C31321 * C1293;
    const double C32672 = C31319 * C1293;
    const double C47010 = C46827 * C47008;
    const double C1702 =
        (2 * ae * (2 * C46996 + C46968 * C47008) +
         C46827 * (2 * C46968 * C46850 + C46968 * (C46850 + C46858 * C46978))) /
        C46798;
    const double C1155 = (3 * (C46894 + C46902 * C46978) +
                          C46968 * (2 * C46996 + C46968 * C47008)) /
                         C46772;
    const double C1699 = (C46827 * (2 * C46996 + C46968 * C47008) +
                          (2 * C46997 + C46968 * C47009) * ae) /
                         C46772;
    const double C47085 = ae * C47079;
    const double C47083 = C46827 * C47079;
    const double C47319 = 2 * C47079;
    const double C47164 = C47161 + C47162;
    const double C47246 = 2 * C47241;
    const double C46871 = C46870 * C46846;
    const double C47203 = C46834 * C46870;
    const double C47388 = C46870 * C46978;
    const double C47451 = C46968 * C46870;
    const double C47491 = C46827 * C46870;
    const double C46955 = C46834 * C46953;
    const double C47024 = C46953 * C46978;
    const double C47120 = C46827 * C46953;
    const double C47187 = C46968 * C46953;
    const double C47228 = C46942 + C47226;
    const double C47274 = C46827 * C47270;
    const double C47363 = C47356 + C47357;
    const double C47401 = C46968 * C47399;
    const double C47418 = C46827 * C47399;
    const double C47465 = C47460 + C47461;
    const double C47512 = ae * C47504;
    const double C47509 = C46827 * C47504;
    const double C147 = C113 * C119;
    const double C10385 = C10357 * C119;
    const double C31346 = C31318 * C119;
    const double C331 = C113 * C294;
    const double C10585 = C10357 * C294;
    const double C31546 = C31318 * C294;
    const double C334 = C113 * C295;
    const double C10950 = C10357 * C295;
    const double C31911 = C31318 * C295;
    const double C520 = C113 * C483;
    const double C10787 = C10357 * C483;
    const double C10781 = C10359 * C483;
    const double C31748 = C31318 * C483;
    const double C31742 = C31320 * C483;
    const double C523 = C113 * C484;
    const double C10379 = C10359 * C484;
    const double C11092 = C10357 * C484;
    const double C31340 = C31320 * C484;
    const double C32053 = C31318 * C484;
    const double C944 = C113 * C926;
    const double C10579 = C10359 * C926;
    const double C11307 = C10357 * C926;
    const double C31540 = C31320 * C926;
    const double C32268 = C31318 * C926;
    const double C2174 = C113 * C1281;
    const double C11301 = C10359 * C1281;
    const double C12784 = C10357 * C1281;
    const double C32262 = C31320 * C1281;
    const double C33739 = C31318 * C1281;
    const double C5789 = C113 * C1149;
    const double C26766 = C10357 * C1149;
    const double C38081 = C31318 * C1149;
    const double C5960 = C113 * C1286;
    const double C26938 = C10357 * C1286;
    const double C26934 = C10359 * C1286;
    const double C38253 = C31318 * C1286;
    const double C38249 = C31320 * C1286;
    const double C6445 = C113 * C1696;
    const double C26762 = C10359 * C1696;
    const double C27416 = C10357 * C1696;
    const double C38077 = C31320 * C1696;
    const double C38731 = C31318 * C1696;
    const double C46954 = C46949 + C46952;
    const double C47027 = C46928 + C47025;
    const double C47127 = C46928 + C47123;
    const double C47126 = C47122 * ae;
    const double C47191 = C46827 * C47188;
    const double C47190 = C47188 * ae;
    const double C47231 = C46968 * C47229;
    const double C47306 = C46827 * C47229;
    const double C47305 = C47229 * ae;
    const double C47281 = C47174 + C47277;
    const double C47280 = C47276 * ae;
    const double C47369 = C46827 * C47365;
    const double C47368 = C47365 * ae;
    const double C47404 = C47397 + C47402;
    const double C47425 = C47212 + C47421;
    const double C47424 = C47420 * ae;
    const double C47471 = C46827 * C47467;
    const double C47470 = C47467 * ae;
    const double C47515 = C47499 + C47511;
    const double C46935 = C46925 + C46933;
    const double C46984 = C46827 * C46982;
    const double C47124 = 2 * C47117;
    const double C47019 = C46827 * C47017;
    const double C1156 = (3 * (C46904 + C46921 * C46978) +
                          C46968 * (2 * C46989 + C46968 * C47017)) /
                         C46772;
    const double C47272 = 2 * C47267;
    const double C47215 = C47207 + C47213;
    const double C47422 = 2 * C47415;
    const double C47743 = C47742 / C47733;
    const double C48046 = 2 * C48011;
    const double C47752 = C47751 / C47730;
    const double C48050 = C48015 / C47748;
    const double C48077 = C48009 - C48045;
    const double C2618 = -C48045;
    const double C48091 = C48076 + C47740;
    const double C47825 = C47824 / C47733;
    const double C48054 = 2 * C48020;
    const double C47832 = C47831 / C47730;
    const double C48064 = C48029 / C47748;
    const double C48085 = C48023 - C48061;
    const double C2510 = -C48061;
    const double C48094 = C48081 + C47821;
    const double C47867 = C47866 / C47733;
    const double C48057 = 2 * C48022;
    const double C47874 = C47873 / C47730;
    const double C48070 = C48035 / C47748;
    const double C48088 = C48024 - C48067;
    const double C3272 = -C48067;
    const double C48095 = C48083 + C47863;
    const double C46803 = C46801 / C46772;
    const double C10394 = C10376 + C10377;
    const double C10393 = C10373 + C10374;
    const double C10390 = C10364 + C10365;
    const double C10596 = C10576 + C10577;
    const double C25913 = C25908 + C10568;
    const double C25910 = C25902 + C10567;
    const double C10593 = C10563 + C10564;
    const double C10798 = C10778 + C10779;
    const double C10795 = C10765 + C10766;
    const double C26527 = C26524 + C11296;
    const double C26770 = C26760 + C11555;
    const double C26944 = C26932 + C11713;
    const double C10392 = C10370 + C10371;
    const double C10391 = C10367 + C10368;
    const double C25912 = C25906 + C10569;
    const double C25911 = C25904 + C10566;
    const double C31355 = C31337 + C31338;
    const double C31354 = C31334 + C31335;
    const double C31351 = C31325 + C31326;
    const double C31557 = C31537 + C31538;
    const double C37228 = C37223 + C31529;
    const double C37225 = C37217 + C31528;
    const double C31554 = C31524 + C31525;
    const double C31759 = C31739 + C31740;
    const double C31756 = C31726 + C31727;
    const double C37842 = C37839 + C32257;
    const double C38085 = C38075 + C32516;
    const double C38259 = C38247 + C32674;
    const double C31353 = C31331 + C31332;
    const double C31352 = C31328 + C31329;
    const double C37227 = C37221 + C31530;
    const double C37226 = C37219 + C31527;
    const double C159 = C154 + C139;
    const double C4926 = C4924 + C326;
    const double C146 = C47988 * C132;
    const double C10378 = C10355 * C132;
    const double C31339 = C31316 * C132;
    const double C325 = C47988 * C310;
    const double C10565 = C10355 * C310;
    const double C31526 = C31316 * C310;
    const double C4917 = C47988 * C312;
    const double C25909 = C10355 * C312;
    const double C37224 = C31316 * C312;
    const double C514 = C47988 * C499;
    const double C10369 = C48075 * C499;
    const double C10767 = C10355 * C499;
    const double C31330 = C48075 * C499;
    const double C31728 = C31316 * C499;
    const double C5543 = C47988 * C934;
    const double C25905 = C48075 * C934;
    const double C26525 = C10355 * C934;
    const double C37220 = C48075 * C934;
    const double C37840 = C31316 * C934;
    const double C46907 = ae * C46906;
    const double C492 =
        (C46834 * C46894 + C46827 * C46906 + C46827 * C46901 * ae) / C46772;
    const double C344 = C328 + C329;
    const double C10594 = C10570 + C10571;
    const double C31555 = C31531 + C31532;
    const double C951 = C941 + C942;
    const double C10592 = C10560 + C10561;
    const double C11312 = C11298 + C11299;
    const double C31553 = C31521 + C31522;
    const double C32273 = C32259 + C32260;
    const double C47001 = ae * C47000;
    const double C1291 =
        (C46968 * C46894 + C46827 * C47000 + C46827 * C46997 * ae) / C46772;
    const double C47067 = C46894 + C47065;
    const double C501 =
        ((C46892 + C46831 * C46828 * C46832) * C46830 + C46898 + C46898 +
         C46827 * (2 * ae * C46894 + C46827 * C46841)) /
        C46798;
    const double C516 = C114 * C491;
    const double C10770 = C10358 * C491;
    const double C10768 = C10360 * C491;
    const double C31731 = C31319 * C491;
    const double C31729 = C31321 * C491;
    const double C42620 = C42616 * C491;
    const double C160 = C155 + C142;
    const double C161 = C156 + C145;
    const double C348 = C342 + C321;
    const double C349 = C343 + C324;
    const double C4927 = C4925 + C327;
    const double C537 = C531 + C510;
    const double C538 = C532 + C513;
    const double C5549 = C5548 + C940;
    const double C5796 = C5793 + C1167;
    const double C5969 = C5965 + C1313;
    const double C47082 = C47078 + C47072;
    const double C149 = C47988 * C133;
    const double C10387 = C10355 * C133;
    const double C31348 = C31316 * C133;
    const double C322 = C47988 * C309;
    const double C10578 = C10355 * C309;
    const double C31539 = C31316 * C309;
    const double C330 = C47988 * C313;
    const double C10572 = C10355 * C313;
    const double C31533 = C31316 * C313;
    const double C511 = C47988 * C498;
    const double C10372 = C48075 * C498;
    const double C10780 = C10355 * C498;
    const double C31333 = C48075 * C498;
    const double C31741 = C31316 * C498;
    const double C943 = C47988 * C935;
    const double C10562 = C48075 * C935;
    const double C11300 = C10355 * C935;
    const double C31523 = C48075 * C935;
    const double C32261 = C31316 * C935;
    const double C5786 = C47988 * C1160;
    const double C26761 = C10355 * C1160;
    const double C38076 = C31316 * C1160;
    const double C5957 = C47988 * C1303;
    const double C25907 = C48075 * C1303;
    const double C26933 = C10355 * C1303;
    const double C37222 = C48075 * C1303;
    const double C38248 = C31316 * C1303;
    const double C46860 = C46850 + C46859;
    const double C46866 = 2 * C46862;
    const double C47095 = C46827 * C46862;
    const double C47172 = C46968 * C46862;
    const double C1159 = (2 * C46968 * C46975 +
                          C46968 * (C46975 + C46862 * std::pow(C46968, 2))) /
                         C46798;
    const double C1162 =
        (3 * (C46975 + C46862 * C46978) +
         C46968 * (2 * C46968 * C46862 +
                   C46968 * (C46862 + C46834 * C46870 * C46978))) /
        C46798;
    const double C1302 = (2 * ae * (C46904 + C46921 * C46978) +
                          C46827 * (C46975 + C46862 * C46978)) /
                         C46798;
    const double C1703 =
        (2 * ae * (2 * C46989 + C46968 * C47017) +
         C46827 * (2 * C46968 * C46862 +
                   C46968 * (C46862 + C46834 * C46870 * C46978))) /
        C46798;
    const double C47201 = C46850 + C47200;
    const double C47247 = C46827 * C47242;
    const double C47387 = 2 * C47242;
    const double C47330 = C47326 + C47317;
    const double C5790 = C47988 * C1161;
    const double C26767 = C10355 * C1161;
    const double C38082 = C31316 * C1161;
    const double C46932 = C46927 + C46930;
    const double C46985 = C46983 * ae;
    const double C1280 = C46968 * C46912 + C46983 * C46831;
    const double C2402 =
        2 * C46827 * C46983 + C46827 * (C46983 + C47188 * C46831);
    const double C47042 = C47040 * ae;
    const double C47041 = C47038 + C47039;
    const double C1424 = C113 * C1146;
    const double C1586 = C113 * C1283;
    const double C10582 = C10359 * C1283;
    const double C31543 = C31320 * C1283;
    const double C2290 = C113 * C1998;
    const double C10784 = C10359 * C1998;
    const double C31745 = C31320 * C1998;
    const double C47020 = C47018 * ae;
    const double C1700 = (C46827 * (2 * C46989 + C46968 * C47017) +
                          (2 * C46990 + C46968 * C47018) * ae) /
                         C46772;
    const double C1150 = 3 * (C46901 + C46923 * C46978) +
                         C46968 * (2 * C46990 + C46968 * C47018);
    const double C1287 = C46901 + C46923 * C46978 + C47018 * C46831;
    const double C1697 = C46827 * (2 * C46990 + C46968 * C47018);
    const double C7297 =
        2 * C46827 * C47018 + C46827 * (C47018 + C47229 * C46831);
    const double C47107 = C47104 * ae;
    const double C2002 = 3 * (C46901 + C46923 * C46831) +
                         C46827 * (2 * C47051 + C46827 * C47104);
    const double C47108 = ae * C47102;
    const double C47106 = C46827 * C47102;
    const double C47355 = 2 * C47102;
    const double C47179 = C47177 * ae;
    const double C47178 = C47175 + C47176;
    const double C7160 = C113 * C2401;
    const double C12782 = C10359 * C2401;
    const double C33737 = C31320 * C2401;
    const double C47216 = C47209 + C47214;
    const double C47297 = C47295 * ae;
    const double C47296 = C47293 + C47294;
    const double C23436 = C113 * C7296;
    const double C26936 = C10359 * C7296;
    const double C38251 = C31320 * C7296;
    const double C47257 = C47255 * ae;
    const double C6825 = 3 * (C46997 + C47160 * C46831) +
                         C46827 * (2 * C47163 + C46827 * C47255);
    const double C47258 = ae * C47253;
    const double C47256 = C46827 * C47253;
    const double C47453 = 2 * C47253;
    const double C47337 = C47324 + C47333;
    const double C47489 = C46858 + C47334;
    const double C47336 = C46911 + C47331;
    const double C46917 = C46916 + C46914;
    const double C148 = C114 * C126;
    const double C10386 = C10358 * C126;
    const double C31347 = C31319 * C126;
    const double C332 = C114 * C304;
    const double C10586 = C10358 * C304;
    const double C31547 = C31319 * C304;
    const double C335 = C114 * C305;
    const double C10589 = C10358 * C305;
    const double C31550 = C31319 * C305;
    const double C524 = C114 * C494;
    const double C10380 = C10360 * C494;
    const double C10791 = C10358 * C494;
    const double C31341 = C31321 * C494;
    const double C31752 = C31319 * C494;
    const double C945 = C114 * C931;
    const double C10580 = C10360 * C931;
    const double C11308 = C10358 * C931;
    const double C31541 = C31321 * C931;
    const double C32269 = C31319 * C931;
    const double C1165 = C114 * C1152;
    const double C11852 = C10358 * C1152;
    const double C32813 = C31319 * C1152;
    const double C1311 = C114 * C1292;
    const double C10583 = C10360 * C1292;
    const double C12058 = C10358 * C1292;
    const double C31544 = C31321 * C1292;
    const double C33019 = C31319 * C1292;
    const double C46993 = C46991 + C46992;
    const double C47055 = ae * C47052;
    const double C47054 = C46827 * C47052;
    const double C47096 = 2 * C47052;
    const double C1430 = C1426 + C1166;
    const double C11855 = C11850 + C11553;
    const double C32816 = C32811 + C32514;
    const double C1592 = C1588 + C1312;
    const double C10595 = C10573 + C10574;
    const double C12061 = C12056 + C11711;
    const double C31556 = C31534 + C31535;
    const double C33022 = C33017 + C32672;
    const double C47012 = C47010 + C47011;
    const double C6446 = C47988 * C1702;
    const double C26763 = C48075 * C1702;
    const double C27417 = C10355 * C1702;
    const double C38078 = C48075 * C1702;
    const double C38732 = C31316 * C1702;
    const double C1168 = C114 * C1155;
    const double C11556 = C10358 * C1155;
    const double C32517 = C31319 * C1155;
    const double C1706 = C114 * C1699;
    const double C11554 = C10360 * C1699;
    const double C12196 = C10358 * C1699;
    const double C32515 = C31321 * C1699;
    const double C33157 = C31319 * C1699;
    const double C47315 = C46850 + C47085;
    const double C47086 = C46902 + C47083;
    const double C47167 = ae * C47164;
    const double C47166 = C46827 * C47164;
    const double C47243 = 2 * C47164;
    const double C46872 = C46858 + C46871;
    const double C47204 = C47203 * C46978;
    const double C47268 = C46968 * C47203;
    const double C47353 = C46827 * C47203;
    const double C47389 = C46858 + C47388;
    const double C47459 = C46827 * C47451;
    const double C47508 = C47503 + C47491;
    const double C46957 = C46947 + C46955;
    const double C47026 = C46931 + C47024;
    const double C47125 = C47120 + C47121;
    const double C47189 = C46827 * C47187;
    const double C47230 = C46968 * C47228;
    const double C47304 = C46827 * C47228;
    const double C47279 = C47274 + C47275;
    const double C47370 = ae * C47363;
    const double C47367 = C46827 * C47363;
    const double C47403 = C47394 + C47401;
    const double C47423 = C47418 + C47419;
    const double C47472 = ae * C47465;
    const double C47469 = C46827 * C47465;
    const double C47514 = C46926 + C47509;
    const double C46956 = C46834 * C46954;
    const double C47141 = C46968 * C46954;
    const double C47149 = C46827 * C46954;
    const double C47148 = C46954 * ae;
    const double C47029 = C47027 * ae;
    const double C1151 = 3 * (C46912 + C46928 * C46978) +
                         C46968 * (2 * C46983 + C46968 * C47027);
    const double C1288 = C46912 + C46928 * C46978 + C47027 * C46831;
    const double C1698 = C46827 * (2 * C46983 + C46968 * C47027);
    const double C47130 = C47127 * ae;
    const double C2003 = 3 * (C46912 + C46928 * C46831) +
                         C46827 * (2 * C47040 + C46827 * C47127);
    const double C47193 = C47191 * ae;
    const double C47233 = C47224 + C47231;
    const double C47308 = C47306 * ae;
    const double C47283 = C47281 * ae;
    const double C6826 = 3 * (C46990 + C47174 * C46831) +
                         C46827 * (2 * C47177 + C46827 * C47281);
    const double C47373 = C47360 + C47369;
    const double C47406 = C46968 * C47404;
    const double C47440 = C46827 * C47404;
    const double C47439 = C47404 * ae;
    const double C47428 = C47425 * ae;
    const double C23086 = 3 * (C47009 + C47212 * C46831) +
                          C46827 * (2 * C47295 + C46827 * C47425);
    const double C47475 = C47456 + C47471;
    const double C47519 = C46827 * C47515;
    const double C47518 = C47515 * ae;
    const double C46936 = C46827 * C46935;
    const double C127 = (4 * (2 * C46904 + C46834 * C46915) +
                         C46834 * (3 * C46915 + C46834 * C46935)) /
                        C46772;
    const double C306 =
        (2 * C46904 + C46834 * C46915 + C46935 * C46978) / C46772;
    const double C307 = (C46968 * (3 * C46915 + C46834 * C46935)) / C46772;
    const double C1169 = C114 * C1156;
    const double C11558 = C10358 * C1156;
    const double C32519 = C31319 * C1156;
    const double C47217 = C46827 * C47215;
    const double C5780 = (4 * (2 * C46996 + C46968 * C47008) +
                          C46968 * (3 * C47008 + C46968 * C47215)) /
                         C46772;
    const double C47744 = C47740 - C47743;
    const double C48078 = C48046 / C47730;
    const double C47753 = C47749 - C47752;
    const double C48092 = C48077 / C47734;
    const double C47826 = C47821 - C47825;
    const double C48082 = C48054 / C47730;
    const double C47833 = C47829 - C47832;
    const double C48096 = C48085 / C47734;
    const double C47868 = C47863 - C47867;
    const double C48084 = C48057 / C47730;
    const double C47875 = C47871 - C47874;
    const double C48098 = C48088 / C47734;
    const double C46804 = C47988 - C46803;
    const double C10402 = C10394 + C10377;
    const double C10401 = C10393 + C10374;
    const double C10398 = C10390 + C10365;
    const double C10604 = C10596 + C10577;
    const double C25917 = C25913 + C10568;
    const double C25914 = C25910 + C10567;
    const double C10601 = C10593 + C10564;
    const double C10806 = C10798 + C10779;
    const double C10803 = C10795 + C10766;
    const double C26529 = C26527 + C11296;
    const double C26774 = C26770 + C11555;
    const double C26950 = C26944 + C11713;
    const double C10400 = C10392 + C10371;
    const double C10399 = C10391 + C10368;
    const double C25916 = C25912 + C10569;
    const double C25915 = C25911 + C10566;
    const double C31363 = C31355 + C31338;
    const double C31362 = C31354 + C31335;
    const double C31359 = C31351 + C31326;
    const double C31565 = C31557 + C31538;
    const double C37232 = C37228 + C31529;
    const double C37229 = C37225 + C31528;
    const double C31562 = C31554 + C31525;
    const double C31767 = C31759 + C31740;
    const double C31764 = C31756 + C31727;
    const double C37844 = C37842 + C32257;
    const double C38089 = C38085 + C32516;
    const double C38265 = C38259 + C32674;
    const double C31361 = C31353 + C31332;
    const double C31360 = C31352 + C31329;
    const double C37231 = C37227 + C31530;
    const double C37230 = C37226 + C31527;
    const double C164 = C159 + C140;
    const double C4928 = C4926 + C4913;
    const double C502 =
        (C46834 * C46841 + C46907 + C46907 +
         C46827 * (2 * ae * C46904 + C46827 * C46834 * C46850)) /
        C46798;
    const double C518 = C114 * C492;
    const double C10773 = C10358 * C492;
    const double C10763 = C10360 * C492;
    const double C31734 = C31319 * C492;
    const double C31724 = C31321 * C492;
    const double C42621 = C42616 * C492;
    const double C350 = C344 + C329;
    const double C10602 = C10594 + C10571;
    const double C31563 = C31555 + C31532;
    const double C954 = C951 + C942;
    const double C10600 = C10592 + C10561;
    const double C11316 = C11312 + C11299;
    const double C31561 = C31553 + C31522;
    const double C32277 = C32273 + C32260;
    const double C1300 =
        (C46968 * C46841 + C47001 + C47001 +
         C46827 * (2 * ae * C46996 + C46827 * C46968 * C46850)) /
        C46798;
    const double C1310 = C114 * C1291;
    const double C11297 = C10360 * C1291;
    const double C11709 = C10358 * C1291;
    const double C32258 = C31321 * C1291;
    const double C32670 = C31319 * C1291;
    const double C42743 = C42616 * C1291;
    const double C47068 = C47067 + C47064;
    const double C165 = C160 + C143;
    const double C166 = C161 + C146;
    const double C355 = C349 + C325;
    const double C4929 = C4927 + C4917;
    const double C544 = C538 + C514;
    const double C5550 = C5549 + C5543;
    const double C354 = C348 + C322;
    const double C543 = C537 + C511;
    const double C5799 = C5796 + C5786;
    const double C5973 = C5969 + C5957;
    const double C134 =
        (4 * (2 * C46834 * C46850 + C46834 * C46860) +
         C46834 * (3 * C46860 +
                   C46834 * (2 * C46834 * C46858 +
                             C46834 * (C46858 +
                                       (C46853 * C46854 +
                                        C46831 * bs[7] * std::pow(C46829, 7)) *
                                           C46830 * C46846)))) /
        C46798;
    const double C314 =
        (C46841 + C46850 * C46846 + C46860 * std::pow(yP - yQ, 2)) / C46798;
    const double C315 =
        ((yP - yQ) * (2 * C46834 * C46850 + C46834 * C46860)) / C46798;
    const double C504 = (2 * ae * (2 * C46904 + C46834 * C46915) +
                         C46827 * (2 * C46834 * C46850 + C46834 * C46860)) /
                        C46798;
    const double C936 =
        (2 * ae * C46968 * C46915 + C46827 * C46968 * C46860) / C46798;
    const double C47105 = C47101 + C47095;
    const double C1427 = C47988 * C1159;
    const double C11851 = C10355 * C1159;
    const double C32812 = C31316 * C1159;
    const double C5788 = C47988 * C1162;
    const double C1589 = C47988 * C1302;
    const double C10575 = C48075 * C1302;
    const double C12057 = C10355 * C1302;
    const double C31536 = C48075 * C1302;
    const double C33018 = C31316 * C1302;
    const double C6303 = C47988 * C1703;
    const double C11849 = C48075 * C1703;
    const double C32810 = C48075 * C1703;
    const double C5782 =
        (4 * (2 * C47158 + C46968 * C47201) +
         C46968 *
             (3 * C47201 + C46968 * (2 * C46968 * C46858 +
                                     C46968 * (C46858 + C46870 * C46978)))) /
        C46798;
    const double C6442 =
        (2 * ae * (3 * C47008 + C46968 * C47215) +
         C46827 *
             (3 * C47201 + C46968 * (2 * C46968 * C46858 +
                                     C46968 * (C46858 + C46870 * C46978)))) /
        C46798;
    const double C47252 = C47246 + C47247;
    const double C47335 = C46827 * C47330;
    const double C47488 = 2 * C47330;
    const double C46934 = C46932 * ae;
    const double C496 = (C46827 * (3 * C46915 + C46834 * C46935) +
                         (3 * C46912 + C46834 * C46932) * ae) /
                        C46772;
    const double C932 =
        (C46827 * C46968 * C46935 + C46968 * C46932 * ae) / C46772;
    const double C120 = 4 * (2 * C46901 + C46834 * C46912) +
                        C46834 * (3 * C46912 + C46834 * C46932);
    const double C296 = 2 * C46901 + C46834 * C46912 + C46932 * C46978;
    const double C297 = C46968 * (3 * C46912 + C46834 * C46932);
    const double C485 = 2 * C46901 + C46834 * C46912 + C46932 * C46831;
    const double C486 = C46827 * (3 * C46912 + C46834 * C46932);
    const double C927 = C46827 * C46968 * C46932;
    const double C1420 =
        2 * C46968 * C46932 + C46968 * (C46932 + C46954 * C46978);
    const double C1582 = C46827 * (C46932 + C46954 * C46978);
    const double C2286 =
        2 * C46827 * C46932 + C46827 * (C46932 + C46954 * C46831);
    const double C46986 = C46984 + C46985;
    const double C2172 = C113 * C1280;
    const double C11304 = C10359 * C1280;
    const double C32265 = C31320 * C1280;
    const double C47044 = ae * C47041;
    const double C47043 = C46827 * C47041;
    const double C47119 = 2 * C47041;
    const double C47021 = C47019 + C47020;
    const double C1707 = C114 * C1700;
    const double C11552 = C10360 * C1700;
    const double C12198 = C10358 * C1700;
    const double C32513 = C31321 * C1700;
    const double C33159 = C31319 * C1700;
    const double C5787 = C113 * C1150;
    const double C5958 = C113 * C1287;
    const double C12054 = C10359 * C1287;
    const double C33015 = C31320 * C1287;
    const double C6302 = C113 * C1697;
    const double C11848 = C10359 * C1697;
    const double C32809 = C31320 * C1697;
    const double C12924 = C10359 * C2002;
    const double C33879 = C31320 * C2002;
    const double C47351 = C46862 + C47108;
    const double C47109 = C46921 + C47106;
    const double C47181 = ae * C47178;
    const double C47180 = C46827 * C47178;
    const double C47269 = 2 * C47178;
    const double C47218 = C47216 * ae;
    const double C6440 = (C46827 * (3 * C47008 + C46968 * C47215) +
                          (3 * C47009 + C46968 * C47216) * ae) /
                         C46772;
    const double C5778 = 4 * (2 * C46997 + C46968 * C47009) +
                         C46968 * (3 * C47009 + C46968 * C47216);
    const double C5947 = 2 * C46997 + C46968 * C47009 + C47216 * C46831;
    const double C6438 = C46827 * (3 * C47009 + C46968 * C47216);
    const double C23432 =
        2 * C46827 * C47216 + C46827 * (C47216 + C47404 * C46831);
    const double C47299 = ae * C47296;
    const double C47298 = C46827 * C47296;
    const double C47417 = 2 * C47296;
    const double C28259 = C10359 * C6825;
    const double C39571 = C31320 * C6825;
    const double C47449 = C47242 + C47258;
    const double C47259 = C47159 + C47256;
    const double C47340 = C47337 * ae;
    const double C12573 = 4 * (2 * C47062 + C46827 * C47081) +
                          C46827 * (3 * C47081 + C46827 * C47337);
    const double C47502 = C47489 + C47334;
    const double C47339 = C47336 + C47328;
    const double C46918 = ae * C46917;
    const double C493 =
        (C46894 + C46902 * C46846 + C46827 * C46917 + C46827 * C46912 * ae) /
        C46772;
    const double C157 = C147 + C148;
    const double C10397 = C10385 + C10386;
    const double C31358 = C31346 + C31347;
    const double C345 = C331 + C332;
    const double C10599 = C10585 + C10586;
    const double C31560 = C31546 + C31547;
    const double C346 = C334 + C335;
    const double C10955 = C10950 + C10589;
    const double C31916 = C31911 + C31550;
    const double C535 = C523 + C524;
    const double C10395 = C10379 + C10380;
    const double C11097 = C11092 + C10791;
    const double C31356 = C31340 + C31341;
    const double C32058 = C32053 + C31752;
    const double C952 = C944 + C945;
    const double C10597 = C10579 + C10580;
    const double C11315 = C11307 + C11308;
    const double C31558 = C31540 + C31541;
    const double C32276 = C32268 + C32269;
    const double C1429 = C1424 + C1165;
    const double C1591 = C1586 + C1311;
    const double C10598 = C10582 + C10583;
    const double C31559 = C31543 + C31544;
    const double C46994 = ae * C46993;
    const double C1290 =
        (C46968 * C46904 + C46827 * C46993 + C46827 * C46990 * ae) / C46772;
    const double C47056 = C46904 + C47054;
    const double C1432 = C1430 + C1166;
    const double C11857 = C11855 + C11553;
    const double C32818 = C32816 + C32514;
    const double C1594 = C1592 + C1312;
    const double C10603 = C10595 + C10574;
    const double C12063 = C12061 + C11711;
    const double C31564 = C31556 + C31535;
    const double C33024 = C33022 + C32672;
    const double C47013 = ae * C47012;
    const double C1295 =
        (C46894 + C46902 * C46978 + C46827 * C47012 + C46827 * C47009 * ae) /
        C46772;
    const double C5795 = C5789 + C1168;
    const double C26773 = C26766 + C11556;
    const double C38088 = C38081 + C32517;
    const double C6449 = C6445 + C1706;
    const double C26771 = C26762 + C11554;
    const double C27421 = C27416 + C12196;
    const double C38086 = C38077 + C32515;
    const double C38736 = C38731 + C33157;
    const double C47325 = C47315 + C47085;
    const double C47087 = C47086 + C47080;
    const double C47168 = C46996 + C47166;
    const double C46873 = C46834 * C46872;
    const double C47118 = C46827 * C46872;
    const double C47186 = C46968 * C46872;
    const double C1158 = (2 * C46968 * C46860 +
                          C46968 * (C46860 + C46872 * std::pow(C46968, 2))) /
                         C46798;
    const double C1163 =
        (3 * (C46860 + C46872 * C46978) +
         C46968 * (2 * C46968 * C46872 +
                   C46968 * (C46872 +
                             (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846) *
                                 C46978))) /
        C46798;
    const double C1301 = (2 * ae * (C46915 + C46931 * C46978) +
                          C46827 * (C46860 + C46872 * C46978)) /
                         C46798;
    const double C47205 = C46862 + C47204;
    const double C47273 = C46827 * C47268;
    const double C47366 = C47362 + C47353;
    const double C47390 = C46968 * C47389;
    const double C47416 = C46827 * C47389;
    const double C47464 = C47458 + C47459;
    const double C47513 = C46827 * C47508;
    const double C46959 = C46834 * C46957;
    const double C47140 = C46968 * C46957;
    const double C47147 = C46827 * C46957;
    const double C1421 =
        (2 * C46968 * C46935 + C46968 * (C46935 + C46957 * C46978)) / C46772;
    const double C1583 = (C46827 * (C46935 + C46957 * C46978) +
                          (C46932 + C46954 * C46978) * ae) /
                         C46772;
    const double C47028 = C46827 * C47026;
    const double C1704 =
        (2 * ae * (2 * C46982 + C46968 * C47026) +
         C46827 * (2 * C46968 * C46872 +
                   C46968 * (C46872 +
                             (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846) *
                                 C46978))) /
        C46798;
    const double C1157 = (3 * (C46915 + C46931 * C46978) +
                          C46968 * (2 * C46982 + C46968 * C47026)) /
                         C46772;
    const double C1701 = (C46827 * (2 * C46982 + C46968 * C47026) +
                          (2 * C46983 + C46968 * C47027) * ae) /
                         C46772;
    const double C47131 = ae * C47125;
    const double C47129 = C46827 * C47125;
    const double C47192 = C47189 + C47190;
    const double C47232 = C47222 + C47230;
    const double C47307 = C47304 + C47305;
    const double C47284 = ae * C47279;
    const double C47282 = C46827 * C47279;
    const double C47372 = C46942 + C47367;
    const double C47405 = C46968 * C47403;
    const double C47438 = C46827 * C47403;
    const double C47429 = ae * C47423;
    const double C47427 = C46827 * C47423;
    const double C47474 = C47244 + C47469;
    const double C47517 = C47514 + C47505;
    const double C46958 = C46944 + C46956;
    const double C47143 = C47141 * ae;
    const double C2168 = C46968 * C46932 + C47141 * C46831;
    const double C47151 = C47149 * ae;
    const double C47235 = C47233 * ae;
    const double C5779 = 4 * (2 * C46990 + C46968 * C47018) +
                         C46968 * (3 * C47018 + C46968 * C47233);
    const double C5948 = 2 * C46990 + C46968 * C47018 + C47233 * C46831;
    const double C6439 = C46827 * (3 * C47018 + C46968 * C47233);
    const double C47376 = C47373 * ae;
    const double C12574 = 4 * (2 * C47051 + C46827 * C47104) +
                          C46827 * (3 * C47104 + C46827 * C47373);
    const double C47408 = C47396 + C47406;
    const double C47442 = C47440 * ae;
    const double C47477 = C47475 * ae;
    const double C27799 = 4 * (2 * C47163 + C46827 * C47255) +
                          C46827 * (3 * C47255 + C46827 * C47475);
    const double C47522 = C47500 + C47519;
    const double C151 = C114 * C127;
    const double C10388 = C10358 * C127;
    const double C31349 = C31319 * C127;
    const double C338 = C114 * C306;
    const double C10590 = C10358 * C306;
    const double C31551 = C31319 * C306;
    const double C340 = C114 * C307;
    const double C10952 = C10358 * C307;
    const double C31913 = C31319 * C307;
    const double C5791 = C114 * C5780;
    const double C26768 = C10358 * C5780;
    const double C38083 = C31319 * C5780;
    const double C48008 = C47744 * C47732;
    const double C48048 = C48013 + C47744;
    const double C48016 = C47753 / C47734;
    const double C48012 = C47753 * C47732;
    const double C654 = C48092 - (C47744 * C47735) / C47730;
    const double C48026 = C47826 * C47820;
    const double C48063 = C48028 + C47826;
    const double C48030 = C47833 / C47734;
    const double C48027 = C47833 * C47820;
    const double C1414 = C48096 - (C47826 * C47822) / C47730;
    const double C48032 = C47868 * C47862;
    const double C48069 = C48034 + C47868;
    const double C48036 = C47875 / C47734;
    const double C48033 = C47875 * C47862;
    const double C2282 = C48098 - (C47868 * C47864) / C47730;
    const double C46805 = C46804 * C46800;
    const double C42612 =
        (((0 - (C46770 * C46797) / C46772) * ae) / C46772 - (0 * be) / C46802) /
            (2 * C46772) -
        ((C46770 * ((C46804 * ae) / C46772 - C46797 / C46802) + C10355) * be) /
            C46772 +
        (0 * ae) / C46772 - C46778 / C46798;
    const double C42614 =
        ((C46804 * ae) / C46772 - C46797 / C46802) / (2 * C46772) -
        ((C46770 * ((0 * ae) / C46772 - C46778 / C46798) + C48075) * be) /
            C46772;
    const double C10410 = C10402 + C10378;
    const double C10409 = C10401 + C10375;
    const double C10406 = C10398 + C10366;
    const double C10612 = C10604 + C10578;
    const double C25921 = C25917 + C25909;
    const double C25918 = C25914 + C25903;
    const double C10609 = C10601 + C10565;
    const double C10814 = C10806 + C10780;
    const double C10811 = C10803 + C10767;
    const double C26531 = C26529 + C26525;
    const double C26778 = C26774 + C26761;
    const double C26956 = C26950 + C26933;
    const double C10408 = C10400 + C10372;
    const double C10407 = C10399 + C10369;
    const double C25920 = C25916 + C25907;
    const double C25919 = C25915 + C25905;
    const double C31371 = C31363 + C31339;
    const double C31370 = C31362 + C31336;
    const double C31367 = C31359 + C31327;
    const double C31573 = C31565 + C31539;
    const double C37236 = C37232 + C37224;
    const double C37233 = C37229 + C37218;
    const double C31570 = C31562 + C31526;
    const double C31775 = C31767 + C31741;
    const double C31772 = C31764 + C31728;
    const double C37846 = C37844 + C37840;
    const double C38093 = C38089 + C38076;
    const double C38271 = C38265 + C38248;
    const double C31369 = C31361 + C31333;
    const double C31368 = C31360 + C31330;
    const double C37235 = C37231 + C37222;
    const double C37234 = C37230 + C37220;
    const double C169 = C164 * C47971;
    const double C4758 = C164 * C4753;
    const double C16120 = C164 * C16115;
    const double C519 = C47988 * C502;
    const double C10774 = C10355 * C502;
    const double C10764 = C48075 * C502;
    const double C31735 = C31316 * C502;
    const double C31725 = C48075 * C502;
    const double C533 = C517 + C518;
    const double C10796 = C10772 + C10773;
    const double C10794 = C10762 + C10763;
    const double C31757 = C31733 + C31734;
    const double C31755 = C31723 + C31724;
    const double C356 = C350 + C330;
    const double C10610 = C10602 + C10572;
    const double C31571 = C31563 + C31533;
    const double C957 = C954 + C943;
    const double C10608 = C10600 + C10562;
    const double C11320 = C11316 + C11300;
    const double C31569 = C31561 + C31523;
    const double C32281 = C32277 + C32261;
    const double C5955 = C47988 * C1300;
    const double C26523 = C48075 * C1300;
    const double C26929 = C10355 * C1300;
    const double C37838 = C48075 * C1300;
    const double C38244 = C31316 * C1300;
    const double C5964 = C5954 + C1310;
    const double C26526 = C26522 + C11297;
    const double C26942 = C26928 + C11709;
    const double C37841 = C37837 + C32258;
    const double C38257 = C38243 + C32670;
    const double C47069 = ae * C47068;
    const double C2006 =
        (2 * C46897 + C46827 * C47068 + (C46892 + C46835 * C46831) * ae) /
        C46772;
    const double C170 = C165 * C47971;
    const double C4761 = C165 * C4753;
    const double C16123 = C165 * C16115;
    const double C171 = C166 * C47971;
    const double C4762 = C166 * C4753;
    const double C16124 = C166 * C16115;
    const double C361 = C355 * C47971;
    const double C4759 = C355 * C48073;
    const double C4915 = C355 * C4753;
    const double C16121 = C355 * C48073;
    const double C16275 = C355 * C16115;
    const double C550 = C544 * C47971;
    const double C5077 = C544 * C4753;
    const double C16429 = C544 * C16115;
    const double C360 = C354 * C47971;
    const double C4760 = C354 * C48073;
    const double C4920 = C354 * C4753;
    const double C16122 = C354 * C48073;
    const double C16278 = C354 * C16115;
    const double C549 = C543 * C47971;
    const double C5080 = C543 * C4753;
    const double C16432 = C543 * C16115;
    const double C152 = C47988 * C134;
    const double C333 = C47988 * C314;
    const double C10587 = C10355 * C314;
    const double C31548 = C31316 * C314;
    const double C336 = C47988 * C315;
    const double C10951 = C10355 * C315;
    const double C31912 = C31316 * C315;
    const double C525 = C47988 * C504;
    const double C10381 = C48075 * C504;
    const double C11093 = C10355 * C504;
    const double C31342 = C48075 * C504;
    const double C32054 = C31316 * C504;
    const double C946 = C47988 * C936;
    const double C10581 = C48075 * C936;
    const double C11309 = C10355 * C936;
    const double C31542 = C48075 * C936;
    const double C32270 = C31316 * C936;
    const double C22330 = C47988 * C5782;
    const double C22800 = C47988 * C6442;
    const double C26765 = C48075 * C6442;
    const double C38080 = C48075 * C6442;
    const double C46937 = C46936 + C46934;
    const double C529 = C114 * C496;
    const double C10383 = C10360 * C496;
    const double C11094 = C10358 * C496;
    const double C31344 = C31321 * C496;
    const double C32055 = C31319 * C496;
    const double C948 = C114 * C932;
    const double C10588 = C10360 * C932;
    const double C11310 = C10358 * C932;
    const double C31549 = C31321 * C932;
    const double C32271 = C31319 * C932;
    const double C150 = C113 * C120;
    const double C337 = C113 * C296;
    const double C662 = C113 * C297;
    const double C526 = C113 * C485;
    const double C11090 = C10359 * C485;
    const double C32051 = C31320 * C485;
    const double C772 = C113 * C486;
    const double C10382 = C10359 * C486;
    const double C31343 = C31320 * C486;
    const double C947 = C113 * C927;
    const double C10948 = C10359 * C927;
    const double C31909 = C31320 * C927;
    const double C46987 = ae * C46986;
    const double C1289 =
        (C46968 * C46915 + C46827 * C46986 + C46827 * C46983 * ae) / C46772;
    const double C47045 = C46915 + C47043;
    const double C47022 = ae * C47021;
    const double C1296 =
        (C46904 + C46921 * C46978 + C46827 * C47021 + C46827 * C47018 * ae) /
        C46772;
    const double C5794 = C5787 + C1169;
    const double C6305 = C6302 + C1707;
    const double C11854 = C11848 + C11552;
    const double C32815 = C32809 + C32513;
    const double C47361 = C47351 + C47108;
    const double C47110 = C47109 + C47103;
    const double C47182 = C46989 + C47180;
    const double C47219 = C47217 + C47218;
    const double C6447 = C114 * C6440;
    const double C11557 = C10360 * C6440;
    const double C27418 = C10358 * C6440;
    const double C32518 = C31321 * C6440;
    const double C38733 = C31319 * C6440;
    const double C22329 = C113 * C5778;
    const double C22448 = C113 * C5947;
    const double C27414 = C10359 * C5947;
    const double C38729 = C31320 * C5947;
    const double C22799 = C113 * C6438;
    const double C26764 = C10359 * C6438;
    const double C38079 = C31320 * C6438;
    const double C47300 = C47008 + C47298;
    const double C47457 = C47449 + C47258;
    const double C47260 = C47259 + C47254;
    const double C47342 = ae * C47339;
    const double C47341 = C46827 * C47339;
    const double C47493 = 3 * C47339;
    const double C503 = (C46841 + C46850 * C46846 + C46918 + C46918 +
                         C46827 * (2 * ae * C46915 + C46827 * C46860)) /
                        C46798;
    const double C521 = C114 * C493;
    const double C10788 = C10358 * C493;
    const double C10782 = C10360 * C493;
    const double C31749 = C31319 * C493;
    const double C31743 = C31321 * C493;
    const double C42626 = C42616 * C493;
    const double C162 = C157 + C148;
    const double C10405 = C10397 + C10386;
    const double C31366 = C31358 + C31347;
    const double C351 = C345 + C332;
    const double C10607 = C10599 + C10586;
    const double C31568 = C31560 + C31547;
    const double C352 = C346 + C335;
    const double C10957 = C10955 + C10589;
    const double C31918 = C31916 + C31550;
    const double C541 = C535 + C524;
    const double C10403 = C10395 + C10380;
    const double C11099 = C11097 + C10791;
    const double C31364 = C31356 + C31341;
    const double C32060 = C32058 + C31752;
    const double C955 = C952 + C945;
    const double C10605 = C10597 + C10580;
    const double C11319 = C11315 + C11308;
    const double C31566 = C31558 + C31541;
    const double C32280 = C32276 + C32269;
    const double C1431 = C1429 + C1165;
    const double C1593 = C1591 + C1311;
    const double C10606 = C10598 + C10583;
    const double C31567 = C31559 + C31544;
    const double C1299 =
        (C46968 * C46975 + C46994 + C46994 +
         C46827 * (2 * ae * C46989 + C46827 * C46968 * C46862)) /
        C46798;
    const double C1309 = C114 * C1290;
    const double C11302 = C10360 * C1290;
    const double C11707 = C10358 * C1290;
    const double C32263 = C31321 * C1290;
    const double C32668 = C31319 * C1290;
    const double C42751 = C42616 * C1290;
    const double C47057 = C47056 + C47053;
    const double C1434 = C1432 + C1427;
    const double C11859 = C11857 + C11851;
    const double C32820 = C32818 + C32812;
    const double C1596 = C1594 + C1589;
    const double C10611 = C10603 + C10575;
    const double C12065 = C12063 + C12057;
    const double C31572 = C31564 + C31536;
    const double C33026 = C33024 + C33018;
    const double C1304 =
        (C46841 + C46850 * C46978 + C47013 + C47013 +
         C46827 * (2 * ae * C47008 + C46827 * (C46850 + C46858 * C46978))) /
        C46798;
    const double C1314 = C114 * C1295;
    const double C11714 = C10358 * C1295;
    const double C11712 = C10360 * C1295;
    const double C32675 = C31319 * C1295;
    const double C32673 = C31321 * C1295;
    const double C42748 = C42616 * C1295;
    const double C5798 = C5795 + C1168;
    const double C26777 = C26773 + C11556;
    const double C38092 = C38088 + C32517;
    const double C6450 = C6449 + C1706;
    const double C26775 = C26771 + C11554;
    const double C27423 = C27421 + C12196;
    const double C38090 = C38086 + C32515;
    const double C38738 = C38736 + C33157;
    const double C47338 = C47325 + C47335;
    const double C47089 = ae * C47087;
    const double C47088 = C46827 * C47087;
    const double C47318 = 3 * C47087;
    const double C47169 = C47168 + C47165;
    const double C46874 = C46866 + C46873;
    const double C47128 = C47124 + C47118;
    const double C1425 = C47988 * C1158;
    const double C1587 = C47988 * C1301;
    const double C10584 = C48075 * C1301;
    const double C31545 = C48075 * C1301;
    const double C5783 =
        (4 * (2 * C47172 + C46968 * C47205) +
         C46968 * (3 * C47205 +
                   C46968 * (2 * C46968 * C47203 +
                             C46968 * (C47203 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C46978)))) /
        C46798;
    const double C47278 = C47272 + C47273;
    const double C47371 = C46827 * C47366;
    const double C47391 = C47387 + C47390;
    const double C47426 = C47422 + C47416;
    const double C47468 = C46827 * C47464;
    const double C47516 = C47502 + C47513;
    const double C46961 = C46941 + C46959;
    const double C47142 = C46827 * C47140;
    const double C47150 = C47147 + C47148;
    const double C1428 = C114 * C1421;
    const double C1590 = C114 * C1583;
    const double C10591 = C10360 * C1583;
    const double C31552 = C31321 * C1583;
    const double C47030 = C47028 + C47029;
    const double C1170 = C114 * C1157;
    const double C1708 = C114 * C1701;
    const double C11853 = C10360 * C1701;
    const double C32814 = C31321 * C1701;
    const double C47132 = C46931 + C47129;
    const double C47195 = ae * C47192;
    const double C47194 = C46827 * C47192;
    const double C47234 = C46827 * C47232;
    const double C6443 =
        (2 * ae * (3 * C47017 + C46968 * C47232) +
         C46827 * (3 * C47205 +
                   C46968 * (2 * C46968 * C47203 +
                             C46968 * (C47203 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C46978)))) /
        C46798;
    const double C5781 = (4 * (2 * C46989 + C46968 * C47017) +
                          C46968 * (3 * C47017 + C46968 * C47232)) /
                         C46772;
    const double C6441 = (C46827 * (3 * C47017 + C46968 * C47232) +
                          (3 * C47018 + C46968 * C47233) * ae) /
                         C46772;
    const double C47310 = ae * C47307;
    const double C47309 = C46827 * C47307;
    const double C47285 = C47173 + C47282;
    const double C47375 = C47372 + C47364;
    const double C47407 = C47393 + C47405;
    const double C47441 = C47438 + C47439;
    const double C47430 = C47211 + C47427;
    const double C47476 = C47474 + C47466;
    const double C47523 = ae * C47517;
    const double C47521 = C46827 * C47517;
    const double C46960 = C46958 * ae;
    const double C121 = 5 * (3 * C46912 + C46834 * C46932) +
                        C46834 * (4 * C46932 + C46834 * C46958);
    const double C298 = 3 * C46912 + C46834 * C46932 + C46958 * C46978;
    const double C487 = 3 * C46912 + C46834 * C46932 + C46958 * C46831;
    const double C658 = C46968 * (4 * C46932 + C46834 * C46958);
    const double C768 = C46827 * (4 * C46932 + C46834 * C46958);
    const double C928 = C46827 * C46968 * C46958;
    const double C47410 = C47408 * ae;
    const double C22325 = 5 * (3 * C47009 + C46968 * C47216) +
                          C46968 * (4 * C47216 + C46968 * C47408);
    const double C22444 = 3 * C47009 + C46968 * C47216 + C47408 * C46831;
    const double C22795 = C46827 * (4 * C47216 + C46968 * C47408);
    const double C47526 = C47522 * ae;
    const double C44175 = 5 * (3 * C47081 + C46827 * C47337) +
                          C46827 * (4 * C47337 + C46827 * C47522);
    const double C48044 = C48008 / C47730;
    const double C48079 = C48048 / C47734;
    const double C48080 = C48050 + C48016;
    const double C656 = C48016 - C47751 / C47748;
    const double C48047 = C48012 / C47730;
    const double C48060 = C48026 / C47730;
    const double C48086 = C48063 / C47734;
    const double C48087 = C48064 + C48030;
    const double C1416 = C48030 - C47831 / C47748;
    const double C48062 = C48027 / C47730;
    const double C48066 = C48032 / C47730;
    const double C48089 = C48069 / C47734;
    const double C48090 = C48070 + C48036;
    const double C2284 = C48036 - C47873 / C47748;
    const double C48068 = C48033 / C47730;
    const double C46812 = C46770 * C46805;
    const double C42611 =
        (ae * -2 * C46797) / (C46798 * 2 * C46772) -
        (((C46770 * ((-4 * C46778) / C46772 - (C46770 * C46805) / C46772) *
           ae) /
              C46772 +
          2 * ((C46804 * ae) / C46772 - C46797 / C46802)) *
         be) /
            C46772 -
        C46805 / C46802;
    const double C42615 = (-C46805 / C46772) / (4 * C46798);
    const double C42630 = C42612 * C126;
    const double C42629 = C42612 * C125;
    const double C42624 = C42612 * C124;
    const double C42623 = C42612 * C123;
    const double C42618 = C42612 * C122;
    const double C42758 = C42612 * C304;
    const double C42757 = C42612 * C299;
    const double C42754 = C42612 * C303;
    const double C42749 = C42612 * C300;
    const double C42746 = C42612 * C302;
    const double C42745 = C42612 * C301;
    const double C42886 = C42612 * C493;
    const double C42885 = C42612 * C488;
    const double C42882 = C42612 * C492;
    const double C42877 = C42612 * C489;
    const double C42874 = C42612 * C491;
    const double C42873 = C42612 * C490;
    const double C42987 = C42612 * C305;
    const double C43088 = C42612 * C494;
    const double C43243 = C42612 * C931;
    const double C43242 = C42612 * C930;
    const double C43237 = C42612 * C929;
    const double C43421 = C42612 * C1155;
    const double C43420 = C42612 * C1154;
    const double C43540 = C42612 * C1295;
    const double C43539 = C42612 * C1294;
    const double C43536 = C42612 * C1291;
    const double C43641 = C42612 * C1153;
    const double C43790 = C42612 * C1293;
    const double C43891 = C42612 * C1699;
    const double C44331 = C42612 * C1290;
    const double C42631 = C42614 * C496;
    const double C42628 = C42614 * C494;
    const double C42625 = C42614 * C488;
    const double C42622 = C42614 * C489;
    const double C42619 = C42614 * C490;
    const double C42759 = C42614 * C1292;
    const double C42756 = C42614 * C931;
    const double C42753 = C42614 * C1293;
    const double C42750 = C42614 * C930;
    const double C42747 = C42614 * C1294;
    const double C42744 = C42614 * C929;
    const double C42884 = C42614 * C493;
    const double C42878 = C42614 * C492;
    const double C42872 = C42614 * C491;
    const double C42988 = C42614 * C932;
    const double C43241 = C42614 * C1290;
    const double C43238 = C42614 * C1291;
    const double C43422 = C42614 * C6440;
    const double C43419 = C42614 * C1699;
    const double C43538 = C42614 * C1295;
    const double C43642 = C42614 * C1700;
    const double C539 = C533 + C518;
    const double C10804 = C10796 + C10773;
    const double C10802 = C10794 + C10763;
    const double C31765 = C31757 + C31734;
    const double C31763 = C31755 + C31724;
    const double C362 = C356 * C47971;
    const double C4918 = C356 * C4753;
    const double C4914 = C356 * C48073;
    const double C16276 = C356 * C16115;
    const double C16274 = C356 * C48073;
    const double C960 = C957 * C47971;
    const double C5076 = C957 * C48073;
    const double C5544 = C957 * C4753;
    const double C16428 = C957 * C48073;
    const double C16894 = C957 * C16115;
    const double C5968 = C5964 + C1310;
    const double C26528 = C26526 + C11297;
    const double C26948 = C26942 + C11709;
    const double C37843 = C37841 + C32258;
    const double C38263 = C38257 + C32670;
    const double C2012 =
        (2 * (2 * ae * C46894 + C46827 * C46841) + C47069 + C47069 +
         C46827 * (C46841 + C47066 + C47066 +
                   C46827 * (2 * ae * C46902 + C46827 * C46850))) /
        C46798;
    const double C2019 = C114 * C2006;
    const double C10771 = C10360 * C2006;
    const double C12583 = C10358 * C2006;
    const double C31732 = C31321 * C2006;
    const double C33538 = C31319 * C2006;
    const double C42875 = C42614 * C2006;
    const double C42871 = C42616 * C2006;
    const double C44181 = C42612 * C2006;
    const double C46938 = ae * C46937;
    const double C495 = (2 * C46904 + C46834 * C46915 + C46827 * C46937 +
                         C46827 * C46932 * ae) /
                        C46772;
    const double C158 = C150 + C151;
    const double C347 = C337 + C338;
    const double C665 = C662 + C340;
    const double C775 = C772 + C529;
    const double C10396 = C10382 + C10383;
    const double C31357 = C31343 + C31344;
    const double C953 = C947 + C948;
    const double C10954 = C10948 + C10588;
    const double C31915 = C31909 + C31549;
    const double C1298 =
        (C46968 * C46860 + C46987 + C46987 +
         C46827 * (2 * ae * C46982 + C46827 * C46968 * C46872)) /
        C46798;
    const double C1308 = C114 * C1289;
    const double C11305 = C10360 * C1289;
    const double C12786 = C10358 * C1289;
    const double C32266 = C31321 * C1289;
    const double C33741 = C31319 * C1289;
    const double C42755 = C42616 * C1289;
    const double C43244 = C42614 * C1289;
    const double C47046 = C47045 + C47042;
    const double C1305 =
        (C46975 + C46862 * C46978 + C47022 + C47022 +
         C46827 *
             (2 * ae * C47017 + C46827 * (C46862 + C46834 * C46870 * C46978))) /
        C46798;
    const double C1315 = C114 * C1296;
    const double C11716 = C10358 * C1296;
    const double C11710 = C10360 * C1296;
    const double C32677 = C31319 * C1296;
    const double C32671 = C31321 * C1296;
    const double C42752 = C42616 * C1296;
    const double C43791 = C42614 * C1296;
    const double C5797 = C5794 + C1169;
    const double C6306 = C6305 + C1707;
    const double C11856 = C11854 + C11552;
    const double C32817 = C32815 + C32513;
    const double C47112 = ae * C47110;
    const double C47111 = C46827 * C47110;
    const double C47354 = 3 * C47110;
    const double C47183 = C47182 + C47179;
    const double C47220 = ae * C47219;
    const double C5949 = (2 * C46996 + C46968 * C47008 + C46827 * C47219 +
                          C46827 * C47216 * ae) /
                         C46772;
    const double C22332 = C22329 + C5791;
    const double C22802 = C22799 + C6447;
    const double C26772 = C26764 + C11557;
    const double C38087 = C38079 + C32518;
    const double C47301 = C47300 + C47297;
    const double C47262 = ae * C47260;
    const double C47261 = C46827 * C47260;
    const double C47452 = 3 * C47260;
    const double C47501 = C47488 + C47342;
    const double C47343 = C47319 + C47341;
    const double C522 = C47988 * C503;
    const double C10789 = C10355 * C503;
    const double C10783 = C48075 * C503;
    const double C31750 = C31316 * C503;
    const double C31744 = C48075 * C503;
    const double C534 = C520 + C521;
    const double C10801 = C10787 + C10788;
    const double C10799 = C10781 + C10782;
    const double C31762 = C31748 + C31749;
    const double C31760 = C31742 + C31743;
    const double C167 = C162 + C149;
    const double C10413 = C10405 + C10387;
    const double C31374 = C31366 + C31348;
    const double C357 = C351 + C333;
    const double C10615 = C10607 + C10587;
    const double C31576 = C31568 + C31548;
    const double C358 = C352 + C336;
    const double C10959 = C10957 + C10951;
    const double C31920 = C31918 + C31912;
    const double C547 = C541 + C525;
    const double C10411 = C10403 + C10381;
    const double C11101 = C11099 + C11093;
    const double C31372 = C31364 + C31342;
    const double C32062 = C32060 + C32054;
    const double C958 = C955 + C946;
    const double C10613 = C10605 + C10581;
    const double C11323 = C11319 + C11309;
    const double C31574 = C31566 + C31542;
    const double C32284 = C32280 + C32270;
    const double C2175 = C47988 * C1299;
    const double C11303 = C48075 * C1299;
    const double C12785 = C10355 * C1299;
    const double C32264 = C48075 * C1299;
    const double C33740 = C31316 * C1299;
    const double C2178 = C2174 + C1309;
    const double C11313 = C11301 + C11302;
    const double C12789 = C12784 + C11707;
    const double C32274 = C32262 + C32263;
    const double C33744 = C33739 + C32668;
    const double C47058 = ae * C47057;
    const double C2005 =
        (2 * C46906 + C46827 * C47057 + (C46901 + C46923 * C46831) * ae) /
        C46772;
    const double C1436 = C1434 * C47971;
    const double C4919 = C1434 * C48073;
    const double C6107 = C1434 * C4753;
    const double C16277 = C1434 * C48073;
    const double C17403 = C1434 * C16115;
    const double C1598 = C1596 * C47971;
    const double C5545 = C1596 * C48073;
    const double C6304 = C1596 * C4753;
    const double C16895 = C1596 * C48073;
    const double C17599 = C1596 * C16115;
    const double C5961 = C47988 * C1304;
    const double C26939 = C10355 * C1304;
    const double C26935 = C48075 * C1304;
    const double C38254 = C31316 * C1304;
    const double C38250 = C48075 * C1304;
    const double C5967 = C5960 + C1314;
    const double C26947 = C26938 + C11714;
    const double C26945 = C26934 + C11712;
    const double C38262 = C38253 + C32675;
    const double C38260 = C38249 + C32673;
    const double C5801 = C5798 + C5790;
    const double C26781 = C26777 + C26767;
    const double C38096 = C38092 + C38082;
    const double C6451 = C6450 + C6446;
    const double C26779 = C26775 + C26763;
    const double C27425 = C27423 + C27417;
    const double C38094 = C38090 + C38078;
    const double C38740 = C38738 + C38732;
    const double C47090 = C47073 + C47088;
    const double C47170 = ae * C47169;
    const double C2403 =
        (2 * C47000 + C46827 * C47169 + (C46997 + C47160 * C46831) * ae) /
        C46772;
    const double C135 =
        (5 * (3 * C46860 + C46834 * C46874) +
         C46834 *
             (4 * C46874 +
              C46834 * (3 * C46872 +
                        C46834 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C316 = (2 * C46834 * C46850 + C46834 * C46860 +
                         C46874 * std::pow(yP - yQ, 2)) /
                        C46798;
    const double C317 = ((yP - yQ) * (3 * C46860 + C46834 * C46874)) / C46798;
    const double C318 =
        (3 * C46860 + C46834 * C46874 +
         (3 * C46872 +
          C46834 * (2 * C46834 * C46870 +
                    C46834 * (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846))) *
             std::pow(yP - yQ, 2)) /
        C46798;
    const double C506 = (2 * ae * (3 * C46915 + C46834 * C46935) +
                         C46827 * (3 * C46860 + C46834 * C46874)) /
                        C46798;
    const double C660 =
        ((yP - yQ) *
         (4 * C46874 +
          C46834 * (3 * C46872 +
                    C46834 * (2 * C46834 * C46870 +
                              C46834 * (C46870 +
                                        (C46864 * C46865 +
                                         C46831 * bs[8] * std::pow(C46825, 8)) *
                                            C46830 * C46846))))) /
        C46798;
    const double C937 =
        (2 * ae * C46968 * C46935 + C46827 * C46968 * C46874) / C46798;
    const double C1422 =
        (2 * C46968 * C46874 +
         C46968 * (C46874 +
                   (2 * C46834 * C46870 +
                    C46834 * (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846)) *
                       C46978)) /
        C46798;
    const double C1584 =
        (2 * ae * (C46935 + C46957 * C46978) +
         C46827 * (C46874 +
                   (2 * C46834 * C46870 +
                    C46834 * (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846)) *
                       C46978)) /
        C46798;
    const double C1433 = C1431 + C1425;
    const double C1595 = C1593 + C1587;
    const double C10614 = C10606 + C10584;
    const double C31575 = C31567 + C31545;
    const double C47374 = C47361 + C47371;
    const double C22327 =
        (5 * (3 * C47201 + C46968 * C47391) +
         C46968 *
             (4 * C47391 +
              C46968 * (3 * C47389 +
                        C46968 * (2 * C46968 * C46870 +
                                  C46968 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46978))))) /
        C46798;
    const double C47473 = C47457 + C47468;
    const double C47520 = C46827 * C47516;
    const double C46962 = C46827 * C46961;
    const double C770 =
        (2 * ae * (4 * C46935 + C46834 * C46961) +
         C46827 *
             (4 * C46874 +
              C46834 * (3 * C46872 +
                        C46834 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C938 =
        (2 * ae * C46968 * C46961 +
         C46827 * C46968 *
             (3 * C46872 +
              C46834 *
                  (2 * C46834 * C46870 +
                   C46834 * (C46870 + (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                          C46830 * C46846)))) /
        C46798;
    const double C128 = (5 * (3 * C46915 + C46834 * C46935) +
                         C46834 * (4 * C46935 + C46834 * C46961)) /
                        C46772;
    const double C308 =
        (3 * C46915 + C46834 * C46935 + C46961 * C46978) / C46772;
    const double C659 = (C46968 * (4 * C46935 + C46834 * C46961)) / C46772;
    const double C769 = (C46827 * (4 * C46935 + C46834 * C46961) +
                         (4 * C46932 + C46834 * C46958) * ae) /
                        C46772;
    const double C933 =
        (C46827 * C46968 * C46961 + C46968 * C46958 * ae) / C46772;
    const double C47144 = C47142 + C47143;
    const double C47153 = ae * C47150;
    const double C47152 = C46827 * C47150;
    const double C47031 = ae * C47030;
    const double C1297 =
        (C46915 + C46931 * C46978 + C46827 * C47030 + C46827 * C47027 * ae) /
        C46772;
    const double C47133 = C47132 + C47126;
    const double C47196 = C46982 + C47194;
    const double C47236 = C47234 + C47235;
    const double C5792 = C114 * C5781;
    const double C6448 = C114 * C6441;
    const double C11559 = C10360 * C6441;
    const double C32520 = C31321 * C6441;
    const double C47311 = C47017 + C47309;
    const double C47286 = C47285 + C47280;
    const double C47378 = ae * C47375;
    const double C47377 = C46827 * C47375;
    const double C47409 = C46827 * C47407;
    const double C22797 =
        (2 * ae * (4 * C47215 + C46968 * C47407) +
         C46827 *
             (4 * C47391 +
              C46968 * (3 * C47389 +
                        C46968 * (2 * C46968 * C46870 +
                                  C46968 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46978))))) /
        C46798;
    const double C22326 = (5 * (3 * C47008 + C46968 * C47215) +
                           C46968 * (4 * C47215 + C46968 * C47407)) /
                          C46772;
    const double C22796 = (C46827 * (4 * C47215 + C46968 * C47407) +
                           (4 * C47216 + C46968 * C47408) * ae) /
                          C46772;
    const double C47444 = ae * C47441;
    const double C47443 = C46827 * C47441;
    const double C47431 = C47430 + C47424;
    const double C47479 = ae * C47476;
    const double C47478 = C46827 * C47476;
    const double C47525 = C47494 + C47521;
    const double C48100 = C48044 + C48092;
    const double C655 = C48079 - (C47753 * C47735) / C47730;
    const double C111 = C48080 / C47734 - C47751 / C48051;
    const double C48093 = C48047 + C48079;
    const double C48101 = C48060 + C48096;
    const double C1415 = C48086 - (C47833 * C47822) / C47730;
    const double C1143 = C48087 / C47734 - C47831 / C48051;
    const double C48097 = C48062 + C48086;
    const double C48102 = C48066 + C48098;
    const double C2283 = C48089 - (C47875 * C47864) / C47730;
    const double C1996 = C48090 / C47734 - C47873 / C48051;
    const double C48099 = C48068 + C48089;
    const double C42613 =
        (((-4 * C46778) / C46772 - C46812 / C46772) * ae) / C46802 -
        ((2 * ((0 * ae) / C46772 - C46778 / C46798) - C46812 / C46802) * be) /
            C46772;
    const double C545 = C539 + C519;
    const double C10812 = C10804 + C10774;
    const double C10810 = C10802 + C10764;
    const double C31773 = C31765 + C31735;
    const double C31771 = C31763 + C31725;
    const double C5972 = C5968 + C5955;
    const double C26530 = C26528 + C26523;
    const double C26954 = C26948 + C26929;
    const double C37845 = C37843 + C37838;
    const double C38269 = C38263 + C38244;
    const double C505 =
        (2 * C46834 * C46850 + C46834 * C46860 + C46938 + C46938 +
         C46827 * (2 * ae * C46935 + C46827 * C46874)) /
        C46798;
    const double C527 = C114 * C495;
    const double C10792 = C10358 * C495;
    const double C10790 = C10360 * C495;
    const double C31753 = C31319 * C495;
    const double C31751 = C31321 * C495;
    const double C42627 = C42616 * C495;
    const double C43089 = C42614 * C495;
    const double C163 = C158 + C151;
    const double C353 = C347 + C338;
    const double C666 = C665 + C340;
    const double C776 = C775 + C529;
    const double C10404 = C10396 + C10383;
    const double C31365 = C31357 + C31344;
    const double C956 = C953 + C948;
    const double C10956 = C10954 + C10588;
    const double C31917 = C31915 + C31549;
    const double C2173 = C47988 * C1298;
    const double C11306 = C48075 * C1298;
    const double C32267 = C48075 * C1298;
    const double C2177 = C2172 + C1308;
    const double C11314 = C11304 + C11305;
    const double C32275 = C32265 + C32266;
    const double C47047 = ae * C47046;
    const double C2004 =
        (2 * C46917 + C46827 * C47046 + (C46912 + C46928 * C46831) * ae) /
        C46772;
    const double C5959 = C47988 * C1305;
    const double C12055 = C48075 * C1305;
    const double C33016 = C48075 * C1305;
    const double C5966 = C5958 + C1315;
    const double C12060 = C12054 + C11710;
    const double C33021 = C33015 + C32671;
    const double C5800 = C5797 + C5788;
    const double C6307 = C6306 + C6303;
    const double C11858 = C11856 + C11849;
    const double C32819 = C32817 + C32810;
    const double C47113 = C47096 + C47111;
    const double C47184 = ae * C47183;
    const double C2404 =
        (2 * C46993 + C46827 * C47183 + (C46990 + C47174 * C46831) * ae) /
        C46772;
    const double C5951 =
        (2 * C47158 + C46968 * C47201 + C47220 + C47220 +
         C46827 * (2 * ae * C47215 +
                   C46827 * (2 * C46968 * C46858 +
                             C46968 * (C46858 + C46870 * C46978)))) /
        C46798;
    const double C5962 = C114 * C5949;
    const double C12197 = C10360 * C5949;
    const double C26940 = C10358 * C5949;
    const double C33158 = C31321 * C5949;
    const double C38255 = C31319 * C5949;
    const double C43418 = C42616 * C5949;
    const double C43892 = C42614 * C5949;
    const double C22333 = C22332 + C5791;
    const double C22803 = C22802 + C6447;
    const double C26776 = C26772 + C11557;
    const double C38091 = C38087 + C32518;
    const double C47302 = ae * C47301;
    const double C7298 =
        (2 * C47012 + C46827 * C47301 + (C47009 + C47212 * C46831) * ae) /
        C46772;
    const double C47263 = C47243 + C47261;
    const double C47507 = C47501 + C47342;
    const double C47344 = C47343 + C47332;
    const double C540 = C534 + C521;
    const double C10809 = C10801 + C10788;
    const double C10807 = C10799 + C10782;
    const double C31770 = C31762 + C31749;
    const double C31768 = C31760 + C31743;
    const double C172 = C167 * C47971;
    const double C4765 = C167 * C4753;
    const double C16127 = C167 * C16115;
    const double C363 = C357 * C47971;
    const double C4923 = C357 * C4753;
    const double C4921 = C357 * C48073;
    const double C16281 = C357 * C16115;
    const double C16279 = C357 * C48073;
    const double C364 = C358 * C47971;
    const double C4763 = C358 * C48073;
    const double C5215 = C358 * C4753;
    const double C16125 = C358 * C48073;
    const double C16567 = C358 * C16115;
    const double C553 = C547 * C47971;
    const double C5347 = C547 * C4753;
    const double C16699 = C547 * C16115;
    const double C961 = C958 * C47971;
    const double C5081 = C958 * C48073;
    const double C5547 = C958 * C4753;
    const double C16433 = C958 * C48073;
    const double C16897 = C958 * C16115;
    const double C2180 = C2178 + C1309;
    const double C11317 = C11313 + C11302;
    const double C12791 = C12789 + C11707;
    const double C32278 = C32274 + C32263;
    const double C33746 = C33744 + C32668;
    const double C2011 =
        (2 * (2 * ae * C46904 + C46827 * C46975) + C47058 + C47058 +
         C46827 * (C46975 + C47055 + C47055 +
                   C46827 * (2 * ae * C46921 + C46827 * C46862))) /
        C46798;
    const double C2018 = C114 * C2005;
    const double C10776 = C10360 * C2005;
    const double C12581 = C10358 * C2005;
    const double C31737 = C31321 * C2005;
    const double C33536 = C31319 * C2005;
    const double C42881 = C42614 * C2005;
    const double C42879 = C42616 * C2005;
    const double C44432 = C42612 * C2005;
    const double C5971 = C5967 + C1314;
    const double C26953 = C26947 + C11714;
    const double C26951 = C26945 + C11712;
    const double C38268 = C38262 + C32675;
    const double C38266 = C38260 + C32673;
    const double C47091 = C47090 + C47084;
    const double C2406 =
        (2 * (2 * ae * C46996 + C46827 * C47158) + C47170 + C47170 +
         C46827 * (C47158 + C47167 + C47167 +
                   C46827 * (2 * ae * C47159 + C46827 * C46968 * C46858))) /
        C46798;
    const double C2410 = C114 * C2403;
    const double C11708 = C10360 * C2403;
    const double C13066 = C10358 * C2403;
    const double C32669 = C31321 * C2403;
    const double C34021 = C31319 * C2403;
    const double C43239 = C42616 * C2403;
    const double C43535 = C42614 * C2403;
    const double C44533 = C42612 * C2403;
    const double C339 = C47988 * C316;
    const double C663 = C47988 * C317;
    const double C773 = C47988 * C506;
    const double C10384 = C48075 * C506;
    const double C31345 = C48075 * C506;
    const double C949 = C47988 * C937;
    const double C10949 = C48075 * C937;
    const double C31910 = C48075 * C937;
    const double C1435 = C1433 * C47971;
    const double C4922 = C1433 * C48073;
    const double C16280 = C1433 * C48073;
    const double C1597 = C1595 * C47971;
    const double C5546 = C1595 * C48073;
    const double C16896 = C1595 * C48073;
    const double C46963 = C46962 + C46960;
    const double C153 = C114 * C128;
    const double C341 = C114 * C308;
    const double C664 = C114 * C659;
    const double C774 = C114 * C769;
    const double C10389 = C10360 * C769;
    const double C31350 = C31321 * C769;
    const double C950 = C114 * C933;
    const double C10953 = C10360 * C933;
    const double C31914 = C31321 * C933;
    const double C47145 = ae * C47144;
    const double C2169 =
        (C46968 * C46935 + C46827 * C47144 + C46827 * C47141 * ae) / C46772;
    const double C47154 = C46935 + C47152;
    const double C1306 =
        (C46860 + C46872 * C46978 + C47031 + C47031 +
         C46827 * (2 * ae * C47026 +
                   C46827 * (C46872 +
                             (C46870 + (C46864 * C46865 +
                                        C46831 * bs[8] * std::pow(C46825, 8)) *
                                           C46830 * C46846) *
                                 C46978))) /
        C46798;
    const double C1316 = C114 * C1297;
    const double C12059 = C10360 * C1297;
    const double C33020 = C31321 * C1297;
    const double C42760 = C42616 * C1297;
    const double C47135 = ae * C47133;
    const double C47134 = C46827 * C47133;
    const double C47197 = C47196 + C47193;
    const double C47237 = ae * C47236;
    const double C5950 = (2 * C46989 + C46968 * C47017 + C46827 * C47236 +
                          C46827 * C47233 * ae) /
                         C46772;
    const double C47312 = C47311 + C47308;
    const double C47288 = ae * C47286;
    const double C47287 = C46827 * C47286;
    const double C47379 = C47355 + C47377;
    const double C47411 = C47409 + C47410;
    const double C22331 = C114 * C22326;
    const double C22801 = C114 * C22796;
    const double C26769 = C10360 * C22796;
    const double C38084 = C31321 * C22796;
    const double C47445 = C47215 + C47443;
    const double C47433 = ae * C47431;
    const double C47432 = C46827 * C47431;
    const double C47480 = C47453 + C47478;
    const double C47527 = C47525 + C47510;
    const double C108 =
        (C48091 + 2 * C47744) / C47734 - (C48100 * C47735) / C47730;
    const double C109 =
        (C48078 + 2 * C47753 + C48100) / C47734 - (C48093 * C47735) / C47730;
    const double C110 = (C48049 + C47750 / C47730 + C48093) / C47734 -
                        (C48080 * C47735) / C47730;
    const double C1140 =
        (C48094 + 2 * C47826) / C47734 - (C48101 * C47822) / C47730;
    const double C1141 =
        (C48082 + 2 * C47833 + C48101) / C47734 - (C48097 * C47822) / C47730;
    const double C1142 = (C48055 + C47830 / C47730 + C48097) / C47734 -
                         (C48087 * C47822) / C47730;
    const double C1993 =
        (C48095 + 2 * C47868) / C47734 - (C48102 * C47864) / C47730;
    const double C1994 =
        (C48084 + 2 * C47875 + C48102) / C47734 - (C48099 * C47864) / C47730;
    const double C1995 = (C48058 + C47872 / C47730 + C48099) / C47734 -
                         (C48090 * C47864) / C47730;
    const double C551 = C545 * C47971;
    const double C5078 = C545 * C4753;
    const double C16430 = C545 * C16115;
    const double C528 = C47988 * C505;
    const double C11091 = C48075 * C505;
    const double C32052 = C48075 * C505;
    const double C536 = C526 + C527;
    const double C11096 = C11090 + C10790;
    const double C32057 = C32051 + C31751;
    const double C168 = C163 + C152;
    const double C2179 = C2177 + C1308;
    const double C11318 = C11314 + C11305;
    const double C32279 = C32275 + C32266;
    const double C2010 =
        (2 * (2 * ae * C46915 + C46827 * C46860) + C47047 + C47047 +
         C46827 * (C46860 + C47044 + C47044 +
                   C46827 * (2 * ae * C46931 + C46827 * C46872))) /
        C46798;
    const double C2017 = C114 * C2004;
    const double C10785 = C10360 * C2004;
    const double C12928 = C10358 * C2004;
    const double C31746 = C31321 * C2004;
    const double C33883 = C31319 * C2004;
    const double C42887 = C42614 * C2004;
    const double C42883 = C42616 * C2004;
    const double C5970 = C5966 + C1315;
    const double C12062 = C12060 + C11710;
    const double C33023 = C33021 + C32671;
    const double C6106 = C5800 * C48073;
    const double C17402 = C5800 * C48073;
    const double C6308 = C6307 * C48073;
    const double C17598 = C6307 * C48073;
    const double C47114 = C47113 + C47107;
    const double C2407 =
        (2 * (2 * ae * C46989 + C46827 * C47172) + C47184 + C47184 +
         C46827 *
             (C47172 + C47181 + C47181 +
              C46827 * (2 * ae * C47173 + C46827 * C46968 * C46834 * C46870))) /
        C46798;
    const double C2411 = C114 * C2404;
    const double C11706 = C10360 * C2404;
    const double C13068 = C10358 * C2404;
    const double C32667 = C31321 * C2404;
    const double C34023 = C31319 * C2404;
    const double C43240 = C42616 * C2404;
    const double C44332 = C42614 * C2404;
    const double C22449 = C47988 * C5951;
    const double C27415 = C48075 * C5951;
    const double C38730 = C48075 * C5951;
    const double C22451 = C22448 + C5962;
    const double C27420 = C27414 + C12197;
    const double C38735 = C38729 + C33158;
    const double C22334 = C22333 + C22330;
    const double C22804 = C22803 + C22800;
    const double C26780 = C26776 + C26765;
    const double C38095 = C38091 + C38080;
    const double C7300 =
        (2 * (2 * ae * C47008 + C46827 * C47201) + C47302 + C47302 +
         C46827 * (C47201 + C47299 + C47299 +
                   C46827 * (2 * ae * C47211 +
                             C46827 * (C46858 + C46870 * C46978)))) /
        C46798;
    const double C7305 = C114 * C7298;
    const double C11715 = C10360 * C7298;
    const double C28263 = C10358 * C7298;
    const double C32676 = C31321 * C7298;
    const double C39575 = C31319 * C7298;
    const double C43541 = C42614 * C7298;
    const double C43537 = C42616 * C7298;
    const double C47264 = C47263 + C47257;
    const double C47524 = C47507 + C47520;
    const double C47346 = ae * C47344;
    const double C47345 = C46827 * C47344;
    const double C47492 = 4 * C47344;
    const double C546 = C540 + C522;
    const double C10817 = C10809 + C10789;
    const double C10815 = C10807 + C10783;
    const double C31778 = C31770 + C31750;
    const double C31776 = C31768 + C31744;
    const double C2182 = C2180 + C2175;
    const double C11321 = C11317 + C11303;
    const double C12793 = C12791 + C12785;
    const double C32282 = C32278 + C32264;
    const double C33748 = C33746 + C33740;
    const double C2293 = C47988 * C2011;
    const double C10777 = C48075 * C2011;
    const double C12927 = C10355 * C2011;
    const double C31738 = C48075 * C2011;
    const double C33882 = C31316 * C2011;
    const double C2296 = C2292 + C2018;
    const double C10797 = C10775 + C10776;
    const double C12931 = C12926 + C12581;
    const double C31758 = C31736 + C31737;
    const double C33886 = C33881 + C33536;
    const double C5975 = C5971 + C5961;
    const double C26959 = C26953 + C26939;
    const double C26957 = C26951 + C26935;
    const double C38274 = C38268 + C38254;
    const double C38272 = C38266 + C38250;
    const double C47092 = ae * C47091;
    const double C2007 =
        (3 * C47068 + C46827 * C47091 + (2 * C47062 + C46827 * C47081) * ae) /
        C46772;
    const double C7304 = C47988 * C2406;
    const double C26931 = C48075 * C2406;
    const double C28262 = C10355 * C2406;
    const double C38246 = C48075 * C2406;
    const double C39574 = C31316 * C2406;
    const double C7307 = C7303 + C2410;
    const double C26943 = C26930 + C11708;
    const double C28266 = C28261 + C13066;
    const double C38258 = C38245 + C32669;
    const double C39578 = C39573 + C34021;
    const double C359 = C353 + C339;
    const double C667 = C666 + C663;
    const double C777 = C776 + C773;
    const double C10412 = C10404 + C10384;
    const double C31373 = C31365 + C31345;
    const double C959 = C956 + C949;
    const double C10958 = C10956 + C10949;
    const double C31919 = C31917 + C31910;
    const double C46964 = ae * C46963;
    const double C497 = (3 * C46915 + C46834 * C46935 + C46827 * C46963 +
                         C46827 * C46958 * ae) /
                        C46772;
    const double C2170 =
        (C46968 * C46874 + C47145 + C47145 +
         C46827 *
             (2 * ae * C47140 +
              C46827 * C46968 *
                  (2 * C46834 * C46870 +
                   C46834 * (C46870 + (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                          C46830 * C46846)))) /
        C46798;
    const double C2176 = C114 * C2169;
    const double C11311 = C10360 * C2169;
    const double C32272 = C31321 * C2169;
    const double C42989 = C42616 * C2169;
    const double C47155 = C47154 + C47151;
    const double C47136 = C47119 + C47134;
    const double C47198 = ae * C47197;
    const double C2405 =
        (2 * C46986 + C46827 * C47197 + (C46983 + C47188 * C46831) * ae) /
        C46772;
    const double C5952 =
        (2 * C47172 + C46968 * C47205 + C47237 + C47237 +
         C46827 * (2 * ae * C47232 +
                   C46827 * (2 * C46968 * C47203 +
                             C46968 * (C47203 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C46978)))) /
        C46798;
    const double C5963 = C114 * C5950;
    const double C12199 = C10360 * C5950;
    const double C33160 = C31321 * C5950;
    const double C43643 = C42616 * C5950;
    const double C47313 = ae * C47312;
    const double C7299 =
        (2 * C47021 + C46827 * C47312 + (C47018 + C47229 * C46831) * ae) /
        C46772;
    const double C47289 = C47269 + C47287;
    const double C47380 = C47379 + C47368;
    const double C47412 = ae * C47411;
    const double C22445 = (3 * C47008 + C46968 * C47215 + C46827 * C47411 +
                           C46827 * C47408 * ae) /
                          C46772;
    const double C47446 = C47445 + C47442;
    const double C47434 = C47417 + C47432;
    const double C47481 = C47480 + C47470;
    const double C47529 = ae * C47527;
    const double C47528 = C46827 * C47527;
    const double C542 = C536 + C527;
    const double C11098 = C11096 + C10790;
    const double C32059 = C32057 + C31751;
    const double C173 = C168 * C47971;
    const double C2181 = C2179 + C2173;
    const double C11322 = C11318 + C11306;
    const double C32283 = C32279 + C32267;
    const double C2291 = C47988 * C2010;
    const double C10786 = C48075 * C2010;
    const double C31747 = C48075 * C2010;
    const double C2295 = C2290 + C2017;
    const double C10800 = C10784 + C10785;
    const double C31761 = C31745 + C31746;
    const double C5974 = C5970 + C5959;
    const double C12064 = C12062 + C12055;
    const double C33025 = C33023 + C33016;
    const double C47115 = ae * C47114;
    const double C2008 =
        (3 * C47057 + C46827 * C47114 + (2 * C47051 + C46827 * C47104) * ae) /
        C46772;
    const double C7161 = C47988 * C2407;
    const double C12783 = C48075 * C2407;
    const double C33738 = C48075 * C2407;
    const double C7163 = C7160 + C2411;
    const double C12788 = C12782 + C11706;
    const double C33743 = C33737 + C32667;
    const double C22452 = C22451 + C5962;
    const double C27422 = C27420 + C12197;
    const double C38737 = C38735 + C33158;
    const double C23437 = C47988 * C7300;
    const double C26937 = C48075 * C7300;
    const double C38252 = C48075 * C7300;
    const double C23439 = C23436 + C7305;
    const double C26946 = C26936 + C11715;
    const double C38261 = C38251 + C32676;
    const double C47265 = ae * C47264;
    const double C6827 =
        (3 * C47169 + C46827 * C47264 + (2 * C47163 + C46827 * C47255) * ae) /
        C46772;
    const double C47347 = C47318 + C47345;
    const double C552 = C546 * C47971;
    const double C5083 = C546 * C4753;
    const double C16435 = C546 * C16115;
    const double C2184 = C2182 * C47971;
    const double C5079 = C2182 * C48073;
    const double C7029 = C2182 * C4753;
    const double C16431 = C2182 * C48073;
    const double C18299 = C2182 * C16115;
    const double C2298 = C2296 + C2018;
    const double C10805 = C10797 + C10776;
    const double C12933 = C12931 + C12581;
    const double C31766 = C31758 + C31737;
    const double C33888 = C33886 + C33536;
    const double C2013 =
        (3 * (C46841 + C47066 + C47066 + C46827 * C47082) + C47092 + C47092 +
         C46827 * (2 * C47082 + C47089 + C47089 +
                   C46827 * (C46850 + C47085 + C47085 +
                             C46827 * (2 * ae * C46911 + C46827 * C46858)))) /
        C46798;
    const double C2020 = C114 * C2007;
    const double C12584 = C10358 * C2007;
    const double C12582 = C10360 * C2007;
    const double C33539 = C31319 * C2007;
    const double C33537 = C31321 * C2007;
    const double C42876 = C42616 * C2007;
    const double C44182 = C42612 * C2007;
    const double C44180 = C42614 * C2007;
    const double C7308 = C7307 + C2410;
    const double C26949 = C26943 + C11708;
    const double C28268 = C28266 + C13066;
    const double C38264 = C38258 + C32669;
    const double C39580 = C39578 + C34021;
    const double C365 = C359 * C47971;
    const double C5214 = C359 * C48073;
    const double C16566 = C359 * C48073;
    const double C668 = C667 * C47971;
    const double C4764 = C667 * C48073;
    const double C16126 = C667 * C48073;
    const double C778 = C777 * C47971;
    const double C962 = C959 * C47971;
    const double C5346 = C959 * C48073;
    const double C16698 = C959 * C48073;
    const double C507 =
        (3 * C46860 + C46834 * C46874 + C46964 + C46964 +
         C46827 *
             (2 * ae * C46961 +
              C46827 * (3 * C46872 +
                        C46834 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C530 = C114 * C497;
    const double C11095 = C10360 * C497;
    const double C32056 = C31321 * C497;
    const double C42632 = C42616 * C497;
    const double C47156 = ae * C47155;
    const double C2287 =
        (2 * C46937 + C46827 * C47155 + (C46932 + C46954 * C46831) * ae) /
        C46772;
    const double C47137 = C47136 + C47130;
    const double C2408 =
        (2 * (2 * ae * C46982 + C46827 * C47186) + C47198 + C47198 +
         C46827 *
             (C47186 + C47195 + C47195 +
              C46827 * (2 * ae * C47187 +
                        C46827 * C46968 *
                            (C46870 + (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                          C46830 * C46846)))) /
        C46798;
    const double C2412 = C114 * C2405;
    const double C12787 = C10360 * C2405;
    const double C33742 = C31321 * C2405;
    const double C43245 = C42616 * C2405;
    const double C7301 =
        (2 * (2 * ae * C47017 + C46827 * C47205) + C47313 + C47313 +
         C46827 * (C47205 + C47310 + C47310 +
                   C46827 * (2 * ae * C47228 +
                             C46827 * (C47203 + C46834 *
                                                    (C46864 * C46865 +
                                                     C46831 * bs[8] *
                                                         std::pow(C46825, 8)) *
                                                    C46830 * C46978)))) /
        C46798;
    const double C7306 = C114 * C7299;
    const double C11717 = C10360 * C7299;
    const double C32678 = C31321 * C7299;
    const double C43792 = C42616 * C7299;
    const double C47290 = C47289 + C47283;
    const double C47382 = ae * C47380;
    const double C47381 = C46827 * C47380;
    const double C22446 =
        (3 * C47201 + C46968 * C47391 + C47412 + C47412 +
         C46827 *
             (2 * ae * C47407 +
              C46827 * (3 * C47389 +
                        C46968 * (2 * C46968 * C46870 +
                                  C46968 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46978))))) /
        C46798;
    const double C22450 = C114 * C22445;
    const double C27419 = C10360 * C22445;
    const double C38734 = C31321 * C22445;
    const double C43423 = C42616 * C22445;
    const double C47447 = ae * C47446;
    const double C23433 =
        (2 * C47219 + C46827 * C47446 + (C47216 + C47404 * C46831) * ae) /
        C46772;
    const double C47435 = C47434 + C47428;
    const double C47483 = ae * C47481;
    const double C47482 = C46827 * C47481;
    const double C47530 = C47493 + C47528;
    const double C548 = C542 + C528;
    const double C11100 = C11098 + C11091;
    const double C32061 = C32059 + C32052;
    const double C2183 = C2181 * C47971;
    const double C5082 = C2181 * C48073;
    const double C16434 = C2181 * C48073;
    const double C2297 = C2295 + C2017;
    const double C10808 = C10800 + C10785;
    const double C31769 = C31761 + C31746;
    const double C7028 = C5974 * C48073;
    const double C18298 = C5974 * C48073;
    const double C2014 =
        (3 * (C46975 + C47055 + C47055 + C46827 * C47105) + C47115 + C47115 +
         C46827 * (2 * C47105 + C47112 + C47112 +
                   C46827 * (C46862 + C47108 + C47108 +
                             C46827 * (2 * ae * C46942 +
                                       C46827 * C46834 * C46870)))) /
        C46798;
    const double C2021 = C114 * C2008;
    const double C12586 = C10358 * C2008;
    const double C12580 = C10360 * C2008;
    const double C33541 = C31319 * C2008;
    const double C33535 = C31321 * C2008;
    const double C42880 = C42616 * C2008;
    const double C44433 = C42614 * C2008;
    const double C7164 = C7163 + C2411;
    const double C12790 = C12788 + C11706;
    const double C33745 = C33743 + C32667;
    const double C22453 = C22452 + C22449;
    const double C27424 = C27422 + C27415;
    const double C38739 = C38737 + C38730;
    const double C23440 = C23439 + C7305;
    const double C26952 = C26946 + C11715;
    const double C38267 = C38261 + C32676;
    const double C6829 =
        (3 * (C47158 + C47167 + C47167 + C46827 * C47252) + C47265 + C47265 +
         C46827 * (2 * C47252 + C47262 + C47262 +
                   C46827 * (C47242 + C47258 + C47258 +
                             C46827 * (2 * ae * C47244 +
                                       C46827 * C46968 * C46870)))) /
        C46798;
    const double C6832 = C114 * C6827;
    const double C13067 = C10360 * C6827;
    const double C27803 = C10358 * C6827;
    const double C34022 = C31321 * C6827;
    const double C39115 = C31319 * C6827;
    const double C43534 = C42616 * C6827;
    const double C44534 = C42614 * C6827;
    const double C47348 = C47347 + C47340;
    const double C2300 = C2298 + C2293;
    const double C10813 = C10805 + C10777;
    const double C12935 = C12933 + C12927;
    const double C31774 = C31766 + C31738;
    const double C33890 = C33888 + C33882;
    const double C7309 = C7308 + C7304;
    const double C26955 = C26949 + C26931;
    const double C28270 = C28268 + C28262;
    const double C38270 = C38264 + C38246;
    const double C39582 = C39580 + C39574;
    const double C2288 =
        (2 * (2 * ae * C46935 + C46827 * C46874) + C47156 + C47156 +
         C46827 *
             (C46874 + C47153 + C47153 +
              C46827 * (2 * ae * C46957 +
                        C46827 * (2 * C46834 * C46870 +
                                  C46834 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C2294 = C114 * C2287;
    const double C10793 = C10360 * C2287;
    const double C31754 = C31321 * C2287;
    const double C43090 = C42616 * C2287;
    const double C47138 = ae * C47137;
    const double C2009 =
        (3 * C47046 + C46827 * C47137 + (2 * C47040 + C46827 * C47127) * ae) /
        C46772;
    const double C47291 = ae * C47290;
    const double C6828 =
        (3 * C47183 + C46827 * C47290 + (2 * C47177 + C46827 * C47281) * ae) /
        C46772;
    const double C47383 = C47354 + C47381;
    const double C23434 =
        (2 * (2 * ae * C47215 + C46827 * C47391) + C47447 + C47447 +
         C46827 *
             (C47391 + C47444 + C47444 +
              C46827 * (2 * ae * C47403 +
                        C46827 * (2 * C46968 * C46870 +
                                  C46968 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46978))))) /
        C46798;
    const double C23438 = C114 * C23433;
    const double C26941 = C10360 * C23433;
    const double C38256 = C31321 * C23433;
    const double C43893 = C42616 * C23433;
    const double C47436 = ae * C47435;
    const double C23087 =
        (3 * C47301 + C46827 * C47435 + (2 * C47295 + C46827 * C47425) * ae) /
        C46772;
    const double C47484 = C47452 + C47482;
    const double C47531 = C47530 + C47518;
    const double C554 = C548 * C47971;
    const double C2299 = C2297 + C2291;
    const double C10816 = C10808 + C10786;
    const double C31777 = C31769 + C31747;
    const double C12925 = C48075 * C2014;
    const double C33880 = C48075 * C2014;
    const double C12930 = C12924 + C12580;
    const double C33885 = C33879 + C33535;
    const double C7165 = C7164 + C7161;
    const double C12792 = C12790 + C12783;
    const double C33747 = C33745 + C33738;
    const double C23441 = C23440 + C23437;
    const double C26958 = C26952 + C26937;
    const double C38273 = C38267 + C38252;
    const double C28260 = C48075 * C6829;
    const double C39572 = C48075 * C6829;
    const double C28265 = C28259 + C13067;
    const double C39577 = C39571 + C34022;
    const double C47349 = ae * C47348;
    const double C12575 =
        (4 * C47091 + C46827 * C47348 + (3 * C47081 + C46827 * C47337) * ae) /
        C46772;
    const double C2302 = C2300 * C47971;
    const double C7162 = C2300 * C4753;
    const double C18431 = C2300 * C16115;
    const double C2015 =
        (3 * (C46860 + C47044 + C47044 + C46827 * C47128) + C47138 + C47138 +
         C46827 *
             (2 * C47128 + C47135 + C47135 +
              C46827 * (C46872 + C47131 + C47131 +
                        C46827 * (2 * ae * C46953 +
                                  C46827 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46846))))) /
        C46798;
    const double C2022 = C114 * C2009;
    const double C12929 = C10360 * C2009;
    const double C33884 = C31321 * C2009;
    const double C42888 = C42616 * C2009;
    const double C6830 =
        (3 * (C47172 + C47181 + C47181 + C46827 * C47278) + C47291 + C47291 +
         C46827 *
             (2 * C47278 + C47288 + C47288 +
              C46827 * (C47268 + C47284 + C47284 +
                        C46827 * (2 * ae * C47270 +
                                  C46827 * C46968 * C46834 *
                                      (C46864 * C46865 +
                                       C46831 * bs[8] * std::pow(C46825, 8)) *
                                      C46830)))) /
        C46798;
    const double C6833 = C114 * C6828;
    const double C13069 = C10360 * C6828;
    const double C34024 = C31321 * C6828;
    const double C44333 = C42616 * C6828;
    const double C47384 = C47383 + C47376;
    const double C23088 =
        (3 * (C47201 + C47299 + C47299 + C46827 * C47426) + C47436 + C47436 +
         C46827 *
             (2 * C47426 + C47433 + C47433 +
              C46827 * (C47389 + C47429 + C47429 +
                        C46827 * (2 * ae * C47399 +
                                  C46827 * (C46870 + (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                         C46830 * C46978))))) /
        C46798;
    const double C23090 = C114 * C23087;
    const double C28264 = C10360 * C23087;
    const double C39576 = C31321 * C23087;
    const double C43542 = C42616 * C23087;
    const double C47485 = C47484 + C47477;
    const double C47533 = ae * C47531;
    const double C47532 = C46827 * C47531;
    const double C2301 = C2299 * C47971;
    const double C12932 = C12930 + C12580;
    const double C33887 = C33885 + C33535;
    const double C7166 = C7165 * C48073;
    const double C18430 = C7165 * C48073;
    const double C28267 = C28265 + C13067;
    const double C39579 = C39577 + C34022;
    const double C12577 =
        (4 * (2 * C47082 + C47089 + C47089 + C46827 * C47338) + C47349 +
         C47349 +
         C46827 * (3 * C47338 + C47346 + C47346 +
                   C46827 * (2 * C47330 + C47342 + C47342 +
                             C46827 * (C46858 + C47334 + C47334 +
                                       C46827 * (2 * ae * C46926 +
                                                 C46827 * C46870))))) /
        C46798;
    const double C12585 = C10360 * C12575;
    const double C33540 = C31321 * C12575;
    const double C44183 = C42614 * C12575;
    const double C44179 = C42616 * C12575;
    const double C47385 = ae * C47384;
    const double C12576 =
        (4 * C47114 + C46827 * C47384 + (3 * C47104 + C46827 * C47373) * ae) /
        C46772;
    const double C47486 = ae * C47485;
    const double C27800 =
        (4 * C47264 + C46827 * C47485 + (3 * C47255 + C46827 * C47475) * ae) /
        C46772;
    const double C47534 = C47492 + C47532;
    const double C12934 = C12932 + C12925;
    const double C33889 = C33887 + C33880;
    const double C28269 = C28267 + C28260;
    const double C39581 = C39579 + C39572;
    const double C12578 =
        (4 * (2 * C47105 + C47112 + C47112 + C46827 * C47374) + C47385 +
         C47385 +
         C46827 * (3 * C47374 + C47382 + C47382 +
                   C46827 * (2 * C47366 + C47378 + C47378 +
                             C46827 * (C47203 + C47370 + C47370 +
                                       C46827 * (2 * ae * C47223 +
                                                 C46827 * C46834 *
                                                     (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                     C46830))))) /
        C46798;
    const double C12587 = C10360 * C12576;
    const double C33542 = C31321 * C12576;
    const double C44434 = C42616 * C12576;
    const double C27801 =
        (4 * (2 * C47252 + C47262 + C47262 + C46827 * C47473) + C47486 +
         C47486 +
         C46827 * (3 * C47473 + C47483 + C47483 +
                   C46827 * (2 * C47464 + C47479 + C47479 +
                             C46827 * (C47451 + C47472 + C47472 +
                                       C46827 * (2 * ae * C47454 +
                                                 C46827 * C46968 *
                                                     (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                     C46830))))) /
        C46798;
    const double C27804 = C10360 * C27800;
    const double C39116 = C31321 * C27800;
    const double C44535 = C42616 * C27800;
    const double C47535 = C47534 + C47526;
    const double C47536 = ae * C47535;
    const double C44176 =
        (5 * C47348 + C46827 * C47535 + (4 * C47337 + C46827 * C47522) * ae) /
        C46772;
    const double C44177 =
        (5 * (3 * C47338 + C47346 + C47346 + C46827 * C47524) + C47536 +
         C47536 +
         C46827 *
             (4 * C47524 + C47533 + C47533 +
              C46827 *
                  (3 * C47516 + C47529 + C47529 +
                   C46827 * (2 * C47508 + C47523 + C47523 +
                             C46827 * (C46870 + C47512 + C47512 +
                                       C46827 * (2 * ae * C46948 +
                                                 C46827 *
                                                     (C46864 * C46865 +
                                                      C46831 * bs[8] *
                                                          std::pow(C46825, 8)) *
                                                     C46830)))))) /
        C46798;
    const double C44184 = C42616 * C44176;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C47826 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C47833 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C2878) *
              C47744 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C47833 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C47826 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C2878) *
              C47753 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C47826 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C47833 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C2878) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C48024 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C47826 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C48024) *
               C47833 +
           (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
             C362 * C104 + C363 * C105) *
                C48024 -
            (C1597 * C105 + C1598 * C104 +
             (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
                C47872) *
               C2878) *
              C2618 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
               C47826 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C48024 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47833 +
           ((C1598 * C103 + C1597 * C104 +
             (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C47971 * C105) *
                C47872 -
            (C365 * C105 + C363 * C104 + C362 * C103) * C48024) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C48101 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C48097 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48087 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C47785 * C48065) *
              C2618 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C48097 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48101 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48087 +
           (C1436 * C103 + C1435 * C104 +
            (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C47971 * C105) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C2510 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C47830) *
              C48100 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C47830 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C2510) *
              C48093 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C2510 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C47830) *
              C48080 +
          ((C364 * C103 + C668 * C104 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C47971 * C105) *
               C47785 * C47830 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C2510) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C48095 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C48084 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
             C551 * C104 + C552 * C105) *
                C48058) *
               C2510 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C48084 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C48095 -
            (C2183 * C105 + C2184 * C104 +
             (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
                C48058) *
               C47830) *
              C2618 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C48084 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C48095 -
            (C554 * C105 + C552 * C104 + C551 * C103) * C48058) *
               C2510 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C48095 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C48084 +
            (C2184 * C103 + C2183 * C104 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C47971 * C105) *
                C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C48024 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C2510 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C48024) *
               C47830) *
              C47744 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
               C2510 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C48024 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47830) *
              C47753 +
          (((C170 * C103 + C171 * C104 + C172 * C105) * C48024 -
            (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
               C2510 +
           ((C961 * C103 + C962 * C104 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C47971 * C105) *
                C47872 -
            (C668 * C105 + C364 * C104 + C360 * C103) * C48024) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C2510 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C47830) *
              C48100 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C47830 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C2510) *
              C48093 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C2510 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C47830) *
              C48080 +
          ((C364 * C103 + C668 * C104 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C47971 * C105) *
               C47785 * C47830 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C2510) *
              C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C48101 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C48097 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48087 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C47785 * C48065) *
              C2618 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C48097 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48101 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48087 +
           (C1436 * C103 + C1435 * C104 +
            (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C47971 * C105) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C3272 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C47826 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C3272) *
               C47833 +
           (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
             C362 * C104 + C363 * C105) *
                C3272 -
            (C1597 * C105 + C1598 * C104 +
             (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
                C47872) *
               C2878) *
              C48009 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
               C47826 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C3272 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47833 +
           ((C1598 * C103 + C1597 * C104 +
             (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C47971 * C105) *
                C47872 -
            (C365 * C105 + C363 * C104 + C362 * C103) * C3272) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47868 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47875 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C3780) *
              C47826 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C47875 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47868 -
           (C2183 * C105 + C2184 * C104 +
            (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
               C3780) *
              C47833 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47868 -
           (C1597 * C105 + C1598 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C47875 +
           ((C113 * C1286 + C1314 + C1314 + C47988 * C1304) * C47971 * C103 +
            (C113 * C1287 + C1315 + C1315 + C47988 * C1305) * C47971 * C104 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C47971 * C105) *
               C3780) *
              C2878) *
         C47739) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C3272 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C48101 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C47872 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C3272) *
              C48097 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C3272 -
           (C1597 * C105 + C1598 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C47872) *
              C48087 +
          (((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C47971 * C103 +
            (C113 * C1697 + C1707 + C1707 + C47988 * C1703) * C47971 * C104 +
            (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C47971 * C105) *
               C47872 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C3272 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C2510 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C3272) *
               C47830) *
              C48091 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
               C2510 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C3272 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47830) *
              C48078 +
          (((C170 * C103 + C171 * C104 + C172 * C105) * C3272 -
            (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
               C2510 +
           ((C961 * C103 + C962 * C104 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C47971 * C105) *
                C47872 -
            (C668 * C105 + C364 * C104 + C360 * C103) * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48102 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C48099 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48090 -
           (C2301 * C105 + C2302 * C104 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C47971 * C103) *
               C48071) *
              C2510 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C48099 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C48102 -
           (C2183 * C105 + C2184 * C104 +
            (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
               C48090 +
           ((C113 * C2400 + C2410 + C2410 + C47988 * C2406) * C47971 * C103 +
            (C113 * C2401 + C2411 + C2411 + C47988 * C2407) * C47971 * C104 +
            (C113 * C2402 + C2412 + C2412 + C47988 * C2408) * C47971 * C105) *
               C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C47868 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47875 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
             C551 * C104 + C552 * C105) *
                C3780) *
               C2510 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47875 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C47868 -
            (C2183 * C105 + C2184 * C104 +
             (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
                C3780) *
               C47830) *
              C48009 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47875 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C47868 -
            (C554 * C105 + C552 * C104 + C551 * C103) * C3780) *
               C2510 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C47868 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47875 +
            (C2184 * C103 + C2183 * C104 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C47971 * C105) *
                C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C3272 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C2510 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C3272) *
               C47830) *
              C48091 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
               C2510 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C3272 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47830) *
              C48078 +
          (((C170 * C103 + C171 * C104 + C172 * C105) * C3272 -
            (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
               C2510 +
           ((C961 * C103 + C962 * C104 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C47971 * C105) *
                C47872 -
            (C668 * C105 + C364 * C104 + C360 * C103) * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C3272 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C48101 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C47872 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C3272) *
              C48097 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C3272 -
           (C1597 * C105 + C1598 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C47872) *
              C48087 +
          (((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C47971 * C103 +
            (C113 * C1697 + C1707 + C1707 + C47988 * C1703) * C47971 * C104 +
            (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C47971 * C105) *
               C47872 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C1414 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C1415 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C1416 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C47785 * C48065) *
              C48009 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C1415 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C1414 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C1416 +
           (C1436 * C103 + C1435 * C104 +
            (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C47971 * C105) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C48023 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C47830) *
              C654 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C47830 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48023) *
              C655 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C48023 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C47830) *
              C656 +
          ((C364 * C103 + C668 * C104 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C47971 * C105) *
               C47785 * C47830 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C48023) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C1818 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C1819 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
             C551 * C104 + C552 * C105) *
                C48058) *
               C48023 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C1819 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C1818 -
            (C2183 * C105 + C2184 * C104 +
             (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
                C48058) *
               C47830) *
              C48009 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C1819 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C1818 -
            (C554 * C105 + C552 * C104 + C551 * C103) * C48058) *
               C48023 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C1818 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C1819 +
            (C2184 * C103 + C2183 * C104 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C47971 * C105) *
                C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48024 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C1414 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C47872 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C48024) *
              C1415 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C48024 -
           (C1597 * C105 + C1598 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C47872) *
              C1416 +
          (((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C47971 * C103 +
            (C113 * C1697 + C1707 + C1707 + C47988 * C1703) * C47971 * C104 +
            (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C47971 * C105) *
               C47872 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C48024 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C48023 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C48024) *
               C47830) *
              C286 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
               C48023 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C48024 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47830) *
              C287 +
          (((C170 * C103 + C171 * C104 + C172 * C105) * C48024 -
            (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
               C48023 +
           ((C961 * C103 + C962 * C104 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C47971 * C105) *
                C47872 -
            (C668 * C105 + C364 * C104 + C360 * C103) * C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C2282 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C2283 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C2284 -
           (C2301 * C105 + C2302 * C104 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C47971 * C103) *
               C48071) *
              C48023 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C2283 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C2282 -
           (C2183 * C105 + C2184 * C104 +
            (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
               C2284 +
           ((C113 * C2400 + C2410 + C2410 + C47988 * C2406) * C47971 * C103 +
            (C113 * C2401 + C2411 + C2411 + C47988 * C2407) * C47971 * C104 +
            (C113 * C2402 + C2412 + C2412 + C47988 * C2408) * C47971 * C105) *
               C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
               C169 * C104 + C170 * C105) *
                  C47785 * C47767 * C108 -
              (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C47767 *
                  C109 +
              (C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C47767 *
                  C110 -
              (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C47767 *
                  C111 +
              (C172 * C103 + C173 * C104 +
               (C113 * C121 + C153 + C153 + C47988 * C135) * C47971 * C105) *
                  C47785 * C47767 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
                C169 * C104 + C170 * C105) *
                   C47785 * C48094 -
               (C360 * C105 + C361 * C104 +
                (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                   C47785 * C48082 +
               ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
                C362 * C104 + C363 * C105) *
                   C47785 * C48055) *
                  C286 +
              ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C48082 -
               (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48094 -
               (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
                  C287 +
              ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C48094 -
               ((C113 * C297 + C340 + C340 + C47988 * C317) * C47971 * C105 +
                C364 * C104 + C360 * C103) *
                   C47785 * C48082 +
               (C363 * C103 + C365 * C104 +
                (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
                   C47785 * C48055) *
                  C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48095 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C47767 * C286 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C48084 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C48095 -
           (C554 * C105 + C552 * C104 + C551 * C103) * C48058) *
              C47767 * C287 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C48095 -
           ((C113 * C486 + C529 + C529 + C47988 * C506) * C47971 * C105 +
            C553 * C104 + C549 * C103) *
               C48084 +
           (C552 * C103 + C554 * C104 +
            (C113 * C487 + C530 + C530 + C47988 * C507) * C47971 * C105) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C1072 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C1073 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48055) *
              C48091 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C1073 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C1072 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
              C48078 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C1072 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C1073 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C47785 * C1140 -
          (C360 * C105 + C361 * C104 +
           (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
              C47785 * C1141 +
          ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
           C362 * C104 + C363 * C105) *
              C47785 * C1142 -
          ((C113 * C1146 + C1165 + C1165 + C47988 * C1158) * C47971 * C105 +
           (C113 * C1147 + C1166 + C1166 + C47988 * C1159) * C47971 * C104 +
           (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
              C47785 * C1143 +
          ((C113 * C1149 + C1168 + C1168 + C47988 * C1161) * C47971 * C103 +
           (C113 * C1150 + C1169 + C1169 + C47988 * C1162) * C47971 * C104 +
           (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C47971 * C105) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48095 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C1072 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C48084 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C48095 -
           ((C113 * C1280 + C1308 + C1308 + C47988 * C1298) * C47971 * C105 +
            (C113 * C1281 + C1309 + C1309 + C47988 * C1299) * C47971 * C104 +
            (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
               C48058) *
              C1073 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C48095 -
           ((C113 * C1283 + C1311 + C1311 + C47988 * C1301) * C47971 * C105 +
            (C113 * C1284 + C1312 + C1312 + C47988 * C1302) * C47971 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C48084 +
           ((C113 * C1286 + C1314 + C1314 + C47988 * C1304) * C47971 * C103 +
            (C113 * C1287 + C1315 + C1315 + C47988 * C1305) * C47971 * C104 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C47971 * C105) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C1818 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C47767 * C48091 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C1819 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C1818 -
           (C554 * C105 + C552 * C104 + C551 * C103) * C48058) *
              C47767 * C48078 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C1818 -
           (C778 * C105 + C553 * C104 + C549 * C103) * C1819 +
           (C552 * C103 + C554 * C104 +
            (C113 * C487 + C530 + C530 + C47988 * C507) * C47971 * C105) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C1818 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C48094 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C1819 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C1818 -
           ((C113 * C1280 + C1308 + C1308 + C47988 * C1298) * C47971 * C105 +
            (C113 * C1281 + C1309 + C1309 + C47988 * C1299) * C47971 * C104 +
            (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
               C48058) *
              C48082 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C1818 -
           (C1597 * C105 + C1598 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C1819 +
           ((C113 * C1286 + C1314 + C1314 + C47988 * C1304) * C47971 * C103 +
            (C113 * C1287 + C1315 + C1315 + C47988 * C1305) * C47971 * C104 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C47971 * C105) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C1993 -
          (C549 * C105 + C550 * C104 +
           (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
              C1994 +
          ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
           C551 * C104 + C552 * C105) *
              C1995 -
          ((C113 * C1998 + C2017 + C2017 + C47988 * C2010) * C47971 * C105 +
           (C113 * C1999 + C2018 + C2018 + C47988 * C2011) * C47971 * C104 +
           (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C47971 * C103) *
              C1996 +
          ((C113 * C2001 + C2020 + C2020 + C47988 * C2013) * C47971 * C103 +
           (C113 * C2002 + C2021 + C2021 + C47988 * C2014) * C47971 * C104 +
           (C113 * C2003 + C2022 + C2022 + C47988 * C2015) * C47971 * C105) *
              C1997) *
         C47767 * C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C48024 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C1072 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C48024) *
               C1073 +
           (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
             C362 * C104 + C363 * C105) *
                C48024 -
            (C1597 * C105 + C1598 * C104 +
             (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
                C47872) *
               C48055) *
              C48009 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
               C1072 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C48024 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C1073 +
           ((C1598 * C103 + C1597 * C104 +
             (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C47971 * C105) *
                C47872 -
            (C365 * C105 + C363 * C104 + C362 * C103) * C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48024 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C47767 * C654 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
              C47767 * C655 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C48024 -
           (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
              C47767 * C656 +
          ((C553 * C103 + C778 * C104 +
            (C113 * C768 + C774 + C774 + C47988 * C770) * C47971 * C105) *
               C47872 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C2282 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C2283 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C2284 -
           (C2301 * C105 + C2302 * C104 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C47971 * C103) *
               C48071) *
              C47767 * C48009 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C2283 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C2282 -
           (C554 * C105 + C552 * C104 + C551 * C103) * C2284 +
           (C2302 * C103 + C2301 * C104 +
            (C113 * C2286 + C2294 + C2294 + C47988 * C2288) * C47971 * C105) *
               C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C48094 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C48082 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48055) *
              C286 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C48082 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48094 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
              C287 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C48094 -
           ((C113 * C297 + C340 + C340 + C47988 * C317) * C47971 * C105 +
            C364 * C104 + C360 * C103) *
               C47785 * C48082 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C47785 * C47767 * C108 -
          (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C47767 * C109 +
          (C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C47767 * C110 -
          (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C47767 * C111 +
          (C172 * C103 + C173 * C104 +
           (C113 * C121 + C153 + C153 + C47988 * C135) * C47971 * C105) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C1072 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C1073 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48055) *
              C48091 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C1073 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C1072 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
              C48078 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C1072 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C1073 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C47785 * C1140 -
          (C360 * C105 + C361 * C104 +
           (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
              C47785 * C1141 +
          ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
           C362 * C104 + C363 * C105) *
              C47785 * C1142 -
          ((C113 * C1146 + C1165 + C1165 + C47988 * C1158) * C47971 * C105 +
           (C113 * C1147 + C1166 + C1166 + C47988 * C1159) * C47971 * C104 +
           (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
              C47785 * C1143 +
          ((C113 * C1149 + C1168 + C1168 + C47988 * C1161) * C47971 * C103 +
           (C113 * C1150 + C1169 + C1169 + C47988 * C1162) * C47971 * C104 +
           (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C47971 * C105) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C1818 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C47767 * C48091 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C1819 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C1818 -
           (C554 * C105 + C552 * C104 + C551 * C103) * C48058) *
              C47767 * C48078 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C1818 -
           (C778 * C105 + C553 * C104 + C549 * C103) * C1819 +
           (C552 * C103 + C554 * C104 +
            (C113 * C487 + C530 + C530 + C47988 * C507) * C47971 * C105) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C1818 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C48094 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C1819 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C1818 -
           ((C113 * C1280 + C1308 + C1308 + C47988 * C1298) * C47971 * C105 +
            (C113 * C1281 + C1309 + C1309 + C47988 * C1299) * C47971 * C104 +
            (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
               C48058) *
              C48082 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C1818 -
           (C1597 * C105 + C1598 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C1819 +
           ((C113 * C1286 + C1314 + C1314 + C47988 * C1304) * C47971 * C103 +
            (C113 * C1287 + C1315 + C1315 + C47988 * C1305) * C47971 * C104 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C47971 * C105) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C3272 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C48023 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C3272) *
               C47830) *
              C47744 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
               C48023 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C3272 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47830) *
              C47753 +
          (((C170 * C103 + C171 * C104 + C172 * C105) * C3272 -
            (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
               C48023 +
           ((C961 * C103 + C962 * C104 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C47971 * C105) *
                C47872 -
            (C668 * C105 + C364 * C104 + C360 * C103) * C3272) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C47868 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47875 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
             C551 * C104 + C552 * C105) *
                C3780) *
               C48023 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47875 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C47868 -
            (C2183 * C105 + C2184 * C104 +
             (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
                C3780) *
               C47830) *
              C2618 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47875 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C47868 -
            (C554 * C105 + C552 * C104 + C551 * C103) * C3780) *
               C48023 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C47868 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47875 +
            (C2184 * C103 + C2183 * C104 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C47971 * C105) *
                C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C3272 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C48094 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C3272) *
               C48082 +
           (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
             C362 * C104 + C363 * C105) *
                C3272 -
            (C1597 * C105 + C1598 * C104 +
             (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
                C47872) *
               C48055) *
              C2618 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
               C48094 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C3272 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C48082 +
           ((C1598 * C103 + C1597 * C104 +
             (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C47971 * C105) *
                C47872 -
            (C365 * C105 + C363 * C104 + C362 * C103) * C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C3272 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C47767 * C48100 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
              C47767 * C48093 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C3272 -
           (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
              C47767 * C48080 +
          ((C553 * C103 + C778 * C104 +
            (C113 * C768 + C774 + C774 + C47988 * C770) * C47971 * C105) *
               C47872 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48102 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C48099 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48090 -
           (C2301 * C105 + C2302 * C104 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C47971 * C103) *
               C48071) *
              C47767 * C2618 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C48099 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C48102 -
           (C554 * C105 + C552 * C104 + C551 * C103) * C48090 +
           (C2302 * C103 + C2301 * C104 +
            (C113 * C2286 + C2294 + C2294 + C47988 * C2288) * C47971 * C105) *
               C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47868 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47875 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C3780) *
              C47767 * C47744 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C47875 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47868 -
           (C554 * C105 + C552 * C104 + C551 * C103) * C3780) *
              C47767 * C47753 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47868 -
           (C778 * C105 + C553 * C104 + C549 * C103) * C47875 +
           (C552 * C103 + C554 * C104 +
            (C113 * C487 + C530 + C530 + C47988 * C507) * C47971 * C105) *
               C3780) *
              C47767 * C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C3272 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C47767 * C48100 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
              C47767 * C48093 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C3272 -
           (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
              C47767 * C48080 +
          ((C553 * C103 + C778 * C104 +
            (C113 * C768 + C774 + C774 + C47988 * C770) * C47971 * C105) *
               C47872 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C3272 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C48094 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C3272) *
               C48082 +
           (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
             C362 * C104 + C363 * C105) *
                C3272 -
            (C1597 * C105 + C1598 * C104 +
             (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
                C47872) *
               C48055) *
              C2618 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C3272) *
               C48094 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C3272 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C48082 +
           ((C1598 * C103 + C1597 * C104 +
             (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C47971 * C105) *
                C47872 -
            (C365 * C105 + C363 * C104 + C362 * C103) * C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C48023 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C47830) *
              C654 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C47830 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48023) *
              C655 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C48023 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C47830) *
              C656 +
          ((C364 * C103 + C668 * C104 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C47971 * C105) *
               C47785 * C47830 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C48023) *
              C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C1414 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C1415 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C1416 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C47785 * C48065) *
              C48009 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C1415 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C1414 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C1416 +
           (C1436 * C103 + C1435 * C104 +
            (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C47971 * C105) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C48024 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C48023 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C48024) *
               C47830) *
              C286 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
               C48023 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C48024 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C47830) *
              C287 +
          (((C170 * C103 + C171 * C104 + C172 * C105) * C48024 -
            (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
               C48023 +
           ((C961 * C103 + C962 * C104 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C47971 * C105) *
                C47872 -
            (C668 * C105 + C364 * C104 + C360 * C103) * C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48024 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C1414 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C47872 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C48024) *
              C1415 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C48024 -
           (C1597 * C105 + C1598 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C47872) *
              C1416 +
          (((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C47971 * C103 +
            (C113 * C1697 + C1707 + C1707 + C47988 * C1703) * C47971 * C104 +
            (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C47971 * C105) *
               C47872 -
           (C1435 * C105 + C1436 * C104 +
            (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C48094 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C48082 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48055) *
              C286 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C48082 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48094 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
              C287 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C48094 -
           ((C113 * C297 + C340 + C340 + C47988 * C317) * C47971 * C105 +
            C364 * C104 + C360 * C103) *
               C47785 * C48082 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C47785 * C47767 * C108 -
          (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C47767 * C109 +
          (C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C47767 * C110 -
          (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C47767 * C111 +
          (C172 * C103 + C173 * C104 +
           (C113 * C121 + C153 + C153 + C47988 * C135) * C47971 * C105) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48095 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C47767 * C286 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C48084 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C48095 -
           (C554 * C105 + C552 * C104 + C551 * C103) * C48058) *
              C47767 * C287 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C48095 -
           ((C113 * C486 + C529 + C529 + C47988 * C506) * C47971 * C105 +
            C553 * C104 + C549 * C103) *
               C48084 +
           (C552 * C103 + C554 * C104 +
            (C113 * C487 + C530 + C530 + C47988 * C507) * C47971 * C105) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C1072 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C1073 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48055) *
              C48091 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C1073 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C1072 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
              C48078 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C1072 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C1073 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C47785 * C1140 -
          (C360 * C105 + C361 * C104 +
           (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
              C47785 * C1141 +
          ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
           C362 * C104 + C363 * C105) *
              C47785 * C1142 -
          ((C113 * C1146 + C1165 + C1165 + C47988 * C1158) * C47971 * C105 +
           (C113 * C1147 + C1166 + C1166 + C47988 * C1159) * C47971 * C104 +
           (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
              C47785 * C1143 +
          ((C113 * C1149 + C1168 + C1168 + C47988 * C1161) * C47971 * C103 +
           (C113 * C1150 + C1169 + C1169 + C47988 * C1162) * C47971 * C104 +
           (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C47971 * C105) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48095 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C47971 * C103 +
            C551 * C104 + C552 * C105) *
               C48058) *
              C1072 +
          (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
            C960 * C104 + C961 * C105) *
               C48084 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C48095 -
           ((C113 * C1280 + C1308 + C1308 + C47988 * C1298) * C47971 * C105 +
            (C113 * C1281 + C1309 + C1309 + C47988 * C1299) * C47971 * C104 +
            (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C47971 * C103) *
               C48058) *
              C1073 +
          (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C48095 -
           ((C113 * C1283 + C1311 + C1311 + C47988 * C1301) * C47971 * C105 +
            (C113 * C1284 + C1312 + C1312 + C47988 * C1302) * C47971 * C104 +
            (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
               C48084 +
           ((C113 * C1286 + C1314 + C1314 + C47988 * C1304) * C47971 * C103 +
            (C113 * C1287 + C1315 + C1315 + C47988 * C1305) * C47971 * C104 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C47971 * C105) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C48024 -
           (C549 * C105 + C550 * C104 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
               C47872) *
              C47767 * C654 +
          ((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
              C47767 * C655 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C48024 -
           (C778 * C105 + C553 * C104 + C549 * C103) * C47872) *
              C47767 * C656 +
          ((C553 * C103 + C778 * C104 +
            (C113 * C768 + C774 + C774 + C47988 * C770) * C47971 * C105) *
               C47872 -
           (C173 * C105 + C172 * C104 + C171 * C103) * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
             C169 * C104 + C170 * C105) *
                C48024 -
            (C549 * C105 + C550 * C104 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C47971 * C103) *
                C47872) *
               C1072 +
           (((C113 * C924 + C940 + C940 + C47988 * C934) * C47971 * C103 +
             C960 * C104 + C961 * C105) *
                C47872 -
            (C360 * C105 + C361 * C104 +
             (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
                C48024) *
               C1073 +
           (((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
             C362 * C104 + C363 * C105) *
                C48024 -
            (C1597 * C105 + C1598 * C104 +
             (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C47971 * C103) *
                C47872) *
               C48055) *
              C48009 +
          (((C550 * C103 + C549 * C104 + C553 * C105) * C47872 -
            (C171 * C105 + C170 * C104 + C169 * C103) * C48024) *
               C1072 +
           ((C361 * C103 + C360 * C104 + C364 * C105) * C48024 -
            (C962 * C105 + C961 * C104 + C960 * C103) * C47872) *
               C1073 +
           ((C1598 * C103 + C1597 * C104 +
             (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C47971 * C105) *
                C47872 -
            (C365 * C105 + C363 * C104 + C362 * C103) * C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C47785 * C47767 * C108 -
          (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C47767 * C109 +
          (C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C47767 * C110 -
          (C173 * C105 + C172 * C104 + C171 * C103) * C47785 * C47767 * C111 +
          (C172 * C103 + C173 * C104 +
           (C113 * C121 + C153 + C153 + C47988 * C135) * C47971 * C105) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C48094 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C48082 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48055) *
              C286 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C48082 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C48094 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
              C287 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C48094 -
           ((C113 * C297 + C340 + C340 + C47988 * C317) * C47971 * C105 +
            C364 * C104 + C360 * C103) *
               C47785 * C48082 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
            C169 * C104 + C170 * C105) *
               C47785 * C1072 -
           (C360 * C105 + C361 * C104 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
               C47785 * C1073 +
           ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
            C362 * C104 + C363 * C105) *
               C47785 * C48055) *
              C48091 +
          ((C361 * C103 + C360 * C104 + C364 * C105) * C47785 * C1073 -
           (C171 * C105 + C170 * C104 + C169 * C103) * C47785 * C1072 -
           (C365 * C105 + C363 * C104 + C362 * C103) * C47785 * C48055) *
              C48078 +
          ((C170 * C103 + C171 * C104 + C172 * C105) * C47785 * C1072 -
           (C668 * C105 + C364 * C104 + C360 * C103) * C47785 * C1073 +
           (C363 * C103 + C365 * C104 +
            (C113 * C298 + C341 + C341 + C47988 * C318) * C47971 * C105) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C47971 * C103 +
           C169 * C104 + C170 * C105) *
              C47785 * C1140 -
          (C360 * C105 + C361 * C104 +
           (C113 * C291 + C326 + C326 + C47988 * C311) * C47971 * C103) *
              C47785 * C1141 +
          ((C113 * C292 + C327 + C327 + C47988 * C312) * C47971 * C103 +
           C362 * C104 + C363 * C105) *
              C47785 * C1142 -
          ((C113 * C1146 + C1165 + C1165 + C47988 * C1158) * C47971 * C105 +
           (C113 * C1147 + C1166 + C1166 + C47988 * C1159) * C47971 * C104 +
           (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C47971 * C103) *
              C47785 * C1143 +
          ((C113 * C1149 + C1168 + C1168 + C47988 * C1161) * C47971 * C103 +
           (C113 * C1150 + C1169 + C1169 + C47988 * C1162) * C47971 * C104 +
           (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C47971 * C105) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                     C4928 * C48073) *
                        C4755 +
                    (C4758 + C4759) * C48042) *
                       C47785 * C47826 -
                   ((C4914 + C4915) * C48042 +
                    (C4929 * C48073 + C4928 * C4753) * C4755) *
                       C47785 * C47833 +
                   ((C4929 * C4753 + C5799 * C48073) * C4755 +
                    (C4918 + C4919) * C48042) *
                       C47785 * C2878) *
                      C47744 +
                  (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) *
                       C47785 * C47833 -
                   ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) *
                       C47785 * C47826 -
                   ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) *
                       C47785 * C2878) *
                      C47753 +
                  (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) *
                       C47785 * C47826 -
                   ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) *
                       C47785 * C47833 +
                   ((C4923 + C4922) * C4755 +
                    (C359 * C4753 +
                     (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                        C48042) *
                       C47785 * C2878) *
                      C2881)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C48024 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C47826 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C48024) *
               C47833 +
           (((C4929 * C4753 + C5799 * C48073) * C4755 +
             (C4918 + C4919) * C48042) *
                C48024 -
            ((C6308 + C6304) * C48042 +
             (C6451 * C48073 + C5973 * C4753) * C4755) *
                C47872) *
               C2878) *
              C2618 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
               C47826 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C48024 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47833 +
           (((C6304 + C6308) * C4755 +
             (C1595 * C4753 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C48024) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C48101 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C48097 +
           ((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48087 -
           ((C6106 + C6107) * C48042 +
            (C5801 * C48073 + C5799 * C4753) * C4755) *
               C47785 * C48065) *
              C2618 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C48097 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C48101 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48087 +
           ((C6107 + C6106) * C4755 +
            (C1433 * C4753 +
             (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                C48042) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C2510 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C47830) *
              C48100 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C47830 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C2510) *
              C48093 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C2510 -
           ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C47785 *
               C47830) *
              C48080 +
          (((C5215 + C5214) * C4755 +
            (C667 * C4753 +
             (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                C48042) *
               C47785 * C47830 -
           ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C47785 *
               C2510) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C48095 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C48084 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
              C5972 * C48073) *
                 C4755 +
             (C5078 + C5079) * C48042) *
                C48058) *
               C2510 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C48084 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C48095 -
            ((C7028 + C7029) * C48042 +
             (C5975 * C48073 + C5972 * C4753) * C4755) *
                C48058) *
               C47830) *
              C2618 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C48084 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48095 -
            ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C48058) *
               C2510 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C48095 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C48084 +
            ((C7029 + C7028) * C4755 +
             (C2181 * C4753 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C48024 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C2510 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C48024) *
               C47830) *
              C47744 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
               C2510 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C48024 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47830) *
              C47753 +
          ((((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C48024 -
            ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
               C2510 +
           (((C5547 + C5546) * C4755 +
             (C959 * C4753 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C48024) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                     C4928 * C48073) *
                        C4755 +
                    (C4758 + C4759) * C48042) *
                       C47785 * C2510 -
                   ((C4914 + C4915) * C48042 +
                    (C4929 * C48073 + C4928 * C4753) * C4755) *
                       C47785 * C47830) *
                      C48100 +
                  (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) *
                       C47785 * C47830 -
                   ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) *
                       C47785 * C2510) *
                      C48093 +
                  (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) *
                       C47785 * C2510 -
                   ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) *
                       C47785 * C47830) *
                      C48080 +
                  (((C5215 + C5214) * C4755 +
                    (C667 * C4753 +
                     (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                        C48042) *
                       C47785 * C47830 -
                   ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) *
                       C47785 * C2510) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                     C4928 * C48073) *
                        C4755 +
                    (C4758 + C4759) * C48042) *
                       C47785 * C48101 -
                   ((C4914 + C4915) * C48042 +
                    (C4929 * C48073 + C4928 * C4753) * C4755) *
                       C47785 * C48097 +
                   ((C4929 * C4753 + C5799 * C48073) * C4755 +
                    (C4918 + C4919) * C48042) *
                       C47785 * C48087 -
                   ((C6106 + C6107) * C48042 +
                    (C5801 * C48073 + C5799 * C4753) * C4755) *
                       C47785 * C48065) *
                      C2618 +
                  (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) *
                       C47785 * C48097 -
                   ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) *
                       C47785 * C48101 -
                   ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) *
                       C47785 * C48087 +
                   ((C6107 + C6106) * C4755 +
                    (C1433 * C4753 +
                     (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                        C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C3272 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C47826 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C3272) *
               C47833 +
           (((C4929 * C4753 + C5799 * C48073) * C4755 +
             (C4918 + C4919) * C48042) *
                C3272 -
            ((C6308 + C6304) * C48042 +
             (C6451 * C48073 + C5973 * C4753) * C4755) *
                C47872) *
               C2878) *
              C48009 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
               C47826 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C3272 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47833 +
           (((C6304 + C6308) * C4755 +
             (C1595 * C4753 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C3272) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                     C4928 * C48073) *
                        C4755 +
                    (C4758 + C4759) * C48042) *
                       C47868 -
                   ((C5076 + C5077) * C48042 +
                    (C5550 * C48073 +
                     (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                        C4755) *
                       C47875 +
                   (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
                     C5972 * C48073) *
                        C4755 +
                    (C5078 + C5079) * C48042) *
                       C3780) *
                      C47826 +
                  (((C5550 * C4753 + C5973 * C48073) * C4755 +
                    (C5544 + C5545) * C48042) *
                       C47875 -
                   ((C4914 + C4915) * C48042 +
                    (C4929 * C48073 + C4928 * C4753) * C4755) *
                       C47868 -
                   ((C7028 + C7029) * C48042 +
                    (C5975 * C48073 + C5972 * C4753) * C4755) *
                       C3780) *
                      C47833 +
                  (((C4929 * C4753 + C5799 * C48073) * C4755 +
                    (C4918 + C4919) * C48042) *
                       C47868 -
                   ((C6308 + C6304) * C48042 +
                    (C6451 * C48073 + C5973 * C4753) * C4755) *
                       C47875 +
                   ((C5975 * C4753 +
                     (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                        C4755 +
                    (C5974 * C4753 +
                     (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                        C48042) *
                       C3780) *
                      C2878) *
                 C47739) /
                (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C3272 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C48101 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C47872 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C3272) *
              C48097 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C3272 -
           ((C6308 + C6304) * C48042 +
            (C6451 * C48073 + C5973 * C4753) * C4755) *
               C47872) *
              C48087 +
          (((C6451 * C4753 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C4755 +
            (C6307 * C4753 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C6106 + C6107) * C48042 +
            (C5801 * C48073 + C5799 * C4753) * C4755) *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C3272 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C2510 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C3272) *
               C47830) *
              C48091 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
               C2510 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C3272 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47830) *
              C48078 +
          ((((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C3272 -
            ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
               C2510 +
           (((C5547 + C5546) * C4755 +
             (C959 * C4753 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48102 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C48099 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48090 -
           ((C7166 + C7162) * C48042 +
            (C7309 * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C4753) *
                C4755) *
               C48071) *
              C2510 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C48099 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C48102 -
           ((C7028 + C7029) * C48042 +
            (C5975 * C48073 + C5972 * C4753) * C4755) *
               C48090 +
           ((C7309 * C4753 +
             (C113 * C7296 + C7305 + C7305 + C47988 * C7300) * C48073) *
                C4755 +
            (C7165 * C4753 +
             (C113 * C7297 + C7306 + C7306 + C47988 * C7301) * C48073) *
                C48042) *
               C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C47868 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47875 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
              C5972 * C48073) *
                 C4755 +
             (C5078 + C5079) * C48042) *
                C3780) *
               C2510 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47875 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C47868 -
            ((C7028 + C7029) * C48042 +
             (C5975 * C48073 + C5972 * C4753) * C4755) *
                C3780) *
               C47830) *
              C48009 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47875 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47868 -
            ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C3780) *
               C2510 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47868 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47875 +
            ((C7029 + C7028) * C4755 +
             (C2181 * C4753 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C3272 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C2510 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C3272) *
               C47830) *
              C48091 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
               C2510 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C3272 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47830) *
              C48078 +
          ((((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C3272 -
            ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
               C2510 +
           (((C5547 + C5546) * C4755 +
             (C959 * C4753 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C3272 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C48101 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C47872 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C3272) *
              C48097 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C3272 -
           ((C6308 + C6304) * C48042 +
            (C6451 * C48073 + C5973 * C4753) * C4755) *
               C47872) *
              C48087 +
          (((C6451 * C4753 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C4755 +
            (C6307 * C4753 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C6106 + C6107) * C48042 +
            (C5801 * C48073 + C5799 * C4753) * C4755) *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C1414 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C1415 +
           ((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C1416 -
           ((C6106 + C6107) * C48042 +
            (C5801 * C48073 + C5799 * C4753) * C4755) *
               C47785 * C48065) *
              C48009 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C1415 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C1414 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C1416 +
           ((C6107 + C6106) * C4755 +
            (C1433 * C4753 +
             (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                C48042) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C48023 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C47830) *
              C654 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C47830 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C48023) *
              C655 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C48023 -
           ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C47785 *
               C47830) *
              C656 +
          (((C5215 + C5214) * C4755 +
            (C667 * C4753 +
             (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                C48042) *
               C47785 * C47830 -
           ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C47785 *
               C48023) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C1818 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C1819 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
              C5972 * C48073) *
                 C4755 +
             (C5078 + C5079) * C48042) *
                C48058) *
               C48023 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C1819 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C1818 -
            ((C7028 + C7029) * C48042 +
             (C5975 * C48073 + C5972 * C4753) * C4755) *
                C48058) *
               C47830) *
              C48009 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C1819 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C1818 -
            ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C48058) *
               C48023 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C1818 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C1819 +
            ((C7029 + C7028) * C4755 +
             (C2181 * C4753 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48024 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C1414 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C47872 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C48024) *
              C1415 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C48024 -
           ((C6308 + C6304) * C48042 +
            (C6451 * C48073 + C5973 * C4753) * C4755) *
               C47872) *
              C1416 +
          (((C6451 * C4753 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C4755 +
            (C6307 * C4753 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C6106 + C6107) * C48042 +
            (C5801 * C48073 + C5799 * C4753) * C4755) *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C48024 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C48023 +
           (((C5550 * C4753 +
              (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C48073) *
                 C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C48024) *
               C47830) *
              C286 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
               C48023 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C48024 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47830) *
              C287 +
          ((((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C48024 -
            ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
               C48023 +
           (((C5547 + C5546) * C4755 +
             (C959 * C4753 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C2282 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C2283 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C2284 -
           ((C7166 + C7162) * C48042 +
            (C7309 * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C4753) *
                C4755) *
               C48071) *
              C48023 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C2283 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C2282 -
           ((C7028 + C7029) * C48042 +
            (C5975 * C48073 + C5972 * C4753) * C4755) *
               C2284 +
           ((C7309 * C4753 +
             (C113 * C7296 + C7305 + C7305 + C47988 * C7300) * C48073) *
                C4755 +
            (C7165 * C4753 +
             (C113 * C7297 + C7306 + C7306 + C47988 * C7301) * C48073) *
                C48042) *
               C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                (C113 * C291 + C326 + C326 + C47988 * C311) * C48073) *
                   C4755 +
               (C4758 + C4759) * C48042) *
                  C47785 * C47767 * C108 -
              ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
                  C47767 * C109 +
              ((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
                  C47767 * C110 -
              ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C47785 *
                  C47767 * C111 +
              ((C4765 + C4764) * C4755 +
               (C168 * C4753 +
                (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
                   C48042) *
                  C47785 * C47767 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                 C4928 * C48073) *
                    C4755 +
                (C4758 + C4759) * C48042) *
                   C47785 * C48094 -
               ((C4914 + C4915) * C48042 +
                (C4929 * C48073 + C4928 * C4753) * C4755) *
                   C47785 * C48082 +
               ((C4929 * C4753 +
                 (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                    C4755 +
                (C4918 + C4919) * C48042) *
                   C47785 * C48055) *
                  C286 +
              (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
                   C48082 -
               ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
                   C48094 -
               ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
                   C48055) *
                  C287 +
              (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
                   C48094 -
               ((C359 * C48073 + C358 * C4753) * C48042 +
                (C4921 + C4920) * C4755) *
                   C47785 * C48082 +
               ((C4923 + C4922) * C4755 +
                (C359 * C4753 +
                 (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                    C48042) *
                   C47785 * C48055) *
                  C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48095 -
           ((C5076 + C5077) * C48042 +
            ((C113 * C924 + C940 + C940 + C47988 * C934) * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C47767 * C286 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C48084 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48095 -
           ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C48058) *
              C47767 * C287 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C48095 -
           ((C959 * C48073 + C547 * C4753) * C48042 + (C5081 + C5080) * C4755) *
               C48084 +
           ((C5083 + C5082) * C4755 +
            (C548 * C4753 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C1072 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C1073 +
           ((C4929 * C4753 +
             (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48055) *
              C48091 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C1073 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C1072 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48055) *
              C48078 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C1072 -
           ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C47785 *
               C1073 +
           ((C4923 + C4922) * C4755 +
            (C359 * C4753 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            C4928 * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C47785 * C1140 -
          ((C4914 + C4915) * C48042 +
           (C4929 * C48073 + C4928 * C4753) * C4755) *
              C47785 * C1141 +
          ((C4929 * C4753 + C5799 * C48073) * C4755 +
           (C4918 + C4919) * C48042) *
              C47785 * C1142 -
          ((C5800 * C48073 + C1434 * C4753) * C48042 +
           (C5801 * C48073 + C5799 * C4753) * C4755) *
              C47785 * C1143 +
          ((C5801 * C4753 +
            (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
               C4755 +
           (C5800 * C4753 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
               C48042) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48095 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C1072 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C48084 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C48095 -
           ((C5974 * C48073 + C2182 * C4753) * C48042 +
            (C5975 * C48073 + C5972 * C4753) * C4755) *
               C48058) *
              C1073 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C48095 -
           (((C113 * C1697 + C1707 + C1707 + C47988 * C1703) * C48073 +
             C1596 * C4753) *
                C48042 +
            ((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C48073 +
             C5973 * C4753) *
                C4755) *
               C48084 +
           ((C5975 * C4753 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C4755 +
            (C5974 * C4753 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C1818 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C47767 * C48091 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C1819 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C1818 -
           ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C48058) *
              C47767 * C48078 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C1818 -
           ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C1819 +
           ((C5083 + C5082) * C4755 +
            (C548 * C4753 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C1818 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C48094 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C1819 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C1818 -
           ((C5974 * C48073 + C2182 * C4753) * C48042 +
            (C5975 * C48073 + C5972 * C4753) * C4755) *
               C48058) *
              C48082 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C1818 -
           ((C6308 + C6304) * C48042 +
            (C6451 * C48073 + C5973 * C4753) * C4755) *
               C1819 +
           ((C5975 * C4753 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C4755 +
            (C5974 * C4753 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            C4928 * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C1993 -
          ((C5076 + C5077) * C48042 +
           (C5550 * C48073 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
               C4755) *
              C1994 +
          (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
            C5972 * C48073) *
               C4755 +
           (C5078 + C5079) * C48042) *
              C1995 -
          (((C113 * C2401 + C2411 + C2411 + C47988 * C2407) * C48073 +
            C2300 * C4753) *
               C48042 +
           ((C113 * C2400 + C2410 + C2410 + C47988 * C2406) * C48073 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C4753) *
               C4755) *
              C1996 +
          (((C113 * C2001 + C2020 + C2020 + C47988 * C2013) * C4753 +
            (C113 * C6825 + C6832 + C6832 + C47988 * C6829) * C48073) *
               C4755 +
           ((C113 * C2002 + C2021 + C2021 + C47988 * C2014) * C4753 +
            (C113 * C6826 + C6833 + C6833 + C47988 * C6830) * C48073) *
               C48042) *
              C1997) *
         C47767 * C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C48024 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C1072 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C48024) *
               C1073 +
           (((C4929 * C4753 + C5799 * C48073) * C4755 +
             (C4918 + C4919) * C48042) *
                C48024 -
            ((C6308 + C6304) * C48042 +
             ((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C48073 +
              C5973 * C4753) *
                 C4755) *
                C47872) *
               C48055) *
              C48009 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
               C1072 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C48024 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C1073 +
           (((C6304 + C6308) * C4755 +
             (C1595 * C4753 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48024 -
           ((C5076 + C5077) * C48042 +
            ((C113 * C924 + C940 + C940 + C47988 * C934) * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C47767 * C654 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
              C47767 * C655 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C48024 -
           ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
              C47767 * C656 +
          (((C5347 + C5346) * C4755 +
            (C777 * C4753 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C2282 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C2283 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C2284 -
           ((C7166 + C7162) * C48042 +
            ((C113 * C2400 + C2410 + C2410 + C47988 * C2406) * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C4753) *
                C4755) *
               C48071) *
              C47767 * C48009 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C2283 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C2282 -
           ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C2284 +
           ((C7162 + C7166) * C4755 +
            (C2299 * C4753 +
             (C113 * C2402 + C2412 + C2412 + C47988 * C2408) * C48073) *
                C48042) *
               C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C48094 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C48082 +
           ((C4929 * C4753 +
             (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48055) *
              C286 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C48082 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C48094 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48055) *
              C287 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C48094 -
           ((C359 * C48073 + C358 * C4753) * C48042 + (C4921 + C4920) * C4755) *
               C47785 * C48082 +
           ((C4923 + C4922) * C4755 +
            (C359 * C4753 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C47785 * C47767 * C108 -
          ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
              C47767 * C109 +
          ((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
              C47767 * C110 -
          ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C47785 *
              C47767 * C111 +
          ((C4765 + C4764) * C4755 +
           (C168 * C4753 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
               C48042) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C1072 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C1073 +
           ((C4929 * C4753 +
             (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48055) *
              C48091 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C1073 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C1072 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48055) *
              C48078 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C1072 -
           ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C47785 *
               C1073 +
           ((C4923 + C4922) * C4755 +
            (C359 * C4753 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            C4928 * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C47785 * C1140 -
          ((C4914 + C4915) * C48042 +
           (C4929 * C48073 + C4928 * C4753) * C4755) *
              C47785 * C1141 +
          ((C4929 * C4753 + C5799 * C48073) * C4755 +
           (C4918 + C4919) * C48042) *
              C47785 * C1142 -
          ((C5800 * C48073 + C1434 * C4753) * C48042 +
           (C5801 * C48073 + C5799 * C4753) * C4755) *
              C47785 * C1143 +
          ((C5801 * C4753 +
            (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
               C4755 +
           (C5800 * C4753 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
               C48042) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C1818 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C47767 * C48091 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C1819 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C1818 -
           ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C48058) *
              C47767 * C48078 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C1818 -
           ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C1819 +
           ((C5083 + C5082) * C4755 +
            (C548 * C4753 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C1818 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C48094 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C1819 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C1818 -
           ((C5974 * C48073 + C2182 * C4753) * C48042 +
            (C5975 * C48073 + C5972 * C4753) * C4755) *
               C48058) *
              C48082 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C1818 -
           ((C6308 + C6304) * C48042 +
            (C6451 * C48073 + C5973 * C4753) * C4755) *
               C1819 +
           ((C5975 * C4753 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C4755 +
            (C5974 * C4753 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C3272 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C48023 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C3272) *
               C47830) *
              C47744 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
               C48023 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C3272 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47830) *
              C47753 +
          ((((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C3272 -
            ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
               C48023 +
           (((C5547 + C5546) * C4755 +
             (C959 * C4753 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C3272) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C47868 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47875 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
              C5972 * C48073) *
                 C4755 +
             (C5078 + C5079) * C48042) *
                C3780) *
               C48023 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47875 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C47868 -
            ((C7028 + C7029) * C48042 +
             (C5975 * C48073 + C5972 * C4753) * C4755) *
                C3780) *
               C47830) *
              C2618 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47875 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47868 -
            ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C3780) *
               C48023 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47868 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47875 +
            ((C7029 + C7028) * C4755 +
             (C2181 * C4753 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C3272 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C48094 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C3272) *
               C48082 +
           (((C4929 * C4753 + C5799 * C48073) * C4755 +
             (C4918 + C4919) * C48042) *
                C3272 -
            ((C6308 + C6304) * C48042 +
             (C6451 * C48073 + C5973 * C4753) * C4755) *
                C47872) *
               C48055) *
              C2618 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
               C48094 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C3272 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C48082 +
           (((C6304 + C6308) * C4755 +
             (C1595 * C4753 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C3272 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C47767 * C48100 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
              C47767 * C48093 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C3272 -
           ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
              C47767 * C48080 +
          (((C5347 + C5346) * C4755 +
            (C777 * C4753 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48102 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C48099 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48090 -
           ((C7166 + C7162) * C48042 +
            (C7309 * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C4753) *
                C4755) *
               C48071) *
              C47767 * C2618 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C48099 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48102 -
           ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C48090 +
           ((C7162 + C7166) * C4755 +
            (C2299 * C4753 +
             (C113 * C2402 + C2412 + C2412 + C47988 * C2408) * C48073) *
                C48042) *
               C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47868 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47875 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C3780) *
              C47767 * C47744 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47875 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47868 -
           ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C3780) *
              C47767 * C47753 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47868 -
           ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47875 +
           ((C5083 + C5082) * C4755 +
            (C548 * C4753 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C3780) *
              C47767 * C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C3272 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C47767 * C48100 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
              C47767 * C48093 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C3272 -
           ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
              C47767 * C48080 +
          (((C5347 + C5346) * C4755 +
            (C777 * C4753 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C3272 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C48094 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C3272) *
               C48082 +
           (((C4929 * C4753 + C5799 * C48073) * C4755 +
             (C4918 + C4919) * C48042) *
                C3272 -
            ((C6308 + C6304) * C48042 +
             (C6451 * C48073 + C5973 * C4753) * C4755) *
                C47872) *
               C48055) *
              C2618 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C3272) *
               C48094 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C3272 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C48082 +
           (((C6304 + C6308) * C4755 +
             (C1595 * C4753 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                     C4928 * C48073) *
                        C4755 +
                    (C4758 + C4759) * C48042) *
                       C47785 * C48023 -
                   ((C4914 + C4915) * C48042 +
                    (C4929 * C48073 + C4928 * C4753) * C4755) *
                       C47785 * C47830) *
                      C654 +
                  (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) *
                       C47785 * C47830 -
                   ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) *
                       C47785 * C48023) *
                      C655 +
                  (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) *
                       C47785 * C48023 -
                   ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) *
                       C47785 * C47830) *
                      C656 +
                  (((C5215 + C5214) * C4755 +
                    (C667 * C4753 +
                     (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                        C48042) *
                       C47785 * C47830 -
                   ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) *
                       C47785 * C48023) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
                     C4928 * C48073) *
                        C4755 +
                    (C4758 + C4759) * C48042) *
                       C47785 * C1414 -
                   ((C4914 + C4915) * C48042 +
                    (C4929 * C48073 + C4928 * C4753) * C4755) *
                       C47785 * C1415 +
                   ((C4929 * C4753 + C5799 * C48073) * C4755 +
                    (C4918 + C4919) * C48042) *
                       C47785 * C1416 -
                   ((C6106 + C6107) * C48042 +
                    (C5801 * C48073 + C5799 * C4753) * C4755) *
                       C47785 * C48065) *
                      C48009 +
                  (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) *
                       C47785 * C1415 -
                   ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) *
                       C47785 * C1414 -
                   ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) *
                       C47785 * C1416 +
                   ((C6107 + C6106) * C4755 +
                    (C1433 * C4753 +
                     (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                        C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C48024 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C48023 +
           (((C5550 * C4753 +
              (C113 * C1285 + C1313 + C1313 + C47988 * C1303) * C48073) *
                 C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C48024) *
               C47830) *
              C286 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
               C48023 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C48024 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C47830) *
              C287 +
          ((((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C48024 -
            ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
               C48023 +
           (((C5547 + C5546) * C4755 +
             (C959 * C4753 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48024 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C1414 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C47872 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C48024) *
              C1415 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C48024 -
           ((C6308 + C6304) * C48042 +
            (C6451 * C48073 + C5973 * C4753) * C4755) *
               C47872) *
              C1416 +
          (((C6451 * C4753 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C4755 +
            (C6307 * C4753 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C6106 + C6107) * C48042 +
            (C5801 * C48073 + C5799 * C4753) * C4755) *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C48094 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C48082 +
           ((C4929 * C4753 +
             (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48055) *
              C286 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C48082 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C48094 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48055) *
              C287 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C48094 -
           ((C359 * C48073 + C358 * C4753) * C48042 + (C4921 + C4920) * C4755) *
               C47785 * C48082 +
           ((C4923 + C4922) * C4755 +
            (C359 * C4753 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C47785 * C47767 * C108 -
          ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
              C47767 * C109 +
          ((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
              C47767 * C110 -
          ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C47785 *
              C47767 * C111 +
          ((C4765 + C4764) * C4755 +
           (C168 * C4753 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
               C48042) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48095 -
           ((C5076 + C5077) * C48042 +
            ((C113 * C924 + C940 + C940 + C47988 * C934) * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             (C113 * C1282 + C1310 + C1310 + C47988 * C1300) * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C47767 * C286 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C48084 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48095 -
           ((C5082 + C5083) * C48042 + (C5079 + C5078) * C4755) * C48058) *
              C47767 * C287 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C48095 -
           ((C959 * C48073 + C547 * C4753) * C48042 + (C5081 + C5080) * C4755) *
               C48084 +
           ((C5083 + C5082) * C4755 +
            (C548 * C4753 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C1072 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C1073 +
           ((C4929 * C4753 +
             (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48055) *
              C48091 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C1073 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C1072 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48055) *
              C48078 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C1072 -
           ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C47785 *
               C1073 +
           ((C4923 + C4922) * C4755 +
            (C359 * C4753 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            C4928 * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C47785 * C1140 -
          ((C4914 + C4915) * C48042 +
           (C4929 * C48073 + C4928 * C4753) * C4755) *
              C47785 * C1141 +
          ((C4929 * C4753 + C5799 * C48073) * C4755 +
           (C4918 + C4919) * C48042) *
              C47785 * C1142 -
          ((C5800 * C48073 + C1434 * C4753) * C48042 +
           (C5801 * C48073 + C5799 * C4753) * C4755) *
              C47785 * C1143 +
          ((C5801 * C4753 +
            (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
               C4755 +
           (C5800 * C4753 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
               C48042) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48095 -
           ((C5076 + C5077) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C4753 +
             C5972 * C48073) *
                C4755 +
            (C5078 + C5079) * C48042) *
               C48058) *
              C1072 +
          (((C5550 * C4753 + C5973 * C48073) * C4755 +
            (C5544 + C5545) * C48042) *
               C48084 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C48095 -
           ((C5974 * C48073 + C2182 * C4753) * C48042 +
            (C5975 * C48073 + C5972 * C4753) * C4755) *
               C48058) *
              C1073 +
          (((C4929 * C4753 + C5799 * C48073) * C4755 +
            (C4918 + C4919) * C48042) *
               C48095 -
           (((C113 * C1697 + C1707 + C1707 + C47988 * C1703) * C48073 +
             C1596 * C4753) *
                C48042 +
            ((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C48073 +
             C5973 * C4753) *
                C4755) *
               C48084 +
           ((C5975 * C4753 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C4755 +
            (C5974 * C4753 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C48024 -
           ((C5076 + C5077) * C48042 +
            ((C113 * C924 + C940 + C940 + C47988 * C934) * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                C4755) *
               C47872) *
              C47767 * C654 +
          (((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
              C47767 * C655 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C48024 -
           ((C5346 + C5347) * C48042 + (C5081 + C5080) * C4755) * C47872) *
              C47767 * C656 +
          (((C5347 + C5346) * C4755 +
            (C777 * C4753 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
              C4928 * C48073) *
                 C4755 +
             (C4758 + C4759) * C48042) *
                C48024 -
            ((C5076 + C5077) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C4753) *
                 C4755) *
                C47872) *
               C1072 +
           (((C5550 * C4753 + C5973 * C48073) * C4755 +
             (C5544 + C5545) * C48042) *
                C47872 -
            ((C4914 + C4915) * C48042 +
             (C4929 * C48073 + C4928 * C4753) * C4755) *
                C48024) *
               C1073 +
           (((C4929 * C4753 + C5799 * C48073) * C4755 +
             (C4918 + C4919) * C48042) *
                C48024 -
            ((C6308 + C6304) * C48042 +
             ((C113 * C1696 + C1706 + C1706 + C47988 * C1702) * C48073 +
              C5973 * C4753) *
                 C4755) *
                C47872) *
               C48055) *
              C48009 +
          ((((C5077 + C5076) * C4755 + (C5080 + C5081) * C48042) * C47872 -
            ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C48024) *
               C1072 +
           (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C48024 -
            ((C5546 + C5547) * C48042 + (C5545 + C5544) * C4755) * C47872) *
               C1073 +
           (((C6304 + C6308) * C4755 +
             (C1595 * C4753 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            (C113 * C291 + C326 + C326 + C47988 * C311) * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C47785 * C47767 * C108 -
          ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
              C47767 * C109 +
          ((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
              C47767 * C110 -
          ((C4764 + C4765) * C48042 + (C4763 + C4762) * C4755) * C47785 *
              C47767 * C111 +
          ((C4765 + C4764) * C4755 +
           (C168 * C4753 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
               C48042) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C48094 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C48082 +
           ((C4929 * C4753 +
             (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48055) *
              C286 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C48082 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C48094 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48055) *
              C287 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C48094 -
           ((C359 * C48073 + C358 * C4753) * C48042 + (C4921 + C4920) * C4755) *
               C47785 * C48082 +
           ((C4923 + C4922) * C4755 +
            (C359 * C4753 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
             C4928 * C48073) *
                C4755 +
            (C4758 + C4759) * C48042) *
               C47785 * C1072 -
           ((C4914 + C4915) * C48042 +
            (C4929 * C48073 + C4928 * C4753) * C4755) *
               C47785 * C1073 +
           ((C4929 * C4753 +
             (C113 * C1148 + C1167 + C1167 + C47988 * C1160) * C48073) *
                C4755 +
            (C4918 + C4919) * C48042) *
               C47785 * C48055) *
              C48091 +
          (((C4915 + C4914) * C4755 + (C4920 + C4921) * C48042) * C47785 *
               C1073 -
           ((C4760 + C4761) * C48042 + (C4759 + C4758) * C4755) * C47785 *
               C1072 -
           ((C4922 + C4923) * C48042 + (C4919 + C4918) * C4755) * C47785 *
               C48055) *
              C48078 +
          (((C4761 + C4760) * C4755 + (C4762 + C4763) * C48042) * C47785 *
               C1072 -
           ((C5214 + C5215) * C48042 + (C4921 + C4920) * C4755) * C47785 *
               C1073 +
           ((C4923 + C4922) * C4755 +
            (C359 * C4753 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C4753 +
            C4928 * C48073) *
               C4755 +
           (C4758 + C4759) * C48042) *
              C47785 * C1140 -
          ((C4914 + C4915) * C48042 +
           (C4929 * C48073 + C4928 * C4753) * C4755) *
              C47785 * C1141 +
          ((C4929 * C4753 + C5799 * C48073) * C4755 +
           (C4918 + C4919) * C48042) *
              C47785 * C1142 -
          ((C5800 * C48073 + C1434 * C4753) * C48042 +
           (C5801 * C48073 + C5799 * C4753) * C4755) *
              C47785 * C1143 +
          ((C5801 * C4753 +
            (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
               C4755 +
           (C5800 * C4753 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
               C48042) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C47826 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C47833 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C2878) *
                      C47744 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C47833 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C47826 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C2878) *
                      C47753 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C47826 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C47833 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C2878) *
                      C2881)) /
                (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C48024 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C47826 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C48024) *
                       C47833 +
                   (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                      C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                         C47971 * C4755 +
                     (C10610 + C10611) * C47971 * C48042) *
                        C48024 -
                    ((C12064 + C12065) * C47971 * C48042 +
                     (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                      C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                         C47971 * C4755) *
                        C47872) *
                       C2878) *
                      C2618 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C48024) *
                       C47826 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C48024 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47833 +
                   (((C12065 + C12064) * C47971 * C4755 +
                     (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                      C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10614 + C10615) * C47971 * C48042 +
                     (C10611 + C10610) * C47971 * C4755) *
                        C48024) *
                       C2878) *
                      C47750)) /
                (p * q * std::sqrt(p + q));
    d2ee[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C48101 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C48097 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48087 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C47785 * C48065) *
                      C2618 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C48097 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C48101 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48087 +
                   ((C11859 + C11858) * C47971 * C4755 +
                    (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                     C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                        C47971 * C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C2510 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C47830) *
                      C48100 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C2510) *
                      C48093 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C2510 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C47830) *
                      C48080 +
                  (((C10959 + C10958) * C47971 * C4755 +
                    (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                     C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                        C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C47785 * C2510) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C48095 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C48084 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C47971 * C4755 +
                     (C10812 + C10813) * C47971 * C48042) *
                        C48058) *
                       C2510 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C48084 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C48095 -
                    ((C12792 + C12793) * C47971 * C48042 +
                     (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                      C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                         C47971 * C4755) *
                        C48058) *
                       C47830) *
                      C2618 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C48084 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C48095 -
                    ((C10816 + C10817) * C47971 * C48042 +
                     (C10813 + C10812) * C47971 * C4755) *
                        C48058) *
                       C2510 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C48095 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C48084 +
                    ((C12793 + C12792) * C47971 * C4755 +
                     (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
                      C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                         C47971 * C48042) *
                        C48058) *
                       C47830) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C48024 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C2510 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C48024) *
                       C47830) *
                      C47744 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C48024) *
                       C2510 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C48024 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47830) *
                      C47753 +
                  ((((C10409 + C10408) * C47971 * C4755 +
                     (C10410 + C10411) * C47971 * C48042) *
                        C48024 -
                    ((C11100 + C11101) * C47971 * C48042 +
                     (C10815 + C10814) * C47971 * C4755) *
                        C47872) *
                       C2510 +
                   (((C11323 + C11322) * C47971 * C4755 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10958 + C10959) * C47971 * C48042 +
                     (C10613 + C10612) * C47971 * C4755) *
                        C48024) *
                       C47830) *
                      C2881)) /
                (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C2510 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C47830) *
                      C48100 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C2510) *
                      C48093 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C2510 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C47830) *
                      C48080 +
                  (((C10959 + C10958) * C47971 * C4755 +
                    (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                     C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                        C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C47785 * C2510) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C48101 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C48097 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48087 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C47785 * C48065) *
                      C2618 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C48097 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C48101 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48087 +
                   ((C11859 + C11858) * C47971 * C4755 +
                    (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                     C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                        C47971 * C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C3272 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C47826 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C3272) *
                       C47833 +
                   (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                      C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                         C47971 * C4755 +
                     (C10610 + C10611) * C47971 * C48042) *
                        C3272 -
                    ((C12064 + C12065) * C47971 * C48042 +
                     (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                      C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                         C47971 * C4755) *
                        C47872) *
                       C2878) *
                      C48009 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C3272) *
                       C47826 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C3272 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47833 +
                   (((C12065 + C12064) * C47971 * C4755 +
                     (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                      C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10614 + C10615) * C47971 * C48042 +
                     (C10611 + C10610) * C47971 * C4755) *
                        C3272) *
                       C2878) *
                      C47750)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47868 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47875 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C3780) *
                      C47826 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C47875 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47868 -
                   ((C12792 + C12793) * C47971 * C48042 +
                    (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                     C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                        C47971 * C4755) *
                       C3780) *
                      C47833 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47868 -
                   ((C12064 + C12065) * C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C47875 +
                   ((C10357 * C1286 + C11714 + C11714 + C10355 * C1304 +
                     C10359 * C7296 + C11715 + C11715 + C48075 * C7300) *
                        C47971 * C4755 +
                    (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                     C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                        C47971 * C48042) *
                       C3780) *
                      C2878) *
                 C47739) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C3272 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C48101 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C47872 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C3272) *
                      C48097 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C3272 -
                   ((C12064 + C12065) * C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C47872) *
                      C48087 +
                  (((C10357 * C1696 + C12196 + C12196 + C10355 * C1702 +
                     C10359 * C5947 + C12197 + C12197 + C48075 * C5951) *
                        C47971 * C4755 +
                    (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                     C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                        C47971 * C48042) *
                       C47872 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C3272) *
                      C48065) *
                 C47739) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C3272 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C2510 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C3272) *
                       C47830) *
                      C48091 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C3272) *
                       C2510 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C3272 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47830) *
                      C48078 +
                  ((((C10409 + C10408) * C47971 * C4755 +
                     (C10410 + C10411) * C47971 * C48042) *
                        C3272 -
                    ((C11100 + C11101) * C47971 * C48042 +
                     (C10815 + C10814) * C47971 * C4755) *
                        C47872) *
                       C2510 +
                   (((C11323 + C11322) * C47971 * C4755 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10958 + C10959) * C47971 * C48042 +
                     (C10613 + C10612) * C47971 * C4755) *
                        C3272) *
                       C47830) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48102 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C48099 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48090 -
                   ((C12934 + C12935) * C47971 * C48042 +
                    (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                     C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                        C47971 * C4755) *
                       C48071) *
                      C2510 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C48099 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C48102 -
                   ((C12792 + C12793) * C47971 * C48042 +
                    (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                     C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                        C47971 * C4755) *
                       C48090 +
                   ((C10357 * C2400 + C13066 + C13066 + C10355 * C2406 +
                     C10359 * C6825 + C13067 + C13067 + C48075 * C6829) *
                        C47971 * C4755 +
                    (C10357 * C2401 + C13068 + C13068 + C10355 * C2407 +
                     C10359 * C6826 + C13069 + C13069 + C48075 * C6830) *
                        C47971 * C48042) *
                       C48071) *
                      C47830) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C47868 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47875 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C47971 * C4755 +
                     (C10812 + C10813) * C47971 * C48042) *
                        C3780) *
                       C2510 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47875 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C47868 -
                    ((C12792 + C12793) * C47971 * C48042 +
                     (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                      C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                         C47971 * C4755) *
                        C3780) *
                       C47830) *
                      C48009 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47875 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C47868 -
                    ((C10816 + C10817) * C47971 * C48042 +
                     (C10813 + C10812) * C47971 * C4755) *
                        C3780) *
                       C2510 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C47868 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47875 +
                    ((C12793 + C12792) * C47971 * C4755 +
                     (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
                      C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                         C47971 * C48042) *
                        C3780) *
                       C47830) *
                      C47750)) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C3272 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C2510 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C3272) *
                       C47830) *
                      C48091 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C3272) *
                       C2510 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C3272 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47830) *
                      C48078 +
                  ((((C10409 + C10408) * C47971 * C4755 +
                     (C10410 + C10411) * C47971 * C48042) *
                        C3272 -
                    ((C11100 + C11101) * C47971 * C48042 +
                     (C10815 + C10814) * C47971 * C4755) *
                        C47872) *
                       C2510 +
                   (((C11323 + C11322) * C47971 * C4755 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10958 + C10959) * C47971 * C48042 +
                     (C10613 + C10612) * C47971 * C4755) *
                        C3272) *
                       C47830) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C3272 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C48101 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C47872 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C3272) *
                      C48097 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C3272 -
                   ((C12064 + C12065) * C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C47872) *
                      C48087 +
                  (((C10357 * C1696 + C12196 + C12196 + C10355 * C1702 +
                     C10359 * C5947 + C12197 + C12197 + C48075 * C5951) *
                        C47971 * C4755 +
                    (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                     C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                        C47971 * C48042) *
                       C47872 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C3272) *
                      C48065) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[60] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C1414 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C1415 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C1416 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C47785 * C48065) *
                      C48009 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C1415 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C1414 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C1416 +
                   ((C11859 + C11858) * C47971 * C4755 +
                    (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                     C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                        C47971 * C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C48023 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C47830) *
                      C654 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C48023) *
                      C655 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C48023 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C47830) *
                      C656 +
                  (((C10959 + C10958) * C47971 * C4755 +
                    (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                     C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                        C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C47785 * C48023) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C1818 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C1819 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C47971 * C4755 +
                     (C10812 + C10813) * C47971 * C48042) *
                        C48058) *
                       C48023 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C1819 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C1818 -
                    ((C12792 + C12793) * C47971 * C48042 +
                     (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                      C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                         C47971 * C4755) *
                        C48058) *
                       C47830) *
                      C48009 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C1819 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C1818 -
                    ((C10816 + C10817) * C47971 * C48042 +
                     (C10813 + C10812) * C47971 * C4755) *
                        C48058) *
                       C48023 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C1818 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C1819 +
                    ((C12793 + C12792) * C47971 * C4755 +
                     (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
                      C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                         C47971 * C48042) *
                        C48058) *
                       C47830) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48024 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C1414 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C47872 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C48024) *
                      C1415 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C48024 -
                   ((C12064 + C12065) * C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C47872) *
                      C1416 +
                  (((C10357 * C1696 + C12196 + C12196 + C10355 * C1702 +
                     C10359 * C5947 + C12197 + C12197 + C48075 * C5951) *
                        C47971 * C4755 +
                    (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                     C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                        C47971 * C48042) *
                       C47872 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C48024) *
                      C48065) *
                 C47739) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C48024 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C48023 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C48024) *
                       C47830) *
                      C286 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C48024) *
                       C48023 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C48024 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47830) *
                      C287 +
                  ((((C10409 + C10408) * C47971 * C4755 +
                     (C10410 + C10411) * C47971 * C48042) *
                        C48024 -
                    ((C11100 + C11101) * C47971 * C48042 +
                     (C10815 + C10814) * C47971 * C4755) *
                        C47872) *
                       C48023 +
                   (((C11323 + C11322) * C47971 * C4755 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10958 + C10959) * C47971 * C48042 +
                     (C10613 + C10612) * C47971 * C4755) *
                        C48024) *
                       C47830) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C2282 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C2283 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C2284 -
                   ((C12934 + C12935) * C47971 * C48042 +
                    (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                     C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                        C47971 * C4755) *
                       C48071) *
                      C48023 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C2283 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C2282 -
                   ((C12792 + C12793) * C47971 * C48042 +
                    (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                     C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                        C47971 * C4755) *
                       C2284 +
                   ((C10357 * C2400 + C13066 + C13066 + C10355 * C2406 +
                     C10359 * C6825 + C13067 + C13067 + C48075 * C6829) *
                        C47971 * C4755 +
                    (C10357 * C2401 + C13068 + C13068 + C10355 * C2407 +
                     C10359 * C6826 + C13069 + C13069 + C48075 * C6830) *
                        C47971 * C48042) *
                       C48071) *
                      C47830) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[62] += (0.5 * std::pow(Pi, 2.5) *
                     (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                        C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                           C47971 * C4755 +
                       (C10406 + C10407) * C47971 * C48042) *
                          C47785 * C47767 * C108 -
                      ((C10408 + C10409) * C47971 * C48042 +
                       (C10407 + C10406) * C47971 * C4755) *
                          C47785 * C47767 * C109 +
                      ((C10409 + C10408) * C47971 * C4755 +
                       (C10410 + C10411) * C47971 * C48042) *
                          C47785 * C47767 * C110 -
                      ((C10412 + C10413) * C47971 * C48042 +
                       (C10411 + C10410) * C47971 * C4755) *
                          C47785 * C47767 * C111 +
                      ((C10413 + C10412) * C47971 * C4755 +
                       (C10357 * C120 + C10388 + C10388 + C10355 * C134 +
                        C10359 * C768 + C10389 + C10389 + C48075 * C770) *
                           C47971 * C48042) *
                          C47785 * C47767 * C112) +
                 0.5 * std::pow(Pi, 2.5) *
                     ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                         C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                            C47971 * C4755 +
                        (C10406 + C10407) * C47971 * C48042) *
                           C47785 * C48094 -
                       ((C10608 + C10609) * C47971 * C48042 +
                        (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                         C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                            C47971 * C4755) *
                           C47785 * C48082 +
                       ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                         C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                            C47971 * C4755 +
                        (C10610 + C10611) * C47971 * C48042) *
                           C47785 * C48055) *
                          C286 +
                      (((C10609 + C10608) * C47971 * C4755 +
                        (C10612 + C10613) * C47971 * C48042) *
                           C47785 * C48082 -
                       ((C10408 + C10409) * C47971 * C48042 +
                        (C10407 + C10406) * C47971 * C4755) *
                           C47785 * C48094 -
                       ((C10614 + C10615) * C47971 * C48042 +
                        (C10611 + C10610) * C47971 * C4755) *
                           C47785 * C48055) *
                          C287 +
                      (((C10409 + C10408) * C47971 * C4755 +
                        (C10410 + C10411) * C47971 * C48042) *
                           C47785 * C48094 -
                       ((C10359 * C927 + C10588 + C10588 + C48075 * C937 +
                         C10357 * C295 + C10589 + C10589 + C10355 * C315) *
                            C47971 * C48042 +
                        (C10613 + C10612) * C47971 * C4755) *
                           C47785 * C48082 +
                       ((C10615 + C10614) * C47971 * C4755 +
                        (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                         C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                            C47971 * C48042) *
                           C47785 * C48055) *
                          C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48095 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C48084 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C47767 * C286 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C48084 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C48095 -
                   ((C10816 + C10817) * C47971 * C48042 +
                    (C10813 + C10812) * C47971 * C4755) *
                       C48058) *
                      C47767 * C287 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C48095 -
                   ((C10359 * C485 + C10790 + C10790 + C48075 * C505 +
                     C10357 * C484 + C10791 + C10791 + C10355 * C504) *
                        C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C48084 +
                   ((C10817 + C10816) * C47971 * C4755 +
                    (C10357 * C485 + C10792 + C10792 + C10355 * C505 +
                     C10359 * C2286 + C10793 + C10793 + C48075 * C2288) *
                        C47971 * C48042) *
                       C48058) *
                      C47767 * C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48055) *
                      C48091 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C1073 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C1072 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48055) *
                      C48078 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C47785 * C1140 -
                  ((C10608 + C10609) * C47971 * C48042 +
                   (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                    C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                       C47971 * C4755) *
                      C47785 * C1141 +
                  ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                    C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                       C47971 * C4755 +
                   (C10610 + C10611) * C47971 * C48042) *
                      C47785 * C1142 -
                  ((C10359 * C1697 + C11552 + C11552 + C48075 * C1703 +
                    C10357 * C1147 + C11553 + C11553 + C10355 * C1159) *
                       C47971 * C48042 +
                   (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                    C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                       C47971 * C4755) *
                      C47785 * C1143 +
                  ((C10357 * C1149 + C11556 + C11556 + C10355 * C1161 +
                    C10359 * C6438 + C11557 + C11557 + C48075 * C6442) *
                       C47971 * C4755 +
                   (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                    C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                       C47971 * C48042) *
                      C47785 * C1144) *
                 C47739) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48095 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C48084 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C1072 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C48084 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C48095 -
                   ((C10359 * C2401 + C11706 + C11706 + C48075 * C2407 +
                     C10357 * C1281 + C11707 + C11707 + C10355 * C1299) *
                        C47971 * C48042 +
                    (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                     C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                        C47971 * C4755) *
                       C48058) *
                      C1073 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C48095 -
                   ((C10359 * C1287 + C11710 + C11710 + C48075 * C1305 +
                     C10357 * C1284 + C11711 + C11711 + C10355 * C1302) *
                        C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C48084 +
                   ((C10357 * C1286 + C11714 + C11714 + C10355 * C1304 +
                     C10359 * C7296 + C11715 + C11715 + C48075 * C7300) *
                        C47971 * C4755 +
                    (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                     C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                        C47971 * C48042) *
                       C48058) *
                      C48055) *
                 C47739) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C1818 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C1819 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C47767 * C48091 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C1819 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C1818 -
                   ((C10816 + C10817) * C47971 * C48042 +
                    (C10813 + C10812) * C47971 * C4755) *
                       C48058) *
                      C47767 * C48078 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C1818 -
                   ((C11100 + C11101) * C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C1819 +
                   ((C10817 + C10816) * C47971 * C4755 +
                    (C10357 * C485 + C10792 + C10792 + C10355 * C505 +
                     C10359 * C2286 + C10793 + C10793 + C48075 * C2288) *
                        C47971 * C48042) *
                       C48058) *
                      C47767 * C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C1818 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C1819 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C48094 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C1819 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C1818 -
                   ((C10359 * C2401 + C11706 + C11706 + C48075 * C2407 +
                     C10357 * C1281 + C11707 + C11707 + C10355 * C1299) *
                        C47971 * C48042 +
                    (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                     C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                        C47971 * C4755) *
                       C48058) *
                      C48082 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C1818 -
                   ((C12064 + C12065) * C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C1819 +
                   ((C10357 * C1286 + C11714 + C11714 + C10355 * C1304 +
                     C10359 * C7296 + C11715 + C11715 + C48075 * C7300) *
                        C47971 * C4755 +
                    (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                     C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                        C47971 * C48042) *
                       C48058) *
                      C48055) *
                 C47739) /
                    (p * q * std::sqrt(p + q)) +
                (2 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C1993 -
                  ((C10810 + C10811) * C47971 * C48042 +
                   (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                    C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                       C47971 * C4755) *
                      C1994 +
                  ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                    C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                       C47971 * C4755 +
                   (C10812 + C10813) * C47971 * C48042) *
                      C1995 -
                  ((C10359 * C2002 + C12580 + C12580 + C48075 * C2014 +
                    C10357 * C1999 + C12581 + C12581 + C10355 * C2011) *
                       C47971 * C48042 +
                   (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                    C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                       C47971 * C4755) *
                      C1996 +
                  ((C10357 * C2001 + C12584 + C12584 + C10355 * C2013 +
                    C10359 * C12573 + C12585 + C12585 + C48075 * C12577) *
                       C47971 * C4755 +
                   (C10357 * C2002 + C12586 + C12586 + C10355 * C2014 +
                    C10359 * C12574 + C12587 + C12587 + C48075 * C12578) *
                       C47971 * C48042) *
                      C1997) *
                 C47767 * C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[63] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C48024 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C1072 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C48024) *
                       C1073 +
                   (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                      C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                         C47971 * C4755 +
                     (C10610 + C10611) * C47971 * C48042) *
                        C48024 -
                    ((C12064 + C12065) * C47971 * C48042 +
                     (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                      C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                         C47971 * C4755) *
                        C47872) *
                       C48055) *
                      C48009 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C48024) *
                       C1072 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C48024 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C1073 +
                   (((C12065 + C12064) * C47971 * C4755 +
                     (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                      C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10614 + C10615) * C47971 * C48042 +
                     (C10611 + C10610) * C47971 * C4755) *
                        C48024) *
                       C48055) *
                      C47750)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48024 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C47767 * C654 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C47872 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C48024) *
                      C47767 * C655 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C48024 -
                   ((C11100 + C11101) * C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C47872) *
                      C47767 * C656 +
                  (((C11101 + C11100) * C47971 * C4755 +
                    (C10357 * C486 + C11094 + C11094 + C10355 * C506 +
                     C10359 * C487 + C11095 + C11095 + C48075 * C507) *
                        C47971 * C48042) *
                       C47872 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C48024) *
                      C47767 * C48059)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C2282 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C2283 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C2284 -
                   ((C12934 + C12935) * C47971 * C48042 +
                    (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                     C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                        C47971 * C4755) *
                       C48071) *
                      C47767 * C48009 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C2283 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C2282 -
                   ((C10816 + C10817) * C47971 * C48042 +
                    (C10813 + C10812) * C47971 * C4755) *
                       C2284 +
                   ((C12935 + C12934) * C47971 * C4755 +
                    (C10357 * C1998 + C12928 + C12928 + C10355 * C2010 +
                     C10359 * C2003 + C12929 + C12929 + C48075 * C2015) *
                        C47971 * C48042) *
                       C48071) *
                      C47767 * C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C48094 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C48082 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48055) *
                      C286 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C48082 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C48094 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48055) *
                      C287 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C48094 -
                   ((C10359 * C927 + C10588 + C10588 + C48075 * C937 +
                     C10357 * C295 + C10589 + C10589 + C10355 * C315) *
                        C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C48082 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C47785 * C47767 * C108 -
                  ((C10408 + C10409) * C47971 * C48042 +
                   (C10407 + C10406) * C47971 * C4755) *
                      C47785 * C47767 * C109 +
                  ((C10409 + C10408) * C47971 * C4755 +
                   (C10410 + C10411) * C47971 * C48042) *
                      C47785 * C47767 * C110 -
                  ((C10412 + C10413) * C47971 * C48042 +
                   (C10411 + C10410) * C47971 * C4755) *
                      C47785 * C47767 * C111 +
                  ((C10413 + C10412) * C47971 * C4755 +
                   (C10357 * C120 + C10388 + C10388 + C10355 * C134 +
                    C10359 * C768 + C10389 + C10389 + C48075 * C770) *
                       C47971 * C48042) *
                      C47785 * C47767 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48055) *
                      C48091 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C1073 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C1072 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48055) *
                      C48078 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C47785 * C1140 -
                  ((C10608 + C10609) * C47971 * C48042 +
                   (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                    C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                       C47971 * C4755) *
                      C47785 * C1141 +
                  ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                    C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                       C47971 * C4755 +
                   (C10610 + C10611) * C47971 * C48042) *
                      C47785 * C1142 -
                  ((C10359 * C1697 + C11552 + C11552 + C48075 * C1703 +
                    C10357 * C1147 + C11553 + C11553 + C10355 * C1159) *
                       C47971 * C48042 +
                   (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                    C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                       C47971 * C4755) *
                      C47785 * C1143 +
                  ((C10357 * C1149 + C11556 + C11556 + C10355 * C1161 +
                    C10359 * C6438 + C11557 + C11557 + C48075 * C6442) *
                       C47971 * C4755 +
                   (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                    C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                       C47971 * C48042) *
                      C47785 * C1144) *
                 C47739) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C1818 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C1819 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C47767 * C48091 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C1819 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C1818 -
                   ((C10816 + C10817) * C47971 * C48042 +
                    (C10813 + C10812) * C47971 * C4755) *
                       C48058) *
                      C47767 * C48078 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C1818 -
                   ((C11100 + C11101) * C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C1819 +
                   ((C10817 + C10816) * C47971 * C4755 +
                    (C10357 * C485 + C10792 + C10792 + C10355 * C505 +
                     C10359 * C2286 + C10793 + C10793 + C48075 * C2288) *
                        C47971 * C48042) *
                       C48058) *
                      C47767 * C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C1818 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C1819 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C48094 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C1819 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C1818 -
                   ((C10359 * C2401 + C11706 + C11706 + C48075 * C2407 +
                     C10357 * C1281 + C11707 + C11707 + C10355 * C1299) *
                        C47971 * C48042 +
                    (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                     C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                        C47971 * C4755) *
                       C48058) *
                      C48082 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C1818 -
                   ((C12064 + C12065) * C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C1819 +
                   ((C10357 * C1286 + C11714 + C11714 + C10355 * C1304 +
                     C10359 * C7296 + C11715 + C11715 + C48075 * C7300) *
                        C47971 * C4755 +
                    (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                     C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                        C47971 * C48042) *
                       C48058) *
                      C48055) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C3272 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C48023 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C3272) *
                       C47830) *
                      C47744 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C3272) *
                       C48023 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C3272 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47830) *
                      C47753 +
                  ((((C10409 + C10408) * C47971 * C4755 +
                     (C10410 + C10411) * C47971 * C48042) *
                        C3272 -
                    ((C11100 + C11101) * C47971 * C48042 +
                     (C10815 + C10814) * C47971 * C4755) *
                        C47872) *
                       C48023 +
                   (((C11323 + C11322) * C47971 * C4755 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10958 + C10959) * C47971 * C48042 +
                     (C10613 + C10612) * C47971 * C4755) *
                        C3272) *
                       C47830) *
                      C2881)) /
                (p * q * std::sqrt(p + q));
    d2ee[66] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C47868 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47875 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C47971 * C4755 +
                     (C10812 + C10813) * C47971 * C48042) *
                        C3780) *
                       C48023 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47875 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C47868 -
                    ((C12792 + C12793) * C47971 * C48042 +
                     (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                      C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                         C47971 * C4755) *
                        C3780) *
                       C47830) *
                      C2618 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47875 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C47868 -
                    ((C10816 + C10817) * C47971 * C48042 +
                     (C10813 + C10812) * C47971 * C4755) *
                        C3780) *
                       C48023 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C47868 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47875 +
                    ((C12793 + C12792) * C47971 * C4755 +
                     (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
                      C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                         C47971 * C48042) *
                        C3780) *
                       C47830) *
                      C47750)) /
                (p * q * std::sqrt(p + q));
    d2ee[67] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C3272 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C48094 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C3272) *
                       C48082 +
                   (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                      C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                         C47971 * C4755 +
                     (C10610 + C10611) * C47971 * C48042) *
                        C3272 -
                    ((C12064 + C12065) * C47971 * C48042 +
                     (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                      C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                         C47971 * C4755) *
                        C47872) *
                       C48055) *
                      C2618 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C3272) *
                       C48094 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C3272 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C48082 +
                   (((C12065 + C12064) * C47971 * C4755 +
                     (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                      C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10614 + C10615) * C47971 * C48042 +
                     (C10611 + C10610) * C47971 * C4755) *
                        C3272) *
                       C48055) *
                      C47750)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C3272 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C47767 * C48100 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C47872 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C3272) *
                      C47767 * C48093 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C3272 -
                   ((C11100 + C11101) * C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C47872) *
                      C47767 * C48080 +
                  (((C11101 + C11100) * C47971 * C4755 +
                    (C10357 * C486 + C11094 + C11094 + C10355 * C506 +
                     C10359 * C487 + C11095 + C11095 + C48075 * C507) *
                        C47971 * C48042) *
                       C47872 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C3272) *
                      C47767 * C48059)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48102 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C48099 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48090 -
                   ((C12934 + C12935) * C47971 * C48042 +
                    (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                     C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                        C47971 * C4755) *
                       C48071) *
                      C47767 * C2618 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C48099 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C48102 -
                   ((C10816 + C10817) * C47971 * C48042 +
                    (C10813 + C10812) * C47971 * C4755) *
                       C48090 +
                   ((C12935 + C12934) * C47971 * C4755 +
                    (C10357 * C1998 + C12928 + C12928 + C10355 * C2010 +
                     C10359 * C2003 + C12929 + C12929 + C48075 * C2015) *
                        C47971 * C48042) *
                       C48071) *
                      C47767 * C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47868 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47875 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C3780) *
                      C47767 * C47744 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C47875 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47868 -
                   ((C10816 + C10817) * C47971 * C48042 +
                    (C10813 + C10812) * C47971 * C4755) *
                       C3780) *
                      C47767 * C47753 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47868 -
                   ((C11100 + C11101) * C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C47875 +
                   ((C10817 + C10816) * C47971 * C4755 +
                    (C10357 * C485 + C10792 + C10792 + C10355 * C505 +
                     C10359 * C2286 + C10793 + C10793 + C48075 * C2288) *
                        C47971 * C48042) *
                       C3780) *
                      C47767 * C2881)) /
                (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C3272 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C47767 * C48100 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C47872 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C3272) *
                      C47767 * C48093 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C3272 -
                   ((C11100 + C11101) * C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C47872) *
                      C47767 * C48080 +
                  (((C11101 + C11100) * C47971 * C4755 +
                    (C10357 * C486 + C11094 + C11094 + C10355 * C506 +
                     C10359 * C487 + C11095 + C11095 + C48075 * C507) *
                        C47971 * C48042) *
                       C47872 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C3272) *
                      C47767 * C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C3272 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C48094 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C3272) *
                       C48082 +
                   (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                      C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                         C47971 * C4755 +
                     (C10610 + C10611) * C47971 * C48042) *
                        C3272 -
                    ((C12064 + C12065) * C47971 * C48042 +
                     (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                      C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                         C47971 * C4755) *
                        C47872) *
                       C48055) *
                      C2618 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C3272) *
                       C48094 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C3272 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C48082 +
                   (((C12065 + C12064) * C47971 * C4755 +
                     (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                      C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10614 + C10615) * C47971 * C48042 +
                     (C10611 + C10610) * C47971 * C4755) *
                        C3272) *
                       C48055) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C48023 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C47830) *
                      C654 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C48023) *
                      C655 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C48023 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C47830) *
                      C656 +
                  (((C10959 + C10958) * C47971 * C4755 +
                    (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                     C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                        C47971 * C48042) *
                       C47785 * C47830 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C47785 * C48023) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C1414 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C1415 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C1416 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C47785 * C48065) *
                      C48009 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C1415 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C1414 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C1416 +
                   ((C11859 + C11858) * C47971 * C4755 +
                    (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                     C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                        C47971 * C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C48024 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C48023 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C48024) *
                       C47830) *
                      C286 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C48024) *
                       C48023 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C48024 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C47830) *
                      C287 +
                  ((((C10409 + C10408) * C47971 * C4755 +
                     (C10410 + C10411) * C47971 * C48042) *
                        C48024 -
                    ((C11100 + C11101) * C47971 * C48042 +
                     (C10815 + C10814) * C47971 * C4755) *
                        C47872) *
                       C48023 +
                   (((C11323 + C11322) * C47971 * C4755 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10958 + C10959) * C47971 * C48042 +
                     (C10613 + C10612) * C47971 * C4755) *
                        C48024) *
                       C47830) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48024 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C1414 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C47872 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C48024) *
                      C1415 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C48024 -
                   ((C12064 + C12065) * C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C47872) *
                      C1416 +
                  (((C10357 * C1696 + C12196 + C12196 + C10355 * C1702 +
                     C10359 * C5947 + C12197 + C12197 + C48075 * C5951) *
                        C47971 * C4755 +
                    (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                     C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                        C47971 * C48042) *
                       C47872 -
                   ((C11858 + C11859) * C47971 * C48042 +
                    (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                     C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                        C47971 * C4755) *
                       C48024) *
                      C48065) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C48094 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C48082 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48055) *
                      C286 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C48082 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C48094 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48055) *
                      C287 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C48094 -
                   ((C10359 * C927 + C10588 + C10588 + C48075 * C937 +
                     C10357 * C295 + C10589 + C10589 + C10355 * C315) *
                        C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C48082 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C47785 * C47767 * C108 -
                  ((C10408 + C10409) * C47971 * C48042 +
                   (C10407 + C10406) * C47971 * C4755) *
                      C47785 * C47767 * C109 +
                  ((C10409 + C10408) * C47971 * C4755 +
                   (C10410 + C10411) * C47971 * C48042) *
                      C47785 * C47767 * C110 -
                  ((C10412 + C10413) * C47971 * C48042 +
                   (C10411 + C10410) * C47971 * C4755) *
                      C47785 * C47767 * C111 +
                  ((C10413 + C10412) * C47971 * C4755 +
                   (C10357 * C120 + C10388 + C10388 + C10355 * C134 +
                    C10359 * C768 + C10389 + C10389 + C48075 * C770) *
                       C47971 * C48042) *
                      C47785 * C47767 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48095 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C48084 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C47767 * C286 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C48084 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C48095 -
                   ((C10816 + C10817) * C47971 * C48042 +
                    (C10813 + C10812) * C47971 * C4755) *
                       C48058) *
                      C47767 * C287 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C48095 -
                   ((C10359 * C485 + C10790 + C10790 + C48075 * C505 +
                     C10357 * C484 + C10791 + C10791 + C10355 * C504) *
                        C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C48084 +
                   ((C10817 + C10816) * C47971 * C4755 +
                    (C10357 * C485 + C10792 + C10792 + C10355 * C505 +
                     C10359 * C2286 + C10793 + C10793 + C48075 * C2288) *
                        C47971 * C48042) *
                       C48058) *
                      C47767 * C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48055) *
                      C48091 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C1073 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C1072 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48055) *
                      C48078 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C47785 * C1140 -
                  ((C10608 + C10609) * C47971 * C48042 +
                   (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                    C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                       C47971 * C4755) *
                      C47785 * C1141 +
                  ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                    C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                       C47971 * C4755 +
                   (C10610 + C10611) * C47971 * C48042) *
                      C47785 * C1142 -
                  ((C10359 * C1697 + C11552 + C11552 + C48075 * C1703 +
                    C10357 * C1147 + C11553 + C11553 + C10355 * C1159) *
                       C47971 * C48042 +
                   (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                    C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                       C47971 * C4755) *
                      C47785 * C1143 +
                  ((C10357 * C1149 + C11556 + C11556 + C10355 * C1161 +
                    C10359 * C6438 + C11557 + C11557 + C48075 * C6442) *
                       C47971 * C4755 +
                   (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                    C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                       C47971 * C48042) *
                      C47785 * C1144) *
                 C47739) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48095 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C48084 +
                   ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                     C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                        C47971 * C4755 +
                    (C10812 + C10813) * C47971 * C48042) *
                       C48058) *
                      C1072 +
                  (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                     C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                        C47971 * C4755 +
                    (C11320 + C11321) * C47971 * C48042) *
                       C48084 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C48095 -
                   ((C10359 * C2401 + C11706 + C11706 + C48075 * C2407 +
                     C10357 * C1281 + C11707 + C11707 + C10355 * C1299) *
                        C47971 * C48042 +
                    (C10359 * C2400 + C11708 + C11708 + C48075 * C2406 +
                     C10357 * C1282 + C11709 + C11709 + C10355 * C1300) *
                        C47971 * C4755) *
                       C48058) *
                      C1073 +
                  (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C48095 -
                   ((C10359 * C1287 + C11710 + C11710 + C48075 * C1305 +
                     C10357 * C1284 + C11711 + C11711 + C10355 * C1302) *
                        C47971 * C48042 +
                    (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                     C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                        C47971 * C4755) *
                       C48084 +
                   ((C10357 * C1286 + C11714 + C11714 + C10355 * C1304 +
                     C10359 * C7296 + C11715 + C11715 + C48075 * C7300) *
                        C47971 * C4755 +
                    (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                     C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                        C47971 * C48042) *
                       C48058) *
                      C48055) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C48024 -
                   ((C10810 + C10811) * C47971 * C48042 +
                    (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                     C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                        C47971 * C4755) *
                       C47872) *
                      C47767 * C654 +
                  (((C10811 + C10810) * C47971 * C4755 +
                    (C10814 + C10815) * C47971 * C48042) *
                       C47872 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C48024) *
                      C47767 * C655 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C48024 -
                   ((C11100 + C11101) * C47971 * C48042 +
                    (C10815 + C10814) * C47971 * C4755) *
                       C47872) *
                      C47767 * C656 +
                  (((C11101 + C11100) * C47971 * C4755 +
                    (C10357 * C486 + C11094 + C11094 + C10355 * C506 +
                     C10359 * C487 + C11095 + C11095 + C48075 * C507) *
                        C47971 * C48042) *
                       C47872 -
                   ((C10412 + C10413) * C47971 * C48042 +
                    (C10411 + C10410) * C47971 * C4755) *
                       C48024) *
                      C47767 * C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C47971 * C4755 +
                     (C10406 + C10407) * C47971 * C48042) *
                        C48024 -
                    ((C10810 + C10811) * C47971 * C48042 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C47971 * C4755) *
                        C47872) *
                       C1072 +
                   (((C10357 * C924 + C11296 + C11296 + C10355 * C934 +
                      C10359 * C1282 + C11297 + C11297 + C48075 * C1300) *
                         C47971 * C4755 +
                     (C11320 + C11321) * C47971 * C48042) *
                        C47872 -
                    ((C10608 + C10609) * C47971 * C48042 +
                     (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                      C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                         C47971 * C4755) *
                        C48024) *
                       C1073 +
                   (((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                      C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                         C47971 * C4755 +
                     (C10610 + C10611) * C47971 * C48042) *
                        C48024 -
                    ((C12064 + C12065) * C47971 * C48042 +
                     (C10359 * C1286 + C11712 + C11712 + C48075 * C1304 +
                      C10357 * C1285 + C11713 + C11713 + C10355 * C1303) *
                         C47971 * C4755) *
                        C47872) *
                       C48055) *
                      C48009 +
                  ((((C10811 + C10810) * C47971 * C4755 +
                     (C10814 + C10815) * C47971 * C48042) *
                        C47872 -
                    ((C10408 + C10409) * C47971 * C48042 +
                     (C10407 + C10406) * C47971 * C4755) *
                        C48024) *
                       C1072 +
                   (((C10609 + C10608) * C47971 * C4755 +
                     (C10612 + C10613) * C47971 * C48042) *
                        C48024 -
                    ((C11322 + C11323) * C47971 * C48042 +
                     (C11321 + C11320) * C47971 * C4755) *
                        C47872) *
                       C1073 +
                   (((C12065 + C12064) * C47971 * C4755 +
                     (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                      C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                         C47971 * C48042) *
                        C47872 -
                    ((C10614 + C10615) * C47971 * C48042 +
                     (C10611 + C10610) * C47971 * C4755) *
                        C48024) *
                       C48055) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C47785 * C47767 * C108 -
                  ((C10408 + C10409) * C47971 * C48042 +
                   (C10407 + C10406) * C47971 * C4755) *
                      C47785 * C47767 * C109 +
                  ((C10409 + C10408) * C47971 * C4755 +
                   (C10410 + C10411) * C47971 * C48042) *
                      C47785 * C47767 * C110 -
                  ((C10412 + C10413) * C47971 * C48042 +
                   (C10411 + C10410) * C47971 * C4755) *
                      C47785 * C47767 * C111 +
                  ((C10413 + C10412) * C47971 * C4755 +
                   (C10357 * C120 + C10388 + C10388 + C10355 * C134 +
                    C10359 * C768 + C10389 + C10389 + C48075 * C770) *
                       C47971 * C48042) *
                      C47785 * C47767 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C48094 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C48082 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48055) *
                      C286 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C48082 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C48094 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48055) *
                      C287 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C48094 -
                   ((C10359 * C927 + C10588 + C10588 + C48075 * C937 +
                     C10357 * C295 + C10589 + C10589 + C10355 * C315) *
                        C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C48082 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C47971 * C4755 +
                    (C10406 + C10407) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10608 + C10609) * C47971 * C48042 +
                    (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                     C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                        C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                     C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                        C47971 * C4755 +
                    (C10610 + C10611) * C47971 * C48042) *
                       C47785 * C48055) *
                      C48091 +
                  (((C10609 + C10608) * C47971 * C4755 +
                    (C10612 + C10613) * C47971 * C48042) *
                       C47785 * C1073 -
                   ((C10408 + C10409) * C47971 * C48042 +
                    (C10407 + C10406) * C47971 * C4755) *
                       C47785 * C1072 -
                   ((C10614 + C10615) * C47971 * C48042 +
                    (C10611 + C10610) * C47971 * C4755) *
                       C47785 * C48055) *
                      C48078 +
                  (((C10409 + C10408) * C47971 * C4755 +
                    (C10410 + C10411) * C47971 * C48042) *
                       C47785 * C1072 -
                   ((C10958 + C10959) * C47971 * C48042 +
                    (C10613 + C10612) * C47971 * C4755) *
                       C47785 * C1073 +
                   ((C10615 + C10614) * C47971 * C4755 +
                    (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                     C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                        C47971 * C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                    C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                       C47971 * C4755 +
                   (C10406 + C10407) * C47971 * C48042) *
                      C47785 * C1140 -
                  ((C10608 + C10609) * C47971 * C48042 +
                   (C10359 * C924 + C10566 + C10566 + C48075 * C934 +
                    C10357 * C291 + C10567 + C10567 + C10355 * C311) *
                       C47971 * C4755) *
                      C47785 * C1141 +
                  ((C10357 * C292 + C10568 + C10568 + C10355 * C312 +
                    C10359 * C1285 + C10569 + C10569 + C48075 * C1303) *
                       C47971 * C4755 +
                   (C10610 + C10611) * C47971 * C48042) *
                      C47785 * C1142 -
                  ((C10359 * C1697 + C11552 + C11552 + C48075 * C1703 +
                    C10357 * C1147 + C11553 + C11553 + C10355 * C1159) *
                       C47971 * C48042 +
                   (C10359 * C1696 + C11554 + C11554 + C48075 * C1702 +
                    C10357 * C1148 + C11555 + C11555 + C10355 * C1160) *
                       C47971 * C4755) *
                      C47785 * C1143 +
                  ((C10357 * C1149 + C11556 + C11556 + C10355 * C1161 +
                    C10359 * C6438 + C11557 + C11557 + C48075 * C6442) *
                       C47971 * C4755 +
                   (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                    C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                       C47971 * C48042) *
                      C47785 * C1144) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47785 * C47826 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47785 * C47833 +
                   ((C4929 * C16115 + C5799 * C48073) * C16117 +
                    (C16276 + C16277) * C48042) *
                       C47785 * C2878) *
                      C47744 +
                  (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                       C47785 * C47833 -
                   ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                       C47785 * C47826 -
                   ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                       C47785 * C2878) *
                      C47753 +
                  (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                       C47785 * C47826 -
                   ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) *
                       C47785 * C47833 +
                   ((C16281 + C16280) * C16117 +
                    (C359 * C16115 +
                     (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                        C48042) *
                       C47785 * C2878) *
                      C2881)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C48024 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C47826 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C48024) *
               C47833 +
           (((C4929 * C16115 + C5799 * C48073) * C16117 +
             (C16276 + C16277) * C48042) *
                C48024 -
            ((C17598 + C17599) * C48042 +
             (C6451 * C48073 + C5973 * C16115) * C16117) *
                C47872) *
               C2878) *
              C2618 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                C48024) *
               C47826 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C48024 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47833 +
           (((C17599 + C17598) * C16117 +
             (C1595 * C16115 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                C48024) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C48101 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C48097 +
           ((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C47785 * C48087 -
           ((C17402 + C17403) * C48042 +
            (C5801 * C48073 + C5799 * C16115) * C16117) *
               C47785 * C48065) *
              C2618 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C48097 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C48101 -
           ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C47785 *
               C48087 +
           ((C17403 + C17402) * C16117 +
            (C1433 * C16115 +
             (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                C48042) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C2510 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C47830) *
              C48100 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C47830 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C2510) *
              C48093 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
               C2510 -
           ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C47785 *
               C47830) *
              C48080 +
          (((C16567 + C16566) * C16117 +
            (C667 * C16115 +
             (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                C48042) *
               C47785 * C47830 -
           ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C47785 *
               C2510) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C48095 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C48084 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
              C5972 * C48073) *
                 C16117 +
             (C16430 + C16431) * C48042) *
                C48058) *
               C2510 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C48084 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C48095 -
            ((C18298 + C18299) * C48042 +
             (C5975 * C48073 + C5972 * C16115) * C16117) *
                C48058) *
               C47830) *
              C2618 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C48084 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C48095 -
            ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) *
                C48058) *
               C2510 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C48095 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) * C48084 +
            ((C18299 + C18298) * C16117 +
             (C2181 * C16115 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C48024 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C2510 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C48024) *
               C47830) *
              C47744 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                C48024) *
               C2510 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C48024 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47830) *
              C47753 +
          ((((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C48024 -
            ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) *
                C47872) *
               C2510 +
           (((C16897 + C16896) * C16117 +
             (C959 * C16115 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) *
                C48024) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47785 * C2510 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47785 * C47830) *
                      C48100 +
                  (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                       C47785 * C47830 -
                   ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                       C47785 * C2510) *
                      C48093 +
                  (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                       C47785 * C2510 -
                   ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) *
                       C47785 * C47830) *
                      C48080 +
                  (((C16567 + C16566) * C16117 +
                    (C667 * C16115 +
                     (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                        C48042) *
                       C47785 * C47830 -
                   ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) *
                       C47785 * C2510) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47785 * C48101 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47785 * C48097 +
                   ((C4929 * C16115 + C5799 * C48073) * C16117 +
                    (C16276 + C16277) * C48042) *
                       C47785 * C48087 -
                   ((C17402 + C17403) * C48042 +
                    (C5801 * C48073 + C5799 * C16115) * C16117) *
                       C47785 * C48065) *
                      C2618 +
                  (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                       C47785 * C48097 -
                   ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                       C47785 * C48101 -
                   ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                       C47785 * C48087 +
                   ((C17403 + C17402) * C16117 +
                    (C1433 * C16115 +
                     (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                        C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C3272 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C47826 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C3272) *
               C47833 +
           (((C4929 * C16115 + C5799 * C48073) * C16117 +
             (C16276 + C16277) * C48042) *
                C3272 -
            ((C17598 + C17599) * C48042 +
             (C6451 * C48073 + C5973 * C16115) * C16117) *
                C47872) *
               C2878) *
              C48009 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
               C47826 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C3272 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47833 +
           (((C17599 + C17598) * C16117 +
             (C1595 * C16115 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C3272) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47868 -
                   ((C16428 + C16429) * C48042 +
                    (C5550 * C48073 +
                     (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                        C16117) *
                       C47875 +
                   (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
                     C5972 * C48073) *
                        C16117 +
                    (C16430 + C16431) * C48042) *
                       C3780) *
                      C47826 +
                  (((C5550 * C16115 + C5973 * C48073) * C16117 +
                    (C16894 + C16895) * C48042) *
                       C47875 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47868 -
                   ((C18298 + C18299) * C48042 +
                    (C5975 * C48073 + C5972 * C16115) * C16117) *
                       C3780) *
                      C47833 +
                  (((C4929 * C16115 + C5799 * C48073) * C16117 +
                    (C16276 + C16277) * C48042) *
                       C47868 -
                   ((C17598 + C17599) * C48042 +
                    (C6451 * C48073 + C5973 * C16115) * C16117) *
                       C47875 +
                   ((C5975 * C16115 +
                     (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                        C16117 +
                    (C5974 * C16115 +
                     (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                        C48042) *
                       C3780) *
                      C2878) *
                 C47739) /
                (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C3272 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C48101 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C47872 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C3272) *
              C48097 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C3272 -
           ((C17598 + C17599) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C47872) *
              C48087 +
          (((C6451 * C16115 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C16117 +
            (C6307 * C16115 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C17402 + C17403) * C48042 +
            (C5801 * C48073 + C5799 * C16115) * C16117) *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C3272 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C2510 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C3272) *
               C47830) *
              C48091 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
               C2510 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C3272 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47830) *
              C48078 +
          ((((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C3272 -
            ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) *
                C47872) *
               C2510 +
           (((C16897 + C16896) * C16117 +
             (C959 * C16115 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48102 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C48099 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48090 -
           ((C18430 + C18431) * C48042 +
            (C7309 * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C16115) *
                C16117) *
               C48071) *
              C2510 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C48099 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C48102 -
           ((C18298 + C18299) * C48042 +
            (C5975 * C48073 + C5972 * C16115) * C16117) *
               C48090 +
           ((C7309 * C16115 +
             (C113 * C7296 + C7305 + C7305 + C47988 * C7300) * C48073) *
                C16117 +
            (C7165 * C16115 +
             (C113 * C7297 + C7306 + C7306 + C47988 * C7301) * C48073) *
                C48042) *
               C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C47868 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47875 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
              C5972 * C48073) *
                 C16117 +
             (C16430 + C16431) * C48042) *
                C3780) *
               C2510 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47875 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C47868 -
            ((C18298 + C18299) * C48042 +
             (C5975 * C48073 + C5972 * C16115) * C16117) *
                C3780) *
               C47830) *
              C48009 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47875 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47868 -
            ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C3780) *
               C2510 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47868 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) * C47875 +
            ((C18299 + C18298) * C16117 +
             (C2181 * C16115 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C3272 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C2510 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C3272) *
               C47830) *
              C48091 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
               C2510 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C3272 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47830) *
              C48078 +
          ((((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C3272 -
            ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) *
                C47872) *
               C2510 +
           (((C16897 + C16896) * C16117 +
             (C959 * C16115 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C3272 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C48101 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C47872 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C3272) *
              C48097 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C3272 -
           ((C17598 + C17599) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C47872) *
              C48087 +
          (((C6451 * C16115 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C16117 +
            (C6307 * C16115 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C17402 + C17403) * C48042 +
            (C5801 * C48073 + C5799 * C16115) * C16117) *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C1414 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C1415 +
           ((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C47785 * C1416 -
           ((C17402 + C17403) * C48042 +
            (C5801 * C48073 + C5799 * C16115) * C16117) *
               C47785 * C48065) *
              C48009 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C1415 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C1414 -
           ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C47785 *
               C1416 +
           ((C17403 + C17402) * C16117 +
            (C1433 * C16115 +
             (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                C48042) *
               C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C48023 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C47830) *
              C654 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C47830 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C48023) *
              C655 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
               C48023 -
           ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C47785 *
               C47830) *
              C656 +
          (((C16567 + C16566) * C16117 +
            (C667 * C16115 +
             (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                C48042) *
               C47785 * C47830 -
           ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C47785 *
               C48023) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C1818 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C1819 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
              C5972 * C48073) *
                 C16117 +
             (C16430 + C16431) * C48042) *
                C48058) *
               C48023 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C1819 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C1818 -
            ((C18298 + C18299) * C48042 +
             (C5975 * C48073 + C5972 * C16115) * C16117) *
                C48058) *
               C47830) *
              C48009 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C1819 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C1818 -
            ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) *
                C48058) *
               C48023 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C1818 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) * C1819 +
            ((C18299 + C18298) * C16117 +
             (C2181 * C16115 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48024 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C1414 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C47872 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C48024) *
              C1415 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C48024 -
           ((C17598 + C17599) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C47872) *
              C1416 +
          (((C6451 * C16115 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C16117 +
            (C6307 * C16115 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C17402 + C17403) * C48042 +
            (C5801 * C48073 + C5799 * C16115) * C16117) *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C48024 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C48023 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C48024) *
               C47830) *
              C286 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                C48024) *
               C48023 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C48024 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47830) *
              C287 +
          ((((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C48024 -
            ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) *
                C47872) *
               C48023 +
           (((C16897 + C16896) * C16117 +
             (C959 * C16115 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) *
                C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C2282 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C2283 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C2284 -
           ((C18430 + C18431) * C48042 +
            (C7309 * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C16115) *
                C16117) *
               C48071) *
              C48023 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C2283 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C2282 -
           ((C18298 + C18299) * C48042 +
            (C5975 * C48073 + C5972 * C16115) * C16117) *
               C2284 +
           ((C7309 * C16115 +
             (C113 * C7296 + C7305 + C7305 + C47988 * C7300) * C48073) *
                C16117 +
            (C7165 * C16115 +
             (C113 * C7297 + C7306 + C7306 + C47988 * C7301) * C48073) *
                C48042) *
               C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                C4928 * C48073) *
                   C16117 +
               (C16120 + C16121) * C48042) *
                  C47785 * C47767 * C108 -
              ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                  C47785 * C47767 * C109 +
              ((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                  C47785 * C47767 * C110 -
              ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) *
                  C47785 * C47767 * C111 +
              ((C16127 + C16126) * C16117 +
               (C168 * C16115 +
                (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
                   C48042) *
                  C47785 * C47767 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                 C4928 * C48073) *
                    C16117 +
                (C16120 + C16121) * C48042) *
                   C47785 * C48094 -
               ((C16274 + C16275) * C48042 +
                (C4929 * C48073 + C4928 * C16115) * C16117) *
                   C47785 * C48082 +
               ((C4929 * C16115 + C5799 * C48073) * C16117 +
                (C16276 + C16277) * C48042) *
                   C47785 * C48055) *
                  C286 +
              (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                   C47785 * C48082 -
               ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                   C47785 * C48094 -
               ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                   C47785 * C48055) *
                  C287 +
              (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                   C47785 * C48094 -
               ((C359 * C48073 + C358 * C16115) * C48042 +
                (C16279 + C16278) * C16117) *
                   C47785 * C48082 +
               ((C16281 + C16280) * C16117 +
                (C359 * C16115 +
                 (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                    C48042) *
                   C47785 * C48055) *
                  C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48095 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C47767 * C286 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C48084 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C48095 -
           ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C48058) *
              C47767 * C287 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C48095 -
           ((C959 * C48073 + C547 * C16115) * C48042 +
            (C16433 + C16432) * C16117) *
               C48084 +
           ((C16435 + C16434) * C16117 +
            (C548 * C16115 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C1072 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C1073 +
           ((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C47785 * C48055) *
              C48091 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C1073 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C1072 -
           ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C47785 *
               C48055) *
              C48078 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
               C1072 -
           ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C47785 *
               C1073 +
           ((C16281 + C16280) * C16117 +
            (C359 * C16115 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
            C4928 * C48073) *
               C16117 +
           (C16120 + C16121) * C48042) *
              C47785 * C1140 -
          ((C16274 + C16275) * C48042 +
           (C4929 * C48073 + C4928 * C16115) * C16117) *
              C47785 * C1141 +
          ((C4929 * C16115 + C5799 * C48073) * C16117 +
           (C16276 + C16277) * C48042) *
              C47785 * C1142 -
          ((C5800 * C48073 + C1434 * C16115) * C48042 +
           (C5801 * C48073 + C5799 * C16115) * C16117) *
              C47785 * C1143 +
          ((C5801 * C16115 +
            (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
               C16117 +
           (C5800 * C16115 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
               C48042) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48095 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C1072 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C48084 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C48095 -
           ((C5974 * C48073 + C2182 * C16115) * C48042 +
            (C5975 * C48073 + C5972 * C16115) * C16117) *
               C48058) *
              C1073 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C48095 -
           ((C6307 * C48073 + C1596 * C16115) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C48084 +
           ((C5975 * C16115 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C16117 +
            (C5974 * C16115 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C1818 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C47767 * C48091 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C1819 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C1818 -
           ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C48058) *
              C47767 * C48078 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C1818 -
           ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) * C1819 +
           ((C16435 + C16434) * C16117 +
            (C548 * C16115 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C1818 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C48094 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C1819 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C1818 -
           ((C5974 * C48073 + C2182 * C16115) * C48042 +
            (C5975 * C48073 + C5972 * C16115) * C16117) *
               C48058) *
              C48082 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C1818 -
           ((C17598 + C17599) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C1819 +
           ((C5975 * C16115 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C16117 +
            (C5974 * C16115 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
            C4928 * C48073) *
               C16117 +
           (C16120 + C16121) * C48042) *
              C1993 -
          ((C16428 + C16429) * C48042 +
           (C5550 * C48073 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
               C16117) *
              C1994 +
          (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
            C5972 * C48073) *
               C16117 +
           (C16430 + C16431) * C48042) *
              C1995 -
          ((C7165 * C48073 + C2300 * C16115) * C48042 +
           (C7309 * C48073 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C16115) *
               C16117) *
              C1996 +
          (((C113 * C2001 + C2020 + C2020 + C47988 * C2013) * C16115 +
            (C113 * C6825 + C6832 + C6832 + C47988 * C6829) * C48073) *
               C16117 +
           ((C113 * C2002 + C2021 + C2021 + C47988 * C2014) * C16115 +
            (C113 * C6826 + C6833 + C6833 + C47988 * C6830) * C48073) *
               C48042) *
              C1997) *
         C47767 * C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C48024 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C1072 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C48024) *
               C1073 +
           (((C4929 * C16115 + C5799 * C48073) * C16117 +
             (C16276 + C16277) * C48042) *
                C48024 -
            ((C17598 + C17599) * C48042 +
             (C6451 * C48073 + C5973 * C16115) * C16117) *
                C47872) *
               C48055) *
              C48009 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                C48024) *
               C1072 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C48024 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C1073 +
           (((C17599 + C17598) * C16117 +
             (C1595 * C16115 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48024 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C47767 * C654 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C48024) *
              C47767 * C655 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C48024 -
           ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) * C47872) *
              C47767 * C656 +
          (((C16699 + C16698) * C16117 +
            (C777 * C16115 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C2282 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C2283 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C2284 -
           ((C18430 + C18431) * C48042 +
            (C7309 * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C16115) *
                C16117) *
               C48071) *
              C47767 * C48009 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C2283 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C2282 -
           ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C2284 +
           ((C18431 + C18430) * C16117 +
            (C2299 * C16115 +
             (C113 * C2402 + C2412 + C2412 + C47988 * C2408) * C48073) *
                C48042) *
               C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C48094 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C48082 +
           ((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C47785 * C48055) *
              C286 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C48082 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C48094 -
           ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C47785 *
               C48055) *
              C287 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
               C48094 -
           ((C359 * C48073 + C358 * C16115) * C48042 +
            (C16279 + C16278) * C16117) *
               C47785 * C48082 +
           ((C16281 + C16280) * C16117 +
            (C359 * C16115 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
            C4928 * C48073) *
               C16117 +
           (C16120 + C16121) * C48042) *
              C47785 * C47767 * C108 -
          ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
              C47767 * C109 +
          ((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
              C47767 * C110 -
          ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C47785 *
              C47767 * C111 +
          ((C16127 + C16126) * C16117 +
           (C168 * C16115 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
               C48042) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C1072 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C1073 +
           ((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C47785 * C48055) *
              C48091 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C1073 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C1072 -
           ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C47785 *
               C48055) *
              C48078 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
               C1072 -
           ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C47785 *
               C1073 +
           ((C16281 + C16280) * C16117 +
            (C359 * C16115 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
            C4928 * C48073) *
               C16117 +
           (C16120 + C16121) * C48042) *
              C47785 * C1140 -
          ((C16274 + C16275) * C48042 +
           (C4929 * C48073 + C4928 * C16115) * C16117) *
              C47785 * C1141 +
          ((C4929 * C16115 + C5799 * C48073) * C16117 +
           (C16276 + C16277) * C48042) *
              C47785 * C1142 -
          ((C5800 * C48073 + C1434 * C16115) * C48042 +
           (C5801 * C48073 + C5799 * C16115) * C16117) *
              C47785 * C1143 +
          ((C5801 * C16115 +
            (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
               C16117 +
           (C5800 * C16115 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
               C48042) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C1818 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C47767 * C48091 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C1819 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C1818 -
           ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C48058) *
              C47767 * C48078 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C1818 -
           ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) * C1819 +
           ((C16435 + C16434) * C16117 +
            (C548 * C16115 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C1818 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C1819 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C48094 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C1819 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C1818 -
           ((C5974 * C48073 + C2182 * C16115) * C48042 +
            (C5975 * C48073 + C5972 * C16115) * C16117) *
               C48058) *
              C48082 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C1818 -
           ((C17598 + C17599) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C1819 +
           ((C5975 * C16115 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C16117 +
            (C5974 * C16115 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C3272 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C48023 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C3272) *
               C47830) *
              C47744 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
               C48023 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C3272 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47830) *
              C47753 +
          ((((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C3272 -
            ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) *
                C47872) *
               C48023 +
           (((C16897 + C16896) * C16117 +
             (C959 * C16115 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C3272) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C47868 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47875 +
            (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
              C5972 * C48073) *
                 C16117 +
             (C16430 + C16431) * C48042) *
                C3780) *
               C48023 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47875 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C47868 -
            ((C18298 + C18299) * C48042 +
             (C5975 * C48073 + C5972 * C16115) * C16117) *
                C3780) *
               C47830) *
              C2618 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47875 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47868 -
            ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C3780) *
               C48023 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47868 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) * C47875 +
            ((C18299 + C18298) * C16117 +
             (C2181 * C16115 +
              (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C48073) *
                 C48042) *
                C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C3272 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C48094 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C3272) *
               C48082 +
           (((C4929 * C16115 + C5799 * C48073) * C16117 +
             (C16276 + C16277) * C48042) *
                C3272 -
            ((C17598 + C17599) * C48042 +
             (C6451 * C48073 + C5973 * C16115) * C16117) *
                C47872) *
               C48055) *
              C2618 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
               C48094 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C3272 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C48082 +
           (((C17599 + C17598) * C16117 +
             (C1595 * C16115 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C3272 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C47767 * C48100 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
              C47767 * C48093 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C3272 -
           ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) * C47872) *
              C47767 * C48080 +
          (((C16699 + C16698) * C16117 +
            (C777 * C16115 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48102 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C48099 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48090 -
           ((C18430 + C18431) * C48042 +
            (C7309 * C48073 +
             (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C16115) *
                C16117) *
               C48071) *
              C47767 * C2618 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C48099 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C48102 -
           ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C48090 +
           ((C18431 + C18430) * C16117 +
            (C2299 * C16115 +
             (C113 * C2402 + C2412 + C2412 + C47988 * C2408) * C48073) *
                C48042) *
               C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47868 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47875 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C3780) *
              C47767 * C47744 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47875 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47868 -
           ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C3780) *
              C47767 * C47753 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47868 -
           ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) * C47875 +
           ((C16435 + C16434) * C16117 +
            (C548 * C16115 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C3780) *
              C47767 * C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C3272 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C47767 * C48100 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
              C47767 * C48093 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C3272 -
           ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) * C47872) *
              C47767 * C48080 +
          (((C16699 + C16698) * C16117 +
            (C777 * C16115 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C3272 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C48094 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C3272) *
               C48082 +
           (((C4929 * C16115 + C5799 * C48073) * C16117 +
             (C16276 + C16277) * C48042) *
                C3272 -
            ((C17598 + C17599) * C48042 +
             (C6451 * C48073 + C5973 * C16115) * C16117) *
                C47872) *
               C48055) *
              C2618 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C3272) *
               C48094 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C3272 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C48082 +
           (((C17599 + C17598) * C16117 +
             (C1595 * C16115 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47785 * C48023 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47785 * C47830) *
                      C654 +
                  (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                       C47785 * C47830 -
                   ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                       C47785 * C48023) *
                      C655 +
                  (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                       C47785 * C48023 -
                   ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) *
                       C47785 * C47830) *
                      C656 +
                  (((C16567 + C16566) * C16117 +
                    (C667 * C16115 +
                     (C113 * C298 + C341 + C341 + C47988 * C318) * C48073) *
                        C48042) *
                       C47785 * C47830 -
                   ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) *
                       C47785 * C48023) *
                      C48059)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47785 * C1414 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47785 * C1415 +
                   ((C4929 * C16115 + C5799 * C48073) * C16117 +
                    (C16276 + C16277) * C48042) *
                       C47785 * C1416 -
                   ((C17402 + C17403) * C48042 +
                    (C5801 * C48073 + C5799 * C16115) * C16117) *
                       C47785 * C48065) *
                      C48009 +
                  (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                       C47785 * C1415 -
                   ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                       C47785 * C1414 -
                   ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                       C47785 * C1416 +
                   ((C17403 + C17402) * C16117 +
                    (C1433 * C16115 +
                     (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C48073) *
                        C48042) *
                       C47785 * C48065) *
                      C47750)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C48024 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C48023 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C48024) *
               C47830) *
              C286 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                C48024) *
               C48023 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C48024 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C47830) *
              C287 +
          ((((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C48024 -
            ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) *
                C47872) *
               C48023 +
           (((C16897 + C16896) * C16117 +
             (C959 * C16115 +
              (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C48073) *
                 C48042) *
                C47872 -
            ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) *
                C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48024 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C1414 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C47872 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C48024) *
              C1415 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C48024 -
           ((C17598 + C17599) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C47872) *
              C1416 +
          (((C6451 * C16115 +
             (C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C48073) *
                C16117 +
            (C6307 * C16115 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C48073) *
                C48042) *
               C47872 -
           ((C17402 + C17403) * C48042 +
            (C5801 * C48073 + C5799 * C16115) * C16117) *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C48094 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C48082 +
           ((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C47785 * C48055) *
              C286 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C48082 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C48094 -
           ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C47785 *
               C48055) *
              C287 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
               C48094 -
           ((C359 * C48073 + C358 * C16115) * C48042 +
            (C16279 + C16278) * C16117) *
               C47785 * C48082 +
           ((C16281 + C16280) * C16117 +
            (C359 * C16115 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
            C4928 * C48073) *
               C16117 +
           (C16120 + C16121) * C48042) *
              C47785 * C47767 * C108 -
          ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
              C47767 * C109 +
          ((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
              C47767 * C110 -
          ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C47785 *
              C47767 * C111 +
          ((C16127 + C16126) * C16117 +
           (C168 * C16115 +
            (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
               C48042) *
              C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48095 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C47767 * C286 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C48084 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C48095 -
           ((C16434 + C16435) * C48042 + (C16431 + C16430) * C16117) * C48058) *
              C47767 * C287 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C48095 -
           ((C959 * C48073 + C547 * C16115) * C48042 +
            (C16433 + C16432) * C16117) *
               C48084 +
           ((C16435 + C16434) * C16117 +
            (C548 * C16115 +
             (C113 * C2168 + C2176 + C2176 + C47988 * C2170) * C48073) *
                C48042) *
               C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C47785 * C1072 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C47785 * C1073 +
           ((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C47785 * C48055) *
              C48091 +
          (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C47785 *
               C1073 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C47785 *
               C1072 -
           ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) * C47785 *
               C48055) *
              C48078 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C47785 *
               C1072 -
           ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) * C47785 *
               C1073 +
           ((C16281 + C16280) * C16117 +
            (C359 * C16115 +
             (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                C48042) *
               C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
            C4928 * C48073) *
               C16117 +
           (C16120 + C16121) * C48042) *
              C47785 * C1140 -
          ((C16274 + C16275) * C48042 +
           (C4929 * C48073 + C4928 * C16115) * C16117) *
              C47785 * C1141 +
          ((C4929 * C16115 + C5799 * C48073) * C16117 +
           (C16276 + C16277) * C48042) *
              C47785 * C1142 -
          ((C5800 * C48073 + C1434 * C16115) * C48042 +
           (C5801 * C48073 + C5799 * C16115) * C16117) *
              C47785 * C1143 +
          ((C5801 * C16115 +
            (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
               C16117 +
           (C5800 * C16115 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
               C48042) *
              C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48095 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C48084 +
           (((C113 * C481 + C516 + C516 + C47988 * C501) * C16115 +
             C5972 * C48073) *
                C16117 +
            (C16430 + C16431) * C48042) *
               C48058) *
              C1072 +
          (((C5550 * C16115 + C5973 * C48073) * C16117 +
            (C16894 + C16895) * C48042) *
               C48084 -
           ((C16274 + C16275) * C48042 +
            (C4929 * C48073 + C4928 * C16115) * C16117) *
               C48095 -
           ((C5974 * C48073 + C2182 * C16115) * C48042 +
            (C5975 * C48073 + C5972 * C16115) * C16117) *
               C48058) *
              C1073 +
          (((C4929 * C16115 + C5799 * C48073) * C16117 +
            (C16276 + C16277) * C48042) *
               C48095 -
           ((C6307 * C48073 + C1596 * C16115) * C48042 +
            (C6451 * C48073 + C5973 * C16115) * C16117) *
               C48084 +
           ((C5975 * C16115 +
             (C113 * C5947 + C5962 + C5962 + C47988 * C5951) * C48073) *
                C16117 +
            (C5974 * C16115 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C48073) *
                C48042) *
               C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
             C4928 * C48073) *
                C16117 +
            (C16120 + C16121) * C48042) *
               C48024 -
           ((C16428 + C16429) * C48042 +
            (C5550 * C48073 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                C16117) *
               C47872) *
              C47767 * C654 +
          (((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
           ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) * C48024) *
              C47767 * C655 +
          (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) * C48024 -
           ((C16698 + C16699) * C48042 + (C16433 + C16432) * C16117) * C47872) *
              C47767 * C656 +
          (((C16699 + C16698) * C16117 +
            (C777 * C16115 +
             (C113 * C928 + C950 + C950 + C47988 * C938) * C48073) *
                C48042) *
               C47872 -
           ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
              C4928 * C48073) *
                 C16117 +
             (C16120 + C16121) * C48042) *
                C48024 -
            ((C16428 + C16429) * C48042 +
             (C5550 * C48073 +
              (C113 * C480 + C515 + C515 + C47988 * C500) * C16115) *
                 C16117) *
                C47872) *
               C1072 +
           (((C5550 * C16115 + C5973 * C48073) * C16117 +
             (C16894 + C16895) * C48042) *
                C47872 -
            ((C16274 + C16275) * C48042 +
             (C4929 * C48073 + C4928 * C16115) * C16117) *
                C48024) *
               C1073 +
           (((C4929 * C16115 + C5799 * C48073) * C16117 +
             (C16276 + C16277) * C48042) *
                C48024 -
            ((C17598 + C17599) * C48042 +
             (C6451 * C48073 + C5973 * C16115) * C16117) *
                C47872) *
               C48055) *
              C48009 +
          ((((C16429 + C16428) * C16117 + (C16432 + C16433) * C48042) * C47872 -
            ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                C48024) *
               C1072 +
           (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) * C48024 -
            ((C16896 + C16897) * C48042 + (C16895 + C16894) * C16117) *
                C47872) *
               C1073 +
           (((C17599 + C17598) * C16117 +
             (C1595 * C16115 +
              (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C48073) *
                 C48042) *
                C47872 -
            ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                    C4928 * C48073) *
                       C16117 +
                   (C16120 + C16121) * C48042) *
                      C47785 * C47767 * C108 -
                  ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                      C47785 * C47767 * C109 +
                  ((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                      C47785 * C47767 * C110 -
                  ((C16126 + C16127) * C48042 + (C16125 + C16124) * C16117) *
                      C47785 * C47767 * C111 +
                  ((C16127 + C16126) * C16117 +
                   (C168 * C16115 +
                    (C113 * C658 + C664 + C664 + C47988 * C660) * C48073) *
                       C48042) *
                      C47785 * C47767 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47785 * C48094 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47785 * C48082 +
                   ((C4929 * C16115 + C5799 * C48073) * C16117 +
                    (C16276 + C16277) * C48042) *
                       C47785 * C48055) *
                      C286 +
                  (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                       C47785 * C48082 -
                   ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                       C47785 * C48094 -
                   ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                       C47785 * C48055) *
                      C287 +
                  (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                       C47785 * C48094 -
                   ((C359 * C48073 + C358 * C16115) * C48042 +
                    (C16279 + C16278) * C16117) *
                       C47785 * C48082 +
                   ((C16281 + C16280) * C16117 +
                    (C359 * C16115 +
                     (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                        C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                     C4928 * C48073) *
                        C16117 +
                    (C16120 + C16121) * C48042) *
                       C47785 * C1072 -
                   ((C16274 + C16275) * C48042 +
                    (C4929 * C48073 + C4928 * C16115) * C16117) *
                       C47785 * C1073 +
                   ((C4929 * C16115 + C5799 * C48073) * C16117 +
                    (C16276 + C16277) * C48042) *
                       C47785 * C48055) *
                      C48091 +
                  (((C16275 + C16274) * C16117 + (C16278 + C16279) * C48042) *
                       C47785 * C1073 -
                   ((C16122 + C16123) * C48042 + (C16121 + C16120) * C16117) *
                       C47785 * C1072 -
                   ((C16280 + C16281) * C48042 + (C16277 + C16276) * C16117) *
                       C47785 * C48055) *
                      C48078 +
                  (((C16123 + C16122) * C16117 + (C16124 + C16125) * C48042) *
                       C47785 * C1072 -
                   ((C16566 + C16567) * C48042 + (C16279 + C16278) * C16117) *
                       C47785 * C1073 +
                   ((C16281 + C16280) * C16117 +
                    (C359 * C16115 +
                     (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C48073) *
                        C48042) *
                       C47785 * C48055) *
                      C48049)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C137 + C137 + C47988 * C129) * C16115 +
                    C4928 * C48073) *
                       C16117 +
                   (C16120 + C16121) * C48042) *
                      C47785 * C1140 -
                  ((C16274 + C16275) * C48042 +
                   (C4929 * C48073 + C4928 * C16115) * C16117) *
                      C47785 * C1141 +
                  ((C4929 * C16115 + C5799 * C48073) * C16117 +
                   (C16276 + C16277) * C48042) *
                      C47785 * C1142 -
                  ((C5800 * C48073 + C1434 * C16115) * C48042 +
                   (C5801 * C48073 + C5799 * C16115) * C16117) *
                      C47785 * C1143 +
                  ((C5801 * C16115 +
                    (C113 * C5778 + C5791 + C5791 + C47988 * C5782) * C48073) *
                       C16117 +
                   (C5800 * C16115 +
                    (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C48073) *
                       C48042) *
                      C47785 * C1144) *
                 C47739) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
                     C4928 * C21588 + C4929 * C21589) *
                        C47716 * C47785 * C47826 -
                    (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) *
                        C47716 * C47785 * C47833 +
                    (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) *
                        C47716 * C47785 * C2878) *
                       C47744 +
                   ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 *
                        C47785 * C47833 -
                    (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 *
                        C47785 * C47826 -
                    (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                        C47785 * C2878) *
                       C47753 +
                   ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 *
                        C47785 * C47826 -
                    (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 *
                        C47785 * C47833 +
                    (C357 * C21587 + C1433 * C21588 +
                     (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
                        C47716 * C47785 * C2878) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C48024 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C47826 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C48024) *
               C47833 +
           ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
                C48024 -
            (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
                C47872) *
               C2878) *
              C2618 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
               C47826 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C48024 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47833 +
           ((C1596 * C21587 + C6307 * C21588 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C21589) *
                C47716 * C47872 -
            (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                C48024) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C48101 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C48097 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48087 -
           (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
               C47785 * C48065) *
              C2618 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C48097 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C48101 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48087 +
           (C1434 * C21587 + C5800 * C21588 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C21589) *
               C47716 * C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C2510 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C47830) *
              C48100 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C47830 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C2510) *
              C48093 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C2510 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C47830) *
              C48080 +
          ((C358 * C21587 + C359 * C21588 +
            (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C21589) *
               C47716 * C47785 * C47830 -
           (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C47785 *
               C2510) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C48095 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C48084 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
             C5972 * C21588 + C5975 * C21589) *
                C47716 * C48058) *
               C2510 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C48084 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C48095 -
            (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
                C48058) *
               C47830) *
              C2618 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C48084 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48095 -
            (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
                C48058) *
               C2510 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C48095 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C48084 +
            (C2182 * C21587 + C5974 * C21588 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C21589) *
                C47716 * C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C48024 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C2510 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C48024) *
               C47830) *
              C47744 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
               C2510 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C48024 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47830) *
              C47753 +
          (((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C48024 -
            (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 *
                C47872) *
               C2510 +
           ((C958 * C21587 + C1595 * C21588 +
             (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C21589) *
                C47716 * C47872 -
            (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 *
                C48024) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
                     C4928 * C21588 + C4929 * C21589) *
                        C47716 * C47785 * C2510 -
                    (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) *
                        C47716 * C47785 * C47830) *
                       C48100 +
                   ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 *
                        C47785 * C47830 -
                    (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 *
                        C47785 * C2510) *
                       C48093 +
                   ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 *
                        C47785 * C2510 -
                    (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 *
                        C47785 * C47830) *
                       C48080 +
                   ((C358 * C21587 + C359 * C21588 +
                     (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C21589) *
                        C47716 * C47785 * C47830 -
                    (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 *
                        C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
                     C4928 * C21588 + C4929 * C21589) *
                        C47716 * C47785 * C48101 -
                    (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) *
                        C47716 * C47785 * C48097 +
                    (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) *
                        C47716 * C47785 * C48087 -
                    (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) *
                        C47716 * C47785 * C48065) *
                       C2618 +
                   ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 *
                        C47785 * C48097 -
                    (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 *
                        C47785 * C48101 -
                    (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                        C47785 * C48087 +
                    (C1434 * C21587 + C5800 * C21588 +
                     (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C21589) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C3272 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C47826 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C3272) *
               C47833 +
           ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
                C3272 -
            (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
                C47872) *
               C2878) *
              C48009 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
               C47826 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C3272 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47833 +
           ((C1596 * C21587 + C6307 * C21588 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C21589) *
                C47716 * C47872 -
            (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                C3272) *
               C2878) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47868 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47875 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C3780) *
              C47826 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C47875 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47868 -
           (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
               C3780) *
              C47833 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47868 -
           (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
               C47875 +
           (C5975 * C21587 + C22453 * C21588 +
            (C113 * C22444 + C22450 + C22450 + C47988 * C22446) * C21589) *
               C47716 * C3780) *
              C2878) *
         C47739) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C3272 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C48101 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C47872 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C3272) *
              C48097 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C3272 -
           (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
               C47872) *
              C48087 +
          ((C6451 * C21587 + C22804 * C21588 +
            (C113 * C22795 + C22801 + C22801 + C47988 * C22797) * C21589) *
               C47716 * C47872 -
           (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C3272 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C2510 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C3272) *
               C47830) *
              C48091 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
               C2510 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C3272 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47830) *
              C48078 +
          (((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C3272 -
            (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 *
                C47872) *
               C2510 +
           ((C958 * C21587 + C1595 * C21588 +
             (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C21589) *
                C47716 * C47872 -
            (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48102 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C48099 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48090 -
           (C23441 * C21589 + C7309 * C21588 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C21587) *
               C47716 * C48071) *
              C2510 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C48099 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C48102 -
           (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
               C48090 +
           (C7309 * C21587 + C23441 * C21588 +
            (C113 * C23432 + C23438 + C23438 + C47988 * C23434) * C21589) *
               C47716 * C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C47868 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47875 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
             C5972 * C21588 + C5975 * C21589) *
                C47716 * C3780) *
               C2510 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47875 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C47868 -
            (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
                C3780) *
               C47830) *
              C48009 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47875 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47868 -
            (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
                C3780) *
               C2510 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47868 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47875 +
            (C2182 * C21587 + C5974 * C21588 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C21589) *
                C47716 * C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C3272 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C2510 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C3272) *
               C47830) *
              C48091 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
               C2510 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C3272 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47830) *
              C48078 +
          (((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C3272 -
            (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 *
                C47872) *
               C2510 +
           ((C958 * C21587 + C1595 * C21588 +
             (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C21589) *
                C47716 * C47872 -
            (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C3272) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C3272 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C48101 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C47872 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C3272) *
              C48097 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C3272 -
           (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
               C47872) *
              C48087 +
          ((C6451 * C21587 + C22804 * C21588 +
            (C113 * C22795 + C22801 + C22801 + C47988 * C22797) * C21589) *
               C47716 * C47872 -
           (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
               C3272) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C1414 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C1415 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C1416 -
           (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
               C47785 * C48065) *
              C48009 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C1415 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C1414 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C1416 +
           (C1434 * C21587 + C5800 * C21588 +
            (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C21589) *
               C47716 * C47785 * C48065) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C48023 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C47830) *
              C654 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C47830 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C48023) *
              C655 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C48023 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C47830) *
              C656 +
          ((C358 * C21587 + C359 * C21588 +
            (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C21589) *
               C47716 * C47785 * C47830 -
           (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C47785 *
               C48023) *
              C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C1818 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C1819 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
             C5972 * C21588 + C5975 * C21589) *
                C47716 * C48058) *
               C48023 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C1819 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C1818 -
            (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
                C48058) *
               C47830) *
              C48009 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C1819 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C1818 -
            (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
                C48058) *
               C48023 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C1818 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 * C1819 +
            (C2182 * C21587 + C5974 * C21588 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C21589) *
                C47716 * C48058) *
               C47830) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48024 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C1414 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C47872 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C48024) *
              C1415 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C48024 -
           (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
               C47872) *
              C1416 +
          ((C6451 * C21587 + C22804 * C21588 +
            (C113 * C22795 + C22801 + C22801 + C47988 * C22797) * C21589) *
               C47716 * C47872 -
           (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C48024 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C48023 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C48024) *
               C47830) *
              C286 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
               C48023 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C48024 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47830) *
              C287 +
          (((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C48024 -
            (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 *
                C47872) *
               C48023 +
           ((C958 * C21587 + C1595 * C21588 +
             (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C21589) *
                C47716 * C47872 -
            (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 *
                C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C2282 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C2283 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C2284 -
           (C23441 * C21589 + C7309 * C21588 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C21587) *
               C47716 * C48071) *
              C48023 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 * C2283 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 * C2282 -
           (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
               C2284 +
           (C7309 * C21587 + C23441 * C21588 +
            (C113 * C23432 + C23438 + C23438 + C47988 * C23434) * C21589) *
               C47716 * C48071) *
              C47830) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
               C4928 * C21588 + C4929 * C21589) *
                  C47716 * C47785 * C47767 * C108 -
              (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 *
                  C47785 * C47767 * C109 +
              (C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 *
                  C47785 * C47767 * C110 -
              (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 *
                  C47785 * C47767 * C111 +
              (C167 * C21587 + C667 * C21588 +
               (C113 * C298 + C341 + C341 + C47988 * C318) * C21589) *
                  C47716 * C47785 * C47767 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
                C4928 * C21588 + C4929 * C21589) *
                   C47716 * C47785 * C48094 -
               (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                   C47785 * C48082 +
               (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
                   C47785 * C48055) *
                  C286 +
              ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 *
                   C47785 * C48082 -
               (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 *
                   C47785 * C48094 -
               (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                   C47785 * C48055) *
                  C287 +
              ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 *
                   C47785 * C48094 -
               (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 *
                   C47785 * C48082 +
               (C357 * C21587 + C1433 * C21588 +
                (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
                   C47716 * C47785 * C48055) *
                  C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48095 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C47767 * C286 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C48084 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48095 -
           (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
               C48058) *
              C47767 * C287 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C48095 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C48084 +
           (C546 * C21587 + C2181 * C21588 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C21589) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C1072 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C1073 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48055) *
              C48091 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C1073 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C1072 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48055) *
              C48078 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C1072 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C1073 +
           (C357 * C21587 + C1433 * C21588 +
            (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C47785 * C1140 -
          (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 * C47785 *
              C1141 +
          (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C47785 *
              C1142 -
          (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
              C47785 * C1143 +
          (C5801 * C21587 + C22334 * C21588 +
           (C113 * C22325 + C22331 + C22331 + C47988 * C22327) * C21589) *
              C47716 * C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48095 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C1072 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C48084 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C48095 -
           (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
               C48058) *
              C1073 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C48095 -
           ((C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C21589 +
            C6451 * C21588 + C5973 * C21587) *
               C47716 * C48084 +
           (C5975 * C21587 + C22453 * C21588 +
            (C113 * C22444 + C22450 + C22450 + C47988 * C22446) * C21589) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C1818 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C47767 * C48091 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C1819 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C1818 -
           (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
               C48058) *
              C47767 * C48078 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C1818 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C1819 +
           (C546 * C21587 + C2181 * C21588 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C21589) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C1818 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C48094 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 * C1819 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 * C1818 -
           (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
               C48058) *
              C48082 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C1818 -
           (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
               C1819 +
           (C5975 * C21587 + C22453 * C21588 +
            (C113 * C22444 + C22450 + C22450 + C47988 * C22446) * C21589) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C1993 -
          (C5973 * C21589 + C5550 * C21588 +
           (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
              C47716 * C1994 +
          ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
           C5972 * C21588 + C5975 * C21589) *
              C47716 * C1995 -
          ((C113 * C7296 + C7305 + C7305 + C47988 * C7300) * C21589 +
           C7309 * C21588 +
           (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C21587) *
              C47716 * C1996 +
          ((C113 * C2001 + C2020 + C2020 + C47988 * C2013) * C21587 +
           (C113 * C6825 + C6832 + C6832 + C47988 * C6829) * C21588 +
           (C113 * C23086 + C23090 + C23090 + C47988 * C23088) * C21589) *
              C47716 * C1997) *
         C47767 * C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C48024 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C1072 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C48024) *
               C1073 +
           ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
                C48024 -
            ((C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C21589 +
             C6451 * C21588 + C5973 * C21587) *
                C47716 * C47872) *
               C48055) *
              C48009 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
               C1072 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C48024 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C1073 +
           ((C1596 * C21587 + C6307 * C21588 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C21589) *
                C47716 * C47872 -
            (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48024 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C47767 * C654 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
              C47767 * C655 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C48024 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C47872) *
              C47767 * C656 +
          ((C547 * C21587 + C959 * C21588 +
            (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C21589) *
               C47716 * C47872 -
           (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C2282 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C2283 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C2284 -
           ((C113 * C7296 + C7305 + C7305 + C47988 * C7300) * C21589 +
            C7309 * C21588 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C21587) *
               C47716 * C48071) *
              C47767 * C48009 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C2283 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C2282 -
           (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 * C2284 +
           (C2300 * C21587 + C7165 * C21588 +
            (C113 * C7297 + C7306 + C7306 + C47988 * C7301) * C21589) *
               C47716 * C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C48094 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C48082 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48055) *
              C286 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C48082 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C48094 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48055) *
              C287 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C48094 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C48082 +
           (C357 * C21587 + C1433 * C21588 +
            (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C47785 * C47767 * C108 -
          (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
              C47767 * C109 +
          (C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
              C47767 * C110 -
          (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C47785 *
              C47767 * C111 +
          (C167 * C21587 + C667 * C21588 +
           (C113 * C298 + C341 + C341 + C47988 * C318) * C21589) *
              C47716 * C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C1072 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C1073 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48055) *
              C48091 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C1073 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C1072 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48055) *
              C48078 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C1072 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C1073 +
           (C357 * C21587 + C1433 * C21588 +
            (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C47785 * C1140 -
          (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 * C47785 *
              C1141 +
          (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C47785 *
              C1142 -
          (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
              C47785 * C1143 +
          (C5801 * C21587 + C22334 * C21588 +
           (C113 * C22325 + C22331 + C22331 + C47988 * C22327) * C21589) *
              C47716 * C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C1818 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C47767 * C48091 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C1819 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C1818 -
           (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
               C48058) *
              C47767 * C48078 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C1818 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C1819 +
           (C546 * C21587 + C2181 * C21588 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C21589) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C1818 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C1819 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C48094 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 * C1819 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 * C1818 -
           (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
               C48058) *
              C48082 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C1818 -
           (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
               C1819 +
           (C5975 * C21587 + C22453 * C21588 +
            (C113 * C22444 + C22450 + C22450 + C47988 * C22446) * C21589) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C3272 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C48023 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C3272) *
               C47830) *
              C47744 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
               C48023 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C3272 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47830) *
              C47753 +
          (((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C3272 -
            (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 *
                C47872) *
               C48023 +
           ((C958 * C21587 + C1595 * C21588 +
             (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C21589) *
                C47716 * C47872 -
            (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C3272) *
               C47830) *
              C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C47868 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47875 +
            ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
             C5972 * C21588 + C5975 * C21589) *
                C47716 * C3780) *
               C48023 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47875 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C47868 -
            (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
                C3780) *
               C47830) *
              C2618 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47875 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47868 -
            (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
                C3780) *
               C48023 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47868 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47875 +
            (C2182 * C21587 + C5974 * C21588 +
             (C113 * C5948 + C5963 + C5963 + C47988 * C5952) * C21589) *
                C47716 * C3780) *
               C47830) *
              C47750)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C3272 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C48094 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C3272) *
               C48082 +
           ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
                C3272 -
            (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
                C47872) *
               C48055) *
              C2618 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
               C48094 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C3272 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C48082 +
           ((C1596 * C21587 + C6307 * C21588 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C21589) *
                C47716 * C47872 -
            (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C3272 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C47767 * C48100 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
              C47767 * C48093 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C3272 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C47872) *
              C47767 * C48080 +
          ((C547 * C21587 + C959 * C21588 +
            (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C21589) *
               C47716 * C47872 -
           (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48102 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C48099 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48090 -
           (C23441 * C21589 + C7309 * C21588 +
            (C113 * C2000 + C2019 + C2019 + C47988 * C2012) * C21587) *
               C47716 * C48071) *
              C47767 * C2618 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C48099 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48102 -
           (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 * C48090 +
           (C2300 * C21587 + C7165 * C21588 +
            (C113 * C7297 + C7306 + C7306 + C47988 * C7301) * C21589) *
               C47716 * C48071) *
              C47767 * C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47868 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47875 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C3780) *
              C47767 * C47744 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47875 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47868 -
           (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 * C3780) *
              C47767 * C47753 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47868 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C47875 +
           (C546 * C21587 + C2181 * C21588 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C21589) *
               C47716 * C3780) *
              C47767 * C2881)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C3272 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C47767 * C48100 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
              C47767 * C48093 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C3272 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C47872) *
              C47767 * C48080 +
          ((C547 * C21587 + C959 * C21588 +
            (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C21589) *
               C47716 * C47872 -
           (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C3272) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C3272 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C48094 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C3272) *
               C48082 +
           ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
                C3272 -
            (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
                C47872) *
               C48055) *
              C2618 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C3272) *
               C48094 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C3272 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C48082 +
           ((C1596 * C21587 + C6307 * C21588 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C21589) *
                C47716 * C47872 -
            (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                C3272) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
                     C4928 * C21588 + C4929 * C21589) *
                        C47716 * C47785 * C48023 -
                    (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) *
                        C47716 * C47785 * C47830) *
                       C654 +
                   ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 *
                        C47785 * C47830 -
                    (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 *
                        C47785 * C48023) *
                       C655 +
                   ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 *
                        C47785 * C48023 -
                    (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 *
                        C47785 * C47830) *
                       C656 +
                   ((C358 * C21587 + C359 * C21588 +
                     (C113 * C1420 + C1428 + C1428 + C47988 * C1422) * C21589) *
                        C47716 * C47785 * C47830 -
                    (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 *
                        C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
                     C4928 * C21588 + C4929 * C21589) *
                        C47716 * C47785 * C1414 -
                    (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) *
                        C47716 * C47785 * C1415 +
                    (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) *
                        C47716 * C47785 * C1416 -
                    (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) *
                        C47716 * C47785 * C48065) *
                       C48009 +
                   ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 *
                        C47785 * C1415 -
                    (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 *
                        C47785 * C1414 -
                    (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                        C47785 * C1416 +
                    (C1434 * C21587 + C5800 * C21588 +
                     (C113 * C5779 + C5792 + C5792 + C47988 * C5783) * C21589) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C48024 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C48023 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C48024) *
               C47830) *
              C286 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
               C48023 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C48024 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C47830) *
              C287 +
          (((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C48024 -
            (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 *
                C47872) *
               C48023 +
           ((C958 * C21587 + C1595 * C21588 +
             (C113 * C1698 + C1708 + C1708 + C47988 * C1704) * C21589) *
                C47716 * C47872 -
            (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 *
                C48024) *
               C47830) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48024 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C1414 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C47872 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C48024) *
              C1415 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C48024 -
           (C22804 * C21589 + C6451 * C21588 + C5973 * C21587) * C47716 *
               C47872) *
              C1416 +
          ((C6451 * C21587 + C22804 * C21588 +
            (C113 * C22795 + C22801 + C22801 + C47988 * C22797) * C21589) *
               C47716 * C47872 -
           (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
               C48024) *
              C48065) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C48094 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C48082 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48055) *
              C286 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C48082 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C48094 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48055) *
              C287 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C48094 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C48082 +
           (C357 * C21587 + C1433 * C21588 +
            (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C47785 * C47767 * C108 -
          (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
              C47767 * C109 +
          (C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
              C47767 * C110 -
          (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C47785 *
              C47767 * C111 +
          (C167 * C21587 + C667 * C21588 +
           (C113 * C298 + C341 + C341 + C47988 * C318) * C21589) *
              C47716 * C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48095 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C47767 * C286 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C48084 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48095 -
           (C5974 * C21589 + C2182 * C21588 + C545 * C21587) * C47716 *
               C48058) *
              C47767 * C287 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C48095 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C48084 +
           (C546 * C21587 + C2181 * C21588 +
            (C113 * C1288 + C1316 + C1316 + C47988 * C1306) * C21589) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C1072 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C1073 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48055) *
              C48091 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C1073 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C1072 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48055) *
              C48078 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C1072 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C1073 +
           (C357 * C21587 + C1433 * C21588 +
            (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C47785 * C1140 -
          (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 * C47785 *
              C1141 +
          (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C47785 *
              C1142 -
          (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
              C47785 * C1143 +
          (C5801 * C21587 + C22334 * C21588 +
           (C113 * C22325 + C22331 + C22331 + C47988 * C22327) * C21589) *
              C47716 * C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48095 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C48084 +
           ((C113 * C481 + C516 + C516 + C47988 * C501) * C21587 +
            C5972 * C21588 + C5975 * C21589) *
               C47716 * C48058) *
              C1072 +
          ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
               C48084 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C48095 -
           (C22453 * C21589 + C5975 * C21588 + C5972 * C21587) * C47716 *
               C48058) *
              C1073 +
          ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C48095 -
           ((C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C21589 +
            C6451 * C21588 + C5973 * C21587) *
               C47716 * C48084 +
           (C5975 * C21587 + C22453 * C21588 +
            (C113 * C22444 + C22450 + C22450 + C47988 * C22446) * C21589) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C48024 -
           (C5973 * C21589 + C5550 * C21588 +
            (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
               C47716 * C47872) *
              C47767 * C654 +
          ((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
              C47767 * C655 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C48024 -
           (C1595 * C21589 + C958 * C21588 + C543 * C21587) * C47716 * C47872) *
              C47767 * C656 +
          ((C547 * C21587 + C959 * C21588 +
            (C113 * C1582 + C1590 + C1590 + C47988 * C1584) * C21589) *
               C47716 * C47872 -
           (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C48024) *
              C47767 * C48059)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
             C4928 * C21588 + C4929 * C21589) *
                C47716 * C48024 -
            (C5973 * C21589 + C5550 * C21588 +
             (C113 * C480 + C515 + C515 + C47988 * C500) * C21587) *
                C47716 * C47872) *
               C1072 +
           ((C5550 * C21587 + C5973 * C21588 + C6451 * C21589) * C47716 *
                C47872 -
            (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
                C48024) *
               C1073 +
           ((C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
                C48024 -
            ((C113 * C6438 + C6447 + C6447 + C47988 * C6442) * C21589 +
             C6451 * C21588 + C5973 * C21587) *
                C47716 * C47872) *
               C48055) *
              C48009 +
          (((C544 * C21587 + C957 * C21588 + C1596 * C21589) * C47716 * C47872 -
            (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C48024) *
               C1072 +
           ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C48024 -
            (C6307 * C21589 + C1596 * C21588 + C957 * C21587) * C47716 *
                C47872) *
               C1073 +
           ((C1596 * C21587 + C6307 * C21588 +
             (C113 * C6439 + C6448 + C6448 + C47988 * C6443) * C21589) *
                C47716 * C47872 -
            (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 *
                C48024) *
               C48055) *
              C47750)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C47785 * C47767 * C108 -
          (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
              C47767 * C109 +
          (C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
              C47767 * C110 -
          (C359 * C21589 + C358 * C21588 + C166 * C21587) * C47716 * C47785 *
              C47767 * C111 +
          (C167 * C21587 + C667 * C21588 +
           (C113 * C298 + C341 + C341 + C47988 * C318) * C21589) *
              C47716 * C47785 * C47767 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C48094 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C48082 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48055) *
              C286 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C48082 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C48094 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48055) *
              C287 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C48094 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C48082 +
           (C357 * C21587 + C1433 * C21588 +
            (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
            C4928 * C21588 + C4929 * C21589) *
               C47716 * C47785 * C1072 -
           (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 *
               C47785 * C1073 +
           (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 *
               C47785 * C48055) *
              C48091 +
          ((C355 * C21587 + C356 * C21588 + C1434 * C21589) * C47716 * C47785 *
               C1073 -
           (C356 * C21589 + C355 * C21588 + C164 * C21587) * C47716 * C47785 *
               C1072 -
           (C5800 * C21589 + C1434 * C21588 + C356 * C21587) * C47716 * C47785 *
               C48055) *
              C48078 +
          ((C165 * C21587 + C354 * C21588 + C357 * C21589) * C47716 * C47785 *
               C1072 -
           (C1433 * C21589 + C357 * C21588 + C354 * C21587) * C47716 * C47785 *
               C1073 +
           (C357 * C21587 + C1433 * C21588 +
            (C113 * C1151 + C1170 + C1170 + C47988 * C1163) * C21589) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C47988 * C129) * C21587 +
           C4928 * C21588 + C4929 * C21589) *
              C47716 * C47785 * C1140 -
          (C5799 * C21589 + C4929 * C21588 + C4928 * C21587) * C47716 * C47785 *
              C1141 +
          (C4929 * C21587 + C5799 * C21588 + C5801 * C21589) * C47716 * C47785 *
              C1142 -
          (C22334 * C21589 + C5801 * C21588 + C5799 * C21587) * C47716 *
              C47785 * C1143 +
          (C5801 * C21587 + C22334 * C21588 +
           (C113 * C22325 + C22331 + C22331 + C47988 * C22327) * C21589) *
              C47716 * C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[125] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C47826 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C47833 +
                    ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C47785 * C2878) *
                       C47744 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C47833 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C47826 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C2878) *
                       C47753 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C47826 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C47833 +
                    ((C10615 + C10614) * C16115 +
                     (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                      C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C2878) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C48024 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C47826 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C48024) *
                        C47833 +
                    (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                         C47716 * C48024 -
                     ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                         C47716 * C47872) *
                        C2878) *
                       C2618 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C48024) *
                        C47826 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C48024 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47833 +
                    (((C12065 + C12064) * C16115 +
                      (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                       C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                         C47716 * C48024) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[127] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C48101 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C48097 +
                    ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C47785 * C48087 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C47785 * C48065) *
                       C2618 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C48097 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C48101 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48087 +
                    ((C11859 + C11858) * C16115 +
                     (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                      C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C47830) *
                       C48100 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C2510) *
                       C48093 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C47830) *
                       C48080 +
                   (((C10959 + C10958) * C16115 +
                     (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                      C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C48095 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C48084 +
                     ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                       C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                          C16115 +
                      (C26954 + C26955) * C48073) *
                         C47716 * C48058) *
                        C2510 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C48084 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C48095 -
                     ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                         C47716 * C48058) *
                        C47830) *
                       C2618 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C48084 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C48095 -
                     ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                         C47716 * C48058) *
                        C2510 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C48095 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C48084 +
                     ((C12793 + C12792) * C16115 +
                      (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                       C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                          C48073) *
                         C47716 * C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[128] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C48024 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C2510 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C48024) *
                        C47830) *
                       C47744 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C48024) *
                        C2510 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C48024 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47830) *
                       C47753 +
                   ((((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                         C47716 * C48024 -
                     ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                         C47716 * C47872) *
                        C2510 +
                    (((C11323 + C11322) * C16115 +
                      (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                       C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                         C47716 * C48024) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C47830) *
                       C48100 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C2510) *
                       C48093 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C47830) *
                       C48080 +
                   (((C10959 + C10958) * C16115 +
                     (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                      C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C48101 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C48097 +
                    ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C47785 * C48087 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C47785 * C48065) *
                       C2618 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C48097 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C48101 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48087 +
                    ((C11859 + C11858) * C16115 +
                     (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                      C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C3272 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C47826 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C3272) *
                        C47833 +
                    (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                         C47716 * C3272 -
                     ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                         C47716 * C47872) *
                        C2878) *
                       C48009 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C3272) *
                        C47826 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C3272 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47833 +
                    (((C12065 + C12064) * C16115 +
                      (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                       C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                         C47716 * C3272) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47868 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47875 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C3780) *
                       C47826 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C47875 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47868 -
                    ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                        C47716 * C3780) *
                       C47833 +
                   (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C47868 -
                    ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                        C47716 * C47875 +
                    ((C26959 + C26958) * C16115 +
                     (C10357 * C5947 + C26940 + C26940 + C10355 * C5951 +
                      C10359 * C23432 + C26941 + C26941 + C48075 * C23434) *
                         C48073) *
                        C47716 * C3780) *
                       C2878) *
                  C47739) /
                 (p * q * std::sqrt(p + q));
    d2ee[132] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C3272 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C48101 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C47872 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C3272) *
                       C48097 +
                   (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C3272 -
                    ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                        C47716 * C47872) *
                       C48087 +
                   (((C27425 + C27424) * C16115 +
                     (C10357 * C6438 + C27418 + C27418 + C10355 * C6442 +
                      C10359 * C22444 + C27419 + C27419 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C3272 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C2510 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C3272) *
                        C47830) *
                       C48091 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C3272) *
                        C2510 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C3272 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47830) *
                       C48078 +
                   ((((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                         C47716 * C3272 -
                     ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                         C47716 * C47872) *
                        C2510 +
                    (((C11323 + C11322) * C16115 +
                      (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                       C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                         C47716 * C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48102 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C48099 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C48090 -
                    ((C28269 + C28270) * C48073 +
                     (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                      C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                         C16115) *
                        C47716 * C48071) *
                       C2510 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C48099 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C48102 -
                    ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                        C47716 * C48090 +
                    ((C28270 + C28269) * C16115 +
                     (C10357 * C7296 + C28263 + C28263 + C10355 * C7300 +
                      C10359 * C23086 + C28264 + C28264 + C48075 * C23088) *
                         C48073) *
                        C47716 * C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[133] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C47868 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47875 +
                     ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                       C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                          C16115 +
                      (C26954 + C26955) * C48073) *
                         C47716 * C3780) *
                        C2510 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47875 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C47868 -
                     ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                         C47716 * C3780) *
                        C47830) *
                       C48009 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47875 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C47868 -
                     ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                         C47716 * C3780) *
                        C2510 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C47868 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47875 +
                     ((C12793 + C12792) * C16115 +
                      (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                       C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                          C48073) *
                         C47716 * C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[134] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C3272 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C2510 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C3272) *
                        C47830) *
                       C48091 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C3272) *
                        C2510 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C3272 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47830) *
                       C48078 +
                   ((((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                         C47716 * C3272 -
                     ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                         C47716 * C47872) *
                        C2510 +
                    (((C11323 + C11322) * C16115 +
                      (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                       C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                         C47716 * C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C3272 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C48101 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C47872 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C3272) *
                       C48097 +
                   (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C3272 -
                    ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                        C47716 * C47872) *
                       C48087 +
                   (((C27425 + C27424) * C16115 +
                     (C10357 * C6438 + C27418 + C27418 + C10355 * C6442 +
                      C10359 * C22444 + C27419 + C27419 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[135] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C1414 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C1415 +
                    ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C47785 * C1416 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C47785 * C48065) *
                       C48009 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C1415 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C1414 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C1416 +
                    ((C11859 + C11858) * C16115 +
                     (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                      C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C47830) *
                       C654 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C48023) *
                       C655 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C47830) *
                       C656 +
                   (((C10959 + C10958) * C16115 +
                     (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                      C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C1818 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C1819 +
                     ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                       C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                          C16115 +
                      (C26954 + C26955) * C48073) *
                         C47716 * C48058) *
                        C48023 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C1819 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C1818 -
                     ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                         C47716 * C48058) *
                        C47830) *
                       C48009 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C1819 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C1818 -
                     ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                         C47716 * C48058) *
                        C48023 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C1818 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C1819 +
                     ((C12793 + C12792) * C16115 +
                      (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                       C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                          C48073) *
                         C47716 * C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[136] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48024 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C1414 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C47872 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C48024) *
                       C1415 +
                   (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C48024 -
                    ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                        C47716 * C47872) *
                       C1416 +
                   (((C27425 + C27424) * C16115 +
                     (C10357 * C6438 + C27418 + C27418 + C10355 * C6442 +
                      C10359 * C22444 + C27419 + C27419 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C48024 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C48023 +
                    (((C26531 + C26530) * C16115 +
                      (C10357 * C1285 + C11713 + C11713 + C10355 * C1303 +
                       C10359 * C1286 + C11712 + C11712 + C48075 * C1304) *
                          C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C48024) *
                        C47830) *
                       C286 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C48024) *
                        C48023 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C48024 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47830) *
                       C287 +
                   ((((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                         C47716 * C48024 -
                     ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                         C47716 * C47872) *
                        C48023 +
                    (((C11323 + C11322) * C16115 +
                      (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                       C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                         C47716 * C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C2282 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C2283 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C2284 -
                    ((C28269 + C28270) * C48073 +
                     (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                      C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                         C16115) *
                        C47716 * C48071) *
                       C48023 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C2283 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C2282 -
                    ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                        C47716 * C2284 +
                    ((C28270 + C28269) * C16115 +
                     (C10357 * C7296 + C28263 + C28263 + C10355 * C7300 +
                      C10359 * C23086 + C28264 + C28264 + C48075 * C23088) *
                         C48073) *
                        C47716 * C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                   C16115 +
               (C10357 * C291 + C10567 + C10567 + C10355 * C311 +
                C10359 * C924 + C10566 + C10566 + C48075 * C934) *
                   C48073) *
                  C47716 * C47785 * C47767 * C108 -
              ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                  C47716 * C47785 * C47767 * C109 +
              ((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                  C47716 * C47785 * C47767 * C110 -
              ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                  C47716 * C47785 * C47767 * C111 +
              ((C10413 + C10412) * C16115 +
               (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                   C48073) *
                  C47716 * C47785 * C47767 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                 C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                    C16115 +
                (C25918 + C25919) * C48073) *
                   C47716 * C47785 * C48094 -
               ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                   C47716 * C47785 * C48082 +
               ((C25921 + C25920) * C16115 +
                (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
                 C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                    C48073) *
                   C47716 * C47785 * C48055) *
                  C286 +
              (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                   C47716 * C47785 * C48082 -
               ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                   C47716 * C47785 * C48094 -
               ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                   C47716 * C47785 * C48055) *
                  C287 +
              (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                   C47716 * C47785 * C48094 -
               ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                   C47716 * C47785 * C48082 +
               ((C10615 + C10614) * C16115 +
                (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                 C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                    C48073) *
                   C47716 * C47785 * C48055) *
                  C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 + C10359 * C480 +
             C10363 + C10363 + C48075 * C500) *
                C16115 +
            (C25918 + C25919) * C48073) *
               C47716 * C48095 -
           ((C10359 * C1282 + C11297 + C11297 + C48075 * C1300 + C10357 * C924 +
             C11296 + C11296 + C10355 * C934) *
                C48073 +
            (C10359 * C481 + C10768 + C10768 + C48075 * C501 + C10357 * C480 +
             C10769 + C10769 + C10355 * C500) *
                C16115) *
               C47716 * C48084 +
           ((C10357 * C481 + C10770 + C10770 + C10355 * C501 + C10359 * C2000 +
             C10771 + C10771 + C48075 * C2012) *
                C16115 +
            (C10357 * C1282 + C11709 + C11709 + C10355 * C1300 +
             C10359 * C2400 + C11708 + C11708 + C48075 * C2406) *
                C48073) *
               C47716 * C48058) *
              C47767 * C286 +
          (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) * C47716 *
               C48084 -
           ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) * C47716 *
               C48095 -
           ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) * C47716 *
               C48058) *
              C47767 * C287 +
          (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) * C47716 *
               C48095 -
           ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) * C47716 *
               C48084 +
           ((C10817 + C10816) * C16115 +
            (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
             C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                C48073) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 + C10359 * C480 +
             C10363 + C10363 + C48075 * C500) *
                C16115 +
            (C25918 + C25919) * C48073) *
               C47716 * C47785 * C1072 -
           ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) * C47716 *
               C47785 * C1073 +
           ((C25921 + C25920) * C16115 +
            (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
             C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                C48073) *
               C47716 * C47785 * C48055) *
              C48091 +
          (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) * C47716 *
               C47785 * C1073 -
           ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) * C47716 *
               C47785 * C1072 -
           ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) * C47716 *
               C47785 * C48055) *
              C48078 +
          (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) * C47716 *
               C47785 * C1072 -
           ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) * C47716 *
               C47785 * C1073 +
           ((C10615 + C10614) * C16115 +
            (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
             C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                C48073) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10357 * C115 + C10362 + C10362 + C10355 * C129 + C10359 * C480 +
            C10363 + C10363 + C48075 * C500) *
               C16115 +
           (C25918 + C25919) * C48073) *
              C47716 * C47785 * C1140 -
          ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) * C47716 *
              C47785 * C1141 +
          ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) * C47716 *
              C47785 * C1142 -
          ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) * C47716 *
              C47785 * C1143 +
          ((C26781 + C26780) * C16115 +
           (C10357 * C5778 + C26768 + C26768 + C10355 * C5782 +
            C10359 * C22795 + C26769 + C26769 + C48075 * C22797) *
               C48073) *
              C47716 * C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 + C10359 * C480 +
             C10363 + C10363 + C48075 * C500) *
                C16115 +
            (C25918 + C25919) * C48073) *
               C47716 * C48095 -
           ((C26530 + C26531) * C48073 +
            (C10359 * C481 + C10768 + C10768 + C48075 * C501 + C10357 * C480 +
             C10769 + C10769 + C10355 * C500) *
                C16115) *
               C47716 * C48084 +
           ((C10357 * C481 + C10770 + C10770 + C10355 * C501 + C10359 * C2000 +
             C10771 + C10771 + C48075 * C2012) *
                C16115 +
            (C26954 + C26955) * C48073) *
               C47716 * C48058) *
              C1072 +
          (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) * C47716 *
               C48084 -
           ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) * C47716 *
               C48095 -
           ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) * C47716 *
               C48058) *
              C1073 +
          (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) * C47716 *
               C48095 -
           ((C10359 * C5947 + C12197 + C12197 + C48075 * C5951 +
             C10357 * C1696 + C12196 + C12196 + C10355 * C1702) *
                C48073 +
            (C26957 + C26956) * C16115) *
               C47716 * C48084 +
           ((C26959 + C26958) * C16115 +
            (C10357 * C5947 + C26940 + C26940 + C10355 * C5951 +
             C10359 * C23432 + C26941 + C26941 + C48075 * C23434) *
                C48073) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 + C10359 * C480 +
             C10363 + C10363 + C48075 * C500) *
                C16115 +
            (C25918 + C25919) * C48073) *
               C47716 * C1818 -
           ((C26530 + C26531) * C48073 +
            (C10359 * C481 + C10768 + C10768 + C48075 * C501 + C10357 * C480 +
             C10769 + C10769 + C10355 * C500) *
                C16115) *
               C47716 * C1819 +
           ((C10357 * C481 + C10770 + C10770 + C10355 * C501 + C10359 * C2000 +
             C10771 + C10771 + C48075 * C2012) *
                C16115 +
            (C26954 + C26955) * C48073) *
               C47716 * C48058) *
              C47767 * C48091 +
          (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) * C47716 *
               C1819 -
           ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) * C47716 *
               C1818 -
           ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) * C47716 *
               C48058) *
              C47767 * C48078 +
          (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) * C47716 *
               C1818 -
           ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) * C47716 *
               C1819 +
           ((C10817 + C10816) * C16115 +
            (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
             C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                C48073) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 + C10359 * C480 +
             C10363 + C10363 + C48075 * C500) *
                C16115 +
            (C25918 + C25919) * C48073) *
               C47716 * C1818 -
           ((C26530 + C26531) * C48073 +
            (C10359 * C481 + C10768 + C10768 + C48075 * C501 + C10357 * C480 +
             C10769 + C10769 + C10355 * C500) *
                C16115) *
               C47716 * C1819 +
           ((C10357 * C481 + C10770 + C10770 + C10355 * C501 + C10359 * C2000 +
             C10771 + C10771 + C48075 * C2012) *
                C16115 +
            (C26954 + C26955) * C48073) *
               C47716 * C48058) *
              C48094 +
          (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) * C47716 *
               C1819 -
           ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) * C47716 *
               C1818 -
           ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) * C47716 *
               C48058) *
              C48082 +
          (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) * C47716 *
               C1818 -
           ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) * C47716 *
               C1819 +
           ((C26959 + C26958) * C16115 +
            (C10357 * C5947 + C26940 + C26940 + C10355 * C5951 +
             C10359 * C23432 + C26941 + C26941 + C48075 * C23434) *
                C48073) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10357 * C115 + C10362 + C10362 + C10355 * C129 + C10359 * C480 +
            C10363 + C10363 + C48075 * C500) *
               C16115 +
           (C25918 + C25919) * C48073) *
              C47716 * C1993 -
          ((C26530 + C26531) * C48073 +
           (C10359 * C481 + C10768 + C10768 + C48075 * C501 + C10357 * C480 +
            C10769 + C10769 + C10355 * C500) *
               C16115) *
              C47716 * C1994 +
          ((C10357 * C481 + C10770 + C10770 + C10355 * C501 + C10359 * C2000 +
            C10771 + C10771 + C48075 * C2012) *
               C16115 +
           (C26954 + C26955) * C48073) *
              C47716 * C1995 -
          ((C10359 * C6825 + C13067 + C13067 + C48075 * C6829 + C10357 * C2400 +
            C13066 + C13066 + C10355 * C2406) *
               C48073 +
           (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 + C10357 * C2000 +
            C12583 + C12583 + C10355 * C2012) *
               C16115) *
              C47716 * C1996 +
          ((C10357 * C2001 + C12584 + C12584 + C10355 * C2013 +
            C10359 * C12573 + C12585 + C12585 + C48075 * C12577) *
               C16115 +
           (C10357 * C6825 + C27803 + C27803 + C10355 * C6829 +
            C10359 * C27799 + C27804 + C27804 + C48075 * C27801) *
               C48073) *
              C47716 * C1997) *
         C47767 * C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[138] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C48024 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C1072 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C48024) *
                        C1073 +
                    (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                         C47716 * C48024 -
                     ((C10359 * C5947 + C12197 + C12197 + C48075 * C5951 +
                       C10357 * C1696 + C12196 + C12196 + C10355 * C1702) *
                          C48073 +
                      (C26957 + C26956) * C16115) *
                         C47716 * C47872) *
                        C48055) *
                       C48009 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C48024) *
                        C1072 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C48024 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C1073 +
                    (((C12065 + C12064) * C16115 +
                      (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                       C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                         C47716 * C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48024 -
                    ((C10359 * C1282 + C11297 + C11297 + C48075 * C1300 +
                      C10357 * C924 + C11296 + C11296 + C10355 * C934) *
                         C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C47767 * C654 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C47872 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C48024) *
                       C47767 * C655 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C48024 -
                    ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                        C47716 * C47872) *
                       C47767 * C656 +
                   (((C11101 + C11100) * C16115 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C2282 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C2283 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C2284 -
                    ((C10359 * C6825 + C13067 + C13067 + C48075 * C6829 +
                      C10357 * C2400 + C13066 + C13066 + C10355 * C2406) *
                         C48073 +
                     (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                      C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                         C16115) *
                        C47716 * C48071) *
                       C47767 * C48009 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C2283 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C2282 -
                    ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                        C47716 * C2284 +
                    ((C12935 + C12934) * C16115 +
                     (C10357 * C2401 + C13068 + C13068 + C10355 * C2407 +
                      C10359 * C6826 + C13069 + C13069 + C48075 * C6830) *
                         C48073) *
                        C47716 * C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C48082 +
                    ((C25921 + C25920) * C16115 +
                     (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
                      C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C286 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C48082 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C48094 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48055) *
                       C287 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C48082 +
                    ((C10615 + C10614) * C16115 +
                     (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                      C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C16115 +
                    (C10357 * C291 + C10567 + C10567 + C10355 * C311 +
                     C10359 * C924 + C10566 + C10566 + C48075 * C934) *
                        C48073) *
                       C47716 * C47785 * C47767 * C108 -
                   ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                       C47716 * C47785 * C47767 * C109 +
                   ((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                       C47716 * C47785 * C47767 * C110 -
                   ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                       C47716 * C47785 * C47767 * C111 +
                   ((C10413 + C10412) * C16115 +
                    (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                     C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                        C48073) *
                       C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C1073 +
                    ((C25921 + C25920) * C16115 +
                     (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
                      C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48091 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C1073 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C1072 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48055) *
                       C48078 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C1073 +
                    ((C10615 + C10614) * C16115 +
                     (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                      C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C16115 +
                    (C25918 + C25919) * C48073) *
                       C47716 * C47785 * C1140 -
                   ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                       C47716 * C47785 * C1141 +
                   ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                       C47716 * C47785 * C1142 -
                   ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                       C47716 * C47785 * C1143 +
                   ((C26781 + C26780) * C16115 +
                    (C10357 * C5778 + C26768 + C26768 + C10355 * C5782 +
                     C10359 * C22795 + C26769 + C26769 + C48075 * C22797) *
                        C48073) *
                       C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C1818 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C1819 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C48058) *
                       C47767 * C48091 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C1819 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C1818 -
                    ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                        C47716 * C48058) *
                       C47767 * C48078 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C1818 -
                    ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                        C47716 * C1819 +
                    ((C10817 + C10816) * C16115 +
                     (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
                      C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                         C48073) *
                        C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C1818 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C1819 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C48058) *
                       C48094 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C1819 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C1818 -
                    ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                        C47716 * C48058) *
                       C48082 +
                   (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C1818 -
                    ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                        C47716 * C1819 +
                    ((C26959 + C26958) * C16115 +
                     (C10357 * C5947 + C26940 + C26940 + C10355 * C5951 +
                      C10359 * C23432 + C26941 + C26941 + C48075 * C23434) *
                         C48073) *
                        C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C3272 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C48023 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C3272) *
                        C47830) *
                       C47744 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C3272) *
                        C48023 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C3272 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47830) *
                       C47753 +
                   ((((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                         C47716 * C3272 -
                     ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                         C47716 * C47872) *
                        C48023 +
                    (((C11323 + C11322) * C16115 +
                      (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                       C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                         C47716 * C3272) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C47868 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47875 +
                     ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                       C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                          C16115 +
                      (C26954 + C26955) * C48073) *
                         C47716 * C3780) *
                        C48023 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47875 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C47868 -
                     ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                         C47716 * C3780) *
                        C47830) *
                       C2618 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47875 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C47868 -
                     ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                         C47716 * C3780) *
                        C48023 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C47868 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47875 +
                     ((C12793 + C12792) * C16115 +
                      (C10357 * C1287 + C11716 + C11716 + C10355 * C1305 +
                       C10359 * C7297 + C11717 + C11717 + C48075 * C7301) *
                          C48073) *
                         C47716 * C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[142] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C3272 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C48094 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C3272) *
                        C48082 +
                    (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                         C47716 * C3272 -
                     ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                         C47716 * C47872) *
                        C48055) *
                       C2618 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C3272) *
                        C48094 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C3272 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C48082 +
                    (((C12065 + C12064) * C16115 +
                      (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                       C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                         C47716 * C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C3272 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C47767 * C48100 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C47872 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C3272) *
                       C47767 * C48093 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C3272 -
                    ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                        C47716 * C47872) *
                       C47767 * C48080 +
                   (((C11101 + C11100) * C16115 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48102 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C48099 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C48090 -
                    ((C28269 + C28270) * C48073 +
                     (C10359 * C2001 + C12582 + C12582 + C48075 * C2013 +
                      C10357 * C2000 + C12583 + C12583 + C10355 * C2012) *
                         C16115) *
                        C47716 * C48071) *
                       C47767 * C2618 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C48099 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C48102 -
                    ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                        C47716 * C48090 +
                    ((C12935 + C12934) * C16115 +
                     (C10357 * C2401 + C13068 + C13068 + C10355 * C2407 +
                      C10359 * C6826 + C13069 + C13069 + C48075 * C6830) *
                         C48073) *
                        C47716 * C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47868 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47875 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C3780) *
                       C47767 * C47744 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C47875 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47868 -
                    ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                        C47716 * C3780) *
                       C47767 * C47753 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47868 -
                    ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                        C47716 * C47875 +
                    ((C10817 + C10816) * C16115 +
                     (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
                      C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                         C48073) *
                        C47716 * C3780) *
                       C47767 * C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C3272 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C47767 * C48100 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C47872 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C3272) *
                       C47767 * C48093 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C3272 -
                    ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                        C47716 * C47872) *
                       C47767 * C48080 +
                   (((C11101 + C11100) * C16115 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C3272 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C48094 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C3272) *
                        C48082 +
                    (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                         C47716 * C3272 -
                     ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                         C47716 * C47872) *
                        C48055) *
                       C2618 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C3272) *
                        C48094 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C3272 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C48082 +
                    (((C12065 + C12064) * C16115 +
                      (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                       C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                         C47716 * C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C47830) *
                       C654 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C48023) *
                       C655 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C47830) *
                       C656 +
                   (((C10959 + C10958) * C16115 +
                     (C10357 * C296 + C10590 + C10590 + C10355 * C316 +
                      C10359 * C1582 + C10591 + C10591 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C1414 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C1415 +
                    ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C47785 * C1416 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C47785 * C48065) *
                       C48009 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C1415 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C1414 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C1416 +
                    ((C11859 + C11858) * C16115 +
                     (C10357 * C1150 + C11558 + C11558 + C10355 * C1162 +
                      C10359 * C6439 + C11559 + C11559 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C48024 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C48023 +
                    (((C26531 + C26530) * C16115 +
                      (C10357 * C1285 + C11713 + C11713 + C10355 * C1303 +
                       C10359 * C1286 + C11712 + C11712 + C48075 * C1304) *
                          C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C48024) *
                        C47830) *
                       C286 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C48024) *
                        C48023 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C48024 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C47830) *
                       C287 +
                   ((((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                         C47716 * C48024 -
                     ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                         C47716 * C47872) *
                        C48023 +
                    (((C11323 + C11322) * C16115 +
                      (C10357 * C1283 + C12058 + C12058 + C10355 * C1301 +
                       C10359 * C1288 + C12059 + C12059 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                         C47716 * C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48024 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C1414 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C47872 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C48024) *
                       C1415 +
                   (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C48024 -
                    ((C27424 + C27425) * C48073 + (C26957 + C26956) * C16115) *
                        C47716 * C47872) *
                       C1416 +
                   (((C27425 + C27424) * C16115 +
                     (C10357 * C6438 + C27418 + C27418 + C10355 * C6442 +
                      C10359 * C22444 + C27419 + C27419 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                        C47716 * C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[147] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C48082 +
                    ((C25921 + C25920) * C16115 +
                     (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
                      C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C286 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C48082 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C48094 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48055) *
                       C287 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C48082 +
                    ((C10615 + C10614) * C16115 +
                     (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                      C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C16115 +
                    (C10357 * C291 + C10567 + C10567 + C10355 * C311 +
                     C10359 * C924 + C10566 + C10566 + C48075 * C934) *
                        C48073) *
                       C47716 * C47785 * C47767 * C108 -
                   ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                       C47716 * C47785 * C47767 * C109 +
                   ((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                       C47716 * C47785 * C47767 * C110 -
                   ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                       C47716 * C47785 * C47767 * C111 +
                   ((C10413 + C10412) * C16115 +
                    (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                     C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                        C48073) *
                       C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48095 -
                    ((C10359 * C1282 + C11297 + C11297 + C48075 * C1300 +
                      C10357 * C924 + C11296 + C11296 + C10355 * C934) *
                         C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C48084 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C10357 * C1282 + C11709 + C11709 + C10355 * C1300 +
                      C10359 * C2400 + C11708 + C11708 + C48075 * C2406) *
                         C48073) *
                        C47716 * C48058) *
                       C47767 * C286 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C48084 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C48095 -
                    ((C12792 + C12793) * C48073 + (C10813 + C10812) * C16115) *
                        C47716 * C48058) *
                       C47767 * C287 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C48095 -
                    ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                        C47716 * C48084 +
                    ((C10817 + C10816) * C16115 +
                     (C10357 * C1280 + C12786 + C12786 + C10355 * C1298 +
                      C10359 * C2402 + C12787 + C12787 + C48075 * C2408) *
                         C48073) *
                        C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C1073 +
                    ((C25921 + C25920) * C16115 +
                     (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
                      C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48091 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C1073 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C1072 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48055) *
                       C48078 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C1073 +
                    ((C10615 + C10614) * C16115 +
                     (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                      C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C16115 +
                    (C25918 + C25919) * C48073) *
                       C47716 * C47785 * C1140 -
                   ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                       C47716 * C47785 * C1141 +
                   ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                       C47716 * C47785 * C1142 -
                   ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                       C47716 * C47785 * C1143 +
                   ((C26781 + C26780) * C16115 +
                    (C10357 * C5778 + C26768 + C26768 + C10355 * C5782 +
                     C10359 * C22795 + C26769 + C26769 + C48075 * C22797) *
                        C48073) *
                       C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48095 -
                    ((C26530 + C26531) * C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C48084 +
                    ((C10357 * C481 + C10770 + C10770 + C10355 * C501 +
                      C10359 * C2000 + C10771 + C10771 + C48075 * C2012) *
                         C16115 +
                     (C26954 + C26955) * C48073) *
                        C47716 * C48058) *
                       C1072 +
                   (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                        C47716 * C48084 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C48095 -
                    ((C26958 + C26959) * C48073 + (C26955 + C26954) * C16115) *
                        C47716 * C48058) *
                       C1073 +
                   (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                        C47716 * C48095 -
                    ((C10359 * C5947 + C12197 + C12197 + C48075 * C5951 +
                      C10357 * C1696 + C12196 + C12196 + C10355 * C1702) *
                         C48073 +
                     (C26957 + C26956) * C16115) *
                        C47716 * C48084 +
                    ((C26959 + C26958) * C16115 +
                     (C10357 * C5947 + C26940 + C26940 + C10355 * C5951 +
                      C10359 * C23432 + C26941 + C26941 + C48075 * C23434) *
                         C48073) *
                        C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C48024 -
                    ((C10359 * C1282 + C11297 + C11297 + C48075 * C1300 +
                      C10357 * C924 + C11296 + C11296 + C10355 * C934) *
                         C48073 +
                     (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                      C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                         C16115) *
                        C47716 * C47872) *
                       C47767 * C654 +
                   (((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                        C47716 * C47872 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C48024) *
                       C47767 * C655 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C48024 -
                    ((C11322 + C11323) * C48073 + (C10815 + C10814) * C16115) *
                        C47716 * C47872) *
                       C47767 * C656 +
                   (((C11101 + C11100) * C16115 +
                     (C10357 * C927 + C11310 + C11310 + C10355 * C937 +
                      C10359 * C2168 + C11311 + C11311 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                        C47716 * C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                       C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                          C16115 +
                      (C25918 + C25919) * C48073) *
                         C47716 * C48024 -
                     ((C26530 + C26531) * C48073 +
                      (C10359 * C481 + C10768 + C10768 + C48075 * C501 +
                       C10357 * C480 + C10769 + C10769 + C10355 * C500) *
                          C16115) *
                         C47716 * C47872) *
                        C1072 +
                    (((C26531 + C26530) * C16115 + (C26956 + C26957) * C48073) *
                         C47716 * C47872 -
                     ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                         C47716 * C48024) *
                        C1073 +
                    (((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                         C47716 * C48024 -
                     ((C10359 * C5947 + C12197 + C12197 + C48075 * C5951 +
                       C10357 * C1696 + C12196 + C12196 + C10355 * C1702) *
                          C48073 +
                      (C26957 + C26956) * C16115) *
                         C47716 * C47872) *
                        C48055) *
                       C48009 +
                   ((((C10811 + C10810) * C16115 + (C11320 + C11321) * C48073) *
                         C47716 * C47872 -
                     ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                         C47716 * C48024) *
                        C1072 +
                    (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                         C47716 * C48024 -
                     ((C12064 + C12065) * C48073 + (C11321 + C11320) * C16115) *
                         C47716 * C47872) *
                        C1073 +
                    (((C12065 + C12064) * C16115 +
                      (C10357 * C1697 + C12198 + C12198 + C10355 * C1703 +
                       C10359 * C5948 + C12199 + C12199 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                         C47716 * C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C16115 +
                    (C10357 * C291 + C10567 + C10567 + C10355 * C311 +
                     C10359 * C924 + C10566 + C10566 + C48075 * C934) *
                        C48073) *
                       C47716 * C47785 * C47767 * C108 -
                   ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                       C47716 * C47785 * C47767 * C109 +
                   ((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                       C47716 * C47785 * C47767 * C110 -
                   ((C10958 + C10959) * C48073 + (C10411 + C10410) * C16115) *
                       C47716 * C47785 * C47767 * C111 +
                   ((C10413 + C10412) * C16115 +
                    (C10357 * C297 + C10952 + C10952 + C10355 * C317 +
                     C10359 * C928 + C10953 + C10953 + C48075 * C938) *
                        C48073) *
                       C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C48082 +
                    ((C25921 + C25920) * C16115 +
                     (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
                      C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C286 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C48082 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C48094 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48055) *
                       C287 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C48082 +
                    ((C10615 + C10614) * C16115 +
                     (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                      C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                      C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                         C16115 +
                     (C25918 + C25919) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                        C47716 * C47785 * C1073 +
                    ((C25921 + C25920) * C16115 +
                     (C10357 * C1148 + C11555 + C11555 + C10355 * C1160 +
                      C10359 * C1696 + C11554 + C11554 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48091 +
                   (((C10609 + C10608) * C16115 + (C10610 + C10611) * C48073) *
                        C47716 * C47785 * C1073 -
                    ((C10608 + C10609) * C48073 + (C10407 + C10406) * C16115) *
                        C47716 * C47785 * C1072 -
                    ((C11858 + C11859) * C48073 + (C10611 + C10610) * C16115) *
                        C47716 * C47785 * C48055) *
                       C48078 +
                   (((C10409 + C10408) * C16115 + (C10612 + C10613) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C10614 + C10615) * C48073 + (C10613 + C10612) * C16115) *
                        C47716 * C47785 * C1073 +
                    ((C10615 + C10614) * C16115 +
                     (C10357 * C1146 + C11852 + C11852 + C10355 * C1158 +
                      C10359 * C1698 + C11853 + C11853 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C10357 * C115 + C10362 + C10362 + C10355 * C129 +
                     C10359 * C480 + C10363 + C10363 + C48075 * C500) *
                        C16115 +
                    (C25918 + C25919) * C48073) *
                       C47716 * C47785 * C1140 -
                   ((C25920 + C25921) * C48073 + (C25919 + C25918) * C16115) *
                       C47716 * C47785 * C1141 +
                   ((C25921 + C25920) * C16115 + (C26778 + C26779) * C48073) *
                       C47716 * C47785 * C1142 -
                   ((C26780 + C26781) * C48073 + (C26779 + C26778) * C16115) *
                       C47716 * C47785 * C1143 +
                   ((C26781 + C26780) * C16115 +
                    (C10357 * C5778 + C26768 + C26768 + C10355 * C5782 +
                     C10359 * C22795 + C26769 + C26769 + C48075 * C22797) *
                        C48073) *
                       C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C47826 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C47833 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C2878) *
                       C47744 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C47833 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C47826 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C2878) *
                       C47753 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C47826 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C47833 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C2878) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[151] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C48024 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C47826 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C48024) *
                        C47833 +
                    (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                       C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                          C47971 * C16117 +
                      (C31571 + C31572) * C47971 * C48042) *
                         C48024 -
                     ((C33025 + C33026) * C47971 * C48042 +
                      (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                       C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                          C47971 * C16117) *
                         C47872) *
                        C2878) *
                       C2618 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C48024) *
                        C47826 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C48024 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47833 +
                    (((C33026 + C33025) * C47971 * C16117 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31575 + C31576) * C47971 * C48042 +
                      (C31572 + C31571) * C47971 * C16117) *
                         C48024) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[152] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C48101 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C48097 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48087 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C47785 * C48065) *
                       C2618 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C48097 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C48101 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48087 +
                    ((C32820 + C32819) * C47971 * C16117 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C47971 * C48042) *
                        C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C2510 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C47830) *
                       C48100 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C2510) *
                       C48093 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C2510 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C47830) *
                       C48080 +
                   (((C31920 + C31919) * C47971 * C16117 +
                     (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                      C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                         C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C48095 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C48084 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C47971 * C16117 +
                      (C31773 + C31774) * C47971 * C48042) *
                         C48058) *
                        C2510 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C48084 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C48095 -
                     ((C33747 + C33748) * C47971 * C48042 +
                      (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                       C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                          C47971 * C16117) *
                         C48058) *
                        C47830) *
                       C2618 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C48084 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C48095 -
                     ((C31777 + C31778) * C47971 * C48042 +
                      (C31774 + C31773) * C47971 * C16117) *
                         C48058) *
                        C2510 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C48095 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C48084 +
                     ((C33748 + C33747) * C47971 * C16117 +
                      (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
                       C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                          C47971 * C48042) *
                         C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[153] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C48024 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C2510 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C48024) *
                        C47830) *
                       C47744 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C48024) *
                        C2510 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C48024 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47830) *
                       C47753 +
                   ((((C31370 + C31369) * C47971 * C16117 +
                      (C31371 + C31372) * C47971 * C48042) *
                         C48024 -
                     ((C32061 + C32062) * C47971 * C48042 +
                      (C31776 + C31775) * C47971 * C16117) *
                         C47872) *
                        C2510 +
                    (((C32284 + C32283) * C47971 * C16117 +
                      (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                       C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31919 + C31920) * C47971 * C48042 +
                      (C31574 + C31573) * C47971 * C16117) *
                         C48024) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[154] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C2510 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C47830) *
                       C48100 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C2510) *
                       C48093 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C2510 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C47830) *
                       C48080 +
                   (((C31920 + C31919) * C47971 * C16117 +
                     (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                      C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                         C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C48101 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C48097 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48087 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C47785 * C48065) *
                       C2618 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C48097 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C48101 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48087 +
                    ((C32820 + C32819) * C47971 * C16117 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C47971 * C48042) *
                        C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[155] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C3272 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C47826 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C3272) *
                        C47833 +
                    (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                       C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                          C47971 * C16117 +
                      (C31571 + C31572) * C47971 * C48042) *
                         C3272 -
                     ((C33025 + C33026) * C47971 * C48042 +
                      (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                       C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                          C47971 * C16117) *
                         C47872) *
                        C2878) *
                       C48009 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C3272) *
                        C47826 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C3272 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47833 +
                    (((C33026 + C33025) * C47971 * C16117 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31575 + C31576) * C47971 * C48042 +
                      (C31572 + C31571) * C47971 * C16117) *
                         C3272) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[156] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47868 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47875 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C3780) *
                       C47826 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C47875 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47868 -
                    ((C33747 + C33748) * C47971 * C48042 +
                     (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                      C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                         C47971 * C16117) *
                        C3780) *
                       C47833 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47868 -
                    ((C33025 + C33026) * C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C47875 +
                    ((C31318 * C1286 + C32675 + C32675 + C31316 * C1304 +
                      C31320 * C7296 + C32676 + C32676 + C48075 * C7300) *
                         C47971 * C16117 +
                     (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                      C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                         C47971 * C48042) *
                        C3780) *
                       C2878) *
                  C47739) /
                 (p * q * std::sqrt(p + q));
    d2ee[157] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C3272 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C48101 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C47872 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C3272) *
                       C48097 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C3272 -
                    ((C33025 + C33026) * C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C47872) *
                       C48087 +
                   (((C31318 * C1696 + C33157 + C33157 + C31316 * C1702 +
                      C31320 * C5947 + C33158 + C33158 + C48075 * C5951) *
                         C47971 * C16117 +
                     (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                      C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                         C47971 * C48042) *
                        C47872 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C3272 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C2510 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C3272) *
                        C47830) *
                       C48091 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C3272) *
                        C2510 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C3272 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47830) *
                       C48078 +
                   ((((C31370 + C31369) * C47971 * C16117 +
                      (C31371 + C31372) * C47971 * C48042) *
                         C3272 -
                     ((C32061 + C32062) * C47971 * C48042 +
                      (C31776 + C31775) * C47971 * C16117) *
                         C47872) *
                        C2510 +
                    (((C32284 + C32283) * C47971 * C16117 +
                      (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                       C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31919 + C31920) * C47971 * C48042 +
                      (C31574 + C31573) * C47971 * C16117) *
                         C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48102 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C48099 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48090 -
                    ((C33889 + C33890) * C47971 * C48042 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C47971 * C16117) *
                        C48071) *
                       C2510 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C48099 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C48102 -
                    ((C33747 + C33748) * C47971 * C48042 +
                     (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                      C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                         C47971 * C16117) *
                        C48090 +
                    ((C31318 * C2400 + C34021 + C34021 + C31316 * C2406 +
                      C31320 * C6825 + C34022 + C34022 + C48075 * C6829) *
                         C47971 * C16117 +
                     (C31318 * C2401 + C34023 + C34023 + C31316 * C2407 +
                      C31320 * C6826 + C34024 + C34024 + C48075 * C6830) *
                         C47971 * C48042) *
                        C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[158] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C47868 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47875 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C47971 * C16117 +
                      (C31773 + C31774) * C47971 * C48042) *
                         C3780) *
                        C2510 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47875 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C47868 -
                     ((C33747 + C33748) * C47971 * C48042 +
                      (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                       C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                          C47971 * C16117) *
                         C3780) *
                        C47830) *
                       C48009 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47875 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C47868 -
                     ((C31777 + C31778) * C47971 * C48042 +
                      (C31774 + C31773) * C47971 * C16117) *
                         C3780) *
                        C2510 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C47868 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47875 +
                     ((C33748 + C33747) * C47971 * C16117 +
                      (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
                       C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                          C47971 * C48042) *
                         C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[159] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C3272 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C2510 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C3272) *
                        C47830) *
                       C48091 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C3272) *
                        C2510 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C3272 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47830) *
                       C48078 +
                   ((((C31370 + C31369) * C47971 * C16117 +
                      (C31371 + C31372) * C47971 * C48042) *
                         C3272 -
                     ((C32061 + C32062) * C47971 * C48042 +
                      (C31776 + C31775) * C47971 * C16117) *
                         C47872) *
                        C2510 +
                    (((C32284 + C32283) * C47971 * C16117 +
                      (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                       C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31919 + C31920) * C47971 * C48042 +
                      (C31574 + C31573) * C47971 * C16117) *
                         C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C3272 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C48101 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C47872 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C3272) *
                       C48097 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C3272 -
                    ((C33025 + C33026) * C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C47872) *
                       C48087 +
                   (((C31318 * C1696 + C33157 + C33157 + C31316 * C1702 +
                      C31320 * C5947 + C33158 + C33158 + C48075 * C5951) *
                         C47971 * C16117 +
                     (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                      C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                         C47971 * C48042) *
                        C47872 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[160] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C1414 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C1415 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C1416 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C47785 * C48065) *
                       C48009 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C1415 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C1414 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C1416 +
                    ((C32820 + C32819) * C47971 * C16117 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C47971 * C48042) *
                        C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C48023 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C47830) *
                       C654 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C48023) *
                       C655 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C48023 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C47830) *
                       C656 +
                   (((C31920 + C31919) * C47971 * C16117 +
                     (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                      C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                         C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C1818 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C1819 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C47971 * C16117 +
                      (C31773 + C31774) * C47971 * C48042) *
                         C48058) *
                        C48023 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C1819 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C1818 -
                     ((C33747 + C33748) * C47971 * C48042 +
                      (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                       C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                          C47971 * C16117) *
                         C48058) *
                        C47830) *
                       C48009 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C1819 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C1818 -
                     ((C31777 + C31778) * C47971 * C48042 +
                      (C31774 + C31773) * C47971 * C16117) *
                         C48058) *
                        C48023 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C1818 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C1819 +
                     ((C33748 + C33747) * C47971 * C16117 +
                      (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
                       C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                          C47971 * C48042) *
                         C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[161] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48024 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C1414 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C47872 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C48024) *
                       C1415 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C48024 -
                    ((C33025 + C33026) * C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C47872) *
                       C1416 +
                   (((C31318 * C1696 + C33157 + C33157 + C31316 * C1702 +
                      C31320 * C5947 + C33158 + C33158 + C48075 * C5951) *
                         C47971 * C16117 +
                     (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                      C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                         C47971 * C48042) *
                        C47872 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C48024 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C48023 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C48024) *
                        C47830) *
                       C286 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C48024) *
                        C48023 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C48024 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47830) *
                       C287 +
                   ((((C31370 + C31369) * C47971 * C16117 +
                      (C31371 + C31372) * C47971 * C48042) *
                         C48024 -
                     ((C32061 + C32062) * C47971 * C48042 +
                      (C31776 + C31775) * C47971 * C16117) *
                         C47872) *
                        C48023 +
                    (((C32284 + C32283) * C47971 * C16117 +
                      (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                       C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31919 + C31920) * C47971 * C48042 +
                      (C31574 + C31573) * C47971 * C16117) *
                         C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C2282 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C2283 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C2284 -
                    ((C33889 + C33890) * C47971 * C48042 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C47971 * C16117) *
                        C48071) *
                       C48023 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C2283 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C2282 -
                    ((C33747 + C33748) * C47971 * C48042 +
                     (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                      C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                         C47971 * C16117) *
                        C2284 +
                    ((C31318 * C2400 + C34021 + C34021 + C31316 * C2406 +
                      C31320 * C6825 + C34022 + C34022 + C48075 * C6829) *
                         C47971 * C16117 +
                     (C31318 * C2401 + C34023 + C34023 + C31316 * C2407 +
                      C31320 * C6826 + C34024 + C34024 + C48075 * C6830) *
                         C47971 * C48042) *
                        C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[162] += (0.5 * std::pow(Pi, 2.5) *
                      (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                         C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                            C47971 * C16117 +
                        (C31367 + C31368) * C47971 * C48042) *
                           C47785 * C47767 * C108 -
                       ((C31369 + C31370) * C47971 * C48042 +
                        (C31368 + C31367) * C47971 * C16117) *
                           C47785 * C47767 * C109 +
                       ((C31370 + C31369) * C47971 * C16117 +
                        (C31371 + C31372) * C47971 * C48042) *
                           C47785 * C47767 * C110 -
                       ((C31373 + C31374) * C47971 * C48042 +
                        (C31372 + C31371) * C47971 * C16117) *
                           C47785 * C47767 * C111 +
                       ((C31374 + C31373) * C47971 * C16117 +
                        (C31318 * C120 + C31349 + C31349 + C31316 * C134 +
                         C31320 * C768 + C31350 + C31350 + C48075 * C770) *
                            C47971 * C48042) *
                           C47785 * C47767 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                          C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                             C47971 * C16117 +
                         (C31367 + C31368) * C47971 * C48042) *
                            C47785 * C48094 -
                        ((C31569 + C31570) * C47971 * C48042 +
                         (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                          C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                             C47971 * C16117) *
                            C47785 * C48082 +
                        ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                          C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                             C47971 * C16117 +
                         (C31571 + C31572) * C47971 * C48042) *
                            C47785 * C48055) *
                           C286 +
                       (((C31570 + C31569) * C47971 * C16117 +
                         (C31573 + C31574) * C47971 * C48042) *
                            C47785 * C48082 -
                        ((C31369 + C31370) * C47971 * C48042 +
                         (C31368 + C31367) * C47971 * C16117) *
                            C47785 * C48094 -
                        ((C31575 + C31576) * C47971 * C48042 +
                         (C31572 + C31571) * C47971 * C16117) *
                            C47785 * C48055) *
                           C287 +
                       (((C31370 + C31369) * C47971 * C16117 +
                         (C31371 + C31372) * C47971 * C48042) *
                            C47785 * C48094 -
                        ((C31320 * C927 + C31549 + C31549 + C48075 * C937 +
                          C31318 * C295 + C31550 + C31550 + C31316 * C315) *
                             C47971 * C48042 +
                         (C31574 + C31573) * C47971 * C16117) *
                            C47785 * C48082 +
                        ((C31576 + C31575) * C47971 * C16117 +
                         (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                          C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                             C47971 * C48042) *
                            C47785 * C48055) *
                           C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48095 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C48084 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C47767 * C286 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C48084 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C48095 -
                    ((C31777 + C31778) * C47971 * C48042 +
                     (C31774 + C31773) * C47971 * C16117) *
                        C48058) *
                       C47767 * C287 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C48095 -
                    ((C31320 * C485 + C31751 + C31751 + C48075 * C505 +
                      C31318 * C484 + C31752 + C31752 + C31316 * C504) *
                         C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C48084 +
                    ((C31778 + C31777) * C47971 * C16117 +
                     (C31318 * C485 + C31753 + C31753 + C31316 * C505 +
                      C31320 * C2286 + C31754 + C31754 + C48075 * C2288) *
                         C47971 * C48042) *
                        C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48055) *
                       C48091 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C1073 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C1072 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48055) *
                       C48078 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C47785 * C1140 -
                   ((C31569 + C31570) * C47971 * C48042 +
                    (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                     C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                        C47971 * C16117) *
                       C47785 * C1141 +
                   ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                     C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                        C47971 * C16117 +
                    (C31571 + C31572) * C47971 * C48042) *
                       C47785 * C1142 -
                   ((C31320 * C1697 + C32513 + C32513 + C48075 * C1703 +
                     C31318 * C1147 + C32514 + C32514 + C31316 * C1159) *
                        C47971 * C48042 +
                    (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                     C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                        C47971 * C16117) *
                       C47785 * C1143 +
                   ((C31318 * C1149 + C32517 + C32517 + C31316 * C1161 +
                     C31320 * C6438 + C32518 + C32518 + C48075 * C6442) *
                        C47971 * C16117 +
                    (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                     C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                        C47971 * C48042) *
                       C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48095 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C48084 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C1072 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C48084 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C48095 -
                    ((C31320 * C2401 + C32667 + C32667 + C48075 * C2407 +
                      C31318 * C1281 + C32668 + C32668 + C31316 * C1299) *
                         C47971 * C48042 +
                     (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                      C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                         C47971 * C16117) *
                        C48058) *
                       C1073 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C48095 -
                    ((C31320 * C1287 + C32671 + C32671 + C48075 * C1305 +
                      C31318 * C1284 + C32672 + C32672 + C31316 * C1302) *
                         C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C48084 +
                    ((C31318 * C1286 + C32675 + C32675 + C31316 * C1304 +
                      C31320 * C7296 + C32676 + C32676 + C48075 * C7300) *
                         C47971 * C16117 +
                     (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                      C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                         C47971 * C48042) *
                        C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C1818 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C1819 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C47767 * C48091 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C1819 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C1818 -
                    ((C31777 + C31778) * C47971 * C48042 +
                     (C31774 + C31773) * C47971 * C16117) *
                        C48058) *
                       C47767 * C48078 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C1818 -
                    ((C32061 + C32062) * C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C1819 +
                    ((C31778 + C31777) * C47971 * C16117 +
                     (C31318 * C485 + C31753 + C31753 + C31316 * C505 +
                      C31320 * C2286 + C31754 + C31754 + C48075 * C2288) *
                         C47971 * C48042) *
                        C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C1818 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C1819 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C48094 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C1819 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C1818 -
                    ((C31320 * C2401 + C32667 + C32667 + C48075 * C2407 +
                      C31318 * C1281 + C32668 + C32668 + C31316 * C1299) *
                         C47971 * C48042 +
                     (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                      C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                         C47971 * C16117) *
                        C48058) *
                       C48082 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C1818 -
                    ((C33025 + C33026) * C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C1819 +
                    ((C31318 * C1286 + C32675 + C32675 + C31316 * C1304 +
                      C31320 * C7296 + C32676 + C32676 + C48075 * C7300) *
                         C47971 * C16117 +
                     (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                      C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                         C47971 * C48042) *
                        C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C1993 -
                   ((C31771 + C31772) * C47971 * C48042 +
                    (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                     C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                        C47971 * C16117) *
                       C1994 +
                   ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                     C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                        C47971 * C16117 +
                    (C31773 + C31774) * C47971 * C48042) *
                       C1995 -
                   ((C31320 * C2002 + C33535 + C33535 + C48075 * C2014 +
                     C31318 * C1999 + C33536 + C33536 + C31316 * C2011) *
                        C47971 * C48042 +
                    (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                     C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                        C47971 * C16117) *
                       C1996 +
                   ((C31318 * C2001 + C33539 + C33539 + C31316 * C2013 +
                     C31320 * C12573 + C33540 + C33540 + C48075 * C12577) *
                        C47971 * C16117 +
                    (C31318 * C2002 + C33541 + C33541 + C31316 * C2014 +
                     C31320 * C12574 + C33542 + C33542 + C48075 * C12578) *
                        C47971 * C48042) *
                       C1997) *
                  C47767 * C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[163] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C48024 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C1072 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C48024) *
                        C1073 +
                    (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                       C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                          C47971 * C16117 +
                      (C31571 + C31572) * C47971 * C48042) *
                         C48024 -
                     ((C33025 + C33026) * C47971 * C48042 +
                      (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                       C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                          C47971 * C16117) *
                         C47872) *
                        C48055) *
                       C48009 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C48024) *
                        C1072 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C48024 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C1073 +
                    (((C33026 + C33025) * C47971 * C16117 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31575 + C31576) * C47971 * C48042 +
                      (C31572 + C31571) * C47971 * C16117) *
                         C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48024 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C47767 * C654 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C47872 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C48024) *
                       C47767 * C655 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C48024 -
                    ((C32061 + C32062) * C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C47872) *
                       C47767 * C656 +
                   (((C32062 + C32061) * C47971 * C16117 +
                     (C31318 * C486 + C32055 + C32055 + C31316 * C506 +
                      C31320 * C487 + C32056 + C32056 + C48075 * C507) *
                         C47971 * C48042) *
                        C47872 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C2282 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C2283 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C2284 -
                    ((C33889 + C33890) * C47971 * C48042 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C47971 * C16117) *
                        C48071) *
                       C47767 * C48009 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C2283 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C2282 -
                    ((C31777 + C31778) * C47971 * C48042 +
                     (C31774 + C31773) * C47971 * C16117) *
                        C2284 +
                    ((C33890 + C33889) * C47971 * C16117 +
                     (C31318 * C1998 + C33883 + C33883 + C31316 * C2010 +
                      C31320 * C2003 + C33884 + C33884 + C48075 * C2015) *
                         C47971 * C48042) *
                        C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[164] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C48094 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C48082 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48055) *
                       C286 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C48082 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C48094 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48055) *
                       C287 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C48094 -
                    ((C31320 * C927 + C31549 + C31549 + C48075 * C937 +
                      C31318 * C295 + C31550 + C31550 + C31316 * C315) *
                         C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C48082 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C47785 * C47767 * C108 -
                   ((C31369 + C31370) * C47971 * C48042 +
                    (C31368 + C31367) * C47971 * C16117) *
                       C47785 * C47767 * C109 +
                   ((C31370 + C31369) * C47971 * C16117 +
                    (C31371 + C31372) * C47971 * C48042) *
                       C47785 * C47767 * C110 -
                   ((C31373 + C31374) * C47971 * C48042 +
                    (C31372 + C31371) * C47971 * C16117) *
                       C47785 * C47767 * C111 +
                   ((C31374 + C31373) * C47971 * C16117 +
                    (C31318 * C120 + C31349 + C31349 + C31316 * C134 +
                     C31320 * C768 + C31350 + C31350 + C48075 * C770) *
                        C47971 * C48042) *
                       C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48055) *
                       C48091 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C1073 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C1072 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48055) *
                       C48078 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C47785 * C1140 -
                   ((C31569 + C31570) * C47971 * C48042 +
                    (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                     C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                        C47971 * C16117) *
                       C47785 * C1141 +
                   ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                     C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                        C47971 * C16117 +
                    (C31571 + C31572) * C47971 * C48042) *
                       C47785 * C1142 -
                   ((C31320 * C1697 + C32513 + C32513 + C48075 * C1703 +
                     C31318 * C1147 + C32514 + C32514 + C31316 * C1159) *
                        C47971 * C48042 +
                    (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                     C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                        C47971 * C16117) *
                       C47785 * C1143 +
                   ((C31318 * C1149 + C32517 + C32517 + C31316 * C1161 +
                     C31320 * C6438 + C32518 + C32518 + C48075 * C6442) *
                        C47971 * C16117 +
                    (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                     C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                        C47971 * C48042) *
                       C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C1818 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C1819 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C47767 * C48091 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C1819 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C1818 -
                    ((C31777 + C31778) * C47971 * C48042 +
                     (C31774 + C31773) * C47971 * C16117) *
                        C48058) *
                       C47767 * C48078 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C1818 -
                    ((C32061 + C32062) * C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C1819 +
                    ((C31778 + C31777) * C47971 * C16117 +
                     (C31318 * C485 + C31753 + C31753 + C31316 * C505 +
                      C31320 * C2286 + C31754 + C31754 + C48075 * C2288) *
                         C47971 * C48042) *
                        C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C1818 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C1819 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C48094 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C1819 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C1818 -
                    ((C31320 * C2401 + C32667 + C32667 + C48075 * C2407 +
                      C31318 * C1281 + C32668 + C32668 + C31316 * C1299) *
                         C47971 * C48042 +
                     (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                      C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                         C47971 * C16117) *
                        C48058) *
                       C48082 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C1818 -
                    ((C33025 + C33026) * C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C1819 +
                    ((C31318 * C1286 + C32675 + C32675 + C31316 * C1304 +
                      C31320 * C7296 + C32676 + C32676 + C48075 * C7300) *
                         C47971 * C16117 +
                     (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                      C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                         C47971 * C48042) *
                        C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C3272 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C48023 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C3272) *
                        C47830) *
                       C47744 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C3272) *
                        C48023 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C3272 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47830) *
                       C47753 +
                   ((((C31370 + C31369) * C47971 * C16117 +
                      (C31371 + C31372) * C47971 * C48042) *
                         C3272 -
                     ((C32061 + C32062) * C47971 * C48042 +
                      (C31776 + C31775) * C47971 * C16117) *
                         C47872) *
                        C48023 +
                    (((C32284 + C32283) * C47971 * C16117 +
                      (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                       C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31919 + C31920) * C47971 * C48042 +
                      (C31574 + C31573) * C47971 * C16117) *
                         C3272) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C47868 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47875 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C47971 * C16117 +
                      (C31773 + C31774) * C47971 * C48042) *
                         C3780) *
                        C48023 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47875 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C47868 -
                     ((C33747 + C33748) * C47971 * C48042 +
                      (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                       C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                          C47971 * C16117) *
                         C3780) *
                        C47830) *
                       C2618 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47875 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C47868 -
                     ((C31777 + C31778) * C47971 * C48042 +
                      (C31774 + C31773) * C47971 * C16117) *
                         C3780) *
                        C48023 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C47868 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47875 +
                     ((C33748 + C33747) * C47971 * C16117 +
                      (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
                       C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                          C47971 * C48042) *
                         C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C3272 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C48094 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C3272) *
                        C48082 +
                    (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                       C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                          C47971 * C16117 +
                      (C31571 + C31572) * C47971 * C48042) *
                         C3272 -
                     ((C33025 + C33026) * C47971 * C48042 +
                      (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                       C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                          C47971 * C16117) *
                         C47872) *
                        C48055) *
                       C2618 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C3272) *
                        C48094 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C3272 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C48082 +
                    (((C33026 + C33025) * C47971 * C16117 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31575 + C31576) * C47971 * C48042 +
                      (C31572 + C31571) * C47971 * C16117) *
                         C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C3272 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C47767 * C48100 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C47872 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C3272) *
                       C47767 * C48093 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C3272 -
                    ((C32061 + C32062) * C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C47872) *
                       C47767 * C48080 +
                   (((C32062 + C32061) * C47971 * C16117 +
                     (C31318 * C486 + C32055 + C32055 + C31316 * C506 +
                      C31320 * C487 + C32056 + C32056 + C48075 * C507) *
                         C47971 * C48042) *
                        C47872 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48102 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C48099 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48090 -
                    ((C33889 + C33890) * C47971 * C48042 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C47971 * C16117) *
                        C48071) *
                       C47767 * C2618 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C48099 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C48102 -
                    ((C31777 + C31778) * C47971 * C48042 +
                     (C31774 + C31773) * C47971 * C16117) *
                        C48090 +
                    ((C33890 + C33889) * C47971 * C16117 +
                     (C31318 * C1998 + C33883 + C33883 + C31316 * C2010 +
                      C31320 * C2003 + C33884 + C33884 + C48075 * C2015) *
                         C47971 * C48042) *
                        C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47868 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47875 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C3780) *
                       C47767 * C47744 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C47875 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47868 -
                    ((C31777 + C31778) * C47971 * C48042 +
                     (C31774 + C31773) * C47971 * C16117) *
                        C3780) *
                       C47767 * C47753 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47868 -
                    ((C32061 + C32062) * C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C47875 +
                    ((C31778 + C31777) * C47971 * C16117 +
                     (C31318 * C485 + C31753 + C31753 + C31316 * C505 +
                      C31320 * C2286 + C31754 + C31754 + C48075 * C2288) *
                         C47971 * C48042) *
                        C3780) *
                       C47767 * C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C3272 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C47767 * C48100 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C47872 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C3272) *
                       C47767 * C48093 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C3272 -
                    ((C32061 + C32062) * C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C47872) *
                       C47767 * C48080 +
                   (((C32062 + C32061) * C47971 * C16117 +
                     (C31318 * C486 + C32055 + C32055 + C31316 * C506 +
                      C31320 * C487 + C32056 + C32056 + C48075 * C507) *
                         C47971 * C48042) *
                        C47872 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C3272 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C48094 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C3272) *
                        C48082 +
                    (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                       C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                          C47971 * C16117 +
                      (C31571 + C31572) * C47971 * C48042) *
                         C3272 -
                     ((C33025 + C33026) * C47971 * C48042 +
                      (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                       C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                          C47971 * C16117) *
                         C47872) *
                        C48055) *
                       C2618 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C3272) *
                        C48094 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C3272 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C48082 +
                    (((C33026 + C33025) * C47971 * C16117 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31575 + C31576) * C47971 * C48042 +
                      (C31572 + C31571) * C47971 * C16117) *
                         C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C48023 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C47830) *
                       C654 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C48023) *
                       C655 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C48023 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C47830) *
                       C656 +
                   (((C31920 + C31919) * C47971 * C16117 +
                     (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                      C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                         C47971 * C48042) *
                        C47785 * C47830 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C1414 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C1415 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C1416 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C47785 * C48065) *
                       C48009 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C1415 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C1414 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C1416 +
                    ((C32820 + C32819) * C47971 * C16117 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C47971 * C48042) *
                        C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[171] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C48024 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C48023 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C48024) *
                        C47830) *
                       C286 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C48024) *
                        C48023 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C48024 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C47830) *
                       C287 +
                   ((((C31370 + C31369) * C47971 * C16117 +
                      (C31371 + C31372) * C47971 * C48042) *
                         C48024 -
                     ((C32061 + C32062) * C47971 * C48042 +
                      (C31776 + C31775) * C47971 * C16117) *
                         C47872) *
                        C48023 +
                    (((C32284 + C32283) * C47971 * C16117 +
                      (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                       C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31919 + C31920) * C47971 * C48042 +
                      (C31574 + C31573) * C47971 * C16117) *
                         C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48024 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C1414 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C47872 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C48024) *
                       C1415 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C48024 -
                    ((C33025 + C33026) * C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C47872) *
                       C1416 +
                   (((C31318 * C1696 + C33157 + C33157 + C31316 * C1702 +
                      C31320 * C5947 + C33158 + C33158 + C48075 * C5951) *
                         C47971 * C16117 +
                     (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                      C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                         C47971 * C48042) *
                        C47872 -
                    ((C32819 + C32820) * C47971 * C48042 +
                     (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                      C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                         C47971 * C16117) *
                        C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[172] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C48094 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C48082 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48055) *
                       C286 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C48082 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C48094 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48055) *
                       C287 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C48094 -
                    ((C31320 * C927 + C31549 + C31549 + C48075 * C937 +
                      C31318 * C295 + C31550 + C31550 + C31316 * C315) *
                         C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C48082 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C47785 * C47767 * C108 -
                   ((C31369 + C31370) * C47971 * C48042 +
                    (C31368 + C31367) * C47971 * C16117) *
                       C47785 * C47767 * C109 +
                   ((C31370 + C31369) * C47971 * C16117 +
                    (C31371 + C31372) * C47971 * C48042) *
                       C47785 * C47767 * C110 -
                   ((C31373 + C31374) * C47971 * C48042 +
                    (C31372 + C31371) * C47971 * C16117) *
                       C47785 * C47767 * C111 +
                   ((C31374 + C31373) * C47971 * C16117 +
                    (C31318 * C120 + C31349 + C31349 + C31316 * C134 +
                     C31320 * C768 + C31350 + C31350 + C48075 * C770) *
                        C47971 * C48042) *
                       C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48095 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C48084 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C47767 * C286 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C48084 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C48095 -
                    ((C31777 + C31778) * C47971 * C48042 +
                     (C31774 + C31773) * C47971 * C16117) *
                        C48058) *
                       C47767 * C287 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C48095 -
                    ((C31320 * C485 + C31751 + C31751 + C48075 * C505 +
                      C31318 * C484 + C31752 + C31752 + C31316 * C504) *
                         C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C48084 +
                    ((C31778 + C31777) * C47971 * C16117 +
                     (C31318 * C485 + C31753 + C31753 + C31316 * C505 +
                      C31320 * C2286 + C31754 + C31754 + C48075 * C2288) *
                         C47971 * C48042) *
                        C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48055) *
                       C48091 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C1073 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C1072 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48055) *
                       C48078 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C47785 * C1140 -
                   ((C31569 + C31570) * C47971 * C48042 +
                    (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                     C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                        C47971 * C16117) *
                       C47785 * C1141 +
                   ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                     C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                        C47971 * C16117 +
                    (C31571 + C31572) * C47971 * C48042) *
                       C47785 * C1142 -
                   ((C31320 * C1697 + C32513 + C32513 + C48075 * C1703 +
                     C31318 * C1147 + C32514 + C32514 + C31316 * C1159) *
                        C47971 * C48042 +
                    (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                     C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                        C47971 * C16117) *
                       C47785 * C1143 +
                   ((C31318 * C1149 + C32517 + C32517 + C31316 * C1161 +
                     C31320 * C6438 + C32518 + C32518 + C48075 * C6442) *
                        C47971 * C16117 +
                    (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                     C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                        C47971 * C48042) *
                       C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48095 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C48084 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C47971 * C16117 +
                     (C31773 + C31774) * C47971 * C48042) *
                        C48058) *
                       C1072 +
                   (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                      C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                         C47971 * C16117 +
                     (C32281 + C32282) * C47971 * C48042) *
                        C48084 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C48095 -
                    ((C31320 * C2401 + C32667 + C32667 + C48075 * C2407 +
                      C31318 * C1281 + C32668 + C32668 + C31316 * C1299) *
                         C47971 * C48042 +
                     (C31320 * C2400 + C32669 + C32669 + C48075 * C2406 +
                      C31318 * C1282 + C32670 + C32670 + C31316 * C1300) *
                         C47971 * C16117) *
                        C48058) *
                       C1073 +
                   (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C48095 -
                    ((C31320 * C1287 + C32671 + C32671 + C48075 * C1305 +
                      C31318 * C1284 + C32672 + C32672 + C31316 * C1302) *
                         C47971 * C48042 +
                     (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                      C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                         C47971 * C16117) *
                        C48084 +
                    ((C31318 * C1286 + C32675 + C32675 + C31316 * C1304 +
                      C31320 * C7296 + C32676 + C32676 + C48075 * C7300) *
                         C47971 * C16117 +
                     (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                      C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                         C47971 * C48042) *
                        C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[173] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C48024 -
                    ((C31771 + C31772) * C47971 * C48042 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C47971 * C16117) *
                        C47872) *
                       C47767 * C654 +
                   (((C31772 + C31771) * C47971 * C16117 +
                     (C31775 + C31776) * C47971 * C48042) *
                        C47872 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C48024) *
                       C47767 * C655 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C48024 -
                    ((C32061 + C32062) * C47971 * C48042 +
                     (C31776 + C31775) * C47971 * C16117) *
                        C47872) *
                       C47767 * C656 +
                   (((C32062 + C32061) * C47971 * C16117 +
                     (C31318 * C486 + C32055 + C32055 + C31316 * C506 +
                      C31320 * C487 + C32056 + C32056 + C48075 * C507) *
                         C47971 * C48042) *
                        C47872 -
                    ((C31373 + C31374) * C47971 * C48042 +
                     (C31372 + C31371) * C47971 * C16117) *
                        C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C47971 * C16117 +
                      (C31367 + C31368) * C47971 * C48042) *
                         C48024 -
                     ((C31771 + C31772) * C47971 * C48042 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C47971 * C16117) *
                         C47872) *
                        C1072 +
                    (((C31318 * C924 + C32257 + C32257 + C31316 * C934 +
                       C31320 * C1282 + C32258 + C32258 + C48075 * C1300) *
                          C47971 * C16117 +
                      (C32281 + C32282) * C47971 * C48042) *
                         C47872 -
                     ((C31569 + C31570) * C47971 * C48042 +
                      (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                       C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                          C47971 * C16117) *
                         C48024) *
                        C1073 +
                    (((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                       C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                          C47971 * C16117 +
                      (C31571 + C31572) * C47971 * C48042) *
                         C48024 -
                     ((C33025 + C33026) * C47971 * C48042 +
                      (C31320 * C1286 + C32673 + C32673 + C48075 * C1304 +
                       C31318 * C1285 + C32674 + C32674 + C31316 * C1303) *
                          C47971 * C16117) *
                         C47872) *
                        C48055) *
                       C48009 +
                   ((((C31772 + C31771) * C47971 * C16117 +
                      (C31775 + C31776) * C47971 * C48042) *
                         C47872 -
                     ((C31369 + C31370) * C47971 * C48042 +
                      (C31368 + C31367) * C47971 * C16117) *
                         C48024) *
                        C1072 +
                    (((C31570 + C31569) * C47971 * C16117 +
                      (C31573 + C31574) * C47971 * C48042) *
                         C48024 -
                     ((C32283 + C32284) * C47971 * C48042 +
                      (C32282 + C32281) * C47971 * C16117) *
                         C47872) *
                        C1073 +
                    (((C33026 + C33025) * C47971 * C16117 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C47971 * C48042) *
                         C47872 -
                     ((C31575 + C31576) * C47971 * C48042 +
                      (C31572 + C31571) * C47971 * C16117) *
                         C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[174] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C47785 * C47767 * C108 -
                   ((C31369 + C31370) * C47971 * C48042 +
                    (C31368 + C31367) * C47971 * C16117) *
                       C47785 * C47767 * C109 +
                   ((C31370 + C31369) * C47971 * C16117 +
                    (C31371 + C31372) * C47971 * C48042) *
                       C47785 * C47767 * C110 -
                   ((C31373 + C31374) * C47971 * C48042 +
                    (C31372 + C31371) * C47971 * C16117) *
                       C47785 * C47767 * C111 +
                   ((C31374 + C31373) * C47971 * C16117 +
                    (C31318 * C120 + C31349 + C31349 + C31316 * C134 +
                     C31320 * C768 + C31350 + C31350 + C48075 * C770) *
                        C47971 * C48042) *
                       C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C48094 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C48082 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48055) *
                       C286 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C48082 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C48094 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48055) *
                       C287 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C48094 -
                    ((C31320 * C927 + C31549 + C31549 + C48075 * C937 +
                      C31318 * C295 + C31550 + C31550 + C31316 * C315) *
                         C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C48082 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C47971 * C16117 +
                     (C31367 + C31368) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31569 + C31570) * C47971 * C48042 +
                     (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                      C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                         C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                      C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                         C47971 * C16117 +
                     (C31571 + C31572) * C47971 * C48042) *
                        C47785 * C48055) *
                       C48091 +
                   (((C31570 + C31569) * C47971 * C16117 +
                     (C31573 + C31574) * C47971 * C48042) *
                        C47785 * C1073 -
                    ((C31369 + C31370) * C47971 * C48042 +
                     (C31368 + C31367) * C47971 * C16117) *
                        C47785 * C1072 -
                    ((C31575 + C31576) * C47971 * C48042 +
                     (C31572 + C31571) * C47971 * C16117) *
                        C47785 * C48055) *
                       C48078 +
                   (((C31370 + C31369) * C47971 * C16117 +
                     (C31371 + C31372) * C47971 * C48042) *
                        C47785 * C1072 -
                    ((C31919 + C31920) * C47971 * C48042 +
                     (C31574 + C31573) * C47971 * C16117) *
                        C47785 * C1073 +
                    ((C31576 + C31575) * C47971 * C16117 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C47971 * C48042) *
                        C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C47971 * C16117 +
                    (C31367 + C31368) * C47971 * C48042) *
                       C47785 * C1140 -
                   ((C31569 + C31570) * C47971 * C48042 +
                    (C31320 * C924 + C31527 + C31527 + C48075 * C934 +
                     C31318 * C291 + C31528 + C31528 + C31316 * C311) *
                        C47971 * C16117) *
                       C47785 * C1141 +
                   ((C31318 * C292 + C31529 + C31529 + C31316 * C312 +
                     C31320 * C1285 + C31530 + C31530 + C48075 * C1303) *
                        C47971 * C16117 +
                    (C31571 + C31572) * C47971 * C48042) *
                       C47785 * C1142 -
                   ((C31320 * C1697 + C32513 + C32513 + C48075 * C1703 +
                     C31318 * C1147 + C32514 + C32514 + C31316 * C1159) *
                        C47971 * C48042 +
                    (C31320 * C1696 + C32515 + C32515 + C48075 * C1702 +
                     C31318 * C1148 + C32516 + C32516 + C31316 * C1160) *
                        C47971 * C16117) *
                       C47785 * C1143 +
                   ((C31318 * C1149 + C32517 + C32517 + C31316 * C1161 +
                     C31320 * C6438 + C32518 + C32518 + C48075 * C6442) *
                        C47971 * C16117 +
                    (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                     C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                        C47971 * C48042) *
                       C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C47826 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C47833 +
                    ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C47785 * C2878) *
                       C47744 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C47833 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C47826 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C2878) *
                       C47753 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C47826 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C47833 +
                    ((C31576 + C31575) * C4753 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C2878) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C48024 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C47826 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C48024) *
                        C47833 +
                    (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                         C47716 * C48024 -
                     ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                         C47716 * C47872) *
                        C2878) *
                       C2618 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C48024) *
                        C47826 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C48024 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47833 +
                    (((C33026 + C33025) * C4753 +
                      (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                       C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                         C47716 * C48024) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C48101 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C48097 +
                    ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C47785 * C48087 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C47785 * C48065) *
                       C2618 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C48097 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C48101 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48087 +
                    ((C32820 + C32819) * C4753 +
                     (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                      C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C47830) *
                       C48100 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C2510) *
                       C48093 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C47830) *
                       C48080 +
                   (((C31920 + C31919) * C4753 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C48095 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C48084 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C4753 +
                      (C38269 + C38270) * C48073) *
                         C47716 * C48058) *
                        C2510 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C48084 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C48095 -
                     ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                         C47716 * C48058) *
                        C47830) *
                       C2618 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C48084 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C48095 -
                     ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                         C47716 * C48058) *
                        C2510 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C48095 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C48084 +
                     ((C33748 + C33747) * C4753 +
                      (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                       C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                          C48073) *
                         C47716 * C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C48024 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C2510 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C48024) *
                        C47830) *
                       C47744 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C48024) *
                        C2510 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C48024 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47830) *
                       C47753 +
                   ((((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                         C47716 * C48024 -
                     ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                         C47716 * C47872) *
                        C2510 +
                    (((C32284 + C32283) * C4753 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                         C47716 * C48024) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C47830) *
                       C48100 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C2510) *
                       C48093 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C2510 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C47830) *
                       C48080 +
                   (((C31920 + C31919) * C4753 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C48101 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C48097 +
                    ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C47785 * C48087 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C47785 * C48065) *
                       C2618 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C48097 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C48101 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48087 +
                    ((C32820 + C32819) * C4753 +
                     (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                      C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C3272 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C47826 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C3272) *
                        C47833 +
                    (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                         C47716 * C3272 -
                     ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                         C47716 * C47872) *
                        C2878) *
                       C48009 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C3272) *
                        C47826 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C3272 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47833 +
                    (((C33026 + C33025) * C4753 +
                      (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                       C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                         C47716 * C3272) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[181] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47868 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47875 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C3780) *
                       C47826 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C47875 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47868 -
                    ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                        C47716 * C3780) *
                       C47833 +
                   (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C47868 -
                    ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                        C47716 * C47875 +
                    ((C38274 + C38273) * C4753 +
                     (C31318 * C5947 + C38255 + C38255 + C31316 * C5951 +
                      C31320 * C23432 + C38256 + C38256 + C48075 * C23434) *
                         C48073) *
                        C47716 * C3780) *
                       C2878) *
                  C47739) /
                 (p * q * std::sqrt(p + q));
    d2ee[182] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C3272 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C48101 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C47872 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C3272) *
                       C48097 +
                   (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C3272 -
                    ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                        C47716 * C47872) *
                       C48087 +
                   (((C38740 + C38739) * C4753 +
                     (C31318 * C6438 + C38733 + C38733 + C31316 * C6442 +
                      C31320 * C22444 + C38734 + C38734 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C3272 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C2510 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C3272) *
                        C47830) *
                       C48091 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C3272) *
                        C2510 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C3272 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47830) *
                       C48078 +
                   ((((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                         C47716 * C3272 -
                     ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                         C47716 * C47872) *
                        C2510 +
                    (((C32284 + C32283) * C4753 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                         C47716 * C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48102 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C48099 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C48090 -
                    ((C39581 + C39582) * C48073 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C4753) *
                        C47716 * C48071) *
                       C2510 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C48099 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C48102 -
                    ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                        C47716 * C48090 +
                    ((C39582 + C39581) * C4753 +
                     (C31318 * C7296 + C39575 + C39575 + C31316 * C7300 +
                      C31320 * C23086 + C39576 + C39576 + C48075 * C23088) *
                         C48073) *
                        C47716 * C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[183] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C47868 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47875 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C4753 +
                      (C38269 + C38270) * C48073) *
                         C47716 * C3780) *
                        C2510 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47875 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C47868 -
                     ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                         C47716 * C3780) *
                        C47830) *
                       C48009 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47875 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C47868 -
                     ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                         C47716 * C3780) *
                        C2510 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C47868 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47875 +
                     ((C33748 + C33747) * C4753 +
                      (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                       C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                          C48073) *
                         C47716 * C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[184] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C3272 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C2510 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C3272) *
                        C47830) *
                       C48091 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C3272) *
                        C2510 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C3272 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47830) *
                       C48078 +
                   ((((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                         C47716 * C3272 -
                     ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                         C47716 * C47872) *
                        C2510 +
                    (((C32284 + C32283) * C4753 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                         C47716 * C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C3272 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C48101 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C47872 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C3272) *
                       C48097 +
                   (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C3272 -
                    ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                        C47716 * C47872) *
                       C48087 +
                   (((C38740 + C38739) * C4753 +
                     (C31318 * C6438 + C38733 + C38733 + C31316 * C6442 +
                      C31320 * C22444 + C38734 + C38734 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[185] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C1414 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C1415 +
                    ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C47785 * C1416 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C47785 * C48065) *
                       C48009 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C1415 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C1414 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C1416 +
                    ((C32820 + C32819) * C4753 +
                     (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                      C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C47830) *
                       C654 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C48023) *
                       C655 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C47830) *
                       C656 +
                   (((C31920 + C31919) * C4753 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C1818 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C1819 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C4753 +
                      (C38269 + C38270) * C48073) *
                         C47716 * C48058) *
                        C48023 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C1819 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C1818 -
                     ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                         C47716 * C48058) *
                        C47830) *
                       C48009 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C1819 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C1818 -
                     ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                         C47716 * C48058) *
                        C48023 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C1818 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C1819 +
                     ((C33748 + C33747) * C4753 +
                      (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                       C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                          C48073) *
                         C47716 * C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[186] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48024 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C1414 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C47872 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C48024) *
                       C1415 +
                   (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C48024 -
                    ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                        C47716 * C47872) *
                       C1416 +
                   (((C38740 + C38739) * C4753 +
                     (C31318 * C6438 + C38733 + C38733 + C31316 * C6442 +
                      C31320 * C22444 + C38734 + C38734 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C48024 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C48023 +
                    (((C37846 + C37845) * C4753 +
                      (C31318 * C1285 + C32674 + C32674 + C31316 * C1303 +
                       C31320 * C1286 + C32673 + C32673 + C48075 * C1304) *
                          C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C48024) *
                        C47830) *
                       C286 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C48024) *
                        C48023 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C48024 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47830) *
                       C287 +
                   ((((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                         C47716 * C48024 -
                     ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                         C47716 * C47872) *
                        C48023 +
                    (((C32284 + C32283) * C4753 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                         C47716 * C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C2282 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C2283 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C2284 -
                    ((C39581 + C39582) * C48073 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C4753) *
                        C47716 * C48071) *
                       C48023 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C2283 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C2282 -
                    ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                        C47716 * C2284 +
                    ((C39582 + C39581) * C4753 +
                     (C31318 * C7296 + C39575 + C39575 + C31316 * C7300 +
                      C31320 * C23086 + C39576 + C39576 + C48075 * C23088) *
                         C48073) *
                        C47716 * C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                   C4753 +
               (C31318 * C291 + C31528 + C31528 + C31316 * C311 +
                C31320 * C924 + C31527 + C31527 + C48075 * C934) *
                   C48073) *
                  C47716 * C47785 * C47767 * C108 -
              ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                  C47716 * C47785 * C47767 * C109 +
              ((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                  C47716 * C47785 * C47767 * C110 -
              ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                  C47716 * C47785 * C47767 * C111 +
              ((C31374 + C31373) * C4753 +
               (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                   C48073) *
                  C47716 * C47785 * C47767 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                 C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                    C4753 +
                (C37233 + C37234) * C48073) *
                   C47716 * C47785 * C48094 -
               ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                   C47716 * C47785 * C48082 +
               ((C37236 + C37235) * C4753 +
                (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
                 C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                    C48073) *
                   C47716 * C47785 * C48055) *
                  C286 +
              (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                   C47716 * C47785 * C48082 -
               ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                   C47716 * C47785 * C48094 -
               ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                   C47716 * C47785 * C48055) *
                  C287 +
              (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                   C47716 * C47785 * C48094 -
               ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                   C47716 * C47785 * C48082 +
               ((C31576 + C31575) * C4753 +
                (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                 C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                    C48073) *
                   C47716 * C47785 * C48055) *
                  C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 + C31320 * C480 +
             C31324 + C31324 + C48075 * C500) *
                C4753 +
            (C37233 + C37234) * C48073) *
               C47716 * C48095 -
           ((C31320 * C1282 + C32258 + C32258 + C48075 * C1300 + C31318 * C924 +
             C32257 + C32257 + C31316 * C934) *
                C48073 +
            (C31320 * C481 + C31729 + C31729 + C48075 * C501 + C31318 * C480 +
             C31730 + C31730 + C31316 * C500) *
                C4753) *
               C47716 * C48084 +
           ((C31318 * C481 + C31731 + C31731 + C31316 * C501 + C31320 * C2000 +
             C31732 + C31732 + C48075 * C2012) *
                C4753 +
            (C31318 * C1282 + C32670 + C32670 + C31316 * C1300 +
             C31320 * C2400 + C32669 + C32669 + C48075 * C2406) *
                C48073) *
               C47716 * C48058) *
              C47767 * C286 +
          (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) * C47716 *
               C48084 -
           ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) * C47716 *
               C48095 -
           ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) * C47716 *
               C48058) *
              C47767 * C287 +
          (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) * C47716 *
               C48095 -
           ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) * C47716 *
               C48084 +
           ((C31778 + C31777) * C4753 +
            (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
             C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                C48073) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 + C31320 * C480 +
             C31324 + C31324 + C48075 * C500) *
                C4753 +
            (C37233 + C37234) * C48073) *
               C47716 * C47785 * C1072 -
           ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) * C47716 *
               C47785 * C1073 +
           ((C37236 + C37235) * C4753 +
            (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
             C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                C48073) *
               C47716 * C47785 * C48055) *
              C48091 +
          (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) * C47716 *
               C47785 * C1073 -
           ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) * C47716 *
               C47785 * C1072 -
           ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) * C47716 *
               C47785 * C48055) *
              C48078 +
          (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) * C47716 *
               C47785 * C1072 -
           ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) * C47716 *
               C47785 * C1073 +
           ((C31576 + C31575) * C4753 +
            (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
             C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                C48073) *
               C47716 * C47785 * C48055) *
              C48049)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31318 * C115 + C31323 + C31323 + C31316 * C129 + C31320 * C480 +
            C31324 + C31324 + C48075 * C500) *
               C4753 +
           (C37233 + C37234) * C48073) *
              C47716 * C47785 * C1140 -
          ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) * C47716 *
              C47785 * C1141 +
          ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) * C47716 *
              C47785 * C1142 -
          ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) * C47716 *
              C47785 * C1143 +
          ((C38096 + C38095) * C4753 +
           (C31318 * C5778 + C38083 + C38083 + C31316 * C5782 +
            C31320 * C22795 + C38084 + C38084 + C48075 * C22797) *
               C48073) *
              C47716 * C47785 * C1144) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 + C31320 * C480 +
             C31324 + C31324 + C48075 * C500) *
                C4753 +
            (C37233 + C37234) * C48073) *
               C47716 * C48095 -
           ((C37845 + C37846) * C48073 +
            (C31320 * C481 + C31729 + C31729 + C48075 * C501 + C31318 * C480 +
             C31730 + C31730 + C31316 * C500) *
                C4753) *
               C47716 * C48084 +
           ((C31318 * C481 + C31731 + C31731 + C31316 * C501 + C31320 * C2000 +
             C31732 + C31732 + C48075 * C2012) *
                C4753 +
            (C38269 + C38270) * C48073) *
               C47716 * C48058) *
              C1072 +
          (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) * C47716 *
               C48084 -
           ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) * C47716 *
               C48095 -
           ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) * C47716 *
               C48058) *
              C1073 +
          (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) * C47716 *
               C48095 -
           ((C31320 * C5947 + C33158 + C33158 + C48075 * C5951 +
             C31318 * C1696 + C33157 + C33157 + C31316 * C1702) *
                C48073 +
            (C38272 + C38271) * C4753) *
               C47716 * C48084 +
           ((C38274 + C38273) * C4753 +
            (C31318 * C5947 + C38255 + C38255 + C31316 * C5951 +
             C31320 * C23432 + C38256 + C38256 + C48075 * C23434) *
                C48073) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 + C31320 * C480 +
             C31324 + C31324 + C48075 * C500) *
                C4753 +
            (C37233 + C37234) * C48073) *
               C47716 * C1818 -
           ((C37845 + C37846) * C48073 +
            (C31320 * C481 + C31729 + C31729 + C48075 * C501 + C31318 * C480 +
             C31730 + C31730 + C31316 * C500) *
                C4753) *
               C47716 * C1819 +
           ((C31318 * C481 + C31731 + C31731 + C31316 * C501 + C31320 * C2000 +
             C31732 + C31732 + C48075 * C2012) *
                C4753 +
            (C38269 + C38270) * C48073) *
               C47716 * C48058) *
              C47767 * C48091 +
          (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) * C47716 *
               C1819 -
           ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) * C47716 *
               C1818 -
           ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) * C47716 *
               C48058) *
              C47767 * C48078 +
          (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) * C47716 *
               C1818 -
           ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) * C47716 *
               C1819 +
           ((C31778 + C31777) * C4753 +
            (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
             C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                C48073) *
               C47716 * C48058) *
              C47767 * C48049)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 + C31320 * C480 +
             C31324 + C31324 + C48075 * C500) *
                C4753 +
            (C37233 + C37234) * C48073) *
               C47716 * C1818 -
           ((C37845 + C37846) * C48073 +
            (C31320 * C481 + C31729 + C31729 + C48075 * C501 + C31318 * C480 +
             C31730 + C31730 + C31316 * C500) *
                C4753) *
               C47716 * C1819 +
           ((C31318 * C481 + C31731 + C31731 + C31316 * C501 + C31320 * C2000 +
             C31732 + C31732 + C48075 * C2012) *
                C4753 +
            (C38269 + C38270) * C48073) *
               C47716 * C48058) *
              C48094 +
          (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) * C47716 *
               C1819 -
           ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) * C47716 *
               C1818 -
           ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) * C47716 *
               C48058) *
              C48082 +
          (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) * C47716 *
               C1818 -
           ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) * C47716 *
               C1819 +
           ((C38274 + C38273) * C4753 +
            (C31318 * C5947 + C38255 + C38255 + C31316 * C5951 +
             C31320 * C23432 + C38256 + C38256 + C48075 * C23434) *
                C48073) *
               C47716 * C48058) *
              C48055) *
         C47739) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31318 * C115 + C31323 + C31323 + C31316 * C129 + C31320 * C480 +
            C31324 + C31324 + C48075 * C500) *
               C4753 +
           (C37233 + C37234) * C48073) *
              C47716 * C1993 -
          ((C37845 + C37846) * C48073 +
           (C31320 * C481 + C31729 + C31729 + C48075 * C501 + C31318 * C480 +
            C31730 + C31730 + C31316 * C500) *
               C4753) *
              C47716 * C1994 +
          ((C31318 * C481 + C31731 + C31731 + C31316 * C501 + C31320 * C2000 +
            C31732 + C31732 + C48075 * C2012) *
               C4753 +
           (C38269 + C38270) * C48073) *
              C47716 * C1995 -
          ((C31320 * C6825 + C34022 + C34022 + C48075 * C6829 + C31318 * C2400 +
            C34021 + C34021 + C31316 * C2406) *
               C48073 +
           (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 + C31318 * C2000 +
            C33538 + C33538 + C31316 * C2012) *
               C4753) *
              C47716 * C1996 +
          ((C31318 * C2001 + C33539 + C33539 + C31316 * C2013 +
            C31320 * C12573 + C33540 + C33540 + C48075 * C12577) *
               C4753 +
           (C31318 * C6825 + C39115 + C39115 + C31316 * C6829 +
            C31320 * C27799 + C39116 + C39116 + C48075 * C27801) *
               C48073) *
              C47716 * C1997) *
         C47767 * C47739) /
            (p * q * std::sqrt(p + q));
    d2ee[188] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C48024 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C1072 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C48024) *
                        C1073 +
                    (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                         C47716 * C48024 -
                     ((C31320 * C5947 + C33158 + C33158 + C48075 * C5951 +
                       C31318 * C1696 + C33157 + C33157 + C31316 * C1702) *
                          C48073 +
                      (C38272 + C38271) * C4753) *
                         C47716 * C47872) *
                        C48055) *
                       C48009 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C48024) *
                        C1072 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C48024 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C1073 +
                    (((C33026 + C33025) * C4753 +
                      (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                       C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                         C47716 * C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48024 -
                    ((C31320 * C1282 + C32258 + C32258 + C48075 * C1300 +
                      C31318 * C924 + C32257 + C32257 + C31316 * C934) *
                         C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C47767 * C654 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C47872 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C48024) *
                       C47767 * C655 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C48024 -
                    ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                        C47716 * C47872) *
                       C47767 * C656 +
                   (((C32062 + C32061) * C4753 +
                     (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                      C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C2282 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C2283 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C2284 -
                    ((C31320 * C6825 + C34022 + C34022 + C48075 * C6829 +
                      C31318 * C2400 + C34021 + C34021 + C31316 * C2406) *
                         C48073 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C4753) *
                        C47716 * C48071) *
                       C47767 * C48009 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C2283 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C2282 -
                    ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                        C47716 * C2284 +
                    ((C33890 + C33889) * C4753 +
                     (C31318 * C2401 + C34023 + C34023 + C31316 * C2407 +
                      C31320 * C6826 + C34024 + C34024 + C48075 * C6830) *
                         C48073) *
                        C47716 * C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[189] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C48082 +
                    ((C37236 + C37235) * C4753 +
                     (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
                      C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C286 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C48082 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C48094 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48055) *
                       C287 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C48082 +
                    ((C31576 + C31575) * C4753 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C4753 +
                    (C31318 * C291 + C31528 + C31528 + C31316 * C311 +
                     C31320 * C924 + C31527 + C31527 + C48075 * C934) *
                        C48073) *
                       C47716 * C47785 * C47767 * C108 -
                   ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                       C47716 * C47785 * C47767 * C109 +
                   ((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                       C47716 * C47785 * C47767 * C110 -
                   ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                       C47716 * C47785 * C47767 * C111 +
                   ((C31374 + C31373) * C4753 +
                    (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                     C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                        C48073) *
                       C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C1073 +
                    ((C37236 + C37235) * C4753 +
                     (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
                      C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48091 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C1073 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C1072 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48055) *
                       C48078 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C1073 +
                    ((C31576 + C31575) * C4753 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C4753 +
                    (C37233 + C37234) * C48073) *
                       C47716 * C47785 * C1140 -
                   ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                       C47716 * C47785 * C1141 +
                   ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                       C47716 * C47785 * C1142 -
                   ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                       C47716 * C47785 * C1143 +
                   ((C38096 + C38095) * C4753 +
                    (C31318 * C5778 + C38083 + C38083 + C31316 * C5782 +
                     C31320 * C22795 + C38084 + C38084 + C48075 * C22797) *
                        C48073) *
                       C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C1818 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C1819 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C48058) *
                       C47767 * C48091 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C1819 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C1818 -
                    ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                        C47716 * C48058) *
                       C47767 * C48078 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C1818 -
                    ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                        C47716 * C1819 +
                    ((C31778 + C31777) * C4753 +
                     (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
                      C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                         C48073) *
                        C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C1818 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C1819 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C48058) *
                       C48094 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C1819 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C1818 -
                    ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                        C47716 * C48058) *
                       C48082 +
                   (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C1818 -
                    ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                        C47716 * C1819 +
                    ((C38274 + C38273) * C4753 +
                     (C31318 * C5947 + C38255 + C38255 + C31316 * C5951 +
                      C31320 * C23432 + C38256 + C38256 + C48075 * C23434) *
                         C48073) *
                        C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C3272 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C48023 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C3272) *
                        C47830) *
                       C47744 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C3272) *
                        C48023 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C3272 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47830) *
                       C47753 +
                   ((((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                         C47716 * C3272 -
                     ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                         C47716 * C47872) *
                        C48023 +
                    (((C32284 + C32283) * C4753 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                         C47716 * C3272) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C47868 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47875 +
                     ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                       C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                          C4753 +
                      (C38269 + C38270) * C48073) *
                         C47716 * C3780) *
                        C48023 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47875 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C47868 -
                     ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                         C47716 * C3780) *
                        C47830) *
                       C2618 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47875 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C47868 -
                     ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                         C47716 * C3780) *
                        C48023 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C47868 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47875 +
                     ((C33748 + C33747) * C4753 +
                      (C31318 * C1287 + C32677 + C32677 + C31316 * C1305 +
                       C31320 * C7297 + C32678 + C32678 + C48075 * C7301) *
                          C48073) *
                         C47716 * C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[192] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C3272 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C48094 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C3272) *
                        C48082 +
                    (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                         C47716 * C3272 -
                     ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                         C47716 * C47872) *
                        C48055) *
                       C2618 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C3272) *
                        C48094 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C3272 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C48082 +
                    (((C33026 + C33025) * C4753 +
                      (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                       C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                         C47716 * C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C3272 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C47767 * C48100 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C47872 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C3272) *
                       C47767 * C48093 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C3272 -
                    ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                        C47716 * C47872) *
                       C47767 * C48080 +
                   (((C32062 + C32061) * C4753 +
                     (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                      C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48102 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C48099 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C48090 -
                    ((C39581 + C39582) * C48073 +
                     (C31320 * C2001 + C33537 + C33537 + C48075 * C2013 +
                      C31318 * C2000 + C33538 + C33538 + C31316 * C2012) *
                         C4753) *
                        C47716 * C48071) *
                       C47767 * C2618 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C48099 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C48102 -
                    ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                        C47716 * C48090 +
                    ((C33890 + C33889) * C4753 +
                     (C31318 * C2401 + C34023 + C34023 + C31316 * C2407 +
                      C31320 * C6826 + C34024 + C34024 + C48075 * C6830) *
                         C48073) *
                        C47716 * C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[193] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47868 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47875 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C3780) *
                       C47767 * C47744 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C47875 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47868 -
                    ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                        C47716 * C3780) *
                       C47767 * C47753 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47868 -
                    ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                        C47716 * C47875 +
                    ((C31778 + C31777) * C4753 +
                     (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
                      C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                         C48073) *
                        C47716 * C3780) *
                       C47767 * C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[194] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C3272 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C47767 * C48100 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C47872 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C3272) *
                       C47767 * C48093 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C3272 -
                    ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                        C47716 * C47872) *
                       C47767 * C48080 +
                   (((C32062 + C32061) * C4753 +
                     (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                      C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C3272 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C48094 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C3272) *
                        C48082 +
                    (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                         C47716 * C3272 -
                     ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                         C47716 * C47872) *
                        C48055) *
                       C2618 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C3272) *
                        C48094 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C3272 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C48082 +
                    (((C33026 + C33025) * C4753 +
                      (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                       C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                         C47716 * C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C47830) *
                       C654 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C48023) *
                       C655 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C48023 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C47830) *
                       C656 +
                   (((C31920 + C31919) * C4753 +
                     (C31318 * C296 + C31551 + C31551 + C31316 * C316 +
                      C31320 * C1582 + C31552 + C31552 + C48075 * C1584) *
                         C48073) *
                        C47716 * C47785 * C47830 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C1414 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C1415 +
                    ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C47785 * C1416 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C47785 * C48065) *
                       C48009 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C1415 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C1414 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C1416 +
                    ((C32820 + C32819) * C4753 +
                     (C31318 * C1150 + C32519 + C32519 + C31316 * C1162 +
                      C31320 * C6439 + C32520 + C32520 + C48075 * C6443) *
                         C48073) *
                        C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C48024 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C48023 +
                    (((C37846 + C37845) * C4753 +
                      (C31318 * C1285 + C32674 + C32674 + C31316 * C1303 +
                       C31320 * C1286 + C32673 + C32673 + C48075 * C1304) *
                          C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C48024) *
                        C47830) *
                       C286 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C48024) *
                        C48023 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C48024 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C47830) *
                       C287 +
                   ((((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                         C47716 * C48024 -
                     ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                         C47716 * C47872) *
                        C48023 +
                    (((C32284 + C32283) * C4753 +
                      (C31318 * C1283 + C33019 + C33019 + C31316 * C1301 +
                       C31320 * C1288 + C33020 + C33020 + C48075 * C1306) *
                          C48073) *
                         C47716 * C47872 -
                     ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                         C47716 * C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48024 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C1414 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C47872 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C48024) *
                       C1415 +
                   (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C48024 -
                    ((C38739 + C38740) * C48073 + (C38272 + C38271) * C4753) *
                        C47716 * C47872) *
                       C1416 +
                   (((C38740 + C38739) * C4753 +
                     (C31318 * C6438 + C38733 + C38733 + C31316 * C6442 +
                      C31320 * C22444 + C38734 + C38734 + C48075 * C22446) *
                         C48073) *
                        C47716 * C47872 -
                    ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                        C47716 * C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C48082 +
                    ((C37236 + C37235) * C4753 +
                     (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
                      C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C286 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C48082 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C48094 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48055) *
                       C287 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C48082 +
                    ((C31576 + C31575) * C4753 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C4753 +
                    (C31318 * C291 + C31528 + C31528 + C31316 * C311 +
                     C31320 * C924 + C31527 + C31527 + C48075 * C934) *
                        C48073) *
                       C47716 * C47785 * C47767 * C108 -
                   ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                       C47716 * C47785 * C47767 * C109 +
                   ((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                       C47716 * C47785 * C47767 * C110 -
                   ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                       C47716 * C47785 * C47767 * C111 +
                   ((C31374 + C31373) * C4753 +
                    (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                     C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                        C48073) *
                       C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48095 -
                    ((C31320 * C1282 + C32258 + C32258 + C48075 * C1300 +
                      C31318 * C924 + C32257 + C32257 + C31316 * C934) *
                         C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C48084 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C31318 * C1282 + C32670 + C32670 + C31316 * C1300 +
                      C31320 * C2400 + C32669 + C32669 + C48075 * C2406) *
                         C48073) *
                        C47716 * C48058) *
                       C47767 * C286 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C48084 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C48095 -
                    ((C33747 + C33748) * C48073 + (C31774 + C31773) * C4753) *
                        C47716 * C48058) *
                       C47767 * C287 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C48095 -
                    ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                        C47716 * C48084 +
                    ((C31778 + C31777) * C4753 +
                     (C31318 * C1280 + C33741 + C33741 + C31316 * C1298 +
                      C31320 * C2402 + C33742 + C33742 + C48075 * C2408) *
                         C48073) *
                        C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C1073 +
                    ((C37236 + C37235) * C4753 +
                     (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
                      C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48091 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C1073 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C1072 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48055) *
                       C48078 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C1073 +
                    ((C31576 + C31575) * C4753 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C4753 +
                    (C37233 + C37234) * C48073) *
                       C47716 * C47785 * C1140 -
                   ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                       C47716 * C47785 * C1141 +
                   ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                       C47716 * C47785 * C1142 -
                   ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                       C47716 * C47785 * C1143 +
                   ((C38096 + C38095) * C4753 +
                    (C31318 * C5778 + C38083 + C38083 + C31316 * C5782 +
                     C31320 * C22795 + C38084 + C38084 + C48075 * C22797) *
                        C48073) *
                       C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48095 -
                    ((C37845 + C37846) * C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C48084 +
                    ((C31318 * C481 + C31731 + C31731 + C31316 * C501 +
                      C31320 * C2000 + C31732 + C31732 + C48075 * C2012) *
                         C4753 +
                     (C38269 + C38270) * C48073) *
                        C47716 * C48058) *
                       C1072 +
                   (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                        C47716 * C48084 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C48095 -
                    ((C38273 + C38274) * C48073 + (C38270 + C38269) * C4753) *
                        C47716 * C48058) *
                       C1073 +
                   (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                        C47716 * C48095 -
                    ((C31320 * C5947 + C33158 + C33158 + C48075 * C5951 +
                      C31318 * C1696 + C33157 + C33157 + C31316 * C1702) *
                         C48073 +
                     (C38272 + C38271) * C4753) *
                        C47716 * C48084 +
                    ((C38274 + C38273) * C4753 +
                     (C31318 * C5947 + C38255 + C38255 + C31316 * C5951 +
                      C31320 * C23432 + C38256 + C38256 + C48075 * C23434) *
                         C48073) *
                        C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C48024 -
                    ((C31320 * C1282 + C32258 + C32258 + C48075 * C1300 +
                      C31318 * C924 + C32257 + C32257 + C31316 * C934) *
                         C48073 +
                     (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                      C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                         C4753) *
                        C47716 * C47872) *
                       C47767 * C654 +
                   (((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                        C47716 * C47872 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C48024) *
                       C47767 * C655 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C48024 -
                    ((C32283 + C32284) * C48073 + (C31776 + C31775) * C4753) *
                        C47716 * C47872) *
                       C47767 * C656 +
                   (((C32062 + C32061) * C4753 +
                     (C31318 * C927 + C32271 + C32271 + C31316 * C937 +
                      C31320 * C2168 + C32272 + C32272 + C48075 * C2170) *
                         C48073) *
                        C47716 * C47872 -
                    ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                        C47716 * C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                       C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                          C4753 +
                      (C37233 + C37234) * C48073) *
                         C47716 * C48024 -
                     ((C37845 + C37846) * C48073 +
                      (C31320 * C481 + C31729 + C31729 + C48075 * C501 +
                       C31318 * C480 + C31730 + C31730 + C31316 * C500) *
                          C4753) *
                         C47716 * C47872) *
                        C1072 +
                    (((C37846 + C37845) * C4753 + (C38271 + C38272) * C48073) *
                         C47716 * C47872 -
                     ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                         C47716 * C48024) *
                        C1073 +
                    (((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                         C47716 * C48024 -
                     ((C31320 * C5947 + C33158 + C33158 + C48075 * C5951 +
                       C31318 * C1696 + C33157 + C33157 + C31316 * C1702) *
                          C48073 +
                      (C38272 + C38271) * C4753) *
                         C47716 * C47872) *
                        C48055) *
                       C48009 +
                   ((((C31772 + C31771) * C4753 + (C32281 + C32282) * C48073) *
                         C47716 * C47872 -
                     ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                         C47716 * C48024) *
                        C1072 +
                    (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                         C47716 * C48024 -
                     ((C33025 + C33026) * C48073 + (C32282 + C32281) * C4753) *
                         C47716 * C47872) *
                        C1073 +
                    (((C33026 + C33025) * C4753 +
                      (C31318 * C1697 + C33159 + C33159 + C31316 * C1703 +
                       C31320 * C5948 + C33160 + C33160 + C48075 * C5952) *
                          C48073) *
                         C47716 * C47872 -
                     ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                         C47716 * C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C4753 +
                    (C31318 * C291 + C31528 + C31528 + C31316 * C311 +
                     C31320 * C924 + C31527 + C31527 + C48075 * C934) *
                        C48073) *
                       C47716 * C47785 * C47767 * C108 -
                   ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                       C47716 * C47785 * C47767 * C109 +
                   ((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                       C47716 * C47785 * C47767 * C110 -
                   ((C31919 + C31920) * C48073 + (C31372 + C31371) * C4753) *
                       C47716 * C47785 * C47767 * C111 +
                   ((C31374 + C31373) * C4753 +
                    (C31318 * C297 + C31913 + C31913 + C31316 * C317 +
                     C31320 * C928 + C31914 + C31914 + C48075 * C938) *
                        C48073) *
                       C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C48082 +
                    ((C37236 + C37235) * C4753 +
                     (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
                      C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C286 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C48082 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C48094 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48055) *
                       C287 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C48094 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C48082 +
                    ((C31576 + C31575) * C4753 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                      C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                         C4753 +
                     (C37233 + C37234) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                        C47716 * C47785 * C1073 +
                    ((C37236 + C37235) * C4753 +
                     (C31318 * C1148 + C32516 + C32516 + C31316 * C1160 +
                      C31320 * C1696 + C32515 + C32515 + C48075 * C1702) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48091 +
                   (((C31570 + C31569) * C4753 + (C31571 + C31572) * C48073) *
                        C47716 * C47785 * C1073 -
                    ((C31569 + C31570) * C48073 + (C31368 + C31367) * C4753) *
                        C47716 * C47785 * C1072 -
                    ((C32819 + C32820) * C48073 + (C31572 + C31571) * C4753) *
                        C47716 * C47785 * C48055) *
                       C48078 +
                   (((C31370 + C31369) * C4753 + (C31573 + C31574) * C48073) *
                        C47716 * C47785 * C1072 -
                    ((C31575 + C31576) * C48073 + (C31574 + C31573) * C4753) *
                        C47716 * C47785 * C1073 +
                    ((C31576 + C31575) * C4753 +
                     (C31318 * C1146 + C32813 + C32813 + C31316 * C1158 +
                      C31320 * C1698 + C32814 + C32814 + C48075 * C1704) *
                         C48073) *
                        C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C31318 * C115 + C31323 + C31323 + C31316 * C129 +
                     C31320 * C480 + C31324 + C31324 + C48075 * C500) *
                        C4753 +
                    (C37233 + C37234) * C48073) *
                       C47716 * C47785 * C1140 -
                   ((C37235 + C37236) * C48073 + (C37234 + C37233) * C4753) *
                       C47716 * C47785 * C1141 +
                   ((C37236 + C37235) * C4753 + (C38093 + C38094) * C48073) *
                       C47716 * C47785 * C1142 -
                   ((C38095 + C38096) * C48073 + (C38094 + C38093) * C4753) *
                       C47716 * C47785 * C1143 +
                   ((C38096 + C38095) * C4753 +
                    (C31318 * C5778 + C38083 + C38083 + C31316 * C5782 +
                     C31320 * C22795 + C38084 + C38084 + C48075 * C22797) *
                        C48073) *
                       C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C47826 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C47833 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C2878) *
                       C47744 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C47833 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C47826 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C2878) *
                       C47753 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C47826 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C47833 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C2878) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C47826 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C48024) *
                        C47833 +
                    ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                      C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                      C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                      C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                      C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                         C47971 * C47716 * C47872) *
                        C2878) *
                       C2618 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C48024) *
                        C47826 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47833 +
                    ((C42611 * C1284 + C43790 + C43790 + C42608 * C1302 +
                      C42613 * C1287 + C43791 + C43791 + C42609 * C1305 +
                      C42615 * C7297 + C43792 + C43792 + C42610 * C7301) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                      C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                      C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                         C47971 * C47716 * C48024) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C48101 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C48097 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48087 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C47785 * C48065) *
                       C2618 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C48097 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C48101 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48087 +
                    (C42611 * C1147 + C43641 + C43641 + C42608 * C1159 +
                     C42613 * C1697 + C43642 + C43642 + C42609 * C1703 +
                     C42615 * C5948 + C43643 + C43643 + C42610 * C5952) *
                        C47971 * C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C2510 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C47830) *
                       C48100 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C2510) *
                       C48093 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C2510 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C47830) *
                       C48080 +
                   ((C42611 * C295 + C42987 + C42987 + C42608 * C315 +
                     C42613 * C927 + C42988 + C42988 + C42609 * C937 +
                     C42615 * C2168 + C42989 + C42989 + C42610 * C2170) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C48095 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C48084 +
                     (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                      C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                      C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                         C47971 * C47716 * C48058) *
                        C2510 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C48084 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C48095 -
                     (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                      C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                      C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                         C47971 * C47716 * C48058) *
                        C47830) *
                       C2618 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C48084 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C48095 -
                     (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                      C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                      C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                         C47971 * C47716 * C48058) *
                        C2510 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C48095 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C48084 +
                     (C42611 * C1281 + C44331 + C44331 + C42608 * C1299 +
                      C42613 * C2401 + C44332 + C44332 + C42609 * C2407 +
                      C42615 * C6826 + C44333 + C44333 + C42610 * C6830) *
                         C47971 * C47716 * C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C2510 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C48024) *
                        C47830) *
                       C47744 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C48024) *
                        C2510 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47830) *
                       C47753 +
                   (((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                      C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                      C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                      C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                      C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                         C47971 * C47716 * C47872) *
                        C2510 +
                    ((C42611 * C926 + C43243 + C43243 + C42608 * C936 +
                      C42613 * C1280 + C43244 + C43244 + C42609 * C1298 +
                      C42615 * C2402 + C43245 + C43245 + C42610 * C2408) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                      C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                      C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                         C47971 * C47716 * C48024) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C2510 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C47830) *
                       C48100 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C2510) *
                       C48093 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C2510 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C47830) *
                       C48080 +
                   ((C42611 * C295 + C42987 + C42987 + C42608 * C315 +
                     C42613 * C927 + C42988 + C42988 + C42609 * C937 +
                     C42615 * C2168 + C42989 + C42989 + C42610 * C2170) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C47785 * C2510) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C48101 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C48097 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48087 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C47785 * C48065) *
                       C2618 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C48097 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C48101 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48087 +
                    (C42611 * C1147 + C43641 + C43641 + C42608 * C1159 +
                     C42613 * C1697 + C43642 + C43642 + C42609 * C1703 +
                     C42615 * C5948 + C43643 + C43643 + C42610 * C5952) *
                        C47971 * C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C47826 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C3272) *
                        C47833 +
                    ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                      C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                      C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                      C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                      C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                         C47971 * C47716 * C47872) *
                        C2878) *
                       C48009 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C3272) *
                        C47826 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47833 +
                    ((C42611 * C1284 + C43790 + C43790 + C42608 * C1302 +
                      C42613 * C1287 + C43791 + C43791 + C42609 * C1305 +
                      C42615 * C7297 + C43792 + C43792 + C42610 * C7301) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                      C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                      C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                         C47971 * C47716 * C3272) *
                        C2878) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47868 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47875 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C3780) *
                       C47826 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C47875 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47868 -
                    (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                     C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                     C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                        C47971 * C47716 * C3780) *
                       C47833 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47868 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C47875 +
                    (C42611 * C1286 + C43540 + C43540 + C42608 * C1304 +
                     C42613 * C7296 + C43541 + C43541 + C42609 * C7300 +
                     C42615 * C23086 + C43542 + C43542 + C42610 * C23088) *
                        C47971 * C47716 * C3780) *
                       C2878) *
                  C47739) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C48101 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C3272) *
                       C48097 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C47872) *
                       C48087 +
                   ((C42611 * C1696 + C43891 + C43891 + C42608 * C1702 +
                     C42613 * C5947 + C43892 + C43892 + C42609 * C5951 +
                     C42615 * C23432 + C43893 + C43893 + C42610 * C23434) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C2510 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C3272) *
                        C47830) *
                       C48091 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C3272) *
                        C2510 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47830) *
                       C48078 +
                   (((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                      C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                      C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                      C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                      C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                         C47971 * C47716 * C47872) *
                        C2510 +
                    ((C42611 * C926 + C43243 + C43243 + C42608 * C936 +
                      C42613 * C1280 + C43244 + C43244 + C42609 * C1298 +
                      C42615 * C2402 + C43245 + C43245 + C42610 * C2408) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                      C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                      C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                         C47971 * C47716 * C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48102 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C48099 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48090 -
                    (C42615 * C12573 + C44179 + C44179 + C42610 * C12577 +
                     C42613 * C2001 + C44180 + C44180 + C42609 * C2013 +
                     C42611 * C2000 + C44181 + C44181 + C42608 * C2012) *
                        C47971 * C47716 * C48071) *
                       C2510 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C48099 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C48102 -
                    (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                     C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                     C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                        C47971 * C47716 * C48090 +
                    (C42611 * C2400 + C44533 + C44533 + C42608 * C2406 +
                     C42613 * C6825 + C44534 + C44534 + C42609 * C6829 +
                     C42615 * C27799 + C44535 + C44535 + C42610 * C27801) *
                        C47971 * C47716 * C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47875 +
                     (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                      C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                      C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                         C47971 * C47716 * C3780) *
                        C2510 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47875 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                      C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                      C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                         C47971 * C47716 * C3780) *
                        C47830) *
                       C48009 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47875 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                      C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                      C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                         C47971 * C47716 * C3780) *
                        C2510 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47875 +
                     (C42611 * C1281 + C44331 + C44331 + C42608 * C1299 +
                      C42613 * C2401 + C44332 + C44332 + C42609 * C2407 +
                      C42615 * C6826 + C44333 + C44333 + C42610 * C6830) *
                         C47971 * C47716 * C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C2510 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C3272) *
                        C47830) *
                       C48091 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C3272) *
                        C2510 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47830) *
                       C48078 +
                   (((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                      C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                      C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                      C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                      C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                         C47971 * C47716 * C47872) *
                        C2510 +
                    ((C42611 * C926 + C43243 + C43243 + C42608 * C936 +
                      C42613 * C1280 + C43244 + C43244 + C42609 * C1298 +
                      C42615 * C2402 + C43245 + C43245 + C42610 * C2408) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                      C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                      C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                         C47971 * C47716 * C3272) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C48101 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C3272) *
                       C48097 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C47872) *
                       C48087 +
                   ((C42611 * C1696 + C43891 + C43891 + C42608 * C1702 +
                     C42613 * C5947 + C43892 + C43892 + C42609 * C5951 +
                     C42615 * C23432 + C43893 + C43893 + C42610 * C23434) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C3272) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C1414 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C1415 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C1416 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C47785 * C48065) *
                       C48009 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C1415 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C1414 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C1416 +
                    (C42611 * C1147 + C43641 + C43641 + C42608 * C1159 +
                     C42613 * C1697 + C43642 + C43642 + C42609 * C1703 +
                     C42615 * C5948 + C43643 + C43643 + C42610 * C5952) *
                        C47971 * C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C48023 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C47830) *
                       C654 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C48023) *
                       C655 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C48023 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C47830) *
                       C656 +
                   ((C42611 * C295 + C42987 + C42987 + C42608 * C315 +
                     C42613 * C927 + C42988 + C42988 + C42609 * C937 +
                     C42615 * C2168 + C42989 + C42989 + C42610 * C2170) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C1818 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C1819 +
                     (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                      C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                      C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                         C47971 * C47716 * C48058) *
                        C48023 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C1819 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C1818 -
                     (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                      C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                      C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                         C47971 * C47716 * C48058) *
                        C47830) *
                       C48009 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C1819 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C1818 -
                     (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                      C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                      C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                         C47971 * C47716 * C48058) *
                        C48023 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C1818 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C1819 +
                     (C42611 * C1281 + C44331 + C44331 + C42608 * C1299 +
                      C42613 * C2401 + C44332 + C44332 + C42609 * C2407 +
                      C42615 * C6826 + C44333 + C44333 + C42610 * C6830) *
                         C47971 * C47716 * C48058) *
                        C47830) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C1414 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C48024) *
                       C1415 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C47872) *
                       C1416 +
                   ((C42611 * C1696 + C43891 + C43891 + C42608 * C1702 +
                     C42613 * C5947 + C43892 + C43892 + C42609 * C5951 +
                     C42615 * C23432 + C43893 + C43893 + C42610 * C23434) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C48023 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C48024) *
                        C47830) *
                       C286 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C48024) *
                        C48023 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47830) *
                       C287 +
                   (((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                      C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                      C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                      C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                      C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                         C47971 * C47716 * C47872) *
                        C48023 +
                    ((C42611 * C926 + C43243 + C43243 + C42608 * C936 +
                      C42613 * C1280 + C43244 + C43244 + C42609 * C1298 +
                      C42615 * C2402 + C43245 + C43245 + C42610 * C2408) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                      C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                      C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                         C47971 * C47716 * C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C2282 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C2283 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C2284 -
                    (C42615 * C12573 + C44179 + C44179 + C42610 * C12577 +
                     C42613 * C2001 + C44180 + C44180 + C42609 * C2013 +
                     C42611 * C2000 + C44181 + C44181 + C42608 * C2012) *
                        C47971 * C47716 * C48071) *
                       C48023 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C2283 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C2282 -
                    (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                     C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                     C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                        C47971 * C47716 * C2284 +
                    (C42611 * C2400 + C44533 + C44533 + C42608 * C2406 +
                     C42613 * C6825 + C44534 + C44534 + C42609 * C6829 +
                     C42615 * C27799 + C44535 + C44535 + C42610 * C27801) *
                        C47971 * C47716 * C48071) *
                       C47830) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                        C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                        C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                           C47971 * C47716 * C47785 * C47767 * C108 -
                       (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                        C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                        C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                           C47971 * C47716 * C47785 * C47767 * C109 +
                       (C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                        C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                        C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                           C47971 * C47716 * C47785 * C47767 * C110 -
                       (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                        C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                        C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                           C47971 * C47716 * C47785 * C47767 * C111 +
                       (C42611 * C119 + C42630 + C42630 + C42608 * C133 +
                        C42613 * C486 + C42631 + C42631 + C42609 * C506 +
                        C42615 * C487 + C42632 + C42632 + C42610 * C507) *
                           C47971 * C47716 * C47785 * C47767 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                         C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                         C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                            C47971 * C47716 * C47785 * C48094 -
                        (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                         C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                         C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                            C47971 * C47716 * C47785 * C48082 +
                        (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                         C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                         C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                            C47971 * C47716 * C47785 * C48055) *
                           C286 +
                       ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                         C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                         C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                            C47971 * C47716 * C47785 * C48082 -
                        (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                         C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                         C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                            C47971 * C47716 * C47785 * C48094 -
                        (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                         C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                         C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                            C47971 * C47716 * C47785 * C48055) *
                           C287 +
                       ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                         C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                         C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                            C47971 * C47716 * C47785 * C48094 -
                        (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                         C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                         C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                            C47971 * C47716 * C47785 * C48082 +
                        (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                         C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                         C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                            C47971 * C47716 * C47785 * C48055) *
                           C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C47767 * C286 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C48084 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                     C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                     C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                        C47971 * C47716 * C48058) *
                       C47767 * C287 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C483 + C42886 + C42886 + C42608 * C503 +
                     C42613 * C1998 + C42887 + C42887 + C42609 * C2010 +
                     C42615 * C2003 + C42888 + C42888 + C42610 * C2015) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48091 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C1073 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48078 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C47785 * C1140 -
                   (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                    C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                    C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                       C47971 * C47716 * C47785 * C1141 +
                   (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                    C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                    C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                       C47971 * C47716 * C47785 * C1142 -
                   (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                    C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                    C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                       C47971 * C47716 * C47785 * C1143 +
                   (C42611 * C1149 + C43421 + C43421 + C42608 * C1161 +
                    C42613 * C6438 + C43422 + C43422 + C42609 * C6442 +
                    C42615 * C22444 + C43423 + C43423 + C42610 * C22446) *
                       C47971 * C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C1072 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C48084 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                     C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                     C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                        C47971 * C47716 * C48058) *
                       C1073 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C1286 + C43540 + C43540 + C42608 * C1304 +
                     C42613 * C7296 + C43541 + C43541 + C42609 * C7300 +
                     C42615 * C23086 + C43542 + C43542 + C42610 * C23088) *
                        C47971 * C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48091 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C1819 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                     C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                     C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48078 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C483 + C42886 + C42886 + C42608 * C503 +
                     C42613 * C1998 + C42887 + C42887 + C42609 * C2010 +
                     C42615 * C2003 + C42888 + C42888 + C42610 * C2015) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C48094 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C1819 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                     C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                     C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                        C47971 * C47716 * C48058) *
                       C48082 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C1286 + C43540 + C43540 + C42608 * C1304 +
                     C42613 * C7296 + C43541 + C43541 + C42609 * C7300 +
                     C42615 * C23086 + C43542 + C43542 + C42610 * C23088) *
                        C47971 * C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C1993 -
                   (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                    C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                    C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                       C47971 * C47716 * C1994 +
                   (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                    C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                    C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                       C47971 * C47716 * C1995 -
                   (C42615 * C12573 + C44179 + C44179 + C42610 * C12577 +
                    C42613 * C2001 + C44180 + C44180 + C42609 * C2013 +
                    C42611 * C2000 + C44181 + C44181 + C42608 * C2012) *
                       C47971 * C47716 * C1996 +
                   (C42611 * C2001 + C44182 + C44182 + C42608 * C2013 +
                    C42613 * C12573 + C44183 + C44183 + C42609 * C12577 +
                    C42615 * C44175 + C44184 + C44184 + C42610 * C44177) *
                       C47971 * C47716 * C1997) *
                  C47767 * C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C1072 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C48024) *
                        C1073 +
                    ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                      C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                      C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                      C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                      C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                         C47971 * C47716 * C47872) *
                        C48055) *
                       C48009 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C48024) *
                        C1072 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C1073 +
                    ((C42611 * C1284 + C43790 + C43790 + C42608 * C1302 +
                      C42613 * C1287 + C43791 + C43791 + C42609 * C1305 +
                      C42615 * C7297 + C43792 + C43792 + C42610 * C7301) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                      C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                      C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                         C47971 * C47716 * C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C47767 * C654 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C48024) *
                       C47767 * C655 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C47872) *
                       C47767 * C656 +
                   ((C42611 * C484 + C43088 + C43088 + C42608 * C504 +
                     C42613 * C485 + C43089 + C43089 + C42609 * C505 +
                     C42615 * C2286 + C43090 + C43090 + C42610 * C2288) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C2282 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C2283 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C2284 -
                    (C42615 * C12573 + C44179 + C44179 + C42610 * C12577 +
                     C42613 * C2001 + C44180 + C44180 + C42609 * C2013 +
                     C42611 * C2000 + C44181 + C44181 + C42608 * C2012) *
                        C47971 * C47716 * C48071) *
                       C47767 * C48009 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C2283 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C2282 -
                    (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                     C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                     C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                        C47971 * C47716 * C2284 +
                    (C42611 * C1999 + C44432 + C44432 + C42608 * C2011 +
                     C42613 * C2002 + C44433 + C44433 + C42609 * C2014 +
                     C42615 * C12574 + C44434 + C44434 + C42610 * C12578) *
                        C47971 * C47716 * C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C48082 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48055) *
                       C286 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C48082 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48055) *
                       C287 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C48082 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C47785 * C47767 * C108 -
                   (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                    C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                    C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                       C47971 * C47716 * C47785 * C47767 * C109 +
                   (C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                    C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                    C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                       C47971 * C47716 * C47785 * C47767 * C110 -
                   (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                    C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                    C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                       C47971 * C47716 * C47785 * C47767 * C111 +
                   (C42611 * C119 + C42630 + C42630 + C42608 * C133 +
                    C42613 * C486 + C42631 + C42631 + C42609 * C506 +
                    C42615 * C487 + C42632 + C42632 + C42610 * C507) *
                       C47971 * C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48091 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C1073 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48078 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C47785 * C1140 -
                   (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                    C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                    C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                       C47971 * C47716 * C47785 * C1141 +
                   (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                    C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                    C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                       C47971 * C47716 * C47785 * C1142 -
                   (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                    C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                    C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                       C47971 * C47716 * C47785 * C1143 +
                   (C42611 * C1149 + C43421 + C43421 + C42608 * C1161 +
                    C42613 * C6438 + C43422 + C43422 + C42609 * C6442 +
                    C42615 * C22444 + C43423 + C43423 + C42610 * C22446) *
                       C47971 * C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48091 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C1819 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                     C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                     C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48078 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C483 + C42886 + C42886 + C42608 * C503 +
                     C42613 * C1998 + C42887 + C42887 + C42609 * C2010 +
                     C42615 * C2003 + C42888 + C42888 + C42610 * C2015) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C48094 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C1819 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                     C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                     C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                        C47971 * C47716 * C48058) *
                       C48082 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C1818 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C1819 +
                    (C42611 * C1286 + C43540 + C43540 + C42608 * C1304 +
                     C42613 * C7296 + C43541 + C43541 + C42609 * C7300 +
                     C42615 * C23086 + C43542 + C43542 + C42610 * C23088) *
                        C47971 * C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C48023 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C3272) *
                        C47830) *
                       C47744 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C3272) *
                        C48023 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47830) *
                       C47753 +
                   (((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                      C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                      C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                      C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                      C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                         C47971 * C47716 * C47872) *
                        C48023 +
                    ((C42611 * C926 + C43243 + C43243 + C42608 * C936 +
                      C42613 * C1280 + C43244 + C43244 + C42609 * C1298 +
                      C42615 * C2402 + C43245 + C43245 + C42610 * C2408) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                      C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                      C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                         C47971 * C47716 * C3272) *
                        C47830) *
                       C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47875 +
                     (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                      C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                      C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                         C47971 * C47716 * C3780) *
                        C48023 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47875 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                      C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                      C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                         C47971 * C47716 * C3780) *
                        C47830) *
                       C2618 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47875 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                      C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                      C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                         C47971 * C47716 * C3780) *
                        C48023 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C47868 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47875 +
                     (C42611 * C1281 + C44331 + C44331 + C42608 * C1299 +
                      C42613 * C2401 + C44332 + C44332 + C42609 * C2407 +
                      C42615 * C6826 + C44333 + C44333 + C42610 * C6830) *
                         C47971 * C47716 * C3780) *
                        C47830) *
                       C47750)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C48094 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C3272) *
                        C48082 +
                    ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                      C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                      C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                      C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                      C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                         C47971 * C47716 * C47872) *
                        C48055) *
                       C2618 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C3272) *
                        C48094 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C48082 +
                    ((C42611 * C1284 + C43790 + C43790 + C42608 * C1302 +
                      C42613 * C1287 + C43791 + C43791 + C42609 * C1305 +
                      C42615 * C7297 + C43792 + C43792 + C42610 * C7301) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                      C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                      C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                         C47971 * C47716 * C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C47767 * C48100 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C3272) *
                       C47767 * C48093 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C47872) *
                       C47767 * C48080 +
                   ((C42611 * C484 + C43088 + C43088 + C42608 * C504 +
                     C42613 * C485 + C43089 + C43089 + C42609 * C505 +
                     C42615 * C2286 + C43090 + C43090 + C42610 * C2288) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48102 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C48099 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48090 -
                    (C42615 * C12573 + C44179 + C44179 + C42610 * C12577 +
                     C42613 * C2001 + C44180 + C44180 + C42609 * C2013 +
                     C42611 * C2000 + C44181 + C44181 + C42608 * C2012) *
                        C47971 * C47716 * C48071) *
                       C47767 * C2618 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C48099 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C48102 -
                    (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                     C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                     C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                        C47971 * C47716 * C48090 +
                    (C42611 * C1999 + C44432 + C44432 + C42608 * C2011 +
                     C42613 * C2002 + C44433 + C44433 + C42609 * C2014 +
                     C42615 * C12574 + C44434 + C44434 + C42610 * C12578) *
                        C47971 * C47716 * C48071) *
                       C47767 * C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47868 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47875 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C3780) *
                       C47767 * C47744 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C47875 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47868 -
                    (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                     C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                     C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                        C47971 * C47716 * C3780) *
                       C47767 * C47753 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47868 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C47875 +
                    (C42611 * C483 + C42886 + C42886 + C42608 * C503 +
                     C42613 * C1998 + C42887 + C42887 + C42609 * C2010 +
                     C42615 * C2003 + C42888 + C42888 + C42610 * C2015) *
                        C47971 * C47716 * C3780) *
                       C47767 * C2881)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C47767 * C48100 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C3272) *
                       C47767 * C48093 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C3272 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C47872) *
                       C47767 * C48080 +
                   ((C42611 * C484 + C43088 + C43088 + C42608 * C504 +
                     C42613 * C485 + C43089 + C43089 + C42609 * C505 +
                     C42615 * C2286 + C43090 + C43090 + C42610 * C2288) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C3272) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C48094 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C3272) *
                        C48082 +
                    ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                      C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                      C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                      C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                      C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                         C47971 * C47716 * C47872) *
                        C48055) *
                       C2618 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C3272) *
                        C48094 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C3272 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C48082 +
                    ((C42611 * C1284 + C43790 + C43790 + C42608 * C1302 +
                      C42613 * C1287 + C43791 + C43791 + C42609 * C1305 +
                      C42615 * C7297 + C43792 + C43792 + C42610 * C7301) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                      C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                      C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                         C47971 * C47716 * C3272) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C48023 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C47830) *
                       C654 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C48023) *
                       C655 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C48023 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C47830) *
                       C656 +
                   ((C42611 * C295 + C42987 + C42987 + C42608 * C315 +
                     C42613 * C927 + C42988 + C42988 + C42609 * C937 +
                     C42615 * C2168 + C42989 + C42989 + C42610 * C2170) *
                        C47971 * C47716 * C47785 * C47830 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C47785 * C48023) *
                       C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C1414 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C1415 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C1416 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C47785 * C48065) *
                       C48009 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C1415 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C1414 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C1416 +
                    (C42611 * C1147 + C43641 + C43641 + C42608 * C1159 +
                     C42613 * C1697 + C43642 + C43642 + C42609 * C1703 +
                     C42615 * C5948 + C43643 + C43643 + C42610 * C5952) *
                        C47971 * C47716 * C47785 * C48065) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C48023 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C48024) *
                        C47830) *
                       C286 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C48024) *
                        C48023 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C47830) *
                       C287 +
                   (((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                      C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                      C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                      C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                      C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                         C47971 * C47716 * C47872) *
                        C48023 +
                    ((C42611 * C926 + C43243 + C43243 + C42608 * C936 +
                      C42613 * C1280 + C43244 + C43244 + C42609 * C1298 +
                      C42615 * C2402 + C43245 + C43245 + C42610 * C2408) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                      C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                      C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                         C47971 * C47716 * C48024) *
                        C47830) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C1414 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C48024) *
                       C1415 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C47872) *
                       C1416 +
                   ((C42611 * C1696 + C43891 + C43891 + C42608 * C1702 +
                     C42613 * C5947 + C43892 + C43892 + C42609 * C5951 +
                     C42615 * C23432 + C43893 + C43893 + C42610 * C23434) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                     C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                     C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                        C47971 * C47716 * C48024) *
                       C48065) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C48082 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48055) *
                       C286 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C48082 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48055) *
                       C287 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C48082 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C47785 * C47767 * C108 -
                   (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                    C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                    C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                       C47971 * C47716 * C47785 * C47767 * C109 +
                   (C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                    C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                    C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                       C47971 * C47716 * C47785 * C47767 * C110 -
                   (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                    C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                    C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                       C47971 * C47716 * C47785 * C47767 * C111 +
                   (C42611 * C119 + C42630 + C42630 + C42608 * C133 +
                    C42613 * C486 + C42631 + C42631 + C42609 * C506 +
                    C42615 * C487 + C42632 + C42632 + C42610 * C507) *
                       C47971 * C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C47767 * C286 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C48084 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C2002 + C42880 + C42880 + C42610 * C2014 +
                     C42613 * C1999 + C42881 + C42881 + C42609 * C2011 +
                     C42611 * C482 + C42882 + C42882 + C42608 * C502) *
                        C47971 * C47716 * C48058) *
                       C47767 * C287 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C483 + C42886 + C42886 + C42608 * C503 +
                     C42613 * C1998 + C42887 + C42887 + C42609 * C2010 +
                     C42615 * C2003 + C42888 + C42888 + C42610 * C2015) *
                        C47971 * C47716 * C48058) *
                       C47767 * C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48091 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C1073 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48078 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C47785 * C1140 -
                   (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                    C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                    C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                       C47971 * C47716 * C47785 * C1141 +
                   (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                    C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                    C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                       C47971 * C47716 * C47785 * C1142 -
                   (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                    C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                    C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                       C47971 * C47716 * C47785 * C1143 +
                   (C42611 * C1149 + C43421 + C43421 + C42608 * C1161 +
                    C42613 * C6438 + C43422 + C43422 + C42609 * C6442 +
                    C42615 * C22444 + C43423 + C43423 + C42610 * C22446) *
                       C47971 * C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C481 + C42874 + C42874 + C42608 * C501 +
                     C42613 * C2000 + C42875 + C42875 + C42609 * C2012 +
                     C42615 * C2001 + C42876 + C42876 + C42610 * C2013) *
                        C47971 * C47716 * C48058) *
                       C1072 +
                   ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                     C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                     C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                        C47971 * C47716 * C48084 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C6825 + C43534 + C43534 + C42610 * C6829 +
                     C42613 * C2400 + C43535 + C43535 + C42609 * C2406 +
                     C42611 * C1282 + C43536 + C43536 + C42608 * C1300) *
                        C47971 * C47716 * C48058) *
                       C1073 +
                   ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C48095 -
                    (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                     C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                     C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                        C47971 * C47716 * C48084 +
                    (C42611 * C1286 + C43540 + C43540 + C42608 * C1304 +
                     C42613 * C7296 + C43541 + C43541 + C42609 * C7300 +
                     C42615 * C23086 + C43542 + C43542 + C42610 * C23088) *
                        C47971 * C47716 * C48058) *
                       C48055) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                     C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                     C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                        C47971 * C47716 * C47872) *
                       C47767 * C654 +
                   ((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                     C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                     C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C48024) *
                       C47767 * C655 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C48024 -
                    (C42615 * C1998 + C42883 + C42883 + C42610 * C2010 +
                     C42613 * C483 + C42884 + C42884 + C42609 * C503 +
                     C42611 * C478 + C42885 + C42885 + C42608 * C498) *
                        C47971 * C47716 * C47872) *
                       C47767 * C656 +
                   ((C42611 * C484 + C43088 + C43088 + C42608 * C504 +
                     C42613 * C485 + C43089 + C43089 + C42609 * C505 +
                     C42615 * C2286 + C43090 + C43090 + C42610 * C2288) *
                        C47971 * C47716 * C47872 -
                    (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                     C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                     C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                        C47971 * C47716 * C48024) *
                       C47767 * C48059)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                      C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                      C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2000 + C42871 + C42871 + C42610 * C2012 +
                      C42613 * C481 + C42872 + C42872 + C42609 * C501 +
                      C42611 * C480 + C42873 + C42873 + C42608 * C500) *
                         C47971 * C47716 * C47872) *
                        C1072 +
                    ((C42611 * C924 + C43237 + C43237 + C42608 * C934 +
                      C42613 * C1282 + C43238 + C43238 + C42609 * C1300 +
                      C42615 * C2400 + C43239 + C43239 + C42610 * C2406) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                      C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                      C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                         C47971 * C47716 * C48024) *
                        C1073 +
                    ((C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                      C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                      C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C7296 + C43537 + C43537 + C42610 * C7300 +
                      C42613 * C1286 + C43538 + C43538 + C42609 * C1304 +
                      C42611 * C1285 + C43539 + C43539 + C42608 * C1303) *
                         C47971 * C47716 * C47872) *
                        C48055) *
                       C48009 +
                   (((C42611 * C479 + C42877 + C42877 + C42608 * C499 +
                      C42613 * C482 + C42878 + C42878 + C42609 * C502 +
                      C42615 * C1999 + C42879 + C42879 + C42610 * C2011) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                      C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                      C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                         C47971 * C47716 * C48024) *
                        C1072 +
                    ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                      C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                      C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                         C47971 * C47716 * C48024 -
                     (C42615 * C2401 + C43240 + C43240 + C42610 * C2407 +
                      C42613 * C1281 + C43241 + C43241 + C42609 * C1299 +
                      C42611 * C925 + C43242 + C43242 + C42608 * C935) *
                         C47971 * C47716 * C47872) *
                        C1073 +
                    ((C42611 * C1284 + C43790 + C43790 + C42608 * C1302 +
                      C42613 * C1287 + C43791 + C43791 + C42609 * C1305 +
                      C42615 * C7297 + C43792 + C43792 + C42610 * C7301) *
                         C47971 * C47716 * C47872 -
                     (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                      C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                      C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                         C47971 * C47716 * C48024) *
                        C48055) *
                       C47750)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C47785 * C47767 * C108 -
                   (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                    C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                    C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                       C47971 * C47716 * C47785 * C47767 * C109 +
                   (C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                    C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                    C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                       C47971 * C47716 * C47785 * C47767 * C110 -
                   (C42615 * C485 + C42627 + C42627 + C42610 * C505 +
                    C42613 * C484 + C42628 + C42628 + C42609 * C504 +
                    C42611 * C118 + C42629 + C42629 + C42608 * C132) *
                       C47971 * C47716 * C47785 * C47767 * C111 +
                   (C42611 * C119 + C42630 + C42630 + C42608 * C133 +
                    C42613 * C486 + C42631 + C42631 + C42609 * C506 +
                    C42615 * C487 + C42632 + C42632 + C42610 * C507) *
                       C47971 * C47716 * C47785 * C47767 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C48082 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48055) *
                       C286 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C48082 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48055) *
                       C287 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C48094 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C48082 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                     C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                     C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                     C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                     C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                     C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                     C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48091 +
                   ((C42611 * C290 + C42749 + C42749 + C42608 * C310 +
                     C42613 * C925 + C42750 + C42750 + C42609 * C935 +
                     C42615 * C1281 + C42751 + C42751 + C42610 * C1299) *
                        C47971 * C47716 * C47785 * C1073 -
                    (C42615 * C482 + C42621 + C42621 + C42610 * C502 +
                     C42613 * C479 + C42622 + C42622 + C42609 * C499 +
                     C42611 * C116 + C42623 + C42623 + C42608 * C130) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1287 + C42752 + C42752 + C42610 * C1305 +
                     C42613 * C1284 + C42753 + C42753 + C42609 * C1302 +
                     C42611 * C293 + C42754 + C42754 + C42608 * C313) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48078 +
                   ((C42611 * C117 + C42624 + C42624 + C42608 * C131 +
                     C42613 * C478 + C42625 + C42625 + C42609 * C498 +
                     C42615 * C483 + C42626 + C42626 + C42610 * C503) *
                        C47971 * C47716 * C47785 * C1072 -
                    (C42615 * C1280 + C42755 + C42755 + C42610 * C1298 +
                     C42613 * C926 + C42756 + C42756 + C42609 * C936 +
                     C42611 * C289 + C42757 + C42757 + C42608 * C309) *
                        C47971 * C47716 * C47785 * C1073 +
                    (C42611 * C294 + C42758 + C42758 + C42608 * C314 +
                     C42613 * C1283 + C42759 + C42759 + C42609 * C1301 +
                     C42615 * C1288 + C42760 + C42760 + C42610 * C1306) *
                        C47971 * C47716 * C47785 * C48055) *
                       C48049)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C42611 * C115 + C42618 + C42618 + C42608 * C129 +
                    C42613 * C480 + C42619 + C42619 + C42609 * C500 +
                    C42615 * C481 + C42620 + C42620 + C42610 * C501) *
                       C47971 * C47716 * C47785 * C1140 -
                   (C42615 * C1282 + C42743 + C42743 + C42610 * C1300 +
                    C42613 * C924 + C42744 + C42744 + C42609 * C934 +
                    C42611 * C291 + C42745 + C42745 + C42608 * C311) *
                       C47971 * C47716 * C47785 * C1141 +
                   (C42611 * C292 + C42746 + C42746 + C42608 * C312 +
                    C42613 * C1285 + C42747 + C42747 + C42609 * C1303 +
                    C42615 * C1286 + C42748 + C42748 + C42610 * C1304) *
                       C47971 * C47716 * C47785 * C1142 -
                   (C42615 * C5947 + C43418 + C43418 + C42610 * C5951 +
                    C42613 * C1696 + C43419 + C43419 + C42609 * C1702 +
                    C42611 * C1148 + C43420 + C43420 + C42608 * C1160) *
                       C47971 * C47716 * C47785 * C1143 +
                   (C42611 * C1149 + C43421 + C43421 + C42608 * C1161 +
                    C42613 * C6438 + C43422 + C43422 + C42609 * C6442 +
                    C42615 * C22444 + C43423 + C43423 + C42610 * C22446) *
                       C47971 * C47716 * C47785 * C1144) *
                  C47739) /
                     (p * q * std::sqrt(p + q));
}
