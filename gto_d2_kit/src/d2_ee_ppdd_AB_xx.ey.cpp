/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_xx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_11(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46792 = ae * be;
    const double C46791 = ae + be;
    const double C46790 = 0 * be;
    const double C46789 = xA - xB;
    const double C46837 = p + q;
    const double C46836 = p * q;
    const double C46842 = xP - xQ;
    const double C46841 = bs[2];
    const double C46847 = bs[3];
    const double C46858 = bs[4];
    const double C46879 = bs[5];
    const double C46915 = bs[6];
    const double C46971 = bs[7];
    const double C47036 = yP - yQ;
    const double C47070 = zP - zQ;
    const double C119 = bs[0];
    const double C47551 = ce + de;
    const double C47550 = ce * de;
    const double C47549 = xC - xD;
    const double C47583 = yC - yD;
    const double C47601 = zC - zD;
    const double C47771 = yA - yB;
    const double C47776 = zA - zB;
    const double C46800 = 2 * C46792;
    const double C46793 = std::pow(C46791, 2);
    const double C47538 = 2 * C46791;
    const double C46794 = C46792 * C46789;
    const double C47529 = std::pow(C46789, 2);
    const double C47827 = C46789 * be;
    const double C47826 = C46789 * ae;
    const double C46838 = 2 * C46836;
    const double C46850 = C46842 * ae;
    const double C46849 = C46842 * be;
    const double C46846 = std::pow(C46842, 2);
    const double C47041 = std::pow(C47036, 2);
    const double C47075 = std::pow(C47070, 2);
    const double C47555 = 2 * C47551;
    const double C47554 = std::pow(C47551, 2);
    const double C47556 = C47549 * de;
    const double C47553 = C47549 * ce;
    const double C47552 = std::pow(C47549, 2);
    const double C47584 = std::pow(C47583, 2);
    const double C47643 = C47583 * de;
    const double C47641 = C47583 * ce;
    const double C47602 = std::pow(C47601, 2);
    const double C47685 = C47601 * de;
    const double C47683 = C47601 * ce;
    const double C47791 = std::pow(C47771, 2);
    const double C47861 = C47771 * be;
    const double C47859 = C47771 * ae;
    const double C47806 = std::pow(C47776, 2);
    const double C47862 = C47776 * be;
    const double C47860 = C47776 * ae;
    const double C46795 = 2 * C46793;
    const double C47828 = std::pow(C47538, -1);
    const double C47530 = C47529 * C46792;
    const double C46840 = C46838 / C46837;
    const double C140 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C46838 / C46837, 2) -
          (bs[1] * C46838) / C46837) *
         C46792) /
        C46793;
    const double C120 = -(C46842 * bs[1] * C46838) / C46837;
    const double C265 = -(C47036 * bs[1] * C46838) / C46837;
    const double C418 = -(C47070 * bs[1] * C46838) / C46837;
    const double C46853 = C46847 * C46850;
    const double C46864 = C46858 * C46850;
    const double C46887 = C46879 * C46850;
    const double C46927 = C46915 * C46850;
    const double C46987 = C46971 * C46850;
    const double C127 = (-(bs[1] * C46850 * C46838) / C46837) / C46791;
    const double C46852 = C46847 * C46849;
    const double C46861 = C46858 * C46849;
    const double C46883 = C46879 * C46849;
    const double C46923 = C46915 * C46849;
    const double C46983 = C46971 * C46849;
    const double C126 = (-(bs[1] * C46849 * C46838) / C46837) / C46791;
    const double C46860 = C46846 * C46858;
    const double C46882 = C46846 * C46879;
    const double C46922 = C46846 * C46915;
    const double C46982 = C46846 * C46971;
    const double C47568 = std::pow(C47555, -1);
    const double C47836 = std::pow(C47555, -2);
    const double C47569 = 2 * C47554;
    const double C47840 = C47554 * C47555;
    const double C47839 = 4 * C47554;
    const double C47829 = std::pow(C47553, 2);
    const double C47557 = C47552 * C47550;
    const double C47585 = C47584 * C47550;
    const double C47841 = std::pow(C47641, 2);
    const double C47603 = C47602 * C47550;
    const double C47843 = std::pow(C47683, 2);
    const double C47792 = C47791 * C46792;
    const double C47807 = C47806 * C46792;
    const double C47531 = C47530 / C46791;
    const double C46843 = std::pow(C46840, 2);
    const double C46848 = -C46840;
    const double C46859 = std::pow(C46840, 4);
    const double C46916 = std::pow(C46840, 6);
    const double C47874 = 4 * C47840;
    const double C47873 = C47551 * C47839;
    const double C47558 = C47557 / C47551;
    const double C47586 = C47585 / C47551;
    const double C47604 = C47603 / C47551;
    const double C47793 = C47792 / C46791;
    const double C47808 = C47807 / C46791;
    const double C47532 = -C47531;
    const double C46845 = C46841 * C46843;
    const double C141 = (ae * C46843 * C46841 * C46842 * be +
                         be * C46843 * C46841 * C46842 * ae +
                         C46842 *
                             (C46841 * C46843 + std::pow(C46842, 2) * bs[3] *
                                                    std::pow(-C46840, 3)) *
                             C46792) /
                        C46793;
    const double C128 = (C46842 * C46843 * C46841 * C46849) / C46791 -
                        (be * bs[1] * C46838) / (C46837 * C46791);
    const double C129 = (C46842 * C46843 * C46841 * C46850) / C46791 -
                        (ae * bs[1] * C46838) / (C46837 * C46791);
    const double C277 = (C47036 * C46843 * C46841 * C46849) / C46791;
    const double C278 = (C47036 * C46843 * C46841 * C46850) / C46791;
    const double C430 = (C47070 * C46843 * C46841 * C46849) / C46791;
    const double C431 = (C47070 * C46843 * C46841 * C46850) / C46791;
    const double C46851 = std::pow(C46848, 3);
    const double C46880 = std::pow(C46848, 5);
    const double C46972 = std::pow(C46848, 7);
    const double C46868 = C46859 * C46864;
    const double C46867 = C46859 * C46861;
    const double C46866 = C46860 * C46859;
    const double C46878 = C46858 * C46859;
    const double C46934 = C46916 * C46927;
    const double C46931 = C46916 * C46923;
    const double C46930 = C46922 * C46916;
    const double C46970 = C46915 * C46916;
    const double C47559 = -C47558;
    const double C47587 = -C47586;
    const double C47605 = -C47604;
    const double C47794 = -C47793;
    const double C47809 = -C47808;
    const double C47533 = std::exp(C47532);
    const double C121 = C46845 * C46846 - (bs[1] * C46838) / C46837;
    const double C264 = C47036 * C46842 * C46845;
    const double C266 = C46845 * C47041 - (bs[1] * C46838) / C46837;
    const double C417 = C47070 * C46842 * C46845;
    const double C419 = C46845 * C47075 - (bs[1] * C46838) / C46837;
    const double C814 = C47070 * C47036 * C46845;
    const double C46855 = C46851 * C46853;
    const double C46854 = C46851 * C46852;
    const double C46857 = C46847 * C46851;
    const double C295 =
        (C47036 * (C46845 + C46846 * C46847 * C46851) * C46792) / C46793;
    const double C448 =
        (C47070 * (C46845 + C46846 * C46847 * C46851) * C46792) / C46793;
    const double C46893 = C46880 * C46887;
    const double C46890 = C46880 * C46883;
    const double C46889 = C46882 * C46880;
    const double C46914 = C46879 * C46880;
    const double C46995 = C46972 * C46987;
    const double C46992 = C46972 * C46983;
    const double C46991 = C46982 * C46972;
    const double C46871 = C46842 * C46868;
    const double C46877 = be * C46868;
    const double C47337 = C47036 * C46868;
    const double C46870 = C46842 * C46867;
    const double C46876 = ae * C46867;
    const double C47335 = C47036 * C46867;
    const double C46888 = C46878 * ae;
    const double C46886 = C46878 * C46846;
    const double C46885 = C46842 * C46878;
    const double C46884 = C46878 * be;
    const double C47485 = C46878 * C47041;
    const double C47495 = C47036 * C46878;
    const double C47501 = C46878 * C47075;
    const double C47521 = C47070 * C46878;
    const double C46940 = C46842 * C46934;
    const double C46969 = be * C46934;
    const double C47059 = C46934 * C47041;
    const double C47093 = C46934 * C47075;
    const double C47107 = C47036 * C46934;
    const double C47124 = C47070 * C46934;
    const double C46937 = C46842 * C46931;
    const double C46968 = ae * C46931;
    const double C47058 = C46931 * C47041;
    const double C47092 = C46931 * C47075;
    const double C47106 = C47036 * C46931;
    const double C47123 = C47070 * C46931;
    const double C46988 = C46970 * ae;
    const double C46986 = C46970 * C46846;
    const double C46985 = C46842 * C46970;
    const double C46984 = C46970 * be;
    const double C47560 = std::exp(C47559);
    const double C47588 = std::exp(C47587);
    const double C47606 = std::exp(C47605);
    const double C47795 = std::exp(C47794);
    const double C47810 = std::exp(C47809);
    const double C46796 = C46794 * C47533;
    const double C47864 = C47828 * C47533;
    const double C47863 = C47533 * C47826;
    const double C4577 = -(C47533 * C47827) / C46791;
    const double C131 =
        (C46843 * C46841 * C46850 + C46842 * (C46842 * C46855 + C46845 * ae) +
         C46842 * C46845 * ae) /
        C46791;
    const double C276 = (C47036 * (C46842 * C46855 + C46845 * ae)) / C46791;
    const double C280 = (C46843 * C46841 * C46850 + C46855 * C47041) / C46791;
    const double C429 = (C47070 * (C46842 * C46855 + C46845 * ae)) / C46791;
    const double C433 = (C46843 * C46841 * C46850 + C46855 * C47075) / C46791;
    const double C820 = (C47070 * C47036 * C46855) / C46791;
    const double C1029 =
        (2 * C47036 * C46855 + C47036 * (C46855 + C46868 * C47041)) / C46791;
    const double C1166 = (C47036 * C46855 + C47036 * C46868 * C47075) / C46791;
    const double C1172 = (C47070 * (C46855 + C46868 * C47041)) / C46791;
    const double C1857 =
        (2 * C47070 * C46855 + C47070 * (C46855 + C46868 * C47075)) / C46791;
    const double C142 =
        ((C46845 + C46846 * C46847 * C46851) * C46792 +
         ae * (C46842 * C46854 + C46845 * be) +
         be * (C46842 * C46855 + C46845 * ae) +
         C46842 *
             (ae * C46854 + be * C46855 +
              C46842 *
                  (C46847 * C46851 + C46846 * bs[4] * std::pow(C46840, 4)) *
                  C46792)) /
        C46793;
    const double C130 =
        (C46843 * C46841 * C46849 + C46842 * (C46842 * C46854 + C46845 * be) +
         C46842 * C46845 * be) /
        C46791;
    const double C275 = (C47036 * (C46842 * C46854 + C46845 * be)) / C46791;
    const double C279 = (C46843 * C46841 * C46849 + C46854 * C47041) / C46791;
    const double C428 = (C47070 * (C46842 * C46854 + C46845 * be)) / C46791;
    const double C432 = (C46843 * C46841 * C46849 + C46854 * C47075) / C46791;
    const double C819 = (C47070 * C47036 * C46854) / C46791;
    const double C1028 =
        (2 * C47036 * C46854 + C47036 * (C46854 + C46867 * C47041)) / C46791;
    const double C1165 = (C47036 * C46854 + C47036 * C46867 * C47075) / C46791;
    const double C1171 = (C47070 * (C46854 + C46867 * C47041)) / C46791;
    const double C1856 =
        (2 * C47070 * C46854 + C47070 * (C46854 + C46867 * C47075)) / C46791;
    const double C46865 = C46857 * ae;
    const double C46863 = C46842 * C46857;
    const double C46862 = C46857 * be;
    const double C46869 = C46857 + C46866;
    const double C47479 = C47036 * C46857;
    const double C122 =
        2 * C46842 * C46845 + C46842 * (C46845 + C46857 * C46846);
    const double C263 = C47036 * (C46845 + C46857 * C46846);
    const double C416 = C47070 * (C46845 + C46857 * C46846);
    const double C1020 =
        2 * C47036 * C46845 + C47036 * (C46845 + C46857 * C47041);
    const double C1021 =
        3 * (C46845 + C46857 * C47041) +
        C47036 * (2 * C47036 * C46857 + C47036 * (C46857 + C46878 * C47041));
    const double C1154 = C47036 * C46845 + C47036 * C46857 * C47075;
    const double C1157 = C47070 * (C46845 + C46857 * C47041);
    const double C1158 =
        C46845 + C46857 * C47041 + (C46857 + C46878 * C47041) * C47075;
    const double C1544 =
        C47070 * (2 * C47036 * C46857 + C47036 * (C46857 + C46878 * C47041));
    const double C1848 =
        2 * C47070 * C46845 + C47070 * (C46845 + C46857 * C47075);
    const double C1849 =
        3 * (C46845 + C46857 * C47075) +
        C47070 * (2 * C47070 * C46857 + C47070 * (C46857 + C46878 * C47075));
    const double C21787 = C47533 * C295;
    const double C26365 = C47533 * C448;
    const double C46897 = C46842 * C46893;
    const double C46913 = be * C46893;
    const double C47050 = C47036 * C46893;
    const double C47084 = C47070 * C46893;
    const double C47350 = C46893 * C47041;
    const double C47378 = C46893 * C47075;
    const double C1031 =
        (3 * (C46855 + C46868 * C47041) +
         C47036 * (2 * C47036 * C46868 + C47036 * (C46868 + C46893 * C47041))) /
        C46791;
    const double C1174 =
        (C46855 + C46868 * C47041 + (C46868 + C46893 * C47041) * C47075) /
        C46791;
    const double C1548 =
        (C47070 * (2 * C47036 * C46868 + C47036 * (C46868 + C46893 * C47041))) /
        C46791;
    const double C1859 =
        (3 * (C46855 + C46868 * C47075) +
         C47070 * (2 * C47070 * C46868 + C47070 * (C46868 + C46893 * C47075))) /
        C46791;
    const double C46896 = C46842 * C46890;
    const double C46912 = ae * C46890;
    const double C47049 = C47036 * C46890;
    const double C47083 = C47070 * C46890;
    const double C47347 = C46890 * C47041;
    const double C47375 = C46890 * C47075;
    const double C1030 =
        (3 * (C46854 + C46867 * C47041) +
         C47036 * (2 * C47036 * C46867 + C47036 * (C46867 + C46890 * C47041))) /
        C46791;
    const double C1173 =
        (C46854 + C46867 * C47041 + (C46867 + C46890 * C47041) * C47075) /
        C46791;
    const double C1547 =
        (C47070 * (2 * C47036 * C46867 + C47036 * (C46867 + C46890 * C47041))) /
        C46791;
    const double C1858 =
        (3 * (C46854 + C46867 * C47075) +
         C47070 * (2 * C47070 * C46867 + C47070 * (C46867 + C46890 * C47075))) /
        C46791;
    const double C46895 = C46878 + C46889;
    const double C46928 = C46914 * ae;
    const double C46926 = C46914 * C46846;
    const double C46925 = C46842 * C46914;
    const double C46924 = C46914 * be;
    const double C46936 = C46914 + C46930;
    const double C47508 = C46914 * C47041;
    const double C47517 = C47036 * C46914;
    const double C47522 = C46914 * C47075;
    const double C47001 = C46842 * C46995;
    const double C46998 = C46842 * C46992;
    const double C46997 = C46970 + C46991;
    const double C46881 = C46876 + C46877;
    const double C46892 = C46857 + C46886;
    const double C46894 = C46885 * ae;
    const double C46891 = C46885 * be;
    const double C46918 = 2 * C46885;
    const double C47481 = C47036 * C46885;
    const double C47486 = C46857 + C47485;
    const double C47507 = 2 * C47495;
    const double C47502 = C46857 + C47501;
    const double C47523 = 2 * C47521;
    const double C47062 = C46893 + C47059;
    const double C47096 = C46893 + C47093;
    const double C47112 = be * C47107;
    const double C47144 = C47070 * C47107;
    const double C47406 = C47107 * C47075;
    const double C47129 = be * C47124;
    const double C46981 = C46968 + C46969;
    const double C47061 = C46890 + C47058;
    const double C47095 = C46890 + C47092;
    const double C47111 = ae * C47106;
    const double C47143 = C47070 * C47106;
    const double C47403 = C47106 * C47075;
    const double C47128 = ae * C47123;
    const double C46994 = C46914 + C46986;
    const double C46996 = C46985 * ae;
    const double C46993 = C46985 * be;
    const double C47562 = C47560 * C47553;
    const double C47561 = C47560 / C47555;
    const double C47571 = C47568 * C47560;
    const double C47832 = C47560 * C47556;
    const double C47871 = C47836 * C47560;
    const double C47865 = C47560 * C47829;
    const double C47642 = C47588 / C47555;
    const double C47644 = C47588 * C47641;
    const double C47651 = C47568 * C47588;
    const double C47847 = C47588 * C47643;
    const double C47877 = C47836 * C47588;
    const double C47875 = C47588 * C47841;
    const double C47684 = C47606 / C47555;
    const double C47686 = C47606 * C47683;
    const double C47693 = C47568 * C47606;
    const double C47853 = C47606 * C47685;
    const double C47880 = C47836 * C47606;
    const double C47878 = C47606 * C47843;
    const double C47895 = C47828 * C47795;
    const double C47894 = C47795 * C47859;
    const double C15953 = -(C47795 * C47861) / C46791;
    const double C47897 = C47828 * C47810;
    const double C47896 = C47810 * C47860;
    const double C31647 = -(C47810 * C47862) / C46791;
    const double C46799 = 2 * C46796;
    const double C117 = ((0 * ae) / C46791 - C46796 / C46793) / (2 * C46791) -
                        (0 * be) / C46791;
    const double C15957 = (0 * ae) / C46791 - C46796 / C46793;
    const double C103 = C47864 / C47538;
    const double C101 = C47533 / C47538 - (C47863 * C47827) / C46793;
    const double C102 = C47863 / C46795 - (C47864 * C47827) / C46791;
    const double C15951 = C47863 / C46791;
    const double C4735 = C4577 * C295;
    const double C10651 = C4577 * C448;
    const double C46874 = C46871 + C46865;
    const double C267 = C46842 * C46845 + C46863 * C47041;
    const double C420 = C46842 * C46845 + C46863 * C47075;
    const double C815 = C47070 * C47036 * C46863;
    const double C1019 =
        2 * C47036 * C46863 + C47036 * (C46863 + C46885 * C47041);
    const double C1153 = C47036 * C46863 + C47036 * C46885 * C47075;
    const double C1156 = C47070 * (C46863 + C46885 * C47041);
    const double C1847 =
        2 * C47070 * C46863 + C47070 * (C46863 + C46885 * C47075);
    const double C46873 = C46870 + C46862;
    const double C46872 = C46869 * C46792;
    const double C2224 =
        2 * C47070 * C47479 + C47070 * (C47479 + C47036 * C46878 * C47075);
    const double C6809 =
        3 * (C47479 + C47495 * C47075) +
        C47070 * (2 * C47070 * C47495 +
                  C47070 * (C47495 + C47036 * C46914 * C47075));
    const double C46900 = C46897 + C46888;
    const double C47053 = be * C47050;
    const double C47391 = 2 * C47050;
    const double C2228 =
        (2 * C47070 * C47337 + C47070 * (C47337 + C47050 * C47075)) / C46791;
    const double C6812 =
        (3 * (C47337 + C47050 * C47075) +
         C47070 * (2 * C47070 * C47050 + C47070 * (C47050 + C47107 * C47075))) /
        C46791;
    const double C47087 = be * C47084;
    const double C47413 = 2 * C47084;
    const double C47351 = C46868 + C47350;
    const double C47379 = C46868 + C47378;
    const double C46899 = C46896 + C46884;
    const double C46921 = C46912 + C46913;
    const double C47052 = ae * C47049;
    const double C47387 = 2 * C47049;
    const double C2227 =
        (2 * C47070 * C47335 + C47070 * (C47335 + C47049 * C47075)) / C46791;
    const double C6811 =
        (3 * (C47335 + C47049 * C47075) +
         C47070 * (2 * C47070 * C47049 + C47070 * (C47049 + C47106 * C47075))) /
        C46791;
    const double C47086 = ae * C47083;
    const double C47409 = 2 * C47083;
    const double C47348 = C46867 + C47347;
    const double C47376 = C46867 + C47375;
    const double C46898 = C46895 * C46792;
    const double C46945 = C46940 + C46928;
    const double C46933 = C46878 + C46926;
    const double C46935 = C46925 * ae;
    const double C46932 = C46925 * be;
    const double C46975 = 2 * C46925;
    const double C47488 = C46925 * C47041;
    const double C47497 = C47036 * C46925;
    const double C47504 = C46925 * C47075;
    const double C1022 =
        3 * (C46863 + C46885 * C47041) +
        C47036 * (2 * C47036 * C46885 + C47036 * (C46885 + C46925 * C47041));
    const double C1159 =
        C46863 + C46885 * C47041 + (C46885 + C46925 * C47041) * C47075;
    const double C1545 =
        C47070 * (2 * C47036 * C46885 + C47036 * (C46885 + C46925 * C47041));
    const double C1850 =
        3 * (C46863 + C46885 * C47075) +
        C47070 * (2 * C47070 * C46885 + C47070 * (C46885 + C46925 * C47075));
    const double C46943 = C46937 + C46924;
    const double C46942 = C46936 * C46792;
    const double C47509 = C46878 + C47508;
    const double C47518 = C47517 * C47075;
    const double C47524 = C46878 + C47522;
    const double C47006 = C47001 + C46988;
    const double C47004 = C46998 + C46984;
    const double C47003 = C46997 * C46792;
    const double C123 = 3 * (C46845 + C46857 * C46846) +
                        C46842 * (2 * C46863 + C46842 * C46892);
    const double C268 = C46845 + C46857 * C46846 + C46892 * C47041;
    const double C269 = C47036 * (2 * C46863 + C46842 * C46892);
    const double C421 = C46845 + C46857 * C46846 + C46892 * C47075;
    const double C422 = C47070 * (2 * C46863 + C46842 * C46892);
    const double C816 = C47070 * C47036 * C46892;
    const double C2225 =
        2 * C47070 * C47481 + C47070 * (C47481 + C47036 * C46925 * C47075);
    const double C5699 =
        4 * (2 * C47479 + C47036 * C47486) +
        C47036 * (3 * C47486 + C47036 * (2 * C47036 * C46878 +
                                         C47036 * (C46878 + C46914 * C47041)));
    const double C5881 =
        2 * C47479 + C47036 * C47486 +
        (2 * C47036 * C46878 + C47036 * (C46878 + C46914 * C47041)) * C47075;
    const double C6413 =
        C47070 * (3 * C47486 + C47036 * (2 * C47036 * C46878 +
                                         C47036 * (C46878 + C46914 * C47041)));
    const double C7285 =
        2 * C47070 * C47486 +
        C47070 * (C47486 + (C46878 + C46914 * C47041) * C47075);
    const double C12401 =
        4 * (2 * C47070 * C46857 + C47070 * C47502) +
        C47070 * (3 * C47502 + C47070 * (2 * C47070 * C46878 +
                                         C47070 * (C46878 + C46914 * C47075)));
    const double C47065 = be * C47062;
    const double C47392 = C47036 * C47062;
    const double C47099 = be * C47096;
    const double C47414 = C47070 * C47096;
    const double C47147 = be * C47144;
    const double C47407 = C47050 + C47406;
    const double C47064 = ae * C47061;
    const double C47388 = C47036 * C47061;
    const double C47098 = ae * C47095;
    const double C47410 = C47070 * C47095;
    const double C47115 = C47111 + C47112;
    const double C47146 = ae * C47143;
    const double C47404 = C47049 + C47403;
    const double C47132 = C47128 + C47129;
    const double C47002 = C46994 * ae;
    const double C47000 = C46842 * C46994;
    const double C46999 = C46994 * be;
    const double C47563 = C47562 * C47556;
    const double C47570 = C47562 / C47569;
    const double C47833 = C47568 * C47562;
    const double C47831 = C47562 / C47551;
    const double C260 = (C47560 * std::pow(C47556, 2)) / C47554 + C47561;
    const double C47572 = C47571 * C47556;
    const double C47837 = C47553 * C47571;
    const double C47835 = 2 * C47571;
    const double C47881 = C47571 / C47839;
    const double C112 = C47571 / C47874;
    const double C2705 = C47571 / C47555;
    const double C47867 = C47832 / C47551;
    const double C261 = (-2 * C47568 * C47832) / C47551;
    const double C47898 = C47865 / C47554;
    const double C944 = (C47588 * std::pow(C47643, 2)) / C47554 + C47642;
    const double C47645 = C47644 * C47643;
    const double C47650 = C47644 / C47569;
    const double C47845 = C47644 / C47551;
    const double C47842 = C47568 * C47644;
    const double C47652 = C47651 * C47643;
    const double C47851 = C47641 * C47651;
    const double C47850 = 2 * C47651;
    const double C47887 = C47651 / C47839;
    const double C1016 = C47651 / C47874;
    const double C2702 = C47651 / C47555;
    const double C47883 = C47847 / C47551;
    const double C945 = (-2 * C47568 * C47847) / C47551;
    const double C47903 = C47875 / C47554;
    const double C1666 = (C47606 * std::pow(C47685, 2)) / C47554 + C47684;
    const double C47687 = C47686 * C47685;
    const double C47692 = C47686 / C47569;
    const double C47846 = C47686 / C47551;
    const double C47844 = C47568 * C47686;
    const double C47694 = C47693 * C47685;
    const double C47857 = C47683 * C47693;
    const double C47856 = 2 * C47693;
    const double C47893 = C47693 / C47839;
    const double C1845 = C47693 / C47874;
    const double C3604 = C47693 / C47555;
    const double C47889 = C47853 / C47551;
    const double C1667 = (-2 * C47568 * C47853) / C47551;
    const double C47905 = C47878 / C47554;
    const double C21670 = C47895 / C47538;
    const double C4579 = C47894 / C46791;
    const double C21668 = C47795 / C47538 - (C47894 * C47861) / C46793;
    const double C21669 = C47894 / C46795 - (C47895 * C47861) / C46791;
    const double C42707 = C47897 / C47538;
    const double C10353 = C47896 / C46791;
    const double C42705 = C47810 / C47538 - (C47896 * C47862) / C46793;
    const double C42706 = C47896 / C46795 - (C47897 * C47862) / C46791;
    const double C46801 = C46789 * C46799;
    const double C4583 = (-C46799 / C46791) / (2 * C46791) - (0 * be) / C46791;
    const double C21671 = -C46799 / C46791;
    const double C16112 = C15957 * C276;
    const double C16110 = C15957 * C275;
    const double C31948 = C15957 * C429;
    const double C31946 = C15957 * C428;
    const double C16109 = C15951 * C295;
    const double C31945 = C15951 * C448;
    const double C113 =
        (((0 - (C46789 * C46790) / C46791) * ae) / C46791 - (0 * be) / C46795) /
            (2 * C46791) -
        ((C46789 * (((C47533 - (C46789 * 2 * C46796) / C46791) * ae) / C46791 -
                    C46790 / C46795) +
          C15951) *
         be) /
            C46791 +
        (0 * ae) / C46791 - C46796 / C46793;
    const double C133 = (2 * (C46842 * C46855 + C46845 * ae) +
                         C46842 * (C46855 + C46842 * C46874 + C46863 * ae) +
                         (C46845 + C46857 * C46846) * ae) /
                        C46791;
    const double C274 =
        (C47036 * (C46855 + C46842 * C46874 + C46863 * ae)) / C46791;
    const double C282 =
        (C46842 * C46855 + C46845 * ae + C46874 * C47041) / C46791;
    const double C427 =
        (C47070 * (C46855 + C46842 * C46874 + C46863 * ae)) / C46791;
    const double C435 =
        (C46842 * C46855 + C46845 * ae + C46874 * C47075) / C46791;
    const double C822 = (C47070 * C47036 * C46874) / C46791;
    const double C132 = (2 * (C46842 * C46854 + C46845 * be) +
                         C46842 * (C46854 + C46842 * C46873 + C46863 * be) +
                         (C46845 + C46857 * C46846) * be) /
                        C46791;
    const double C273 =
        (C47036 * (C46854 + C46842 * C46873 + C46863 * be)) / C46791;
    const double C281 =
        (C46842 * C46854 + C46845 * be + C46873 * C47041) / C46791;
    const double C426 =
        (C47070 * (C46854 + C46842 * C46873 + C46863 * be)) / C46791;
    const double C434 =
        (C46842 * C46854 + C46845 * be + C46873 * C47075) / C46791;
    const double C821 = (C47070 * C47036 * C46873) / C46791;
    const double C143 =
        (2 * (ae * C46854 + be * C46855 + C46842 * C46872) +
         ae * (C46854 + C46842 * C46873 + C46863 * be) +
         be * (C46855 + C46842 * C46874 + C46863 * ae) +
         C46842 * (C46872 + ae * C46873 + be * C46874 +
                   C46842 * (ae * C46867 + be * C46868 +
                             C46842 *
                                 (C46858 * C46859 +
                                  C46846 * bs[5] * std::pow(C46848, 5)) *
                                 C46792))) /
        C46793;
    const double C294 = (ae * C47036 * C46854 + be * C47036 * C46855 +
                         C46842 * C47036 * C46872) /
                        C46793;
    const double C296 = ((C46845 + C46846 * C46847 * C46851) * C46792 +
                         C46872 * std::pow(C47036, 2)) /
                        C46793;
    const double C447 = (ae * C47070 * C46854 + be * C47070 * C46855 +
                         C46842 * C47070 * C46872) /
                        C46793;
    const double C449 = ((C46845 + C46846 * C46847 * C46851) * C46792 +
                         C46872 * std::pow(C47070, 2)) /
                        C46793;
    const double C829 = (C47070 * C47036 * C46872) / C46793;
    const double C46903 = C46842 * C46900;
    const double C46919 = 2 * C46900;
    const double C46911 = be * C46900;
    const double C47341 = C47036 * C46900;
    const double C1027 =
        (2 * C47036 * C46874 + C47036 * (C46874 + C46900 * C47041)) / C46791;
    const double C1164 = (C47036 * C46874 + C47036 * C46900 * C47075) / C46791;
    const double C1170 = (C47070 * (C46874 + C46900 * C47041)) / C46791;
    const double C1855 =
        (2 * C47070 * C46874 + C47070 * (C46874 + C46900 * C47075)) / C46791;
    const double C5702 =
        (4 * (2 * C47337 + C47036 * C47351) +
         C47036 * (3 * C47351 + C47036 * (2 * C47050 + C47036 * C47062))) /
        C46791;
    const double C5884 = (2 * C47337 + C47036 * C47351 +
                          (2 * C47050 + C47036 * C47062) * C47075) /
                         C46791;
    const double C6416 =
        (C47070 * (3 * C47351 + C47036 * (2 * C47050 + C47036 * C47062))) /
        C46791;
    const double C7288 =
        (2 * C47070 * C47351 + C47070 * (C47351 + C47062 * C47075)) / C46791;
    const double C23363 =
        (3 * (C47351 + C47062 * C47075) +
         C47070 * (2 * C47070 * C47062 +
                   C47070 * (C47062 + (C46934 + C46995 * C47041) * C47075))) /
        C46791;
    const double C12404 =
        (4 * (2 * C47070 * C46868 + C47070 * C47379) +
         C47070 * (3 * C47379 + C47070 * (2 * C47084 + C47070 * C47096))) /
        C46791;
    const double C46902 = C46842 * C46899;
    const double C46917 = 2 * C46899;
    const double C46910 = ae * C46899;
    const double C47339 = C47036 * C46899;
    const double C1026 =
        (2 * C47036 * C46873 + C47036 * (C46873 + C46899 * C47041)) / C46791;
    const double C1163 = (C47036 * C46873 + C47036 * C46899 * C47075) / C46791;
    const double C1169 = (C47070 * (C46873 + C46899 * C47041)) / C46791;
    const double C1854 =
        (2 * C47070 * C46873 + C47070 * (C46873 + C46899 * C47075)) / C46791;
    const double C47055 = C47052 + C47053;
    const double C47089 = C47086 + C47087;
    const double C5701 =
        (4 * (2 * C47335 + C47036 * C47348) +
         C47036 * (3 * C47348 + C47036 * (2 * C47049 + C47036 * C47061))) /
        C46791;
    const double C5883 = (2 * C47335 + C47036 * C47348 +
                          (2 * C47049 + C47036 * C47061) * C47075) /
                         C46791;
    const double C6415 =
        (C47070 * (3 * C47348 + C47036 * (2 * C47049 + C47036 * C47061))) /
        C46791;
    const double C7287 =
        (2 * C47070 * C47348 + C47070 * (C47348 + C47061 * C47075)) / C46791;
    const double C23362 =
        (3 * (C47348 + C47061 * C47075) +
         C47070 * (2 * C47070 * C47061 +
                   C47070 * (C47061 + (C46931 + C46992 * C47041) * C47075))) /
        C46791;
    const double C12403 =
        (4 * (2 * C47070 * C46867 + C47070 * C47376) +
         C47070 * (3 * C47376 + C47070 * (2 * C47083 + C47070 * C47095))) /
        C46791;
    const double C46901 = C46842 * C46898;
    const double C47044 = C47036 * C46898;
    const double C47078 = C47070 * C46898;
    const double C293 =
        (C47036 * C46872 + ae * C47036 * C46873 + be * C47036 * C46874 +
         C46842 * (ae * C47036 * C46867 + be * C47036 * C46868 +
                   C46842 * C47036 * C46898)) /
        C46793;
    const double C297 =
        (ae * (C46854 + C46867 * C47041) + be * (C46855 + C46868 * C47041) +
         C46842 * (C46872 + C46898 * C47041)) /
        C46793;
    const double C446 =
        (C47070 * C46872 + ae * C47070 * C46873 + be * C47070 * C46874 +
         C46842 * (ae * C47070 * C46867 + be * C47070 * C46868 +
                   C46842 * C47070 * C46898)) /
        C46793;
    const double C450 =
        (ae * (C46854 + C46867 * C47075) + be * (C46855 + C46868 * C47075) +
         C46842 * (C46872 + C46898 * C47075)) /
        C46793;
    const double C1038 =
        (2 * C47036 * C46872 + C47036 * (C46872 + C46898 * C47041)) / C46793;
    const double C1184 = (C47070 * (C46872 + C46898 * C47041)) / C46793;
    const double C1866 =
        (2 * C47070 * C46872 + C47070 * (C46872 + C46898 * C47075)) / C46793;
    const double C46948 = C46842 * C46945;
    const double C46978 = 2 * C46945;
    const double C46967 = be * C46945;
    const double C47105 = C47036 * C46945;
    const double C47122 = C47070 * C46945;
    const double C47356 = C46945 * C47041;
    const double C47384 = C46945 * C47075;
    const double C1033 =
        (3 * (C46874 + C46900 * C47041) +
         C47036 * (2 * C47036 * C46900 + C47036 * (C46900 + C46945 * C47041))) /
        C46791;
    const double C1176 =
        (C46874 + C46900 * C47041 + (C46900 + C46945 * C47041) * C47075) /
        C46791;
    const double C1550 =
        (C47070 * (2 * C47036 * C46900 + C47036 * (C46900 + C46945 * C47041))) /
        C46791;
    const double C1861 =
        (3 * (C46874 + C46900 * C47075) +
         C47070 * (2 * C47070 * C46900 + C47070 * (C46900 + C46945 * C47075))) /
        C46791;
    const double C46941 = C46933 * ae;
    const double C46939 = C46842 * C46933;
    const double C46938 = C46933 * be;
    const double C46976 = 3 * C46933;
    const double C47483 = C47036 * C46933;
    const double C1018 =
        2 * C47036 * C46892 + C47036 * (C46892 + C46933 * C47041);
    const double C1023 =
        3 * (C46892 + C46933 * C47041) +
        C47036 * (2 * C47036 * C46933 + C47036 * (C46933 + C46994 * C47041));
    const double C1152 = C47036 * C46892 + C47036 * C46933 * C47075;
    const double C1155 = C47070 * (C46892 + C46933 * C47041);
    const double C1160 =
        C46892 + C46933 * C47041 + (C46933 + C46994 * C47041) * C47075;
    const double C1546 =
        C47070 * (2 * C47036 * C46933 + C47036 * (C46933 + C46994 * C47041));
    const double C1846 =
        2 * C47070 * C46892 + C47070 * (C46892 + C46933 * C47075);
    const double C1851 =
        3 * (C46892 + C46933 * C47075) +
        C47070 * (2 * C47070 * C46933 + C47070 * (C46933 + C46994 * C47075));
    const double C47489 = C46885 + C47488;
    const double C6810 =
        3 * (C47481 + C47497 * C47075) +
        C47070 * (2 * C47070 * C47497 +
                  C47070 * (C47497 + C47036 * C46985 * C47075));
    const double C47505 = C46885 + C47504;
    const double C46947 = C46842 * C46943;
    const double C46974 = 2 * C46943;
    const double C46966 = ae * C46943;
    const double C47104 = C47036 * C46943;
    const double C47121 = C47070 * C46943;
    const double C47353 = C46943 * C47041;
    const double C47381 = C46943 * C47075;
    const double C1032 =
        (3 * (C46873 + C46899 * C47041) +
         C47036 * (2 * C47036 * C46899 + C47036 * (C46899 + C46943 * C47041))) /
        C46791;
    const double C1175 =
        (C46873 + C46899 * C47041 + (C46899 + C46943 * C47041) * C47075) /
        C46791;
    const double C1549 =
        (C47070 * (2 * C47036 * C46899 + C47036 * (C46899 + C46943 * C47041))) /
        C46791;
    const double C1860 =
        (3 * (C46873 + C46899 * C47075) +
         C47070 * (2 * C47070 * C46899 + C47070 * (C46899 + C46943 * C47075))) /
        C46791;
    const double C46946 = C46842 * C46942;
    const double C47046 = C46942 * C47041;
    const double C47051 = C47036 * C46942;
    const double C47080 = C46942 * C47075;
    const double C47085 = C47070 * C46942;
    const double C298 =
        (C46872 + C46898 * C47041 + ae * (C46873 + C46899 * C47041) +
         be * (C46874 + C46900 * C47041) +
         C46842 * (ae * (C46867 + C46890 * C47041) +
                   be * (C46868 + C46893 * C47041) +
                   C46842 * (C46898 + C46942 * C47041))) /
        C46793;
    const double C451 =
        (C46872 + C46898 * C47075 + ae * (C46873 + C46899 * C47075) +
         be * (C46874 + C46900 * C47075) +
         C46842 * (ae * (C46867 + C46890 * C47075) +
                   be * (C46868 + C46893 * C47075) +
                   C46842 * (C46898 + C46942 * C47075))) /
        C46793;
    const double C47510 = C47036 * C47509;
    const double C23361 =
        3 * (C47486 + C47509 * C47075) +
        C47070 * (2 * C47070 * C47509 +
                  C47070 * (C47509 + (C46914 + C46970 * C47041) * C47075));
    const double C47519 = C47495 + C47518;
    const double C47525 = C47070 * C47524;
    const double C47011 = C46842 * C47006;
    const double C47008 = C46842 * C47004;
    const double C47007 = C46842 * C47003;
    const double C47060 = C47003 * C47041;
    const double C47094 = C47003 * C47075;
    const double C47108 = C47036 * C47003;
    const double C47125 = C47070 * C47003;
    const double C47393 = C47391 + C47392;
    const double C47415 = C47413 + C47414;
    const double C28106 =
        (4 * (2 * C47070 * C47050 + C47070 * C47407) +
         C47070 * (3 * C47407 +
                   C47070 * (2 * C47144 +
                             C47070 * (C47107 + C47036 * C46995 * C47075)))) /
        C46791;
    const double C47067 = C47064 + C47065;
    const double C47389 = C47387 + C47388;
    const double C47101 = C47098 + C47099;
    const double C47411 = C47409 + C47410;
    const double C47149 = C47146 + C47147;
    const double C28105 =
        (4 * (2 * C47070 * C47049 + C47070 * C47404) +
         C47070 * (3 * C47404 +
                   C47070 * (2 * C47143 +
                             C47070 * (C47106 + C47036 * C46992 * C47075)))) /
        C46791;
    const double C47005 = C46975 + C47000;
    const double C47564 = C47563 / C47554;
    const double C47868 = 2 * C47833;
    const double C47573 = C47572 / C47551;
    const double C47872 = C47837 / C47569;
    const double C47899 = C47831 - C47867;
    const double C2442 = -C47867;
    const double C47913 = C47898 + C47561;
    const double C47646 = C47645 / C47554;
    const double C47876 = 2 * C47842;
    const double C47653 = C47652 / C47551;
    const double C47886 = C47851 / C47569;
    const double C47907 = C47845 - C47883;
    const double C2334 = -C47883;
    const double C47916 = C47903 + C47642;
    const double C47688 = C47687 / C47554;
    const double C47879 = 2 * C47844;
    const double C47695 = C47694 / C47551;
    const double C47892 = C47857 / C47569;
    const double C47910 = C47846 - C47889;
    const double C3096 = -C47889;
    const double C47917 = C47905 + C47684;
    const double C46802 = C46801 / C46791;
    const double C4738 = C4583 * C276;
    const double C4736 = C4583 * C275;
    const double C10654 = C4583 * C429;
    const double C10652 = C4583 * C428;
    const double C21798 = C21671 * C276;
    const double C21796 = C21671 * C275;
    const double C21794 = C21671 * C1029;
    const double C21792 = C21671 * C1028;
    const double C21790 = C21671 * C280;
    const double C21788 = C21671 * C279;
    const double C21786 = C21671 * C278;
    const double C21784 = C21671 * C277;
    const double C22330 = C21671 * C820;
    const double C22328 = C21671 * C819;
    const double C22326 = C21671 * C1172;
    const double C22324 = C21671 * C1171;
    const double C22550 = C21671 * C1031;
    const double C22548 = C21671 * C1030;
    const double C22688 = C21671 * C1548;
    const double C22686 = C21671 * C1547;
    const double C22684 = C21671 * C1174;
    const double C22682 = C21671 * C1173;
    const double C22680 = C21671 * C1166;
    const double C22678 = C21671 * C1165;
    const double C23734 = C21671 * C2228;
    const double C23732 = C21671 * C2227;
    const double C26372 = C21671 * C429;
    const double C26370 = C21671 * C428;
    const double C26368 = C21671 * C433;
    const double C26366 = C21671 * C432;
    const double C26364 = C21671 * C431;
    const double C26362 = C21671 * C430;
    const double C28119 = C21671 * C1859;
    const double C28117 = C21671 * C1858;
    const double C28115 = C21671 * C6812;
    const double C28113 = C21671 * C6811;
    const double C28111 = C21671 * C1857;
    const double C28109 = C21671 * C1856;
    const double C4754 = C4583 * C274;
    const double C16128 = C15957 * C274;
    const double C21810 = C21671 * C274;
    const double C4742 = C4583 * C282;
    const double C16116 = C15957 * C282;
    const double C21802 = C21671 * C282;
    const double C10670 = C4583 * C427;
    const double C26380 = C21671 * C427;
    const double C31964 = C15957 * C427;
    const double C10658 = C4583 * C435;
    const double C26376 = C21671 * C435;
    const double C31952 = C15957 * C435;
    const double C5432 = C4583 * C822;
    const double C16806 = C15957 * C822;
    const double C22334 = C21671 * C822;
    const double C4752 = C4583 * C273;
    const double C16126 = C15957 * C273;
    const double C21808 = C21671 * C273;
    const double C4740 = C4583 * C281;
    const double C16114 = C15957 * C281;
    const double C21800 = C21671 * C281;
    const double C10668 = C4583 * C426;
    const double C26378 = C21671 * C426;
    const double C31962 = C15957 * C426;
    const double C10656 = C4583 * C434;
    const double C26374 = C21671 * C434;
    const double C31950 = C15957 * C434;
    const double C5430 = C4583 * C821;
    const double C16804 = C15957 * C821;
    const double C22332 = C21671 * C821;
    const double C4751 = C4577 * C294;
    const double C4739 = C47864 * C294;
    const double C16125 = C15951 * C294;
    const double C16113 = C47864 * C294;
    const double C21799 = C47533 * C294;
    const double C4747 = C4577 * C296;
    const double C16121 = C15951 * C296;
    const double C21791 = C47533 * C296;
    const double C10667 = C4577 * C447;
    const double C10655 = C47864 * C447;
    const double C26373 = C47533 * C447;
    const double C31961 = C15951 * C447;
    const double C31949 = C47864 * C447;
    const double C10663 = C4577 * C449;
    const double C26369 = C47533 * C449;
    const double C31957 = C15951 * C449;
    const double C5437 = C4577 * C829;
    const double C16811 = C15951 * C829;
    const double C22331 = C47533 * C829;
    const double C46906 = C46868 + C46903;
    const double C5714 = C4583 * C1027;
    const double C17080 = C15957 * C1027;
    const double C21806 = C21671 * C1027;
    const double C5896 = C4583 * C1164;
    const double C17254 = C15957 * C1164;
    const double C23518 = C21671 * C1164;
    const double C5904 = C4583 * C1170;
    const double C17262 = C15957 * C1170;
    const double C22338 = C21671 * C1170;
    const double C12416 = C4583 * C1855;
    const double C28465 = C21671 * C1855;
    const double C33702 = C15957 * C1855;
    const double C22554 = C21671 * C5702;
    const double C22692 = C21671 * C5884;
    const double C23074 = C21671 * C6416;
    const double C23730 = C21671 * C7288;
    const double C44197 = C21671 * C12404;
    const double C46905 = C46867 + C46902;
    const double C46920 = C46898 + C46910;
    const double C5712 = C4583 * C1026;
    const double C17078 = C15957 * C1026;
    const double C21804 = C21671 * C1026;
    const double C5894 = C4583 * C1163;
    const double C17252 = C15957 * C1163;
    const double C23516 = C21671 * C1163;
    const double C5902 = C4583 * C1169;
    const double C17260 = C15957 * C1169;
    const double C22336 = C21671 * C1169;
    const double C12414 = C4583 * C1854;
    const double C28463 = C21671 * C1854;
    const double C33700 = C15957 * C1854;
    const double C22552 = C21671 * C5701;
    const double C22690 = C21671 * C5883;
    const double C23072 = C21671 * C6415;
    const double C23728 = C21671 * C7287;
    const double C44195 = C21671 * C12403;
    const double C46904 = C46881 + C46901;
    const double C830 =
        (ae * C47070 * C47036 * C46867 + be * C47070 * C47036 * C46868 +
         C46842 * C47070 * C47044) /
        C46793;
    const double C1181 = (C47036 * C46872 + C47044 * C47075) / C46793;
    const double C4767 = C4577 * C293;
    const double C4755 = C47864 * C293;
    const double C16141 = C15951 * C293;
    const double C16129 = C47864 * C293;
    const double C21811 = C47533 * C293;
    const double C4759 = C4577 * C297;
    const double C4743 = C47864 * C297;
    const double C16133 = C15951 * C297;
    const double C16117 = C47864 * C297;
    const double C21803 = C47533 * C297;
    const double C10683 = C4577 * C446;
    const double C10671 = C47864 * C446;
    const double C26381 = C47533 * C446;
    const double C31977 = C15951 * C446;
    const double C31965 = C47864 * C446;
    const double C10675 = C4577 * C450;
    const double C10659 = C47864 * C450;
    const double C26377 = C47533 * C450;
    const double C31969 = C15951 * C450;
    const double C31953 = C47864 * C450;
    const double C5711 = C4577 * C1038;
    const double C17077 = C15951 * C1038;
    const double C21795 = C47533 * C1038;
    const double C5901 = C4577 * C1184;
    const double C17259 = C15951 * C1184;
    const double C22327 = C47533 * C1184;
    const double C12413 = C4577 * C1866;
    const double C28112 = C47533 * C1866;
    const double C33699 = C15951 * C1866;
    const double C46951 = C46893 + C46948;
    const double C47110 = be * C47105;
    const double C2230 =
        (2 * C47070 * C47341 + C47070 * (C47341 + C47105 * C47075)) / C46791;
    const double C6814 =
        (3 * (C47341 + C47105 * C47075) +
         C47070 * (2 * C47070 * C47105 +
                   C47070 * (C47105 + C47036 * C47006 * C47075))) /
        C46791;
    const double C47127 = be * C47122;
    const double C47357 = C46900 + C47356;
    const double C47385 = C46900 + C47384;
    const double C5718 = C4583 * C1033;
    const double C17084 = C15957 * C1033;
    const double C22810 = C21671 * C1033;
    const double C5908 = C4583 * C1176;
    const double C17266 = C15957 * C1176;
    const double C23514 = C21671 * C1176;
    const double C6424 = C4583 * C1550;
    const double C17774 = C15957 * C1550;
    const double C22964 = C21671 * C1550;
    const double C12420 = C4583 * C1861;
    const double C33706 = C15957 * C1861;
    const double C44448 = C21671 * C1861;
    const double C46944 = C46918 + C46939;
    const double C2226 =
        2 * C47070 * C47483 + C47070 * (C47483 + C47036 * C46994 * C47075);
    const double C5700 =
        4 * (2 * C47481 + C47036 * C47489) +
        C47036 * (3 * C47489 + C47036 * (2 * C47036 * C46925 +
                                         C47036 * (C46925 + C46985 * C47041)));
    const double C5882 =
        2 * C47481 + C47036 * C47489 +
        (2 * C47036 * C46925 + C47036 * (C46925 + C46985 * C47041)) * C47075;
    const double C6414 =
        C47070 * (3 * C47489 + C47036 * (2 * C47036 * C46925 +
                                         C47036 * (C46925 + C46985 * C47041)));
    const double C7286 =
        2 * C47070 * C47489 +
        C47070 * (C47489 + (C46925 + C46985 * C47041) * C47075);
    const double C12402 =
        4 * (2 * C47070 * C46885 + C47070 * C47505) +
        C47070 * (3 * C47505 + C47070 * (2 * C47070 * C46925 +
                                         C47070 * (C46925 + C46985 * C47075)));
    const double C46950 = C46890 + C46947;
    const double C46980 = C46942 + C46966;
    const double C47109 = ae * C47104;
    const double C2229 =
        (2 * C47070 * C47339 + C47070 * (C47339 + C47104 * C47075)) / C46791;
    const double C6813 =
        (3 * (C47339 + C47104 * C47075) +
         C47070 * (2 * C47070 * C47104 +
                   C47070 * (C47104 + C47036 * C47004 * C47075))) /
        C46791;
    const double C47126 = ae * C47121;
    const double C47354 = C46899 + C47353;
    const double C47382 = C46899 + C47381;
    const double C5716 = C4583 * C1032;
    const double C17082 = C15957 * C1032;
    const double C22808 = C21671 * C1032;
    const double C5906 = C4583 * C1175;
    const double C17264 = C15957 * C1175;
    const double C23512 = C21671 * C1175;
    const double C6422 = C4583 * C1549;
    const double C17772 = C15957 * C1549;
    const double C22962 = C21671 * C1549;
    const double C12418 = C4583 * C1860;
    const double C33704 = C15957 * C1860;
    const double C44446 = C21671 * C1860;
    const double C46949 = C46921 + C46946;
    const double C47047 = C46898 + C47046;
    const double C47054 = C46842 * C47051;
    const double C47141 = C47070 * C47051;
    const double C47167 = 2 * C47051;
    const double C831 = (C47070 * C47044 + ae * C47070 * C47036 * C46899 +
                         be * C47070 * C47036 * C46900 +
                         C46842 * (ae * C47070 * C47049 + be * C47070 * C47050 +
                                   C46842 * C47070 * C47051)) /
                        C46793;
    const double C1180 = (ae * (C47036 * C46867 + C47049 * C47075) +
                          be * (C47036 * C46868 + C47050 * C47075) +
                          C46842 * (C47044 + C47051 * C47075)) /
                         C46793;
    const double C2233 =
        (2 * C47070 * C47044 + C47070 * (C47044 + C47051 * C47075)) / C46793;
    const double C47081 = C46898 + C47080;
    const double C47088 = C46842 * C47085;
    const double C47185 = 2 * C47085;
    const double C4779 = C4577 * C298;
    const double C4763 = C47864 * C298;
    const double C16153 = C15951 * C298;
    const double C16137 = C47864 * C298;
    const double C21815 = C47533 * C298;
    const double C10695 = C4577 * C451;
    const double C10679 = C47864 * C451;
    const double C26389 = C47533 * C451;
    const double C31989 = C15951 * C451;
    const double C31973 = C47864 * C451;
    const double C47511 = C47507 + C47510;
    const double C28104 =
        4 * (2 * C47070 * C47495 + C47070 * C47519) +
        C47070 * (3 * C47519 +
                  C47070 * (2 * C47070 * C47517 +
                            C47070 * (C47517 + C47036 * C46970 * C47075)));
    const double C47526 = C47523 + C47525;
    const double C47016 = C46934 + C47011;
    const double C47014 = C46931 + C47008;
    const double C47013 = C46981 + C47007;
    const double C47063 = C46942 + C47060;
    const double C47097 = C46942 + C47094;
    const double C47113 = C46842 * C47108;
    const double C47145 = C47070 * C47108;
    const double C47182 = C47108 * C47075;
    const double C1179 =
        (C47044 + C47051 * C47075 + ae * (C47036 * C46899 + C47104 * C47075) +
         be * (C47036 * C46900 + C47105 * C47075) +
         C46842 * (ae * (C47049 + C47106 * C47075) +
                   be * (C47050 + C47107 * C47075) +
                   C46842 * (C47051 + C47108 * C47075))) /
        C46793;
    const double C47130 = C46842 * C47125;
    const double C22545 =
        (5 * (3 * C47351 + C47036 * C47393) +
         C47036 * (4 * C47393 +
                   C47036 * (3 * C47062 +
                             C47036 * (2 * C47107 +
                                       C47036 * (C46934 + C46995 * C47041))))) /
        C46791;
    const double C22675 =
        (3 * C47351 + C47036 * C47393 +
         (3 * C47062 +
          C47036 * (2 * C47107 + C47036 * (C46934 + C46995 * C47041))) *
             C47075) /
        C46791;
    const double C23069 =
        (C47070 * (4 * C47393 +
                   C47036 * (3 * C47062 +
                             C47036 * (2 * C47107 +
                                       C47036 * (C46934 + C46995 * C47041))))) /
        C46791;
    const double C23725 =
        (2 * C47070 * C47393 +
         C47070 * (C47393 + (2 * C47107 + C47036 * (C46934 + C46995 * C47041)) *
                                C47075)) /
        C46791;
    const double C44192 =
        (5 * (3 * C47379 + C47070 * C47415) +
         C47070 * (4 * C47415 +
                   C47070 * (3 * C47096 +
                             C47070 * (2 * C47124 +
                                       C47070 * (C46934 + C46995 * C47075))))) /
        C46791;
    const double C22544 =
        (5 * (3 * C47348 + C47036 * C47389) +
         C47036 * (4 * C47389 +
                   C47036 * (3 * C47061 +
                             C47036 * (2 * C47106 +
                                       C47036 * (C46931 + C46992 * C47041))))) /
        C46791;
    const double C22674 =
        (3 * C47348 + C47036 * C47389 +
         (3 * C47061 +
          C47036 * (2 * C47106 + C47036 * (C46931 + C46992 * C47041))) *
             C47075) /
        C46791;
    const double C23068 =
        (C47070 * (4 * C47389 +
                   C47036 * (3 * C47061 +
                             C47036 * (2 * C47106 +
                                       C47036 * (C46931 + C46992 * C47041))))) /
        C46791;
    const double C23724 =
        (2 * C47070 * C47389 +
         C47070 * (C47389 + (2 * C47106 + C47036 * (C46931 + C46992 * C47041)) *
                                C47075)) /
        C46791;
    const double C44191 =
        (5 * (3 * C47376 + C47070 * C47411) +
         C47070 * (4 * C47411 +
                   C47070 * (3 * C47095 +
                             C47070 * (2 * C47123 +
                                       C47070 * (C46931 + C46992 * C47075))))) /
        C46791;
    const double C47012 = C47005 * ae;
    const double C47010 = C46842 * C47005;
    const double C47009 = C47005 * be;
    const double C47565 = C47561 - C47564;
    const double C47900 = C47868 / C47551;
    const double C47574 = C47570 - C47573;
    const double C47914 = C47899 / C47555;
    const double C47647 = C47642 - C47646;
    const double C47904 = C47876 / C47551;
    const double C47654 = C47650 - C47653;
    const double C47918 = C47907 / C47555;
    const double C47689 = C47684 - C47688;
    const double C47906 = C47879 / C47551;
    const double C47696 = C47692 - C47695;
    const double C47920 = C47910 / C47555;
    const double C46803 = C47533 - C46802;
    const double C46908 = C46906 + C46894;
    const double C46907 = C46905 + C46891;
    const double C46929 = C46920 + C46911;
    const double C5441 = C4577 * C830;
    const double C5433 = C47864 * C830;
    const double C16815 = C15951 * C830;
    const double C16807 = C47864 * C830;
    const double C22335 = C47533 * C830;
    const double C5893 = C4577 * C1181;
    const double C17251 = C15951 * C1181;
    const double C22681 = C47533 * C1181;
    const double C46954 = C46951 + C46935;
    const double C7296 = C4583 * C2230;
    const double C18630 = C15957 * C2230;
    const double C28326 = C21671 * C2230;
    const double C5704 =
        (4 * (2 * C47341 + C47036 * C47357) +
         C47036 *
             (3 * C47357 +
              C47036 * (2 * C47105 + C47036 * (C46945 + C47006 * C47041)))) /
        C46791;
    const double C5886 =
        (2 * C47341 + C47036 * C47357 +
         (2 * C47105 + C47036 * (C46945 + C47006 * C47041)) * C47075) /
        C46791;
    const double C6418 =
        (C47070 *
         (3 * C47357 +
          C47036 * (2 * C47105 + C47036 * (C46945 + C47006 * C47041)))) /
        C46791;
    const double C7290 =
        (2 * C47070 * C47357 +
         C47070 * (C47357 + (C46945 + C47006 * C47041) * C47075)) /
        C46791;
    const double C12406 =
        (4 * (2 * C47070 * C46900 + C47070 * C47385) +
         C47070 *
             (3 * C47385 +
              C47070 * (2 * C47122 + C47070 * (C46945 + C47006 * C47075)))) /
        C46791;
    const double C124 = 4 * (2 * C46863 + C46842 * C46892) +
                        C46842 * (3 * C46892 + C46842 * C46944);
    const double C270 = 2 * C46863 + C46842 * C46892 + C46944 * C47041;
    const double C271 = C47036 * (3 * C46892 + C46842 * C46944);
    const double C423 = 2 * C46863 + C46842 * C46892 + C46944 * C47075;
    const double C424 = C47070 * (3 * C46892 + C46842 * C46944);
    const double C817 = C47070 * C47036 * C46944;
    const double C1292 =
        2 * C47036 * C46944 + C47036 * (C46944 + C47005 * C47041);
    const double C1442 = C47070 * (C46944 + C47005 * C47041);
    const double C2016 = C47036 * C46944 + C47036 * C47005 * C47075;
    const double C2122 =
        2 * C47070 * C46944 + C47070 * (C46944 + C47005 * C47075);
    const double C46953 = C46950 + C46932;
    const double C46990 = C46980 + C46967;
    const double C47114 = C47051 + C47109;
    const double C7294 = C4583 * C2229;
    const double C18628 = C15957 * C2229;
    const double C28324 = C21671 * C2229;
    const double C47131 = C47085 + C47126;
    const double C5703 =
        (4 * (2 * C47339 + C47036 * C47354) +
         C47036 *
             (3 * C47354 +
              C47036 * (2 * C47104 + C47036 * (C46943 + C47004 * C47041)))) /
        C46791;
    const double C5885 =
        (2 * C47339 + C47036 * C47354 +
         (2 * C47104 + C47036 * (C46943 + C47004 * C47041)) * C47075) /
        C46791;
    const double C6417 =
        (C47070 *
         (3 * C47354 +
          C47036 * (2 * C47104 + C47036 * (C46943 + C47004 * C47041)))) /
        C46791;
    const double C7289 =
        (2 * C47070 * C47354 +
         C47070 * (C47354 + (C46943 + C47004 * C47041) * C47075)) /
        C46791;
    const double C12405 =
        (4 * (2 * C47070 * C46899 + C47070 * C47382) +
         C47070 *
             (3 * C47382 +
              C47070 * (2 * C47121 + C47070 * (C46943 + C47004 * C47075)))) /
        C46791;
    const double C46952 = C46842 * C46949;
    const double C46963 = 2 * C46949;
    const double C1037 =
        (ae * (2 * C47036 * C46867 + C47036 * (C46867 + C46890 * C47041)) +
         be * (2 * C47036 * C46868 + C47036 * (C46868 + C46893 * C47041)) +
         C46842 * (2 * C47044 + C47036 * C47047)) /
        C46793;
    const double C1039 = (3 * (C46872 + C46898 * C47041) +
                          C47036 * (2 * C47044 + C47036 * C47047)) /
                         C46793;
    const double C1183 =
        (ae * C47070 * (C46867 + C46890 * C47041) +
         be * C47070 * (C46868 + C46893 * C47041) + C46842 * C47070 * C47047) /
        C46793;
    const double C1185 = (C46872 + C46898 * C47041 + C47047 * C47075) / C46793;
    const double C1553 = (C47070 * (2 * C47044 + C47036 * C47047)) / C46793;
    const double C47056 = C47055 + C47054;
    const double C5453 = C4577 * C831;
    const double C5445 = C47864 * C831;
    const double C16827 = C15951 * C831;
    const double C16819 = C47864 * C831;
    const double C22347 = C47533 * C831;
    const double C5897 = C47864 * C1180;
    const double C7019 = C4577 * C1180;
    const double C17255 = C47864 * C1180;
    const double C18361 = C15951 * C1180;
    const double C23519 = C47533 * C1180;
    const double C7301 = C4577 * C2233;
    const double C18635 = C15951 * C2233;
    const double C23735 = C47533 * C2233;
    const double C1865 =
        (ae * (2 * C47070 * C46867 + C47070 * (C46867 + C46890 * C47075)) +
         be * (2 * C47070 * C46868 + C47070 * (C46868 + C46893 * C47075)) +
         C46842 * (2 * C47078 + C47070 * C47081)) /
        C46793;
    const double C1867 = (3 * (C46872 + C46898 * C47075) +
                          C47070 * (2 * C47078 + C47070 * C47081)) /
                         C46793;
    const double C47090 = C47089 + C47088;
    const double C22543 =
        5 * (3 * C47486 + C47036 * C47511) +
        C47036 * (4 * C47511 +
                  C47036 * (3 * C47509 +
                            C47036 * (2 * C47036 * C46914 +
                                      C47036 * (C46914 + C46970 * C47041))));
    const double C22673 =
        3 * C47486 + C47036 * C47511 +
        (3 * C47509 +
         C47036 * (2 * C47036 * C46914 + C47036 * (C46914 + C46970 * C47041))) *
            C47075;
    const double C23067 =
        C47070 * (4 * C47511 +
                  C47036 * (3 * C47509 +
                            C47036 * (2 * C47036 * C46914 +
                                      C47036 * (C46914 + C46970 * C47041))));
    const double C23723 =
        2 * C47070 * C47511 +
        C47070 * (C47511 +
                  (2 * C47036 * C46914 + C47036 * (C46914 + C46970 * C47041)) *
                      C47075);
    const double C44190 =
        5 * (3 * C47502 + C47070 * C47526) +
        C47070 * (4 * C47526 +
                  C47070 * (3 * C47524 +
                            C47070 * (2 * C47070 * C46914 +
                                      C47070 * (C46914 + C46970 * C47075))));
    const double C47019 = C47016 + C46996;
    const double C47018 = C47014 + C46993;
    const double C47017 = C46842 * C47013;
    const double C47066 = C46842 * C47063;
    const double C47168 = C47036 * C47063;
    const double C47171 = C47070 * C47063;
    const double C1036 =
        (2 * C47044 + C47036 * C47047 +
         ae * (2 * C47036 * C46899 + C47036 * (C46899 + C46943 * C47041)) +
         be * (2 * C47036 * C46900 + C47036 * (C46900 + C46945 * C47041)) +
         C46842 * (ae * (2 * C47049 + C47036 * C47061) +
                   be * (2 * C47050 + C47036 * C47062) +
                   C46842 * (2 * C47051 + C47036 * C47063))) /
        C46793;
    const double C1040 =
        (ae * (3 * (C46867 + C46890 * C47041) +
               C47036 * (2 * C47049 + C47036 * C47061)) +
         be * (3 * (C46868 + C46893 * C47041) +
               C47036 * (2 * C47050 + C47036 * C47062)) +
         C46842 * (3 * C47047 + C47036 * (2 * C47051 + C47036 * C47063))) /
        C46793;
    const double C1041 =
        (3 * C47047 + C47036 * (2 * C47051 + C47036 * C47063) +
         ae * (3 * (C46899 + C46943 * C47041) +
               C47036 * (2 * C47104 + C47036 * (C46943 + C47004 * C47041))) +
         be * (3 * (C46900 + C46945 * C47041) +
               C47036 * (2 * C47105 + C47036 * (C46945 + C47006 * C47041))) +
         C46842 *
             (ae * (3 * C47061 +
                    C47036 *
                        (2 * C47106 + C47036 * (C46931 + C46992 * C47041))) +
              be * (3 * C47062 +
                    C47036 *
                        (2 * C47107 + C47036 * (C46934 + C46995 * C47041))) +
              C46842 * (3 * C47063 +
                        C47036 * (2 * C47108 +
                                  C47036 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47041))))) /
        C46793;
    const double C1182 =
        (C47070 * C47047 + ae * C47070 * (C46899 + C46943 * C47041) +
         be * C47070 * (C46900 + C46945 * C47041) +
         C46842 * (ae * C47070 * C47061 + be * C47070 * C47062 +
                   C46842 * C47070 * C47063)) /
        C46793;
    const double C1186 = (ae * (C46867 + C46890 * C47041 + C47061 * C47075) +
                          be * (C46868 + C46893 * C47041 + C47062 * C47075) +
                          C46842 * (C47047 + C47063 * C47075)) /
                         C46793;
    const double C1187 =
        (C47047 + C47063 * C47075 +
         ae * (C46899 + C46943 * C47041 + (C46943 + C47004 * C47041) * C47075) +
         be * (C46900 + C46945 * C47041 + (C46945 + C47006 * C47041) * C47075) +
         C46842 * (ae * (C47061 + (C46931 + C46992 * C47041) * C47075) +
                   be * (C47062 + (C46934 + C46995 * C47041) * C47075) +
                   C46842 * (C47063 +
                             (C47003 + (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47041) *
                                 C47075))) /
        C46793;
    const double C6420 =
        (ae * C47070 *
             (3 * C47061 +
              C47036 * (2 * C47106 + C47036 * (C46931 + C46992 * C47041))) +
         be * C47070 *
             (3 * C47062 +
              C47036 * (2 * C47107 + C47036 * (C46934 + C46995 * C47041))) +
         C46842 * C47070 *
             (3 * C47063 +
              C47036 *
                  (2 * C47108 +
                   C47036 * (C47003 + (C46971 * C46972 +
                                       C46846 * bs[8] * std::pow(C46840, 8)) *
                                          C46792 * C47041)))) /
        C46793;
    const double C7291 =
        (2 * C47070 * C47047 + C47070 * (C47047 + C47063 * C47075)) / C46793;
    const double C47100 = C46842 * C47097;
    const double C47186 = C47070 * C47097;
    const double C1864 =
        (2 * C47078 + C47070 * C47081 +
         ae * (2 * C47070 * C46899 + C47070 * (C46899 + C46943 * C47075)) +
         be * (2 * C47070 * C46900 + C47070 * (C46900 + C46945 * C47075)) +
         C46842 * (ae * (2 * C47083 + C47070 * C47095) +
                   be * (2 * C47084 + C47070 * C47096) +
                   C46842 * (2 * C47085 + C47070 * C47097))) /
        C46793;
    const double C1868 =
        (ae * (3 * (C46867 + C46890 * C47075) +
               C47070 * (2 * C47083 + C47070 * C47095)) +
         be * (3 * (C46868 + C46893 * C47075) +
               C47070 * (2 * C47084 + C47070 * C47096)) +
         C46842 * (3 * C47081 + C47070 * (2 * C47085 + C47070 * C47097))) /
        C46793;
    const double C1869 =
        (3 * C47081 + C47070 * (2 * C47085 + C47070 * C47097) +
         ae * (3 * (C46899 + C46943 * C47075) +
               C47070 * (2 * C47121 + C47070 * (C46943 + C47004 * C47075))) +
         be * (3 * (C46900 + C46945 * C47075) +
               C47070 * (2 * C47122 + C47070 * (C46945 + C47006 * C47075))) +
         C46842 *
             (ae * (3 * C47095 +
                    C47070 *
                        (2 * C47123 + C47070 * (C46931 + C46992 * C47075))) +
              be * (3 * C47096 +
                    C47070 *
                        (2 * C47124 + C47070 * (C46934 + C46995 * C47075))) +
              C46842 * (3 * C47097 +
                        C47070 * (2 * C47125 +
                                  C47070 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47075))))) /
        C46793;
    const double C47117 = C47115 + C47113;
    const double C47148 = C46842 * C47145;
    const double C47183 = C47051 + C47182;
    const double C7015 = C47864 * C1179;
    const double C18357 = C47864 * C1179;
    const double C26385 = C47533 * C1179;
    const double C47134 = C47132 + C47130;
    const double C47015 = C46976 + C47010;
    const double C47830 = C47565 * C47553;
    const double C47870 = C47835 + C47565;
    const double C47838 = C47574 / C47555;
    const double C47834 = C47574 * C47553;
    const double C556 = C47914 - (C47565 * C47556) / C47551;
    const double C47848 = C47647 * C47641;
    const double C47885 = C47850 + C47647;
    const double C47852 = C47654 / C47555;
    const double C47849 = C47654 * C47641;
    const double C1286 = C47918 - (C47647 * C47643) / C47551;
    const double C47854 = C47689 * C47683;
    const double C47891 = C47856 + C47689;
    const double C47858 = C47696 / C47555;
    const double C47855 = C47696 * C47683;
    const double C2118 = C47920 - (C47689 * C47685) / C47551;
    const double C46804 = C46803 * C46800;
    const double C115 =
        ((C46803 * ae) / C46791 - C46790 / C46795) / (2 * C46791) -
        ((C46789 * ((0 * ae) / C46791 - C46796 / C46793) + C47864) * be) /
            C46791;
    const double C4581 =
        (-C46790 / C46791) / (2 * C46791) - (C46803 * be) / C46791;
    const double C15955 = (C46803 * ae) / C46791 - C46790 / C46795;
    const double C135 = (3 * (C46855 + C46842 * C46874 + C46863 * ae) +
                         C46842 * (2 * C46874 + C46842 * C46908 + C46892 * ae) +
                         (2 * C46863 + C46842 * C46892) * ae) /
                        C46791;
    const double C284 =
        (C46855 + C46842 * C46874 + C46863 * ae + C46908 * C47041) / C46791;
    const double C286 =
        (C47036 * (2 * C46874 + C46842 * C46908 + C46892 * ae)) / C46791;
    const double C437 =
        (C46855 + C46842 * C46874 + C46863 * ae + C46908 * C47075) / C46791;
    const double C439 =
        (C47070 * (2 * C46874 + C46842 * C46908 + C46892 * ae)) / C46791;
    const double C824 = (C47070 * C47036 * C46908) / C46791;
    const double C144 =
        (3 * (C46872 + ae * C46873 + be * C46874 + C46842 * C46904) +
         ae * (2 * C46873 + C46842 * C46907 + C46892 * be) +
         be * (2 * C46874 + C46842 * C46908 + C46892 * ae) +
         C46842 *
             (2 * C46904 + ae * C46907 + be * C46908 +
              C46842 * (C46898 + ae * C46899 + be * C46900 +
                        C46842 * (ae * C46890 + be * C46893 +
                                  C46842 *
                                      (C46879 * C46880 +
                                       C46846 * bs[6] * std::pow(C46840, 6)) *
                                      C46792)))) /
        C46793;
    const double C299 =
        (2 * (ae * C47036 * C46867 + be * C47036 * C46868 + C46842 * C47044) +
         ae * C47036 * C46907 + be * C47036 * C46908 +
         C46842 * (C47044 + ae * C47036 * C46899 + be * C47036 * C46900 +
                   C46842 * (ae * C47036 * C46890 + be * C47036 * C46893 +
                             C46842 * C47036 * C46942))) /
        C46793;
    const double C452 =
        (2 * (ae * C47070 * C46867 + be * C47070 * C46868 + C46842 * C47078) +
         ae * C47070 * C46907 + be * C47070 * C46908 +
         C46842 * (C47078 + ae * C47070 * C46899 + be * C47070 * C46900 +
                   C46842 * (ae * C47070 * C46890 + be * C47070 * C46893 +
                             C46842 * C47070 * C46942))) /
        C46793;
    const double C134 = (3 * (C46854 + C46842 * C46873 + C46863 * be) +
                         C46842 * (2 * C46873 + C46842 * C46907 + C46892 * be) +
                         (2 * C46863 + C46842 * C46892) * be) /
                        C46791;
    const double C283 =
        (C46854 + C46842 * C46873 + C46863 * be + C46907 * C47041) / C46791;
    const double C285 =
        (C47036 * (2 * C46873 + C46842 * C46907 + C46892 * be)) / C46791;
    const double C436 =
        (C46854 + C46842 * C46873 + C46863 * be + C46907 * C47075) / C46791;
    const double C438 =
        (C47070 * (2 * C46873 + C46842 * C46907 + C46892 * be)) / C46791;
    const double C823 = (C47070 * C47036 * C46907) / C46791;
    const double C46957 = C46842 * C46954;
    const double C46977 = 3 * C46954;
    const double C46965 = be * C46954;
    const double C47345 = C47036 * C46954;
    const double C1025 =
        (2 * C47036 * C46908 + C47036 * (C46908 + C46954 * C47041)) / C46791;
    const double C1162 = (C47036 * C46908 + C47036 * C46954 * C47075) / C46791;
    const double C1168 = (C47070 * (C46908 + C46954 * C47041)) / C46791;
    const double C1853 =
        (2 * C47070 * C46908 + C47070 * (C46908 + C46954 * C47075)) / C46791;
    const double C46956 = C46842 * C46953;
    const double C46973 = 3 * C46953;
    const double C46964 = ae * C46953;
    const double C300 =
        (2 * (ae * (C46867 + C46890 * C47041) +
              be * (C46868 + C46893 * C47041) + C46842 * C47047) +
         ae * (C46907 + C46953 * C47041) + be * (C46908 + C46954 * C47041) +
         C46842 * (C47047 + ae * (C46899 + C46943 * C47041) +
                   be * (C46900 + C46945 * C47041) +
                   C46842 * (ae * (C46890 + C46931 * C47041) +
                             be * (C46893 + C46934 * C47041) +
                             C46842 * (C46942 + C47003 * C47041)))) /
        C46793;
    const double C453 =
        (2 * (ae * (C46867 + C46890 * C47075) +
              be * (C46868 + C46893 * C47075) + C46842 * C47081) +
         ae * (C46907 + C46953 * C47075) + be * (C46908 + C46954 * C47075) +
         C46842 * (C47081 + ae * (C46899 + C46943 * C47075) +
                   be * (C46900 + C46945 * C47075) +
                   C46842 * (ae * (C46890 + C46931 * C47075) +
                             be * (C46893 + C46934 * C47075) +
                             C46842 * (C46942 + C47003 * C47075)))) /
        C46793;
    const double C832 =
        (2 * (ae * C47070 * C47049 + be * C47070 * C47050 + C46842 * C47141) +
         ae * C47070 * C47036 * C46953 + be * C47070 * C47036 * C46954 +
         C46842 * (C47141 + ae * C47070 * C47104 + be * C47070 * C47105 +
                   C46842 * (ae * C47070 * C47106 + be * C47070 * C47107 +
                             C46842 * C47070 * C47108))) /
        C46793;
    const double C47343 = C47036 * C46953;
    const double C1024 =
        (2 * C47036 * C46907 + C47036 * (C46907 + C46953 * C47041)) / C46791;
    const double C1161 = (C47036 * C46907 + C47036 * C46953 * C47075) / C46791;
    const double C1167 = (C47070 * (C46907 + C46953 * C47041)) / C46791;
    const double C1852 =
        (2 * C47070 * C46907 + C47070 * (C46907 + C46953 * C47075)) / C46791;
    const double C47116 = C47114 + C47110;
    const double C47133 = C47131 + C47127;
    const double C46955 = C46929 + C46952;
    const double C5715 = C47864 * C1037;
    const double C6069 = C4577 * C1037;
    const double C17081 = C47864 * C1037;
    const double C17427 = C15951 * C1037;
    const double C21807 = C47533 * C1037;
    const double C5723 = C4577 * C1039;
    const double C17089 = C15951 * C1039;
    const double C22551 = C47533 * C1039;
    const double C5905 = C47864 * C1183;
    const double C6277 = C4577 * C1183;
    const double C17263 = C47864 * C1183;
    const double C17635 = C15951 * C1183;
    const double C22339 = C47533 * C1183;
    const double C5913 = C4577 * C1185;
    const double C17271 = C15951 * C1185;
    const double C22685 = C47533 * C1185;
    const double C6429 = C4577 * C1553;
    const double C17779 = C15951 * C1553;
    const double C22689 = C47533 * C1553;
    const double C12417 = C47864 * C1865;
    const double C12769 = C4577 * C1865;
    const double C28466 = C47533 * C1865;
    const double C33703 = C47864 * C1865;
    const double C34055 = C15951 * C1865;
    const double C12425 = C4577 * C1867;
    const double C28120 = C47533 * C1867;
    const double C33711 = C15951 * C1867;
    const double C47022 = C46842 * C47019;
    const double C1035 =
        (3 * (C46908 + C46954 * C47041) +
         C47036 * (2 * C47036 * C46954 + C47036 * (C46954 + C47019 * C47041))) /
        C46791;
    const double C1178 =
        (C46908 + C46954 * C47041 + (C46954 + C47019 * C47041) * C47075) /
        C46791;
    const double C1552 =
        (C47070 * (2 * C47036 * C46954 + C47036 * (C46954 + C47019 * C47041))) /
        C46791;
    const double C1863 =
        (3 * (C46908 + C46954 * C47075) +
         C47070 * (2 * C47070 * C46954 + C47070 * (C46954 + C47019 * C47075))) /
        C46791;
    const double C47021 = C46842 * C47018;
    const double C1034 =
        (3 * (C46907 + C46953 * C47041) +
         C47036 * (2 * C47036 * C46953 + C47036 * (C46953 + C47018 * C47041))) /
        C46791;
    const double C1177 =
        (C46907 + C46953 * C47041 + (C46953 + C47018 * C47041) * C47075) /
        C46791;
    const double C1551 =
        (C47070 * (2 * C47036 * C46953 + C47036 * (C46953 + C47018 * C47041))) /
        C46791;
    const double C1862 =
        (3 * (C46907 + C46953 * C47075) +
         C47070 * (2 * C47070 * C46953 + C47070 * (C46953 + C47018 * C47075))) /
        C46791;
    const double C47020 = C46990 + C47017;
    const double C47068 = C47067 + C47066;
    const double C47169 = C47167 + C47168;
    const double C1445 =
        (2 * (ae * C47070 * C47061 + be * C47070 * C47062 + C46842 * C47171) +
         ae * C47070 * (C46953 + C47018 * C47041) +
         be * C47070 * (C46954 + C47019 * C47041) +
         C46842 *
             (C47171 + ae * C47070 * (C46943 + C47004 * C47041) +
              be * C47070 * (C46945 + C47006 * C47041) +
              C46842 * (ae * C47070 * (C46931 + C46992 * C47041) +
                        be * C47070 * (C46934 + C46995 * C47041) +
                        C46842 * C47070 *
                            (C47003 + (C46971 * C46972 +
                                       C46846 * bs[8] * std::pow(C46840, 8)) *
                                          C46792 * C47041)))) /
        C46793;
    const double C7292 =
        (ae * (2 * C47070 * C47061 +
               C47070 * (C47061 + (C46931 + C46992 * C47041) * C47075)) +
         be * (2 * C47070 * C47062 +
               C47070 * (C47062 + (C46934 + C46995 * C47041) * C47075)) +
         C46842 * (2 * C47171 +
                   C47070 * (C47063 +
                             (C47003 + (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47041) *
                                 C47075))) /
        C46793;
    const double C23364 =
        (3 * (C47047 + C47063 * C47075) +
         C47070 * (2 * C47171 +
                   C47070 * (C47063 +
                             (C47003 + (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47041) *
                                 C47075))) /
        C46793;
    const double C6065 = C47864 * C1036;
    const double C17423 = C47864 * C1036;
    const double C21819 = C47533 * C1036;
    const double C5719 = C47864 * C1040;
    const double C17085 = C47864 * C1040;
    const double C22811 = C47533 * C1040;
    const double C6273 = C47864 * C1182;
    const double C17631 = C47864 * C1182;
    const double C22343 = C47533 * C1182;
    const double C5909 = C47864 * C1186;
    const double C17267 = C47864 * C1186;
    const double C23515 = C47533 * C1186;
    const double C23731 = C47533 * C7291;
    const double C47102 = C47101 + C47100;
    const double C47187 = C47185 + C47186;
    const double C12765 = C47864 * C1864;
    const double C34051 = C47864 * C1864;
    const double C42932 = C47533 * C1864;
    const double C12421 = C47864 * C1868;
    const double C33707 = C47864 * C1868;
    const double C44449 = C47533 * C1868;
    const double C47118 = C46842 * C47117;
    const double C47150 = C47149 + C47148;
    const double C2019 =
        (2 * (ae * (C47049 + C47106 * C47075) +
              be * (C47050 + C47107 * C47075) + C46842 * C47183) +
         ae * (C47036 * C46953 + C47036 * C47018 * C47075) +
         be * (C47036 * C46954 + C47036 * C47019 * C47075) +
         C46842 * (C47183 + ae * (C47104 + C47036 * C47004 * C47075) +
                   be * (C47105 + C47036 * C47006 * C47075) +
                   C46842 * (ae * (C47106 + C47036 * C46992 * C47075) +
                             be * (C47107 + C47036 * C46995 * C47075) +
                             C46842 * (C47108 + C47036 *
                                                    (C46971 * C46972 +
                                                     C46846 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46792 * C47075)))) /
        C46793;
    const double C2234 =
        (ae * (2 * C47070 * C47049 + C47070 * (C47049 + C47106 * C47075)) +
         be * (2 * C47070 * C47050 + C47070 * (C47050 + C47107 * C47075)) +
         C46842 * (2 * C47141 + C47070 * C47183)) /
        C46793;
    const double C2235 =
        (2 * C47141 + C47070 * C47183 +
         ae * (2 * C47070 * C47104 +
               C47070 * (C47104 + C47036 * C47004 * C47075)) +
         be * (2 * C47070 * C47105 +
               C47070 * (C47105 + C47036 * C47006 * C47075)) +
         C46842 *
             (ae * (2 * C47143 + C47070 * (C47106 + C47036 * C46992 * C47075)) +
              be * (2 * C47144 + C47070 * (C47107 + C47036 * C46995 * C47075)) +
              C46842 * (2 * C47145 +
                        C47070 * (C47108 +
                                  C47036 *
                                      (C46971 * C46972 +
                                       C46846 * bs[8] * std::pow(C46840, 8)) *
                                      C46792 * C47075)))) /
        C46793;
    const double C6815 = (3 * (C47044 + C47051 * C47075) +
                          C47070 * (2 * C47141 + C47070 * C47183)) /
                         C46793;
    const double C6816 =
        (ae * (3 * (C47049 + C47106 * C47075) +
               C47070 * (2 * C47143 +
                         C47070 * (C47106 + C47036 * C46992 * C47075))) +
         be * (3 * (C47050 + C47107 * C47075) +
               C47070 * (2 * C47144 +
                         C47070 * (C47107 + C47036 * C46995 * C47075))) +
         C46842 * (3 * C47183 +
                   C47070 * (2 * C47145 +
                             C47070 * (C47108 + C47036 *
                                                    (C46971 * C46972 +
                                                     C46846 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46792 * C47075)))) /
        C46793;
    const double C28107 =
        (4 * (2 * C47141 + C47070 * C47183) +
         C47070 * (3 * C47183 +
                   C47070 * (2 * C47145 +
                             C47070 * (C47108 + C47036 *
                                                    (C46971 * C46972 +
                                                     C46846 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46792 * C47075)))) /
        C46793;
    const double C47135 = C46842 * C47134;
    const double C125 = 5 * (3 * C46892 + C46842 * C46944) +
                        C46842 * (4 * C46944 + C46842 * C47015);
    const double C272 = 3 * C46892 + C46842 * C46944 + C47015 * C47041;
    const double C425 = 3 * C46892 + C46842 * C46944 + C47015 * C47075;
    const double C560 = C47036 * (4 * C46944 + C46842 * C47015);
    const double C664 = C47070 * (4 * C46944 + C46842 * C47015);
    const double C818 = C47070 * C47036 * C47015;
    const double C47866 = C47830 / C47551;
    const double C47901 = C47870 / C47555;
    const double C47902 = C47872 + C47838;
    const double C558 = C47838 - C47572 / C47569;
    const double C47869 = C47834 / C47551;
    const double C47882 = C47848 / C47551;
    const double C47908 = C47885 / C47555;
    const double C47909 = C47886 + C47852;
    const double C1288 = C47852 - C47652 / C47569;
    const double C47884 = C47849 / C47551;
    const double C47888 = C47854 / C47551;
    const double C47911 = C47891 / C47555;
    const double C47912 = C47892 + C47858;
    const double C2120 = C47858 - C47694 / C47569;
    const double C47890 = C47855 / C47551;
    const double C46809 = C46789 * C46804;
    const double C114 =
        (ae * -2 * C46790) / (C46793 * 2 * C46791) -
        (((C46789 * ((-4 * C46796) / C46791 - (C46789 * C46804) / C46791) *
           ae) /
              C46791 +
          2 * ((C46803 * ae) / C46791 - C46790 / C46795)) *
         be) /
            C46791 -
        C46804 / C46795;
    const double C118 = (-C46804 / C46791) / (4 * C46793);
    const double C4584 = (-C46804 / C46791) / (2 * C46791);
    const double C15958 = (-C46804 / C46791) / (2 * C46791);
    const double C21672 = -C46804 / C46791;
    const double C4766 = C4581 * C274;
    const double C4764 = C4581 * C273;
    const double C4758 = C4581 * C282;
    const double C4756 = C4581 * C281;
    const double C4750 = C4581 * C276;
    const double C4748 = C4581 * C275;
    const double C4746 = C4581 * C280;
    const double C4744 = C4581 * C279;
    const double C4734 = C4581 * C278;
    const double C4732 = C4581 * C277;
    const double C5440 = C4581 * C822;
    const double C5438 = C4581 * C821;
    const double C5436 = C4581 * C820;
    const double C5434 = C4581 * C819;
    const double C5722 = C4581 * C1031;
    const double C5720 = C4581 * C1030;
    const double C5710 = C4581 * C1029;
    const double C5708 = C4581 * C1028;
    const double C5912 = C4581 * C1174;
    const double C5910 = C4581 * C1173;
    const double C5900 = C4581 * C1172;
    const double C5898 = C4581 * C1171;
    const double C5892 = C4581 * C1166;
    const double C5890 = C4581 * C1165;
    const double C6068 = C4581 * C1027;
    const double C6066 = C4581 * C1026;
    const double C6276 = C4581 * C1170;
    const double C6274 = C4581 * C1169;
    const double C6428 = C4581 * C1548;
    const double C6426 = C4581 * C1547;
    const double C7018 = C4581 * C1164;
    const double C7016 = C4581 * C1163;
    const double C7300 = C4581 * C2228;
    const double C7298 = C4581 * C2227;
    const double C10682 = C4581 * C427;
    const double C10680 = C4581 * C426;
    const double C10674 = C4581 * C435;
    const double C10672 = C4581 * C434;
    const double C10666 = C4581 * C429;
    const double C10664 = C4581 * C428;
    const double C10662 = C4581 * C433;
    const double C10660 = C4581 * C432;
    const double C10650 = C4581 * C431;
    const double C10648 = C4581 * C430;
    const double C12424 = C4581 * C1859;
    const double C12422 = C4581 * C1858;
    const double C12412 = C4581 * C1857;
    const double C12410 = C4581 * C1856;
    const double C12768 = C4581 * C1855;
    const double C12766 = C4581 * C1854;
    const double C16140 = C15955 * C274;
    const double C16138 = C15955 * C273;
    const double C16132 = C15955 * C282;
    const double C16130 = C15955 * C281;
    const double C16124 = C15955 * C276;
    const double C16122 = C15955 * C275;
    const double C16120 = C15955 * C280;
    const double C16118 = C15955 * C279;
    const double C16108 = C15955 * C278;
    const double C16106 = C15955 * C277;
    const double C16814 = C15955 * C822;
    const double C16812 = C15955 * C821;
    const double C16810 = C15955 * C820;
    const double C16808 = C15955 * C819;
    const double C17088 = C15955 * C1031;
    const double C17086 = C15955 * C1030;
    const double C17076 = C15955 * C1029;
    const double C17074 = C15955 * C1028;
    const double C17270 = C15955 * C1174;
    const double C17268 = C15955 * C1173;
    const double C17258 = C15955 * C1172;
    const double C17256 = C15955 * C1171;
    const double C17250 = C15955 * C1166;
    const double C17248 = C15955 * C1165;
    const double C17426 = C15955 * C1027;
    const double C17424 = C15955 * C1026;
    const double C17634 = C15955 * C1170;
    const double C17632 = C15955 * C1169;
    const double C17778 = C15955 * C1548;
    const double C17776 = C15955 * C1547;
    const double C18360 = C15955 * C1164;
    const double C18358 = C15955 * C1163;
    const double C18634 = C15955 * C2228;
    const double C18632 = C15955 * C2227;
    const double C31976 = C15955 * C427;
    const double C31974 = C15955 * C426;
    const double C31968 = C15955 * C435;
    const double C31966 = C15955 * C434;
    const double C31960 = C15955 * C429;
    const double C31958 = C15955 * C428;
    const double C31956 = C15955 * C433;
    const double C31954 = C15955 * C432;
    const double C31944 = C15955 * C431;
    const double C31942 = C15955 * C430;
    const double C33710 = C15955 * C1859;
    const double C33708 = C15955 * C1858;
    const double C33698 = C15955 * C1857;
    const double C33696 = C15955 * C1856;
    const double C34054 = C15955 * C1855;
    const double C34052 = C15955 * C1854;
    const double C4778 = C4581 * C284;
    const double C4762 = C4583 * C284;
    const double C16152 = C15955 * C284;
    const double C16136 = C15957 * C284;
    const double C21814 = C21671 * C284;
    const double C4770 = C4583 * C286;
    const double C5094 = C4581 * C286;
    const double C16144 = C15957 * C286;
    const double C16468 = C15955 * C286;
    const double C22066 = C21671 * C286;
    const double C10694 = C4581 * C437;
    const double C10678 = C4583 * C437;
    const double C26388 = C21671 * C437;
    const double C31988 = C15955 * C437;
    const double C31972 = C15957 * C437;
    const double C10686 = C4583 * C439;
    const double C10994 = C4581 * C439;
    const double C26682 = C21671 * C439;
    const double C31980 = C15957 * C439;
    const double C32288 = C15955 * C439;
    const double C5452 = C4581 * C824;
    const double C5444 = C4583 * C824;
    const double C16826 = C15955 * C824;
    const double C16818 = C15957 * C824;
    const double C22346 = C21671 * C824;
    const double C4771 = C47864 * C299;
    const double C5095 = C4577 * C299;
    const double C16145 = C47864 * C299;
    const double C16469 = C15951 * C299;
    const double C22067 = C47533 * C299;
    const double C10687 = C47864 * C452;
    const double C10995 = C4577 * C452;
    const double C26683 = C47533 * C452;
    const double C31981 = C47864 * C452;
    const double C32289 = C15951 * C452;
    const double C4776 = C4581 * C283;
    const double C4760 = C4583 * C283;
    const double C16150 = C15955 * C283;
    const double C16134 = C15957 * C283;
    const double C21812 = C21671 * C283;
    const double C4768 = C4583 * C285;
    const double C5092 = C4581 * C285;
    const double C16142 = C15957 * C285;
    const double C16466 = C15955 * C285;
    const double C22064 = C21671 * C285;
    const double C10692 = C4581 * C436;
    const double C10676 = C4583 * C436;
    const double C26386 = C21671 * C436;
    const double C31986 = C15955 * C436;
    const double C31970 = C15957 * C436;
    const double C10684 = C4583 * C438;
    const double C10992 = C4581 * C438;
    const double C26680 = C21671 * C438;
    const double C31978 = C15957 * C438;
    const double C32286 = C15955 * C438;
    const double C5450 = C4581 * C823;
    const double C5442 = C4583 * C823;
    const double C16824 = C15955 * C823;
    const double C16816 = C15957 * C823;
    const double C22344 = C21671 * C823;
    const double C46959 = C46919 + C46957;
    const double C2232 =
        (2 * C47070 * C47345 + C47070 * (C47345 + C47036 * C47019 * C47075)) /
        C46791;
    const double C6064 = C4583 * C1025;
    const double C17422 = C15957 * C1025;
    const double C21818 = C21671 * C1025;
    const double C7014 = C4583 * C1162;
    const double C18356 = C15957 * C1162;
    const double C26384 = C21671 * C1162;
    const double C6272 = C4583 * C1168;
    const double C17630 = C15957 * C1168;
    const double C22342 = C21671 * C1168;
    const double C12764 = C4583 * C1853;
    const double C34050 = C15957 * C1853;
    const double C42931 = C21671 * C1853;
    const double C46958 = C46917 + C46956;
    const double C46979 = C46963 + C46964;
    const double C4775 = C47864 * C300;
    const double C16149 = C47864 * C300;
    const double C22071 = C47533 * C300;
    const double C10691 = C47864 * C453;
    const double C31985 = C47864 * C453;
    const double C43135 = C47533 * C453;
    const double C5449 = C47864 * C832;
    const double C16823 = C47864 * C832;
    const double C26545 = C47533 * C832;
    const double C2231 =
        (2 * C47070 * C47343 + C47070 * (C47343 + C47036 * C47018 * C47075)) /
        C46791;
    const double C6062 = C4583 * C1024;
    const double C17420 = C15957 * C1024;
    const double C21816 = C21671 * C1024;
    const double C7012 = C4583 * C1161;
    const double C18354 = C15957 * C1161;
    const double C26382 = C21671 * C1161;
    const double C6270 = C4583 * C1167;
    const double C17628 = C15957 * C1167;
    const double C22340 = C21671 * C1167;
    const double C12762 = C4583 * C1852;
    const double C34048 = C15957 * C1852;
    const double C42929 = C21671 * C1852;
    const double C47025 = C46978 + C47022;
    const double C47024 = C46974 + C47021;
    const double C47023 = C46842 * C47020;
    const double C1295 =
        (2 * (ae * (2 * C47049 + C47036 * C47061) +
              be * (2 * C47050 + C47036 * C47062) + C46842 * C47169) +
         ae * (2 * C47036 * C46953 + C47036 * (C46953 + C47018 * C47041)) +
         be * (2 * C47036 * C46954 + C47036 * (C46954 + C47019 * C47041)) +
         C46842 *
             (C47169 + ae * (2 * C47104 + C47036 * (C46943 + C47004 * C47041)) +
              be * (2 * C47105 + C47036 * (C46945 + C47006 * C47041)) +
              C46842 *
                  (ae * (2 * C47106 + C47036 * (C46931 + C46992 * C47041)) +
                   be * (2 * C47107 + C47036 * (C46934 + C46995 * C47041)) +
                   C46842 * (2 * C47108 +
                             C47036 * (C47003 +
                                       (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47041))))) /
        C46793;
    const double C1554 = (ae * C47070 * (2 * C47049 + C47036 * C47061) +
                          be * C47070 * (2 * C47050 + C47036 * C47062) +
                          C46842 * C47070 * C47169) /
                         C46793;
    const double C1555 =
        (C47070 * C47169 +
         ae * C47070 * (2 * C47104 + C47036 * (C46943 + C47004 * C47041)) +
         be * C47070 * (2 * C47105 + C47036 * (C46945 + C47006 * C47041)) +
         C46842 *
             (ae * C47070 * (2 * C47106 + C47036 * (C46931 + C46992 * C47041)) +
              be * C47070 * (2 * C47107 + C47036 * (C46934 + C46995 * C47041)) +
              C46842 * C47070 *
                  (2 * C47108 +
                   C47036 * (C47003 + (C46971 * C46972 +
                                       C46846 * bs[8] * std::pow(C46840, 8)) *
                                          C46792 * C47041)))) /
        C46793;
    const double C5705 = (4 * (2 * C47044 + C47036 * C47047) +
                          C47036 * (3 * C47047 + C47036 * C47169)) /
                         C46793;
    const double C5706 =
        (ae * (4 * (2 * C47049 + C47036 * C47061) +
               C47036 * (3 * C47061 +
                         C47036 * (2 * C47106 +
                                   C47036 * (C46931 + C46992 * C47041)))) +
         be * (4 * (2 * C47050 + C47036 * C47062) +
               C47036 * (3 * C47062 +
                         C47036 * (2 * C47107 +
                                   C47036 * (C46934 + C46995 * C47041)))) +
         C46842 *
             (4 * C47169 +
              C47036 * (3 * C47063 +
                        C47036 * (2 * C47108 +
                                  C47036 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47041))))) /
        C46793;
    const double C5887 =
        (2 * C47044 + C47036 * C47047 + C47169 * C47075) / C46793;
    const double C5888 =
        (ae * (2 * C47049 + C47036 * C47061 +
               (2 * C47106 + C47036 * (C46931 + C46992 * C47041)) * C47075) +
         be * (2 * C47050 + C47036 * C47062 +
               (2 * C47107 + C47036 * (C46934 + C46995 * C47041)) * C47075) +
         C46842 * (C47169 +
                   (2 * C47108 +
                    C47036 * (C47003 + (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47041)) *
                       C47075)) /
        C46793;
    const double C6419 = (C47070 * (3 * C47047 + C47036 * C47169)) / C46793;
    const double C22546 =
        (5 * (3 * C47047 + C47036 * C47169) +
         C47036 *
             (4 * C47169 +
              C47036 * (3 * C47063 +
                        C47036 * (2 * C47108 +
                                  C47036 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47041))))) /
        C46793;
    const double C22676 =
        (3 * C47047 + C47036 * C47169 +
         (3 * C47063 +
          C47036 * (2 * C47108 +
                    C47036 * (C47003 + (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47041))) *
             C47075) /
        C46793;
    const double C23070 =
        (C47070 *
         (4 * C47169 +
          C47036 * (3 * C47063 +
                    C47036 * (2 * C47108 +
                              C47036 * (C47003 +
                                        (C46971 * C46972 +
                                         C46846 * bs[8] * std::pow(C46840, 8)) *
                                            C46792 * C47041))))) /
        C46793;
    const double C23726 =
        (2 * C47070 * C47169 +
         C47070 * (C47169 +
                   (2 * C47108 +
                    C47036 * (C47003 + (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47041)) *
                       C47075)) /
        C46793;
    const double C2125 =
        (2 * (ae * (2 * C47083 + C47070 * C47095) +
              be * (2 * C47084 + C47070 * C47096) + C46842 * C47187) +
         ae * (2 * C47070 * C46953 + C47070 * (C46953 + C47018 * C47075)) +
         be * (2 * C47070 * C46954 + C47070 * (C46954 + C47019 * C47075)) +
         C46842 *
             (C47187 + ae * (2 * C47121 + C47070 * (C46943 + C47004 * C47075)) +
              be * (2 * C47122 + C47070 * (C46945 + C47006 * C47075)) +
              C46842 *
                  (ae * (2 * C47123 + C47070 * (C46931 + C46992 * C47075)) +
                   be * (2 * C47124 + C47070 * (C46934 + C46995 * C47075)) +
                   C46842 * (2 * C47125 +
                             C47070 * (C47003 +
                                       (C46971 * C46972 +
                                        C46846 * bs[8] * std::pow(C46840, 8)) *
                                           C46792 * C47075))))) /
        C46793;
    const double C12407 = (4 * (2 * C47078 + C47070 * C47081) +
                           C47070 * (3 * C47081 + C47070 * C47187)) /
                          C46793;
    const double C12408 =
        (ae * (4 * (2 * C47083 + C47070 * C47095) +
               C47070 * (3 * C47095 +
                         C47070 * (2 * C47123 +
                                   C47070 * (C46931 + C46992 * C47075)))) +
         be * (4 * (2 * C47084 + C47070 * C47096) +
               C47070 * (3 * C47096 +
                         C47070 * (2 * C47124 +
                                   C47070 * (C46934 + C46995 * C47075)))) +
         C46842 *
             (4 * C47187 +
              C47070 * (3 * C47097 +
                        C47070 * (2 * C47125 +
                                  C47070 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47075))))) /
        C46793;
    const double C44193 =
        (5 * (3 * C47081 + C47070 * C47187) +
         C47070 *
             (4 * C47187 +
              C47070 * (3 * C47097 +
                        C47070 * (2 * C47125 +
                                  C47070 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47075))))) /
        C46793;
    const double C47119 = C47116 + C47118;
    const double C7297 = C47864 * C2234;
    const double C18631 = C47864 * C2234;
    const double C28327 = C47533 * C2234;
    const double C28116 = C47533 * C6815;
    const double C47136 = C47133 + C47135;
    const double C47922 = C47866 + C47914;
    const double C557 = C47901 - (C47574 * C47556) / C47551;
    const double C111 = C47902 / C47555 - C47572 / C47873;
    const double C47915 = C47869 + C47901;
    const double C47923 = C47882 + C47918;
    const double C1287 = C47908 - (C47654 * C47643) / C47551;
    const double C1015 = C47909 / C47555 - C47652 / C47873;
    const double C47919 = C47884 + C47908;
    const double C47924 = C47888 + C47920;
    const double C2119 = C47911 - (C47696 * C47685) / C47551;
    const double C1844 = C47912 / C47555 - C47694 / C47873;
    const double C47921 = C47890 + C47911;
    const double C116 =
        (((-4 * C46796) / C46791 - C46809 / C46791) * ae) / C46795 -
        ((2 * ((0 * ae) / C46791 - C46796 / C46793) - C46809 / C46795) * be) /
            C46791;
    const double C4582 =
        -(((-4 * C46796) / C46791 - C46809 / C46791) * be) / C46791;
    const double C15956 =
        (((-4 * C46796) / C46791 - C46809 / C46791) * ae) / C46791;
    const double C4773 = C4584 * C270;
    const double C4769 = C4584 * C269;
    const double C4761 = C4584 * C268;
    const double C4753 = C4584 * C263;
    const double C4741 = C4584 * C267;
    const double C4737 = C4584 * C264;
    const double C5097 = C4584 * C271;
    const double C5447 = C4584 * C817;
    const double C5443 = C4584 * C816;
    const double C5431 = C4584 * C815;
    const double C5717 = C4584 * C1022;
    const double C5713 = C4584 * C1019;
    const double C5907 = C4584 * C1159;
    const double C5903 = C4584 * C1156;
    const double C5895 = C4584 * C1153;
    const double C6063 = C4584 * C1018;
    const double C6271 = C4584 * C1155;
    const double C6423 = C4584 * C1545;
    const double C7013 = C4584 * C1152;
    const double C7295 = C4584 * C2225;
    const double C10689 = C4584 * C423;
    const double C10685 = C4584 * C422;
    const double C10677 = C4584 * C421;
    const double C10669 = C4584 * C416;
    const double C10657 = C4584 * C420;
    const double C10653 = C4584 * C417;
    const double C10997 = C4584 * C424;
    const double C12419 = C4584 * C1850;
    const double C12415 = C4584 * C1847;
    const double C12763 = C4584 * C1846;
    const double C16147 = C15958 * C270;
    const double C16143 = C15958 * C269;
    const double C16135 = C15958 * C268;
    const double C16127 = C15958 * C263;
    const double C16115 = C15958 * C267;
    const double C16111 = C15958 * C264;
    const double C16471 = C15958 * C271;
    const double C16821 = C15958 * C817;
    const double C16817 = C15958 * C816;
    const double C16805 = C15958 * C815;
    const double C17083 = C15958 * C1022;
    const double C17079 = C15958 * C1019;
    const double C17265 = C15958 * C1159;
    const double C17261 = C15958 * C1156;
    const double C17253 = C15958 * C1153;
    const double C17421 = C15958 * C1018;
    const double C17629 = C15958 * C1155;
    const double C17773 = C15958 * C1545;
    const double C18355 = C15958 * C1152;
    const double C18629 = C15958 * C2225;
    const double C31983 = C15958 * C423;
    const double C31979 = C15958 * C422;
    const double C31971 = C15958 * C421;
    const double C31963 = C15958 * C416;
    const double C31951 = C15958 * C420;
    const double C31947 = C15958 * C417;
    const double C32291 = C15958 * C424;
    const double C33705 = C15958 * C1850;
    const double C33701 = C15958 * C1847;
    const double C34049 = C15958 * C1846;
    const double C21817 = C21672 * C1018;
    const double C21813 = C21672 * C268;
    const double C21809 = C21672 * C263;
    const double C21805 = C21672 * C1019;
    const double C21801 = C21672 * C267;
    const double C21797 = C21672 * C264;
    const double C21793 = C21672 * C1020;
    const double C21789 = C21672 * C266;
    const double C21785 = C21672 * C265;
    const double C22069 = C21672 * C270;
    const double C22065 = C21672 * C269;
    const double C22345 = C21672 * C816;
    const double C22341 = C21672 * C1155;
    const double C22337 = C21672 * C1156;
    const double C22333 = C21672 * C815;
    const double C22329 = C21672 * C814;
    const double C22325 = C21672 * C1157;
    const double C22553 = C21672 * C5699;
    const double C22549 = C21672 * C1021;
    const double C22691 = C21672 * C5881;
    const double C22687 = C21672 * C1544;
    const double C22683 = C21672 * C1158;
    const double C22679 = C21672 * C1154;
    const double C22809 = C21672 * C1022;
    const double C22963 = C21672 * C1545;
    const double C23073 = C21672 * C6413;
    const double C23517 = C21672 * C1153;
    const double C23513 = C21672 * C1159;
    const double C23733 = C21672 * C2224;
    const double C23729 = C21672 * C7285;
    const double C26387 = C21672 * C421;
    const double C26383 = C21672 * C1152;
    const double C26379 = C21672 * C416;
    const double C26375 = C21672 * C420;
    const double C26371 = C21672 * C417;
    const double C26367 = C21672 * C419;
    const double C26363 = C21672 * C418;
    const double C26543 = C21672 * C817;
    const double C26681 = C21672 * C422;
    const double C28118 = C21672 * C1849;
    const double C28114 = C21672 * C6809;
    const double C28110 = C21672 * C1848;
    const double C28325 = C21672 * C2225;
    const double C28464 = C21672 * C1847;
    const double C42930 = C21672 * C1846;
    const double C43133 = C21672 * C423;
    const double C44196 = C21672 * C12401;
    const double C44447 = C21672 * C1850;
    const double C46961 = C46959 + C46941;
    const double C46960 = C46958 + C46938;
    const double C46989 = C46979 + C46965;
    const double C47028 = C47025 + C47002;
    const double C47027 = C47024 + C46999;
    const double C6425 = C47864 * C1554;
    const double C17775 = C47864 * C1554;
    const double C22965 = C47533 * C1554;
    const double C22555 = C47533 * C5705;
    const double C22693 = C47533 * C5887;
    const double C23075 = C47533 * C6419;
    const double C44198 = C47533 * C12407;
    const double C108 =
        (C47913 + 2 * C47565) / C47555 - (C47922 * C47556) / C47551;
    const double C109 =
        (C47900 + 2 * C47574 + C47922) / C47555 - (C47915 * C47556) / C47551;
    const double C110 = (C47871 + C47571 / C47551 + C47915) / C47555 -
                        (C47902 * C47556) / C47551;
    const double C1012 =
        (C47916 + 2 * C47647) / C47555 - (C47923 * C47643) / C47551;
    const double C1013 =
        (C47904 + 2 * C47654 + C47923) / C47555 - (C47919 * C47643) / C47551;
    const double C1014 = (C47877 + C47651 / C47551 + C47919) / C47555 -
                         (C47909 * C47643) / C47551;
    const double C1841 =
        (C47917 + 2 * C47689) / C47555 - (C47924 * C47685) / C47551;
    const double C1842 =
        (C47906 + 2 * C47696 + C47924) / C47555 - (C47921 * C47685) / C47551;
    const double C1843 = (C47880 + C47693 / C47551 + C47921) / C47555 -
                         (C47912 * C47685) / C47551;
    const double C4777 = C4582 * C268;
    const double C4765 = C4582 * C263;
    const double C4757 = C4582 * C267;
    const double C4749 = C4582 * C264;
    const double C4745 = C4582 * C266;
    const double C4733 = C4582 * C265;
    const double C5093 = C4582 * C269;
    const double C5451 = C4582 * C816;
    const double C5439 = C4582 * C815;
    const double C5435 = C4582 * C814;
    const double C5721 = C4582 * C1021;
    const double C5709 = C4582 * C1020;
    const double C5911 = C4582 * C1158;
    const double C5899 = C4582 * C1157;
    const double C5891 = C4582 * C1154;
    const double C6067 = C4582 * C1019;
    const double C6275 = C4582 * C1156;
    const double C6427 = C4582 * C1544;
    const double C7017 = C4582 * C1153;
    const double C7299 = C4582 * C2224;
    const double C10693 = C4582 * C421;
    const double C10681 = C4582 * C416;
    const double C10673 = C4582 * C420;
    const double C10665 = C4582 * C417;
    const double C10661 = C4582 * C419;
    const double C10649 = C4582 * C418;
    const double C10993 = C4582 * C422;
    const double C12423 = C4582 * C1849;
    const double C12411 = C4582 * C1848;
    const double C12767 = C4582 * C1847;
    const double C16151 = C15956 * C268;
    const double C16139 = C15956 * C263;
    const double C16131 = C15956 * C267;
    const double C16123 = C15956 * C264;
    const double C16119 = C15956 * C266;
    const double C16107 = C15956 * C265;
    const double C16467 = C15956 * C269;
    const double C16825 = C15956 * C816;
    const double C16813 = C15956 * C815;
    const double C16809 = C15956 * C814;
    const double C17087 = C15956 * C1021;
    const double C17075 = C15956 * C1020;
    const double C17269 = C15956 * C1158;
    const double C17257 = C15956 * C1157;
    const double C17249 = C15956 * C1154;
    const double C17425 = C15956 * C1019;
    const double C17633 = C15956 * C1156;
    const double C17777 = C15956 * C1544;
    const double C18359 = C15956 * C1153;
    const double C18633 = C15956 * C2224;
    const double C31987 = C15956 * C421;
    const double C31975 = C15956 * C416;
    const double C31967 = C15956 * C420;
    const double C31959 = C15956 * C417;
    const double C31955 = C15956 * C419;
    const double C31943 = C15956 * C418;
    const double C32287 = C15956 * C422;
    const double C33709 = C15956 * C1849;
    const double C33697 = C15956 * C1848;
    const double C34053 = C15956 * C1847;
    const double C4789 = C4768 - C4769;
    const double C4787 = C4760 - C4761;
    const double C4785 = C4752 - C4753;
    const double C4782 = C4740 - C4741;
    const double C4781 = C4736 - C4737;
    const double C5457 = C5442 - C5443;
    const double C5454 = C5430 - C5431;
    const double C5726 = C5716 - C5717;
    const double C5725 = C5712 - C5713;
    const double C5918 = C5906 - C5907;
    const double C5917 = C5902 - C5903;
    const double C5915 = C5894 - C5895;
    const double C6070 = C6062 - C6063;
    const double C6278 = C6270 - C6271;
    const double C6430 = C6422 - C6423;
    const double C7020 = C7012 - C7013;
    const double C7302 = C7294 - C7295;
    const double C10705 = C10684 - C10685;
    const double C10703 = C10676 - C10677;
    const double C10701 = C10668 - C10669;
    const double C10698 = C10656 - C10657;
    const double C10697 = C10652 - C10653;
    const double C12428 = C12418 - C12419;
    const double C12427 = C12414 - C12415;
    const double C12770 = C12762 - C12763;
    const double C16163 = C16142 - C16143;
    const double C16161 = C16134 - C16135;
    const double C16159 = C16126 - C16127;
    const double C16156 = C16114 - C16115;
    const double C16155 = C16110 - C16111;
    const double C16831 = C16816 - C16817;
    const double C16828 = C16804 - C16805;
    const double C17092 = C17082 - C17083;
    const double C17091 = C17078 - C17079;
    const double C17276 = C17264 - C17265;
    const double C17275 = C17260 - C17261;
    const double C17273 = C17252 - C17253;
    const double C17428 = C17420 - C17421;
    const double C17636 = C17628 - C17629;
    const double C17780 = C17772 - C17773;
    const double C18362 = C18354 - C18355;
    const double C18636 = C18628 - C18629;
    const double C31999 = C31978 - C31979;
    const double C31997 = C31970 - C31971;
    const double C31995 = C31962 - C31963;
    const double C31992 = C31950 - C31951;
    const double C31991 = C31946 - C31947;
    const double C33714 = C33704 - C33705;
    const double C33713 = C33700 - C33701;
    const double C34056 = C34048 - C34049;
    const double C21828 = C21816 - C21817;
    const double C21827 = C21812 - C21813;
    const double C21826 = C21808 - C21809;
    const double C21825 = C21804 - C21805;
    const double C21824 = C21800 - C21801;
    const double C21823 = C21796 - C21797;
    const double C21822 = C21792 - C21793;
    const double C21821 = C21788 - C21789;
    const double C21820 = C21784 - C21785;
    const double C22072 = C22064 - C22065;
    const double C22353 = C22344 - C22345;
    const double C22352 = C22340 - C22341;
    const double C22351 = C22336 - C22337;
    const double C22350 = C22332 - C22333;
    const double C22349 = C22328 - C22329;
    const double C22348 = C22324 - C22325;
    const double C22557 = C22552 - C22553;
    const double C22556 = C22548 - C22549;
    const double C22697 = C22690 - C22691;
    const double C22696 = C22686 - C22687;
    const double C22695 = C22682 - C22683;
    const double C22694 = C22678 - C22679;
    const double C22812 = C22808 - C22809;
    const double C22966 = C22962 - C22963;
    const double C23076 = C23072 - C23073;
    const double C23521 = C23516 - C23517;
    const double C23520 = C23512 - C23513;
    const double C23737 = C23732 - C23733;
    const double C23736 = C23728 - C23729;
    const double C26396 = C26386 - C26387;
    const double C26395 = C26382 - C26383;
    const double C26394 = C26378 - C26379;
    const double C26393 = C26374 - C26375;
    const double C26392 = C26370 - C26371;
    const double C26391 = C26366 - C26367;
    const double C26390 = C26362 - C26363;
    const double C26684 = C26680 - C26681;
    const double C28123 = C28117 - C28118;
    const double C28122 = C28113 - C28114;
    const double C28121 = C28109 - C28110;
    const double C28329 = C28324 - C28325;
    const double C28467 = C28463 - C28464;
    const double C42933 = C42929 - C42930;
    const double C44199 = C44195 - C44196;
    const double C44450 = C44446 - C44447;
    const double C137 = (4 * (2 * C46874 + C46842 * C46908 + C46892 * ae) +
                         C46842 * (3 * C46908 + C46842 * C46961 + C46944 * ae) +
                         (3 * C46892 + C46842 * C46944) * ae) /
                        C46791;
    const double C288 =
        (2 * C46874 + C46842 * C46908 + C46892 * ae + C46961 * C47041) / C46791;
    const double C290 =
        (C47036 * (3 * C46908 + C46842 * C46961 + C46944 * ae)) / C46791;
    const double C441 =
        (2 * C46874 + C46842 * C46908 + C46892 * ae + C46961 * C47075) / C46791;
    const double C443 =
        (C47070 * (3 * C46908 + C46842 * C46961 + C46944 * ae)) / C46791;
    const double C826 = (C47070 * C47036 * C46961) / C46791;
    const double C145 =
        (4 * (2 * C46904 + ae * C46907 + be * C46908 + C46842 * C46955) +
         ae * (3 * C46907 + C46842 * C46960 + C46944 * be) +
         be * (3 * C46908 + C46842 * C46961 + C46944 * ae) +
         C46842 * (3 * C46955 + ae * C46960 + be * C46961 +
                   C46842 * (2 * C46949 + ae * C46953 + be * C46954 +
                             C46842 * (C46942 + ae * C46943 + be * C46945 +
                                       C46842 * (ae * C46931 + be * C46934 +
                                                 C46842 *
                                                     (C46915 * C46916 +
                                                      C46846 * bs[7] *
                                                          std::pow(C46848, 7)) *
                                                     C46792))))) /
        C46793;
    const double C301 =
        (3 * (C47044 + ae * C47036 * C46899 + be * C47036 * C46900 +
              C46842 * C47056) +
         ae * C47036 * C46960 + be * C47036 * C46961 +
         C46842 *
             (2 * C47056 + ae * C47036 * C46953 + be * C47036 * C46954 +
              C46842 * (C47051 + ae * C47036 * C46943 + be * C47036 * C46945 +
                        C46842 * (ae * C47036 * C46931 + be * C47036 * C46934 +
                                  C46842 * C47036 * C47003)))) /
        C46793;
    const double C454 =
        (3 * (C47078 + ae * C47070 * C46899 + be * C47070 * C46900 +
              C46842 * C47090) +
         ae * C47070 * C46960 + be * C47070 * C46961 +
         C46842 *
             (2 * C47090 + ae * C47070 * C46953 + be * C47070 * C46954 +
              C46842 * (C47085 + ae * C47070 * C46943 + be * C47070 * C46945 +
                        C46842 * (ae * C47070 * C46931 + be * C47070 * C46934 +
                                  C46842 * C47070 * C47003)))) /
        C46793;
    const double C136 = (4 * (2 * C46873 + C46842 * C46907 + C46892 * be) +
                         C46842 * (3 * C46907 + C46842 * C46960 + C46944 * be) +
                         (3 * C46892 + C46842 * C46944) * be) /
                        C46791;
    const double C287 =
        (2 * C46873 + C46842 * C46907 + C46892 * be + C46960 * C47041) / C46791;
    const double C289 =
        (C47036 * (3 * C46907 + C46842 * C46960 + C46944 * be)) / C46791;
    const double C440 =
        (2 * C46873 + C46842 * C46907 + C46892 * be + C46960 * C47075) / C46791;
    const double C442 =
        (C47070 * (3 * C46907 + C46842 * C46960 + C46944 * be)) / C46791;
    const double C825 = (C47070 * C47036 * C46960) / C46791;
    const double C47026 = C46989 + C47023;
    const double C47030 = C46842 * C47028;
    const double C1294 =
        (2 * C47036 * C46961 + C47036 * (C46961 + C47028 * C47041)) / C46791;
    const double C1444 = (C47070 * (C46961 + C47028 * C47041)) / C46791;
    const double C2018 = (C47036 * C46961 + C47036 * C47028 * C47075) / C46791;
    const double C2124 =
        (2 * C47070 * C46961 + C47070 * (C46961 + C47028 * C47075)) / C46791;
    const double C47029 = C46842 * C47027;
    const double C302 =
        (3 * (C47047 + ae * (C46899 + C46943 * C47041) +
              be * (C46900 + C46945 * C47041) + C46842 * C47068) +
         ae * (C46960 + C47027 * C47041) + be * (C46961 + C47028 * C47041) +
         C46842 *
             (2 * C47068 + ae * (C46953 + C47018 * C47041) +
              be * (C46954 + C47019 * C47041) +
              C46842 * (C47063 + ae * (C46943 + C47004 * C47041) +
                        be * (C46945 + C47006 * C47041) +
                        C46842 * (ae * (C46931 + C46992 * C47041) +
                                  be * (C46934 + C46995 * C47041) +
                                  C46842 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47041))))) /
        C46793;
    const double C455 =
        (3 * (C47081 + ae * (C46899 + C46943 * C47075) +
              be * (C46900 + C46945 * C47075) + C46842 * C47102) +
         ae * (C46960 + C47027 * C47075) + be * (C46961 + C47028 * C47075) +
         C46842 *
             (2 * C47102 + ae * (C46953 + C47018 * C47075) +
              be * (C46954 + C47019 * C47075) +
              C46842 * (C47097 + ae * (C46943 + C47004 * C47075) +
                        be * (C46945 + C47006 * C47075) +
                        C46842 * (ae * (C46931 + C46992 * C47075) +
                                  be * (C46934 + C46995 * C47075) +
                                  C46842 * (C47003 + (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46792 * C47075))))) /
        C46793;
    const double C833 =
        (3 * (C47141 + ae * C47070 * C47104 + be * C47070 * C47105 +
              C46842 * C47150) +
         ae * C47070 * C47036 * C47027 + be * C47070 * C47036 * C47028 +
         C46842 *
             (2 * C47150 + ae * C47070 * C47036 * C47018 +
              be * C47070 * C47036 * C47019 +
              C46842 * (C47145 + ae * C47070 * C47036 * C47004 +
                        be * C47070 * C47036 * C47006 +
                        C46842 * (ae * C47070 * C47036 * C46992 +
                                  be * C47070 * C47036 * C46995 +
                                  C46842 * C47070 * C47036 *
                                      (C46971 * C46972 +
                                       C46846 * bs[8] * std::pow(C46840, 8)) *
                                      C46792)))) /
        C46793;
    const double C1293 =
        (2 * C47036 * C46960 + C47036 * (C46960 + C47027 * C47041)) / C46791;
    const double C1443 = (C47070 * (C46960 + C47027 * C47041)) / C46791;
    const double C2017 = (C47036 * C46960 + C47036 * C47027 * C47075) / C46791;
    const double C2123 =
        (2 * C47070 * C46960 + C47070 * (C46960 + C47027 * C47075)) / C46791;
    const double C4791 = C4776 - C4777;
    const double C4788 = C4764 - C4765;
    const double C4786 = C4756 - C4757;
    const double C4784 = C4748 - C4749;
    const double C4783 = C4744 - C4745;
    const double C4780 = C4732 - C4733;
    const double C5100 = C5092 - C5093;
    const double C5459 = C5450 - C5451;
    const double C5456 = C5438 - C5439;
    const double C5455 = C5434 - C5435;
    const double C5727 = C5720 - C5721;
    const double C5724 = C5708 - C5709;
    const double C5919 = C5910 - C5911;
    const double C5916 = C5898 - C5899;
    const double C5914 = C5890 - C5891;
    const double C6071 = C6066 - C6067;
    const double C6279 = C6274 - C6275;
    const double C6431 = C6426 - C6427;
    const double C7021 = C7016 - C7017;
    const double C7303 = C7298 - C7299;
    const double C10707 = C10692 - C10693;
    const double C10704 = C10680 - C10681;
    const double C10702 = C10672 - C10673;
    const double C10700 = C10664 - C10665;
    const double C10699 = C10660 - C10661;
    const double C10696 = C10648 - C10649;
    const double C11000 = C10992 - C10993;
    const double C12429 = C12422 - C12423;
    const double C12426 = C12410 - C12411;
    const double C12771 = C12766 - C12767;
    const double C16165 = C16150 - C16151;
    const double C16162 = C16138 - C16139;
    const double C16160 = C16130 - C16131;
    const double C16158 = C16122 - C16123;
    const double C16157 = C16118 - C16119;
    const double C16154 = C16106 - C16107;
    const double C16474 = C16466 - C16467;
    const double C16833 = C16824 - C16825;
    const double C16830 = C16812 - C16813;
    const double C16829 = C16808 - C16809;
    const double C17093 = C17086 - C17087;
    const double C17090 = C17074 - C17075;
    const double C17277 = C17268 - C17269;
    const double C17274 = C17256 - C17257;
    const double C17272 = C17248 - C17249;
    const double C17429 = C17424 - C17425;
    const double C17637 = C17632 - C17633;
    const double C17781 = C17776 - C17777;
    const double C18363 = C18358 - C18359;
    const double C18637 = C18632 - C18633;
    const double C32001 = C31986 - C31987;
    const double C31998 = C31974 - C31975;
    const double C31996 = C31966 - C31967;
    const double C31994 = C31958 - C31959;
    const double C31993 = C31954 - C31955;
    const double C31990 = C31942 - C31943;
    const double C32294 = C32286 - C32287;
    const double C33715 = C33708 - C33709;
    const double C33712 = C33696 - C33697;
    const double C34057 = C34052 - C34053;
    const double C4801 = C4789 - C4770;
    const double C4799 = C4787 - C4762;
    const double C4797 = C4785 - C4754;
    const double C4794 = C4782 - C4742;
    const double C4793 = C4781 - C4738;
    const double C5463 = C5457 - C5444;
    const double C5460 = C5454 - C5432;
    const double C5730 = C5726 - C5718;
    const double C5729 = C5725 - C5714;
    const double C5924 = C5918 - C5908;
    const double C5923 = C5917 - C5904;
    const double C5921 = C5915 - C5896;
    const double C6072 = C6070 - C6064;
    const double C6280 = C6278 - C6272;
    const double C6432 = C6430 - C6424;
    const double C7022 = C7020 - C7014;
    const double C7304 = C7302 - C7296;
    const double C10717 = C10705 - C10686;
    const double C10715 = C10703 - C10678;
    const double C10713 = C10701 - C10670;
    const double C10710 = C10698 - C10658;
    const double C10709 = C10697 - C10654;
    const double C12432 = C12428 - C12420;
    const double C12431 = C12427 - C12416;
    const double C12772 = C12770 - C12764;
    const double C16175 = C16163 - C16144;
    const double C16173 = C16161 - C16136;
    const double C16171 = C16159 - C16128;
    const double C16168 = C16156 - C16116;
    const double C16167 = C16155 - C16112;
    const double C16837 = C16831 - C16818;
    const double C16834 = C16828 - C16806;
    const double C17096 = C17092 - C17084;
    const double C17095 = C17091 - C17080;
    const double C17282 = C17276 - C17266;
    const double C17281 = C17275 - C17262;
    const double C17279 = C17273 - C17254;
    const double C17430 = C17428 - C17422;
    const double C17638 = C17636 - C17630;
    const double C17782 = C17780 - C17774;
    const double C18364 = C18362 - C18356;
    const double C18638 = C18636 - C18630;
    const double C32011 = C31999 - C31980;
    const double C32009 = C31997 - C31972;
    const double C32007 = C31995 - C31964;
    const double C32004 = C31992 - C31952;
    const double C32003 = C31991 - C31948;
    const double C33718 = C33714 - C33706;
    const double C33717 = C33713 - C33702;
    const double C34058 = C34056 - C34050;
    const double C21837 = C21828 - C21818;
    const double C21836 = C21827 - C21814;
    const double C21835 = C21826 - C21810;
    const double C21834 = C21825 - C21806;
    const double C21833 = C21824 - C21802;
    const double C21832 = C21823 - C21798;
    const double C21831 = C21822 - C21794;
    const double C21830 = C21821 - C21790;
    const double C21829 = C21820 - C21786;
    const double C22074 = C22072 - C22066;
    const double C22359 = C22353 - C22346;
    const double C22358 = C22352 - C22342;
    const double C22357 = C22351 - C22338;
    const double C22356 = C22350 - C22334;
    const double C22355 = C22349 - C22330;
    const double C22354 = C22348 - C22326;
    const double C22559 = C22557 - C22554;
    const double C22558 = C22556 - C22550;
    const double C22701 = C22697 - C22692;
    const double C22700 = C22696 - C22688;
    const double C22699 = C22695 - C22684;
    const double C22698 = C22694 - C22680;
    const double C22813 = C22812 - C22810;
    const double C22967 = C22966 - C22964;
    const double C23077 = C23076 - C23074;
    const double C23523 = C23521 - C23518;
    const double C23522 = C23520 - C23514;
    const double C23739 = C23737 - C23734;
    const double C23738 = C23736 - C23730;
    const double C26403 = C26396 - C26388;
    const double C26402 = C26395 - C26384;
    const double C26401 = C26394 - C26380;
    const double C26400 = C26393 - C26376;
    const double C26399 = C26392 - C26372;
    const double C26398 = C26391 - C26368;
    const double C26397 = C26390 - C26364;
    const double C26685 = C26684 - C26682;
    const double C28126 = C28123 - C28119;
    const double C28125 = C28122 - C28115;
    const double C28124 = C28121 - C28111;
    const double C28330 = C28329 - C28326;
    const double C28468 = C28467 - C28465;
    const double C42934 = C42933 - C42931;
    const double C44200 = C44199 - C44197;
    const double C44451 = C44450 - C44448;
    const double C4774 = C4583 * C288;
    const double C16148 = C15957 * C288;
    const double C22070 = C21671 * C288;
    const double C5098 = C4583 * C290;
    const double C16472 = C15957 * C290;
    const double C10690 = C4583 * C441;
    const double C31984 = C15957 * C441;
    const double C43134 = C21671 * C441;
    const double C10998 = C4583 * C443;
    const double C32292 = C15957 * C443;
    const double C5448 = C4583 * C826;
    const double C16822 = C15957 * C826;
    const double C26544 = C21671 * C826;
    const double C5099 = C47864 * C301;
    const double C16473 = C47864 * C301;
    const double C10999 = C47864 * C454;
    const double C32293 = C47864 * C454;
    const double C4772 = C4583 * C287;
    const double C16146 = C15957 * C287;
    const double C22068 = C21671 * C287;
    const double C5096 = C4583 * C289;
    const double C16470 = C15957 * C289;
    const double C10688 = C4583 * C440;
    const double C31982 = C15957 * C440;
    const double C43132 = C21671 * C440;
    const double C10996 = C4583 * C442;
    const double C32290 = C15957 * C442;
    const double C5446 = C4583 * C825;
    const double C16820 = C15957 * C825;
    const double C26542 = C21671 * C825;
    const double C47032 = C46977 + C47030;
    const double C47031 = C46973 + C47029;
    const double C4803 = C4791 - C4778;
    const double C4800 = C4788 - C4766;
    const double C4798 = C4786 - C4758;
    const double C4796 = C4784 - C4750;
    const double C4795 = C4783 - C4746;
    const double C4792 = C4780 - C4734;
    const double C5102 = C5100 - C5094;
    const double C5465 = C5459 - C5452;
    const double C5462 = C5456 - C5440;
    const double C5461 = C5455 - C5436;
    const double C5731 = C5727 - C5722;
    const double C5728 = C5724 - C5710;
    const double C5925 = C5919 - C5912;
    const double C5922 = C5916 - C5900;
    const double C5920 = C5914 - C5892;
    const double C6073 = C6071 - C6068;
    const double C6281 = C6279 - C6276;
    const double C6433 = C6431 - C6428;
    const double C7023 = C7021 - C7018;
    const double C7305 = C7303 - C7300;
    const double C10719 = C10707 - C10694;
    const double C10716 = C10704 - C10682;
    const double C10714 = C10702 - C10674;
    const double C10712 = C10700 - C10666;
    const double C10711 = C10699 - C10662;
    const double C10708 = C10696 - C10650;
    const double C11002 = C11000 - C10994;
    const double C12433 = C12429 - C12424;
    const double C12430 = C12426 - C12412;
    const double C12773 = C12771 - C12768;
    const double C16177 = C16165 - C16152;
    const double C16174 = C16162 - C16140;
    const double C16172 = C16160 - C16132;
    const double C16170 = C16158 - C16124;
    const double C16169 = C16157 - C16120;
    const double C16166 = C16154 - C16108;
    const double C16476 = C16474 - C16468;
    const double C16839 = C16833 - C16826;
    const double C16836 = C16830 - C16814;
    const double C16835 = C16829 - C16810;
    const double C17097 = C17093 - C17088;
    const double C17094 = C17090 - C17076;
    const double C17283 = C17277 - C17270;
    const double C17280 = C17274 - C17258;
    const double C17278 = C17272 - C17250;
    const double C17431 = C17429 - C17426;
    const double C17639 = C17637 - C17634;
    const double C17783 = C17781 - C17778;
    const double C18365 = C18363 - C18360;
    const double C18639 = C18637 - C18634;
    const double C32013 = C32001 - C31988;
    const double C32010 = C31998 - C31976;
    const double C32008 = C31996 - C31968;
    const double C32006 = C31994 - C31960;
    const double C32005 = C31993 - C31956;
    const double C32002 = C31990 - C31944;
    const double C32296 = C32294 - C32288;
    const double C33719 = C33715 - C33710;
    const double C33716 = C33712 - C33698;
    const double C34059 = C34057 - C34054;
    const double C4813 = C4801 + C4771;
    const double C4811 = C4799 + C4763;
    const double C4809 = C4797 + C4755;
    const double C4806 = C4794 + C4743;
    const double C4805 = C4793 + C4739;
    const double C5469 = C5463 + C5445;
    const double C5466 = C5460 + C5433;
    const double C5734 = C5730 + C5719;
    const double C5733 = C5729 + C5715;
    const double C5930 = C5924 + C5909;
    const double C5929 = C5923 + C5905;
    const double C5927 = C5921 + C5897;
    const double C6074 = C6072 + C6065;
    const double C6282 = C6280 + C6273;
    const double C6434 = C6432 + C6425;
    const double C7024 = C7022 + C7015;
    const double C7306 = C7304 + C7297;
    const double C10729 = C10717 + C10687;
    const double C10727 = C10715 + C10679;
    const double C10725 = C10713 + C10671;
    const double C10722 = C10710 + C10659;
    const double C10721 = C10709 + C10655;
    const double C12436 = C12432 + C12421;
    const double C12435 = C12431 + C12417;
    const double C12774 = C12772 + C12765;
    const double C16187 = C16175 + C16145;
    const double C16185 = C16173 + C16137;
    const double C16183 = C16171 + C16129;
    const double C16180 = C16168 + C16117;
    const double C16179 = C16167 + C16113;
    const double C16843 = C16837 + C16819;
    const double C16840 = C16834 + C16807;
    const double C17100 = C17096 + C17085;
    const double C17099 = C17095 + C17081;
    const double C17288 = C17282 + C17267;
    const double C17287 = C17281 + C17263;
    const double C17285 = C17279 + C17255;
    const double C17432 = C17430 + C17423;
    const double C17640 = C17638 + C17631;
    const double C17784 = C17782 + C17775;
    const double C18366 = C18364 + C18357;
    const double C18640 = C18638 + C18631;
    const double C32023 = C32011 + C31981;
    const double C32021 = C32009 + C31973;
    const double C32019 = C32007 + C31965;
    const double C32016 = C32004 + C31953;
    const double C32015 = C32003 + C31949;
    const double C33722 = C33718 + C33707;
    const double C33721 = C33717 + C33703;
    const double C34060 = C34058 + C34051;
    const double C21846 = C21837 + C21819;
    const double C21845 = C21836 + C21815;
    const double C21844 = C21835 + C21811;
    const double C21843 = C21834 + C21807;
    const double C21842 = C21833 + C21803;
    const double C21841 = C21832 + C21799;
    const double C21840 = C21831 + C21795;
    const double C21839 = C21830 + C21791;
    const double C21838 = C21829 + C21787;
    const double C22076 = C22074 + C22067;
    const double C22365 = C22359 + C22347;
    const double C22364 = C22358 + C22343;
    const double C22363 = C22357 + C22339;
    const double C22362 = C22356 + C22335;
    const double C22361 = C22355 + C22331;
    const double C22360 = C22354 + C22327;
    const double C22561 = C22559 + C22555;
    const double C22560 = C22558 + C22551;
    const double C22705 = C22701 + C22693;
    const double C22704 = C22700 + C22689;
    const double C22703 = C22699 + C22685;
    const double C22702 = C22698 + C22681;
    const double C22814 = C22813 + C22811;
    const double C22968 = C22967 + C22965;
    const double C23078 = C23077 + C23075;
    const double C23525 = C23523 + C23519;
    const double C23524 = C23522 + C23515;
    const double C23741 = C23739 + C23735;
    const double C23740 = C23738 + C23731;
    const double C26410 = C26403 + C26389;
    const double C26409 = C26402 + C26385;
    const double C26408 = C26401 + C26381;
    const double C26407 = C26400 + C26377;
    const double C26406 = C26399 + C26373;
    const double C26405 = C26398 + C26369;
    const double C26404 = C26397 + C26365;
    const double C26686 = C26685 + C26683;
    const double C28129 = C28126 + C28120;
    const double C28128 = C28125 + C28116;
    const double C28127 = C28124 + C28112;
    const double C28331 = C28330 + C28327;
    const double C28469 = C28468 + C28466;
    const double C42935 = C42934 + C42932;
    const double C44201 = C44200 + C44198;
    const double C44452 = C44451 + C44449;
    const double C4790 = C4772 - C4773;
    const double C16164 = C16146 - C16147;
    const double C22073 = C22068 - C22069;
    const double C5101 = C5096 - C5097;
    const double C16475 = C16470 - C16471;
    const double C10706 = C10688 - C10689;
    const double C32000 = C31982 - C31983;
    const double C43136 = C43132 - C43133;
    const double C11001 = C10996 - C10997;
    const double C32295 = C32290 - C32291;
    const double C5458 = C5446 - C5447;
    const double C16832 = C16820 - C16821;
    const double C26546 = C26542 - C26543;
    const double C47034 = C47032 + C47012;
    const double C47033 = C47031 + C47009;
    const double C4815 = C4803 + C4779;
    const double C4812 = C4800 + C4767;
    const double C4810 = C4798 + C4759;
    const double C4808 = C4796 + C4751;
    const double C4807 = C4795 + C4747;
    const double C4804 = C4792 + C4735;
    const double C5104 = C5102 + C5095;
    const double C5471 = C5465 + C5453;
    const double C5468 = C5462 + C5441;
    const double C5467 = C5461 + C5437;
    const double C5735 = C5731 + C5723;
    const double C5732 = C5728 + C5711;
    const double C5931 = C5925 + C5913;
    const double C5928 = C5922 + C5901;
    const double C5926 = C5920 + C5893;
    const double C6075 = C6073 + C6069;
    const double C6283 = C6281 + C6277;
    const double C6435 = C6433 + C6429;
    const double C7025 = C7023 + C7019;
    const double C7307 = C7305 + C7301;
    const double C10731 = C10719 + C10695;
    const double C10728 = C10716 + C10683;
    const double C10726 = C10714 + C10675;
    const double C10724 = C10712 + C10667;
    const double C10723 = C10711 + C10663;
    const double C10720 = C10708 + C10651;
    const double C11004 = C11002 + C10995;
    const double C12437 = C12433 + C12425;
    const double C12434 = C12430 + C12413;
    const double C12775 = C12773 + C12769;
    const double C16189 = C16177 + C16153;
    const double C16186 = C16174 + C16141;
    const double C16184 = C16172 + C16133;
    const double C16182 = C16170 + C16125;
    const double C16181 = C16169 + C16121;
    const double C16178 = C16166 + C16109;
    const double C16478 = C16476 + C16469;
    const double C16845 = C16839 + C16827;
    const double C16842 = C16836 + C16815;
    const double C16841 = C16835 + C16811;
    const double C17101 = C17097 + C17089;
    const double C17098 = C17094 + C17077;
    const double C17289 = C17283 + C17271;
    const double C17286 = C17280 + C17259;
    const double C17284 = C17278 + C17251;
    const double C17433 = C17431 + C17427;
    const double C17641 = C17639 + C17635;
    const double C17785 = C17783 + C17779;
    const double C18367 = C18365 + C18361;
    const double C18641 = C18639 + C18635;
    const double C32025 = C32013 + C31989;
    const double C32022 = C32010 + C31977;
    const double C32020 = C32008 + C31969;
    const double C32018 = C32006 + C31961;
    const double C32017 = C32005 + C31957;
    const double C32014 = C32002 + C31945;
    const double C32298 = C32296 + C32289;
    const double C33723 = C33719 + C33711;
    const double C33720 = C33716 + C33699;
    const double C34061 = C34059 + C34055;
    const double C21855 = C21846 * C47810;
    const double C21854 = C21845 * C47810;
    const double C26215 = C21845 * C10353;
    const double C37395 = C21845 * C31647;
    const double C21853 = C21844 * C47810;
    const double C26212 = C21844 * C10353;
    const double C37392 = C21844 * C31647;
    const double C21852 = C21843 * C47810;
    const double C27402 = C21843 * C10353;
    const double C38519 = C21843 * C31647;
    const double C21851 = C21842 * C47810;
    const double C26210 = C21842 * C10353;
    const double C37390 = C21842 * C31647;
    const double C21850 = C21841 * C47810;
    const double C26208 = C21841 * C10353;
    const double C37388 = C21841 * C31647;
    const double C21849 = C21840 * C47810;
    const double C27115 = C21840 * C10353;
    const double C38232 = C21840 * C31647;
    const double C21848 = C21839 * C47810;
    const double C26207 = C21839 * C10353;
    const double C37387 = C21839 * C31647;
    const double C21847 = C21838 * C47810;
    const double C26204 = C21838 * C10353;
    const double C37384 = C21838 * C31647;
    const double C22078 = C22076 * C47810;
    const double C26541 = C22076 * C10353;
    const double C37672 = C22076 * C31647;
    const double C22371 = C22365 * C47810;
    const double C26213 = C22365 * C47897;
    const double C26886 = C22365 * C10353;
    const double C37393 = C22365 * C47897;
    const double C38003 = C22365 * C31647;
    const double C22370 = C22364 * C47810;
    const double C26214 = C22364 * C47897;
    const double C37394 = C22364 * C47897;
    const double C22369 = C22363 * C47810;
    const double C26211 = C22363 * C47897;
    const double C27598 = C22363 * C10353;
    const double C37391 = C22363 * C47897;
    const double C38715 = C22363 * C31647;
    const double C22368 = C22362 * C47810;
    const double C26209 = C22362 * C47897;
    const double C26883 = C22362 * C10353;
    const double C37389 = C22362 * C47897;
    const double C38000 = C22362 * C31647;
    const double C22367 = C22361 * C47810;
    const double C26205 = C22361 * C47897;
    const double C26882 = C22361 * C10353;
    const double C37385 = C22361 * C47897;
    const double C37999 = C22361 * C31647;
    const double C22366 = C22360 * C47810;
    const double C26206 = C22360 * C47897;
    const double C27267 = C22360 * C10353;
    const double C37386 = C22360 * C47897;
    const double C38384 = C22360 * C31647;
    const double C22563 = C22561 * C47810;
    const double C22562 = C22560 * C47810;
    const double C27118 = C22560 * C10353;
    const double C38235 = C22560 * C31647;
    const double C22709 = C22705 * C47810;
    const double C27729 = C22705 * C47897;
    const double C38846 = C22705 * C47897;
    const double C22708 = C22704 * C47810;
    const double C27116 = C22704 * C47897;
    const double C27730 = C22704 * C10353;
    const double C38233 = C22704 * C47897;
    const double C38847 = C22704 * C31647;
    const double C22707 = C22703 * C47810;
    const double C27270 = C22703 * C10353;
    const double C27268 = C22703 * C47897;
    const double C38387 = C22703 * C31647;
    const double C38385 = C22703 * C47897;
    const double C22706 = C22702 * C47810;
    const double C26881 = C22702 * C47897;
    const double C27265 = C22702 * C10353;
    const double C37998 = C22702 * C47897;
    const double C38382 = C22702 * C31647;
    const double C22815 = C22814 * C47810;
    const double C22969 = C22968 * C47810;
    const double C27401 = C22968 * C47897;
    const double C38518 = C22968 * C47897;
    const double C23079 = C23078 * C47810;
    const double C27117 = C23078 * C47897;
    const double C38234 = C23078 * C47897;
    const double C23527 = C23525 * C47810;
    const double C26884 = C23525 * C47897;
    const double C28328 = C23525 * C10353;
    const double C38001 = C23525 * C47897;
    const double C39417 = C23525 * C31647;
    const double C23526 = C23524 * C47810;
    const double C27597 = C23524 * C47897;
    const double C38714 = C23524 * C47897;
    const double C23743 = C23741 * C47810;
    const double C27266 = C23741 * C47897;
    const double C28601 = C23741 * C10353;
    const double C38383 = C23741 * C47897;
    const double C39679 = C23741 * C31647;
    const double C23742 = C23740 * C47810;
    const double C27269 = C23740 * C47897;
    const double C38386 = C23740 * C47897;
    const double C26885 = C26409 * C47897;
    const double C38002 = C26409 * C47897;
    const double C28600 = C28128 * C47897;
    const double C39678 = C28128 * C47897;
    const double C28332 = C28331 * C47897;
    const double C39416 = C28331 * C47897;
    const double C4802 = C4790 - C4774;
    const double C16176 = C16164 - C16148;
    const double C22075 = C22073 - C22070;
    const double C5103 = C5101 - C5098;
    const double C16477 = C16475 - C16472;
    const double C10718 = C10706 - C10690;
    const double C32012 = C32000 - C31984;
    const double C43137 = C43136 - C43134;
    const double C11003 = C11001 - C10998;
    const double C32297 = C32295 - C32292;
    const double C5464 = C5458 - C5448;
    const double C16838 = C16832 - C16822;
    const double C26547 = C26546 - C26544;
    const double C139 = (5 * (3 * C46908 + C46842 * C46961 + C46944 * ae) +
                         C46842 * (4 * C46961 + C46842 * C47034 + C47015 * ae) +
                         (4 * C46944 + C46842 * C47015) * ae) /
                        C46791;
    const double C292 =
        (3 * C46908 + C46842 * C46961 + C46944 * ae + C47034 * C47041) / C46791;
    const double C445 =
        (3 * C46908 + C46842 * C46961 + C46944 * ae + C47034 * C47075) / C46791;
    const double C562 =
        (C47036 * (4 * C46961 + C46842 * C47034 + C47015 * ae)) / C46791;
    const double C666 =
        (C47070 * (4 * C46961 + C46842 * C47034 + C47015 * ae)) / C46791;
    const double C828 = (C47070 * C47036 * C47034) / C46791;
    const double C146 =
        (5 * (3 * C46955 + ae * C46960 + be * C46961 + C46842 * C47026) +
         ae * (4 * C46960 + C46842 * C47033 + C47015 * be) +
         be * (4 * C46961 + C46842 * C47034 + C47015 * ae) +
         C46842 *
             (4 * C47026 + ae * C47033 + be * C47034 +
              C46842 *
                  (3 * C47020 + ae * C47027 + be * C47028 +
                   C46842 * (2 * C47013 + ae * C47018 + be * C47019 +
                             C46842 * (C47003 + ae * C47004 + be * C47006 +
                                       C46842 * (ae * C46992 + be * C46995 +
                                                 C46842 *
                                                     (C46971 * C46972 +
                                                      C46846 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                     C46792)))))) /
        C46793;
    const double C563 =
        (4 * (2 * C47056 + ae * C47036 * C46953 + be * C47036 * C46954 +
              C46842 * C47119) +
         ae * C47036 * C47033 + be * C47036 * C47034 +
         C46842 *
             (3 * C47119 + ae * C47036 * C47027 + be * C47036 * C47028 +
              C46842 *
                  (2 * C47117 + ae * C47036 * C47018 + be * C47036 * C47019 +
                   C46842 *
                       (C47108 + ae * C47036 * C47004 + be * C47036 * C47006 +
                        C46842 * (ae * C47036 * C46992 + be * C47036 * C46995 +
                                  C46842 * C47036 *
                                      (C46971 * C46972 +
                                       C46846 * bs[8] * std::pow(C46840, 8)) *
                                      C46792))))) /
        C46793;
    const double C667 =
        (4 * (2 * C47090 + ae * C47070 * C46953 + be * C47070 * C46954 +
              C46842 * C47136) +
         ae * C47070 * C47033 + be * C47070 * C47034 +
         C46842 *
             (3 * C47136 + ae * C47070 * C47027 + be * C47070 * C47028 +
              C46842 *
                  (2 * C47134 + ae * C47070 * C47018 + be * C47070 * C47019 +
                   C46842 *
                       (C47125 + ae * C47070 * C47004 + be * C47070 * C47006 +
                        C46842 * (ae * C47070 * C46992 + be * C47070 * C46995 +
                                  C46842 * C47070 *
                                      (C46971 * C46972 +
                                       C46846 * bs[8] * std::pow(C46840, 8)) *
                                      C46792))))) /
        C46793;
    const double C138 = (5 * (3 * C46907 + C46842 * C46960 + C46944 * be) +
                         C46842 * (4 * C46960 + C46842 * C47033 + C47015 * be) +
                         (4 * C46944 + C46842 * C47015) * be) /
                        C46791;
    const double C291 =
        (3 * C46907 + C46842 * C46960 + C46944 * be + C47033 * C47041) / C46791;
    const double C444 =
        (3 * C46907 + C46842 * C46960 + C46944 * be + C47033 * C47075) / C46791;
    const double C561 =
        (C47036 * (4 * C46960 + C46842 * C47033 + C47015 * be)) / C46791;
    const double C665 =
        (C47070 * (4 * C46960 + C46842 * C47033 + C47015 * be)) / C46791;
    const double C827 = (C47070 * C47036 * C47033) / C46791;
    const double C4814 = C4802 + C4775;
    const double C16188 = C16176 + C16149;
    const double C22077 = C22075 + C22071;
    const double C5105 = C5103 + C5099;
    const double C16479 = C16477 + C16473;
    const double C10730 = C10718 + C10691;
    const double C32024 = C32012 + C31985;
    const double C43138 = C43137 + C43135;
    const double C11005 = C11003 + C10999;
    const double C32299 = C32297 + C32293;
    const double C5470 = C5464 + C5449;
    const double C16844 = C16838 + C16823;
    const double C26548 = C26547 + C26545;
    const double C22079 = C22077 * C47810;
    const double C26549 = C26548 * C47897;
    const double C37673 = C26548 * C47897;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C47647 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C47654 +
                  (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47606 * C2702) *
                     C47565 +
                 ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                   C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                   C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                      C47810 * C47795 * C47606 * C47654 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C47647 -
                  (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                   C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                   C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                      C47810 * C47795 * C47606 * C2702) *
                     C47574 +
                 ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                   C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                   C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                      C47810 * C47795 * C47606 * C47647 -
                  (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                   C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                   C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                      C47810 * C47795 * C47606 * C47654 +
                  (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                   C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                   C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                      C47810 * C47795 * C47606 * C2702) *
                     C2705)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47846 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47693) *
                      C47647 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47693 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47846) *
                      C47654 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47846 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C47693) *
                      C2702) *
                     C2442 +
                 (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47693 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47846) *
                      C47647 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47846 -
                   (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                    C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                    C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                       C47810 * C47795 * C47693) *
                      C47654 +
                  ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
                    C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
                    C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                       C47810 * C47795 * C47693 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47846) *
                      C2702) *
                     C47571)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C47923 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C47919 +
                  (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47606 * C47909 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C47606 * C47887) *
                     C2442 +
                 ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                   C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                   C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                      C47810 * C47795 * C47606 * C47919 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C47923 -
                  (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                   C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                   C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                      C47810 * C47795 * C47606 * C47909 +
                  (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
                   C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
                   C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
                      C47810 * C47795 * C47606 * C47887) *
                     C47571)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C2334 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C47651) *
                     C47922 +
                 ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                   C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                   C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                      C47810 * C47795 * C47606 * C47651 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C2334) *
                     C47915 +
                 ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                   C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                   C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                      C47810 * C47795 * C47606 * C2334 -
                  (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                   C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                   C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                      C47810 * C47795 * C47606 * C47651) *
                     C47902 +
                 ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
                   C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
                   C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
                      C47810 * C47795 * C47606 * C47651 -
                  (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                   C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                   C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                      C47810 * C47795 * C47606 * C2334) *
                     C47881)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47917 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47906 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C2334 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47906 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47917 -
                   (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                    C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                    C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                       C47810 * C47795 * C47880) *
                      C47651) *
                     C2442 +
                 (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47906 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47917 -
                   (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                    C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                    C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                       C47810 * C47795 * C47880) *
                      C2334 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47917 -
                   (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                    C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                    C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                       C47810 * C47795 * C47906 +
                   (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
                    C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
                    C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                       C47810 * C47795 * C47880) *
                      C47651) *
                     C47571)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47846 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47693) *
                      C2334 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47693 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47846) *
                      C47651) *
                     C47565 +
                 (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47693 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47846) *
                      C2334 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47846 -
                   (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                    C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                    C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                       C47810 * C47795 * C47693) *
                      C47651) *
                     C47574 +
                 (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47846 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C47693) *
                      C2334 +
                  ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                    C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                    C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                       C47810 * C47795 * C47693 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47846) *
                      C47651) *
                     C2705)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C2334 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C47651) *
                     C47922 +
                 ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                   C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                   C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                      C47810 * C47795 * C47606 * C47651 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C2334) *
                     C47915 +
                 ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                   C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                   C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                      C47810 * C47795 * C47606 * C2334 -
                  (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                   C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                   C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                      C47810 * C47795 * C47606 * C47651) *
                     C47902 +
                 ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
                   C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
                   C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
                      C47810 * C47795 * C47606 * C47651 -
                  (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                   C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                   C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                      C47810 * C47795 * C47606 * C2334) *
                     C47881)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C47923 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C47919 +
                  (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47606 * C47909 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C47606 * C47887) *
                     C2442 +
                 ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                   C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                   C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                      C47810 * C47795 * C47606 * C47919 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C47923 -
                  (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                   C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                   C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                      C47810 * C47795 * C47606 * C47909 +
                  (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
                   C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
                   C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
                      C47810 * C47795 * C47606 * C47887) *
                     C47571)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C3096 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47693) *
                      C47647 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47693 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C3096) *
                      C47654 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C3096 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C47693) *
                      C2702) *
                     C47831 +
                 (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47693 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C3096) *
                      C47647 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C3096 -
                   (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                    C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                    C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                       C47810 * C47795 * C47693) *
                      C47654 +
                  ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
                    C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
                    C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                       C47810 * C47795 * C47693 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C3096) *
                      C2702) *
                     C47571)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47689 -
                  (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                   C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                   C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                      C47810 * C47795 * C47696 +
                  (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                   C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                   C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                      C47810 * C47795 * C3604) *
                     C47647 +
                 ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                   C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                   C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                      C47810 * C47795 * C47696 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47689 -
                  (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                   C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                   C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                      C47810 * C47795 * C3604) *
                     C47654 +
                 ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47689 -
                  (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                   C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                   C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                      C47810 * C47795 * C47696 +
                  (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
                   C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
                   C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
                      C47810 * C47795 * C3604) *
                     C2702) *
                C47560) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C3096 -
                  (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                   C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                   C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                      C47810 * C47795 * C47693) *
                     C47923 +
                 ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                   C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                   C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                      C47810 * C47795 * C47693 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C3096) *
                     C47919 +
                 ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C3096 -
                  (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                   C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                   C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                      C47810 * C47795 * C47693) *
                     C47909 +
                 ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
                   C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
                   C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
                      C47810 * C47795 * C47693 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C3096) *
                     C47887) *
                C47560) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C3096 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47693) *
                      C2334 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47693 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C3096) *
                      C47651) *
                     C47913 +
                 (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47693 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C3096) *
                      C2334 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C3096 -
                   (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                    C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                    C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                       C47810 * C47795 * C47693) *
                      C47651) *
                     C47900 +
                 (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C3096 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C47693) *
                      C2334 +
                  ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                    C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                    C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                       C47810 * C47795 * C47693 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C3096) *
                      C47651) *
                     C47871)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47924 -
                  (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                   C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                   C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                      C47810 * C47795 * C47921 +
                  (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                   C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                   C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                      C47810 * C47795 * C47912 -
                  (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
                   C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
                   C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
                      C47810 * C47795 * C47893) *
                     C2334 +
                 ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                   C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                   C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                      C47810 * C47795 * C47921 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47924 -
                  (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                   C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                   C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                      C47810 * C47795 * C47912 +
                  (C113 * C2227 - C114 * C2224 - C113 * C2228 + C101 * C2233 +
                   C115 * C2229 - C116 * C2225 - C115 * C2230 + C102 * C2234 +
                   C117 * C2231 - C118 * C2226 - C117 * C2232 + C103 * C2235) *
                      C47810 * C47795 * C47893) *
                     C47651) *
                C47560) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47689 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47696 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C3604) *
                      C2334 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47696 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47689 -
                   (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                    C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                    C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                       C47810 * C47795 * C3604) *
                      C47651) *
                     C47831 +
                 (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47696 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47689 -
                   (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                    C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                    C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                       C47810 * C47795 * C3604) *
                      C2334 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47689 -
                   (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                    C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                    C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                       C47810 * C47795 * C47696 +
                   (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
                    C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
                    C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                       C47810 * C47795 * C3604) *
                      C47651) *
                     C47571)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C3096 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47693) *
                      C2334 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47693 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C3096) *
                      C47651) *
                     C47913 +
                 (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47693 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C3096) *
                      C2334 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C3096 -
                   (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                    C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                    C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                       C47810 * C47795 * C47693) *
                      C47651) *
                     C47900 +
                 (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C3096 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C47693) *
                      C2334 +
                  ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                    C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                    C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                       C47810 * C47795 * C47693 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C3096) *
                      C47651) *
                     C47871)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C3096 -
                  (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                   C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                   C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                      C47810 * C47795 * C47693) *
                     C47923 +
                 ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                   C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                   C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                      C47810 * C47795 * C47693 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C3096) *
                     C47919 +
                 ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C3096 -
                  (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                   C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                   C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                      C47810 * C47795 * C47693) *
                     C47909 +
                 ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
                   C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
                   C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
                      C47810 * C47795 * C47693 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C3096) *
                     C47887) *
                C47560) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C47606 * C1286 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C47810 * C47795 * C47606 * C1287 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C47810 * C47795 * C47606 * C1288 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C47810 * C47795 * C47606 * C47887) *
              C47831 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C47810 * C47795 * C47606 * C1287 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C47606 * C1286 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C47810 * C47795 * C47606 * C1288 +
           (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
            C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
            C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
               C47810 * C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C47606 * C47845 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C47810 * C47795 * C47606 * C47651) *
              C556 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C47810 * C47795 * C47606 * C47651 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C47606 * C47845) *
              C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C47810 * C47795 * C47606 * C47845 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C47810 * C47795 * C47606 * C47651) *
              C558 +
          ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
            C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
            C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
               C47810 * C47795 * C47606 * C47651 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C47810 * C47795 * C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C47810 * C47795 * C1666 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C47810 * C47795 * C1667 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C47810 * C47795 * C47880) *
               C47845 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C47810 * C47795 * C1667 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C47810 * C47795 * C1666 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C47810 * C47795 * C47880) *
               C47651) *
              C47831 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C47810 * C47795 * C1667 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C47810 * C47795 * C1666 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C47810 * C47795 * C47880) *
               C47845 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C47810 * C47795 * C1666 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C47810 * C47795 * C1667 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C47810 * C47795 * C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47846 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47693) *
                      C1286 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47693 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47846) *
                      C1287 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47846 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C47693) *
                      C1288 +
                  ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
                    C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
                    C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
                       C47810 * C47795 * C47693 -
                   (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                    C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                    C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                       C47810 * C47795 * C47846) *
                      C47887) *
                 C47560) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                     C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                     C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                        C47810 * C47795 * C47846 -
                    (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                     C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                     C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                        C47810 * C47795 * C47693) *
                       C47845 +
                   ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                     C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                     C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                        C47810 * C47795 * C47693 -
                    (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                     C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                     C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                        C47810 * C47795 * C47846) *
                       C47651) *
                      C260 +
                  (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                     C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                     C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                        C47810 * C47795 * C47693 -
                    (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                     C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                     C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                        C47810 * C47795 * C47846) *
                       C47845 +
                   ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                     C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                     C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                        C47810 * C47795 * C47846 -
                    (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                     C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                     C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                        C47810 * C47795 * C47693) *
                       C47651) *
                      C261 +
                  (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                     C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                     C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                        C47810 * C47795 * C47846 -
                    (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                     C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                     C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                        C47810 * C47795 * C47693) *
                       C47845 +
                   ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                     C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                     C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                        C47810 * C47795 * C47693 -
                    (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                     C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                     C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                        C47810 * C47795 * C47846) *
                       C47651) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C2118 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C2119 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C2120 -
                   (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
                    C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
                    C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
                       C47810 * C47795 * C47893) *
                      C47845 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C2119 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C2118 -
                   (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                    C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                    C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                       C47810 * C47795 * C2120 +
                   (C113 * C2227 - C114 * C2224 - C113 * C2228 + C101 * C2233 +
                    C115 * C2229 - C116 * C2225 - C115 * C2230 + C102 * C2234 +
                    C117 * C2231 - C118 * C2226 - C117 * C2232 + C103 * C2235) *
                       C47810 * C47795 * C47893) *
                      C47651) *
                 C47560) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] += (0.5 * std::pow(Pi, 2.5) *
                     ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                       C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                       C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                          C47810 * C47795 * C47606 * C47588 * C108 -
                      (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                       C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                       C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                          C47810 * C47795 * C47606 * C47588 * C109 +
                      (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                       C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                       C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                          C47810 * C47795 * C47606 * C47588 * C110 -
                      (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                       C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                       C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                          C47810 * C47795 * C47606 * C47588 * C111 +
                      (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 +
                       C115 * C136 - C116 * C124 - C115 * C137 + C102 * C145 +
                       C117 * C138 - C118 * C125 - C117 * C139 + C103 * C146) *
                          C47810 * C47795 * C47606 * C47588 * C112) +
                 0.5 * std::pow(Pi, 2.5) *
                     (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                        C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                        C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                           C47810 * C47795 * C47606 * C47916 -
                       (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                        C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                        C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                           C47810 * C47795 * C47606 * C47904 +
                       (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                        C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                        C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                           C47810 * C47795 * C47606 * C47877) *
                          C260 +
                      ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                        C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                        C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                           C47810 * C47795 * C47606 * C47904 -
                       (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                        C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                        C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                           C47810 * C47795 * C47606 * C47916 -
                       (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                        C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                        C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                           C47810 * C47795 * C47606 * C47877) *
                          C261 +
                      ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                        C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                        C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                           C47810 * C47795 * C47606 * C47916 -
                       (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                        C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                        C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                           C47810 * C47795 * C47606 * C47904 +
                       (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                        C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                        C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                           C47810 * C47795 * C47606 * C47877) *
                          C47871)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47917 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47906 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C47588 * C260 +
                  ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47906 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47917 -
                   (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                    C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                    C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                       C47810 * C47795 * C47880) *
                      C47588 * C261 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47917 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C47906 +
                   (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
                    C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
                    C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47871)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47913 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C945 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47900 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                    C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                    C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C1012 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C1013 +
                  (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47606 * C1014 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C47606 * C1015 +
                  (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
                   C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
                   C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
                      C47810 * C47795 * C47606 * C1016) *
                 C47560) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47917 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47906 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C944 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47906 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47917 -
                   (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                    C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                    C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                       C47810 * C47795 * C47880) *
                      C945 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47917 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C47906 +
                   (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
                    C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
                    C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
                       C47810 * C47795 * C47880) *
                      C47877) *
                 C47560) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C1666 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C1667 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47913 +
                  ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C1667 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C1666 -
                   (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                    C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                    C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47900 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C1666 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C1667 +
                   (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
                    C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
                    C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47871)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C1666 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C1667 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C47916 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C1667 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C1666 -
                   (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                    C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                    C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                       C47810 * C47795 * C47880) *
                      C47904 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C1666 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C1667 +
                   (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
                    C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
                    C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
                       C47810 * C47795 * C47880) *
                      C47877) *
                 C47560) /
                    (p * q * std::sqrt(p + q)) +
                (2 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C1841 -
                  (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                   C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                   C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                      C47810 * C47795 * C1842 +
                  (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                   C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                   C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                      C47810 * C47795 * C1843 -
                  (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
                   C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
                   C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
                      C47810 * C47795 * C1844 +
                  (C113 * C1858 - C114 * C1849 - C113 * C1859 + C101 * C1867 +
                   C115 * C1860 - C116 * C1850 - C115 * C1861 + C102 * C1868 +
                   C117 * C1862 - C118 * C1851 - C117 * C1863 + C103 * C1869) *
                      C47810 * C47795 * C1845) *
                 C47588 * C47560) /
                    (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C47810 * C47795 * C47846 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C47810 * C47795 * C47693) *
               C944 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C47810 * C47795 * C47693 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C47810 * C47795 * C47846) *
               C945 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C47810 * C47795 * C47846 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C47810 * C47795 * C47693) *
               C47877) *
              C47831 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C47810 * C47795 * C47693 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C47810 * C47795 * C47846) *
               C944 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C47810 * C47795 * C47846 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C47810 * C47795 * C47693) *
               C945 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C47810 * C47795 * C47693 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C47810 * C47795 * C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C47846 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C47810 * C47795 * C47693) *
              C47588 * C556 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C47810 * C47795 * C47693 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C47846) *
              C47588 * C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C47810 * C47795 * C47846 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C47810 * C47795 * C47693) *
              C47588 * C558 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C47810 * C47795 * C47693 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C47810 * C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C2118 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C47810 * C47795 * C2119 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C47810 * C47795 * C2120 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C47810 * C47795 * C47893) *
              C47588 * C47831 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C47810 * C47795 * C2119 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C2118 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C47810 * C47795 * C2120 +
           (C113 * C1854 - C114 * C1847 - C113 * C1855 + C101 * C1865 +
            C115 * C1852 - C116 * C1846 - C115 * C1853 + C102 * C1864 +
            C117 * C2123 - C118 * C2122 - C117 * C2124 + C103 * C2125) *
               C47810 * C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C47904 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C47877) *
                      C260 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C47904 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C47877) *
                      C261 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C47904 +
                   (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                    C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                    C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C47588 * C108 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C47588 * C109 +
                  (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                   C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                   C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                      C47810 * C47795 * C47606 * C47588 * C110 -
                  (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                   C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                   C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                      C47810 * C47795 * C47606 * C47588 * C111 +
                  (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 +
                   C115 * C136 - C116 * C124 - C115 * C137 + C102 * C145 +
                   C117 * C138 - C118 * C125 - C117 * C139 + C103 * C146) *
                      C47810 * C47795 * C47606 * C47588 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47913 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C945 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47900 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                    C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                    C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C1012 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C1013 +
                  (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47606 * C1014 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C47606 * C1015 +
                  (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
                   C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
                   C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
                      C47810 * C47795 * C47606 * C1016) *
                 C47560) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C1666 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C1667 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47913 +
                  ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C1667 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C1666 -
                   (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                    C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                    C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47900 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C1666 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C1667 +
                   (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
                    C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
                    C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47871)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C1666 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C1667 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C47916 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C1667 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C1666 -
                   (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                    C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                    C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                       C47810 * C47795 * C47880) *
                      C47904 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C1666 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C1667 +
                   (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
                    C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
                    C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
                       C47810 * C47795 * C47880) *
                      C47877) *
                 C47560) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                     C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                     C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                        C47810 * C47795 * C3096 -
                    (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                     C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                     C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                        C47810 * C47795 * C47693) *
                       C47845 +
                   ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                     C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                     C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                        C47810 * C47795 * C47693 -
                    (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                     C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                     C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                        C47810 * C47795 * C3096) *
                       C47651) *
                      C47565 +
                  (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                     C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                     C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                        C47810 * C47795 * C47693 -
                    (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                     C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                     C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                        C47810 * C47795 * C3096) *
                       C47845 +
                   ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                     C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                     C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                        C47810 * C47795 * C3096 -
                    (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                     C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                     C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                        C47810 * C47795 * C47693) *
                       C47651) *
                      C47574 +
                  (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                     C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                     C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                        C47810 * C47795 * C3096 -
                    (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                     C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                     C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                        C47810 * C47795 * C47693) *
                       C47845 +
                   ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                     C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                     C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                        C47810 * C47795 * C47693 -
                    (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                     C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                     C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                        C47810 * C47795 * C3096) *
                       C47651) *
                      C2705)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C47810 * C47795 * C47689 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C47810 * C47795 * C47696 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C47810 * C47795 * C3604) *
               C47845 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C47810 * C47795 * C47696 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C47810 * C47795 * C47689 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C47810 * C47795 * C3604) *
               C47651) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C47810 * C47795 * C47696 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C47810 * C47795 * C47689 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C47810 * C47795 * C3604) *
               C47845 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C47810 * C47795 * C47689 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C47810 * C47795 * C47696 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C47810 * C47795 * C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C47810 * C47795 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C47810 * C47795 * C47693) *
               C47916 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C47810 * C47795 * C47693 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C47810 * C47795 * C3096) *
               C47904 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C47810 * C47795 * C3096 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C47810 * C47795 * C47693) *
               C47877) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C47810 * C47795 * C47693 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C47810 * C47795 * C3096) *
               C47916 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C47810 * C47795 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C47810 * C47795 * C47693) *
               C47904 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C47810 * C47795 * C47693 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C47810 * C47795 * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C47810 * C47795 * C47693) *
              C47588 * C47922 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C47810 * C47795 * C47693 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C3096) *
              C47588 * C47915 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C47810 * C47795 * C3096 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C47810 * C47795 * C47693) *
              C47588 * C47902 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C47810 * C47795 * C47693 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C47810 * C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C47924 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C47810 * C47795 * C47921 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C47810 * C47795 * C47912 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C47810 * C47795 * C47893) *
              C47588 * C2442 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C47810 * C47795 * C47921 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C47924 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C47810 * C47795 * C47912 +
           (C113 * C1854 - C114 * C1847 - C113 * C1855 + C101 * C1865 +
            C115 * C1852 - C116 * C1846 - C115 * C1853 + C102 * C1864 +
            C117 * C2123 - C118 * C2122 - C117 * C2124 + C103 * C2125) *
               C47810 * C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47689 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47696 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C3604) *
                      C47588 * C47565 +
                  ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47696 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47689 -
                   (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                    C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                    C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                       C47810 * C47795 * C3604) *
                      C47588 * C47574 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47689 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C47696 +
                   (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
                    C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
                    C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
                       C47810 * C47795 * C3604) *
                      C47588 * C2705)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C47810 * C47795 * C47693) *
              C47588 * C47922 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C47810 * C47795 * C47693 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C3096) *
              C47588 * C47915 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C47810 * C47795 * C3096 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C47810 * C47795 * C47693) *
              C47588 * C47902 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C47810 * C47795 * C47693 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C47810 * C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C47810 * C47795 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C47810 * C47795 * C47693) *
               C47916 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C47810 * C47795 * C47693 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C47810 * C47795 * C3096) *
               C47904 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C47810 * C47795 * C3096 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C47810 * C47795 * C47693) *
               C47877) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C47810 * C47795 * C47693 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C47810 * C47795 * C3096) *
               C47916 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C47810 * C47795 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C47810 * C47795 * C47693) *
               C47904 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C47810 * C47795 * C47693 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C47810 * C47795 * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C47845 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C47651) *
                      C556 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C47651 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C47845) *
                      C557 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C47845 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C47651) *
                      C558 +
                  ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
                    C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
                    C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
                       C47810 * C47795 * C47606 * C47651 -
                   (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                    C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                    C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                       C47810 * C47795 * C47606 * C47845) *
                      C47881)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C1286 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C1287 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C1288 -
                   (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                    C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                    C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                       C47810 * C47795 * C47606 * C47887) *
                      C47831 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C1287 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C1286 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C1288 +
                   (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
                    C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
                    C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
                       C47810 * C47795 * C47606 * C47887) *
                      C47571)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                     C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                     C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                        C47810 * C47795 * C47846 -
                    (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                     C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                     C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                        C47810 * C47795 * C47693) *
                       C47845 +
                   ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                     C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                     C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                        C47810 * C47795 * C47693 -
                    (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                     C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                     C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                        C47810 * C47795 * C47846) *
                       C47651) *
                      C260 +
                  (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                     C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                     C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                        C47810 * C47795 * C47693 -
                    (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                     C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                     C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                        C47810 * C47795 * C47846) *
                       C47845 +
                   ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                     C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                     C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                        C47810 * C47795 * C47846 -
                    (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                     C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                     C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                        C47810 * C47795 * C47693) *
                       C47651) *
                      C261 +
                  (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                     C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                     C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                        C47810 * C47795 * C47846 -
                    (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                     C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                     C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                        C47810 * C47795 * C47693) *
                       C47845 +
                   ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                     C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                     C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                        C47810 * C47795 * C47693 -
                    (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                     C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                     C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                        C47810 * C47795 * C47846) *
                       C47651) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47846 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47693) *
                      C1286 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47693 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47846) *
                      C1287 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47846 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C47693) *
                      C1288 +
                  ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
                    C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
                    C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
                       C47810 * C47795 * C47693 -
                   (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                    C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                    C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                       C47810 * C47795 * C47846) *
                      C47887) *
                 C47560) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C47904 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C47877) *
                      C260 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C47904 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C47877) *
                      C261 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C47904 +
                   (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                    C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                    C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C47588 * C108 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C47588 * C109 +
                  (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                   C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                   C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                      C47810 * C47795 * C47606 * C47588 * C110 -
                  (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                   C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                   C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                      C47810 * C47795 * C47606 * C47588 * C111 +
                  (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 +
                   C115 * C136 - C116 * C124 - C115 * C137 + C102 * C145 +
                   C117 * C138 - C118 * C125 - C117 * C139 + C103 * C146) *
                      C47810 * C47795 * C47606 * C47588 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47917 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47906 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C47588 * C260 +
                  ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                    C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                    C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                       C47810 * C47795 * C47906 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47917 -
                   (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                    C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                    C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                       C47810 * C47795 * C47880) *
                      C47588 * C261 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47917 -
                   (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                    C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                    C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                       C47810 * C47795 * C47906 +
                   (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
                    C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
                    C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
                       C47810 * C47795 * C47880) *
                      C47588 * C47871)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47913 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C945 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47900 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                    C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                    C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C1012 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C1013 +
                  (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47606 * C1014 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C47606 * C1015 +
                  (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
                   C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
                   C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
                      C47810 * C47795 * C47606 * C1016) *
                 C47560) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47917 -
                   (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                    C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                    C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                       C47810 * C47795 * C47906 +
                   (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                    C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                    C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                       C47810 * C47795 * C47880) *
                      C944 +
                  ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                    C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                    C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                       C47810 * C47795 * C47906 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47917 -
                   (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                    C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                    C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                       C47810 * C47795 * C47880) *
                      C945 +
                  ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47917 -
                   (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                    C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                    C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                       C47810 * C47795 * C47906 +
                   (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
                    C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
                    C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
                       C47810 * C47795 * C47880) *
                      C47877) *
                 C47560) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C47810 * C47795 * C47846 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C47810 * C47795 * C47693) *
              C47588 * C556 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C47810 * C47795 * C47693 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C47810 * C47795 * C47846) *
              C47588 * C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C47810 * C47795 * C47846 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C47810 * C47795 * C47693) *
              C47588 * C558 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C47810 * C47795 * C47693 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C47810 * C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C47810 * C47795 * C47846 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C47810 * C47795 * C47693) *
               C944 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C47810 * C47795 * C47693 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C47810 * C47795 * C47846) *
               C945 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C47810 * C47795 * C47846 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C47810 * C47795 * C47693) *
               C47877) *
              C47831 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C47810 * C47795 * C47693 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C47810 * C47795 * C47846) *
               C944 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C47810 * C47795 * C47846 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C47810 * C47795 * C47693) *
               C945 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C47810 * C47795 * C47693 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C47810 * C47795 * C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C47588 * C108 -
                  (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                   C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                   C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                      C47810 * C47795 * C47606 * C47588 * C109 +
                  (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                   C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                   C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                      C47810 * C47795 * C47606 * C47588 * C110 -
                  (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                   C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                   C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                      C47810 * C47795 * C47606 * C47588 * C111 +
                  (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 +
                   C115 * C136 - C116 * C124 - C115 * C137 + C102 * C145 +
                   C117 * C138 - C118 * C125 - C117 * C139 + C103 * C146) *
                      C47810 * C47795 * C47606 * C47588 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C47904 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C47877) *
                      C260 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C47904 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C47877) *
                      C261 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C47916 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C47904 +
                   (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                    C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                    C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                    C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                    C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                    C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                    C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                    C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                    C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47913 +
                  ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                    C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                    C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                       C47810 * C47795 * C47606 * C945 -
                   (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                    C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                    C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                    C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                    C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47900 +
                  ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                    C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                    C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                       C47810 * C47795 * C47606 * C944 -
                   (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                    C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                    C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                       C47810 * C47795 * C47606 * C945 +
                   (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                    C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                    C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                       C47810 * C47795 * C47606 * C47877) *
                      C47871)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                   C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                   C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                      C47810 * C47795 * C47606 * C1012 -
                  (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                   C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                   C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                      C47810 * C47795 * C47606 * C1013 +
                  (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                   C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                   C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                      C47810 * C47795 * C47606 * C1014 -
                  (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                   C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                   C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                      C47810 * C47795 * C47606 * C1015 +
                  (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
                   C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
                   C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
                      C47810 * C47795 * C47606 * C1016) *
                 C47560) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47647 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47654 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47606 * C2702) *
              C47565 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47654 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47647 -
           ((C6074 + C6075) * C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C2702) *
              C47574 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C47647 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47654 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47846 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C47647 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47846) *
               C47654 +
           (((C4807 + C4806) * C47810 * C4579 +
             (C5732 + C5733) * C47810 * C47895) *
                C47846 -
            ((C6434 + C6435) * C47810 * C47895 +
             (C5929 + C5928) * C47810 * C4579) *
                C47693) *
               C2702) *
              C2442 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47846) *
               C47647 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47846 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47654 +
           (((C6283 + C6282) * C47810 * C4579 +
             (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
              C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C6074 + C6075) * C47810 * C47895 +
             (C4811 + C4810) * C47810 * C4579) *
                C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47923 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47919 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47606 * C47909 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C47606 * C47887) *
              C2442 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47919 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47923 -
           ((C6074 + C6075) * C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47909 +
           ((C6075 + C6074) * C47810 * C4579 +
            (C4581 * C1032 - C4582 * C1022 - C4581 * C1033 + C4577 * C1040 +
             C4583 * C1034 - C4584 * C1023 - C4583 * C1035 + C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C2334 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47651) *
              C47922 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47651 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C2334) *
              C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C2334 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47651) *
              C47902 +
          (((C5104 + C5105) * C47810 * C4579 +
            (C4581 * C287 - C4582 * C270 - C4581 * C288 + C4577 * C300 +
             C4583 * C291 - C4584 * C272 - C4583 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47917 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47906 +
            ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
              C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                 C47810 * C4579 +
             (C5926 + C5927) * C47810 * C47895) *
                C47880) *
               C2334 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47906 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47917 -
            ((C5930 + C5931) * C47810 * C47895 +
             (C5927 + C5926) * C47810 * C4579) *
                C47880) *
               C47651) *
              C2442 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47906 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47917 -
            ((C7024 + C7025) * C47810 * C47895 +
             (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
              C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                 C47810 * C4579) *
                C47880) *
               C2334 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47917 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47906 +
            ((C7025 + C7024) * C47810 * C4579 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47846 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C2334 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47846) *
               C47651) *
              C47565 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47846) *
               C2334 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47846 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47651) *
              C47574 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C47810 * C4579 +
             (C4812 + C4813) * C47810 * C47895) *
                C47846 -
            ((C5470 + C5471) * C47810 * C47895 +
             (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
              C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                 C47810 * C4579) *
                C47693) *
               C2334 +
           (((C5471 + C5470) * C47810 * C4579 +
             (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
              C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C4814 + C4815) * C47810 * C47895 +
             (C4813 + C4812) * C47810 * C4579) *
                C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C2334 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47651) *
              C47922 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47651 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C2334) *
              C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C2334 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47651) *
              C47902 +
          (((C5104 + C5105) * C47810 * C4579 +
            (C4581 * C287 - C4582 * C270 - C4581 * C288 + C4577 * C300 +
             C4583 * C291 - C4584 * C272 - C4583 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47923 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47919 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47606 * C47909 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C47606 * C47887) *
              C2442 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47919 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47923 -
           ((C6074 + C6075) * C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47909 +
           ((C6075 + C6074) * C47810 * C4579 +
            (C4581 * C1032 - C4582 * C1022 - C4581 * C1033 + C4577 * C1040 +
             C4583 * C1034 - C4584 * C1023 - C4583 * C1035 + C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C3096 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C47647 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C3096) *
               C47654 +
           (((C4807 + C4806) * C47810 * C4579 +
             (C5732 + C5733) * C47810 * C47895) *
                C3096 -
            ((C6434 + C6435) * C47810 * C47895 +
             (C5929 + C5928) * C47810 * C4579) *
                C47693) *
               C2702) *
              C47831 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C3096) *
               C47647 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C3096 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47654 +
           (((C6283 + C6282) * C47810 * C4579 +
             (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
              C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C6074 + C6075) * C47810 * C47895 +
             (C4811 + C4810) * C47810 * C4579) *
                C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47689 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47696 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C3604) *
              C47647 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47696 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47689 -
           ((C5930 + C5931) * C47810 * C47895 +
            (C5927 + C5926) * C47810 * C4579) *
               C3604) *
              C47654 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47689 -
           ((C6434 + C6435) * C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C47696 +
           ((C5931 + C5930) * C47810 * C4579 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47810 * C47895) *
               C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C3096 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C47923 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47693 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C3096) *
              C47919 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C3096 -
           ((C6434 + C6435) * C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C47693) *
              C47909 +
          (((C6435 + C6434) * C47810 * C4579 +
            (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
             C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C3096 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C2334 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C3096) *
               C47651) *
              C47913 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C3096) *
               C2334 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C3096 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47651) *
              C47900 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C47810 * C4579 +
             (C4812 + C4813) * C47810 * C47895) *
                C3096 -
            ((C5470 + C5471) * C47810 * C47895 +
             (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
              C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                 C47810 * C4579) *
                C47693) *
               C2334 +
           (((C5471 + C5470) * C47810 * C4579 +
             (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
              C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C4814 + C4815) * C47810 * C47895 +
             (C4813 + C4812) * C47810 * C4579) *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47924 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47921 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47912 -
           ((C7306 + C7307) * C47810 * C47895 +
            (C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865 +
             C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866) *
                C47810 * C4579) *
               C47893) *
              C2334 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47921 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47924 -
           ((C5930 + C5931) * C47810 * C47895 +
            (C5927 + C5926) * C47810 * C4579) *
               C47912 +
           ((C7307 + C7306) * C47810 * C4579 +
            (C4581 * C7287 - C4582 * C7285 - C4581 * C7288 + C4577 * C7291 +
             C4583 * C7289 - C4584 * C7286 - C4583 * C7290 + C47864 * C7292) *
                C47810 * C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47689 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47696 +
            ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
              C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                 C47810 * C4579 +
             (C5926 + C5927) * C47810 * C47895) *
                C3604) *
               C2334 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47696 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47689 -
            ((C5930 + C5931) * C47810 * C47895 +
             (C5927 + C5926) * C47810 * C4579) *
                C3604) *
               C47651) *
              C47831 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47696 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47689 -
            ((C7024 + C7025) * C47810 * C47895 +
             (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
              C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                 C47810 * C4579) *
                C3604) *
               C2334 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47689 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47696 +
            ((C7025 + C7024) * C47810 * C4579 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C3096 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C2334 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C3096) *
               C47651) *
              C47913 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C3096) *
               C2334 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C3096 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47651) *
              C47900 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C47810 * C4579 +
             (C4812 + C4813) * C47810 * C47895) *
                C3096 -
            ((C5470 + C5471) * C47810 * C47895 +
             (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
              C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                 C47810 * C4579) *
                C47693) *
               C2334 +
           (((C5471 + C5470) * C47810 * C4579 +
             (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
              C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C4814 + C4815) * C47810 * C47895 +
             (C4813 + C4812) * C47810 * C4579) *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C3096 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C47923 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47693 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C3096) *
              C47919 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C3096 -
           ((C6434 + C6435) * C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C47693) *
              C47909 +
          (((C6435 + C6434) * C47810 * C4579 +
            (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
             C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C1286 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C1287 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47606 * C1288 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C47606 * C47887) *
              C47831 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C1287 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C1286 -
           ((C6074 + C6075) * C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C1288 +
           ((C6075 + C6074) * C47810 * C4579 +
            (C4581 * C1032 - C4582 * C1022 - C4581 * C1033 + C4577 * C1040 +
             C4583 * C1034 - C4584 * C1023 - C4583 * C1035 + C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47845 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47651) *
              C556 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47651 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47845) *
              C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C47845 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47651) *
              C558 +
          (((C5104 + C5105) * C47810 * C4579 +
            (C4581 * C287 - C4582 * C270 - C4581 * C288 + C4577 * C300 +
             C4583 * C291 - C4584 * C272 - C4583 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C1666 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C1667 +
            ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
              C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                 C47810 * C4579 +
             (C5926 + C5927) * C47810 * C47895) *
                C47880) *
               C47845 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C1667 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C1666 -
            ((C5930 + C5931) * C47810 * C47895 +
             (C5927 + C5926) * C47810 * C4579) *
                C47880) *
               C47651) *
              C47831 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C1667 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C1666 -
            ((C7024 + C7025) * C47810 * C47895 +
             (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
              C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                 C47810 * C4579) *
                C47880) *
               C47845 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C1666 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C1667 +
            ((C7025 + C7024) * C47810 * C4579 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47846 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C1286 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47693 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47846) *
              C1287 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47846 -
           ((C6434 + C6435) * C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C47693) *
              C1288 +
          (((C6435 + C6434) * C47810 * C4579 +
            (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
             C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47846 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C47845 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C4581 * C1171 - C4582 * C1157 - C4581 * C1172 + C4577 * C1184 +
              C4583 * C1169 - C4584 * C1156 - C4583 * C1170 + C47864 * C1183) *
                 C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47846) *
               C47651) *
              C260 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47846) *
               C47845 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47846 -
            ((C4583 * C1167 - C4584 * C1155 - C4583 * C1168 + C47864 * C1182 +
              C4581 * C1169 - C4582 * C1156 - C4581 * C1170 + C4577 * C1183) *
                 C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47651) *
              C261 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C47810 * C4579 +
             (C4812 + C4813) * C47810 * C47895) *
                C47846 -
            ((C5470 + C5471) * C47810 * C47895 +
             (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
              C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                 C47810 * C4579) *
                C47693) *
               C47845 +
           (((C5471 + C5470) * C47810 * C4579 +
             (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
              C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C4814 + C4815) * C47810 * C47895 +
             (C4813 + C4812) * C47810 * C4579) *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C2118 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C2119 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C2120 -
           ((C7306 + C7307) * C47810 * C47895 +
            (C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865 +
             C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866) *
                C47810 * C4579) *
               C47893) *
              C47845 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C2119 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C2118 -
           ((C5930 + C5931) * C47810 * C47895 +
            (C5927 + C5926) * C47810 * C4579) *
               C2120 +
           ((C7307 + C7306) * C47810 * C4579 +
            (C4581 * C7287 - C4582 * C7285 - C4581 * C7288 + C4577 * C7291 +
             C4583 * C7289 - C4584 * C7286 - C4583 * C7290 + C47864 * C7292) *
                C47810 * C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
                C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                   C47810 * C4579 +
               (C4581 * C277 - C4582 * C265 - C4581 * C278 + C4577 * C295 +
                C4583 * C275 - C4584 * C264 - C4583 * C276 + C47864 * C294) *
                   C47810 * C47895) *
                  C47606 * C47588 * C108 -
              ((C4583 * C273 - C4584 * C263 - C4583 * C274 + C47864 * C293 +
                C4581 * C275 - C4582 * C264 - C4581 * C276 + C4577 * C294) *
                   C47810 * C47895 +
               (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
                C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                   C47810 * C4579) *
                  C47606 * C47588 * C109 +
              ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
                C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                   C47810 * C4579 +
               (C4581 * C273 - C4582 * C263 - C4581 * C274 + C4577 * C293 +
                C4583 * C285 - C4584 * C269 - C4583 * C286 + C47864 * C299) *
                   C47810 * C47895) *
                  C47606 * C47588 * C110 -
              ((C4583 * C289 - C4584 * C271 - C4583 * C290 + C47864 * C301 +
                C4581 * C285 - C4582 * C269 - C4581 * C286 + C4577 * C299) *
                   C47810 * C47895 +
               (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
                C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                   C47810 * C4579) *
                  C47606 * C47588 * C111 +
              ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
                C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
                   C47810 * C4579 +
               (C4581 * C289 - C4582 * C271 - C4581 * C290 + C4577 * C301 +
                C4583 * C561 - C4584 * C560 - C4583 * C562 + C47864 * C563) *
                   C47810 * C47895) *
                  C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
                 C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                    C47810 * C4579 +
                (C4804 + C4805) * C47810 * C47895) *
                   C47606 * C47916 -
               ((C4806 + C4807) * C47810 * C47895 +
                (C4805 + C4804) * C47810 * C4579) *
                   C47606 * C47904 +
               ((C4807 + C4806) * C47810 * C4579 +
                (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
                 C4583 * C1026 - C4584 * C1019 - C4583 * C1027 +
                 C47864 * C1037) *
                    C47810 * C47895) *
                   C47606 * C47877) *
                  C260 +
              (((C4808 + C4809) * C47810 * C4579 +
                (C4810 + C4811) * C47810 * C47895) *
                   C47606 * C47904 -
               ((C4809 + C4808) * C47810 * C47895 +
                (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
                 C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                    C47810 * C4579) *
                   C47606 * C47916 -
               ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 +
                 C47864 * C1036 + C4581 * C1026 - C4582 * C1019 -
                 C4581 * C1027 + C4577 * C1037) *
                    C47810 * C47895 +
                (C4811 + C4810) * C47810 * C4579) *
                   C47606 * C47877) *
                  C261 +
              (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
                 C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                    C47810 * C4579 +
                (C4812 + C4813) * C47810 * C47895) *
                   C47606 * C47916 -
               ((C4814 + C4815) * C47810 * C47895 +
                (C4813 + C4812) * C47810 * C4579) *
                   C47606 * C47904 +
               ((C4815 + C4814) * C47810 * C4579 +
                (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
                 C4583 * C1293 - C4584 * C1292 - C4583 * C1294 +
                 C47864 * C1295) *
                    C47810 * C47895) *
                   C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47917 -
           ((C4583 * C821 - C4584 * C815 - C4583 * C822 + C47864 * C830 +
             C4581 * C819 - C4582 * C814 - C4581 * C820 + C4577 * C829) *
                C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47906 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C4581 * C1165 - C4582 * C1154 - C4581 * C1166 + C4577 * C1181 +
             C4583 * C1163 - C4584 * C1153 - C4583 * C1164 + C47864 * C1180) *
                C47810 * C47895) *
               C47880) *
              C47588 * C260 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C4581 * C821 - C4582 * C815 - C4581 * C822 + C4577 * C830 +
             C4583 * C823 - C4584 * C816 - C4583 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47906 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47917 -
           ((C4583 * C1161 - C4584 * C1152 - C4583 * C1162 + C47864 * C1179 +
             C4581 * C1163 - C4582 * C1153 - C4581 * C1164 + C4577 * C1180) *
                C47810 * C47895 +
            (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
             C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                C47810 * C4579) *
               C47880) *
              C47588 * C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47917 -
           ((C4583 * C825 - C4584 * C817 - C4583 * C826 + C47864 * C832 +
             C4581 * C823 - C4582 * C816 - C4581 * C824 + C4577 * C831) *
                C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C47906 +
           ((C4581 * C436 - C4582 * C421 - C4581 * C437 + C4577 * C451 +
             C4583 * C440 - C4584 * C423 - C4583 * C441 + C47864 * C453) *
                C47810 * C4579 +
            (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
             C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C944 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C945 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
             C4583 * C1026 - C4584 * C1019 - C4583 * C1027 + C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C945 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C944 -
           ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 + C47864 * C1036 +
             C4581 * C1026 - C4582 * C1019 - C4581 * C1027 + C4577 * C1037) *
                C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C944 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C945 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4804 + C4805) * C47810 * C47895) *
              C47606 * C1012 -
          ((C4806 + C4807) * C47810 * C47895 +
           (C4805 + C4804) * C47810 * C4579) *
              C47606 * C1013 +
          ((C4807 + C4806) * C47810 * C4579 +
           (C5732 + C5733) * C47810 * C47895) *
              C47606 * C1014 -
          ((C5734 + C5735) * C47810 * C47895 +
           (C5733 + C5732) * C47810 * C4579) *
              C47606 * C1015 +
          ((C5735 + C5734) * C47810 * C4579 +
           (C4581 * C5701 - C4582 * C5699 - C4581 * C5702 + C4577 * C5705 +
            C4583 * C5703 - C4584 * C5700 - C4583 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47917 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47906 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47880) *
              C944 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47906 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47917 -
           ((C5930 + C5931) * C47810 * C47895 +
            (C5927 + C5926) * C47810 * C4579) *
               C47880) *
              C945 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47917 -
           ((C4583 * C1549 - C4584 * C1545 - C4583 * C1550 + C47864 * C1554 +
             C4581 * C1547 - C4582 * C1544 - C4581 * C1548 + C4577 * C1553) *
                C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C47906 +
           ((C5931 + C5930) * C47810 * C4579 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C1666 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C1667 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C5468 + C5469) * C47810 * C47895) *
               C1667 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C1666 -
           ((C4583 * C1161 - C4584 * C1152 - C4583 * C1162 + C47864 * C1179 +
             C4581 * C1163 - C4582 * C1153 - C4581 * C1164 + C4577 * C1180) *
                C47810 * C47895 +
            (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
             C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                C47810 * C4579) *
               C47880) *
              C47588 * C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C1666 -
           ((C5470 + C5471) * C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C1667 +
           ((C4581 * C436 - C4582 * C421 - C4581 * C437 + C4577 * C451 +
             C4583 * C440 - C4584 * C423 - C4583 * C441 + C47864 * C453) *
                C47810 * C4579 +
            (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
             C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C1666 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C1667 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47880) *
              C47916 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C1667 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C1666 -
           ((C5930 + C5931) * C47810 * C47895 +
            (C5927 + C5926) * C47810 * C4579) *
               C47880) *
              C47904 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C1666 -
           ((C6434 + C6435) * C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C1667 +
           ((C5931 + C5930) * C47810 * C4579 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4804 + C4805) * C47810 * C47895) *
              C1841 -
          ((C5466 + C5467) * C47810 * C47895 +
           (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
            C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
               C47810 * C4579) *
              C1842 +
          ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
            C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
               C47810 * C4579 +
           (C5926 + C5927) * C47810 * C47895) *
              C1843 -
          ((C4583 * C2229 - C4584 * C2225 - C4583 * C2230 + C47864 * C2234 +
            C4581 * C2227 - C4582 * C2224 - C4581 * C2228 + C4577 * C2233) *
               C47810 * C47895 +
           (C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865 +
            C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866) *
               C47810 * C4579) *
              C1844 +
          ((C4581 * C1858 - C4582 * C1849 - C4581 * C1859 + C4577 * C1867 +
            C4583 * C1860 - C4584 * C1850 - C4583 * C1861 + C47864 * C1868) *
               C47810 * C4579 +
           (C4581 * C6811 - C4582 * C6809 - C4581 * C6812 + C4577 * C6815 +
            C4583 * C6813 - C4584 * C6810 - C4583 * C6814 + C47864 * C6816) *
               C47810 * C47895) *
              C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47846 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C944 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47846) *
               C945 +
           (((C4807 + C4806) * C47810 * C4579 +
             (C5732 + C5733) * C47810 * C47895) *
                C47846 -
            ((C4583 * C1549 - C4584 * C1545 - C4583 * C1550 + C47864 * C1554 +
              C4581 * C1547 - C4582 * C1544 - C4581 * C1548 + C4577 * C1553) *
                 C47810 * C47895 +
             (C5929 + C5928) * C47810 * C4579) *
                C47693) *
               C47877) *
              C47831 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47846) *
               C944 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47846 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C945 +
           (((C6283 + C6282) * C47810 * C4579 +
             (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
              C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C6074 + C6075) * C47810 * C47895 +
             (C4811 + C4810) * C47810 * C4579) *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47846 -
           ((C4583 * C821 - C4584 * C815 - C4583 * C822 + C47864 * C830 +
             C4581 * C819 - C4582 * C814 - C4581 * C820 + C4577 * C829) *
                C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C47588 * C556 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C4581 * C821 - C4582 * C815 - C4581 * C822 + C4577 * C830 +
             C4583 * C823 - C4584 * C816 - C4583 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47693 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47846) *
              C47588 * C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47846 -
           ((C4583 * C825 - C4584 * C817 - C4583 * C826 + C47864 * C832 +
             C4581 * C823 - C4582 * C816 - C4581 * C824 + C4577 * C831) *
                C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C47693) *
              C47588 * C558 +
          (((C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452 +
             C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454) *
                C47810 * C4579 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C2118 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C2119 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C2120 -
           ((C4583 * C2229 - C4584 * C2225 - C4583 * C2230 + C47864 * C2234 +
             C4581 * C2227 - C4582 * C2224 - C4581 * C2228 + C4577 * C2233) *
                C47810 * C47895 +
            (C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865 +
             C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866) *
                C47810 * C4579) *
               C47893) *
              C47588 * C47831 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C5468 + C5469) * C47810 * C47895) *
               C2119 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C2118 -
           ((C7024 + C7025) * C47810 * C47895 +
            (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
             C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                C47810 * C4579) *
               C2120 +
           ((C4581 * C1854 - C4582 * C1847 - C4581 * C1855 + C4577 * C1865 +
             C4583 * C1852 - C4584 * C1846 - C4583 * C1853 + C47864 * C1864) *
                C47810 * C4579 +
            (C4581 * C2229 - C4582 * C2225 - C4581 * C2230 + C4577 * C2234 +
             C4583 * C2231 - C4584 * C2226 - C4583 * C2232 + C47864 * C2235) *
                C47810 * C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47916 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47904 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
             C4583 * C1026 - C4584 * C1019 - C4583 * C1027 + C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C260 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47904 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47916 -
           ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 + C47864 * C1036 +
             C4581 * C1026 - C4582 * C1019 - C4581 * C1027 + C4577 * C1037) *
                C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47877) *
              C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C47916 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47904 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4581 * C277 - C4582 * C265 - C4581 * C278 + C4577 * C295 +
            C4583 * C275 - C4584 * C264 - C4583 * C276 + C47864 * C294) *
               C47810 * C47895) *
              C47606 * C47588 * C108 -
          ((C4583 * C273 - C4584 * C263 - C4583 * C274 + C47864 * C293 +
            C4581 * C275 - C4582 * C264 - C4581 * C276 + C4577 * C294) *
               C47810 * C47895 +
           (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
            C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
               C47810 * C4579) *
              C47606 * C47588 * C109 +
          ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
            C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
               C47810 * C4579 +
           (C4581 * C273 - C4582 * C263 - C4581 * C274 + C4577 * C293 +
            C4583 * C285 - C4584 * C269 - C4583 * C286 + C47864 * C299) *
               C47810 * C47895) *
              C47606 * C47588 * C110 -
          ((C4583 * C289 - C4584 * C271 - C4583 * C290 + C47864 * C301 +
            C4581 * C285 - C4582 * C269 - C4581 * C286 + C4577 * C299) *
               C47810 * C47895 +
           (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
            C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
               C47810 * C4579) *
              C47606 * C47588 * C111 +
          ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
            C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
               C47810 * C4579 +
           (C4581 * C289 - C4582 * C271 - C4581 * C290 + C4577 * C301 +
            C4583 * C561 - C4584 * C560 - C4583 * C562 + C47864 * C563) *
               C47810 * C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C944 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C945 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
             C4583 * C1026 - C4584 * C1019 - C4583 * C1027 + C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C945 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C944 -
           ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 + C47864 * C1036 +
             C4581 * C1026 - C4582 * C1019 - C4581 * C1027 + C4577 * C1037) *
                C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C944 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C945 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4804 + C4805) * C47810 * C47895) *
              C47606 * C1012 -
          ((C4806 + C4807) * C47810 * C47895 +
           (C4805 + C4804) * C47810 * C4579) *
              C47606 * C1013 +
          ((C4807 + C4806) * C47810 * C4579 +
           (C5732 + C5733) * C47810 * C47895) *
              C47606 * C1014 -
          ((C5734 + C5735) * C47810 * C47895 +
           (C5733 + C5732) * C47810 * C4579) *
              C47606 * C1015 +
          ((C5735 + C5734) * C47810 * C4579 +
           (C4581 * C5701 - C4582 * C5699 - C4581 * C5702 + C4577 * C5705 +
            C4583 * C5703 - C4584 * C5700 - C4583 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C1666 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C1667 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C5468 + C5469) * C47810 * C47895) *
               C1667 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C1666 -
           ((C4583 * C1161 - C4584 * C1152 - C4583 * C1162 + C47864 * C1179 +
             C4581 * C1163 - C4582 * C1153 - C4581 * C1164 + C4577 * C1180) *
                C47810 * C47895 +
            (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
             C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                C47810 * C4579) *
               C47880) *
              C47588 * C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C1666 -
           ((C5470 + C5471) * C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C1667 +
           ((C4581 * C436 - C4582 * C421 - C4581 * C437 + C4577 * C451 +
             C4583 * C440 - C4584 * C423 - C4583 * C441 + C47864 * C453) *
                C47810 * C4579 +
            (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
             C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C1666 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C1667 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47880) *
              C47916 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C1667 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C1666 -
           ((C5930 + C5931) * C47810 * C47895 +
            (C5927 + C5926) * C47810 * C4579) *
               C47880) *
              C47904 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C1666 -
           ((C6434 + C6435) * C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C1667 +
           ((C5931 + C5930) * C47810 * C4579 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C3096 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C47845 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C3096) *
               C47651) *
              C47565 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C3096) *
               C47845 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C3096 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47651) *
              C47574 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C47810 * C4579 +
             (C4812 + C4813) * C47810 * C47895) *
                C3096 -
            ((C5470 + C5471) * C47810 * C47895 +
             (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
              C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                 C47810 * C4579) *
                C47693) *
               C47845 +
           (((C5471 + C5470) * C47810 * C4579 +
             (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
              C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C4814 + C4815) * C47810 * C47895 +
             (C4813 + C4812) * C47810 * C4579) *
                C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47689 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47696 +
            ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
              C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                 C47810 * C4579 +
             (C5926 + C5927) * C47810 * C47895) *
                C3604) *
               C47845 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47696 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47689 -
            ((C5930 + C5931) * C47810 * C47895 +
             (C5927 + C5926) * C47810 * C4579) *
                C3604) *
               C47651) *
              C2442 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47696 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47689 -
            ((C7024 + C7025) * C47810 * C47895 +
             (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
              C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                 C47810 * C4579) *
                C3604) *
               C47845 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47689 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47696 +
            ((C7025 + C7024) * C47810 * C4579 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C3096 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C47916 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C3096) *
               C47904 +
           (((C4807 + C4806) * C47810 * C4579 +
             (C5732 + C5733) * C47810 * C47895) *
                C3096 -
            ((C6434 + C6435) * C47810 * C47895 +
             (C5929 + C5928) * C47810 * C4579) *
                C47693) *
               C47877) *
              C2442 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C3096) *
               C47916 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C3096 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47904 +
           (((C6283 + C6282) * C47810 * C4579 +
             (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
              C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C6074 + C6075) * C47810 * C47895 +
             (C4811 + C4810) * C47810 * C4579) *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C3096 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C47588 * C47922 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C5468 + C5469) * C47810 * C47895) *
               C47693 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C3096) *
              C47588 * C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C3096 -
           ((C5470 + C5471) * C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C47693) *
              C47588 * C47902 +
          (((C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452 +
             C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454) *
                C47810 * C4579 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47924 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47921 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47912 -
           ((C7306 + C7307) * C47810 * C47895 +
            (C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865 +
             C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866) *
                C47810 * C4579) *
               C47893) *
              C47588 * C2442 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C5468 + C5469) * C47810 * C47895) *
               C47921 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47924 -
           ((C7024 + C7025) * C47810 * C47895 +
            (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
             C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                C47810 * C4579) *
               C47912 +
           ((C4581 * C1854 - C4582 * C1847 - C4581 * C1855 + C4577 * C1865 +
             C4583 * C1852 - C4584 * C1846 - C4583 * C1853 + C47864 * C1864) *
                C47810 * C4579 +
            (C4581 * C2229 - C4582 * C2225 - C4581 * C2230 + C4577 * C2234 +
             C4583 * C2231 - C4584 * C2226 - C4583 * C2232 + C47864 * C2235) *
                C47810 * C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47689 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47696 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C3604) *
              C47588 * C47565 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C5468 + C5469) * C47810 * C47895) *
               C47696 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47689 -
           ((C7024 + C7025) * C47810 * C47895 +
            (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
             C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                C47810 * C4579) *
               C3604) *
              C47588 * C47574 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47689 -
           ((C5470 + C5471) * C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C47696 +
           ((C4581 * C436 - C4582 * C421 - C4581 * C437 + C4577 * C451 +
             C4583 * C440 - C4584 * C423 - C4583 * C441 + C47864 * C453) *
                C47810 * C4579 +
            (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
             C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                C47810 * C47895) *
               C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C3096 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C47588 * C47922 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C5468 + C5469) * C47810 * C47895) *
               C47693 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C3096) *
              C47588 * C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C3096 -
           ((C5470 + C5471) * C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C47693) *
              C47588 * C47902 +
          (((C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452 +
             C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454) *
                C47810 * C4579 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C3096 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C47916 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C3096) *
               C47904 +
           (((C4807 + C4806) * C47810 * C4579 +
             (C5732 + C5733) * C47810 * C47895) *
                C3096 -
            ((C6434 + C6435) * C47810 * C47895 +
             (C5929 + C5928) * C47810 * C4579) *
                C47693) *
               C47877) *
              C2442 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C3096) *
               C47916 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C3096 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47904 +
           (((C6283 + C6282) * C47810 * C4579 +
             (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
              C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C6074 + C6075) * C47810 * C47895 +
             (C4811 + C4810) * C47810 * C4579) *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47845 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47651) *
              C556 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47651 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47845) *
              C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C47845 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47651) *
              C558 +
          (((C5104 + C5105) * C47810 * C4579 +
            (C4581 * C287 - C4582 * C270 - C4581 * C288 + C4577 * C300 +
             C4583 * C291 - C4584 * C272 - C4583 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C1286 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C1287 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47606 * C1288 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C47606 * C47887) *
              C47831 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C1287 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C1286 -
           ((C6074 + C6075) * C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C1288 +
           ((C6075 + C6074) * C47810 * C4579 +
            (C4581 * C1032 - C4582 * C1022 - C4581 * C1033 + C4577 * C1040 +
             C4583 * C1034 - C4584 * C1023 - C4583 * C1035 + C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47846 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C47845 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C4581 * C1171 - C4582 * C1157 - C4581 * C1172 + C4577 * C1184 +
              C4583 * C1169 - C4584 * C1156 - C4583 * C1170 + C47864 * C1183) *
                 C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47846) *
               C47651) *
              C260 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47846) *
               C47845 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47846 -
            ((C4583 * C1167 - C4584 * C1155 - C4583 * C1168 + C47864 * C1182 +
              C4581 * C1169 - C4582 * C1156 - C4581 * C1170 + C4577 * C1183) *
                 C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C47651) *
              C261 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C47810 * C4579 +
             (C4812 + C4813) * C47810 * C47895) *
                C47846 -
            ((C5470 + C5471) * C47810 * C47895 +
             (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
              C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                 C47810 * C4579) *
                C47693) *
               C47845 +
           (((C5471 + C5470) * C47810 * C4579 +
             (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
              C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C4814 + C4815) * C47810 * C47895 +
             (C4813 + C4812) * C47810 * C4579) *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47846 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C1286 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47693 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47846) *
              C1287 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47846 -
           ((C6434 + C6435) * C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C47693) *
              C1288 +
          (((C6435 + C6434) * C47810 * C4579 +
            (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
             C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C5734 + C5735) * C47810 * C47895 +
            (C5733 + C5732) * C47810 * C4579) *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47916 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47904 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
             C4583 * C1026 - C4584 * C1019 - C4583 * C1027 + C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C260 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47904 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47916 -
           ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 + C47864 * C1036 +
             C4581 * C1026 - C4582 * C1019 - C4581 * C1027 + C4577 * C1037) *
                C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47877) *
              C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C47916 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47904 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4581 * C277 - C4582 * C265 - C4581 * C278 + C4577 * C295 +
            C4583 * C275 - C4584 * C264 - C4583 * C276 + C47864 * C294) *
               C47810 * C47895) *
              C47606 * C47588 * C108 -
          ((C4583 * C273 - C4584 * C263 - C4583 * C274 + C47864 * C293 +
            C4581 * C275 - C4582 * C264 - C4581 * C276 + C4577 * C294) *
               C47810 * C47895 +
           (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
            C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
               C47810 * C4579) *
              C47606 * C47588 * C109 +
          ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
            C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
               C47810 * C4579 +
           (C4581 * C273 - C4582 * C263 - C4581 * C274 + C4577 * C293 +
            C4583 * C285 - C4584 * C269 - C4583 * C286 + C47864 * C299) *
               C47810 * C47895) *
              C47606 * C47588 * C110 -
          ((C4583 * C289 - C4584 * C271 - C4583 * C290 + C47864 * C301 +
            C4581 * C285 - C4582 * C269 - C4581 * C286 + C4577 * C299) *
               C47810 * C47895 +
           (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
            C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
               C47810 * C4579) *
              C47606 * C47588 * C111 +
          ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
            C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
               C47810 * C4579 +
           (C4581 * C289 - C4582 * C271 - C4581 * C290 + C4577 * C301 +
            C4583 * C561 - C4584 * C560 - C4583 * C562 + C47864 * C563) *
               C47810 * C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47917 -
           ((C4583 * C821 - C4584 * C815 - C4583 * C822 + C47864 * C830 +
             C4581 * C819 - C4582 * C814 - C4581 * C820 + C4577 * C829) *
                C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47906 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C4581 * C1165 - C4582 * C1154 - C4581 * C1166 + C4577 * C1181 +
             C4583 * C1163 - C4584 * C1153 - C4583 * C1164 + C47864 * C1180) *
                C47810 * C47895) *
               C47880) *
              C47588 * C260 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C4581 * C821 - C4582 * C815 - C4581 * C822 + C4577 * C830 +
             C4583 * C823 - C4584 * C816 - C4583 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47906 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47917 -
           ((C4583 * C1161 - C4584 * C1152 - C4583 * C1162 + C47864 * C1179 +
             C4581 * C1163 - C4582 * C1153 - C4581 * C1164 + C4577 * C1180) *
                C47810 * C47895 +
            (C4583 * C436 - C4584 * C421 - C4583 * C437 + C47864 * C451 +
             C4581 * C434 - C4582 * C420 - C4581 * C435 + C4577 * C450) *
                C47810 * C4579) *
               C47880) *
              C47588 * C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47917 -
           ((C4583 * C825 - C4584 * C817 - C4583 * C826 + C47864 * C832 +
             C4581 * C823 - C4582 * C816 - C4581 * C824 + C4577 * C831) *
                C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C47906 +
           ((C4581 * C436 - C4582 * C421 - C4581 * C437 + C4577 * C451 +
             C4583 * C440 - C4584 * C423 - C4583 * C441 + C47864 * C453) *
                C47810 * C4579 +
            (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
             C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C944 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C945 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
             C4583 * C1026 - C4584 * C1019 - C4583 * C1027 + C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C945 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C944 -
           ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 + C47864 * C1036 +
             C4581 * C1026 - C4582 * C1019 - C4581 * C1027 + C4577 * C1037) *
                C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C944 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C945 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4804 + C4805) * C47810 * C47895) *
              C47606 * C1012 -
          ((C4806 + C4807) * C47810 * C47895 +
           (C4805 + C4804) * C47810 * C4579) *
              C47606 * C1013 +
          ((C4807 + C4806) * C47810 * C4579 +
           (C5732 + C5733) * C47810 * C47895) *
              C47606 * C1014 -
          ((C5734 + C5735) * C47810 * C47895 +
           (C5733 + C5732) * C47810 * C4579) *
              C47606 * C1015 +
          ((C5735 + C5734) * C47810 * C4579 +
           (C4581 * C5701 - C4582 * C5699 - C4581 * C5702 + C4577 * C5705 +
            C4583 * C5703 - C4584 * C5700 - C4583 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47917 -
           ((C5466 + C5467) * C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47906 +
           ((C4581 * C432 - C4582 * C419 - C4581 * C433 + C4577 * C449 +
             C4583 * C434 - C4584 * C420 - C4583 * C435 + C47864 * C450) *
                C47810 * C4579 +
            (C5926 + C5927) * C47810 * C47895) *
               C47880) *
              C944 +
          (((C5467 + C5466) * C47810 * C4579 +
            (C5928 + C5929) * C47810 * C47895) *
               C47906 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47917 -
           ((C5930 + C5931) * C47810 * C47895 +
            (C5927 + C5926) * C47810 * C4579) *
               C47880) *
              C945 +
          (((C4807 + C4806) * C47810 * C4579 +
            (C5732 + C5733) * C47810 * C47895) *
               C47917 -
           ((C4583 * C1549 - C4584 * C1545 - C4583 * C1550 + C47864 * C1554 +
             C4581 * C1547 - C4582 * C1544 - C4581 * C1548 + C4577 * C1553) *
                C47810 * C47895 +
            (C5929 + C5928) * C47810 * C4579) *
               C47906 +
           ((C5931 + C5930) * C47810 * C4579 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47846 -
           ((C4583 * C821 - C4584 * C815 - C4583 * C822 + C47864 * C830 +
             C4581 * C819 - C4582 * C814 - C4581 * C820 + C4577 * C829) *
                C47810 * C47895 +
            (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
             C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                C47810 * C4579) *
               C47693) *
              C47588 * C556 +
          (((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
             C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                C47810 * C4579 +
            (C4581 * C821 - C4582 * C815 - C4581 * C822 + C4577 * C830 +
             C4583 * C823 - C4584 * C816 - C4583 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47693 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47846) *
              C47588 * C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47846 -
           ((C4583 * C825 - C4584 * C817 - C4583 * C826 + C47864 * C832 +
             C4581 * C823 - C4582 * C816 - C4581 * C824 + C4577 * C831) *
                C47810 * C47895 +
            (C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452 +
             C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446) *
                C47810 * C4579) *
               C47693) *
              C47588 * C558 +
          (((C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452 +
             C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454) *
                C47810 * C4579 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C5105 + C5104) * C47810 * C47895 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C47810 * C4579) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C47810 * C4579 +
             (C4804 + C4805) * C47810 * C47895) *
                C47846 -
            ((C5466 + C5467) * C47810 * C47895 +
             (C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447 +
              C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448) *
                 C47810 * C4579) *
                C47693) *
               C944 +
           (((C5467 + C5466) * C47810 * C4579 +
             (C5928 + C5929) * C47810 * C47895) *
                C47693 -
            ((C4806 + C4807) * C47810 * C47895 +
             (C4805 + C4804) * C47810 * C4579) *
                C47846) *
               C945 +
           (((C4807 + C4806) * C47810 * C4579 +
             (C5732 + C5733) * C47810 * C47895) *
                C47846 -
            ((C4583 * C1549 - C4584 * C1545 - C4583 * C1550 + C47864 * C1554 +
              C4581 * C1547 - C4582 * C1544 - C4581 * C1548 + C4577 * C1553) *
                 C47810 * C47895 +
             (C5929 + C5928) * C47810 * C4579) *
                C47693) *
               C47877) *
              C47831 +
          ((((C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447 +
              C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446) *
                 C47810 * C4579 +
             (C5468 + C5469) * C47810 * C47895) *
                C47693 -
            ((C4809 + C4808) * C47810 * C47895 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C47810 * C4579) *
                C47846) *
               C944 +
           (((C4808 + C4809) * C47810 * C4579 +
             (C4810 + C4811) * C47810 * C47895) *
                C47846 -
            ((C6282 + C6283) * C47810 * C47895 +
             (C5469 + C5468) * C47810 * C4579) *
                C47693) *
               C945 +
           (((C6283 + C6282) * C47810 * C4579 +
             (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
              C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C6074 + C6075) * C47810 * C47895 +
             (C4811 + C4810) * C47810 * C4579) *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4581 * C277 - C4582 * C265 - C4581 * C278 + C4577 * C295 +
            C4583 * C275 - C4584 * C264 - C4583 * C276 + C47864 * C294) *
               C47810 * C47895) *
              C47606 * C47588 * C108 -
          ((C4583 * C273 - C4584 * C263 - C4583 * C274 + C47864 * C293 +
            C4581 * C275 - C4582 * C264 - C4581 * C276 + C4577 * C294) *
               C47810 * C47895 +
           (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
            C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
               C47810 * C4579) *
              C47606 * C47588 * C109 +
          ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
            C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
               C47810 * C4579 +
           (C4581 * C273 - C4582 * C263 - C4581 * C274 + C4577 * C293 +
            C4583 * C285 - C4584 * C269 - C4583 * C286 + C47864 * C299) *
               C47810 * C47895) *
              C47606 * C47588 * C110 -
          ((C4583 * C289 - C4584 * C271 - C4583 * C290 + C47864 * C301 +
            C4581 * C285 - C4582 * C269 - C4581 * C286 + C4577 * C299) *
               C47810 * C47895 +
           (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
            C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
               C47810 * C4579) *
              C47606 * C47588 * C111 +
          ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
            C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
               C47810 * C4579 +
           (C4581 * C289 - C4582 * C271 - C4581 * C290 + C4577 * C301 +
            C4583 * C561 - C4584 * C560 - C4583 * C562 + C47864 * C563) *
               C47810 * C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C47916 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C47904 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
             C4583 * C1026 - C4584 * C1019 - C4583 * C1027 + C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C260 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C47904 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C47916 -
           ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 + C47864 * C1036 +
             C4581 * C1026 - C4582 * C1019 - C4581 * C1027 + C4577 * C1037) *
                C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47877) *
              C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C47916 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C47904 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C47810 * C4579 +
            (C4804 + C4805) * C47810 * C47895) *
               C47606 * C944 -
           ((C4806 + C4807) * C47810 * C47895 +
            (C4805 + C4804) * C47810 * C4579) *
               C47606 * C945 +
           ((C4807 + C4806) * C47810 * C4579 +
            (C4581 * C1028 - C4582 * C1020 - C4581 * C1029 + C4577 * C1038 +
             C4583 * C1026 - C4584 * C1019 - C4583 * C1027 + C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C47810 * C4579 +
            (C4810 + C4811) * C47810 * C47895) *
               C47606 * C945 -
           ((C4809 + C4808) * C47810 * C47895 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C47810 * C4579) *
               C47606 * C944 -
           ((C4583 * C1024 - C4584 * C1018 - C4583 * C1025 + C47864 * C1036 +
             C4581 * C1026 - C4582 * C1019 - C4581 * C1027 + C4577 * C1037) *
                C47810 * C47895 +
            (C4811 + C4810) * C47810 * C4579) *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C47810 * C4579 +
            (C4812 + C4813) * C47810 * C47895) *
               C47606 * C944 -
           ((C4814 + C4815) * C47810 * C47895 +
            (C4813 + C4812) * C47810 * C4579) *
               C47606 * C945 +
           ((C4815 + C4814) * C47810 * C4579 +
            (C4581 * C1024 - C4582 * C1018 - C4581 * C1025 + C4577 * C1036 +
             C4583 * C1293 - C4584 * C1292 - C4583 * C1294 + C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C47810 * C4579 +
           (C4804 + C4805) * C47810 * C47895) *
              C47606 * C1012 -
          ((C4806 + C4807) * C47810 * C47895 +
           (C4805 + C4804) * C47810 * C4579) *
              C47606 * C1013 +
          ((C4807 + C4806) * C47810 * C4579 +
           (C5732 + C5733) * C47810 * C47895) *
              C47606 * C1014 -
          ((C5734 + C5735) * C47810 * C47895 +
           (C5733 + C5732) * C47810 * C4579) *
              C47606 * C1015 +
          ((C5735 + C5734) * C47810 * C4579 +
           (C4581 * C5701 - C4582 * C5699 - C4581 * C5702 + C4577 * C5705 +
            C4583 * C5703 - C4584 * C5700 - C4583 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C47647 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47654 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C2702) *
              C47565 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47654 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47647 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C2702) *
              C47574 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C47647 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47654 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47846 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C47647 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47846) *
               C47654 +
           (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
                C47846 -
            ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
                C47693) *
               C2702) *
              C2442 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47846) *
               C47647 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47846 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47654 +
           (((C6283 + C6282) * C10353 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
                C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C47923 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47919 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47909 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C47606 * C47887) *
              C2442 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47919 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47923 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47909 +
           ((C6075 + C6074) * C10353 +
            (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
             C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C2334 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47651) *
              C47922 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47651 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C2334) *
              C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C2334 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47651) *
              C47902 +
          (((C5104 + C5105) * C10353 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C11005 + C11004) * C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47917 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47906 +
            ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
                C47880) *
               C2334 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47906 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47917 -
            ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
                C47880) *
               C47651) *
              C2442 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47906 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47917 -
            ((C12774 + C12775) * C47897 + (C10727 + C10726) * C10353) * C47795 *
                C47880) *
               C2334 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47917 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47906 +
            ((C7025 + C7024) * C10353 +
             (C4581 * C2229 - C4582 * C2225 - C4581 * C2230 + C4577 * C2234 +
              C4583 * C2231 - C4584 * C2226 - C4583 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47846 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C2334 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47846) *
               C47651) *
              C47565 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47846) *
               C2334 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47846 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47651) *
              C47574 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C10353 +
             (C10728 + C10729) * C47897) *
                C47795 * C47846 -
            ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
                C47693) *
               C2334 +
           (((C5471 + C5470) * C10353 +
             (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
              C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
                C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C2334 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47651) *
              C47922 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47651 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C2334) *
              C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C2334 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47651) *
              C47902 +
          (((C5104 + C5105) * C10353 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C11005 + C11004) * C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C47923 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47919 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47909 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C47606 * C47887) *
              C2442 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47919 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47923 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47909 +
           ((C6075 + C6074) * C10353 +
            (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
             C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C3096 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C47647 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C3096) *
               C47654 +
           (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
                C3096 -
            ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
                C47693) *
               C2702) *
              C47831 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C3096) *
               C47647 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C3096 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47654 +
           (((C6283 + C6282) * C10353 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
                C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47689 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47696 +
           ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
               C3604) *
              C47647 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47696 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47689 -
           ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
               C3604) *
              C47654 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47689 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C47696 +
           ((C5931 + C5930) * C10353 +
            (C4581 * C7287 - C4582 * C7285 - C4581 * C7288 + C4577 * C7291 +
             C4583 * C7289 - C4584 * C7286 - C4583 * C7290 + C47864 * C7292) *
                C47897) *
               C47795 * C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C3096 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C47923 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47693 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C3096) *
              C47919 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C3096 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C47693) *
              C47909 +
          (((C6435 + C6434) * C10353 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C3096 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C2334 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C3096) *
               C47651) *
              C47913 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C3096) *
               C2334 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C3096 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47651) *
              C47900 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C10353 +
             (C10728 + C10729) * C47897) *
                C47795 * C3096 -
            ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
                C47693) *
               C2334 +
           (((C5471 + C5470) * C10353 +
             (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
              C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47924 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47921 +
           ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
               C47912 -
           ((C12436 + C12437) * C47897 + (C12435 + C12434) * C10353) * C47795 *
               C47893) *
              C2334 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47921 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47924 -
           ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
               C47912 +
           ((C7307 + C7306) * C10353 +
            (C4581 * C6811 - C4582 * C6809 - C4581 * C6812 + C4577 * C6815 +
             C4583 * C6813 - C4584 * C6810 - C4583 * C6814 + C47864 * C6816) *
                C47897) *
               C47795 * C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47689 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47696 +
            ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
                C3604) *
               C2334 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47696 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47689 -
            ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
                C3604) *
               C47651) *
              C47831 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47696 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47689 -
            ((C12774 + C12775) * C47897 + (C10727 + C10726) * C10353) * C47795 *
                C3604) *
               C2334 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47689 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47696 +
            ((C7025 + C7024) * C10353 +
             (C4581 * C2229 - C4582 * C2225 - C4581 * C2230 + C4577 * C2234 +
              C4583 * C2231 - C4584 * C2226 - C4583 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C3096 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C2334 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C3096) *
               C47651) *
              C47913 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C3096) *
               C2334 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C3096 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47651) *
              C47900 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C10353 +
             (C10728 + C10729) * C47897) *
                C47795 * C3096 -
            ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
                C47693) *
               C2334 +
           (((C5471 + C5470) * C10353 +
             (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
              C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C3096 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C47923 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47693 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C3096) *
              C47919 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C3096 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C47693) *
              C47909 +
          (((C6435 + C6434) * C10353 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C1286 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C1287 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C1288 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C47606 * C47887) *
              C47831 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C1287 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C1286 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C1288 +
           ((C6075 + C6074) * C10353 +
            (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
             C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C47845 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47651) *
              C556 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47651 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47845) *
              C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C47845 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47651) *
              C558 +
          (((C5104 + C5105) * C10353 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454 +
             C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452) *
                C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C1666 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C1667 +
            ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
                C47880) *
               C47845 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C1667 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C1666 -
            ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
                C47880) *
               C47651) *
              C47831 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C1667 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C1666 -
            ((C4583 * C1852 - C4584 * C1846 - C4583 * C1853 + C47864 * C1864 +
              C4581 * C1854 - C4582 * C1847 - C4581 * C1855 + C4577 * C1865) *
                 C47897 +
             (C10727 + C10726) * C10353) *
                C47795 * C47880) *
               C47845 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C1666 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C1667 +
            ((C7025 + C7024) * C10353 +
             (C4581 * C2229 - C4582 * C2225 - C4581 * C2230 + C4577 * C2234 +
              C4583 * C2231 - C4584 * C2226 - C4583 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47846 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C1286 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47693 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47846) *
              C1287 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47846 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C47693) *
              C1288 +
          (((C6435 + C6434) * C10353 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47846 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C47845 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47846) *
               C47651) *
              C260 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47846) *
               C47845 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47846 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47651) *
              C261 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C10353 +
             (C10728 + C10729) * C47897) *
                C47795 * C47846 -
            ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
                C47693) *
               C47845 +
           (((C5471 + C5470) * C10353 +
             (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
              C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C2118 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C2119 +
           ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
               C2120 -
           ((C12436 + C12437) * C47897 + (C12435 + C12434) * C10353) * C47795 *
               C47893) *
              C47845 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C2119 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C2118 -
           ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
               C2120 +
           ((C7307 + C7306) * C10353 +
            (C4581 * C6811 - C4582 * C6809 - C4581 * C6812 + C4577 * C6815 +
             C4583 * C6813 - C4584 * C6810 - C4583 * C6814 + C47864 * C6816) *
                C47897) *
               C47795 * C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
                C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                   C10353 +
               (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
                C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
                   C47897) *
                  C47795 * C47606 * C47588 * C108 -
              ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
                C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
                   C47897 +
               (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
                C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                   C10353) *
                  C47795 * C47606 * C47588 * C109 +
              ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
                C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                   C10353 +
               (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
                C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
                   C47897) *
                  C47795 * C47606 * C47588 * C110 -
              ((C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454 +
                C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452) *
                   C47897 +
               (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
                C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                   C10353) *
                  C47795 * C47606 * C47588 * C111 +
              ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
                C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
                   C10353 +
               (C4581 * C442 - C4582 * C424 - C4581 * C443 + C4577 * C454 +
                C4583 * C665 - C4584 * C664 - C4583 * C666 + C47864 * C667) *
                   C47897) *
                  C47795 * C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
                 C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                    C10353 +
                (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
                 C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
                    C47897) *
                   C47795 * C47606 * C47916 -
               ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                   C47606 * C47904 +
               ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
                   C47606 * C47877) *
                  C260 +
              (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                   C47606 * C47904 -
               ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
                 C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
                    C47897 +
                (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
                 C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                    C10353) *
                   C47795 * C47606 * C47916 -
               ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
                   C47606 * C47877) *
                  C261 +
              (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
                 C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                    C10353 +
                (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
                 C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
                    C47897) *
                   C47795 * C47606 * C47916 -
               ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
                   C47606 * C47904 +
               ((C4815 + C4814) * C10353 +
                (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
                 C4583 * C1443 - C4584 * C1442 - C4583 * C1444 +
                 C47864 * C1445) *
                    C47897) *
                   C47795 * C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47917 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47906 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C260 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47906 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47917 -
           ((C4583 * C1852 - C4584 * C1846 - C4583 * C1853 + C47864 * C1864 +
             C4581 * C1854 - C4582 * C1847 - C4581 * C1855 + C4577 * C1865) *
                C47897 +
            (C10727 + C10726) * C10353) *
               C47795 * C47880) *
              C47588 * C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47917 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C47906 +
           ((C10731 + C10730) * C10353 +
            (C4581 * C1852 - C4582 * C1846 - C4581 * C1853 + C4577 * C1864 +
             C4583 * C2123 - C4584 * C2122 - C4583 * C2124 + C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C944 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C945 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C945 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C944 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C944 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C945 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C10720 + C10721) * C47897) *
              C47795 * C47606 * C1012 -
          ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
              C47606 * C1013 +
          ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
              C47606 * C1014 -
          ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
              C47606 * C1015 +
          ((C5735 + C5734) * C10353 +
           (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
            C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47917 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47906 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C944 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47906 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47917 -
           ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
               C47880) *
              C945 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47917 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C47906 +
           ((C5931 + C5930) * C10353 +
            (C4581 * C7287 - C4582 * C7285 - C4581 * C7288 + C4577 * C7291 +
             C4583 * C7289 - C4584 * C7286 - C4583 * C7290 + C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C1666 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C1667 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47913 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C1667 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C1666 -
           ((C4583 * C1852 - C4584 * C1846 - C4583 * C1853 + C47864 * C1864 +
             C4581 * C1854 - C4582 * C1847 - C4581 * C1855 + C4577 * C1865) *
                C47897 +
            (C10727 + C10726) * C10353) *
               C47795 * C47880) *
              C47588 * C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C1666 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C1667 +
           ((C10731 + C10730) * C10353 +
            (C4581 * C1852 - C4582 * C1846 - C4581 * C1853 + C4577 * C1864 +
             C4583 * C2123 - C4584 * C2122 - C4583 * C2124 + C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C1666 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C1667 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47916 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C1667 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C1666 -
           ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
               C47880) *
              C47904 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C1666 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C1667 +
           ((C5931 + C5930) * C10353 +
            (C4581 * C7287 - C4582 * C7285 - C4581 * C7288 + C4577 * C7291 +
             C4583 * C7289 - C4584 * C7286 - C4583 * C7290 + C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C10720 + C10721) * C47897) *
              C47795 * C1841 -
          ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
              C1842 +
          ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
              C1843 -
          ((C12436 + C12437) * C47897 + (C12435 + C12434) * C10353) * C47795 *
              C1844 +
          ((C12437 + C12436) * C10353 +
           (C4581 * C12403 - C4582 * C12401 - C4581 * C12404 + C4577 * C12407 +
            C4583 * C12405 - C4584 * C12402 - C4583 * C12406 +
            C47864 * C12408) *
               C47897) *
              C47795 * C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47846 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C944 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47846) *
               C945 +
           (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
                C47846 -
            ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
                C47693) *
               C47877) *
              C47831 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47846) *
               C944 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47846 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C945 +
           (((C6283 + C6282) * C10353 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47846 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C47588 * C556 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47693 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47846) *
              C47588 * C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47846 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C47693) *
              C47588 * C558 +
          (((C11004 + C11005) * C10353 +
            (C4581 * C440 - C4582 * C423 - C4581 * C441 + C4577 * C453 +
             C4583 * C444 - C4584 * C425 - C4583 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C11005 + C11004) * C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C2118 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C2119 +
           ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
               C2120 -
           ((C12436 + C12437) * C47897 + (C12435 + C12434) * C10353) * C47795 *
               C47893) *
              C47588 * C47831 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C2119 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C2118 -
           ((C12774 + C12775) * C47897 + (C10727 + C10726) * C10353) * C47795 *
               C2120 +
           ((C12775 + C12774) * C10353 +
            (C4581 * C1860 - C4582 * C1850 - C4581 * C1861 + C4577 * C1868 +
             C4583 * C1862 - C4584 * C1851 - C4583 * C1863 + C47864 * C1869) *
                C47897) *
               C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
             C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47904 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47877) *
              C260 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47904 -
           ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
             C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
                C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47916 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
             C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47904 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
            C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
               C47897) *
              C47795 * C47606 * C47588 * C108 -
          ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
            C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
               C47897 +
           (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
            C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
               C10353) *
              C47795 * C47606 * C47588 * C109 +
          ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
            C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
               C10353 +
           (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
            C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
               C47897) *
              C47795 * C47606 * C47588 * C110 -
          ((C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454 +
            C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452) *
               C47897 +
           (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
            C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
               C10353) *
              C47795 * C47606 * C47588 * C111 +
          ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
            C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
               C10353 +
           (C4581 * C442 - C4582 * C424 - C4581 * C443 + C4577 * C454 +
            C4583 * C665 - C4584 * C664 - C4583 * C666 + C47864 * C667) *
               C47897) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C944 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C945 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C945 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C944 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C944 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C945 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C10720 + C10721) * C47897) *
              C47795 * C47606 * C1012 -
          ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
              C47606 * C1013 +
          ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
              C47606 * C1014 -
          ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
              C47606 * C1015 +
          ((C5735 + C5734) * C10353 +
           (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
            C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C1666 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C1667 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47913 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C1667 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C1666 -
           ((C4583 * C1852 - C4584 * C1846 - C4583 * C1853 + C47864 * C1864 +
             C4581 * C1854 - C4582 * C1847 - C4581 * C1855 + C4577 * C1865) *
                C47897 +
            (C10727 + C10726) * C10353) *
               C47795 * C47880) *
              C47588 * C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C1666 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C1667 +
           ((C10731 + C10730) * C10353 +
            (C4581 * C1852 - C4582 * C1846 - C4581 * C1853 + C4577 * C1864 +
             C4583 * C2123 - C4584 * C2122 - C4583 * C2124 + C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C1666 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C1667 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47916 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C1667 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C1666 -
           ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
               C47880) *
              C47904 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C1666 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C1667 +
           ((C5931 + C5930) * C10353 +
            (C4581 * C7287 - C4582 * C7285 - C4581 * C7288 + C4577 * C7291 +
             C4583 * C7289 - C4584 * C7286 - C4583 * C7290 + C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C3096 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C47845 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C3096) *
               C47651) *
              C47565 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C3096) *
               C47845 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C3096 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47651) *
              C47574 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C10353 +
             (C10728 + C10729) * C47897) *
                C47795 * C3096 -
            ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
                C47693) *
               C47845 +
           (((C5471 + C5470) * C10353 +
             (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
              C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
                C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47689 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47696 +
            ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
                C3604) *
               C47845 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47696 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47689 -
            ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
                C3604) *
               C47651) *
              C2442 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47696 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47689 -
            ((C12774 + C12775) * C47897 + (C10727 + C10726) * C10353) * C47795 *
                C3604) *
               C47845 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47689 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47696 +
            ((C7025 + C7024) * C10353 +
             (C4581 * C2229 - C4582 * C2225 - C4581 * C2230 + C4577 * C2234 +
              C4583 * C2231 - C4584 * C2226 - C4583 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C3096 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C47916 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C3096) *
               C47904 +
           (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
                C3096 -
            ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
                C47693) *
               C47877) *
              C2442 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C3096) *
               C47916 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C3096 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47904 +
           (((C6283 + C6282) * C10353 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C3096 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C47588 * C47922 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47693 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C3096) *
              C47588 * C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C3096 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C47693) *
              C47588 * C47902 +
          (((C11004 + C11005) * C10353 +
            (C4581 * C440 - C4582 * C423 - C4581 * C441 + C4577 * C453 +
             C4583 * C444 - C4584 * C425 - C4583 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C11005 + C11004) * C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47924 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47921 +
           ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
               C47912 -
           ((C12436 + C12437) * C47897 + (C12435 + C12434) * C10353) * C47795 *
               C47893) *
              C47588 * C2442 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47921 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47924 -
           ((C12774 + C12775) * C47897 + (C10727 + C10726) * C10353) * C47795 *
               C47912 +
           ((C12775 + C12774) * C10353 +
            (C4581 * C1860 - C4582 * C1850 - C4581 * C1861 + C4577 * C1868 +
             C4583 * C1862 - C4584 * C1851 - C4583 * C1863 + C47864 * C1869) *
                C47897) *
               C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47689 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47696 +
           ((C10723 + C10722) * C10353 + (C12434 + C12435) * C47897) * C47795 *
               C3604) *
              C47588 * C47565 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47696 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47689 -
           ((C12774 + C12775) * C47897 + (C10727 + C10726) * C10353) * C47795 *
               C3604) *
              C47588 * C47574 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47689 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C47696 +
           ((C10731 + C10730) * C10353 +
            (C4581 * C1852 - C4582 * C1846 - C4581 * C1853 + C4577 * C1864 +
             C4583 * C2123 - C4584 * C2122 - C4583 * C2124 + C47864 * C2125) *
                C47897) *
               C47795 * C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C3096 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C47588 * C47922 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47693 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C3096) *
              C47588 * C47915 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C3096 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C47693) *
              C47588 * C47902 +
          (((C11004 + C11005) * C10353 +
            (C4581 * C440 - C4582 * C423 - C4581 * C441 + C4577 * C453 +
             C4583 * C444 - C4584 * C425 - C4583 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C11005 + C11004) * C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C3096 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C47916 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C3096) *
               C47904 +
           (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
                C3096 -
            ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
                C47693) *
               C47877) *
              C2442 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C3096) *
               C47916 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C3096 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47904 +
           (((C6283 + C6282) * C10353 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C47845 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47651) *
              C556 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47651 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47845) *
              C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C47845 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47651) *
              C558 +
          (((C5104 + C5105) * C10353 +
            (C4581 * C825 - C4582 * C817 - C4581 * C826 + C4577 * C832 +
             C4583 * C827 - C4584 * C818 - C4583 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454 +
             C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452) *
                C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C1286 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C1287 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C1288 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C47606 * C47887) *
              C47831 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C1287 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C1286 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C1288 +
           ((C6075 + C6074) * C10353 +
            (C4581 * C1549 - C4582 * C1545 - C4581 * C1550 + C4577 * C1554 +
             C4583 * C1551 - C4584 * C1546 - C4583 * C1552 + C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47846 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C47845 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47846) *
               C47651) *
              C260 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47846) *
               C47845 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47846 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C47651) *
              C261 +
          ((((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
              C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                 C10353 +
             (C10728 + C10729) * C47897) *
                C47795 * C47846 -
            ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
                C47693) *
               C47845 +
           (((C5471 + C5470) * C10353 +
             (C4581 * C1161 - C4582 * C1152 - C4581 * C1162 + C4577 * C1179 +
              C4583 * C2017 - C4584 * C2016 - C4583 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47846 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C1286 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47693 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47846) *
              C1287 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47846 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C47693) *
              C1288 +
          (((C6435 + C6434) * C10353 +
            (C4581 * C5883 - C4582 * C5881 - C4581 * C5884 + C4577 * C5887 +
             C4583 * C5885 - C4584 * C5882 - C4583 * C5886 + C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
             C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47904 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47877) *
              C260 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47904 -
           ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
             C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
                C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47916 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
             C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47904 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
            C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
               C47897) *
              C47795 * C47606 * C47588 * C108 -
          ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
            C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
               C47897 +
           (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
            C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
               C10353) *
              C47795 * C47606 * C47588 * C109 +
          ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
            C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
               C10353 +
           (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
            C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
               C47897) *
              C47795 * C47606 * C47588 * C110 -
          ((C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454 +
            C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452) *
               C47897 +
           (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
            C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
               C10353) *
              C47795 * C47606 * C47588 * C111 +
          ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
            C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
               C10353 +
           (C4581 * C442 - C4582 * C424 - C4581 * C443 + C4577 * C454 +
            C4583 * C665 - C4584 * C664 - C4583 * C666 + C47864 * C667) *
               C47897) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47917 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47906 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C260 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47906 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47917 -
           ((C4583 * C1852 - C4584 * C1846 - C4583 * C1853 + C47864 * C1864 +
             C4581 * C1854 - C4582 * C1847 - C4581 * C1855 + C4577 * C1865) *
                C47897 +
            (C10727 + C10726) * C10353) *
               C47795 * C47880) *
              C47588 * C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47917 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C47906 +
           ((C10731 + C10730) * C10353 +
            (C4581 * C1852 - C4582 * C1846 - C4581 * C1853 + C4577 * C1864 +
             C4583 * C2123 - C4584 * C2122 - C4583 * C2124 + C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C944 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C945 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C945 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C944 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C944 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C945 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C10720 + C10721) * C47897) *
              C47795 * C47606 * C1012 -
          ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
              C47606 * C1013 +
          ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
              C47606 * C1014 -
          ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
              C47606 * C1015 +
          ((C5735 + C5734) * C10353 +
           (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
            C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47917 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47906 +
           ((C10723 + C10722) * C10353 +
            (C4581 * C1856 - C4582 * C1848 - C4581 * C1857 + C4577 * C1866 +
             C4583 * C1854 - C4584 * C1847 - C4583 * C1855 + C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C944 +
          (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
               C47906 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47917 -
           ((C7306 + C7307) * C47897 + (C5927 + C5926) * C10353) * C47795 *
               C47880) *
              C945 +
          (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47917 -
           ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
               C47906 +
           ((C5931 + C5930) * C10353 +
            (C4581 * C7287 - C4582 * C7285 - C4581 * C7288 + C4577 * C7291 +
             C4583 * C7289 - C4584 * C7286 - C4583 * C7290 + C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47846 -
           ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
               C47693) *
              C47588 * C556 +
          (((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
               C47693 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47846) *
              C47588 * C557 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47846 -
           ((C10730 + C10731) * C47897 + (C10729 + C10728) * C10353) * C47795 *
               C47693) *
              C47588 * C558 +
          (((C11004 + C11005) * C10353 +
            (C4581 * C440 - C4582 * C423 - C4581 * C441 + C4577 * C453 +
             C4583 * C444 - C4584 * C425 - C4583 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C11005 + C11004) * C47897 +
            (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
             C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
                C10353) *
               C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
              C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                 C10353 +
             (C10720 + C10721) * C47897) *
                C47795 * C47846 -
            ((C10722 + C10723) * C47897 + (C10721 + C10720) * C10353) * C47795 *
                C47693) *
               C944 +
           (((C5467 + C5466) * C10353 + (C5926 + C5927) * C47897) * C47795 *
                C47693 -
            ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
                C47846) *
               C945 +
           (((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
                C47846 -
            ((C5930 + C5931) * C47897 + (C5929 + C5928) * C10353) * C47795 *
                C47693) *
               C47877) *
              C47831 +
          ((((C10724 + C10725) * C10353 + (C10726 + C10727) * C47897) * C47795 *
                C47693 -
            ((C10725 + C10724) * C47897 +
             (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
              C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                 C10353) *
                C47795 * C47846) *
               C944 +
           (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
                C47846 -
            ((C7024 + C7025) * C47897 + (C5469 + C5468) * C10353) * C47795 *
                C47693) *
               C945 +
           (((C6283 + C6282) * C10353 +
             (C4581 * C1175 - C4582 * C1159 - C4581 * C1176 + C4577 * C1186 +
              C4583 * C1177 - C4584 * C1160 - C4583 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
            C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
               C47897) *
              C47795 * C47606 * C47588 * C108 -
          ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
            C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
               C47897 +
           (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
            C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
               C10353) *
              C47795 * C47606 * C47588 * C109 +
          ((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
            C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
               C10353 +
           (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
            C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
               C47897) *
              C47795 * C47606 * C47588 * C110 -
          ((C4583 * C442 - C4584 * C424 - C4583 * C443 + C47864 * C454 +
            C4581 * C438 - C4582 * C422 - C4581 * C439 + C4577 * C452) *
               C47897 +
           (C4583 * C134 - C4584 * C123 - C4583 * C135 + C47864 * C144 +
            C4581 * C132 - C4582 * C122 - C4581 * C133 + C4577 * C143) *
               C10353) *
              C47795 * C47606 * C47588 * C111 +
          ((C4581 * C134 - C4582 * C123 - C4581 * C135 + C4577 * C144 +
            C4583 * C136 - C4584 * C124 - C4583 * C137 + C47864 * C145) *
               C10353 +
           (C4581 * C442 - C4582 * C424 - C4581 * C443 + C4577 * C454 +
            C4583 * C665 - C4584 * C664 - C4583 * C666 + C47864 * C667) *
               C47897) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C4581 * C430 - C4582 * C418 - C4581 * C431 + C4577 * C448 +
             C4583 * C428 - C4584 * C417 - C4583 * C429 + C47864 * C447) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C47904 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47877) *
              C260 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C47904 -
           ((C4583 * C426 - C4584 * C416 - C4583 * C427 + C47864 * C446 +
             C4581 * C428 - C4582 * C417 - C4581 * C429 + C4577 * C447) *
                C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C47916 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C4581 * C426 - C4582 * C416 - C4581 * C427 + C4577 * C446 +
             C4583 * C438 - C4584 * C422 - C4583 * C439 + C47864 * C452) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C47904 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
             C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
                C10353 +
            (C10720 + C10721) * C47897) *
               C47795 * C47606 * C944 -
           ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
               C47606 * C945 +
           ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C4808 + C4809) * C10353 + (C5468 + C5469) * C47897) * C47795 *
               C47606 * C945 -
           ((C10725 + C10724) * C47897 +
            (C4583 * C130 - C4584 * C121 - C4583 * C131 + C47864 * C142 +
             C4581 * C128 - C4582 * C120 - C4581 * C129 + C4577 * C141) *
                C10353) *
               C47795 * C47606 * C944 -
           ((C6282 + C6283) * C47897 + (C4811 + C4810) * C10353) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C4581 * C130 - C4582 * C121 - C4581 * C131 + C4577 * C142 +
             C4583 * C132 - C4584 * C122 - C4583 * C133 + C47864 * C143) *
                C10353 +
            (C10728 + C10729) * C47897) *
               C47795 * C47606 * C944 -
           ((C5470 + C5471) * C47897 + (C4813 + C4812) * C10353) * C47795 *
               C47606 * C945 +
           ((C4815 + C4814) * C10353 +
            (C4581 * C1167 - C4582 * C1155 - C4581 * C1168 + C4577 * C1182 +
             C4583 * C1443 - C4584 * C1442 - C4583 * C1444 + C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4581 * C126 - C4582 * C119 - C4581 * C127 + C4577 * C140 +
            C4583 * C128 - C4584 * C120 - C4583 * C129 + C47864 * C141) *
               C10353 +
           (C10720 + C10721) * C47897) *
              C47795 * C47606 * C1012 -
          ((C5466 + C5467) * C47897 + (C4805 + C4804) * C10353) * C47795 *
              C47606 * C1013 +
          ((C4807 + C4806) * C10353 + (C5928 + C5929) * C47897) * C47795 *
              C47606 * C1014 -
          ((C6434 + C6435) * C47897 + (C5733 + C5732) * C10353) * C47795 *
              C47606 * C1015 +
          ((C5735 + C5734) * C10353 +
           (C4581 * C6415 - C4582 * C6413 - C4581 * C6416 + C4577 * C6419 +
            C4583 * C6417 - C4584 * C6414 - C4583 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47647 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47654 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47606 * C2702) *
              C47565 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47654 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47647 -
           ((C17432 + C17433) * C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C2702) *
              C47574 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C47647 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47654 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47846 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C47647 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47846) *
               C47654 +
           (((C16181 + C16180) * C47810 * C15953 +
             (C17098 + C17099) * C47810 * C47895) *
                C47846 -
            ((C17784 + C17785) * C47810 * C47895 +
             (C17287 + C17286) * C47810 * C15953) *
                C47693) *
               C2702) *
              C2442 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47846) *
               C47647 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47846 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47654 +
           (((C17641 + C17640) * C47810 * C15953 +
             (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 +
              C15951 * C1554 + C15957 * C1551 - C15958 * C1546 -
              C15957 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C17432 + C17433) * C47810 * C47895 +
             (C16185 + C16184) * C47810 * C15953) *
                C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47923 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47919 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47606 * C47909 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C47606 * C47887) *
              C2442 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47919 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47923 -
           ((C17432 + C17433) * C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47909 +
           ((C17433 + C17432) * C47810 * C15953 +
            (C15955 * C1032 - C15956 * C1022 - C15955 * C1033 + C15951 * C1040 +
             C15957 * C1034 - C15958 * C1023 - C15957 * C1035 +
             C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C2334 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47651) *
              C47922 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47651 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C2334) *
              C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C2334 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47651) *
              C47902 +
          (((C16478 + C16479) * C47810 * C15953 +
            (C15955 * C287 - C15956 * C270 - C15955 * C288 + C15951 * C300 +
             C15957 * C291 - C15958 * C272 - C15957 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47917 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47906 +
            ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
              C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                 C47810 * C15953 +
             (C17284 + C17285) * C47810 * C47895) *
                C47880) *
               C2334 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47906 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47917 -
            ((C17288 + C17289) * C47810 * C47895 +
             (C17285 + C17284) * C47810 * C15953) *
                C47880) *
               C47651) *
              C2442 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47906 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47917 -
            ((C18366 + C18367) * C47810 * C47895 +
             (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
              C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                 C47810 * C15953) *
                C47880) *
               C2334 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47917 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47906 +
            ((C18367 + C18366) * C47810 * C15953 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47846 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C2334 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47846) *
               C47651) *
              C47565 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47846) *
               C2334 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47846 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47651) *
              C47574 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C47810 * C15953 +
             (C16186 + C16187) * C47810 * C47895) *
                C47846 -
            ((C16844 + C16845) * C47810 * C47895 +
             (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
              C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                 C47810 * C15953) *
                C47693) *
               C2334 +
           (((C16845 + C16844) * C47810 * C15953 +
             (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 +
              C15951 * C1182 + C15957 * C1443 - C15958 * C1442 -
              C15957 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C16188 + C16189) * C47810 * C47895 +
             (C16187 + C16186) * C47810 * C15953) *
                C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C2334 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47651) *
              C47922 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47651 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C2334) *
              C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C2334 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47651) *
              C47902 +
          (((C16478 + C16479) * C47810 * C15953 +
            (C15955 * C287 - C15956 * C270 - C15955 * C288 + C15951 * C300 +
             C15957 * C291 - C15958 * C272 - C15957 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47923 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47919 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47606 * C47909 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C47606 * C47887) *
              C2442 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47919 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47923 -
           ((C17432 + C17433) * C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47909 +
           ((C17433 + C17432) * C47810 * C15953 +
            (C15955 * C1032 - C15956 * C1022 - C15955 * C1033 + C15951 * C1040 +
             C15957 * C1034 - C15958 * C1023 - C15957 * C1035 +
             C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C3096 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C47647 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C3096) *
               C47654 +
           (((C16181 + C16180) * C47810 * C15953 +
             (C17098 + C17099) * C47810 * C47895) *
                C3096 -
            ((C17784 + C17785) * C47810 * C47895 +
             (C17287 + C17286) * C47810 * C15953) *
                C47693) *
               C2702) *
              C47831 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C3096) *
               C47647 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C3096 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47654 +
           (((C17641 + C17640) * C47810 * C15953 +
             (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 +
              C15951 * C1554 + C15957 * C1551 - C15958 * C1546 -
              C15957 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C17432 + C17433) * C47810 * C47895 +
             (C16185 + C16184) * C47810 * C15953) *
                C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47689 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47696 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C3604) *
              C47647 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47696 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47689 -
           ((C17288 + C17289) * C47810 * C47895 +
            (C17285 + C17284) * C47810 * C15953) *
               C3604) *
              C47654 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47689 -
           ((C17784 + C17785) * C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C47696 +
           ((C17289 + C17288) * C47810 * C15953 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47810 * C47895) *
               C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C3096 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C47923 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47693 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C3096) *
              C47919 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C3096 -
           ((C17784 + C17785) * C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C47693) *
              C47909 +
          (((C17785 + C17784) * C47810 * C15953 +
            (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
             C15957 * C6417 - C15958 * C6414 - C15957 * C6418 +
             C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C3096 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C2334 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C3096) *
               C47651) *
              C47913 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C3096) *
               C2334 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C3096 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47651) *
              C47900 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C47810 * C15953 +
             (C16186 + C16187) * C47810 * C47895) *
                C3096 -
            ((C16844 + C16845) * C47810 * C47895 +
             (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
              C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                 C47810 * C15953) *
                C47693) *
               C2334 +
           (((C16845 + C16844) * C47810 * C15953 +
             (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 +
              C15951 * C1182 + C15957 * C1443 - C15958 * C1442 -
              C15957 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C16188 + C16189) * C47810 * C47895 +
             (C16187 + C16186) * C47810 * C15953) *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47924 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47921 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47912 -
           ((C18640 + C18641) * C47810 * C47895 +
            (C15957 * C1854 - C15958 * C1847 - C15957 * C1855 + C47864 * C1865 +
             C15955 * C1856 - C15956 * C1848 - C15955 * C1857 +
             C15951 * C1866) *
                C47810 * C15953) *
               C47893) *
              C2334 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47921 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47924 -
           ((C17288 + C17289) * C47810 * C47895 +
            (C17285 + C17284) * C47810 * C15953) *
               C47912 +
           ((C18641 + C18640) * C47810 * C15953 +
            (C15955 * C7287 - C15956 * C7285 - C15955 * C7288 + C15951 * C7291 +
             C15957 * C7289 - C15958 * C7286 - C15957 * C7290 +
             C47864 * C7292) *
                C47810 * C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47689 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47696 +
            ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
              C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                 C47810 * C15953 +
             (C17284 + C17285) * C47810 * C47895) *
                C3604) *
               C2334 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47696 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47689 -
            ((C17288 + C17289) * C47810 * C47895 +
             (C17285 + C17284) * C47810 * C15953) *
                C3604) *
               C47651) *
              C47831 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47696 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47689 -
            ((C18366 + C18367) * C47810 * C47895 +
             (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
              C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                 C47810 * C15953) *
                C3604) *
               C2334 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47689 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47696 +
            ((C18367 + C18366) * C47810 * C15953 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C3096 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C2334 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C3096) *
               C47651) *
              C47913 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C3096) *
               C2334 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C3096 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47651) *
              C47900 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C47810 * C15953 +
             (C16186 + C16187) * C47810 * C47895) *
                C3096 -
            ((C16844 + C16845) * C47810 * C47895 +
             (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
              C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                 C47810 * C15953) *
                C47693) *
               C2334 +
           (((C16845 + C16844) * C47810 * C15953 +
             (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 +
              C15951 * C1182 + C15957 * C1443 - C15958 * C1442 -
              C15957 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C16188 + C16189) * C47810 * C47895 +
             (C16187 + C16186) * C47810 * C15953) *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C3096 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C47923 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47693 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C3096) *
              C47919 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C3096 -
           ((C17784 + C17785) * C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C47693) *
              C47909 +
          (((C17785 + C17784) * C47810 * C15953 +
            (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
             C15957 * C6417 - C15958 * C6414 - C15957 * C6418 +
             C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C1286 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C1287 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47606 * C1288 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C47606 * C47887) *
              C47831 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C1287 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C1286 -
           ((C17432 + C17433) * C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C1288 +
           ((C17433 + C17432) * C47810 * C15953 +
            (C15955 * C1032 - C15956 * C1022 - C15955 * C1033 + C15951 * C1040 +
             C15957 * C1034 - C15958 * C1023 - C15957 * C1035 +
             C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47845 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47651) *
              C556 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47651 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47845) *
              C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C47845 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47651) *
              C558 +
          (((C16478 + C16479) * C47810 * C15953 +
            (C15955 * C287 - C15956 * C270 - C15955 * C288 + C15951 * C300 +
             C15957 * C291 - C15958 * C272 - C15957 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C1666 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C1667 +
            ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
              C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                 C47810 * C15953 +
             (C17284 + C17285) * C47810 * C47895) *
                C47880) *
               C47845 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C1667 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C1666 -
            ((C17288 + C17289) * C47810 * C47895 +
             (C17285 + C17284) * C47810 * C15953) *
                C47880) *
               C47651) *
              C47831 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C1667 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C1666 -
            ((C18366 + C18367) * C47810 * C47895 +
             (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
              C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                 C47810 * C15953) *
                C47880) *
               C47845 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C1666 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C1667 +
            ((C18367 + C18366) * C47810 * C15953 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47846 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C1286 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47693 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47846) *
              C1287 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47846 -
           ((C17784 + C17785) * C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C47693) *
              C1288 +
          (((C17785 + C17784) * C47810 * C15953 +
            (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
             C15957 * C6417 - C15958 * C6414 - C15957 * C6418 +
             C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47846 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C47845 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C15955 * C1171 - C15956 * C1157 - C15955 * C1172 +
              C15951 * C1184 + C15957 * C1169 - C15958 * C1156 -
              C15957 * C1170 + C47864 * C1183) *
                 C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47846) *
               C47651) *
              C260 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47846) *
               C47845 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47846 -
            ((C15957 * C1167 - C15958 * C1155 - C15957 * C1168 +
              C47864 * C1182 + C15955 * C1169 - C15956 * C1156 -
              C15955 * C1170 + C15951 * C1183) *
                 C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47651) *
              C261 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C47810 * C15953 +
             (C16186 + C16187) * C47810 * C47895) *
                C47846 -
            ((C16844 + C16845) * C47810 * C47895 +
             (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
              C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                 C47810 * C15953) *
                C47693) *
               C47845 +
           (((C16845 + C16844) * C47810 * C15953 +
             (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 +
              C15951 * C1182 + C15957 * C1443 - C15958 * C1442 -
              C15957 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C16188 + C16189) * C47810 * C47895 +
             (C16187 + C16186) * C47810 * C15953) *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C2118 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C2119 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C2120 -
           ((C18640 + C18641) * C47810 * C47895 +
            (C15957 * C1854 - C15958 * C1847 - C15957 * C1855 + C47864 * C1865 +
             C15955 * C1856 - C15956 * C1848 - C15955 * C1857 +
             C15951 * C1866) *
                C47810 * C15953) *
               C47893) *
              C47845 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C2119 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C2118 -
           ((C17288 + C17289) * C47810 * C47895 +
            (C17285 + C17284) * C47810 * C15953) *
               C2120 +
           ((C18641 + C18640) * C47810 * C15953 +
            (C15955 * C7287 - C15956 * C7285 - C15955 * C7288 + C15951 * C7291 +
             C15957 * C7289 - C15958 * C7286 - C15957 * C7290 +
             C47864 * C7292) *
                C47810 * C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
                C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                   C47810 * C15953 +
               (C15955 * C277 - C15956 * C265 - C15955 * C278 + C15951 * C295 +
                C15957 * C275 - C15958 * C264 - C15957 * C276 + C47864 * C294) *
                   C47810 * C47895) *
                  C47606 * C47588 * C108 -
              ((C15957 * C273 - C15958 * C263 - C15957 * C274 + C47864 * C293 +
                C15955 * C275 - C15956 * C264 - C15955 * C276 + C15951 * C294) *
                   C47810 * C47895 +
               (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
                C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                   C47810 * C15953) *
                  C47606 * C47588 * C109 +
              ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
                C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                   C47810 * C15953 +
               (C15955 * C273 - C15956 * C263 - C15955 * C274 + C15951 * C293 +
                C15957 * C285 - C15958 * C269 - C15957 * C286 + C47864 * C299) *
                   C47810 * C47895) *
                  C47606 * C47588 * C110 -
              ((C15957 * C289 - C15958 * C271 - C15957 * C290 + C47864 * C301 +
                C15955 * C285 - C15956 * C269 - C15955 * C286 + C15951 * C299) *
                   C47810 * C47895 +
               (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
                C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                   C47810 * C15953) *
                  C47606 * C47588 * C111 +
              ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
                C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
                   C47810 * C15953 +
               (C15955 * C289 - C15956 * C271 - C15955 * C290 + C15951 * C301 +
                C15957 * C561 - C15958 * C560 - C15957 * C562 + C47864 * C563) *
                   C47810 * C47895) *
                  C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
                 C15957 * C128 - C15958 * C120 - C15957 * C129 +
                 C47864 * C141) *
                    C47810 * C15953 +
                (C16178 + C16179) * C47810 * C47895) *
                   C47606 * C47916 -
               ((C16180 + C16181) * C47810 * C47895 +
                (C16179 + C16178) * C47810 * C15953) *
                   C47606 * C47904 +
               ((C16181 + C16180) * C47810 * C15953 +
                (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 +
                 C15951 * C1038 + C15957 * C1026 - C15958 * C1019 -
                 C15957 * C1027 + C47864 * C1037) *
                    C47810 * C47895) *
                   C47606 * C47877) *
                  C260 +
              (((C16182 + C16183) * C47810 * C15953 +
                (C16184 + C16185) * C47810 * C47895) *
                   C47606 * C47904 -
               ((C16183 + C16182) * C47810 * C47895 +
                (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
                 C15955 * C128 - C15956 * C120 - C15955 * C129 +
                 C15951 * C141) *
                    C47810 * C15953) *
                   C47606 * C47916 -
               ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 +
                 C47864 * C1036 + C15955 * C1026 - C15956 * C1019 -
                 C15955 * C1027 + C15951 * C1037) *
                    C47810 * C47895 +
                (C16185 + C16184) * C47810 * C15953) *
                   C47606 * C47877) *
                  C261 +
              (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
                 C15957 * C132 - C15958 * C122 - C15957 * C133 +
                 C47864 * C143) *
                    C47810 * C15953 +
                (C16186 + C16187) * C47810 * C47895) *
                   C47606 * C47916 -
               ((C16188 + C16189) * C47810 * C47895 +
                (C16187 + C16186) * C47810 * C15953) *
                   C47606 * C47904 +
               ((C16189 + C16188) * C47810 * C15953 +
                (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 +
                 C15951 * C1036 + C15957 * C1293 - C15958 * C1292 -
                 C15957 * C1294 + C47864 * C1295) *
                    C47810 * C47895) *
                   C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47917 -
           ((C15957 * C821 - C15958 * C815 - C15957 * C822 + C47864 * C830 +
             C15955 * C819 - C15956 * C814 - C15955 * C820 + C15951 * C829) *
                C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47906 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C15955 * C1165 - C15956 * C1154 - C15955 * C1166 + C15951 * C1181 +
             C15957 * C1163 - C15958 * C1153 - C15957 * C1164 +
             C47864 * C1180) *
                C47810 * C47895) *
               C47880) *
              C47588 * C260 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C15955 * C821 - C15956 * C815 - C15955 * C822 + C15951 * C830 +
             C15957 * C823 - C15958 * C816 - C15957 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47906 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47917 -
           ((C15957 * C1161 - C15958 * C1152 - C15957 * C1162 + C47864 * C1179 +
             C15955 * C1163 - C15956 * C1153 - C15955 * C1164 +
             C15951 * C1180) *
                C47810 * C47895 +
            (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
             C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                C47810 * C15953) *
               C47880) *
              C47588 * C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47917 -
           ((C15957 * C825 - C15958 * C817 - C15957 * C826 + C47864 * C832 +
             C15955 * C823 - C15956 * C816 - C15955 * C824 + C15951 * C831) *
                C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C47906 +
           ((C15955 * C436 - C15956 * C421 - C15955 * C437 + C15951 * C451 +
             C15957 * C440 - C15958 * C423 - C15957 * C441 + C47864 * C453) *
                C47810 * C15953 +
            (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 + C15951 * C1179 +
             C15957 * C2017 - C15958 * C2016 - C15957 * C2018 +
             C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C944 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C945 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 + C15951 * C1038 +
             C15957 * C1026 - C15958 * C1019 - C15957 * C1027 +
             C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C945 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C944 -
           ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 + C47864 * C1036 +
             C15955 * C1026 - C15956 * C1019 - C15955 * C1027 +
             C15951 * C1037) *
                C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C944 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C945 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C16178 + C16179) * C47810 * C47895) *
              C47606 * C1012 -
          ((C16180 + C16181) * C47810 * C47895 +
           (C16179 + C16178) * C47810 * C15953) *
              C47606 * C1013 +
          ((C16181 + C16180) * C47810 * C15953 +
           (C17098 + C17099) * C47810 * C47895) *
              C47606 * C1014 -
          ((C17100 + C17101) * C47810 * C47895 +
           (C17099 + C17098) * C47810 * C15953) *
              C47606 * C1015 +
          ((C17101 + C17100) * C47810 * C15953 +
           (C15955 * C5701 - C15956 * C5699 - C15955 * C5702 + C15951 * C5705 +
            C15957 * C5703 - C15958 * C5700 - C15957 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47917 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47906 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47880) *
              C944 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47906 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47917 -
           ((C17288 + C17289) * C47810 * C47895 +
            (C17285 + C17284) * C47810 * C15953) *
               C47880) *
              C945 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47917 -
           ((C15957 * C1549 - C15958 * C1545 - C15957 * C1550 + C47864 * C1554 +
             C15955 * C1547 - C15956 * C1544 - C15955 * C1548 +
             C15951 * C1553) *
                C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C47906 +
           ((C17289 + C17288) * C47810 * C15953 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C1666 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C1667 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C16842 + C16843) * C47810 * C47895) *
               C1667 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C1666 -
           ((C15957 * C1161 - C15958 * C1152 - C15957 * C1162 + C47864 * C1179 +
             C15955 * C1163 - C15956 * C1153 - C15955 * C1164 +
             C15951 * C1180) *
                C47810 * C47895 +
            (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
             C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                C47810 * C15953) *
               C47880) *
              C47588 * C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C1666 -
           ((C16844 + C16845) * C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C1667 +
           ((C15955 * C436 - C15956 * C421 - C15955 * C437 + C15951 * C451 +
             C15957 * C440 - C15958 * C423 - C15957 * C441 + C47864 * C453) *
                C47810 * C15953 +
            (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 + C15951 * C1179 +
             C15957 * C2017 - C15958 * C2016 - C15957 * C2018 +
             C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C1666 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C1667 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47880) *
              C47916 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C1667 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C1666 -
           ((C17288 + C17289) * C47810 * C47895 +
            (C17285 + C17284) * C47810 * C15953) *
               C47880) *
              C47904 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C1666 -
           ((C17784 + C17785) * C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C1667 +
           ((C17289 + C17288) * C47810 * C15953 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C16178 + C16179) * C47810 * C47895) *
              C1841 -
          ((C16840 + C16841) * C47810 * C47895 +
           (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
            C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
               C47810 * C15953) *
              C1842 +
          ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
            C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
               C47810 * C15953 +
           (C17284 + C17285) * C47810 * C47895) *
              C1843 -
          ((C15957 * C2229 - C15958 * C2225 - C15957 * C2230 + C47864 * C2234 +
            C15955 * C2227 - C15956 * C2224 - C15955 * C2228 + C15951 * C2233) *
               C47810 * C47895 +
           (C15957 * C1854 - C15958 * C1847 - C15957 * C1855 + C47864 * C1865 +
            C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866) *
               C47810 * C15953) *
              C1844 +
          ((C15955 * C1858 - C15956 * C1849 - C15955 * C1859 + C15951 * C1867 +
            C15957 * C1860 - C15958 * C1850 - C15957 * C1861 + C47864 * C1868) *
               C47810 * C15953 +
           (C15955 * C6811 - C15956 * C6809 - C15955 * C6812 + C15951 * C6815 +
            C15957 * C6813 - C15958 * C6810 - C15957 * C6814 + C47864 * C6816) *
               C47810 * C47895) *
              C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47846 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C944 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47846) *
               C945 +
           (((C16181 + C16180) * C47810 * C15953 +
             (C17098 + C17099) * C47810 * C47895) *
                C47846 -
            ((C15957 * C1549 - C15958 * C1545 - C15957 * C1550 +
              C47864 * C1554 + C15955 * C1547 - C15956 * C1544 -
              C15955 * C1548 + C15951 * C1553) *
                 C47810 * C47895 +
             (C17287 + C17286) * C47810 * C15953) *
                C47693) *
               C47877) *
              C47831 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47846) *
               C944 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47846 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C945 +
           (((C17641 + C17640) * C47810 * C15953 +
             (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 +
              C15951 * C1554 + C15957 * C1551 - C15958 * C1546 -
              C15957 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C17432 + C17433) * C47810 * C47895 +
             (C16185 + C16184) * C47810 * C15953) *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47846 -
           ((C15957 * C821 - C15958 * C815 - C15957 * C822 + C47864 * C830 +
             C15955 * C819 - C15956 * C814 - C15955 * C820 + C15951 * C829) *
                C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C47588 * C556 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C15955 * C821 - C15956 * C815 - C15955 * C822 + C15951 * C830 +
             C15957 * C823 - C15958 * C816 - C15957 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47693 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47846) *
              C47588 * C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47846 -
           ((C15957 * C825 - C15958 * C817 - C15957 * C826 + C47864 * C832 +
             C15955 * C823 - C15956 * C816 - C15955 * C824 + C15951 * C831) *
                C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C47693) *
              C47588 * C558 +
          (((C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452 +
             C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454) *
                C47810 * C15953 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C2118 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C2119 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C2120 -
           ((C15957 * C2229 - C15958 * C2225 - C15957 * C2230 + C47864 * C2234 +
             C15955 * C2227 - C15956 * C2224 - C15955 * C2228 +
             C15951 * C2233) *
                C47810 * C47895 +
            (C15957 * C1854 - C15958 * C1847 - C15957 * C1855 + C47864 * C1865 +
             C15955 * C1856 - C15956 * C1848 - C15955 * C1857 +
             C15951 * C1866) *
                C47810 * C15953) *
               C47893) *
              C47588 * C47831 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C16842 + C16843) * C47810 * C47895) *
               C2119 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C2118 -
           ((C18366 + C18367) * C47810 * C47895 +
            (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
             C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                C47810 * C15953) *
               C2120 +
           ((C15955 * C1854 - C15956 * C1847 - C15955 * C1855 + C15951 * C1865 +
             C15957 * C1852 - C15958 * C1846 - C15957 * C1853 +
             C47864 * C1864) *
                C47810 * C15953 +
            (C15955 * C2229 - C15956 * C2225 - C15955 * C2230 + C15951 * C2234 +
             C15957 * C2231 - C15958 * C2226 - C15957 * C2232 +
             C47864 * C2235) *
                C47810 * C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47916 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47904 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 + C15951 * C1038 +
             C15957 * C1026 - C15958 * C1019 - C15957 * C1027 +
             C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C260 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47904 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47916 -
           ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 + C47864 * C1036 +
             C15955 * C1026 - C15956 * C1019 - C15955 * C1027 +
             C15951 * C1037) *
                C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47877) *
              C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C47916 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47904 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C15955 * C277 - C15956 * C265 - C15955 * C278 + C15951 * C295 +
            C15957 * C275 - C15958 * C264 - C15957 * C276 + C47864 * C294) *
               C47810 * C47895) *
              C47606 * C47588 * C108 -
          ((C15957 * C273 - C15958 * C263 - C15957 * C274 + C47864 * C293 +
            C15955 * C275 - C15956 * C264 - C15955 * C276 + C15951 * C294) *
               C47810 * C47895 +
           (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
            C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
               C47810 * C15953) *
              C47606 * C47588 * C109 +
          ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
            C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
               C47810 * C15953 +
           (C15955 * C273 - C15956 * C263 - C15955 * C274 + C15951 * C293 +
            C15957 * C285 - C15958 * C269 - C15957 * C286 + C47864 * C299) *
               C47810 * C47895) *
              C47606 * C47588 * C110 -
          ((C15957 * C289 - C15958 * C271 - C15957 * C290 + C47864 * C301 +
            C15955 * C285 - C15956 * C269 - C15955 * C286 + C15951 * C299) *
               C47810 * C47895 +
           (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
            C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
               C47810 * C15953) *
              C47606 * C47588 * C111 +
          ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
            C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
               C47810 * C15953 +
           (C15955 * C289 - C15956 * C271 - C15955 * C290 + C15951 * C301 +
            C15957 * C561 - C15958 * C560 - C15957 * C562 + C47864 * C563) *
               C47810 * C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C944 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C945 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 + C15951 * C1038 +
             C15957 * C1026 - C15958 * C1019 - C15957 * C1027 +
             C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C945 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C944 -
           ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 + C47864 * C1036 +
             C15955 * C1026 - C15956 * C1019 - C15955 * C1027 +
             C15951 * C1037) *
                C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C944 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C945 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C16178 + C16179) * C47810 * C47895) *
              C47606 * C1012 -
          ((C16180 + C16181) * C47810 * C47895 +
           (C16179 + C16178) * C47810 * C15953) *
              C47606 * C1013 +
          ((C16181 + C16180) * C47810 * C15953 +
           (C17098 + C17099) * C47810 * C47895) *
              C47606 * C1014 -
          ((C17100 + C17101) * C47810 * C47895 +
           (C17099 + C17098) * C47810 * C15953) *
              C47606 * C1015 +
          ((C17101 + C17100) * C47810 * C15953 +
           (C15955 * C5701 - C15956 * C5699 - C15955 * C5702 + C15951 * C5705 +
            C15957 * C5703 - C15958 * C5700 - C15957 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C1666 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C1667 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C16842 + C16843) * C47810 * C47895) *
               C1667 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C1666 -
           ((C15957 * C1161 - C15958 * C1152 - C15957 * C1162 + C47864 * C1179 +
             C15955 * C1163 - C15956 * C1153 - C15955 * C1164 +
             C15951 * C1180) *
                C47810 * C47895 +
            (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
             C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                C47810 * C15953) *
               C47880) *
              C47588 * C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C1666 -
           ((C16844 + C16845) * C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C1667 +
           ((C15955 * C436 - C15956 * C421 - C15955 * C437 + C15951 * C451 +
             C15957 * C440 - C15958 * C423 - C15957 * C441 + C47864 * C453) *
                C47810 * C15953 +
            (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 + C15951 * C1179 +
             C15957 * C2017 - C15958 * C2016 - C15957 * C2018 +
             C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C1666 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C1667 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47880) *
              C47916 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C1667 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C1666 -
           ((C17288 + C17289) * C47810 * C47895 +
            (C17285 + C17284) * C47810 * C15953) *
               C47880) *
              C47904 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C1666 -
           ((C17784 + C17785) * C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C1667 +
           ((C17289 + C17288) * C47810 * C15953 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C3096 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C47845 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C3096) *
               C47651) *
              C47565 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C3096) *
               C47845 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C3096 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47651) *
              C47574 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C47810 * C15953 +
             (C16186 + C16187) * C47810 * C47895) *
                C3096 -
            ((C16844 + C16845) * C47810 * C47895 +
             (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
              C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                 C47810 * C15953) *
                C47693) *
               C47845 +
           (((C16845 + C16844) * C47810 * C15953 +
             (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 +
              C15951 * C1182 + C15957 * C1443 - C15958 * C1442 -
              C15957 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C16188 + C16189) * C47810 * C47895 +
             (C16187 + C16186) * C47810 * C15953) *
                C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47689 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47696 +
            ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
              C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                 C47810 * C15953 +
             (C17284 + C17285) * C47810 * C47895) *
                C3604) *
               C47845 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47696 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47689 -
            ((C17288 + C17289) * C47810 * C47895 +
             (C17285 + C17284) * C47810 * C15953) *
                C3604) *
               C47651) *
              C2442 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47696 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47689 -
            ((C18366 + C18367) * C47810 * C47895 +
             (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
              C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                 C47810 * C15953) *
                C3604) *
               C47845 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47689 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47696 +
            ((C18367 + C18366) * C47810 * C15953 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47810 * C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C3096 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C47916 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C3096) *
               C47904 +
           (((C16181 + C16180) * C47810 * C15953 +
             (C17098 + C17099) * C47810 * C47895) *
                C3096 -
            ((C17784 + C17785) * C47810 * C47895 +
             (C17287 + C17286) * C47810 * C15953) *
                C47693) *
               C47877) *
              C2442 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C3096) *
               C47916 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C3096 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47904 +
           (((C17641 + C17640) * C47810 * C15953 +
             (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 +
              C15951 * C1554 + C15957 * C1551 - C15958 * C1546 -
              C15957 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C17432 + C17433) * C47810 * C47895 +
             (C16185 + C16184) * C47810 * C15953) *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C3096 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C47588 * C47922 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C16842 + C16843) * C47810 * C47895) *
               C47693 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C3096) *
              C47588 * C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C3096 -
           ((C16844 + C16845) * C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C47693) *
              C47588 * C47902 +
          (((C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452 +
             C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454) *
                C47810 * C15953 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47924 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47921 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47912 -
           ((C18640 + C18641) * C47810 * C47895 +
            (C15957 * C1854 - C15958 * C1847 - C15957 * C1855 + C47864 * C1865 +
             C15955 * C1856 - C15956 * C1848 - C15955 * C1857 +
             C15951 * C1866) *
                C47810 * C15953) *
               C47893) *
              C47588 * C2442 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C16842 + C16843) * C47810 * C47895) *
               C47921 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47924 -
           ((C18366 + C18367) * C47810 * C47895 +
            (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
             C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                C47810 * C15953) *
               C47912 +
           ((C15955 * C1854 - C15956 * C1847 - C15955 * C1855 + C15951 * C1865 +
             C15957 * C1852 - C15958 * C1846 - C15957 * C1853 +
             C47864 * C1864) *
                C47810 * C15953 +
            (C15955 * C2229 - C15956 * C2225 - C15955 * C2230 + C15951 * C2234 +
             C15957 * C2231 - C15958 * C2226 - C15957 * C2232 +
             C47864 * C2235) *
                C47810 * C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47689 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47696 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C3604) *
              C47588 * C47565 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C16842 + C16843) * C47810 * C47895) *
               C47696 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47689 -
           ((C18366 + C18367) * C47810 * C47895 +
            (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
             C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                C47810 * C15953) *
               C3604) *
              C47588 * C47574 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47689 -
           ((C16844 + C16845) * C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C47696 +
           ((C15955 * C436 - C15956 * C421 - C15955 * C437 + C15951 * C451 +
             C15957 * C440 - C15958 * C423 - C15957 * C441 + C47864 * C453) *
                C47810 * C15953 +
            (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 + C15951 * C1179 +
             C15957 * C2017 - C15958 * C2016 - C15957 * C2018 +
             C47864 * C2019) *
                C47810 * C47895) *
               C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C3096 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C47588 * C47922 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C16842 + C16843) * C47810 * C47895) *
               C47693 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C3096) *
              C47588 * C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C3096 -
           ((C16844 + C16845) * C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C47693) *
              C47588 * C47902 +
          (((C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452 +
             C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454) *
                C47810 * C15953 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C3096 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C47916 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C3096) *
               C47904 +
           (((C16181 + C16180) * C47810 * C15953 +
             (C17098 + C17099) * C47810 * C47895) *
                C3096 -
            ((C17784 + C17785) * C47810 * C47895 +
             (C17287 + C17286) * C47810 * C15953) *
                C47693) *
               C47877) *
              C2442 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C3096) *
               C47916 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C3096 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47904 +
           (((C17641 + C17640) * C47810 * C15953 +
             (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 +
              C15951 * C1554 + C15957 * C1551 - C15958 * C1546 -
              C15957 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C17432 + C17433) * C47810 * C47895 +
             (C16185 + C16184) * C47810 * C15953) *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47845 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47651) *
              C556 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47651 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47845) *
              C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C47845 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47651) *
              C558 +
          (((C16478 + C16479) * C47810 * C15953 +
            (C15955 * C287 - C15956 * C270 - C15955 * C288 + C15951 * C300 +
             C15957 * C291 - C15958 * C272 - C15957 * C292 + C47864 * C302) *
                C47810 * C47895) *
               C47606 * C47651 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C1286 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C1287 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47606 * C1288 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C47606 * C47887) *
              C47831 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C1287 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C1286 -
           ((C17432 + C17433) * C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C1288 +
           ((C17433 + C17432) * C47810 * C15953 +
            (C15955 * C1032 - C15956 * C1022 - C15955 * C1033 + C15951 * C1040 +
             C15957 * C1034 - C15958 * C1023 - C15957 * C1035 +
             C47864 * C1041) *
                C47810 * C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47846 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C47845 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C15955 * C1171 - C15956 * C1157 - C15955 * C1172 +
              C15951 * C1184 + C15957 * C1169 - C15958 * C1156 -
              C15957 * C1170 + C47864 * C1183) *
                 C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47846) *
               C47651) *
              C260 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47846) *
               C47845 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47846 -
            ((C15957 * C1167 - C15958 * C1155 - C15957 * C1168 +
              C47864 * C1182 + C15955 * C1169 - C15956 * C1156 -
              C15955 * C1170 + C15951 * C1183) *
                 C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C47651) *
              C261 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C47810 * C15953 +
             (C16186 + C16187) * C47810 * C47895) *
                C47846 -
            ((C16844 + C16845) * C47810 * C47895 +
             (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
              C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                 C47810 * C15953) *
                C47693) *
               C47845 +
           (((C16845 + C16844) * C47810 * C15953 +
             (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 +
              C15951 * C1182 + C15957 * C1443 - C15958 * C1442 -
              C15957 * C1444 + C47864 * C1445) *
                 C47810 * C47895) *
                C47693 -
            ((C16188 + C16189) * C47810 * C47895 +
             (C16187 + C16186) * C47810 * C15953) *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47846 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C1286 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47693 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47846) *
              C1287 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47846 -
           ((C17784 + C17785) * C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C47693) *
              C1288 +
          (((C17785 + C17784) * C47810 * C15953 +
            (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
             C15957 * C6417 - C15958 * C6414 - C15957 * C6418 +
             C47864 * C6420) *
                C47810 * C47895) *
               C47693 -
           ((C17100 + C17101) * C47810 * C47895 +
            (C17099 + C17098) * C47810 * C15953) *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47916 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47904 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 + C15951 * C1038 +
             C15957 * C1026 - C15958 * C1019 - C15957 * C1027 +
             C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C260 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47904 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47916 -
           ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 + C47864 * C1036 +
             C15955 * C1026 - C15956 * C1019 - C15955 * C1027 +
             C15951 * C1037) *
                C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47877) *
              C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C47916 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47904 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C15955 * C277 - C15956 * C265 - C15955 * C278 + C15951 * C295 +
            C15957 * C275 - C15958 * C264 - C15957 * C276 + C47864 * C294) *
               C47810 * C47895) *
              C47606 * C47588 * C108 -
          ((C15957 * C273 - C15958 * C263 - C15957 * C274 + C47864 * C293 +
            C15955 * C275 - C15956 * C264 - C15955 * C276 + C15951 * C294) *
               C47810 * C47895 +
           (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
            C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
               C47810 * C15953) *
              C47606 * C47588 * C109 +
          ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
            C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
               C47810 * C15953 +
           (C15955 * C273 - C15956 * C263 - C15955 * C274 + C15951 * C293 +
            C15957 * C285 - C15958 * C269 - C15957 * C286 + C47864 * C299) *
               C47810 * C47895) *
              C47606 * C47588 * C110 -
          ((C15957 * C289 - C15958 * C271 - C15957 * C290 + C47864 * C301 +
            C15955 * C285 - C15956 * C269 - C15955 * C286 + C15951 * C299) *
               C47810 * C47895 +
           (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
            C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
               C47810 * C15953) *
              C47606 * C47588 * C111 +
          ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
            C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
               C47810 * C15953 +
           (C15955 * C289 - C15956 * C271 - C15955 * C290 + C15951 * C301 +
            C15957 * C561 - C15958 * C560 - C15957 * C562 + C47864 * C563) *
               C47810 * C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47917 -
           ((C15957 * C821 - C15958 * C815 - C15957 * C822 + C47864 * C830 +
             C15955 * C819 - C15956 * C814 - C15955 * C820 + C15951 * C829) *
                C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47906 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C15955 * C1165 - C15956 * C1154 - C15955 * C1166 + C15951 * C1181 +
             C15957 * C1163 - C15958 * C1153 - C15957 * C1164 +
             C47864 * C1180) *
                C47810 * C47895) *
               C47880) *
              C47588 * C260 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C15955 * C821 - C15956 * C815 - C15955 * C822 + C15951 * C830 +
             C15957 * C823 - C15958 * C816 - C15957 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47906 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47917 -
           ((C15957 * C1161 - C15958 * C1152 - C15957 * C1162 + C47864 * C1179 +
             C15955 * C1163 - C15956 * C1153 - C15955 * C1164 +
             C15951 * C1180) *
                C47810 * C47895 +
            (C15957 * C436 - C15958 * C421 - C15957 * C437 + C47864 * C451 +
             C15955 * C434 - C15956 * C420 - C15955 * C435 + C15951 * C450) *
                C47810 * C15953) *
               C47880) *
              C47588 * C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47917 -
           ((C15957 * C825 - C15958 * C817 - C15957 * C826 + C47864 * C832 +
             C15955 * C823 - C15956 * C816 - C15955 * C824 + C15951 * C831) *
                C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C47906 +
           ((C15955 * C436 - C15956 * C421 - C15955 * C437 + C15951 * C451 +
             C15957 * C440 - C15958 * C423 - C15957 * C441 + C47864 * C453) *
                C47810 * C15953 +
            (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 + C15951 * C1179 +
             C15957 * C2017 - C15958 * C2016 - C15957 * C2018 +
             C47864 * C2019) *
                C47810 * C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C944 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C945 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 + C15951 * C1038 +
             C15957 * C1026 - C15958 * C1019 - C15957 * C1027 +
             C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C945 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C944 -
           ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 + C47864 * C1036 +
             C15955 * C1026 - C15956 * C1019 - C15955 * C1027 +
             C15951 * C1037) *
                C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C944 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C945 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C16178 + C16179) * C47810 * C47895) *
              C47606 * C1012 -
          ((C16180 + C16181) * C47810 * C47895 +
           (C16179 + C16178) * C47810 * C15953) *
              C47606 * C1013 +
          ((C16181 + C16180) * C47810 * C15953 +
           (C17098 + C17099) * C47810 * C47895) *
              C47606 * C1014 -
          ((C17100 + C17101) * C47810 * C47895 +
           (C17099 + C17098) * C47810 * C15953) *
              C47606 * C1015 +
          ((C17101 + C17100) * C47810 * C15953 +
           (C15955 * C5701 - C15956 * C5699 - C15955 * C5702 + C15951 * C5705 +
            C15957 * C5703 - C15958 * C5700 - C15957 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47917 -
           ((C16840 + C16841) * C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47906 +
           ((C15955 * C432 - C15956 * C419 - C15955 * C433 + C15951 * C449 +
             C15957 * C434 - C15958 * C420 - C15957 * C435 + C47864 * C450) *
                C47810 * C15953 +
            (C17284 + C17285) * C47810 * C47895) *
               C47880) *
              C944 +
          (((C16841 + C16840) * C47810 * C15953 +
            (C17286 + C17287) * C47810 * C47895) *
               C47906 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47917 -
           ((C17288 + C17289) * C47810 * C47895 +
            (C17285 + C17284) * C47810 * C15953) *
               C47880) *
              C945 +
          (((C16181 + C16180) * C47810 * C15953 +
            (C17098 + C17099) * C47810 * C47895) *
               C47917 -
           ((C15957 * C1549 - C15958 * C1545 - C15957 * C1550 + C47864 * C1554 +
             C15955 * C1547 - C15956 * C1544 - C15955 * C1548 +
             C15951 * C1553) *
                C47810 * C47895 +
            (C17287 + C17286) * C47810 * C15953) *
               C47906 +
           ((C17289 + C17288) * C47810 * C15953 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47810 * C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47846 -
           ((C15957 * C821 - C15958 * C815 - C15957 * C822 + C47864 * C830 +
             C15955 * C819 - C15956 * C814 - C15955 * C820 + C15951 * C829) *
                C47810 * C47895 +
            (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
             C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                C47810 * C15953) *
               C47693) *
              C47588 * C556 +
          (((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
             C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                C47810 * C15953 +
            (C15955 * C821 - C15956 * C815 - C15955 * C822 + C15951 * C830 +
             C15957 * C823 - C15958 * C816 - C15957 * C824 + C47864 * C831) *
                C47810 * C47895) *
               C47693 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47846) *
              C47588 * C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47846 -
           ((C15957 * C825 - C15958 * C817 - C15957 * C826 + C47864 * C832 +
             C15955 * C823 - C15956 * C816 - C15955 * C824 + C15951 * C831) *
                C47810 * C47895 +
            (C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452 +
             C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446) *
                C47810 * C15953) *
               C47693) *
              C47588 * C558 +
          (((C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452 +
             C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454) *
                C47810 * C15953 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47810 * C47895) *
               C47693 -
           ((C16479 + C16478) * C47810 * C47895 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C47810 * C15953) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C47810 * C15953 +
             (C16178 + C16179) * C47810 * C47895) *
                C47846 -
            ((C16840 + C16841) * C47810 * C47895 +
             (C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447 +
              C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448) *
                 C47810 * C15953) *
                C47693) *
               C944 +
           (((C16841 + C16840) * C47810 * C15953 +
             (C17286 + C17287) * C47810 * C47895) *
                C47693 -
            ((C16180 + C16181) * C47810 * C47895 +
             (C16179 + C16178) * C47810 * C15953) *
                C47846) *
               C945 +
           (((C16181 + C16180) * C47810 * C15953 +
             (C17098 + C17099) * C47810 * C47895) *
                C47846 -
            ((C15957 * C1549 - C15958 * C1545 - C15957 * C1550 +
              C47864 * C1554 + C15955 * C1547 - C15956 * C1544 -
              C15955 * C1548 + C15951 * C1553) *
                 C47810 * C47895 +
             (C17287 + C17286) * C47810 * C15953) *
                C47693) *
               C47877) *
              C47831 +
          ((((C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447 +
              C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446) *
                 C47810 * C15953 +
             (C16842 + C16843) * C47810 * C47895) *
                C47693 -
            ((C16183 + C16182) * C47810 * C47895 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C47810 * C15953) *
                C47846) *
               C944 +
           (((C16182 + C16183) * C47810 * C15953 +
             (C16184 + C16185) * C47810 * C47895) *
                C47846 -
            ((C17640 + C17641) * C47810 * C47895 +
             (C16843 + C16842) * C47810 * C15953) *
                C47693) *
               C945 +
           (((C17641 + C17640) * C47810 * C15953 +
             (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 +
              C15951 * C1554 + C15957 * C1551 - C15958 * C1546 -
              C15957 * C1552 + C47864 * C1555) *
                 C47810 * C47895) *
                C47693 -
            ((C17432 + C17433) * C47810 * C47895 +
             (C16185 + C16184) * C47810 * C15953) *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C15955 * C277 - C15956 * C265 - C15955 * C278 + C15951 * C295 +
            C15957 * C275 - C15958 * C264 - C15957 * C276 + C47864 * C294) *
               C47810 * C47895) *
              C47606 * C47588 * C108 -
          ((C15957 * C273 - C15958 * C263 - C15957 * C274 + C47864 * C293 +
            C15955 * C275 - C15956 * C264 - C15955 * C276 + C15951 * C294) *
               C47810 * C47895 +
           (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
            C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
               C47810 * C15953) *
              C47606 * C47588 * C109 +
          ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
            C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
               C47810 * C15953 +
           (C15955 * C273 - C15956 * C263 - C15955 * C274 + C15951 * C293 +
            C15957 * C285 - C15958 * C269 - C15957 * C286 + C47864 * C299) *
               C47810 * C47895) *
              C47606 * C47588 * C110 -
          ((C15957 * C289 - C15958 * C271 - C15957 * C290 + C47864 * C301 +
            C15955 * C285 - C15956 * C269 - C15955 * C286 + C15951 * C299) *
               C47810 * C47895 +
           (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
            C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
               C47810 * C15953) *
              C47606 * C47588 * C111 +
          ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
            C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
               C47810 * C15953 +
           (C15955 * C289 - C15956 * C271 - C15955 * C290 + C15951 * C301 +
            C15957 * C561 - C15958 * C560 - C15957 * C562 + C47864 * C563) *
               C47810 * C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C47916 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C47904 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 + C15951 * C1038 +
             C15957 * C1026 - C15958 * C1019 - C15957 * C1027 +
             C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C260 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C47904 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C47916 -
           ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 + C47864 * C1036 +
             C15955 * C1026 - C15956 * C1019 - C15955 * C1027 +
             C15951 * C1037) *
                C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47877) *
              C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C47916 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C47904 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C47810 * C15953 +
            (C16178 + C16179) * C47810 * C47895) *
               C47606 * C944 -
           ((C16180 + C16181) * C47810 * C47895 +
            (C16179 + C16178) * C47810 * C15953) *
               C47606 * C945 +
           ((C16181 + C16180) * C47810 * C15953 +
            (C15955 * C1028 - C15956 * C1020 - C15955 * C1029 + C15951 * C1038 +
             C15957 * C1026 - C15958 * C1019 - C15957 * C1027 +
             C47864 * C1037) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C47810 * C15953 +
            (C16184 + C16185) * C47810 * C47895) *
               C47606 * C945 -
           ((C16183 + C16182) * C47810 * C47895 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C47810 * C15953) *
               C47606 * C944 -
           ((C15957 * C1024 - C15958 * C1018 - C15957 * C1025 + C47864 * C1036 +
             C15955 * C1026 - C15956 * C1019 - C15955 * C1027 +
             C15951 * C1037) *
                C47810 * C47895 +
            (C16185 + C16184) * C47810 * C15953) *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C47810 * C15953 +
            (C16186 + C16187) * C47810 * C47895) *
               C47606 * C944 -
           ((C16188 + C16189) * C47810 * C47895 +
            (C16187 + C16186) * C47810 * C15953) *
               C47606 * C945 +
           ((C16189 + C16188) * C47810 * C15953 +
            (C15955 * C1024 - C15956 * C1018 - C15955 * C1025 + C15951 * C1036 +
             C15957 * C1293 - C15958 * C1292 - C15957 * C1294 +
             C47864 * C1295) *
                C47810 * C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C47810 * C15953 +
           (C16178 + C16179) * C47810 * C47895) *
              C47606 * C1012 -
          ((C16180 + C16181) * C47810 * C47895 +
           (C16179 + C16178) * C47810 * C15953) *
              C47606 * C1013 +
          ((C16181 + C16180) * C47810 * C15953 +
           (C17098 + C17099) * C47810 * C47895) *
              C47606 * C1014 -
          ((C17100 + C17101) * C47810 * C47895 +
           (C17099 + C17098) * C47810 * C15953) *
              C47606 * C1015 +
          ((C17101 + C17100) * C47810 * C15953 +
           (C15955 * C5701 - C15956 * C5699 - C15955 * C5702 + C15951 * C5705 +
            C15957 * C5703 - C15958 * C5700 - C15957 * C5704 + C47864 * C5706) *
               C47810 * C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47647 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47654 +
           (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
               C2702) *
              C47565 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47654 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47647 -
           (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47606 *
               C2702) *
              C47574 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C47647 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47654 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47846 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C47647 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
               C47654 +
           ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47846 -
            (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
               C2702) *
              C2442 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47846) *
               C47647 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47846 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47654 +
           ((C22369 * C21668 + C22969 * C21669 +
             (C21671 * C6417 - C21672 * C6414 - C21671 * C6418 +
              C47533 * C6420) *
                 C47810 * C21670) *
                C47693 -
            (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47923 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47919 +
           (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
               C47909 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
               C47887) *
              C2442 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47919 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47923 -
           (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47606 *
               C47909 +
           (C21852 * C21668 + C22815 * C21669 +
            (C21671 * C5703 - C21672 * C5700 - C21671 * C5704 +
             C47533 * C5706) *
                C47810 * C21670) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C2334 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47651) *
              C47922 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47651 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C2334) *
              C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C2334 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47651) *
              C47902 +
          ((C22078 * C21668 + C22079 * C21669 +
            (C21671 * C1293 - C21672 * C1292 - C21671 * C1294 +
             C47533 * C1295) *
                C47810 * C21670) *
               C47606 * C47651 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47917 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47906 +
            ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                 C47810 * C21668 +
             C22706 * C21669 + C22707 * C21670) *
                C47880) *
               C2334 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47906 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47917 -
            (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C47880) *
               C47651) *
              C2442 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47906 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47917 -
            (C23526 * C21670 + C23527 * C21669 +
             (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                 C47810 * C21668) *
                C47880) *
               C2334 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47917 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47906 +
            (C23527 * C21668 + C23526 * C21669 +
             (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
              C47533 * C5888) *
                 C47810 * C21670) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47846 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C2334 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
               C47651) *
              C47565 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47846) *
               C2334 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47846 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47651) *
              C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C47810 * C21668 +
             C21853 * C21669 + C21854 * C21670) *
                C47846 -
            (C22370 * C21670 + C22371 * C21669 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47810 * C21668) *
                C47693) *
               C2334 +
           ((C22371 * C21668 + C22370 * C21669 +
             (C21671 * C1551 - C21672 * C1546 - C21671 * C1552 +
              C47533 * C1555) *
                 C47810 * C21670) *
                C47693 -
            (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C2334 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47651) *
              C47922 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47651 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C2334) *
              C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C2334 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47651) *
              C47902 +
          ((C22078 * C21668 + C22079 * C21669 +
            (C21671 * C1293 - C21672 * C1292 - C21671 * C1294 +
             C47533 * C1295) *
                C47810 * C21670) *
               C47606 * C47651 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47923 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47919 +
           (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
               C47909 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
               C47887) *
              C2442 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47919 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47923 -
           (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47606 *
               C47909 +
           (C21852 * C21668 + C22815 * C21669 +
            (C21671 * C5703 - C21672 * C5700 - C21671 * C5704 +
             C47533 * C5706) *
                C47810 * C21670) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C3096 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C47647 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
               C47654 +
           ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C3096 -
            (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
               C2702) *
              C47831 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C3096) *
               C47647 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C3096 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47654 +
           ((C22369 * C21668 + C22969 * C21669 +
             (C21671 * C6417 - C21672 * C6414 - C21671 * C6418 +
              C47533 * C6420) *
                 C47810 * C21670) *
                C47693 -
            (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47689 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47696 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C3604) *
              C47647 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47696 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47689 -
           (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C3604) *
              C47654 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47689 -
           (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47696 +
           (C22707 * C21668 + C22709 * C21669 +
            (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
             C47533 * C22676) *
                C47810 * C21670) *
               C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C3096 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C47923 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
              C47919 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C3096 -
           (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
              C47909 +
          ((C22708 * C21668 + C23079 * C21669 +
            (C21671 * C23068 - C21672 * C23067 - C21671 * C23069 +
             C47533 * C23070) *
                C47810 * C21670) *
               C47693 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C3096 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C2334 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
               C47651) *
              C47913 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C3096) *
               C2334 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C3096 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47651) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C47810 * C21668 +
             C21853 * C21669 + C21854 * C21670) *
                C3096 -
            (C22370 * C21670 + C22371 * C21669 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47810 * C21668) *
                C47693) *
               C2334 +
           ((C22371 * C21668 + C22370 * C21669 +
             (C21671 * C1551 - C21672 * C1546 - C21671 * C1552 +
              C47533 * C1555) *
                 C47810 * C21670) *
                C47693 -
            (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47924 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47921 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47912 -
           (C23742 * C21670 + C23743 * C21669 +
            (C21671 * C1856 - C21672 * C1848 - C21671 * C1857 +
             C47533 * C1866) *
                C47810 * C21668) *
               C47893) *
              C2334 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47921 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47924 -
           (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C47912 +
           (C23743 * C21668 + C23742 * C21669 +
            (C21671 * C23724 - C21672 * C23723 - C21671 * C23725 +
             C47533 * C23726) *
                C47810 * C21670) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47689 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47696 +
            ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                 C47810 * C21668 +
             C22706 * C21669 + C22707 * C21670) *
                C3604) *
               C2334 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47696 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47689 -
            (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C3604) *
               C47651) *
              C47831 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47696 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47689 -
            (C23526 * C21670 + C23527 * C21669 +
             (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                 C47810 * C21668) *
                C3604) *
               C2334 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47689 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47696 +
            (C23527 * C21668 + C23526 * C21669 +
             (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
              C47533 * C5888) *
                 C47810 * C21670) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C3096 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C2334 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
               C47651) *
              C47913 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C3096) *
               C2334 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C3096 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47651) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C47810 * C21668 +
             C21853 * C21669 + C21854 * C21670) *
                C3096 -
            (C22370 * C21670 + C22371 * C21669 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47810 * C21668) *
                C47693) *
               C2334 +
           ((C22371 * C21668 + C22370 * C21669 +
             (C21671 * C1551 - C21672 * C1546 - C21671 * C1552 +
              C47533 * C1555) *
                 C47810 * C21670) *
                C47693 -
            (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C3096 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C47923 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
              C47919 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C3096 -
           (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
              C47909 +
          ((C22708 * C21668 + C23079 * C21669 +
            (C21671 * C23068 - C21672 * C23067 - C21671 * C23069 +
             C47533 * C23070) *
                C47810 * C21670) *
               C47693 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C1286 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C1287 +
           (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
               C1288 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
               C47887) *
              C47831 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C1287 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C1286 -
           (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47606 *
               C1288 +
           (C21852 * C21668 + C22815 * C21669 +
            (C21671 * C5703 - C21672 * C5700 - C21671 * C5704 +
             C47533 * C5706) *
                C47810 * C21670) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47845 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47651) *
              C556 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47651 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47845) *
              C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C47845 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47651) *
              C558 +
          ((C22078 * C21668 + C22079 * C21669 +
            (C21671 * C1293 - C21672 * C1292 - C21671 * C1294 +
             C47533 * C1295) *
                C47810 * C21670) *
               C47606 * C47651 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C1666 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C1667 +
            ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                 C47810 * C21668 +
             C22706 * C21669 + C22707 * C21670) *
                C47880) *
               C47845 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C1667 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C1666 -
            (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C47880) *
               C47651) *
              C47831 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C1667 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C1666 -
            (C23526 * C21670 + C23527 * C21669 +
             (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                 C47810 * C21668) *
                C47880) *
               C47845 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C1666 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C1667 +
            (C23527 * C21668 + C23526 * C21669 +
             (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
              C47533 * C5888) *
                 C47810 * C21670) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47846 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C1286 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
              C1287 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47846 -
           (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
              C1288 +
          ((C22708 * C21668 + C23079 * C21669 +
            (C21671 * C23068 - C21672 * C23067 - C21671 * C23069 +
             C47533 * C23070) *
                C47810 * C21670) *
               C47693 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47846 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C47845 +
           ((C22367 * C21668 + C22366 * C21669 +
             (C21671 * C1547 - C21672 * C1544 - C21671 * C1548 +
              C47533 * C1553) *
                 C47810 * C21670) *
                C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
               C47651) *
              C260 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47846) *
               C47845 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47846 -
            ((C21671 * C1549 - C21672 * C1545 - C21671 * C1550 +
              C47533 * C1554) *
                 C47810 * C21670 +
             C22369 * C21669 + C22368 * C21668) *
                C47693) *
               C47651) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C47810 * C21668 +
             C21853 * C21669 + C21854 * C21670) *
                C47846 -
            (C22370 * C21670 + C22371 * C21669 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47810 * C21668) *
                C47693) *
               C47845 +
           ((C22371 * C21668 + C22370 * C21669 +
             (C21671 * C1551 - C21672 * C1546 - C21671 * C1552 +
              C47533 * C1555) *
                 C47810 * C21670) *
                C47693 -
            (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C2118 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C2119 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C2120 -
           (C23742 * C21670 + C23743 * C21669 +
            (C21671 * C1856 - C21672 * C1848 - C21671 * C1857 +
             C47533 * C1866) *
                C47810 * C21668) *
               C47893) *
              C47845 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C2119 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C2118 -
           (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C2120 +
           (C23743 * C21668 + C23742 * C21669 +
            (C21671 * C23724 - C21672 * C23723 - C21671 * C23725 +
             C47533 * C23726) *
                C47810 * C21670) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                   C47810 * C21668 +
               (C21671 * C277 - C21672 * C265 - C21671 * C278 + C47533 * C295) *
                   C47810 * C21669 +
               (C21671 * C279 - C21672 * C266 - C21671 * C280 + C47533 * C296) *
                   C47810 * C21670) *
                  C47606 * C47588 * C108 -
              ((C21671 * C281 - C21672 * C267 - C21671 * C282 + C47533 * C297) *
                   C47810 * C21670 +
               (C21671 * C275 - C21672 * C264 - C21671 * C276 + C47533 * C294) *
                   C47810 * C21669 +
               (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                   C47810 * C21668) *
                  C47606 * C47588 * C109 +
              ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                   C47810 * C21668 +
               (C21671 * C273 - C21672 * C263 - C21671 * C274 + C47533 * C293) *
                   C47810 * C21669 +
               (C21671 * C283 - C21672 * C268 - C21671 * C284 + C47533 * C298) *
                   C47810 * C21670) *
                  C47606 * C47588 * C110 -
              ((C21671 * C287 - C21672 * C270 - C21671 * C288 + C47533 * C300) *
                   C47810 * C21670 +
               (C21671 * C285 - C21672 * C269 - C21671 * C286 + C47533 * C299) *
                   C47810 * C21669 +
               (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                   C47810 * C21668) *
                  C47606 * C47588 * C111 +
              ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                   C47810 * C21668 +
               (C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
                   C47810 * C21669 +
               (C21671 * C291 - C21672 * C272 - C21671 * C292 + C47533 * C302) *
                   C47810 * C21670) *
                  C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21671 * C126 - C21672 * C119 - C21671 * C127 +
                 C47533 * C140) *
                    C47810 * C21668 +
                C21847 * C21669 + C21848 * C21670) *
                   C47606 * C47916 -
               (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
                   C47904 +
               (C21848 * C21668 + C21849 * C21669 +
                (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
                 C47533 * C1039) *
                    C47810 * C21670) *
                   C47606 * C47877) *
                  C260 +
              ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
                   C47904 -
               (C21851 * C21670 + C21850 * C21669 +
                (C21671 * C128 - C21672 * C120 - C21671 * C129 +
                 C47533 * C141) *
                    C47810 * C21668) *
                   C47606 * C47916 -
               ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
                 C47533 * C1040) *
                    C47810 * C21670 +
                C21852 * C21669 + C21851 * C21668) *
                   C47606 * C47877) *
                  C261 +
              (((C21671 * C130 - C21672 * C121 - C21671 * C131 +
                 C47533 * C142) *
                    C47810 * C21668 +
                C21853 * C21669 + C21854 * C21670) *
                   C47606 * C47916 -
               (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
                   C47904 +
               (C21854 * C21668 + C21855 * C21669 +
                (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
                 C47533 * C1041) *
                    C47810 * C21670) *
                   C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47917 -
           ((C21671 * C1171 - C21672 * C1157 - C21671 * C1172 +
             C47533 * C1184) *
                C47810 * C21670 +
            (C21671 * C819 - C21672 * C814 - C21671 * C820 + C47533 * C829) *
                C47810 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47906 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            (C21671 * C1165 - C21672 * C1154 - C21671 * C1166 +
             C47533 * C1181) *
                C47810 * C21669 +
            (C21671 * C1173 - C21672 * C1158 - C21671 * C1174 +
             C47533 * C1185) *
                C47810 * C21670) *
               C47880) *
              C47588 * C260 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            (C21671 * C821 - C21672 * C815 - C21671 * C822 + C47533 * C830) *
                C47810 * C21669 +
            (C21671 * C1169 - C21672 * C1156 - C21671 * C1170 +
             C47533 * C1183) *
                C47810 * C21670) *
               C47906 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47917 -
           ((C21671 * C1175 - C21672 * C1159 - C21671 * C1176 +
             C47533 * C1186) *
                C47810 * C21670 +
            (C21671 * C1163 - C21672 * C1153 - C21671 * C1164 +
             C47533 * C1180) *
                C47810 * C21669 +
            (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                C47810 * C21668) *
               C47880) *
              C47588 * C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47917 -
           ((C21671 * C1167 - C21672 * C1155 - C21671 * C1168 +
             C47533 * C1182) *
                C47810 * C21670 +
            (C21671 * C823 - C21672 * C816 - C21671 * C824 + C47533 * C831) *
                C47810 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C47906 +
           ((C21671 * C436 - C21672 * C421 - C21671 * C437 + C47533 * C451) *
                C47810 * C21668 +
            (C21671 * C1161 - C21672 * C1152 - C21671 * C1162 +
             C47533 * C1179) *
                C47810 * C21669 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C47810 * C21670) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C944 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C945 +
           (C21848 * C21668 + C21849 * C21669 +
            (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
             C47533 * C1039) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47913 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C945 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C944 -
           ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
             C47533 * C1040) *
                C47810 * C21670 +
            C21852 * C21669 + C21851 * C21668) *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C944 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C945 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           C21847 * C21669 + C21848 * C21670) *
              C47606 * C1012 -
          (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
              C1013 +
          (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
              C1014 -
          (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
              C1015 +
          (C22562 * C21668 + C22563 * C21669 +
           (C21671 * C22544 - C21672 * C22543 - C21671 * C22545 +
            C47533 * C22546) *
               C47810 * C21670) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47917 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47906 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47880) *
              C944 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47906 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47917 -
           (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C47880) *
              C945 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47917 -
           ((C21671 * C6415 - C21672 * C6413 - C21671 * C6416 +
             C47533 * C6419) *
                C47810 * C21670 +
            C22708 * C21669 + C22366 * C21668) *
               C47906 +
           (C22707 * C21668 + C22709 * C21669 +
            (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
             C47533 * C22676) *
                C47810 * C21670) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C1666 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C1667 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47880) *
              C47588 * C47913 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            C22368 * C21669 + C22369 * C21670) *
               C1667 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C1666 -
           ((C21671 * C1175 - C21672 * C1159 - C21671 * C1176 +
             C47533 * C1186) *
                C47810 * C21670 +
            (C21671 * C1163 - C21672 * C1153 - C21671 * C1164 +
             C47533 * C1180) *
                C47810 * C21669 +
            (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                C47810 * C21668) *
               C47880) *
              C47588 * C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C1666 -
           (C22370 * C21670 + C22371 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C1667 +
           ((C21671 * C436 - C21672 * C421 - C21671 * C437 + C47533 * C451) *
                C47810 * C21668 +
            (C21671 * C1161 - C21672 * C1152 - C21671 * C1162 +
             C47533 * C1179) *
                C47810 * C21669 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C47810 * C21670) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C1666 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C1667 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47880) *
              C47916 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C1667 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C1666 -
           (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C47880) *
              C47904 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C1666 -
           (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C1667 +
           (C22707 * C21668 + C22709 * C21669 +
            (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
             C47533 * C22676) *
                C47810 * C21670) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           C21847 * C21669 + C21848 * C21670) *
              C1841 -
          (C22366 * C21670 + C22367 * C21669 +
           (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
               C47810 * C21668) *
              C1842 +
          ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
               C47810 * C21668 +
           C22706 * C21669 + C22707 * C21670) *
              C1843 -
          ((C21671 * C7287 - C21672 * C7285 - C21671 * C7288 + C47533 * C7291) *
               C47810 * C21670 +
           (C21671 * C2227 - C21672 * C2224 - C21671 * C2228 + C47533 * C2233) *
               C47810 * C21669 +
           (C21671 * C1856 - C21672 * C1848 - C21671 * C1857 + C47533 * C1866) *
               C47810 * C21668) *
              C1844 +
          ((C21671 * C1858 - C21672 * C1849 - C21671 * C1859 + C47533 * C1867) *
               C47810 * C21668 +
           (C21671 * C6811 - C21672 * C6809 - C21671 * C6812 + C47533 * C6815) *
               C47810 * C21669 +
           (C21671 * C23362 - C21672 * C23361 - C21671 * C23363 +
            C47533 * C23364) *
               C47810 * C21670) *
              C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47846 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C944 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
               C945 +
           ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47846 -
            ((C21671 * C6415 - C21672 * C6413 - C21671 * C6416 +
              C47533 * C6419) *
                 C47810 * C21670 +
             C22708 * C21669 + C22366 * C21668) *
                C47693) *
               C47877) *
              C47831 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47846) *
               C944 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47846 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C945 +
           ((C22369 * C21668 + C22969 * C21669 +
             (C21671 * C6417 - C21672 * C6414 - C21671 * C6418 +
              C47533 * C6420) *
                 C47810 * C21670) *
                C47693 -
            (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47846 -
           ((C21671 * C1171 - C21672 * C1157 - C21671 * C1172 +
             C47533 * C1184) *
                C47810 * C21670 +
            (C21671 * C819 - C21672 * C814 - C21671 * C820 + C47533 * C829) *
                C47810 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C47588 * C556 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            (C21671 * C821 - C21672 * C815 - C21671 * C822 + C47533 * C830) *
                C47810 * C21669 +
            (C21671 * C1169 - C21672 * C1156 - C21671 * C1170 +
             C47533 * C1183) *
                C47810 * C21670) *
               C47693 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47846) *
              C47588 * C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47846 -
           ((C21671 * C1167 - C21672 * C1155 - C21671 * C1168 +
             C47533 * C1182) *
                C47810 * C21670 +
            (C21671 * C823 - C21672 * C816 - C21671 * C824 + C47533 * C831) *
                C47810 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C47693) *
              C47588 * C558 +
          (((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                C47810 * C21668 +
            (C21671 * C825 - C21672 * C817 - C21671 * C826 + C47533 * C832) *
                C47810 * C21669 +
            (C21671 * C1443 - C21672 * C1442 - C21671 * C1444 +
             C47533 * C1445) *
                C47810 * C21670) *
               C47693 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C2118 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C2119 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C2120 -
           ((C21671 * C7287 - C21672 * C7285 - C21671 * C7288 +
             C47533 * C7291) *
                C47810 * C21670 +
            (C21671 * C2227 - C21672 * C2224 - C21671 * C2228 +
             C47533 * C2233) *
                C47810 * C21669 +
            (C21671 * C1856 - C21672 * C1848 - C21671 * C1857 +
             C47533 * C1866) *
                C47810 * C21668) *
               C47893) *
              C47588 * C47831 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            C22368 * C21669 + C22369 * C21670) *
               C2119 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C2118 -
           (C23526 * C21670 + C23527 * C21669 +
            (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                C47810 * C21668) *
               C2120 +
           ((C21671 * C1854 - C21672 * C1847 - C21671 * C1855 +
             C47533 * C1865) *
                C47810 * C21668 +
            (C21671 * C2229 - C21672 * C2225 - C21671 * C2230 +
             C47533 * C2234) *
                C47810 * C21669 +
            (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
             C47533 * C7292) *
                C47810 * C21670) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47916 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47904 +
           (C21848 * C21668 + C21849 * C21669 +
            (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
             C47533 * C1039) *
                C47810 * C21670) *
               C47606 * C47877) *
              C260 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47904 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47916 -
           ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
             C47533 * C1040) *
                C47810 * C21670 +
            C21852 * C21669 + C21851 * C21668) *
               C47606 * C47877) *
              C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C47916 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47904 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           (C21671 * C277 - C21672 * C265 - C21671 * C278 + C47533 * C295) *
               C47810 * C21669 +
           (C21671 * C279 - C21672 * C266 - C21671 * C280 + C47533 * C296) *
               C47810 * C21670) *
              C47606 * C47588 * C108 -
          ((C21671 * C281 - C21672 * C267 - C21671 * C282 + C47533 * C297) *
               C47810 * C21670 +
           (C21671 * C275 - C21672 * C264 - C21671 * C276 + C47533 * C294) *
               C47810 * C21669 +
           (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
               C47810 * C21668) *
              C47606 * C47588 * C109 +
          ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
               C47810 * C21668 +
           (C21671 * C273 - C21672 * C263 - C21671 * C274 + C47533 * C293) *
               C47810 * C21669 +
           (C21671 * C283 - C21672 * C268 - C21671 * C284 + C47533 * C298) *
               C47810 * C21670) *
              C47606 * C47588 * C110 -
          ((C21671 * C287 - C21672 * C270 - C21671 * C288 + C47533 * C300) *
               C47810 * C21670 +
           (C21671 * C285 - C21672 * C269 - C21671 * C286 + C47533 * C299) *
               C47810 * C21669 +
           (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
               C47810 * C21668) *
              C47606 * C47588 * C111 +
          ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
               C47810 * C21668 +
           (C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
               C47810 * C21669 +
           (C21671 * C291 - C21672 * C272 - C21671 * C292 + C47533 * C302) *
               C47810 * C21670) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C944 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C945 +
           (C21848 * C21668 + C21849 * C21669 +
            (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
             C47533 * C1039) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47913 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C945 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C944 -
           ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
             C47533 * C1040) *
                C47810 * C21670 +
            C21852 * C21669 + C21851 * C21668) *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C944 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C945 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           C21847 * C21669 + C21848 * C21670) *
              C47606 * C1012 -
          (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
              C1013 +
          (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
              C1014 -
          (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
              C1015 +
          (C22562 * C21668 + C22563 * C21669 +
           (C21671 * C22544 - C21672 * C22543 - C21671 * C22545 +
            C47533 * C22546) *
               C47810 * C21670) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C1666 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C1667 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47880) *
              C47588 * C47913 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            C22368 * C21669 + C22369 * C21670) *
               C1667 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C1666 -
           ((C21671 * C1175 - C21672 * C1159 - C21671 * C1176 +
             C47533 * C1186) *
                C47810 * C21670 +
            (C21671 * C1163 - C21672 * C1153 - C21671 * C1164 +
             C47533 * C1180) *
                C47810 * C21669 +
            (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                C47810 * C21668) *
               C47880) *
              C47588 * C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C1666 -
           (C22370 * C21670 + C22371 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C1667 +
           ((C21671 * C436 - C21672 * C421 - C21671 * C437 + C47533 * C451) *
                C47810 * C21668 +
            (C21671 * C1161 - C21672 * C1152 - C21671 * C1162 +
             C47533 * C1179) *
                C47810 * C21669 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C47810 * C21670) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C1666 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C1667 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47880) *
              C47916 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C1667 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C1666 -
           (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C47880) *
              C47904 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C1666 -
           (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C1667 +
           (C22707 * C21668 + C22709 * C21669 +
            (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
             C47533 * C22676) *
                C47810 * C21670) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C3096 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C47845 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
               C47651) *
              C47565 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C3096) *
               C47845 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C3096 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47651) *
              C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C47810 * C21668 +
             C21853 * C21669 + C21854 * C21670) *
                C3096 -
            (C22370 * C21670 + C22371 * C21669 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47810 * C21668) *
                C47693) *
               C47845 +
           ((C22371 * C21668 + C22370 * C21669 +
             (C21671 * C1551 - C21672 * C1546 - C21671 * C1552 +
              C47533 * C1555) *
                 C47810 * C21670) *
                C47693 -
            (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47689 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47696 +
            ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                 C47810 * C21668 +
             C22706 * C21669 + C22707 * C21670) *
                C3604) *
               C47845 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47696 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47689 -
            (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C3604) *
               C47651) *
              C2442 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47696 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47689 -
            (C23526 * C21670 + C23527 * C21669 +
             (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                 C47810 * C21668) *
                C3604) *
               C47845 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47689 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47696 +
            (C23527 * C21668 + C23526 * C21669 +
             (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
              C47533 * C5888) *
                 C47810 * C21670) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C3096 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C47916 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
               C47904 +
           ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C3096 -
            (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
               C47877) *
              C2442 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C3096) *
               C47916 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C3096 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47904 +
           ((C22369 * C21668 + C22969 * C21669 +
             (C21671 * C6417 - C21672 * C6414 - C21671 * C6418 +
              C47533 * C6420) *
                 C47810 * C21670) *
                C47693 -
            (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C3096 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C47588 * C47922 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            C22368 * C21669 + C22369 * C21670) *
               C47693 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C3096) *
              C47588 * C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C3096 -
           (C22370 * C21670 + C22371 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C47693) *
              C47588 * C47902 +
          (((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                C47810 * C21668 +
            (C21671 * C825 - C21672 * C817 - C21671 * C826 + C47533 * C832) *
                C47810 * C21669 +
            (C21671 * C1443 - C21672 * C1442 - C21671 * C1444 +
             C47533 * C1445) *
                C47810 * C21670) *
               C47693 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47924 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47921 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47912 -
           (C23742 * C21670 + C23743 * C21669 +
            (C21671 * C1856 - C21672 * C1848 - C21671 * C1857 +
             C47533 * C1866) *
                C47810 * C21668) *
               C47893) *
              C47588 * C2442 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            C22368 * C21669 + C22369 * C21670) *
               C47921 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47924 -
           (C23526 * C21670 + C23527 * C21669 +
            (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                C47810 * C21668) *
               C47912 +
           ((C21671 * C1854 - C21672 * C1847 - C21671 * C1855 +
             C47533 * C1865) *
                C47810 * C21668 +
            (C21671 * C2229 - C21672 * C2225 - C21671 * C2230 +
             C47533 * C2234) *
                C47810 * C21669 +
            (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
             C47533 * C7292) *
                C47810 * C21670) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47689 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47696 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C3604) *
              C47588 * C47565 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            C22368 * C21669 + C22369 * C21670) *
               C47696 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47689 -
           (C23526 * C21670 + C23527 * C21669 +
            (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                C47810 * C21668) *
               C3604) *
              C47588 * C47574 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47689 -
           (C22370 * C21670 + C22371 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C47696 +
           ((C21671 * C436 - C21672 * C421 - C21671 * C437 + C47533 * C451) *
                C47810 * C21668 +
            (C21671 * C1161 - C21672 * C1152 - C21671 * C1162 +
             C47533 * C1179) *
                C47810 * C21669 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C47810 * C21670) *
               C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C3096 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C47588 * C47922 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            C22368 * C21669 + C22369 * C21670) *
               C47693 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C3096) *
              C47588 * C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C3096 -
           (C22370 * C21670 + C22371 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C47693) *
              C47588 * C47902 +
          (((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                C47810 * C21668 +
            (C21671 * C825 - C21672 * C817 - C21671 * C826 + C47533 * C832) *
                C47810 * C21669 +
            (C21671 * C1443 - C21672 * C1442 - C21671 * C1444 +
             C47533 * C1445) *
                C47810 * C21670) *
               C47693 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C3096 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C47916 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C3096) *
               C47904 +
           ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C3096 -
            (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
               C47877) *
              C2442 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C3096) *
               C47916 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C3096 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C47904 +
           ((C22369 * C21668 + C22969 * C21669 +
             (C21671 * C6417 - C21672 * C6414 - C21671 * C6418 +
              C47533 * C6420) *
                 C47810 * C21670) *
                C47693 -
            (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47845 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47651) *
              C556 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47651 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47845) *
              C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C47845 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47651) *
              C558 +
          ((C22078 * C21668 + C22079 * C21669 +
            (C21671 * C1293 - C21672 * C1292 - C21671 * C1294 +
             C47533 * C1295) *
                C47810 * C21670) *
               C47606 * C47651 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C1286 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C1287 +
           (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
               C1288 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
               C47887) *
              C47831 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C1287 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C1286 -
           (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47606 *
               C1288 +
           (C21852 * C21668 + C22815 * C21669 +
            (C21671 * C5703 - C21672 * C5700 - C21671 * C5704 +
             C47533 * C5706) *
                C47810 * C21670) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47846 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C47845 +
           ((C22367 * C21668 + C22366 * C21669 +
             (C21671 * C1547 - C21672 * C1544 - C21671 * C1548 +
              C47533 * C1553) *
                 C47810 * C21670) *
                C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
               C47651) *
              C260 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47846) *
               C47845 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47846 -
            ((C21671 * C1549 - C21672 * C1545 - C21671 * C1550 +
              C47533 * C1554) *
                 C47810 * C21670 +
             C22369 * C21669 + C22368 * C21668) *
                C47693) *
               C47651) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C47810 * C21668 +
             C21853 * C21669 + C21854 * C21670) *
                C47846 -
            (C22370 * C21670 + C22371 * C21669 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47810 * C21668) *
                C47693) *
               C47845 +
           ((C22371 * C21668 + C22370 * C21669 +
             (C21671 * C1551 - C21672 * C1546 - C21671 * C1552 +
              C47533 * C1555) *
                 C47810 * C21670) *
                C47693 -
            (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47846 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C1286 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
              C1287 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47846 -
           (C23079 * C21670 + C22708 * C21669 + C22366 * C21668) * C47693) *
              C1288 +
          ((C22708 * C21668 + C23079 * C21669 +
            (C21671 * C23068 - C21672 * C23067 - C21671 * C23069 +
             C47533 * C23070) *
                C47810 * C21670) *
               C47693 -
           (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47916 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47904 +
           (C21848 * C21668 + C21849 * C21669 +
            (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
             C47533 * C1039) *
                C47810 * C21670) *
               C47606 * C47877) *
              C260 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47904 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47916 -
           ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
             C47533 * C1040) *
                C47810 * C21670 +
            C21852 * C21669 + C21851 * C21668) *
               C47606 * C47877) *
              C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C47916 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47904 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           (C21671 * C277 - C21672 * C265 - C21671 * C278 + C47533 * C295) *
               C47810 * C21669 +
           (C21671 * C279 - C21672 * C266 - C21671 * C280 + C47533 * C296) *
               C47810 * C21670) *
              C47606 * C47588 * C108 -
          ((C21671 * C281 - C21672 * C267 - C21671 * C282 + C47533 * C297) *
               C47810 * C21670 +
           (C21671 * C275 - C21672 * C264 - C21671 * C276 + C47533 * C294) *
               C47810 * C21669 +
           (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
               C47810 * C21668) *
              C47606 * C47588 * C109 +
          ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
               C47810 * C21668 +
           (C21671 * C273 - C21672 * C263 - C21671 * C274 + C47533 * C293) *
               C47810 * C21669 +
           (C21671 * C283 - C21672 * C268 - C21671 * C284 + C47533 * C298) *
               C47810 * C21670) *
              C47606 * C47588 * C110 -
          ((C21671 * C287 - C21672 * C270 - C21671 * C288 + C47533 * C300) *
               C47810 * C21670 +
           (C21671 * C285 - C21672 * C269 - C21671 * C286 + C47533 * C299) *
               C47810 * C21669 +
           (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
               C47810 * C21668) *
              C47606 * C47588 * C111 +
          ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
               C47810 * C21668 +
           (C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
               C47810 * C21669 +
           (C21671 * C291 - C21672 * C272 - C21671 * C292 + C47533 * C302) *
               C47810 * C21670) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47917 -
           ((C21671 * C1171 - C21672 * C1157 - C21671 * C1172 +
             C47533 * C1184) *
                C47810 * C21670 +
            (C21671 * C819 - C21672 * C814 - C21671 * C820 + C47533 * C829) *
                C47810 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47906 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            (C21671 * C1165 - C21672 * C1154 - C21671 * C1166 +
             C47533 * C1181) *
                C47810 * C21669 +
            (C21671 * C1173 - C21672 * C1158 - C21671 * C1174 +
             C47533 * C1185) *
                C47810 * C21670) *
               C47880) *
              C47588 * C260 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            (C21671 * C821 - C21672 * C815 - C21671 * C822 + C47533 * C830) *
                C47810 * C21669 +
            (C21671 * C1169 - C21672 * C1156 - C21671 * C1170 +
             C47533 * C1183) *
                C47810 * C21670) *
               C47906 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47917 -
           ((C21671 * C1175 - C21672 * C1159 - C21671 * C1176 +
             C47533 * C1186) *
                C47810 * C21670 +
            (C21671 * C1163 - C21672 * C1153 - C21671 * C1164 +
             C47533 * C1180) *
                C47810 * C21669 +
            (C21671 * C434 - C21672 * C420 - C21671 * C435 + C47533 * C450) *
                C47810 * C21668) *
               C47880) *
              C47588 * C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47917 -
           ((C21671 * C1167 - C21672 * C1155 - C21671 * C1168 +
             C47533 * C1182) *
                C47810 * C21670 +
            (C21671 * C823 - C21672 * C816 - C21671 * C824 + C47533 * C831) *
                C47810 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C47906 +
           ((C21671 * C436 - C21672 * C421 - C21671 * C437 + C47533 * C451) *
                C47810 * C21668 +
            (C21671 * C1161 - C21672 * C1152 - C21671 * C1162 +
             C47533 * C1179) *
                C47810 * C21669 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C47810 * C21670) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C944 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C945 +
           (C21848 * C21668 + C21849 * C21669 +
            (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
             C47533 * C1039) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47913 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C945 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C944 -
           ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
             C47533 * C1040) *
                C47810 * C21670 +
            C21852 * C21669 + C21851 * C21668) *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C944 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C945 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           C21847 * C21669 + C21848 * C21670) *
              C47606 * C1012 -
          (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
              C1013 +
          (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
              C1014 -
          (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
              C1015 +
          (C22562 * C21668 + C22563 * C21669 +
           (C21671 * C22544 - C21672 * C22543 - C21671 * C22545 +
            C47533 * C22546) *
               C47810 * C21670) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47917 -
           (C22366 * C21670 + C22367 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47906 +
           ((C21671 * C432 - C21672 * C419 - C21671 * C433 + C47533 * C449) *
                C47810 * C21668 +
            C22706 * C21669 + C22707 * C21670) *
               C47880) *
              C944 +
          ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47906 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47917 -
           (C22709 * C21670 + C22707 * C21669 + C22706 * C21668) * C47880) *
              C945 +
          ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47917 -
           ((C21671 * C6415 - C21672 * C6413 - C21671 * C6416 +
             C47533 * C6419) *
                C47810 * C21670 +
            C22708 * C21669 + C22366 * C21668) *
               C47906 +
           (C22707 * C21668 + C22709 * C21669 +
            (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
             C47533 * C22676) *
                C47810 * C21670) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47846 -
           ((C21671 * C1171 - C21672 * C1157 - C21671 * C1172 +
             C47533 * C1184) *
                C47810 * C21670 +
            (C21671 * C819 - C21672 * C814 - C21671 * C820 + C47533 * C829) *
                C47810 * C21669 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47810 * C21668) *
               C47693) *
              C47588 * C556 +
          (((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47810 * C21668 +
            (C21671 * C821 - C21672 * C815 - C21671 * C822 + C47533 * C830) *
                C47810 * C21669 +
            (C21671 * C1169 - C21672 * C1156 - C21671 * C1170 +
             C47533 * C1183) *
                C47810 * C21670) *
               C47693 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47846) *
              C47588 * C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47846 -
           ((C21671 * C1167 - C21672 * C1155 - C21671 * C1168 +
             C47533 * C1182) *
                C47810 * C21670 +
            (C21671 * C823 - C21672 * C816 - C21671 * C824 + C47533 * C831) *
                C47810 * C21669 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47810 * C21668) *
               C47693) *
              C47588 * C558 +
          (((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                C47810 * C21668 +
            (C21671 * C825 - C21672 * C817 - C21671 * C826 + C47533 * C832) *
                C47810 * C21669 +
            (C21671 * C1443 - C21672 * C1442 - C21671 * C1444 +
             C47533 * C1445) *
                C47810 * C21670) *
               C47693 -
           (C22079 * C21670 + C22078 * C21669 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C47810 * C21668) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C47810 * C21668 +
             C21847 * C21669 + C21848 * C21670) *
                C47846 -
            (C22366 * C21670 + C22367 * C21669 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47810 * C21668) *
                C47693) *
               C944 +
           ((C22367 * C21668 + C22366 * C21669 + C22708 * C21670) * C47693 -
            (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47846) *
               C945 +
           ((C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47846 -
            ((C21671 * C6415 - C21672 * C6413 - C21671 * C6416 +
              C47533 * C6419) *
                 C47810 * C21670 +
             C22708 * C21669 + C22366 * C21668) *
                C47693) *
               C47877) *
              C47831 +
          ((((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47810 * C21668 +
             C22368 * C21669 + C22369 * C21670) *
                C47693 -
            (C21851 * C21670 + C21850 * C21669 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C47810 * C21668) *
                C47846) *
               C944 +
           ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47846 -
            (C22969 * C21670 + C22369 * C21669 + C22368 * C21668) * C47693) *
               C945 +
           ((C22369 * C21668 + C22969 * C21669 +
             (C21671 * C6417 - C21672 * C6414 - C21671 * C6418 +
              C47533 * C6420) *
                 C47810 * C21670) *
                C47693 -
            (C22815 * C21670 + C21852 * C21669 + C21851 * C21668) * C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           (C21671 * C277 - C21672 * C265 - C21671 * C278 + C47533 * C295) *
               C47810 * C21669 +
           (C21671 * C279 - C21672 * C266 - C21671 * C280 + C47533 * C296) *
               C47810 * C21670) *
              C47606 * C47588 * C108 -
          ((C21671 * C281 - C21672 * C267 - C21671 * C282 + C47533 * C297) *
               C47810 * C21670 +
           (C21671 * C275 - C21672 * C264 - C21671 * C276 + C47533 * C294) *
               C47810 * C21669 +
           (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
               C47810 * C21668) *
              C47606 * C47588 * C109 +
          ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
               C47810 * C21668 +
           (C21671 * C273 - C21672 * C263 - C21671 * C274 + C47533 * C293) *
               C47810 * C21669 +
           (C21671 * C283 - C21672 * C268 - C21671 * C284 + C47533 * C298) *
               C47810 * C21670) *
              C47606 * C47588 * C110 -
          ((C21671 * C287 - C21672 * C270 - C21671 * C288 + C47533 * C300) *
               C47810 * C21670 +
           (C21671 * C285 - C21672 * C269 - C21671 * C286 + C47533 * C299) *
               C47810 * C21669 +
           (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
               C47810 * C21668) *
              C47606 * C47588 * C111 +
          ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
               C47810 * C21668 +
           (C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
               C47810 * C21669 +
           (C21671 * C291 - C21672 * C272 - C21671 * C292 + C47533 * C302) *
               C47810 * C21670) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C47916 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C47904 +
           (C21848 * C21668 + C21849 * C21669 +
            (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
             C47533 * C1039) *
                C47810 * C21670) *
               C47606 * C47877) *
              C260 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C47904 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C47916 -
           ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
             C47533 * C1040) *
                C47810 * C21670 +
            C21852 * C21669 + C21851 * C21668) *
               C47606 * C47877) *
              C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C47916 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C47904 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C47810 * C21668 +
            C21847 * C21669 + C21848 * C21670) *
               C47606 * C944 -
           (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
               C945 +
           (C21848 * C21668 + C21849 * C21669 +
            (C21671 * C1030 - C21672 * C1021 - C21671 * C1031 +
             C47533 * C1039) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47913 +
          ((C21850 * C21668 + C21851 * C21669 + C21852 * C21670) * C47606 *
               C945 -
           (C21851 * C21670 + C21850 * C21669 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C47810 * C21668) *
               C47606 * C944 -
           ((C21671 * C1032 - C21672 * C1022 - C21671 * C1033 +
             C47533 * C1040) *
                C47810 * C21670 +
            C21852 * C21669 + C21851 * C21668) *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C47810 * C21668 +
            C21853 * C21669 + C21854 * C21670) *
               C47606 * C944 -
           (C21855 * C21670 + C21854 * C21669 + C21853 * C21668) * C47606 *
               C945 +
           (C21854 * C21668 + C21855 * C21669 +
            (C21671 * C1034 - C21672 * C1023 - C21671 * C1035 +
             C47533 * C1041) *
                C47810 * C21670) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C47810 * C21668 +
           C21847 * C21669 + C21848 * C21670) *
              C47606 * C1012 -
          (C21849 * C21670 + C21848 * C21669 + C21847 * C21668) * C47606 *
              C1013 +
          (C21848 * C21668 + C21849 * C21669 + C22562 * C21670) * C47606 *
              C1014 -
          (C22563 * C21670 + C22562 * C21669 + C21849 * C21668) * C47606 *
              C1015 +
          (C22562 * C21668 + C22563 * C21669 +
           (C21671 * C22544 - C21672 * C22543 - C21671 * C22545 +
            C47533 * C22546) *
               C47810 * C21670) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47647 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47654 +
           ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
               C2702) *
              C47565 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47654 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47647 -
           ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C47606 *
               C2702) *
              C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C47647 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47654 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47846 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C47647 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) *
                C47846) *
               C47654 +
           (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47846 -
            ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) *
                C47693) *
               C2702) *
              C2442 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47846) *
               C47647 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47846 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47654 +
           (((C27598 + C27597) * C15953 +
             (C22968 * C10353 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) *
                C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47923 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47919 +
           ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
               C47909 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
               C47887) *
              C2442 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47919 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47923 -
           ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C47606 *
               C47909 +
           ((C27402 + C27401) * C15953 +
            (C22814 * C10353 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C2334 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47651) *
              C47922 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47651 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C2334) *
              C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C2334 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47651) *
              C47902 +
          (((C26541 + C26549) * C15953 +
            (C22077 * C10353 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C26549 + C26541) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47917 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47906 +
            ((C26405 * C10353 + C28127 * C47897) * C15953 +
             (C27265 + C27266) * C47895) *
                C47880) *
               C2334 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47906 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47917 -
            ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) *
                C47880) *
               C47651) *
              C2442 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47906 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47917 -
            ((C28332 + C28328) * C47895 +
             (C28469 * C47897 + C26407 * C10353) * C15953) *
                C47880) *
               C2334 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47917 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) * C47906 +
            ((C28328 + C28332) * C15953 +
             (C23524 * C10353 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47846 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C2334 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) *
                C47846) *
               C47651) *
              C47565 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47846) *
               C2334 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47846 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47651) *
              C47574 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C10353 +
              C26408 * C47897) *
                 C15953 +
             (C26212 + C26213) * C47895) *
                C47846 -
            ((C26885 + C26886) * C47895 +
             (C26410 * C47897 + C26408 * C10353) * C15953) *
                C47693) *
               C2334 +
           (((C26886 + C26885) * C15953 +
             (C22364 * C10353 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) *
                C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C2334 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47651) *
              C47922 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47651 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C2334) *
              C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C2334 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47651) *
              C47902 +
          (((C26541 + C26549) * C15953 +
            (C22077 * C10353 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C26549 + C26541) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47923 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47919 +
           ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
               C47909 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
               C47887) *
              C2442 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47919 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47923 -
           ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C47606 *
               C47909 +
           ((C27402 + C27401) * C15953 +
            (C22814 * C10353 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C3096 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C47647 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
               C47654 +
           (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C3096 -
            ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) *
                C47693) *
               C2702) *
              C47831 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C3096) *
               C47647 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C3096 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47654 +
           (((C27598 + C27597) * C15953 +
             (C22968 * C10353 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47689 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47696 +
           ((C26405 * C10353 + C28127 * C47897) * C15953 +
            (C27265 + C27266) * C47895) *
               C3604) *
              C47647 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47696 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47689 -
           ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C3604) *
              C47654 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47689 -
           ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) * C47696 +
           ((C27270 + C27269) * C15953 +
            (C22705 * C10353 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C3096 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C47923 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
              C47919 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C3096 -
           ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) * C47693) *
              C47909 +
          (((C27730 + C27729) * C15953 +
            (C23078 * C10353 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C3096 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C2334 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
               C47651) *
              C47913 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C3096) *
               C2334 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C3096 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47651) *
              C47900 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C10353 +
              C26408 * C47897) *
                 C15953 +
             (C26212 + C26213) * C47895) *
                C3096 -
            ((C26885 + C26886) * C47895 +
             (C26410 * C47897 + C26408 * C10353) * C15953) *
                C47693) *
               C2334 +
           (((C26886 + C26885) * C15953 +
             (C22364 * C10353 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47924 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47921 +
           ((C26405 * C10353 + C28127 * C47897) * C15953 +
            (C27265 + C27266) * C47895) *
               C47912 -
           ((C28600 + C28601) * C47895 +
            (C28129 * C47897 + C28127 * C10353) * C15953) *
               C47893) *
              C2334 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47921 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47924 -
           ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C47912 +
           ((C28601 + C28600) * C15953 +
            (C23740 * C10353 + (C21671 * C23362 - C21672 * C23361 -
                                C21671 * C23363 + C47533 * C23364) *
                                   C47897) *
                C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47689 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47696 +
            ((C26405 * C10353 + C28127 * C47897) * C15953 +
             (C27265 + C27266) * C47895) *
                C3604) *
               C2334 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47696 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47689 -
            ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C3604) *
               C47651) *
              C47831 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47696 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47689 -
            ((C28332 + C28328) * C47895 +
             (C28469 * C47897 + C26407 * C10353) * C15953) *
                C3604) *
               C2334 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47689 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) * C47696 +
            ((C28328 + C28332) * C15953 +
             (C23524 * C10353 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C3096 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C2334 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
               C47651) *
              C47913 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C3096) *
               C2334 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C3096 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47651) *
              C47900 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C10353 +
              C26408 * C47897) *
                 C15953 +
             (C26212 + C26213) * C47895) *
                C3096 -
            ((C26885 + C26886) * C47895 +
             (C26410 * C47897 + C26408 * C10353) * C15953) *
                C47693) *
               C2334 +
           (((C26886 + C26885) * C15953 +
             (C22364 * C10353 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C3096 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C47923 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
              C47919 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C3096 -
           ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) * C47693) *
              C47909 +
          (((C27730 + C27729) * C15953 +
            (C23078 * C10353 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C1286 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C1287 +
           ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
               C1288 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
               C47887) *
              C47831 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C1287 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C1286 -
           ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C47606 *
               C1288 +
           ((C27402 + C27401) * C15953 +
            (C22814 * C10353 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47845 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47651) *
              C556 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47651 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47845) *
              C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C47845 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47651) *
              C558 +
          (((C26541 + C26549) * C15953 +
            (C22077 * C10353 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C26549 + C26541) * C47895 +
            ((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                 C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C1666 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C1667 +
            ((C26405 * C10353 + C28127 * C47897) * C15953 +
             (C27265 + C27266) * C47895) *
                C47880) *
               C47845 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C1667 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C1666 -
            ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) *
                C47880) *
               C47651) *
              C47831 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C1667 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C1666 -
            ((C28332 + C28328) * C47895 + ((C21671 * C1854 - C21672 * C1847 -
                                            C21671 * C1855 + C47533 * C1865) *
                                               C47897 +
                                           C26407 * C10353) *
                                              C15953) *
                C47880) *
               C47845 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C1666 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) * C1667 +
            ((C28328 + C28332) * C15953 +
             (C23524 * C10353 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47846 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C1286 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47846) *
              C1287 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47846 -
           ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) * C47693) *
              C1288 +
          (((C27730 + C27729) * C15953 +
            (C23078 * C10353 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47846 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C47845 +
           (((C26882 + C26881) * C15953 +
             (C22360 * C10353 + C22703 * C47897) * C47895) *
                C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) *
                C47846) *
               C47651) *
              C260 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47846) *
               C47845 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47846 -
            ((C23524 * C47897 + C22363 * C10353) * C47895 +
             (C26884 + C26883) * C15953) *
                C47693) *
               C47651) *
              C261 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C10353 +
              C26408 * C47897) *
                 C15953 +
             (C26212 + C26213) * C47895) *
                C47846 -
            ((C26885 + C26886) * C47895 +
             (C26410 * C47897 + C26408 * C10353) * C15953) *
                C47693) *
               C47845 +
           (((C26886 + C26885) * C15953 +
             (C22364 * C10353 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C2118 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C2119 +
           ((C26405 * C10353 + C28127 * C47897) * C15953 +
            (C27265 + C27266) * C47895) *
               C2120 -
           ((C28600 + C28601) * C47895 +
            (C28129 * C47897 + C28127 * C10353) * C15953) *
               C47893) *
              C47845 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C2119 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C2118 -
           ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C2120 +
           ((C28601 + C28600) * C15953 +
            (C23740 * C10353 + (C21671 * C23362 - C21672 * C23361 -
                                C21671 * C23363 + C47533 * C23364) *
                                   C47897) *
                C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21671 * C126 - C21672 * C119 - C21671 * C127 +
                 C47533 * C140) *
                    C10353 +
                (C21671 * C430 - C21672 * C418 - C21671 * C431 +
                 C47533 * C448) *
                    C47897) *
                   C15953 +
               (C21838 * C10353 + C22361 * C47897) * C47895) *
                  C47606 * C47588 * C108 -
              ((C22362 * C47897 + C21841 * C10353) * C47895 +
               ((C21671 * C428 - C21672 * C417 - C21671 * C429 +
                 C47533 * C447) *
                    C47897 +
                (C21671 * C128 - C21672 * C120 - C21671 * C129 +
                 C47533 * C141) *
                    C10353) *
                   C15953) *
                  C47606 * C47588 * C109 +
              (((C21671 * C130 - C21672 * C121 - C21671 * C131 +
                 C47533 * C142) *
                    C10353 +
                (C21671 * C426 - C21672 * C416 - C21671 * C427 +
                 C47533 * C446) *
                    C47897) *
                   C15953 +
               (C21844 * C10353 + C22365 * C47897) * C47895) *
                  C47606 * C47588 * C110 -
              (((C21671 * C825 - C21672 * C817 - C21671 * C826 +
                 C47533 * C832) *
                    C47897 +
                C22076 * C10353) *
                   C47895 +
               ((C21671 * C438 - C21672 * C422 - C21671 * C439 +
                 C47533 * C452) *
                    C47897 +
                (C21671 * C132 - C21672 * C122 - C21671 * C133 +
                 C47533 * C143) *
                    C10353) *
                   C15953) *
                  C47606 * C47588 * C111 +
              (((C21671 * C134 - C21672 * C123 - C21671 * C135 +
                 C47533 * C144) *
                    C10353 +
                (C21671 * C442 - C21672 * C424 - C21671 * C443 +
                 C47533 * C454) *
                    C47897) *
                   C15953 +
               ((C21671 * C289 - C21672 * C271 - C21671 * C290 +
                 C47533 * C301) *
                    C10353 +
                (C21671 * C827 - C21672 * C818 - C21671 * C828 +
                 C47533 * C833) *
                    C47897) *
                   C47895) *
                  C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21671 * C126 - C21672 * C119 - C21671 * C127 +
                  C47533 * C140) *
                     C10353 +
                 (C21671 * C430 - C21672 * C418 - C21671 * C431 +
                  C47533 * C448) *
                     C47897) *
                    C15953 +
                (C26204 + C26205) * C47895) *
                   C47606 * C47916 -
               ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) *
                   C47606 * C47904 +
               ((C26207 + C26206) * C15953 +
                (C21840 * C10353 + C22704 * C47897) * C47895) *
                   C47606 * C47877) *
                  C260 +
              (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) *
                   C47606 * C47904 -
               ((C26209 + C26208) * C47895 + ((C21671 * C428 - C21672 * C417 -
                                               C21671 * C429 + C47533 * C447) *
                                                  C47897 +
                                              (C21671 * C128 - C21672 * C120 -
                                               C21671 * C129 + C47533 * C141) *
                                                  C10353) *
                                                 C15953) *
                   C47606 * C47916 -
               ((C22968 * C47897 + C21843 * C10353) * C47895 +
                (C26211 + C26210) * C15953) *
                   C47606 * C47877) *
                  C261 +
              ((((C21671 * C130 - C21672 * C121 - C21671 * C131 +
                  C47533 * C142) *
                     C10353 +
                 (C21671 * C426 - C21672 * C416 - C21671 * C427 +
                  C47533 * C446) *
                     C47897) *
                    C15953 +
                (C26212 + C26213) * C47895) *
                   C47606 * C47916 -
               ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) *
                   C47606 * C47904 +
               ((C26215 + C26214) * C15953 +
                (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                    C21671 * C1552 + C47533 * C1555) *
                                       C47897) *
                    C47895) *
                   C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47917 -
           ((C22702 * C47897 + C22361 * C10353) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47906 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C22702 * C10353 + C23741 * C47897) * C47895) *
               C47880) *
              C47588 * C260 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C22362 * C10353 + C23525 * C47897) * C47895) *
               C47906 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47917 -
           (((C21671 * C2229 - C21672 * C2225 - C21671 * C2230 +
              C47533 * C2234) *
                 C47897 +
             C23525 * C10353) *
                C47895 +
            ((C21671 * C1854 - C21672 * C1847 - C21671 * C1855 +
              C47533 * C1865) *
                 C47897 +
             C26407 * C10353) *
                C15953) *
               C47880) *
              C47588 * C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47917 -
           ((C26409 * C47897 + C22365 * C10353) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C47906 +
           ((C26410 * C10353 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C15953 +
            (C26409 * C10353 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C944 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C945 +
           ((C26207 + C26206) * C15953 +
            (C21840 * C10353 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C945 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C10353) * C47895 +
            (C26211 + C26210) * C15953) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C944 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C945 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            C26404 * C47897) *
               C15953 +
           (C26204 + C26205) * C47895) *
              C47606 * C1012 -
          ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
              C1013 +
          ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
              C1014 -
          ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
              C1015 +
          ((C27118 + C27117) * C15953 +
           (C22561 * C10353 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47917 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47906 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C27265 + C27266) * C47895) *
               C47880) *
              C944 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47906 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47917 -
           ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C47880) *
              C945 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47917 -
           ((C22705 * C47897 + C22704 * C10353) * C47895 +
            (C27268 + C27267) * C15953) *
               C47906 +
           ((C27270 + C27269) * C15953 +
            (C22705 * C10353 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C1666 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C1667 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C27265 + C27266) * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C26883 + C26884) * C47895) *
               C1667 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C1666 -
           (((C21671 * C2229 - C21672 * C2225 - C21671 * C2230 +
              C47533 * C2234) *
                 C47897 +
             C23525 * C10353) *
                C47895 +
            ((C21671 * C1854 - C21672 * C1847 - C21671 * C1855 +
              C47533 * C1865) *
                 C47897 +
             C26407 * C10353) *
                C15953) *
               C47880) *
              C47588 * C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C1666 -
           ((C26885 + C26886) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C1667 +
           ((C26410 * C10353 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C15953 +
            (C26409 * C10353 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C1666 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C1667 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C27265 + C27266) * C47895) *
               C47880) *
              C47916 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C1667 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C1666 -
           ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C47880) *
              C47904 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C1666 -
           ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) * C1667 +
           ((C27270 + C27269) * C15953 +
            (C22705 * C10353 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            C26404 * C47897) *
               C15953 +
           (C26204 + C26205) * C47895) *
              C1841 -
          ((C26881 + C26882) * C47895 +
           (C26405 * C47897 + C26404 * C10353) * C15953) *
              C1842 +
          ((C26405 * C10353 + C28127 * C47897) * C15953 +
           (C27265 + C27266) * C47895) *
              C1843 -
          ((C28128 * C47897 + C23741 * C10353) * C47895 +
           (C28129 * C47897 + C28127 * C10353) * C15953) *
              C1844 +
          ((C28129 * C10353 + (C21671 * C12403 - C21672 * C12401 -
                               C21671 * C12404 + C47533 * C12407) *
                                  C47897) *
               C15953 +
           (C28128 * C10353 + (C21671 * C28105 - C21672 * C28104 -
                               C21671 * C28106 + C47533 * C28107) *
                                  C47897) *
               C47895) *
              C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47846 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C944 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) *
                C47846) *
               C945 +
           (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47846 -
            ((C22705 * C47897 + C22704 * C10353) * C47895 +
             (C27268 + C27267) * C15953) *
                C47693) *
               C47877) *
              C47831 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47846) *
               C944 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47846 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C945 +
           (((C27598 + C27597) * C15953 +
             (C22968 * C10353 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47846 -
           ((C22702 * C47897 + C22361 * C10353) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C47588 * C556 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C22362 * C10353 + C23525 * C47897) * C47895) *
               C47693 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47846) *
              C47588 * C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47846 -
           ((C26409 * C47897 + C22365 * C10353) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C47693) *
              C47588 * C558 +
          (((C26686 * C10353 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C15953 +
            (C26548 * C10353 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C26549 + C26541) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C2118 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C2119 +
           ((C26405 * C10353 + C28127 * C47897) * C15953 +
            (C27265 + C27266) * C47895) *
               C2120 -
           ((C28128 * C47897 + C23741 * C10353) * C47895 +
            (C28129 * C47897 + C28127 * C10353) * C15953) *
               C47893) *
              C47588 * C47831 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C26883 + C26884) * C47895) *
               C2119 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C2118 -
           ((C28332 + C28328) * C47895 +
            (C28469 * C47897 + C26407 * C10353) * C15953) *
               C2120 +
           ((C28469 * C10353 + (C21671 * C1860 - C21672 * C1850 -
                                C21671 * C1861 + C47533 * C1868) *
                                   C47897) *
                C15953 +
            (C28331 * C10353 + (C21671 * C6813 - C21672 * C6810 -
                                C21671 * C6814 + C47533 * C6816) *
                                   C47897) *
                C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47916 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47904 +
           ((C26207 + C26206) * C15953 +
            (C21840 * C10353 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C260 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47904 -
           ((C26209 + C26208) * C47895 +
            ((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47916 -
           ((C22968 * C47897 + C21843 * C10353) * C47895 +
            (C26211 + C26210) * C15953) *
               C47606 * C47877) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C47916 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47904 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47897) *
               C15953 +
           (C21838 * C10353 + C22361 * C47897) * C47895) *
              C47606 * C47588 * C108 -
          ((C22362 * C47897 + C21841 * C10353) * C47895 +
           ((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47897 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C10353) *
               C15953) *
              C47606 * C47588 * C109 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C10353 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47897) *
               C15953 +
           (C21844 * C10353 + C22365 * C47897) * C47895) *
              C47606 * C47588 * C110 -
          (((C21671 * C825 - C21672 * C817 - C21671 * C826 + C47533 * C832) *
                C47897 +
            C22076 * C10353) *
               C47895 +
           ((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                C47897 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C10353) *
               C15953) *
              C47606 * C47588 * C111 +
          (((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                C10353 +
            (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
                C47897) *
               C15953 +
           ((C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
                C10353 +
            (C21671 * C827 - C21672 * C818 - C21671 * C828 + C47533 * C833) *
                C47897) *
               C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C944 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C945 +
           ((C26207 + C26206) * C15953 +
            (C21840 * C10353 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C945 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C10353) * C47895 +
            (C26211 + C26210) * C15953) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C944 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C945 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            C26404 * C47897) *
               C15953 +
           (C26204 + C26205) * C47895) *
              C47606 * C1012 -
          ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
              C1013 +
          ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
              C1014 -
          ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
              C1015 +
          ((C27118 + C27117) * C15953 +
           (C22561 * C10353 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C1666 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C1667 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C27265 + C27266) * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C26883 + C26884) * C47895) *
               C1667 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C1666 -
           (((C21671 * C2229 - C21672 * C2225 - C21671 * C2230 +
              C47533 * C2234) *
                 C47897 +
             C23525 * C10353) *
                C47895 +
            ((C21671 * C1854 - C21672 * C1847 - C21671 * C1855 +
              C47533 * C1865) *
                 C47897 +
             C26407 * C10353) *
                C15953) *
               C47880) *
              C47588 * C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C1666 -
           ((C26885 + C26886) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C1667 +
           ((C26410 * C10353 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C15953 +
            (C26409 * C10353 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C1666 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C1667 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C27265 + C27266) * C47895) *
               C47880) *
              C47916 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C1667 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C1666 -
           ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C47880) *
              C47904 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C1666 -
           ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) * C1667 +
           ((C27270 + C27269) * C15953 +
            (C22705 * C10353 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C3096 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C47845 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
               C47651) *
              C47565 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C3096) *
               C47845 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C3096 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47651) *
              C47574 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C10353 +
              C26408 * C47897) *
                 C15953 +
             (C26212 + C26213) * C47895) *
                C3096 -
            ((C26885 + C26886) * C47895 +
             (C26410 * C47897 + C26408 * C10353) * C15953) *
                C47693) *
               C47845 +
           (((C26886 + C26885) * C15953 +
             (C22364 * C10353 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47689 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47696 +
            ((C26405 * C10353 + C28127 * C47897) * C15953 +
             (C27265 + C27266) * C47895) *
                C3604) *
               C47845 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47696 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47689 -
            ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C3604) *
               C47651) *
              C2442 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47696 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47689 -
            ((C28332 + C28328) * C47895 +
             (C28469 * C47897 + C26407 * C10353) * C15953) *
                C3604) *
               C47845 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47689 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) * C47696 +
            ((C28328 + C28332) * C15953 +
             (C23524 * C10353 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C3096 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C47916 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
               C47904 +
           (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C3096 -
            ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) *
                C47693) *
               C47877) *
              C2442 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C3096) *
               C47916 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C3096 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47904 +
           (((C27598 + C27597) * C15953 +
             (C22968 * C10353 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C3096 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C47588 * C47922 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C26883 + C26884) * C47895) *
               C47693 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C3096) *
              C47588 * C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C3096 -
           ((C26885 + C26886) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C47693) *
              C47588 * C47902 +
          (((C26686 * C10353 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C15953 +
            (C26548 * C10353 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C26549 + C26541) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47924 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47921 +
           ((C26405 * C10353 + C28127 * C47897) * C15953 +
            (C27265 + C27266) * C47895) *
               C47912 -
           ((C28600 + C28601) * C47895 +
            (C28129 * C47897 + C28127 * C10353) * C15953) *
               C47893) *
              C47588 * C2442 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C26883 + C26884) * C47895) *
               C47921 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47924 -
           ((C28332 + C28328) * C47895 +
            (C28469 * C47897 + C26407 * C10353) * C15953) *
               C47912 +
           ((C28469 * C10353 + (C21671 * C1860 - C21672 * C1850 -
                                C21671 * C1861 + C47533 * C1868) *
                                   C47897) *
                C15953 +
            (C28331 * C10353 + (C21671 * C6813 - C21672 * C6810 -
                                C21671 * C6814 + C47533 * C6816) *
                                   C47897) *
                C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47689 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47696 +
           ((C26405 * C10353 + C28127 * C47897) * C15953 +
            (C27265 + C27266) * C47895) *
               C3604) *
              C47588 * C47565 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C26883 + C26884) * C47895) *
               C47696 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47689 -
           ((C28332 + C28328) * C47895 +
            (C28469 * C47897 + C26407 * C10353) * C15953) *
               C3604) *
              C47588 * C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47689 -
           ((C26885 + C26886) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C47696 +
           ((C26410 * C10353 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C15953 +
            (C26409 * C10353 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C3096 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C47588 * C47922 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C26883 + C26884) * C47895) *
               C47693 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C3096) *
              C47588 * C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C3096 -
           ((C26885 + C26886) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C47693) *
              C47588 * C47902 +
          (((C26686 * C10353 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C15953 +
            (C26548 * C10353 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C26549 + C26541) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C3096 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C47916 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C3096) *
               C47904 +
           (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C3096 -
            ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) *
                C47693) *
               C47877) *
              C2442 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C3096) *
               C47916 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C3096 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C47904 +
           (((C27598 + C27597) * C15953 +
             (C22968 * C10353 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47845 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47651) *
              C556 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47651 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47845) *
              C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C47845 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47651) *
              C558 +
          (((C26541 + C26549) * C15953 +
            (C22077 * C10353 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C26549 + C26541) * C47895 +
            ((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                 C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C1286 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C1287 +
           ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
               C1288 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
               C47887) *
              C47831 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C1287 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C1286 -
           ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) * C47606 *
               C1288 +
           ((C27402 + C27401) * C15953 +
            (C22814 * C10353 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47846 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C47845 +
           (((C26882 + C26881) * C15953 +
             (C22360 * C10353 + C22703 * C47897) * C47895) *
                C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) *
                C47846) *
               C47651) *
              C260 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47846) *
               C47845 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47846 -
            ((C23524 * C47897 + C22363 * C10353) * C47895 +
             (C26884 + C26883) * C15953) *
                C47693) *
               C47651) *
              C261 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C10353 +
              C26408 * C47897) *
                 C15953 +
             (C26212 + C26213) * C47895) *
                C47846 -
            ((C26885 + C26886) * C47895 +
             (C26410 * C47897 + C26408 * C10353) * C15953) *
                C47693) *
               C47845 +
           (((C26886 + C26885) * C15953 +
             (C22364 * C10353 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47846 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C1286 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47846) *
              C1287 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47846 -
           ((C27729 + C27730) * C47895 + (C27268 + C27267) * C15953) * C47693) *
              C1288 +
          (((C27730 + C27729) * C15953 +
            (C23078 * C10353 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47916 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47904 +
           ((C26207 + C26206) * C15953 +
            (C21840 * C10353 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C260 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47904 -
           ((C26209 + C26208) * C47895 +
            ((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47916 -
           ((C22968 * C47897 + C21843 * C10353) * C47895 +
            (C26211 + C26210) * C15953) *
               C47606 * C47877) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C47916 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47904 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47897) *
               C15953 +
           (C21838 * C10353 + C22361 * C47897) * C47895) *
              C47606 * C47588 * C108 -
          ((C22362 * C47897 + C21841 * C10353) * C47895 +
           ((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47897 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C10353) *
               C15953) *
              C47606 * C47588 * C109 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C10353 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47897) *
               C15953 +
           (C21844 * C10353 + C22365 * C47897) * C47895) *
              C47606 * C47588 * C110 -
          (((C21671 * C825 - C21672 * C817 - C21671 * C826 + C47533 * C832) *
                C47897 +
            C22076 * C10353) *
               C47895 +
           ((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                C47897 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C10353) *
               C15953) *
              C47606 * C47588 * C111 +
          (((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                C10353 +
            (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
                C47897) *
               C15953 +
           ((C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
                C10353 +
            (C21671 * C827 - C21672 * C818 - C21671 * C828 + C47533 * C833) *
                C47897) *
               C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47917 -
           ((C22702 * C47897 + C22361 * C10353) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47906 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C22702 * C10353 + C23741 * C47897) * C47895) *
               C47880) *
              C47588 * C260 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C22362 * C10353 + C23525 * C47897) * C47895) *
               C47906 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47917 -
           (((C21671 * C2229 - C21672 * C2225 - C21671 * C2230 +
              C47533 * C2234) *
                 C47897 +
             C23525 * C10353) *
                C47895 +
            ((C21671 * C1854 - C21672 * C1847 - C21671 * C1855 +
              C47533 * C1865) *
                 C47897 +
             C26407 * C10353) *
                C15953) *
               C47880) *
              C47588 * C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47917 -
           ((C26409 * C47897 + C22365 * C10353) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C47906 +
           ((C26410 * C10353 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C15953 +
            (C26409 * C10353 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C944 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C945 +
           ((C26207 + C26206) * C15953 +
            (C21840 * C10353 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C945 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C10353) * C47895 +
            (C26211 + C26210) * C15953) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C944 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C945 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            C26404 * C47897) *
               C15953 +
           (C26204 + C26205) * C47895) *
              C47606 * C1012 -
          ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
              C1013 +
          ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
              C1014 -
          ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
              C1015 +
          ((C27118 + C27117) * C15953 +
           (C22561 * C10353 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47917 -
           ((C26881 + C26882) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47906 +
           ((C26405 * C10353 + (C21671 * C1856 - C21672 * C1848 -
                                C21671 * C1857 + C47533 * C1866) *
                                   C47897) *
                C15953 +
            (C27265 + C27266) * C47895) *
               C47880) *
              C944 +
          (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47906 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47917 -
           ((C27269 + C27270) * C47895 + (C27266 + C27265) * C15953) * C47880) *
              C945 +
          (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47917 -
           ((C22705 * C47897 + C22704 * C10353) * C47895 +
            (C27268 + C27267) * C15953) *
               C47906 +
           ((C27270 + C27269) * C15953 +
            (C22705 * C10353 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47846 -
           ((C22702 * C47897 + C22361 * C10353) * C47895 +
            (C26405 * C47897 + C26404 * C10353) * C15953) *
               C47693) *
              C47588 * C556 +
          (((C26406 * C10353 + C26407 * C47897) * C15953 +
            (C22362 * C10353 + C23525 * C47897) * C47895) *
               C47693 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47846) *
              C47588 * C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47846 -
           ((C26409 * C47897 + C22365 * C10353) * C47895 +
            (C26410 * C47897 + C26408 * C10353) * C15953) *
               C47693) *
              C47588 * C558 +
          (((C26686 * C10353 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C15953 +
            (C26548 * C10353 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C26549 + C26541) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C10353) *
                C15953) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C10353 +
              C26404 * C47897) *
                 C15953 +
             (C26204 + C26205) * C47895) *
                C47846 -
            ((C26881 + C26882) * C47895 +
             (C26405 * C47897 + C26404 * C10353) * C15953) *
                C47693) *
               C944 +
           (((C26882 + C26881) * C15953 + (C27267 + C27268) * C47895) * C47693 -
            ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) *
                C47846) *
               C945 +
           (((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47846 -
            ((C22705 * C47897 + C22704 * C10353) * C47895 +
             (C27268 + C27267) * C15953) *
                C47693) *
               C47877) *
              C47831 +
          ((((C26406 * C10353 + C26407 * C47897) * C15953 +
             (C26883 + C26884) * C47895) *
                C47693 -
            ((C26209 + C26208) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C10353) *
                 C15953) *
                C47846) *
               C944 +
           (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47846 -
            ((C27597 + C27598) * C47895 + (C26884 + C26883) * C15953) *
                C47693) *
               C945 +
           (((C27598 + C27597) * C15953 +
             (C22968 * C10353 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C27401 + C27402) * C47895 + (C26211 + C26210) * C15953) *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                C47897) *
               C15953 +
           (C21838 * C10353 + C22361 * C47897) * C47895) *
              C47606 * C47588 * C108 -
          ((C22362 * C47897 + C21841 * C10353) * C47895 +
           ((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                C47897 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C10353) *
               C15953) *
              C47606 * C47588 * C109 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C10353 +
            (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                C47897) *
               C15953 +
           (C21844 * C10353 + C22365 * C47897) * C47895) *
              C47606 * C47588 * C110 -
          (((C21671 * C825 - C21672 * C817 - C21671 * C826 + C47533 * C832) *
                C47897 +
            C22076 * C10353) *
               C47895 +
           ((C21671 * C438 - C21672 * C422 - C21671 * C439 + C47533 * C452) *
                C47897 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C10353) *
               C15953) *
              C47606 * C47588 * C111 +
          (((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                C10353 +
            (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
                C47897) *
               C15953 +
           ((C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
                C10353 +
            (C21671 * C827 - C21672 * C818 - C21671 * C828 + C47533 * C833) *
                C47897) *
               C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             (C21671 * C430 - C21672 * C418 - C21671 * C431 + C47533 * C448) *
                 C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C47916 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C47904 +
           ((C26207 + C26206) * C15953 +
            (C21840 * C10353 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C260 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C47904 -
           ((C26209 + C26208) * C47895 +
            ((C21671 * C428 - C21672 * C417 - C21671 * C429 + C47533 * C447) *
                 C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C47916 -
           ((C22968 * C47897 + C21843 * C10353) * C47895 +
            (C26211 + C26210) * C15953) *
               C47606 * C47877) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             (C21671 * C426 - C21672 * C416 - C21671 * C427 + C47533 * C446) *
                 C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C47916 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C47904 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C10353 +
             C26404 * C47897) *
                C15953 +
            (C26204 + C26205) * C47895) *
               C47606 * C944 -
           ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
               C945 +
           ((C26207 + C26206) * C15953 +
            (C21840 * C10353 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C26208 + C26209) * C15953 + (C26210 + C26211) * C47895) * C47606 *
               C945 -
           ((C26209 + C26208) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C10353) *
                C15953) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C10353) * C47895 +
            (C26211 + C26210) * C15953) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C10353 +
             C26408 * C47897) *
                C15953 +
            (C26212 + C26213) * C47895) *
               C47606 * C944 -
           ((C26214 + C26215) * C47895 + (C26213 + C26212) * C15953) * C47606 *
               C945 +
           ((C26215 + C26214) * C15953 +
            (C21846 * C10353 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C10353 +
            C26404 * C47897) *
               C15953 +
           (C26204 + C26205) * C47895) *
              C47606 * C1012 -
          ((C26206 + C26207) * C47895 + (C26205 + C26204) * C15953) * C47606 *
              C1013 +
          ((C26207 + C26206) * C15953 + (C27115 + C27116) * C47895) * C47606 *
              C1014 -
          ((C27117 + C27118) * C47895 + (C27116 + C27115) * C15953) * C47606 *
              C1015 +
          ((C27118 + C27117) * C15953 +
           (C22561 * C10353 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C47647 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47654 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C2702) *
              C47565 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47654 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47647 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C2702) *
              C47574 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C47647 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47654 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47846 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C47647 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47846) *
               C47654 +
           (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
                C47846 -
            ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
                C47693) *
               C2702) *
              C2442 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47846) *
               C47647 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47846 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47654 +
           (((C17641 + C17640) * C31647 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
                C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C47923 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47919 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47909 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C47606 * C47887) *
              C2442 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47919 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47923 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47909 +
           ((C17433 + C17432) * C31647 +
            (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 + C15951 * C1554 +
             C15957 * C1551 - C15958 * C1546 - C15957 * C1552 +
             C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C2334 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47651) *
              C47922 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47651 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C2334) *
              C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C2334 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47651) *
              C47902 +
          (((C16478 + C16479) * C31647 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C32299 + C32298) * C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47917 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47906 +
            ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
                C47880) *
               C2334 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47906 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47917 -
            ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
                C47880) *
               C47651) *
              C2442 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47906 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47917 -
            ((C34060 + C34061) * C47897 + (C32021 + C32020) * C31647) * C47795 *
                C47880) *
               C2334 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47917 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47906 +
            ((C18367 + C18366) * C31647 +
             (C15955 * C2229 - C15956 * C2225 - C15955 * C2230 +
              C15951 * C2234 + C15957 * C2231 - C15958 * C2226 -
              C15957 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47846 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C2334 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47846) *
               C47651) *
              C47565 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47846) *
               C2334 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47846 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47651) *
              C47574 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C31647 +
             (C32022 + C32023) * C47897) *
                C47795 * C47846 -
            ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
                C47693) *
               C2334 +
           (((C16845 + C16844) * C31647 +
             (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 +
              C15951 * C1179 + C15957 * C2017 - C15958 * C2016 -
              C15957 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
                C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C2334 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47651) *
              C47922 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47651 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C2334) *
              C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C2334 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47651) *
              C47902 +
          (((C16478 + C16479) * C31647 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C32299 + C32298) * C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C47923 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47919 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47909 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C47606 * C47887) *
              C2442 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47919 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47923 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47909 +
           ((C17433 + C17432) * C31647 +
            (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 + C15951 * C1554 +
             C15957 * C1551 - C15958 * C1546 - C15957 * C1552 +
             C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C3096 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C47647 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C3096) *
               C47654 +
           (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
                C3096 -
            ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
                C47693) *
               C2702) *
              C47831 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C3096) *
               C47647 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C3096 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47654 +
           (((C17641 + C17640) * C31647 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
                C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47689 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47696 +
           ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
               C3604) *
              C47647 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47696 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47689 -
           ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
               C3604) *
              C47654 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47689 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C47696 +
           ((C17289 + C17288) * C31647 +
            (C15955 * C7287 - C15956 * C7285 - C15955 * C7288 + C15951 * C7291 +
             C15957 * C7289 - C15958 * C7286 - C15957 * C7290 +
             C47864 * C7292) *
                C47897) *
               C47795 * C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C3096 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C47923 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47693 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C3096) *
              C47919 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C3096 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C47693) *
              C47909 +
          (((C17785 + C17784) * C31647 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C3096 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C2334 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C3096) *
               C47651) *
              C47913 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C3096) *
               C2334 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C3096 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47651) *
              C47900 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C31647 +
             (C32022 + C32023) * C47897) *
                C47795 * C3096 -
            ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
                C47693) *
               C2334 +
           (((C16845 + C16844) * C31647 +
             (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 +
              C15951 * C1179 + C15957 * C2017 - C15958 * C2016 -
              C15957 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47924 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47921 +
           ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
               C47912 -
           ((C33722 + C33723) * C47897 + (C33721 + C33720) * C31647) * C47795 *
               C47893) *
              C2334 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47921 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47924 -
           ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
               C47912 +
           ((C18641 + C18640) * C31647 +
            (C15955 * C6811 - C15956 * C6809 - C15955 * C6812 + C15951 * C6815 +
             C15957 * C6813 - C15958 * C6810 - C15957 * C6814 +
             C47864 * C6816) *
                C47897) *
               C47795 * C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47689 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47696 +
            ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
                C3604) *
               C2334 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47696 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47689 -
            ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
                C3604) *
               C47651) *
              C47831 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47696 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47689 -
            ((C34060 + C34061) * C47897 + (C32021 + C32020) * C31647) * C47795 *
                C3604) *
               C2334 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47689 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47696 +
            ((C18367 + C18366) * C31647 +
             (C15955 * C2229 - C15956 * C2225 - C15955 * C2230 +
              C15951 * C2234 + C15957 * C2231 - C15958 * C2226 -
              C15957 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C3096 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C2334 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C3096) *
               C47651) *
              C47913 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C3096) *
               C2334 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C3096 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47651) *
              C47900 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C31647 +
             (C32022 + C32023) * C47897) *
                C47795 * C3096 -
            ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
                C47693) *
               C2334 +
           (((C16845 + C16844) * C31647 +
             (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 +
              C15951 * C1179 + C15957 * C2017 - C15958 * C2016 -
              C15957 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C3096 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C47923 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47693 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C3096) *
              C47919 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C3096 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C47693) *
              C47909 +
          (((C17785 + C17784) * C31647 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C1286 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C1287 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C1288 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C47606 * C47887) *
              C47831 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C1287 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C1286 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C1288 +
           ((C17433 + C17432) * C31647 +
            (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 + C15951 * C1554 +
             C15957 * C1551 - C15958 * C1546 - C15957 * C1552 +
             C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C47845 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47651) *
              C556 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47651 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47845) *
              C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C47845 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47651) *
              C558 +
          (((C16478 + C16479) * C31647 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454 +
             C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452) *
                C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C1666 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C1667 +
            ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
                C47880) *
               C47845 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C1667 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C1666 -
            ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
                C47880) *
               C47651) *
              C47831 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C1667 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C1666 -
            ((C15957 * C1852 - C15958 * C1846 - C15957 * C1853 +
              C47864 * C1864 + C15955 * C1854 - C15956 * C1847 -
              C15955 * C1855 + C15951 * C1865) *
                 C47897 +
             (C32021 + C32020) * C31647) *
                C47795 * C47880) *
               C47845 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C1666 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C1667 +
            ((C18367 + C18366) * C31647 +
             (C15955 * C2229 - C15956 * C2225 - C15955 * C2230 +
              C15951 * C2234 + C15957 * C2231 - C15958 * C2226 -
              C15957 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47846 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C1286 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47693 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47846) *
              C1287 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47846 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C47693) *
              C1288 +
          (((C17785 + C17784) * C31647 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47846 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C47845 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47846) *
               C47651) *
              C260 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47846) *
               C47845 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47846 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47651) *
              C261 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C31647 +
             (C32022 + C32023) * C47897) *
                C47795 * C47846 -
            ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
                C47693) *
               C47845 +
           (((C16845 + C16844) * C31647 +
             (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 +
              C15951 * C1179 + C15957 * C2017 - C15958 * C2016 -
              C15957 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C2118 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C2119 +
           ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
               C2120 -
           ((C33722 + C33723) * C47897 + (C33721 + C33720) * C31647) * C47795 *
               C47893) *
              C47845 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C2119 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C2118 -
           ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
               C2120 +
           ((C18641 + C18640) * C31647 +
            (C15955 * C6811 - C15956 * C6809 - C15955 * C6812 + C15951 * C6815 +
             C15957 * C6813 - C15958 * C6810 - C15957 * C6814 +
             C47864 * C6816) *
                C47897) *
               C47795 * C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
                C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                   C31647 +
               (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
                C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447) *
                   C47897) *
                  C47795 * C47606 * C47588 * C108 -
              ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
                C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447) *
                   C47897 +
               (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
                C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                   C31647) *
                  C47795 * C47606 * C47588 * C109 +
              ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
                C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                   C31647 +
               (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
                C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452) *
                   C47897) *
                  C47795 * C47606 * C47588 * C110 -
              ((C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454 +
                C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452) *
                   C47897 +
               (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
                C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                   C31647) *
                  C47795 * C47606 * C47588 * C111 +
              ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
                C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
                   C31647 +
               (C15955 * C442 - C15956 * C424 - C15955 * C443 + C15951 * C454 +
                C15957 * C665 - C15958 * C664 - C15957 * C666 + C47864 * C667) *
                   C47897) *
                  C47795 * C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
                 C15957 * C128 - C15958 * C120 - C15957 * C129 +
                 C47864 * C141) *
                    C31647 +
                (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
                 C15957 * C428 - C15958 * C417 - C15957 * C429 +
                 C47864 * C447) *
                    C47897) *
                   C47795 * C47606 * C47916 -
               ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) *
                   C47795 * C47606 * C47904 +
               ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) *
                   C47795 * C47606 * C47877) *
                  C260 +
              (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) *
                   C47795 * C47606 * C47904 -
               ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
                 C15955 * C428 - C15956 * C417 - C15955 * C429 +
                 C15951 * C447) *
                    C47897 +
                (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
                 C15955 * C128 - C15956 * C120 - C15955 * C129 +
                 C15951 * C141) *
                    C31647) *
                   C47795 * C47606 * C47916 -
               ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) *
                   C47795 * C47606 * C47877) *
                  C261 +
              (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
                 C15957 * C132 - C15958 * C122 - C15957 * C133 +
                 C47864 * C143) *
                    C31647 +
                (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
                 C15957 * C438 - C15958 * C422 - C15957 * C439 +
                 C47864 * C452) *
                    C47897) *
                   C47795 * C47606 * C47916 -
               ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) *
                   C47795 * C47606 * C47904 +
               ((C16189 + C16188) * C31647 +
                (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 +
                 C15951 * C1182 + C15957 * C1443 - C15958 * C1442 -
                 C15957 * C1444 + C47864 * C1445) *
                    C47897) *
                   C47795 * C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47917 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47906 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C260 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47906 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47917 -
           ((C15957 * C1852 - C15958 * C1846 - C15957 * C1853 + C47864 * C1864 +
             C15955 * C1854 - C15956 * C1847 - C15955 * C1855 +
             C15951 * C1865) *
                C47897 +
            (C32021 + C32020) * C31647) *
               C47795 * C47880) *
              C47588 * C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47917 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C47906 +
           ((C32025 + C32024) * C31647 +
            (C15955 * C1852 - C15956 * C1846 - C15955 * C1853 + C15951 * C1864 +
             C15957 * C2123 - C15958 * C2122 - C15957 * C2124 +
             C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C944 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C945 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C945 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C944 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C944 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C945 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C32014 + C32015) * C47897) *
              C47795 * C47606 * C1012 -
          ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
              C47606 * C1013 +
          ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
              C47606 * C1014 -
          ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
              C47606 * C1015 +
          ((C17101 + C17100) * C31647 +
           (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
            C15957 * C6417 - C15958 * C6414 - C15957 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47917 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47906 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C944 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47906 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47917 -
           ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
               C47880) *
              C945 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47917 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C47906 +
           ((C17289 + C17288) * C31647 +
            (C15955 * C7287 - C15956 * C7285 - C15955 * C7288 + C15951 * C7291 +
             C15957 * C7289 - C15958 * C7286 - C15957 * C7290 +
             C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C1666 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C1667 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47913 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C1667 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C1666 -
           ((C15957 * C1852 - C15958 * C1846 - C15957 * C1853 + C47864 * C1864 +
             C15955 * C1854 - C15956 * C1847 - C15955 * C1855 +
             C15951 * C1865) *
                C47897 +
            (C32021 + C32020) * C31647) *
               C47795 * C47880) *
              C47588 * C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C1666 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C1667 +
           ((C32025 + C32024) * C31647 +
            (C15955 * C1852 - C15956 * C1846 - C15955 * C1853 + C15951 * C1864 +
             C15957 * C2123 - C15958 * C2122 - C15957 * C2124 +
             C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C1666 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C1667 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47916 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C1667 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C1666 -
           ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
               C47880) *
              C47904 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C1666 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C1667 +
           ((C17289 + C17288) * C31647 +
            (C15955 * C7287 - C15956 * C7285 - C15955 * C7288 + C15951 * C7291 +
             C15957 * C7289 - C15958 * C7286 - C15957 * C7290 +
             C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C32014 + C32015) * C47897) *
              C47795 * C1841 -
          ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
              C1842 +
          ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
              C1843 -
          ((C33722 + C33723) * C47897 + (C33721 + C33720) * C31647) * C47795 *
              C1844 +
          ((C33723 + C33722) * C31647 +
           (C15955 * C12403 - C15956 * C12401 - C15955 * C12404 +
            C15951 * C12407 + C15957 * C12405 - C15958 * C12402 -
            C15957 * C12406 + C47864 * C12408) *
               C47897) *
              C47795 * C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47846 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C944 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47846) *
               C945 +
           (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
                C47846 -
            ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
                C47693) *
               C47877) *
              C47831 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47846) *
               C944 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47846 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C945 +
           (((C17641 + C17640) * C31647 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47846 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C47588 * C556 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47693 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47846) *
              C47588 * C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47846 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C47693) *
              C47588 * C558 +
          (((C32298 + C32299) * C31647 +
            (C15955 * C440 - C15956 * C423 - C15955 * C441 + C15951 * C453 +
             C15957 * C444 - C15958 * C425 - C15957 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C32299 + C32298) * C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C2118 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C2119 +
           ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
               C2120 -
           ((C33722 + C33723) * C47897 + (C33721 + C33720) * C31647) * C47795 *
               C47893) *
              C47588 * C47831 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C2119 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C2118 -
           ((C34060 + C34061) * C47897 + (C32021 + C32020) * C31647) * C47795 *
               C2120 +
           ((C34061 + C34060) * C31647 +
            (C15955 * C1860 - C15956 * C1850 - C15955 * C1861 + C15951 * C1868 +
             C15957 * C1862 - C15958 * C1851 - C15957 * C1863 +
             C47864 * C1869) *
                C47897) *
               C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
             C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47904 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47877) *
              C260 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47904 -
           ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
             C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447) *
                C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47916 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
             C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47904 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
            C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447) *
               C47897) *
              C47795 * C47606 * C47588 * C108 -
          ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
            C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447) *
               C47897 +
           (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
            C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
               C31647) *
              C47795 * C47606 * C47588 * C109 +
          ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
            C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
               C31647 +
           (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
            C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452) *
               C47897) *
              C47795 * C47606 * C47588 * C110 -
          ((C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454 +
            C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452) *
               C47897 +
           (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
            C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
               C31647) *
              C47795 * C47606 * C47588 * C111 +
          ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
            C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
               C31647 +
           (C15955 * C442 - C15956 * C424 - C15955 * C443 + C15951 * C454 +
            C15957 * C665 - C15958 * C664 - C15957 * C666 + C47864 * C667) *
               C47897) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C944 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C945 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C945 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C944 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C944 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C945 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C32014 + C32015) * C47897) *
              C47795 * C47606 * C1012 -
          ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
              C47606 * C1013 +
          ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
              C47606 * C1014 -
          ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
              C47606 * C1015 +
          ((C17101 + C17100) * C31647 +
           (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
            C15957 * C6417 - C15958 * C6414 - C15957 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C1666 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C1667 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47913 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C1667 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C1666 -
           ((C15957 * C1852 - C15958 * C1846 - C15957 * C1853 + C47864 * C1864 +
             C15955 * C1854 - C15956 * C1847 - C15955 * C1855 +
             C15951 * C1865) *
                C47897 +
            (C32021 + C32020) * C31647) *
               C47795 * C47880) *
              C47588 * C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C1666 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C1667 +
           ((C32025 + C32024) * C31647 +
            (C15955 * C1852 - C15956 * C1846 - C15955 * C1853 + C15951 * C1864 +
             C15957 * C2123 - C15958 * C2122 - C15957 * C2124 +
             C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C1666 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C1667 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47916 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C1667 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C1666 -
           ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
               C47880) *
              C47904 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C1666 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C1667 +
           ((C17289 + C17288) * C31647 +
            (C15955 * C7287 - C15956 * C7285 - C15955 * C7288 + C15951 * C7291 +
             C15957 * C7289 - C15958 * C7286 - C15957 * C7290 +
             C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C3096 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C47845 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C3096) *
               C47651) *
              C47565 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C3096) *
               C47845 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C3096 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47651) *
              C47574 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C31647 +
             (C32022 + C32023) * C47897) *
                C47795 * C3096 -
            ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
                C47693) *
               C47845 +
           (((C16845 + C16844) * C31647 +
             (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 +
              C15951 * C1179 + C15957 * C2017 - C15958 * C2016 -
              C15957 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
                C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47689 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47696 +
            ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
                C3604) *
               C47845 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47696 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47689 -
            ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
                C3604) *
               C47651) *
              C2442 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47696 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47689 -
            ((C34060 + C34061) * C47897 + (C32021 + C32020) * C31647) * C47795 *
                C3604) *
               C47845 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47689 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47696 +
            ((C18367 + C18366) * C31647 +
             (C15955 * C2229 - C15956 * C2225 - C15955 * C2230 +
              C15951 * C2234 + C15957 * C2231 - C15958 * C2226 -
              C15957 * C2232 + C47864 * C2235) *
                 C47897) *
                C47795 * C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C3096 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C47916 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C3096) *
               C47904 +
           (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
                C3096 -
            ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
                C47693) *
               C47877) *
              C2442 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C3096) *
               C47916 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C3096 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47904 +
           (((C17641 + C17640) * C31647 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C3096 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C47588 * C47922 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47693 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C3096) *
              C47588 * C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C3096 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C47693) *
              C47588 * C47902 +
          (((C32298 + C32299) * C31647 +
            (C15955 * C440 - C15956 * C423 - C15955 * C441 + C15951 * C453 +
             C15957 * C444 - C15958 * C425 - C15957 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C32299 + C32298) * C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47924 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47921 +
           ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
               C47912 -
           ((C33722 + C33723) * C47897 + (C33721 + C33720) * C31647) * C47795 *
               C47893) *
              C47588 * C2442 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47921 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47924 -
           ((C34060 + C34061) * C47897 + (C32021 + C32020) * C31647) * C47795 *
               C47912 +
           ((C34061 + C34060) * C31647 +
            (C15955 * C1860 - C15956 * C1850 - C15955 * C1861 + C15951 * C1868 +
             C15957 * C1862 - C15958 * C1851 - C15957 * C1863 +
             C47864 * C1869) *
                C47897) *
               C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47689 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47696 +
           ((C32017 + C32016) * C31647 + (C33720 + C33721) * C47897) * C47795 *
               C3604) *
              C47588 * C47565 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47696 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47689 -
           ((C34060 + C34061) * C47897 + (C32021 + C32020) * C31647) * C47795 *
               C3604) *
              C47588 * C47574 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47689 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C47696 +
           ((C32025 + C32024) * C31647 +
            (C15955 * C1852 - C15956 * C1846 - C15955 * C1853 + C15951 * C1864 +
             C15957 * C2123 - C15958 * C2122 - C15957 * C2124 +
             C47864 * C2125) *
                C47897) *
               C47795 * C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C3096 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C47588 * C47922 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47693 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C3096) *
              C47588 * C47915 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C3096 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C47693) *
              C47588 * C47902 +
          (((C32298 + C32299) * C31647 +
            (C15955 * C440 - C15956 * C423 - C15955 * C441 + C15951 * C453 +
             C15957 * C444 - C15958 * C425 - C15957 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C32299 + C32298) * C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C3096 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C47916 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C3096) *
               C47904 +
           (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
                C3096 -
            ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
                C47693) *
               C47877) *
              C2442 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C3096) *
               C47916 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C3096 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47904 +
           (((C17641 + C17640) * C31647 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C47845 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47651) *
              C556 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47651 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47845) *
              C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C47845 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47651) *
              C558 +
          (((C16478 + C16479) * C31647 +
            (C15955 * C825 - C15956 * C817 - C15955 * C826 + C15951 * C832 +
             C15957 * C827 - C15958 * C818 - C15957 * C828 + C47864 * C833) *
                C47897) *
               C47795 * C47606 * C47651 -
           ((C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454 +
             C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452) *
                C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C1286 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C1287 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C1288 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C47606 * C47887) *
              C47831 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C1287 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C1286 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C1288 +
           ((C17433 + C17432) * C31647 +
            (C15955 * C1549 - C15956 * C1545 - C15955 * C1550 + C15951 * C1554 +
             C15957 * C1551 - C15958 * C1546 - C15957 * C1552 +
             C47864 * C1555) *
                C47897) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47846 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C47845 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47846) *
               C47651) *
              C260 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47846) *
               C47845 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47846 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C47651) *
              C261 +
          ((((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
              C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                 C31647 +
             (C32022 + C32023) * C47897) *
                C47795 * C47846 -
            ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
                C47693) *
               C47845 +
           (((C16845 + C16844) * C31647 +
             (C15955 * C1161 - C15956 * C1152 - C15955 * C1162 +
              C15951 * C1179 + C15957 * C2017 - C15958 * C2016 -
              C15957 * C2018 + C47864 * C2019) *
                 C47897) *
                C47795 * C47693 -
            ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47846 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C1286 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47693 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47846) *
              C1287 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47846 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C47693) *
              C1288 +
          (((C17785 + C17784) * C31647 +
            (C15955 * C5883 - C15956 * C5881 - C15955 * C5884 + C15951 * C5887 +
             C15957 * C5885 - C15958 * C5882 - C15957 * C5886 +
             C47864 * C5888) *
                C47897) *
               C47795 * C47693 -
           ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
             C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47904 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47877) *
              C260 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47904 -
           ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
             C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447) *
                C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47916 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
             C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47904 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
            C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447) *
               C47897) *
              C47795 * C47606 * C47588 * C108 -
          ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
            C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447) *
               C47897 +
           (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
            C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
               C31647) *
              C47795 * C47606 * C47588 * C109 +
          ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
            C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
               C31647 +
           (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
            C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452) *
               C47897) *
              C47795 * C47606 * C47588 * C110 -
          ((C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454 +
            C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452) *
               C47897 +
           (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
            C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
               C31647) *
              C47795 * C47606 * C47588 * C111 +
          ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
            C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
               C31647 +
           (C15955 * C442 - C15956 * C424 - C15955 * C443 + C15951 * C454 +
            C15957 * C665 - C15958 * C664 - C15957 * C666 + C47864 * C667) *
               C47897) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47917 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47906 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C47588 * C260 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47906 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47917 -
           ((C15957 * C1852 - C15958 * C1846 - C15957 * C1853 + C47864 * C1864 +
             C15955 * C1854 - C15956 * C1847 - C15955 * C1855 +
             C15951 * C1865) *
                C47897 +
            (C32021 + C32020) * C31647) *
               C47795 * C47880) *
              C47588 * C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47917 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C47906 +
           ((C32025 + C32024) * C31647 +
            (C15955 * C1852 - C15956 * C1846 - C15955 * C1853 + C15951 * C1864 +
             C15957 * C2123 - C15958 * C2122 - C15957 * C2124 +
             C47864 * C2125) *
                C47897) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C944 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C945 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C945 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C944 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C944 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C945 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C32014 + C32015) * C47897) *
              C47795 * C47606 * C1012 -
          ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
              C47606 * C1013 +
          ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
              C47606 * C1014 -
          ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
              C47606 * C1015 +
          ((C17101 + C17100) * C31647 +
           (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
            C15957 * C6417 - C15958 * C6414 - C15957 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47917 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47906 +
           ((C32017 + C32016) * C31647 +
            (C15955 * C1856 - C15956 * C1848 - C15955 * C1857 + C15951 * C1866 +
             C15957 * C1854 - C15958 * C1847 - C15957 * C1855 +
             C47864 * C1865) *
                C47897) *
               C47795 * C47880) *
              C944 +
          (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
               C47906 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47917 -
           ((C18640 + C18641) * C47897 + (C17285 + C17284) * C31647) * C47795 *
               C47880) *
              C945 +
          (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47917 -
           ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
               C47906 +
           ((C17289 + C17288) * C31647 +
            (C15955 * C7287 - C15956 * C7285 - C15955 * C7288 + C15951 * C7291 +
             C15957 * C7289 - C15958 * C7286 - C15957 * C7290 +
             C47864 * C7292) *
                C47897) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47846 -
           ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
               C47693) *
              C47588 * C556 +
          (((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
               C47693 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47846) *
              C47588 * C557 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47846 -
           ((C32024 + C32025) * C47897 + (C32023 + C32022) * C31647) * C47795 *
               C47693) *
              C47588 * C558 +
          (((C32298 + C32299) * C31647 +
            (C15955 * C440 - C15956 * C423 - C15955 * C441 + C15951 * C453 +
             C15957 * C444 - C15958 * C425 - C15957 * C445 + C47864 * C455) *
                C47897) *
               C47795 * C47693 -
           ((C32299 + C32298) * C47897 +
            (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
             C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
                C31647) *
               C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
              C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                 C31647 +
             (C32014 + C32015) * C47897) *
                C47795 * C47846 -
            ((C32016 + C32017) * C47897 + (C32015 + C32014) * C31647) * C47795 *
                C47693) *
               C944 +
           (((C16841 + C16840) * C31647 + (C17284 + C17285) * C47897) * C47795 *
                C47693 -
            ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
                C47846) *
               C945 +
           (((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
                C47846 -
            ((C17288 + C17289) * C47897 + (C17287 + C17286) * C31647) * C47795 *
                C47693) *
               C47877) *
              C47831 +
          ((((C32018 + C32019) * C31647 + (C32020 + C32021) * C47897) * C47795 *
                C47693 -
            ((C32019 + C32018) * C47897 +
             (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
              C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                 C31647) *
                C47795 * C47846) *
               C944 +
           (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
                C47846 -
            ((C18366 + C18367) * C47897 + (C16843 + C16842) * C31647) * C47795 *
                C47693) *
               C945 +
           (((C17641 + C17640) * C31647 +
             (C15955 * C1175 - C15956 * C1159 - C15955 * C1176 +
              C15951 * C1186 + C15957 * C1177 - C15958 * C1160 -
              C15957 * C1178 + C47864 * C1187) *
                 C47897) *
                C47795 * C47693 -
            ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
            C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447) *
               C47897) *
              C47795 * C47606 * C47588 * C108 -
          ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
            C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447) *
               C47897 +
           (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
            C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
               C31647) *
              C47795 * C47606 * C47588 * C109 +
          ((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
            C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
               C31647 +
           (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
            C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452) *
               C47897) *
              C47795 * C47606 * C47588 * C110 -
          ((C15957 * C442 - C15958 * C424 - C15957 * C443 + C47864 * C454 +
            C15955 * C438 - C15956 * C422 - C15955 * C439 + C15951 * C452) *
               C47897 +
           (C15957 * C134 - C15958 * C123 - C15957 * C135 + C47864 * C144 +
            C15955 * C132 - C15956 * C122 - C15955 * C133 + C15951 * C143) *
               C31647) *
              C47795 * C47606 * C47588 * C111 +
          ((C15955 * C134 - C15956 * C123 - C15955 * C135 + C15951 * C144 +
            C15957 * C136 - C15958 * C124 - C15957 * C137 + C47864 * C145) *
               C31647 +
           (C15955 * C442 - C15956 * C424 - C15955 * C443 + C15951 * C454 +
            C15957 * C665 - C15958 * C664 - C15957 * C666 + C47864 * C667) *
               C47897) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C15955 * C430 - C15956 * C418 - C15955 * C431 + C15951 * C448 +
             C15957 * C428 - C15958 * C417 - C15957 * C429 + C47864 * C447) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C47904 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47877) *
              C260 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C47904 -
           ((C15957 * C426 - C15958 * C416 - C15957 * C427 + C47864 * C446 +
             C15955 * C428 - C15956 * C417 - C15955 * C429 + C15951 * C447) *
                C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C47916 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C15955 * C426 - C15956 * C416 - C15955 * C427 + C15951 * C446 +
             C15957 * C438 - C15958 * C422 - C15957 * C439 + C47864 * C452) *
                C47897) *
               C47795 * C47606 * C47916 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C47904 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
             C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
                C31647 +
            (C32014 + C32015) * C47897) *
               C47795 * C47606 * C944 -
           ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
               C47606 * C945 +
           ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
               C47606 * C47877) *
              C47913 +
          (((C16182 + C16183) * C31647 + (C16842 + C16843) * C47897) * C47795 *
               C47606 * C945 -
           ((C32019 + C32018) * C47897 +
            (C15957 * C130 - C15958 * C121 - C15957 * C131 + C47864 * C142 +
             C15955 * C128 - C15956 * C120 - C15955 * C129 + C15951 * C141) *
                C31647) *
               C47795 * C47606 * C944 -
           ((C17640 + C17641) * C47897 + (C16185 + C16184) * C31647) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C15955 * C130 - C15956 * C121 - C15955 * C131 + C15951 * C142 +
             C15957 * C132 - C15958 * C122 - C15957 * C133 + C47864 * C143) *
                C31647 +
            (C32022 + C32023) * C47897) *
               C47795 * C47606 * C944 -
           ((C16844 + C16845) * C47897 + (C16187 + C16186) * C31647) * C47795 *
               C47606 * C945 +
           ((C16189 + C16188) * C31647 +
            (C15955 * C1167 - C15956 * C1155 - C15955 * C1168 + C15951 * C1182 +
             C15957 * C1443 - C15958 * C1442 - C15957 * C1444 +
             C47864 * C1445) *
                C47897) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15955 * C126 - C15956 * C119 - C15955 * C127 + C15951 * C140 +
            C15957 * C128 - C15958 * C120 - C15957 * C129 + C47864 * C141) *
               C31647 +
           (C32014 + C32015) * C47897) *
              C47795 * C47606 * C1012 -
          ((C16840 + C16841) * C47897 + (C16179 + C16178) * C31647) * C47795 *
              C47606 * C1013 +
          ((C16181 + C16180) * C31647 + (C17286 + C17287) * C47897) * C47795 *
              C47606 * C1014 -
          ((C17784 + C17785) * C47897 + (C17099 + C17098) * C31647) * C47795 *
              C47606 * C1015 +
          ((C17101 + C17100) * C31647 +
           (C15955 * C6415 - C15956 * C6413 - C15955 * C6416 + C15951 * C6419 +
            C15957 * C6417 - C15958 * C6414 - C15957 * C6418 + C47864 * C6420) *
               C47897) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47647 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47654 +
           ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
               C2702) *
              C47565 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47654 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47647 -
           ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47606 *
               C2702) *
              C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C47647 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47654 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47846 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C47647 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
               C47654 +
           (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47846 -
            ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
               C2702) *
              C2442 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47846) *
               C47647 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47846 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47654 +
           (((C38715 + C38714) * C4579 +
             (C22968 * C31647 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47923 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47919 +
           ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
               C47909 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
               C47887) *
              C2442 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47919 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47923 -
           ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47606 *
               C47909 +
           ((C38519 + C38518) * C4579 +
            (C22814 * C31647 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C2334 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47651) *
              C47922 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47651 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C2334) *
              C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C2334 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47651) *
              C47902 +
          (((C37672 + C37673) * C4579 +
            (C22077 * C31647 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47917 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47906 +
            ((C26405 * C31647 + C28127 * C47897) * C4579 +
             (C38382 + C38383) * C47895) *
                C47880) *
               C2334 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47906 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47917 -
            ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C47880) *
               C47651) *
              C2442 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47906 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47917 -
            ((C39416 + C39417) * C47895 +
             (C28469 * C47897 + C26407 * C31647) * C4579) *
                C47880) *
               C2334 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47917 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47906 +
            ((C39417 + C39416) * C4579 +
             (C23524 * C31647 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47846 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C2334 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
               C47651) *
              C47565 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47846) *
               C2334 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47846 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47651) *
              C47574 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C31647 +
              C26408 * C47897) *
                 C4579 +
             (C37392 + C37393) * C47895) *
                C47846 -
            ((C38002 + C38003) * C47895 +
             (C26410 * C47897 + C26408 * C31647) * C4579) *
                C47693) *
               C2334 +
           (((C38003 + C38002) * C4579 +
             (C22364 * C31647 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C2334 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47651) *
              C47922 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47651 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C2334) *
              C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C2334 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47651) *
              C47902 +
          (((C37672 + C37673) * C4579 +
            (C22077 * C31647 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47923 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47919 +
           ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
               C47909 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
               C47887) *
              C2442 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47919 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47923 -
           ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47606 *
               C47909 +
           ((C38519 + C38518) * C4579 +
            (C22814 * C31647 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C3096 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C47647 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
               C47654 +
           (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C3096 -
            ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
               C2702) *
              C47831 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C3096) *
               C47647 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C3096 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47654 +
           (((C38715 + C38714) * C4579 +
             (C22968 * C31647 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47689 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47696 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C3604) *
              C47647 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47696 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47689 -
           ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C3604) *
              C47654 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47689 -
           ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47696 +
           ((C38387 + C38386) * C4579 +
            (C22705 * C31647 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C3096 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C47923 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
              C47919 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C3096 -
           ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
              C47909 +
          (((C38847 + C38846) * C4579 +
            (C23078 * C31647 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C3096 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C2334 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
               C47651) *
              C47913 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C3096) *
               C2334 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C3096 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47651) *
              C47900 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C31647 +
              C26408 * C47897) *
                 C4579 +
             (C37392 + C37393) * C47895) *
                C3096 -
            ((C38002 + C38003) * C47895 +
             (C26410 * C47897 + C26408 * C31647) * C4579) *
                C47693) *
               C2334 +
           (((C38003 + C38002) * C4579 +
             (C22364 * C31647 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47924 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47921 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47912 -
           ((C39678 + C39679) * C47895 +
            (C28129 * C47897 + C28127 * C31647) * C4579) *
               C47893) *
              C2334 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47921 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47924 -
           ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C47912 +
           ((C39679 + C39678) * C4579 +
            (C23740 * C31647 + (C21671 * C23362 - C21672 * C23361 -
                                C21671 * C23363 + C47533 * C23364) *
                                   C47897) *
                C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47689 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47696 +
            ((C26405 * C31647 + C28127 * C47897) * C4579 +
             (C38382 + C38383) * C47895) *
                C3604) *
               C2334 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47696 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47689 -
            ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C3604) *
               C47651) *
              C47831 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47696 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47689 -
            ((C39416 + C39417) * C47895 +
             (C28469 * C47897 + C26407 * C31647) * C4579) *
                C3604) *
               C2334 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47689 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47696 +
            ((C39417 + C39416) * C4579 +
             (C23524 * C31647 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C3096 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C2334 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
               C47651) *
              C47913 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C3096) *
               C2334 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C3096 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47651) *
              C47900 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C31647 +
              C26408 * C47897) *
                 C4579 +
             (C37392 + C37393) * C47895) *
                C3096 -
            ((C38002 + C38003) * C47895 +
             (C26410 * C47897 + C26408 * C31647) * C4579) *
                C47693) *
               C2334 +
           (((C38003 + C38002) * C4579 +
             (C22364 * C31647 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C3096 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C47923 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
              C47919 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C3096 -
           ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
              C47909 +
          (((C38847 + C38846) * C4579 +
            (C23078 * C31647 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C1286 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C1287 +
           ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
               C1288 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
               C47887) *
              C47831 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C1287 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C1286 -
           ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47606 *
               C1288 +
           ((C38519 + C38518) * C4579 +
            (C22814 * C31647 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47845 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47651) *
              C556 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47651 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47845) *
              C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C47845 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47651) *
              C558 +
          (((C37672 + C37673) * C4579 +
            (C22077 * C31647 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C1666 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C1667 +
            ((C26405 * C31647 + C28127 * C47897) * C4579 +
             (C38382 + C38383) * C47895) *
                C47880) *
               C47845 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C1667 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C1666 -
            ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C47880) *
               C47651) *
              C47831 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C1667 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C1666 -
            ((C39416 + C39417) * C47895 +
             (C28469 * C47897 + C26407 * C31647) * C4579) *
                C47880) *
               C47845 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C1666 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C1667 +
            ((C39417 + C39416) * C4579 +
             (C23524 * C31647 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47846 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C1286 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
              C1287 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47846 -
           ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
              C1288 +
          (((C38847 + C38846) * C4579 +
            (C23078 * C31647 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47846 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C47845 +
           (((C37999 + C37998) * C4579 +
             (C22360 * C31647 + C22703 * C47897) * C47895) *
                C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
               C47651) *
              C260 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47846) *
               C47845 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47846 -
            ((C23524 * C47897 + C22363 * C31647) * C47895 +
             (C38001 + C38000) * C4579) *
                C47693) *
               C47651) *
              C261 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C31647 +
              C26408 * C47897) *
                 C4579 +
             (C37392 + C37393) * C47895) *
                C47846 -
            ((C38002 + C38003) * C47895 +
             (C26410 * C47897 + C26408 * C31647) * C4579) *
                C47693) *
               C47845 +
           (((C38003 + C38002) * C4579 +
             (C22364 * C31647 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C2118 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C2119 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C2120 -
           ((C39678 + C39679) * C47895 +
            (C28129 * C47897 + C28127 * C31647) * C4579) *
               C47893) *
              C47845 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C2119 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C2118 -
           ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C2120 +
           ((C39679 + C39678) * C4579 +
            (C23740 * C31647 + (C21671 * C23362 - C21672 * C23361 -
                                C21671 * C23363 + C47533 * C23364) *
                                   C47897) *
                C47895) *
               C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21671 * C126 - C21672 * C119 - C21671 * C127 +
                 C47533 * C140) *
                    C31647 +
                C26404 * C47897) *
                   C4579 +
               (C21838 * C31647 + C22361 * C47897) * C47895) *
                  C47606 * C47588 * C108 -
              ((C22362 * C47897 + C21841 * C31647) * C47895 +
               (C26406 * C47897 + (C21671 * C128 - C21672 * C120 -
                                   C21671 * C129 + C47533 * C141) *
                                      C31647) *
                   C4579) *
                  C47606 * C47588 * C109 +
              (((C21671 * C130 - C21672 * C121 - C21671 * C131 +
                 C47533 * C142) *
                    C31647 +
                C26408 * C47897) *
                   C4579 +
               (C21844 * C31647 + C22365 * C47897) * C47895) *
                  C47606 * C47588 * C110 -
              ((C26548 * C47897 + C22076 * C31647) * C47895 +
               (C26686 * C47897 + (C21671 * C132 - C21672 * C122 -
                                   C21671 * C133 + C47533 * C143) *
                                      C31647) *
                   C4579) *
                  C47606 * C47588 * C111 +
              (((C21671 * C134 - C21672 * C123 - C21671 * C135 +
                 C47533 * C144) *
                    C31647 +
                (C21671 * C442 - C21672 * C424 - C21671 * C443 +
                 C47533 * C454) *
                    C47897) *
                   C4579 +
               ((C21671 * C289 - C21672 * C271 - C21671 * C290 +
                 C47533 * C301) *
                    C31647 +
                (C21671 * C827 - C21672 * C818 - C21671 * C828 +
                 C47533 * C833) *
                    C47897) *
                   C47895) *
                  C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21671 * C126 - C21672 * C119 - C21671 * C127 +
                  C47533 * C140) *
                     C31647 +
                 C26404 * C47897) *
                    C4579 +
                (C37384 + C37385) * C47895) *
                   C47606 * C47916 -
               ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) *
                   C47606 * C47904 +
               ((C37387 + C37386) * C4579 +
                (C21840 * C31647 + C22704 * C47897) * C47895) *
                   C47606 * C47877) *
                  C260 +
              (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) *
                   C47606 * C47904 -
               ((C37389 + C37388) * C47895 +
                (C26406 * C47897 + (C21671 * C128 - C21672 * C120 -
                                    C21671 * C129 + C47533 * C141) *
                                       C31647) *
                    C4579) *
                   C47606 * C47916 -
               ((C22968 * C47897 + C21843 * C31647) * C47895 +
                (C37391 + C37390) * C4579) *
                   C47606 * C47877) *
                  C261 +
              ((((C21671 * C130 - C21672 * C121 - C21671 * C131 +
                  C47533 * C142) *
                     C31647 +
                 C26408 * C47897) *
                    C4579 +
                (C37392 + C37393) * C47895) *
                   C47606 * C47916 -
               ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) *
                   C47606 * C47904 +
               ((C37395 + C37394) * C4579 +
                (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                    C21671 * C1552 + C47533 * C1555) *
                                       C47897) *
                    C47895) *
                   C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47917 -
           ((C22702 * C47897 + C22361 * C31647) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47906 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C22702 * C31647 + C23741 * C47897) * C47895) *
               C47880) *
              C47588 * C260 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C22362 * C31647 + C23525 * C47897) * C47895) *
               C47906 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47917 -
           ((C28331 * C47897 + C23525 * C31647) * C47895 +
            (C28469 * C47897 + C26407 * C31647) * C4579) *
               C47880) *
              C47588 * C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47917 -
           ((C26409 * C47897 + C22365 * C31647) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C47906 +
           ((C26410 * C31647 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C4579 +
            (C26409 * C31647 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C944 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C945 +
           ((C37387 + C37386) * C4579 +
            (C21840 * C31647 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C945 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C31647) * C47895 +
            (C37391 + C37390) * C4579) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C944 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C945 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C37384 + C37385) * C47895) *
              C47606 * C1012 -
          ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
              C1013 +
          ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
              C1014 -
          ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
              C1015 +
          ((C38235 + C38234) * C4579 +
           (C22561 * C31647 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47917 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47906 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47880) *
              C944 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47906 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47917 -
           ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C47880) *
              C945 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47917 -
           ((C22705 * C47897 + C22704 * C31647) * C47895 +
            (C38385 + C38384) * C4579) *
               C47906 +
           ((C38387 + C38386) * C4579 +
            (C22705 * C31647 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C1666 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C1667 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C38000 + C38001) * C47895) *
               C1667 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C1666 -
           ((C28331 * C47897 + C23525 * C31647) * C47895 +
            (C28469 * C47897 + C26407 * C31647) * C4579) *
               C47880) *
              C47588 * C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C1666 -
           ((C38002 + C38003) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C1667 +
           ((C26410 * C31647 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C4579 +
            (C26409 * C31647 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C1666 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C1667 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47880) *
              C47916 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C1667 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C1666 -
           ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C47880) *
              C47904 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C1666 -
           ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C1667 +
           ((C38387 + C38386) * C4579 +
            (C22705 * C31647 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C37384 + C37385) * C47895) *
              C1841 -
          ((C37998 + C37999) * C47895 +
           (C26405 * C47897 + C26404 * C31647) * C4579) *
              C1842 +
          ((C26405 * C31647 + C28127 * C47897) * C4579 +
           (C38382 + C38383) * C47895) *
              C1843 -
          ((C28128 * C47897 + C23741 * C31647) * C47895 +
           (C28129 * C47897 + C28127 * C31647) * C4579) *
              C1844 +
          ((C28129 * C31647 + (C21671 * C12403 - C21672 * C12401 -
                               C21671 * C12404 + C47533 * C12407) *
                                  C47897) *
               C4579 +
           (C28128 * C31647 + (C21671 * C28105 - C21672 * C28104 -
                               C21671 * C28106 + C47533 * C28107) *
                                  C47897) *
               C47895) *
              C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47846 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C944 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
               C945 +
           (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47846 -
            ((C22705 * C47897 + C22704 * C31647) * C47895 +
             (C38385 + C38384) * C4579) *
                C47693) *
               C47877) *
              C47831 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47846) *
               C944 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47846 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C945 +
           (((C38715 + C38714) * C4579 +
             (C22968 * C31647 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47846 -
           ((C22702 * C47897 + C22361 * C31647) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C47588 * C556 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C22362 * C31647 + C23525 * C47897) * C47895) *
               C47693 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47846) *
              C47588 * C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47846 -
           ((C26409 * C47897 + C22365 * C31647) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C47693) *
              C47588 * C558 +
          (((C26686 * C31647 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C4579 +
            (C26548 * C31647 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C2118 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C2119 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C2120 -
           ((C28128 * C47897 + C23741 * C31647) * C47895 +
            (C28129 * C47897 + C28127 * C31647) * C4579) *
               C47893) *
              C47588 * C47831 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C38000 + C38001) * C47895) *
               C2119 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C2118 -
           ((C39416 + C39417) * C47895 +
            (C28469 * C47897 + C26407 * C31647) * C4579) *
               C2120 +
           ((C28469 * C31647 + (C21671 * C1860 - C21672 * C1850 -
                                C21671 * C1861 + C47533 * C1868) *
                                   C47897) *
                C4579 +
            (C28331 * C31647 + (C21671 * C6813 - C21672 * C6810 -
                                C21671 * C6814 + C47533 * C6816) *
                                   C47897) *
                C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47916 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47904 +
           ((C37387 + C37386) * C4579 +
            (C21840 * C31647 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C260 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47904 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47916 -
           ((C22968 * C47897 + C21843 * C31647) * C47895 +
            (C37391 + C37390) * C4579) *
               C47606 * C47877) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C47916 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47904 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C21838 * C31647 + C22361 * C47897) * C47895) *
              C47606 * C47588 * C108 -
          ((C22362 * C47897 + C21841 * C31647) * C47895 +
           (C26406 * C47897 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C31647) *
               C4579) *
              C47606 * C47588 * C109 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C31647 +
            C26408 * C47897) *
               C4579 +
           (C21844 * C31647 + C22365 * C47897) * C47895) *
              C47606 * C47588 * C110 -
          ((C26548 * C47897 + C22076 * C31647) * C47895 +
           (C26686 * C47897 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C31647) *
               C4579) *
              C47606 * C47588 * C111 +
          (((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                C31647 +
            (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
                C47897) *
               C4579 +
           ((C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
                C31647 +
            (C21671 * C827 - C21672 * C818 - C21671 * C828 + C47533 * C833) *
                C47897) *
               C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C944 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C945 +
           ((C37387 + C37386) * C4579 +
            (C21840 * C31647 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C945 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C31647) * C47895 +
            (C37391 + C37390) * C4579) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C944 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C945 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C37384 + C37385) * C47895) *
              C47606 * C1012 -
          ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
              C1013 +
          ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
              C1014 -
          ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
              C1015 +
          ((C38235 + C38234) * C4579 +
           (C22561 * C31647 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C1666 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C1667 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47880) *
              C47588 * C47913 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C38000 + C38001) * C47895) *
               C1667 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C1666 -
           ((C28331 * C47897 + C23525 * C31647) * C47895 +
            (C28469 * C47897 + C26407 * C31647) * C4579) *
               C47880) *
              C47588 * C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C1666 -
           ((C38002 + C38003) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C1667 +
           ((C26410 * C31647 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C4579 +
            (C26409 * C31647 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C1666 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C1667 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47880) *
              C47916 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C1667 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C1666 -
           ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C47880) *
              C47904 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C1666 -
           ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C1667 +
           ((C38387 + C38386) * C4579 +
            (C22705 * C31647 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C3096 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C47845 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
               C47651) *
              C47565 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C3096) *
               C47845 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C3096 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47651) *
              C47574 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C31647 +
              C26408 * C47897) *
                 C4579 +
             (C37392 + C37393) * C47895) *
                C3096 -
            ((C38002 + C38003) * C47895 +
             (C26410 * C47897 + C26408 * C31647) * C4579) *
                C47693) *
               C47845 +
           (((C38003 + C38002) * C4579 +
             (C22364 * C31647 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47689 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47696 +
            ((C26405 * C31647 + C28127 * C47897) * C4579 +
             (C38382 + C38383) * C47895) *
                C3604) *
               C47845 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47696 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47689 -
            ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C3604) *
               C47651) *
              C2442 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47696 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47689 -
            ((C39416 + C39417) * C47895 +
             (C28469 * C47897 + C26407 * C31647) * C4579) *
                C3604) *
               C47845 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47689 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47696 +
            ((C39417 + C39416) * C4579 +
             (C23524 * C31647 + (C21671 * C7289 - C21672 * C7286 -
                                 C21671 * C7290 + C47533 * C7292) *
                                    C47897) *
                 C47895) *
                C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C3096 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C47916 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
               C47904 +
           (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C3096 -
            ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
               C47877) *
              C2442 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C3096) *
               C47916 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C3096 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47904 +
           (((C38715 + C38714) * C4579 +
             (C22968 * C31647 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C3096 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C47588 * C47922 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C38000 + C38001) * C47895) *
               C47693 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C3096) *
              C47588 * C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C3096 -
           ((C38002 + C38003) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C47693) *
              C47588 * C47902 +
          (((C26686 * C31647 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C4579 +
            (C26548 * C31647 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47924 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47921 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47912 -
           ((C39678 + C39679) * C47895 +
            (C28129 * C47897 + C28127 * C31647) * C4579) *
               C47893) *
              C47588 * C2442 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C38000 + C38001) * C47895) *
               C47921 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47924 -
           ((C39416 + C39417) * C47895 +
            (C28469 * C47897 + C26407 * C31647) * C4579) *
               C47912 +
           ((C28469 * C31647 + (C21671 * C1860 - C21672 * C1850 -
                                C21671 * C1861 + C47533 * C1868) *
                                   C47897) *
                C4579 +
            (C28331 * C31647 + (C21671 * C6813 - C21672 * C6810 -
                                C21671 * C6814 + C47533 * C6816) *
                                   C47897) *
                C47895) *
               C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47689 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47696 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C3604) *
              C47588 * C47565 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C38000 + C38001) * C47895) *
               C47696 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47689 -
           ((C39416 + C39417) * C47895 +
            (C28469 * C47897 + C26407 * C31647) * C4579) *
               C3604) *
              C47588 * C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47689 -
           ((C38002 + C38003) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C47696 +
           ((C26410 * C31647 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C4579 +
            (C26409 * C31647 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C3096 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C47588 * C47922 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C38000 + C38001) * C47895) *
               C47693 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C3096) *
              C47588 * C47915 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C3096 -
           ((C38002 + C38003) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C47693) *
              C47588 * C47902 +
          (((C26686 * C31647 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C4579 +
            (C26548 * C31647 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C3096 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C47916 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C3096) *
               C47904 +
           (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C3096 -
            ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
               C47877) *
              C2442 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C3096) *
               C47916 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C3096 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C47904 +
           (((C38715 + C38714) * C4579 +
             (C22968 * C31647 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47845 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47651) *
              C556 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47651 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47845) *
              C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C47845 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47651) *
              C558 +
          (((C37672 + C37673) * C4579 +
            (C22077 * C31647 + (C21671 * C1443 - C21672 * C1442 -
                                C21671 * C1444 + C47533 * C1445) *
                                   C47897) *
                C47895) *
               C47606 * C47651 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C1286 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C1287 +
           ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
               C1288 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
               C47887) *
              C47831 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C1287 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C1286 -
           ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47606 *
               C1288 +
           ((C38519 + C38518) * C4579 +
            (C22814 * C31647 + (C21671 * C6417 - C21672 * C6414 -
                                C21671 * C6418 + C47533 * C6420) *
                                   C47897) *
                C47895) *
               C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47846 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C47845 +
           (((C37999 + C37998) * C4579 +
             (C22360 * C31647 + C22703 * C47897) * C47895) *
                C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
               C47651) *
              C260 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47846) *
               C47845 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47846 -
            ((C23524 * C47897 + C22363 * C31647) * C47895 +
             (C38001 + C38000) * C4579) *
                C47693) *
               C47651) *
              C261 +
          (((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                  C31647 +
              C26408 * C47897) *
                 C4579 +
             (C37392 + C37393) * C47895) *
                C47846 -
            ((C38002 + C38003) * C47895 +
             (C26410 * C47897 + C26408 * C31647) * C4579) *
                C47693) *
               C47845 +
           (((C38003 + C38002) * C4579 +
             (C22364 * C31647 + (C21671 * C1177 - C21672 * C1160 -
                                 C21671 * C1178 + C47533 * C1187) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47846 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C1286 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
              C1287 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47846 -
           ((C38846 + C38847) * C47895 + (C38385 + C38384) * C4579) * C47693) *
              C1288 +
          (((C38847 + C38846) * C4579 +
            (C23078 * C31647 + (C21671 * C22674 - C21672 * C22673 -
                                C21671 * C22675 + C47533 * C22676) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47916 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47904 +
           ((C37387 + C37386) * C4579 +
            (C21840 * C31647 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C260 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47904 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47916 -
           ((C22968 * C47897 + C21843 * C31647) * C47895 +
            (C37391 + C37390) * C4579) *
               C47606 * C47877) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C47916 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47904 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C21838 * C31647 + C22361 * C47897) * C47895) *
              C47606 * C47588 * C108 -
          ((C22362 * C47897 + C21841 * C31647) * C47895 +
           (C26406 * C47897 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C31647) *
               C4579) *
              C47606 * C47588 * C109 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C31647 +
            C26408 * C47897) *
               C4579 +
           (C21844 * C31647 + C22365 * C47897) * C47895) *
              C47606 * C47588 * C110 -
          ((C26548 * C47897 + C22076 * C31647) * C47895 +
           (C26686 * C47897 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C31647) *
               C4579) *
              C47606 * C47588 * C111 +
          (((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                C31647 +
            (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
                C47897) *
               C4579 +
           ((C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
                C31647 +
            (C21671 * C827 - C21672 * C818 - C21671 * C828 + C47533 * C833) *
                C47897) *
               C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47917 -
           ((C22702 * C47897 + C22361 * C31647) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47906 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C22702 * C31647 + C23741 * C47897) * C47895) *
               C47880) *
              C47588 * C260 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C22362 * C31647 + C23525 * C47897) * C47895) *
               C47906 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47917 -
           ((C28331 * C47897 + C23525 * C31647) * C47895 +
            (C28469 * C47897 + C26407 * C31647) * C4579) *
               C47880) *
              C47588 * C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47917 -
           ((C26409 * C47897 + C22365 * C31647) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C47906 +
           ((C26410 * C31647 + (C21671 * C1852 - C21672 * C1846 -
                                C21671 * C1853 + C47533 * C1864) *
                                   C47897) *
                C4579 +
            (C26409 * C31647 + (C21671 * C2231 - C21672 * C2226 -
                                C21671 * C2232 + C47533 * C2235) *
                                   C47897) *
                C47895) *
               C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C944 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C945 +
           ((C37387 + C37386) * C4579 +
            (C21840 * C31647 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C945 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C31647) * C47895 +
            (C37391 + C37390) * C4579) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C944 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C945 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C37384 + C37385) * C47895) *
              C47606 * C1012 -
          ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
              C1013 +
          ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
              C1014 -
          ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
              C1015 +
          ((C38235 + C38234) * C4579 +
           (C22561 * C31647 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47917 -
           ((C37998 + C37999) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47906 +
           ((C26405 * C31647 + C28127 * C47897) * C4579 +
            (C38382 + C38383) * C47895) *
               C47880) *
              C944 +
          (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47906 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47917 -
           ((C38386 + C38387) * C47895 + (C38383 + C38382) * C4579) * C47880) *
              C945 +
          (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47917 -
           ((C22705 * C47897 + C22704 * C31647) * C47895 +
            (C38385 + C38384) * C4579) *
               C47906 +
           ((C38387 + C38386) * C4579 +
            (C22705 * C31647 + (C21671 * C23724 - C21672 * C23723 -
                                C21671 * C23725 + C47533 * C23726) *
                                   C47897) *
                C47895) *
               C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47846 -
           ((C22702 * C47897 + C22361 * C31647) * C47895 +
            (C26405 * C47897 + C26404 * C31647) * C4579) *
               C47693) *
              C47588 * C556 +
          (((C26406 * C31647 + C26407 * C47897) * C4579 +
            (C22362 * C31647 + C23525 * C47897) * C47895) *
               C47693 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47846) *
              C47588 * C557 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47846 -
           ((C26409 * C47897 + C22365 * C31647) * C47895 +
            (C26410 * C47897 + C26408 * C31647) * C4579) *
               C47693) *
              C47588 * C558 +
          (((C26686 * C31647 +
             (C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                 C47897) *
                C4579 +
            (C26548 * C31647 + (C21671 * C2017 - C21672 * C2016 -
                                C21671 * C2018 + C47533 * C2019) *
                                   C47897) *
                C47895) *
               C47693 -
           ((C37673 + C37672) * C47895 +
            (C26686 * C47897 +
             (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                 C31647) *
                C4579) *
               C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                  C31647 +
              C26404 * C47897) *
                 C4579 +
             (C37384 + C37385) * C47895) *
                C47846 -
            ((C37998 + C37999) * C47895 +
             (C26405 * C47897 + C26404 * C31647) * C4579) *
                C47693) *
               C944 +
           (((C37999 + C37998) * C4579 + (C38384 + C38385) * C47895) * C47693 -
            ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47846) *
               C945 +
           (((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47846 -
            ((C22705 * C47897 + C22704 * C31647) * C47895 +
             (C38385 + C38384) * C4579) *
                C47693) *
               C47877) *
              C47831 +
          ((((C26406 * C31647 + C26407 * C47897) * C4579 +
             (C38000 + C38001) * C47895) *
                C47693 -
            ((C37389 + C37388) * C47895 +
             (C26406 * C47897 +
              (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                  C31647) *
                 C4579) *
                C47846) *
               C944 +
           (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47846 -
            ((C38714 + C38715) * C47895 + (C38001 + C38000) * C4579) * C47693) *
               C945 +
           (((C38715 + C38714) * C4579 +
             (C22968 * C31647 + (C21671 * C5885 - C21672 * C5882 -
                                 C21671 * C5886 + C47533 * C5888) *
                                    C47897) *
                 C47895) *
                C47693 -
            ((C38518 + C38519) * C47895 + (C37391 + C37390) * C4579) * C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C21838 * C31647 + C22361 * C47897) * C47895) *
              C47606 * C47588 * C108 -
          ((C22362 * C47897 + C21841 * C31647) * C47895 +
           (C26406 * C47897 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C31647) *
               C4579) *
              C47606 * C47588 * C109 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C31647 +
            C26408 * C47897) *
               C4579 +
           (C21844 * C31647 + C22365 * C47897) * C47895) *
              C47606 * C47588 * C110 -
          ((C26548 * C47897 + C22076 * C31647) * C47895 +
           (C26686 * C47897 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C31647) *
               C4579) *
              C47606 * C47588 * C111 +
          (((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                C31647 +
            (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
                C47897) *
               C4579 +
           ((C21671 * C289 - C21672 * C271 - C21671 * C290 + C47533 * C301) *
                C31647 +
            (C21671 * C827 - C21672 * C818 - C21671 * C828 + C47533 * C833) *
                C47897) *
               C47895) *
              C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C47916 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C47904 +
           ((C37387 + C37386) * C4579 +
            (C21840 * C31647 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C260 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C47904 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C47916 -
           ((C22968 * C47897 + C21843 * C31647) * C47895 +
            (C37391 + C37390) * C4579) *
               C47606 * C47877) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C47916 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C47904 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C31647 +
             C26404 * C47897) *
                C4579 +
            (C37384 + C37385) * C47895) *
               C47606 * C944 -
           ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
               C945 +
           ((C37387 + C37386) * C4579 +
            (C21840 * C31647 + C22704 * C47897) * C47895) *
               C47606 * C47877) *
              C47913 +
          (((C37388 + C37389) * C4579 + (C37390 + C37391) * C47895) * C47606 *
               C945 -
           ((C37389 + C37388) * C47895 +
            (C26406 * C47897 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C31647) *
                C4579) *
               C47606 * C944 -
           ((C22968 * C47897 + C21843 * C31647) * C47895 +
            (C37391 + C37390) * C4579) *
               C47606 * C47877) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C31647 +
             C26408 * C47897) *
                C4579 +
            (C37392 + C37393) * C47895) *
               C47606 * C944 -
           ((C37394 + C37395) * C47895 + (C37393 + C37392) * C4579) * C47606 *
               C945 +
           ((C37395 + C37394) * C4579 +
            (C21846 * C31647 + (C21671 * C1551 - C21672 * C1546 -
                                C21671 * C1552 + C47533 * C1555) *
                                   C47897) *
                C47895) *
               C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C31647 +
            C26404 * C47897) *
               C4579 +
           (C37384 + C37385) * C47895) *
              C47606 * C1012 -
          ((C37386 + C37387) * C47895 + (C37385 + C37384) * C4579) * C47606 *
              C1013 +
          ((C37387 + C37386) * C4579 + (C38232 + C38233) * C47895) * C47606 *
              C1014 -
          ((C38234 + C38235) * C47895 + (C38233 + C38232) * C4579) * C47606 *
              C1015 +
          ((C38235 + C38234) * C4579 +
           (C22561 * C31647 + (C21671 * C23068 - C21672 * C23067 -
                               C21671 * C23069 + C47533 * C23070) *
                                  C47897) *
               C47895) *
              C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47647 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47654 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C2702) *
              C47565 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47654 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47647 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C2702) *
              C47574 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C47647 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47654 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47846 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C47647 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47846) *
               C47654 +
           ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
                C47846 -
            (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
                C47693) *
               C2702) *
              C2442 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47846) *
               C47647 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47846 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47654 +
           ((C22363 * C42705 + C23524 * C42706 +
             (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
              C47533 * C7292) *
                 C42707) *
                C47795 * C47693 -
            (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
                C47846) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47923 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47919 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47909 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C47606 * C47887) *
              C2442 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47919 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47923 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47909 +
           (C21843 * C42705 + C22968 * C42706 +
            (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
             C47533 * C5888) *
                C42707) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C2334 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47651) *
              C47922 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47651 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C2334) *
              C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C2334 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47651) *
              C47902 +
          ((C22076 * C42705 + C26548 * C42706 +
            (C21671 * C2017 - C21672 * C2016 - C21671 * C2018 +
             C47533 * C2019) *
                C42707) *
               C47795 * C47606 * C47651 -
           (C43138 * C42707 + C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47917 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47906 +
            (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
                C47880) *
               C2334 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47906 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47917 -
            (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
                C47880) *
               C47651) *
              C2442 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47906 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47917 -
            (C44452 * C42707 + C28469 * C42706 + C26407 * C42705) * C47795 *
                C47880) *
               C2334 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47917 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47906 +
            (C23525 * C42705 + C28331 * C42706 +
             (C21671 * C6813 - C21672 * C6810 - C21671 * C6814 +
              C47533 * C6816) *
                 C42707) *
                C47795 * C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47846 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C2334 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47846) *
               C47651) *
              C47565 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47846) *
               C2334 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47846 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47651) *
              C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C42705 +
             C26408 * C42706 + C26410 * C42707) *
                C47795 * C47846 -
            (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
                C47693) *
               C2334 +
           ((C22365 * C42705 + C26409 * C42706 +
             (C21671 * C2231 - C21672 * C2226 - C21671 * C2232 +
              C47533 * C2235) *
                 C42707) *
                C47795 * C47693 -
            (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
                C47846) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C2334 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47651) *
              C47922 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47651 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C2334) *
              C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C2334 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47651) *
              C47902 +
          ((C22076 * C42705 + C26548 * C42706 +
            (C21671 * C2017 - C21672 * C2016 - C21671 * C2018 +
             C47533 * C2019) *
                C42707) *
               C47795 * C47606 * C47651 -
           (C43138 * C42707 + C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C47606 * C2334) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47923 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47919 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47909 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C47606 * C47887) *
              C2442 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47919 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47923 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47909 +
           (C21843 * C42705 + C22968 * C42706 +
            (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
             C47533 * C5888) *
                C42707) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C3096 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C47647 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C3096) *
               C47654 +
           ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
                C3096 -
            (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
                C47693) *
               C2702) *
              C47831 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C3096) *
               C47647 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C3096 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47654 +
           ((C22363 * C42705 + C23524 * C42706 +
             (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
              C47533 * C7292) *
                 C42707) *
                C47795 * C47693 -
            (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
                C3096) *
               C2702) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47689 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47696 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C3604) *
              C47647 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47696 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47689 -
           (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
               C3604) *
              C47654 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47689 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C47696 +
           (C22703 * C42705 + C23740 * C42706 +
            (C21671 * C23362 - C21672 * C23361 - C21671 * C23363 +
             C47533 * C23364) *
                C42707) *
               C47795 * C3604) *
              C2702) *
         C47560) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C3096 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C47923 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47693 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C3096) *
              C47919 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C3096 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C47693) *
              C47909 +
          ((C22704 * C42705 + C22705 * C42706 +
            (C21671 * C23724 - C21672 * C23723 - C21671 * C23725 +
             C47533 * C23726) *
                C42707) *
               C47795 * C47693 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C3096 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C2334 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C3096) *
               C47651) *
              C47913 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C3096) *
               C2334 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C3096 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47651) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C42705 +
             C26408 * C42706 + C26410 * C42707) *
                C47795 * C3096 -
            (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
                C47693) *
               C2334 +
           ((C22365 * C42705 + C26409 * C42706 +
             (C21671 * C2231 - C21672 * C2226 - C21671 * C2232 +
              C47533 * C2235) *
                 C42707) *
                C47795 * C47693 -
            (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47924 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47921 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47912 -
           (C44201 * C42707 + C28129 * C42706 + C28127 * C42705) * C47795 *
               C47893) *
              C2334 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47921 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47924 -
           (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
               C47912 +
           (C23741 * C42705 + C28128 * C42706 +
            (C21671 * C28105 - C21672 * C28104 - C21671 * C28106 +
             C47533 * C28107) *
                C42707) *
               C47795 * C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47689 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47696 +
            (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
                C3604) *
               C2334 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47696 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47689 -
            (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
                C3604) *
               C47651) *
              C47831 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47696 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47689 -
            (C44452 * C42707 + C28469 * C42706 + C26407 * C42705) * C47795 *
                C3604) *
               C2334 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47689 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47696 +
            (C23525 * C42705 + C28331 * C42706 +
             (C21671 * C6813 - C21672 * C6810 - C21671 * C6814 +
              C47533 * C6816) *
                 C42707) *
                C47795 * C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C3096 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C2334 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C3096) *
               C47651) *
              C47913 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C3096) *
               C2334 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C3096 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47651) *
              C47900 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C42705 +
             C26408 * C42706 + C26410 * C42707) *
                C47795 * C3096 -
            (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
                C47693) *
               C2334 +
           ((C22365 * C42705 + C26409 * C42706 +
             (C21671 * C2231 - C21672 * C2226 - C21671 * C2232 +
              C47533 * C2235) *
                 C42707) *
                C47795 * C47693 -
            (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
                C3096) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C3096 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C47923 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47693 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C3096) *
              C47919 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C3096 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C47693) *
              C47909 +
          ((C22704 * C42705 + C22705 * C42706 +
            (C21671 * C23724 - C21672 * C23723 - C21671 * C23725 +
             C47533 * C23726) *
                C42707) *
               C47795 * C47693 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C3096) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C1286 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C1287 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C1288 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C47606 * C47887) *
              C47831 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C1287 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C1286 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C1288 +
           (C21843 * C42705 + C22968 * C42706 +
            (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
             C47533 * C5888) *
                C42707) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47845 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47651) *
              C556 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47651 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47845) *
              C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C47845 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47651) *
              C558 +
          ((C22076 * C42705 + C26548 * C42706 +
            (C21671 * C2017 - C21672 * C2016 - C21671 * C2018 +
             C47533 * C2019) *
                C42707) *
               C47795 * C47606 * C47651 -
           ((C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                C42707 +
            C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C1666 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C1667 +
            (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
                C47880) *
               C47845 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C1667 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C1666 -
            (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
                C47880) *
               C47651) *
              C47831 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C1667 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C1666 -
            ((C21671 * C1860 - C21672 * C1850 - C21671 * C1861 +
              C47533 * C1868) *
                 C42707 +
             C28469 * C42706 + C26407 * C42705) *
                C47795 * C47880) *
               C47845 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C1666 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C1667 +
            (C23525 * C42705 + C28331 * C42706 +
             (C21671 * C6813 - C21672 * C6810 - C21671 * C6814 +
              C47533 * C6816) *
                 C42707) *
                C47795 * C47880) *
               C47651) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47846 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C1286 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47693 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47846) *
              C1287 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47846 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C47693) *
              C1288 +
          ((C22704 * C42705 + C22705 * C42706 +
            (C21671 * C23724 - C21672 * C23723 - C21671 * C23725 +
             C47533 * C23726) *
                C42707) *
               C47795 * C47693 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47846 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C47845 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47846) *
               C47651) *
              C260 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47846) *
               C47845 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47846 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47651) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C42705 +
             C26408 * C42706 + C26410 * C42707) *
                C47795 * C47846 -
            (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
                C47693) *
               C47845 +
           ((C22365 * C42705 + C26409 * C42706 +
             (C21671 * C2231 - C21672 * C2226 - C21671 * C2232 +
              C47533 * C2235) *
                 C42707) *
                C47795 * C47693 -
            (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C2118 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C2119 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C2120 -
           (C44201 * C42707 + C28129 * C42706 + C28127 * C42705) * C47795 *
               C47893) *
              C47845 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C2119 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C2118 -
           (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
               C2120 +
           (C23741 * C42705 + C28128 * C42706 +
            (C21671 * C28105 - C21672 * C28104 - C21671 * C28106 +
             C47533 * C28107) *
                C42707) *
               C47795 * C47893) *
              C47651) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                   C42705 +
               C26404 * C42706 + C26405 * C42707) *
                  C47795 * C47606 * C47588 * C108 -
              (C26407 * C42707 + C26406 * C42706 +
               (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                   C42705) *
                  C47795 * C47606 * C47588 * C109 +
              ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                   C42705 +
               C26408 * C42706 + C26410 * C42707) *
                  C47795 * C47606 * C47588 * C110 -
              ((C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                   C42707 +
               C26686 * C42706 +
               (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                   C42705) *
                  C47795 * C47606 * C47588 * C111 +
              ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
                   C42705 +
               (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
                   C42706 +
               (C21671 * C444 - C21672 * C425 - C21671 * C445 + C47533 * C455) *
                   C42707) *
                  C47795 * C47606 * C47588 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21671 * C126 - C21672 * C119 - C21671 * C127 +
                 C47533 * C140) *
                    C42705 +
                C26404 * C42706 + C26405 * C42707) *
                   C47795 * C47606 * C47916 -
               (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                   C47606 * C47904 +
               (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
                   C47606 * C47877) *
                  C260 +
              ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                   C47606 * C47904 -
               (C26407 * C42707 + C26406 * C42706 +
                (C21671 * C128 - C21672 * C120 - C21671 * C129 +
                 C47533 * C141) *
                    C42705) *
                   C47795 * C47606 * C47916 -
               (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
                   C47606 * C47877) *
                  C261 +
              (((C21671 * C130 - C21672 * C121 - C21671 * C131 +
                 C47533 * C142) *
                    C42705 +
                C26408 * C42706 + C26410 * C42707) *
                   C47795 * C47606 * C47916 -
               (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
                   C47606 * C47904 +
               (C21845 * C42705 + C22364 * C42706 +
                (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
                 C47533 * C1187) *
                    C42707) *
                   C47795 * C47606 * C47877) *
                  C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47917 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47906 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C47588 * C260 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47906 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47917 -
           ((C21671 * C1860 - C21672 * C1850 - C21671 * C1861 +
             C47533 * C1868) *
                C42707 +
            C28469 * C42706 + C26407 * C42705) *
               C47795 * C47880) *
              C47588 * C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47917 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C47906 +
           (C26410 * C42705 + C42935 * C42706 +
            (C21671 * C1862 - C21672 * C1851 - C21671 * C1863 +
             C47533 * C1869) *
                C42707) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C944 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C945 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47877) *
              C47913 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C945 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C944 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C944 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C945 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C47606 * C1012 -
          (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
              C47606 * C1013 +
          (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
              C47606 * C1014 -
          (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
              C47606 * C1015 +
          (C22560 * C42705 + C23078 * C42706 +
           (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
            C47533 * C22676) *
               C42707) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47917 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47906 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C944 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47906 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47917 -
           (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
               C47880) *
              C945 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47917 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C47906 +
           (C22703 * C42705 + C23740 * C42706 +
            (C21671 * C23362 - C21672 * C23361 - C21671 * C23363 +
             C47533 * C23364) *
                C42707) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C1666 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C1667 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C47588 * C47913 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C1667 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C1666 -
           ((C21671 * C1860 - C21672 * C1850 - C21671 * C1861 +
             C47533 * C1868) *
                C42707 +
            C28469 * C42706 + C26407 * C42705) *
               C47795 * C47880) *
              C47588 * C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C1666 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C1667 +
           (C26410 * C42705 + C42935 * C42706 +
            (C21671 * C1862 - C21672 * C1851 - C21671 * C1863 +
             C47533 * C1869) *
                C42707) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C1666 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C1667 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C47916 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C1667 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C1666 -
           (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
               C47880) *
              C47904 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C1666 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C1667 +
           (C22703 * C42705 + C23740 * C42706 +
            (C21671 * C23362 - C21672 * C23361 - C21671 * C23363 +
             C47533 * C23364) *
                C42707) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C1841 -
          (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
              C1842 +
          (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
              C1843 -
          (C44201 * C42707 + C28129 * C42706 + C28127 * C42705) * C47795 *
              C1844 +
          (C28129 * C42705 + C44201 * C42706 +
           (C21671 * C44191 - C21672 * C44190 - C21671 * C44192 +
            C47533 * C44193) *
               C42707) *
              C47795 * C1845) *
         C47588 * C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47846 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C944 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47846) *
               C945 +
           ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
                C47846 -
            (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
                C47693) *
               C47877) *
              C47831 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47846) *
               C944 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47846 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C945 +
           ((C22363 * C42705 + C23524 * C42706 +
             (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
              C47533 * C7292) *
                 C42707) *
                C47795 * C47693 -
            (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47846 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C47588 * C556 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47693 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47846) *
              C47588 * C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47846 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C47693) *
              C47588 * C558 +
          ((C26686 * C42705 + C43138 * C42706 +
            (C21671 * C2123 - C21672 * C2122 - C21671 * C2124 +
             C47533 * C2125) *
                C42707) *
               C47795 * C47693 -
           (C43138 * C42707 + C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C2118 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C2119 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C2120 -
           (C44201 * C42707 + C28129 * C42706 + C28127 * C42705) * C47795 *
               C47893) *
              C47588 * C47831 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C2119 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C2118 -
           (C44452 * C42707 + C28469 * C42706 + C26407 * C42705) * C47795 *
               C2120 +
           (C28469 * C42705 + C44452 * C42706 +
            (C21671 * C12405 - C21672 * C12402 - C21671 * C12406 +
             C47533 * C12408) *
                C42707) *
               C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47916 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47904 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47877) *
              C260 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47904 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47916 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C47916 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47904 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C47606 * C47588 * C108 -
          (C26407 * C42707 + C26406 * C42706 +
           (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
               C42705) *
              C47795 * C47606 * C47588 * C109 +
          ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
               C42705 +
           C26408 * C42706 + C26410 * C42707) *
              C47795 * C47606 * C47588 * C110 -
          ((C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
               C42707 +
           C26686 * C42706 +
           (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
               C42705) *
              C47795 * C47606 * C47588 * C111 +
          ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
               C42705 +
           (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
               C42706 +
           (C21671 * C444 - C21672 * C425 - C21671 * C445 + C47533 * C455) *
               C42707) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C944 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C945 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47877) *
              C47913 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C945 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C944 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C944 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C945 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C47606 * C1012 -
          (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
              C47606 * C1013 +
          (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
              C47606 * C1014 -
          (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
              C47606 * C1015 +
          (C22560 * C42705 + C23078 * C42706 +
           (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
            C47533 * C22676) *
               C42707) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C1666 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C1667 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C47588 * C47913 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C1667 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C1666 -
           ((C21671 * C1860 - C21672 * C1850 - C21671 * C1861 +
             C47533 * C1868) *
                C42707 +
            C28469 * C42706 + C26407 * C42705) *
               C47795 * C47880) *
              C47588 * C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C1666 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C1667 +
           (C26410 * C42705 + C42935 * C42706 +
            (C21671 * C1862 - C21672 * C1851 - C21671 * C1863 +
             C47533 * C1869) *
                C42707) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C1666 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C1667 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C47916 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C1667 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C1666 -
           (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
               C47880) *
              C47904 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C1666 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C1667 +
           (C22703 * C42705 + C23740 * C42706 +
            (C21671 * C23362 - C21672 * C23361 - C21671 * C23363 +
             C47533 * C23364) *
                C42707) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C3096 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C47845 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C3096) *
               C47651) *
              C47565 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C3096) *
               C47845 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C3096 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47651) *
              C47574 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C42705 +
             C26408 * C42706 + C26410 * C42707) *
                C47795 * C3096 -
            (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
                C47693) *
               C47845 +
           ((C22365 * C42705 + C26409 * C42706 +
             (C21671 * C2231 - C21672 * C2226 - C21671 * C2232 +
              C47533 * C2235) *
                 C42707) *
                C47795 * C47693 -
            (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
                C3096) *
               C47651) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47689 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47696 +
            (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
                C3604) *
               C47845 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47696 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47689 -
            (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
                C3604) *
               C47651) *
              C2442 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47696 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47689 -
            (C44452 * C42707 + C28469 * C42706 + C26407 * C42705) * C47795 *
                C3604) *
               C47845 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47689 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47696 +
            (C23525 * C42705 + C28331 * C42706 +
             (C21671 * C6813 - C21672 * C6810 - C21671 * C6814 +
              C47533 * C6816) *
                 C42707) *
                C47795 * C3604) *
               C47651) *
              C47571)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C3096 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C47916 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C3096) *
               C47904 +
           ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
                C3096 -
            (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
                C47693) *
               C47877) *
              C2442 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C3096) *
               C47916 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C3096 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47904 +
           ((C22363 * C42705 + C23524 * C42706 +
             (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
              C47533 * C7292) *
                 C42707) *
                C47795 * C47693 -
            (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C3096 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C47588 * C47922 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47693 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C3096) *
              C47588 * C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C3096 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C47693) *
              C47588 * C47902 +
          ((C26686 * C42705 + C43138 * C42706 +
            (C21671 * C2123 - C21672 * C2122 - C21671 * C2124 +
             C47533 * C2125) *
                C42707) *
               C47795 * C47693 -
           (C43138 * C42707 + C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47924 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47921 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47912 -
           (C44201 * C42707 + C28129 * C42706 + C28127 * C42705) * C47795 *
               C47893) *
              C47588 * C2442 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47921 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47924 -
           (C44452 * C42707 + C28469 * C42706 + C26407 * C42705) * C47795 *
               C47912 +
           (C28469 * C42705 + C44452 * C42706 +
            (C21671 * C12405 - C21672 * C12402 - C21671 * C12406 +
             C47533 * C12408) *
                C42707) *
               C47795 * C47893) *
              C47588 * C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47689 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47696 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C3604) *
              C47588 * C47565 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47696 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47689 -
           (C44452 * C42707 + C28469 * C42706 + C26407 * C42705) * C47795 *
               C3604) *
              C47588 * C47574 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47689 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C47696 +
           (C26410 * C42705 + C42935 * C42706 +
            (C21671 * C1862 - C21672 * C1851 - C21671 * C1863 +
             C47533 * C1869) *
                C42707) *
               C47795 * C3604) *
              C47588 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C3096 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C47588 * C47922 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47693 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C3096) *
              C47588 * C47915 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C3096 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C47693) *
              C47588 * C47902 +
          ((C26686 * C42705 + C43138 * C42706 +
            (C21671 * C2123 - C21672 * C2122 - C21671 * C2124 +
             C47533 * C2125) *
                C42707) *
               C47795 * C47693 -
           (C43138 * C42707 + C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C3096) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C3096 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C47916 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C3096) *
               C47904 +
           ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
                C3096 -
            (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
                C47693) *
               C47877) *
              C2442 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C3096) *
               C47916 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C3096 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47904 +
           ((C22363 * C42705 + C23524 * C42706 +
             (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
              C47533 * C7292) *
                 C42707) *
                C47795 * C47693 -
            (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
                C3096) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47845 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47651) *
              C556 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47651 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47845) *
              C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C47845 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47651) *
              C558 +
          ((C22076 * C42705 + C26548 * C42706 +
            (C21671 * C2017 - C21672 * C2016 - C21671 * C2018 +
             C47533 * C2019) *
                C42707) *
               C47795 * C47606 * C47651 -
           ((C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
                C42707 +
            C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C47606 * C47845) *
              C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C1286 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C1287 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C1288 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C47606 * C47887) *
              C47831 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C1287 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C1286 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C1288 +
           (C21843 * C42705 + C22968 * C42706 +
            (C21671 * C5885 - C21672 * C5882 - C21671 * C5886 +
             C47533 * C5888) *
                C42707) *
               C47795 * C47606 * C47887) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47846 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C47845 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47846) *
               C47651) *
              C260 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47846) *
               C47845 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47846 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C47651) *
              C261 +
          ((((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                 C42705 +
             C26408 * C42706 + C26410 * C42707) *
                C47795 * C47846 -
            (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
                C47693) *
               C47845 +
           ((C22365 * C42705 + C26409 * C42706 +
             (C21671 * C2231 - C21672 * C2226 - C21671 * C2232 +
              C47533 * C2235) *
                 C42707) *
                C47795 * C47693 -
            (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
                C47846) *
               C47651) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47846 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C1286 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47693 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47846) *
              C1287 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47846 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C47693) *
              C1288 +
          ((C22704 * C42705 + C22705 * C42706 +
            (C21671 * C23724 - C21672 * C23723 - C21671 * C23725 +
             C47533 * C23726) *
                C42707) *
               C47795 * C47693 -
           (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
               C47846) *
              C47887) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47916 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47904 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47877) *
              C260 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47904 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47916 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C47916 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47904 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C47606 * C47588 * C108 -
          (C26407 * C42707 + C26406 * C42706 +
           (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
               C42705) *
              C47795 * C47606 * C47588 * C109 +
          ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
               C42705 +
           C26408 * C42706 + C26410 * C42707) *
              C47795 * C47606 * C47588 * C110 -
          ((C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
               C42707 +
           C26686 * C42706 +
           (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
               C42705) *
              C47795 * C47606 * C47588 * C111 +
          ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
               C42705 +
           (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
               C42706 +
           (C21671 * C444 - C21672 * C425 - C21671 * C445 + C47533 * C455) *
               C42707) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47917 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47906 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C47588 * C260 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47906 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47917 -
           ((C21671 * C1860 - C21672 * C1850 - C21671 * C1861 +
             C47533 * C1868) *
                C42707 +
            C28469 * C42706 + C26407 * C42705) *
               C47795 * C47880) *
              C47588 * C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47917 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C47906 +
           (C26410 * C42705 + C42935 * C42706 +
            (C21671 * C1862 - C21672 * C1851 - C21671 * C1863 +
             C47533 * C1869) *
                C42707) *
               C47795 * C47880) *
              C47588 * C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C944 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C945 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47877) *
              C47913 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C945 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C944 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C944 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C945 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C47606 * C1012 -
          (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
              C47606 * C1013 +
          (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
              C47606 * C1014 -
          (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
              C47606 * C1015 +
          (C22560 * C42705 + C23078 * C42706 +
           (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
            C47533 * C22676) *
               C42707) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47917 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47906 +
           (C26405 * C42705 + C28127 * C42706 + C28129 * C42707) * C47795 *
               C47880) *
              C944 +
          ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
               C47906 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47917 -
           (C28128 * C42707 + C23741 * C42706 + C22702 * C42705) * C47795 *
               C47880) *
              C945 +
          ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47917 -
           (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
               C47906 +
           (C22703 * C42705 + C23740 * C42706 +
            (C21671 * C23362 - C21672 * C23361 - C21671 * C23363 +
             C47533 * C23364) *
                C42707) *
               C47795 * C47880) *
              C47877) *
         C47560) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47846 -
           (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
               C47693) *
              C47588 * C556 +
          ((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
               C47693 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47846) *
              C47588 * C557 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47846 -
           (C42935 * C42707 + C26410 * C42706 + C26408 * C42705) * C47795 *
               C47693) *
              C47588 * C558 +
          ((C26686 * C42705 + C43138 * C42706 +
            (C21671 * C2123 - C21672 * C2122 - C21671 * C2124 +
             C47533 * C2125) *
                C42707) *
               C47795 * C47693 -
           (C43138 * C42707 + C26686 * C42706 +
            (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
                C42705) *
               C47795 * C47846) *
              C47588 * C47881)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                 C42705 +
             C26404 * C42706 + C26405 * C42707) *
                C47795 * C47846 -
            (C28127 * C42707 + C26405 * C42706 + C26404 * C42705) * C47795 *
                C47693) *
               C944 +
           ((C22361 * C42705 + C22702 * C42706 + C23741 * C42707) * C47795 *
                C47693 -
            (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
                C47846) *
               C945 +
           ((C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
                C47846 -
            (C23740 * C42707 + C22703 * C42706 + C22360 * C42705) * C47795 *
                C47693) *
               C47877) *
              C47831 +
          (((C26406 * C42705 + C26407 * C42706 + C28469 * C42707) * C47795 *
                C47693 -
            (C26407 * C42707 + C26406 * C42706 +
             (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                 C42705) *
                C47795 * C47846) *
               C944 +
           ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
                C47846 -
            (C28331 * C42707 + C23525 * C42706 + C22362 * C42705) * C47795 *
                C47693) *
               C945 +
           ((C22363 * C42705 + C23524 * C42706 +
             (C21671 * C7289 - C21672 * C7286 - C21671 * C7290 +
              C47533 * C7292) *
                 C42707) *
                C47795 * C47693 -
            (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
                C47846) *
               C47877) *
              C47571)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C47606 * C47588 * C108 -
          (C26407 * C42707 + C26406 * C42706 +
           (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
               C42705) *
              C47795 * C47606 * C47588 * C109 +
          ((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
               C42705 +
           C26408 * C42706 + C26410 * C42707) *
              C47795 * C47606 * C47588 * C110 -
          ((C21671 * C440 - C21672 * C423 - C21671 * C441 + C47533 * C453) *
               C42707 +
           C26686 * C42706 +
           (C21671 * C132 - C21672 * C122 - C21671 * C133 + C47533 * C143) *
               C42705) *
              C47795 * C47606 * C47588 * C111 +
          ((C21671 * C134 - C21672 * C123 - C21671 * C135 + C47533 * C144) *
               C42705 +
           (C21671 * C442 - C21672 * C424 - C21671 * C443 + C47533 * C454) *
               C42706 +
           (C21671 * C444 - C21672 * C425 - C21671 * C445 + C47533 * C455) *
               C42707) *
              C47795 * C47606 * C47588 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C47916 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C47904 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47877) *
              C260 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C47904 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C47916 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47877) *
              C261 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C47916 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C47904 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
                C42705 +
            C26404 * C42706 + C26405 * C42707) *
               C47795 * C47606 * C944 -
           (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
               C47606 * C945 +
           (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
               C47606 * C47877) *
              C47913 +
          ((C21841 * C42705 + C22362 * C42706 + C23525 * C42707) * C47795 *
               C47606 * C945 -
           (C26407 * C42707 + C26406 * C42706 +
            (C21671 * C128 - C21672 * C120 - C21671 * C129 + C47533 * C141) *
                C42705) *
               C47795 * C47606 * C944 -
           (C23524 * C42707 + C22363 * C42706 + C21842 * C42705) * C47795 *
               C47606 * C47877) *
              C47900 +
          (((C21671 * C130 - C21672 * C121 - C21671 * C131 + C47533 * C142) *
                C42705 +
            C26408 * C42706 + C26410 * C42707) *
               C47795 * C47606 * C944 -
           (C26409 * C42707 + C22365 * C42706 + C21844 * C42705) * C47795 *
               C47606 * C945 +
           (C21845 * C42705 + C22364 * C42706 +
            (C21671 * C1177 - C21672 * C1160 - C21671 * C1178 +
             C47533 * C1187) *
                C42707) *
               C47795 * C47606 * C47877) *
              C47871)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21671 * C126 - C21672 * C119 - C21671 * C127 + C47533 * C140) *
               C42705 +
           C26404 * C42706 + C26405 * C42707) *
              C47795 * C47606 * C1012 -
          (C22702 * C42707 + C22361 * C42706 + C21838 * C42705) * C47795 *
              C47606 * C1013 +
          (C21839 * C42705 + C22360 * C42706 + C22703 * C42707) * C47795 *
              C47606 * C1014 -
          (C22705 * C42707 + C22704 * C42706 + C21840 * C42705) * C47795 *
              C47606 * C1015 +
          (C22560 * C42705 + C23078 * C42706 +
           (C21671 * C22674 - C21672 * C22673 - C21671 * C22675 +
            C47533 * C22676) *
               C42707) *
              C47795 * C47606 * C1016) *
         C47560) /
            (p * q * std::sqrt(p + q));
}
