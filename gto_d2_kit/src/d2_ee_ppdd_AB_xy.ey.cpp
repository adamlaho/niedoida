/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46274 = ae * be;
    const double C46273 = ae + be;
    const double C46272 = 0 * be;
    const double C46271 = xA - xB;
    const double C46287 = yA - yB;
    const double C46307 = 0 * be;
    const double C46322 = xP - xQ;
    const double C46321 = yP - yQ;
    const double C46320 = p + q;
    const double C46319 = p * q;
    const double C46327 = bs[3];
    const double C46337 = bs[4];
    const double C46346 = bs[5];
    const double C46360 = bs[6];
    const double C46382 = bs[7];
    const double C46535 = zP - zQ;
    const double C46632 = bs[2];
    const double C117 = bs[0];
    const double C47014 = ce + de;
    const double C47013 = ce * de;
    const double C47012 = xC - xD;
    const double C47046 = yC - yD;
    const double C47064 = zC - zD;
    const double C47238 = zA - zB;
    const double C46275 = std::pow(C46273, 2);
    const double C47003 = 2 * C46273;
    const double C46276 = C46274 * C46271;
    const double C46994 = std::pow(C46271, 2);
    const double C47299 = C46271 * be;
    const double C47298 = C46271 * ae;
    const double C46308 = C46274 * C46287;
    const double C47251 = std::pow(C46287, 2);
    const double C47333 = C46287 * be;
    const double C47331 = C46287 * ae;
    const double C46347 = std::pow(C46322, 2);
    const double C46407 = C46322 * ae;
    const double C46329 = C46321 * be;
    const double C46328 = C46322 * C46321;
    const double C46502 = std::pow(C46321, 2);
    const double C46323 = 2 * C46319;
    const double C46539 = std::pow(C46535, 2);
    const double C47018 = 2 * C47014;
    const double C47017 = std::pow(C47014, 2);
    const double C47019 = C47012 * de;
    const double C47016 = C47012 * ce;
    const double C47015 = std::pow(C47012, 2);
    const double C47047 = std::pow(C47046, 2);
    const double C47106 = C47046 * de;
    const double C47104 = C47046 * ce;
    const double C47065 = std::pow(C47064, 2);
    const double C47148 = C47064 * de;
    const double C47146 = C47064 * ce;
    const double C47268 = std::pow(C47238, 2);
    const double C47334 = C47238 * be;
    const double C47332 = C47238 * ae;
    const double C46277 = 2 * C46275;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * ae * be) /
                        C46275;
    const double C47300 = std::pow(C47003, -1);
    const double C46995 = C46994 * C46274;
    const double C47252 = C47251 * C46274;
    const double C46410 = C46327 * C46407;
    const double C46413 = C46337 * C46407;
    const double C46419 = C46346 * C46407;
    const double C46433 = C46360 * C46407;
    const double C46454 = C46382 * C46407;
    const double C46332 = C46327 * C46329;
    const double C46339 = C46337 * C46329;
    const double C46349 = C46346 * C46329;
    const double C46364 = C46360 * C46329;
    const double C46388 = C46382 * C46329;
    const double C46331 = C46328 * ae;
    const double C46324 = C46323 / C46320;
    const double C124 = (-(bs[1] * C46329 * C46323) / C46320) / C46273;
    const double C125 = (-(bs[1] * C46407 * C46323) / C46320) / C46273;
    const double C118 = -(C46322 * bs[1] * C46323) / C46320;
    const double C287 = -(C46321 * bs[1] * C46323) / C46320;
    const double C468 = -(C46535 * bs[1] * C46323) / C46320;
    const double C47031 = std::pow(C47018, -1);
    const double C47308 = std::pow(C47018, -2);
    const double C47032 = 2 * C47017;
    const double C47312 = C47017 * C47018;
    const double C47311 = 4 * C47017;
    const double C47301 = std::pow(C47016, 2);
    const double C47020 = C47015 * C47013;
    const double C47048 = C47047 * C47013;
    const double C47313 = std::pow(C47104, 2);
    const double C47066 = C47065 * C47013;
    const double C47315 = std::pow(C47146, 2);
    const double C47269 = C47268 * C46274;
    const double C46996 = C46995 / C46273;
    const double C47253 = C47252 / C46273;
    const double C46333 = C46331 * be;
    const double C46326 = -C46324;
    const double C46336 = std::pow(C46324, 4);
    const double C46359 = std::pow(C46324, 6);
    const double C139 =
        (ae * std::pow(C46324, 2) * bs[2] * C46321 * be +
         C46322 * std::pow(-C46324, 3) * bs[3] * C46322 * C46321 * ae * be) /
        C46275;
    const double C46631 = std::pow(C46324, 2);
    const double C126 =
        (C46322 * std::pow(C46324, 2) * bs[2] * C46329) / C46273;
    const double C127 =
        (C46322 * std::pow(C46324, 2) * bs[2] * C46407) / C46273 -
        (ae * bs[1] * C46323) / (C46320 * C46273);
    const double C47346 = 4 * C47312;
    const double C47345 = C47014 * C47311;
    const double C47021 = C47020 / C47014;
    const double C47049 = C47048 / C47014;
    const double C47067 = C47066 / C47014;
    const double C47270 = C47269 / C46273;
    const double C46997 = -C46996;
    const double C47254 = -C47253;
    const double C46338 = C46337 * C46333;
    const double C46348 = C46346 * C46333;
    const double C46362 = C46360 * C46333;
    const double C46386 = C46382 * C46333;
    const double C46330 = std::pow(C46326, 3);
    const double C46345 = std::pow(C46326, 5);
    const double C46381 = std::pow(C46326, 7);
    const double C46341 = C46336 * C46339;
    const double C46415 = C46336 * C46413;
    const double C46420 = C46337 * C46336;
    const double C46367 = C46359 * C46364;
    const double C46435 = C46359 * C46433;
    const double C46455 = C46360 * C46359;
    const double C46633 = C46632 * C46631;
    const double C297 = (C46321 * C46631 * C46632 * C46329) / C46273 -
                        (be * bs[1] * C46323) / (C46320 * C46273);
    const double C298 = (C46321 * C46631 * C46632 * C46407) / C46273;
    const double C478 = (C46535 * C46631 * C46632 * C46329) / C46273;
    const double C479 = (C46535 * C46631 * C46632 * C46407) / C46273;
    const double C47022 = -C47021;
    const double C47050 = -C47049;
    const double C47068 = -C47067;
    const double C47271 = -C47270;
    const double C46998 = std::exp(C46997);
    const double C47255 = std::exp(C47254);
    const double C46340 = C46336 * C46338;
    const double C46366 = C46359 * C46362;
    const double C46334 = C46330 * C46332;
    const double C46408 = C46327 * C46330;
    const double C46411 = C46330 * C46410;
    const double C317 = (be * std::pow(C46324, 2) * bs[2] * C46322 * ae +
                         C46321 * C46330 * C46327 * C46333) /
                        C46275;
    const double C498 = ((zP - zQ) * C46330 * C46327 * C46333) / C46275;
    const double C46351 = C46345 * C46349;
    const double C46350 = C46345 * C46348;
    const double C46421 = C46345 * C46419;
    const double C46434 = C46346 * C46345;
    const double C46391 = C46381 * C46388;
    const double C46390 = C46381 * C46386;
    const double C46457 = C46381 * C46454;
    const double C46344 = ae * C46341;
    const double C46343 = C46322 * C46341;
    const double C46712 = C46321 * C46341;
    const double C46416 = C46322 * C46415;
    const double C46500 = be * C46415;
    const double C46499 = C46321 * C46415;
    const double C46423 = C46322 * C46420;
    const double C46422 = C46420 * ae;
    const double C46639 = C46420 * C46347;
    const double C46715 = C46420 * C46502;
    const double C46788 = C46321 * C46420;
    const double C46787 = C46420 * be;
    const double C46970 = C46420 * C46539;
    const double C46984 = C46535 * C46420;
    const double C46369 = C46367 * C46347;
    const double C46380 = ae * C46367;
    const double C46379 = C46322 * C46367;
    const double C46845 = C46321 * C46367;
    const double C46882 = C46367 * C46539;
    const double C46439 = C46322 * C46435;
    const double C46551 = C46435 * C46502;
    const double C46593 = be * C46435;
    const double C46592 = C46321 * C46435;
    const double C46889 = C46435 * C46539;
    const double C46460 = C46455 * C46347;
    const double C46459 = C46322 * C46455;
    const double C46458 = C46455 * ae;
    const double C46849 = C46455 * C46502;
    const double C119 = C46633 * C46347 - (bs[1] * C46323) / C46320;
    const double C288 = C46321 * C46322 * C46633;
    const double C290 = C46633 * C46502 - (bs[1] * C46323) / C46320;
    const double C469 = C46535 * C46322 * C46633;
    const double C471 = C46633 * C46539 - (bs[1] * C46323) / C46320;
    const double C906 = C46535 * C46321 * C46633;
    const double C47023 = std::exp(C47022);
    const double C47051 = std::exp(C47050);
    const double C47069 = std::exp(C47068);
    const double C47272 = std::exp(C47271);
    const double C46278 = C46276 * C46998;
    const double C47336 = C47300 * C46998;
    const double C47335 = C46998 * C47298;
    const double C4717 = -(C46998 * C47299) / C46273;
    const double C148 = C47255 * C139;
    const double C146 = C47255 * C126;
    const double C10666 = C47255 * C478;
    const double C46309 = C46308 * C47255;
    const double C113 = -(2 * ae * be * (yA - yB) * C47255) / (ae + be);
    const double C4719 =
        ((C47255 - (C46287 * 2 * C46274 * C46287 * C47255) / C46273) * ae) /
            C46273 -
        (0 * be) / C46277;
    const double C4720 =
        (0 * ae) / C46273 - (C46274 * C46287 * C47255) / C46275;
    const double C15921 =
        (-(0 * be) / C46273) / (2 * C46273) -
        ((C47255 - (C46287 * 2 * C46274 * C46287 * C47255) / C46273) * be) /
            C46273;
    const double C15922 =
        (-(2 * C46274 * C46287 * C47255) / C46273) / (2 * C46273) -
        (0 * be) / C46273;
    const double C47367 = C47300 * C47255;
    const double C47366 = C47255 * C47331;
    const double C15917 = -(C47255 * C47333) / C46273;
    const double C501 =
        (C46330 * C46327 * C46333 + C46340 * std::pow(zP - zQ, 2)) / C46275;
    const double C46368 = C46322 * C46366;
    const double C46550 = C46321 * C46366;
    const double C46584 = C46366 * C46539;
    const double C46619 = C46535 * C46366;
    const double C140 = (C46330 * C46327 * C46333 + ae * C46322 * C46334 +
                         C46322 * (ae * C46334 + C46322 * std::pow(C46324, 4) *
                                                     bs[4] * C46333)) /
                        C46275;
    const double C141 =
        (2 * (ae * C46334 + C46322 * C46340) +
         ae * (C46334 + C46341 * std::pow(C46322, 2)) +
         C46322 * (C46340 + ae * C46322 * C46341 +
                   C46322 * (ae * C46341 +
                             C46322 * std::pow(C46326, 5) * bs[5] * C46333))) /
        C46275;
    const double C318 = (be * (C46322 * C46330 * C46327 * C46322 * ae +
                               bs[2] * std::pow(C46324, 2) * ae) +
                         C46321 * (ae * C46334 + C46322 * C46340)) /
                        C46275;
    const double C499 = ((zP - zQ) * (ae * C46334 + C46322 * C46340)) / C46275;
    const double C128 =
        (std::pow(C46324, 2) * bs[2] * C46329 + C46334 * C46347) / C46273;
    const double C130 =
        (2 * C46322 * C46334 + C46322 * (C46334 + C46341 * C46347)) / C46273;
    const double C299 =
        (C46321 * C46322 * C46334 + C46322 * C46633 * be) / C46273;
    const double C303 =
        (C46631 * C46632 * C46329 + C46321 * (C46321 * C46334 + C46633 * be) +
         C46321 * C46633 * be) /
        C46273;
    const double C480 = (C46535 * C46322 * C46334) / C46273;
    const double C482 = (C46535 * (C46334 + C46341 * C46347)) / C46273;
    const double C484 = (C46631 * C46632 * C46329 + C46334 * C46539) / C46273;
    const double C911 = (C46535 * (C46321 * C46334 + C46633 * be)) / C46273;
    const double C1974 =
        (2 * C46535 * C46334 + C46535 * (C46334 + C46341 * C46539)) / C46273;
    const double C46414 = C46408 * ae;
    const double C46638 = C46322 * C46408;
    const double C46714 = C46321 * C46408;
    const double C46713 = C46408 * be;
    const double C301 = (C46321 * (C46334 + C46341 * C46347) +
                         (C46633 + C46408 * C46347) * be) /
                        C46273;
    const double C1130 =
        (2 * (C46321 * C46334 + C46633 * be) +
         C46321 * (C46334 + C46321 * (C46321 * C46341 + C46408 * be) +
                   C46321 * C46408 * be) +
         (C46633 + C46408 * C46502) * be) /
        C46273;
    const double C120 =
        2 * C46322 * C46633 + C46322 * (C46633 + C46408 * C46347);
    const double C289 = C46321 * (C46633 + C46408 * C46347);
    const double C470 = C46535 * (C46633 + C46408 * C46347);
    const double C1124 =
        2 * C46321 * C46633 + C46321 * (C46633 + C46408 * C46502);
    const double C1261 = C46535 * (C46633 + C46408 * C46502);
    const double C1968 =
        2 * C46535 * C46633 + C46535 * (C46633 + C46408 * C46539);
    const double C1971 =
        3 * (C46633 + C46408 * C46539) +
        C46535 * (2 * C46535 * C46408 + C46535 * (C46408 + C46420 * C46539));
    const double C320 = (C46330 * C46327 * C46333 + be * C46321 * C46411 +
                         C46321 * (be * C46411 + C46321 * C46340)) /
                        C46275;
    const double C921 = ((zP - zQ) * (be * C46411 + C46321 * C46340)) / C46275;
    const double C129 =
        (C46631 * C46632 * C46407 + C46322 * (C46322 * C46411 + C46633 * ae) +
         C46322 * C46633 * ae) /
        C46273;
    const double C300 = (C46321 * (C46322 * C46411 + C46633 * ae)) / C46273;
    const double C304 = (C46631 * C46632 * C46407 + C46411 * C46502) / C46273;
    const double C481 = (C46535 * (C46322 * C46411 + C46633 * ae)) / C46273;
    const double C485 = (C46631 * C46632 * C46407 + C46411 * C46539) / C46273;
    const double C912 = (C46535 * C46321 * C46411) / C46273;
    const double C1131 =
        (2 * C46321 * C46411 + C46321 * (C46411 + C46415 * C46502)) / C46273;
    const double C1274 = (C46535 * (C46411 + C46415 * C46502)) / C46273;
    const double C1975 =
        (2 * C46535 * C46411 + C46535 * (C46411 + C46415 * C46539)) / C46273;
    const double C10668 = C47255 * C498;
    const double C46353 = C46351 * C46347;
    const double C46358 = ae * C46351;
    const double C46357 = C46322 * C46351;
    const double C46786 = C46321 * C46351;
    const double C46832 = C46351 * C46539;
    const double C46881 = C46535 * C46351;
    const double C1980 =
        (3 * (C46334 + C46341 * C46539) +
         C46535 * (2 * C46535 * C46341 + C46535 * (C46341 + C46351 * C46539))) /
        C46273;
    const double C46352 = C46322 * C46350;
    const double C46501 = C46321 * C46350;
    const double C1142 = (2 * (be * C46411 + C46321 * C46340) +
                          be * (C46411 + C46415 * std::pow(C46321, 2)) +
                          C46321 * (C46340 + be * C46321 * C46415 +
                                    C46321 * (be * C46415 + C46321 * C46350))) /
                         C46275;
    const double C1986 = (2 * C46535 * C46340 +
                          C46535 * (C46340 + C46350 * std::pow(C46535, 2))) /
                         C46275;
    const double C1989 =
        (3 * (C46340 + C46350 * C46539) +
         C46535 * (2 * C46535 * C46350 + C46535 * (C46350 + C46366 * C46539))) /
        C46275;
    const double C46424 = C46322 * C46421;
    const double C46504 = C46421 * C46502;
    const double C46549 = be * C46421;
    const double C46548 = C46321 * C46421;
    const double C46835 = C46421 * C46539;
    const double C46888 = C46535 * C46421;
    const double C1981 =
        (3 * (C46411 + C46415 * C46539) +
         C46535 * (2 * C46535 * C46415 + C46535 * (C46415 + C46421 * C46539))) /
        C46273;
    const double C46438 = C46434 * C46347;
    const double C46437 = C46322 * C46434;
    const double C46436 = C46434 * ae;
    const double C46789 = C46434 * C46502;
    const double C46847 = C46321 * C46434;
    const double C46846 = C46434 * be;
    const double C46985 = C46434 * C46539;
    const double C46393 = C46391 * C46347;
    const double C46392 = C46322 * C46390;
    const double C46594 = C46321 * C46390;
    const double C46620 = C46390 * C46539;
    const double C46461 = C46322 * C46457;
    const double C46596 = C46457 * C46502;
    const double C486 = (C46322 * C46334 + C46343 * C46539) / C46273;
    const double C1268 = (C46321 * C46411 + C46499 * C46539) / C46273;
    const double C46425 = C46423 * ae;
    const double C46643 = 2 * C46423;
    const double C46722 = C46321 * C46423;
    const double C46721 = C46423 * be;
    const double C46640 = C46408 + C46639;
    const double C46717 = C46408 + C46715;
    const double C46793 = 2 * C46788;
    const double C46791 = C46788 * be;
    const double C46971 = C46408 + C46970;
    const double C46986 = 2 * C46984;
    const double C46371 = C46351 + C46369;
    const double C46387 = 2 * C46379;
    const double C46385 = ae * C46379;
    const double C46801 = C46321 * C46379;
    const double C46838 = C46379 * C46539;
    const double C46884 = C46351 + C46882;
    const double C46555 = C46421 + C46551;
    const double C46600 = 2 * C46592;
    const double C46598 = be * C46592;
    const double C46878 = C46592 * C46539;
    const double C46891 = C46421 + C46889;
    const double C46463 = C46434 + C46460;
    const double C46462 = C46459 * ae;
    const double C46804 = C46459 * C46502;
    const double C46853 = C46434 + C46849;
    const double C47025 = C47023 * C47016;
    const double C47024 = C47023 / C47018;
    const double C47034 = C47031 * C47023;
    const double C47304 = C47023 * C47019;
    const double C47343 = C47308 * C47023;
    const double C47337 = C47023 * C47301;
    const double C47105 = C47051 / C47018;
    const double C47107 = C47051 * C47104;
    const double C47114 = C47031 * C47051;
    const double C47319 = C47051 * C47106;
    const double C47349 = C47308 * C47051;
    const double C47347 = C47051 * C47313;
    const double C47147 = C47069 / C47018;
    const double C47149 = C47069 * C47146;
    const double C47156 = C47031 * C47069;
    const double C47325 = C47069 * C47148;
    const double C47352 = C47308 * C47069;
    const double C47350 = C47069 * C47315;
    const double C47369 = C47300 * C47272;
    const double C47368 = C47272 * C47332;
    const double C31197 = -(C47272 * C47334) / C46273;
    const double C116 = ((0 * ae) / C46273 - C46278 / C46275) / (2 * C46273) -
                        (0 * be) / C46273;
    const double C4721 =
        (-C46272 / C46273) / (2 * C46273) -
        ((C46998 - (C46271 * 2 * C46278) / C46273) * be) / C46273;
    const double C4722 =
        (-(2 * C46278) / C46273) / (2 * C46273) - (0 * be) / C46273;
    const double C15923 =
        ((C46998 - (C46271 * 2 * C46278) / C46273) * ae) / C46273 -
        C46272 / C46277;
    const double C15924 = (0 * ae) / C46273 - C46278 / C46275;
    const double C21520 = -(2 * C46278) / C46273;
    const double C115 =
        (((C46998 - (C46271 * 2 * C46278) / C46273) * ae) / C46273 -
         C46272 / C46277) /
            (2 * C46273) -
        ((C46271 * ((0 * ae) / C46273 - C46278 / C46275) + C47336) * be) /
            C46273;
    const double C104 = C47336 / C47003;
    const double C102 = C46998 / C47003 - (C47335 * C47299) / C46275;
    const double C103 = C47335 / C46277 - (C47336 * C47299) / C46273;
    const double C15919 = C47335 / C46273;
    const double C21519 = ((0 * ae) / C46273 - C46309 / C46275) / (2 * C46273) -
                          (0 * be) / C46273;
    const double C151 = C113 * C119;
    const double C149 = C113 * C127;
    const double C147 = C113 * C118;
    const double C328 = C113 * C288;
    const double C509 = C113 * C469;
    const double C10674 = C113 * C471;
    const double C10669 = C113 * C479;
    const double C10667 = C113 * C468;
    const double C11142 = C113 * C906;
    const double C4732 = C4719 * C119;
    const double C4729 = C4719 * C127;
    const double C4725 = C4719 * C118;
    const double C4902 = C4719 * C288;
    const double C5080 = C4719 * C469;
    const double C36948 = C4719 * C471;
    const double C36945 = C4719 * C479;
    const double C36941 = C4719 * C468;
    const double C37410 = C4719 * C906;
    const double C4727 = C4720 * C288;
    const double C36943 = C4720 * C906;
    const double C15934 = C15921 * C119;
    const double C15931 = C15921 * C127;
    const double C15927 = C15921 * C118;
    const double C16104 = C15921 * C288;
    const double C16282 = C15921 * C469;
    const double C25966 = C15921 * C471;
    const double C25963 = C15921 * C479;
    const double C25959 = C15921 * C468;
    const double C26428 = C15921 * C906;
    const double C15929 = C15922 * C288;
    const double C25961 = C15922 * C906;
    const double C21518 =
        (((C47255 - (C46287 * 2 * C46309) / C46273) * ae) / C46273 -
         C46307 / C46277) /
            (2 * C46273) -
        ((C46287 * ((0 * ae) / C46273 - C46309 / C46275) + C47367) * be) /
            C46273;
    const double C21515 = C47367 / C47003;
    const double C4715 = C47366 / C46273;
    const double C21513 = C47255 / C47003 - (C47366 * C47333) / C46275;
    const double C21514 = C47366 / C46277 - (C47367 * C47333) / C46273;
    const double C15930 = C15917 * C139;
    const double C15926 = C15917 * C126;
    const double C25962 = C15917 * C498;
    const double C25958 = C15917 * C478;
    const double C10677 = C47255 * C501;
    const double C25971 = C15917 * C501;
    const double C46585 = C46350 + C46584;
    const double C46621 = 2 * C46619;
    const double C152 = C47255 * C140;
    const double C15939 = C15917 * C140;
    const double C157 = C47255 * C141;
    const double C15946 = C15917 * C141;
    const double C331 = C47255 * C318;
    const double C4730 = C47367 * C318;
    const double C15932 = C47367 * C318;
    const double C16109 = C15917 * C318;
    const double C512 = C47255 * C499;
    const double C16287 = C15917 * C499;
    const double C150 = C47255 * C128;
    const double C15935 = C15917 * C128;
    const double C155 = C47255 * C130;
    const double C15942 = C15917 * C130;
    const double C329 = C47255 * C299;
    const double C4726 = C47367 * C299;
    const double C15928 = C47367 * C299;
    const double C16105 = C15917 * C299;
    const double C510 = C47255 * C480;
    const double C16283 = C15917 * C480;
    const double C514 = C47255 * C482;
    const double C16298 = C15917 * C482;
    const double C10675 = C47255 * C484;
    const double C25967 = C15917 * C484;
    const double C11143 = C47255 * C911;
    const double C25960 = C47367 * C911;
    const double C26429 = C15917 * C911;
    const double C36942 = C47367 * C911;
    const double C12390 = C47255 * C1974;
    const double C27674 = C15917 * C1974;
    const double C46417 = C46416 + C46414;
    const double C305 =
        (C46322 * C46334 + C46321 * (C46321 * C46343 + C46638 * be) +
         C46321 * C46638 * be) /
        C46273;
    const double C913 = (C46535 * (C46321 * C46343 + C46638 * be)) / C46273;
    const double C291 = C46322 * C46633 + C46638 * C46502;
    const double C472 = C46322 * C46633 + C46638 * C46539;
    const double C907 = C46535 * C46321 * C46638;
    const double C1125 =
        2 * C46321 * C46638 + C46321 * (C46638 + C46423 * C46502);
    const double C1262 = C46535 * (C46638 + C46423 * C46502);
    const double C1969 =
        2 * C46535 * C46638 + C46535 * (C46638 + C46423 * C46539);
    const double C1258 = C46321 * C46633 + C46714 * C46539;
    const double C2362 =
        2 * C46535 * C46714 + C46535 * (C46714 + C46788 * C46539);
    const double C46716 = C46712 + C46713;
    const double C333 = C47255 * C301;
    const double C4735 = C47367 * C301;
    const double C15937 = C47367 * C301;
    const double C16120 = C15917 * C301;
    const double C154 = C113 * C120;
    const double C4741 = C4719 * C120;
    const double C15943 = C15921 * C120;
    const double C332 = C113 * C289;
    const double C4734 = C4720 * C289;
    const double C4919 = C4719 * C289;
    const double C15936 = C15922 * C289;
    const double C16121 = C15921 * C289;
    const double C513 = C113 * C470;
    const double C5097 = C4719 * C470;
    const double C16299 = C15921 * C470;
    const double C11531 = C113 * C1261;
    const double C26430 = C15922 * C1261;
    const double C26819 = C15921 * C1261;
    const double C37412 = C4720 * C1261;
    const double C37801 = C4719 * C1261;
    const double C12391 = C113 * C1968;
    const double C27675 = C15921 * C1968;
    const double C38653 = C4719 * C1968;
    const double C12394 = C113 * C1971;
    const double C27682 = C15921 * C1971;
    const double C38660 = C4719 * C1971;
    const double C11145 = C47255 * C921;
    const double C25964 = C47367 * C921;
    const double C26433 = C15917 * C921;
    const double C36946 = C47367 * C921;
    const double C153 = C113 * C129;
    const double C4736 = C4719 * C129;
    const double C15938 = C15921 * C129;
    const double C330 = C113 * C300;
    const double C4731 = C4720 * C300;
    const double C4906 = C4719 * C300;
    const double C15933 = C15922 * C300;
    const double C16108 = C15921 * C300;
    const double C511 = C113 * C481;
    const double C5084 = C4719 * C481;
    const double C16286 = C15921 * C481;
    const double C10676 = C113 * C485;
    const double C25970 = C15921 * C485;
    const double C36952 = C4719 * C485;
    const double C11144 = C113 * C912;
    const double C25965 = C15922 * C912;
    const double C26432 = C15921 * C912;
    const double C36947 = C4720 * C912;
    const double C37414 = C4719 * C912;
    const double C11533 = C113 * C1274;
    const double C26434 = C15922 * C1274;
    const double C26823 = C15921 * C1274;
    const double C37416 = C4720 * C1274;
    const double C37805 = C4719 * C1274;
    const double C12393 = C113 * C1975;
    const double C27679 = C15921 * C1975;
    const double C38657 = C4719 * C1975;
    const double C46355 = C46341 + C46353;
    const double C46370 = C46358 + C46368;
    const double C46363 = 2 * C46357;
    const double C46361 = ae * C46357;
    const double C46720 = C46321 * C46357;
    const double C1132 =
        (2 * (C46321 * C46343 + C46638 * be) +
         C46321 * (C46343 + C46321 * (C46321 * C46357 + C46423 * be) +
                   C46321 * C46423 * be) +
         (C46638 + C46423 * C46502) * be) /
        C46273;
    const double C1976 =
        (2 * C46535 * C46343 + C46535 * (C46343 + C46357 * C46539)) / C46273;
    const double C1982 =
        (3 * (C46343 + C46357 * C46539) +
         C46535 * (2 * C46535 * C46357 + C46535 * (C46357 + C46379 * C46539))) /
        C46273;
    const double C46790 = C46786 + C46787;
    const double C46833 = C46341 + C46832;
    const double C46883 = 2 * C46881;
    const double C12395 = C47255 * C1980;
    const double C27683 = C15917 * C1980;
    const double C46354 = C46344 + C46352;
    const double C46503 = C46500 + C46501;
    const double C12392 = C47255 * C1986;
    const double C27678 = C15917 * C1986;
    const double C12397 = C47255 * C1989;
    const double C27687 = C15917 * C1989;
    const double C46426 = C46424 + C46422;
    const double C46505 = C46415 + C46504;
    const double C46553 = C46549 + C46550;
    const double C46554 = 2 * C46548;
    const double C46552 = be * C46548;
    const double C2366 =
        (2 * C46535 * C46499 + C46535 * (C46499 + C46548 * C46539)) / C46273;
    const double C6842 =
        (3 * (C46499 + C46548 * C46539) +
         C46535 * (2 * C46535 * C46548 + C46535 * (C46548 + C46592 * C46539))) /
        C46273;
    const double C46836 = C46415 + C46835;
    const double C46890 = 2 * C46888;
    const double C12396 = C113 * C1981;
    const double C27686 = C15921 * C1981;
    const double C38664 = C4719 * C1981;
    const double C46441 = C46420 + C46438;
    const double C46440 = C46437 * ae;
    const double C46456 = 2 * C46437;
    const double C46723 = C46437 * C46502;
    const double C46803 = C46321 * C46437;
    const double C46802 = C46437 * be;
    const double C46973 = C46437 * C46539;
    const double C1972 =
        3 * (C46638 + C46423 * C46539) +
        C46535 * (2 * C46535 * C46423 + C46535 * (C46423 + C46437 * C46539));
    const double C46442 = C46439 + C46436;
    const double C46792 = C46420 + C46789;
    const double C46854 = 2 * C46847;
    const double C46852 = C46847 * be;
    const double C46981 = C46847 * C46539;
    const double C6839 =
        3 * (C46714 + C46788 * C46539) +
        C46535 * (2 * C46535 * C46788 + C46535 * (C46788 + C46847 * C46539));
    const double C46851 = C46845 + C46846;
    const double C46987 = C46420 + C46985;
    const double C46395 = C46367 + C46393;
    const double C46394 = C46380 + C46392;
    const double C46599 = C46593 + C46594;
    const double C46622 = C46366 + C46620;
    const double C46464 = C46461 + C46458;
    const double C46601 = C46435 + C46596;
    const double C517 = C47255 * C486;
    const double C16290 = C15917 * C486;
    const double C11529 = C113 * C1268;
    const double C25972 = C15922 * C1268;
    const double C26815 = C15921 * C1268;
    const double C36954 = C4720 * C1268;
    const double C37797 = C4719 * C1268;
    const double C1259 = C46321 * C46638 + C46722 * C46539;
    const double C121 = 3 * (C46633 + C46408 * C46347) +
                        C46322 * (2 * C46638 + C46322 * C46640);
    const double C292 = C46633 + C46408 * C46347 + C46640 * C46502;
    const double C293 = C46321 * (2 * C46638 + C46322 * C46640);
    const double C473 = C46633 + C46408 * C46347 + C46640 * C46539;
    const double C474 = C46535 * (2 * C46638 + C46322 * C46640);
    const double C908 = C46535 * C46321 * C46640;
    const double C1127 = 3 * (C46633 + C46408 * C46502) +
                         C46321 * (2 * C46714 + C46321 * C46717);
    const double C1264 = C46633 + C46408 * C46502 + C46717 * C46539;
    const double C1666 = C46535 * (2 * C46714 + C46321 * C46717);
    const double C12381 =
        4 * (2 * C46535 * C46408 + C46535 * C46971) +
        C46535 * (3 * C46971 + C46535 * (2 * C46535 * C46420 +
                                         C46535 * (C46420 + C46434 * C46539)));
    const double C46373 = C46322 * C46371;
    const double C46383 = 3 * C46371;
    const double C46378 = ae * C46371;
    const double C46728 = C46321 * C46371;
    const double C46389 = C46366 + C46385;
    const double C46839 = C46357 + C46838;
    const double C46885 = C46535 * C46884;
    const double C46558 = C46321 * C46555;
    const double C46595 = 3 * C46555;
    const double C46591 = be * C46555;
    const double C46602 = C46366 + C46598;
    const double C46879 = C46548 + C46878;
    const double C46892 = C46535 * C46891;
    const double C46466 = C46322 * C46463;
    const double C46465 = C46463 * ae;
    const double C46731 = C46463 * C46502;
    const double C46807 = C46437 + C46804;
    const double C46856 = C46321 * C46853;
    const double C47026 = C47025 * C47019;
    const double C47033 = C47025 / C47032;
    const double C47305 = C47031 * C47025;
    const double C47303 = C47025 / C47014;
    const double C284 = (C47023 * std::pow(C47019, 2)) / C47017 + C47024;
    const double C47035 = C47034 * C47019;
    const double C47309 = C47016 * C47034;
    const double C47307 = 2 * C47034;
    const double C47353 = C47034 / C47311;
    const double C112 = C47034 / C47346;
    const double C2843 = C47034 / C47018;
    const double C47339 = C47304 / C47014;
    const double C285 = (-2 * C47031 * C47304) / C47014;
    const double C47370 = C47337 / C47017;
    const double C1050 = (C47051 * std::pow(C47106, 2)) / C47017 + C47105;
    const double C47108 = C47107 * C47106;
    const double C47113 = C47107 / C47032;
    const double C47317 = C47107 / C47014;
    const double C47314 = C47031 * C47107;
    const double C47115 = C47114 * C47106;
    const double C47323 = C47104 * C47114;
    const double C47322 = 2 * C47114;
    const double C47359 = C47114 / C47311;
    const double C1122 = C47114 / C47346;
    const double C2840 = C47114 / C47018;
    const double C47355 = C47319 / C47014;
    const double C1051 = (-2 * C47031 * C47319) / C47014;
    const double C47375 = C47347 / C47017;
    const double C1788 = (C47069 * std::pow(C47148, 2)) / C47017 + C47147;
    const double C47150 = C47149 * C47148;
    const double C47155 = C47149 / C47032;
    const double C47318 = C47149 / C47014;
    const double C47316 = C47031 * C47149;
    const double C47157 = C47156 * C47148;
    const double C47329 = C47146 * C47156;
    const double C47328 = 2 * C47156;
    const double C47365 = C47156 / C47311;
    const double C1967 = C47156 / C47346;
    const double C3742 = C47156 / C47018;
    const double C47361 = C47325 / C47014;
    const double C1789 = (-2 * C47031 * C47325) / C47014;
    const double C47377 = C47350 / C47017;
    const double C42157 = C47369 / C47003;
    const double C10371 = C47368 / C46273;
    const double C42155 = C47272 / C47003 - (C47368 * C47334) / C46275;
    const double C42156 = C47368 / C46277 - (C47369 * C47334) / C46273;
    const double C114 =
        (((0 - (C46271 * C46272) / C46273) * ae) / C46273 - (0 * be) / C46277) /
            (2 * C46273) -
        ((C46271 * (((C46998 - (C46271 * 2 * C46278) / C46273) * ae) / C46273 -
                    C46272 / C46277) +
          C15919) *
         be) /
            C46273 +
        (0 * ae) / C46273 - C46278 / C46275;
    const double C4744 = C4715 * C141;
    const double C4740 = C4715 * C130;
    const double C4737 = C4715 * C140;
    const double C4733 = C4715 * C128;
    const double C4728 = C4715 * C139;
    const double C4724 = C4715 * C126;
    const double C4918 = C4715 * C301;
    const double C4907 = C4715 * C318;
    const double C4903 = C4715 * C299;
    const double C5096 = C4715 * C482;
    const double C5088 = C4715 * C486;
    const double C5085 = C4715 * C499;
    const double C5081 = C4715 * C480;
    const double C36953 = C4715 * C501;
    const double C36949 = C4715 * C484;
    const double C36944 = C4715 * C498;
    const double C36940 = C4715 * C478;
    const double C37415 = C4715 * C921;
    const double C37411 = C4715 * C911;
    const double C38665 = C4715 * C1989;
    const double C38661 = C4715 * C1980;
    const double C38656 = C4715 * C1986;
    const double C38652 = C4715 * C1974;
    const double C21517 =
        (((0 - (C46287 * C46307) / C46273) * ae) / C46273 - (0 * be) / C46277) /
            (2 * C46273) -
        ((C46287 * (((C47255 - (C46287 * 2 * C46309) / C46273) * ae) / C46273 -
                    C46307 / C46277) +
          C4715) *
         be) /
            C46273 +
        (0 * ae) / C46273 - C46309 / C46275;
    const double C12387 =
        (4 * (2 * C46535 * C46350 + C46535 * C46585) +
         C46535 *
             (3 * C46585 + C46535 * (2 * C46535 * C46366 +
                                     C46535 * (C46366 + C46390 * C46539)))) /
        C46275;
    const double C166 = C150 - C151;
    const double C10672 = C509 - C510;
    const double C10670 = C510 - C509;
    const double C42379 = C10675 - C10674;
    const double C131 =
        (2 * (C46322 * C46411 + C46633 * ae) +
         C46322 * (C46411 + C46322 * C46417 + C46322 * C46408 * ae) +
         (C46633 + C46408 * C46347) * ae) /
        C46273;
    const double C302 =
        (C46321 * (C46411 + C46322 * C46417 + C46638 * ae)) / C46273;
    const double C306 =
        (C46322 * C46411 + C46633 * ae + C46417 * C46502) / C46273;
    const double C483 =
        (C46535 * (C46411 + C46322 * C46417 + C46638 * ae)) / C46273;
    const double C487 =
        (C46322 * C46411 + C46633 * ae + C46417 * C46539) / C46273;
    const double C914 = (C46535 * C46321 * C46417) / C46273;
    const double C336 = C47255 * C305;
    const double C4910 = C4715 * C305;
    const double C4905 = C47367 * C305;
    const double C16112 = C15917 * C305;
    const double C16107 = C47367 * C305;
    const double C927 = C47255 * C913;
    const double C5083 = C47367 * C913;
    const double C5582 = C4715 * C913;
    const double C16285 = C47367 * C913;
    const double C16784 = C15917 * C913;
    const double C337 = C113 * C291;
    const double C4911 = C4719 * C291;
    const double C4904 = C4720 * C291;
    const double C16113 = C15921 * C291;
    const double C16106 = C15922 * C291;
    const double C518 = C113 * C472;
    const double C5089 = C4719 * C472;
    const double C16291 = C15921 * C472;
    const double C928 = C113 * C907;
    const double C5082 = C4720 * C907;
    const double C5583 = C4719 * C907;
    const double C16284 = C15922 * C907;
    const double C16785 = C15921 * C907;
    const double C1403 = C113 * C1125;
    const double C4913 = C4720 * C1125;
    const double C6118 = C4719 * C1125;
    const double C16115 = C15922 * C1125;
    const double C17304 = C15921 * C1125;
    const double C1561 = C113 * C1262;
    const double C5585 = C4720 * C1262;
    const double C6320 = C4719 * C1262;
    const double C16787 = C15922 * C1262;
    const double C17506 = C15921 * C1262;
    const double C2257 = C113 * C1969;
    const double C7180 = C4719 * C1969;
    const double C18350 = C15921 * C1969;
    const double C11527 = C113 * C1258;
    const double C25968 = C15922 * C1258;
    const double C26811 = C15921 * C1258;
    const double C36950 = C4720 * C1258;
    const double C37793 = C4719 * C1258;
    const double C12868 = C113 * C2362;
    const double C27677 = C15922 * C2362;
    const double C28144 = C15921 * C2362;
    const double C38655 = C4720 * C2362;
    const double C39122 = C4719 * C2362;
    const double C1136 =
        (3 * (C46334 + C46321 * C46716 + C46714 * be) +
         C46321 * (2 * C46716 +
                   C46321 * (C46341 + C46321 * (C46321 * C46351 + C46420 * be) +
                             C46321 * C46420 * be) +
                   C46717 * be) +
         (2 * C46714 + C46321 * C46717) * be) /
        C46273;
    const double C1267 =
        (C46321 * C46334 + C46633 * be + C46716 * C46539) / C46273;
    const double C1273 =
        (C46535 * (C46334 + C46321 * C46716 + C46714 * be)) / C46273;
    const double C1279 = (C46334 + C46321 * C46716 + C46714 * be +
                          (C46341 + C46321 * (C46321 * C46351 + C46420 * be) +
                           C46321 * C46420 * be) *
                              C46539) /
                         C46273;
    const double C1669 =
        (C46535 * (2 * C46716 +
                   C46321 * (C46341 + C46321 * (C46321 * C46351 + C46420 * be) +
                             C46321 * C46420 * be) +
                   C46717 * be)) /
        C46273;
    const double C2365 =
        (2 * C46535 * C46716 +
         C46535 * (C46716 + (C46321 * C46351 + C46420 * be) * C46539)) /
        C46273;
    const double C168 = C154 - C155;
    const double C352 = C332 - C333;
    const double C533 = C513 - C514;
    const double C10682 = C514 - C513;
    const double C43660 = C12391 - C12390;
    const double C167 = C152 - C153;
    const double C10673 = C511 - C512;
    const double C10671 = C512 - C511;
    const double C42380 = C10677 - C10676;
    const double C132 = (3 * (C46334 + C46341 * C46347) +
                         C46322 * (2 * C46343 + C46322 * C46355)) /
                        C46273;
    const double C307 =
        (C46334 + C46341 * C46347 + C46321 * (C46321 * C46355 + C46640 * be) +
         C46321 * C46640 * be) /
        C46273;
    const double C309 = (C46321 * (2 * C46343 + C46322 * C46355) +
                         (2 * C46638 + C46322 * C46640) * be) /
                        C46273;
    const double C488 = (C46334 + C46341 * C46347 + C46355 * C46539) / C46273;
    const double C490 = (C46535 * (2 * C46343 + C46322 * C46355)) / C46273;
    const double C915 = (C46535 * (C46321 * C46355 + C46640 * be)) / C46273;
    const double C1978 =
        (2 * C46535 * C46355 + C46535 * (C46355 + C46371 * C46539)) / C46273;
    const double C46372 = C46322 * C46370;
    const double C46377 = 2 * C46370;
    const double C46509 = C46321 * C46370;
    const double C46365 = C46350 + C46361;
    const double C46724 = C46720 + C46721;
    const double C1404 = C47255 * C1132;
    const double C4912 = C47367 * C1132;
    const double C6119 = C4715 * C1132;
    const double C16114 = C47367 * C1132;
    const double C17305 = C15917 * C1132;
    const double C2258 = C47255 * C1976;
    const double C7181 = C4715 * C1976;
    const double C18351 = C15917 * C1976;
    const double C12399 = C47255 * C1982;
    const double C46794 = C46321 * C46790;
    const double C46844 = 2 * C46790;
    const double C6841 =
        (3 * (C46716 + C46790 * C46539) +
         C46535 *
             (2 * C46535 * C46790 +
              C46535 * (C46790 + (C46321 * C46367 + C46434 * be) * C46539))) /
        C46273;
    const double C12383 =
        (4 * (2 * C46535 * C46341 + C46535 * C46833) +
         C46535 *
             (3 * C46833 + C46535 * (2 * C46535 * C46351 +
                                     C46535 * (C46351 + C46367 * C46539)))) /
        C46273;
    const double C43662 = C12395 - C12394;
    const double C142 =
        (3 * (C46340 + ae * C46343 + C46322 * C46354) +
         ae * (2 * C46343 + C46322 * C46355) +
         C46322 *
             (2 * C46354 + ae * C46355 +
              C46322 * (C46350 + ae * C46322 * C46351 +
                        C46322 * (ae * C46351 + C46322 * std::pow(C46324, 6) *
                                                    bs[6] * C46333)))) /
        C46275;
    const double C319 =
        (be * (C46330 * C46327 * C46407 +
               C46322 * (C46322 * C46336 * C46337 * C46407 + C46408 * ae) +
               C46322 * C46408 * ae) +
         C46321 * (C46340 + ae * C46343 + C46322 * C46354)) /
        C46275;
    const double C321 = (ae * C46334 + C46322 * C46340 + be * C46321 * C46417 +
                         C46321 * (be * C46417 + C46321 * C46354)) /
                        C46275;
    const double C500 =
        ((zP - zQ) * (C46340 + ae * C46343 + C46322 * C46354)) / C46275;
    const double C502 =
        (ae * C46334 + C46322 * C46340 + C46354 * std::pow(zP - zQ, 2)) /
        C46275;
    const double C922 = ((zP - zQ) * (be * C46417 + C46321 * C46354)) / C46275;
    const double C1987 = (2 * C46535 * C46354 +
                          C46535 * (C46354 + C46370 * std::pow(C46535, 2))) /
                         C46275;
    const double C1285 =
        (be * C46411 + C46321 * C46340 + C46503 * std::pow(zP - zQ, 2)) /
        C46275;
    const double C1288 =
        ((zP - zQ) * (C46340 + be * C46499 + C46321 * C46503)) / C46275;
    const double C1291 = (C46340 + be * C46499 + C46321 * C46503 +
                          (C46350 + be * C46321 * C46421 +
                           C46321 * (be * C46421 + C46321 * C46366)) *
                              std::pow(zP - zQ, 2)) /
                         C46275;
    const double C2371 =
        (2 * C46535 * C46503 +
         C46535 * (C46503 + (be * C46421 + C46321 * C46366) * C46539)) /
        C46275;
    const double C43661 = C12393 - C12392;
    const double C46427 = C46322 * C46426;
    const double C46432 = 2 * C46426;
    const double C46508 = be * C46426;
    const double C46507 = C46321 * C46426;
    const double C1143 = (2 * (be * C46417 + C46321 * C46354) +
                          be * (C46417 + C46426 * std::pow(C46321, 2)) +
                          C46321 * (C46354 + be * C46321 * C46426 +
                                    C46321 * (be * C46426 + C46321 * C46370))) /
                         C46275;
    const double C1133 =
        (2 * C46321 * C46417 + C46321 * (C46417 + C46426 * C46502)) / C46273;
    const double C1276 = (C46535 * (C46417 + C46426 * C46502)) / C46273;
    const double C1977 =
        (2 * C46535 * C46417 + C46535 * (C46417 + C46426 * C46539)) / C46273;
    const double C1145 =
        (3 * (C46340 + be * C46499 + C46321 * C46503) +
         be * (2 * C46499 + C46321 * C46505) +
         C46321 * (2 * C46503 + be * C46505 +
                   C46321 * (C46350 + be * C46321 * C46421 +
                             C46321 * (be * C46421 + C46321 * C46366)))) /
        C46275;
    const double C1675 =
        ((zP - zQ) * (2 * C46503 + be * C46505 +
                      C46321 * (C46350 + be * C46321 * C46421 +
                                C46321 * (be * C46421 + C46321 * C46366)))) /
        C46275;
    const double C1137 = (3 * (C46411 + C46415 * C46502) +
                          C46321 * (2 * C46499 + C46321 * C46505)) /
                         C46273;
    const double C1280 = (C46411 + C46415 * C46502 + C46505 * C46539) / C46273;
    const double C1670 = (C46535 * (2 * C46499 + C46321 * C46505)) / C46273;
    const double C7320 =
        (2 * C46535 * C46505 + C46535 * (C46505 + C46555 * C46539)) / C46273;
    const double C46557 = C46321 * C46553;
    const double C46590 = 2 * C46553;
    const double C6845 =
        (3 * (C46503 + C46553 * C46539) +
         C46535 *
             (2 * C46535 * C46553 +
              C46535 * (C46553 + (be * C46435 + C46321 * C46390) * C46539))) /
        C46275;
    const double C46556 = C46350 + C46552;
    const double C12870 = C113 * C2366;
    const double C27681 = C15922 * C2366;
    const double C28148 = C15921 * C2366;
    const double C38659 = C4720 * C2366;
    const double C39126 = C4719 * C2366;
    const double C27688 = C15922 * C6842;
    const double C38666 = C4720 * C6842;
    const double C44026 = C113 * C6842;
    const double C12384 =
        (4 * (2 * C46535 * C46415 + C46535 * C46836) +
         C46535 *
             (3 * C46836 + C46535 * (2 * C46535 * C46421 +
                                     C46535 * (C46421 + C46435 * C46539)))) /
        C46273;
    const double C43663 = C12397 - C12396;
    const double C46443 = C46441 * ae;
    const double C46644 = C46322 * C46441;
    const double C46648 = 3 * C46441;
    const double C46730 = C46321 * C46441;
    const double C46729 = C46441 * be;
    const double C1134 =
        (2 * (C46321 * C46355 + C46640 * be) +
         C46321 * (C46355 + C46321 * (C46321 * C46371 + C46441 * be) +
                   C46321 * C46441 * be) +
         (C46640 + C46441 * C46502) * be) /
        C46273;
    const double C1126 =
        2 * C46321 * C46640 + C46321 * (C46640 + C46441 * C46502);
    const double C1263 = C46535 * (C46640 + C46441 * C46502);
    const double C1970 =
        2 * C46535 * C46640 + C46535 * (C46640 + C46441 * C46539);
    const double C1973 =
        3 * (C46640 + C46441 * C46539) +
        C46535 * (2 * C46535 * C46441 + C46535 * (C46441 + C46463 * C46539));
    const double C46725 = C46423 + C46723;
    const double C46808 = 2 * C46803;
    const double C46806 = C46803 * be;
    const double C2363 =
        2 * C46535 * C46722 + C46535 * (C46722 + C46803 * C46539);
    const double C6840 =
        3 * (C46722 + C46803 * C46539) +
        C46535 * (2 * C46535 * C46803 +
                  C46535 * (C46803 + C46321 * C46459 * C46539));
    const double C46805 = C46801 + C46802;
    const double C46974 = C46423 + C46973;
    const double C12398 = C113 * C1972;
    const double C46444 = C46322 * C46442;
    const double C46453 = 2 * C46442;
    const double C46510 = C46442 * C46502;
    const double C46563 = be * C46442;
    const double C46562 = C46321 * C46442;
    const double C46841 = C46442 * C46539;
    const double C1983 =
        (3 * (C46417 + C46426 * C46539) +
         C46535 * (2 * C46535 * C46426 + C46535 * (C46426 + C46442 * C46539))) /
        C46273;
    const double C46795 = C46321 * C46792;
    const double C46850 = 3 * C46792;
    const double C46848 = C46792 * be;
    const double C7317 =
        2 * C46535 * C46717 + C46535 * (C46717 + C46792 * C46539);
    const double C23001 =
        3 * (C46717 + C46792 * C46539) +
        C46535 * (2 * C46535 * C46792 + C46535 * (C46792 + C46853 * C46539));
    const double C46982 = C46788 + C46981;
    const double C27684 = C15922 * C6839;
    const double C38662 = C4720 * C6839;
    const double C44024 = C113 * C6839;
    const double C46855 = C46321 * C46851;
    const double C46875 = C46851 * C46539;
    const double C46988 = C46535 * C46987;
    const double C46397 = C46322 * C46395;
    const double C1984 =
        (3 * (C46355 + C46371 * C46539) +
         C46535 * (2 * C46535 * C46371 + C46535 * (C46371 + C46395 * C46539))) /
        C46273;
    const double C46396 = C46322 * C46394;
    const double C46564 = C46321 * C46394;
    const double C46587 = C46394 * C46539;
    const double C1990 =
        (3 * (C46354 + C46370 * C46539) +
         C46535 * (2 * C46535 * C46370 + C46535 * (C46370 + C46394 * C46539))) /
        C46275;
    const double C46603 = C46321 * C46599;
    const double C46616 = C46599 * C46539;
    const double C46623 = C46535 * C46622;
    const double C46467 = C46322 * C46464;
    const double C46565 = C46464 * C46502;
    const double C46604 = C46321 * C46601;
    const double C23003 =
        (3 * (C46505 + C46555 * C46539) +
         C46535 * (2 * C46535 * C46555 + C46535 * (C46555 + C46601 * C46539))) /
        C46273;
    const double C2143 = C113 * C1259;
    const double C5091 = C4720 * C1259;
    const double C7042 = C4719 * C1259;
    const double C16293 = C15922 * C1259;
    const double C18212 = C15921 * C1259;
    const double C159 = C113 * C121;
    const double C4748 = C4719 * C121;
    const double C15950 = C15921 * C121;
    const double C341 = C113 * C292;
    const double C4926 = C4719 * C292;
    const double C4921 = C4720 * C292;
    const double C16128 = C15921 * C292;
    const double C16123 = C15922 * C292;
    const double C345 = C113 * C293;
    const double C4743 = C4720 * C293;
    const double C5242 = C4719 * C293;
    const double C15945 = C15922 * C293;
    const double C16444 = C15921 * C293;
    const double C522 = C113 * C473;
    const double C5104 = C4719 * C473;
    const double C16306 = C15921 * C473;
    const double C526 = C113 * C474;
    const double C5380 = C4719 * C474;
    const double C16582 = C15921 * C474;
    const double C932 = C113 * C908;
    const double C5099 = C4720 * C908;
    const double C5590 = C4719 * C908;
    const double C16301 = C15922 * C908;
    const double C16792 = C15921 * C908;
    const double C11534 = C113 * C1264;
    const double C26826 = C15921 * C1264;
    const double C26813 = C15922 * C1264;
    const double C37808 = C4719 * C1264;
    const double C37795 = C4720 * C1264;
    const double C12004 = C113 * C1666;
    const double C26821 = C15922 * C1666;
    const double C27288 = C15921 * C1666;
    const double C37803 = C4720 * C1666;
    const double C38270 = C4719 * C1666;
    const double C43664 = C113 * C12381;
    const double C46375 = C46363 + C46373;
    const double C12385 =
        (4 * (2 * C46535 * C46357 + C46535 * C46839) +
         C46535 * (3 * C46839 +
                   C46535 * (2 * C46535 * C46379 +
                             C46535 * (C46379 + C46322 * C46391 * C46539)))) /
        C46273;
    const double C46886 = C46883 + C46885;
    const double C46560 = C46554 + C46558;
    const double C27671 =
        (4 * (2 * C46535 * C46548 + C46535 * C46879) +
         C46535 * (3 * C46879 +
                   C46535 * (2 * C46535 * C46592 +
                             C46535 * (C46592 + C46321 * C46457 * C46539)))) /
        C46273;
    const double C46893 = C46890 + C46892;
    const double C46468 = C46456 + C46466;
    const double C46733 = C46441 + C46731;
    const double C46810 = C46321 * C46807;
    const double C46858 = C46854 + C46856;
    const double C47027 = C47026 / C47017;
    const double C47340 = 2 * C47305;
    const double C47036 = C47035 / C47014;
    const double C47344 = C47309 / C47032;
    const double C47371 = C47303 - C47339;
    const double C2580 = -C47339;
    const double C47385 = C47370 + C47024;
    const double C47109 = C47108 / C47017;
    const double C47348 = 2 * C47314;
    const double C47116 = C47115 / C47014;
    const double C47358 = C47323 / C47032;
    const double C47379 = C47317 - C47355;
    const double C2472 = -C47355;
    const double C47388 = C47375 + C47105;
    const double C47151 = C47150 / C47017;
    const double C47351 = 2 * C47316;
    const double C47158 = C47157 / C47014;
    const double C47364 = C47329 / C47032;
    const double C47382 = C47318 - C47361;
    const double C3234 = -C47361;
    const double C47389 = C47377 + C47147;
    const double C43667 = C47255 * C12387;
    const double C42385 = C42379 * C21520;
    const double C156 = C113 * C131;
    const double C4745 = C4719 * C131;
    const double C15947 = C15921 * C131;
    const double C334 = C113 * C302;
    const double C4738 = C4720 * C302;
    const double C4923 = C4719 * C302;
    const double C15940 = C15922 * C302;
    const double C16125 = C15921 * C302;
    const double C339 = C113 * C306;
    const double C4915 = C4719 * C306;
    const double C4908 = C4720 * C306;
    const double C16117 = C15921 * C306;
    const double C16110 = C15922 * C306;
    const double C515 = C113 * C483;
    const double C5101 = C4719 * C483;
    const double C16303 = C15921 * C483;
    const double C520 = C113 * C487;
    const double C5093 = C4719 * C487;
    const double C16295 = C15921 * C487;
    const double C930 = C113 * C914;
    const double C5086 = C4720 * C914;
    const double C5587 = C4719 * C914;
    const double C16288 = C15922 * C914;
    const double C16789 = C15921 * C914;
    const double C10680 = C517 - C518;
    const double C10678 = C518 - C517;
    const double C11148 = C927 - C928;
    const double C11146 = C928 - C927;
    const double C11526 = C47255 * C1267;
    const double C25969 = C47367 * C1267;
    const double C26810 = C15917 * C1267;
    const double C36951 = C47367 * C1267;
    const double C37792 = C4715 * C1267;
    const double C11530 = C47255 * C1273;
    const double C26431 = C47367 * C1273;
    const double C26818 = C15917 * C1273;
    const double C37413 = C47367 * C1273;
    const double C37800 = C4715 * C1273;
    const double C11535 = C47255 * C1279;
    const double C26827 = C15917 * C1279;
    const double C26812 = C47367 * C1279;
    const double C37809 = C4715 * C1279;
    const double C37794 = C47367 * C1279;
    const double C12005 = C47255 * C1669;
    const double C26820 = C47367 * C1669;
    const double C27289 = C15917 * C1669;
    const double C37802 = C47367 * C1669;
    const double C38271 = C4715 * C1669;
    const double C12869 = C47255 * C2365;
    const double C27676 = C47367 * C2365;
    const double C28145 = C15917 * C2365;
    const double C38654 = C47367 * C2365;
    const double C39123 = C4715 * C2365;
    const double C43668 = C43660 * C21520;
    const double C42386 = C42380 * C46998;
    const double C158 = C47255 * C132;
    const double C4749 = C4715 * C132;
    const double C15951 = C15917 * C132;
    const double C340 = C47255 * C307;
    const double C4927 = C4715 * C307;
    const double C4920 = C47367 * C307;
    const double C16129 = C15917 * C307;
    const double C16122 = C47367 * C307;
    const double C344 = C47255 * C309;
    const double C4742 = C47367 * C309;
    const double C5243 = C4715 * C309;
    const double C15944 = C47367 * C309;
    const double C16445 = C15917 * C309;
    const double C521 = C47255 * C488;
    const double C5105 = C4715 * C488;
    const double C16307 = C15917 * C488;
    const double C525 = C47255 * C490;
    const double C5381 = C4715 * C490;
    const double C16583 = C15917 * C490;
    const double C931 = C47255 * C915;
    const double C5098 = C47367 * C915;
    const double C5591 = C4715 * C915;
    const double C16300 = C47367 * C915;
    const double C16793 = C15917 * C915;
    const double C2262 = C47255 * C1978;
    const double C46384 = C46377 + C46378;
    const double C46374 = C46365 + C46372;
    const double C1269 =
        (C46321 * C46343 + C46638 * be + C46724 * C46539) / C46273;
    const double C1275 =
        (C46535 * (C46343 + C46321 * C46724 + C46722 * be)) / C46273;
    const double C1281 = (C46343 + C46321 * C46724 + C46722 * be +
                          (C46357 + C46321 * (C46321 * C46379 + C46437 * be) +
                           C46321 * C46437 * be) *
                              C46539) /
                         C46273;
    const double C2367 =
        (2 * C46535 * C46724 +
         C46535 * (C46724 + (C46321 * C46379 + C46437 * be) * C46539)) /
        C46273;
    const double C12736 = C2257 - C2258;
    const double C12734 = C2258 - C2257;
    const double C46796 = C46341 + C46794;
    const double C27685 = C47367 * C6841;
    const double C38663 = C47367 * C6841;
    const double C44025 = C47255 * C6841;
    const double C43665 = C47255 * C12383;
    const double C43670 = C43662 * C21520;
    const double C160 = C47255 * C142;
    const double C4753 = C4715 * C142;
    const double C15955 = C15917 * C142;
    const double C335 = C47255 * C319;
    const double C4739 = C47367 * C319;
    const double C4922 = C4715 * C319;
    const double C15941 = C47367 * C319;
    const double C16124 = C15917 * C319;
    const double C338 = C47255 * C321;
    const double C4914 = C4715 * C321;
    const double C4909 = C47367 * C321;
    const double C16116 = C15917 * C321;
    const double C16111 = C47367 * C321;
    const double C516 = C47255 * C500;
    const double C5100 = C4715 * C500;
    const double C16302 = C15917 * C500;
    const double C519 = C47255 * C502;
    const double C5092 = C4715 * C502;
    const double C16294 = C15917 * C502;
    const double C929 = C47255 * C922;
    const double C5087 = C47367 * C922;
    const double C5586 = C4715 * C922;
    const double C16289 = C47367 * C922;
    const double C16788 = C15917 * C922;
    const double C2260 = C47255 * C1987;
    const double C7185 = C4715 * C1987;
    const double C18355 = C15917 * C1987;
    const double C11528 = C47255 * C1285;
    const double C25973 = C47367 * C1285;
    const double C26814 = C15917 * C1285;
    const double C36955 = C47367 * C1285;
    const double C37796 = C4715 * C1285;
    const double C11532 = C47255 * C1288;
    const double C26435 = C47367 * C1288;
    const double C26822 = C15917 * C1288;
    const double C37417 = C47367 * C1288;
    const double C37804 = C4715 * C1288;
    const double C11537 = C47255 * C1291;
    const double C26831 = C15917 * C1291;
    const double C26816 = C47367 * C1291;
    const double C37813 = C4715 * C1291;
    const double C37798 = C47367 * C1291;
    const double C12871 = C47255 * C2371;
    const double C27680 = C47367 * C2371;
    const double C28149 = C15917 * C2371;
    const double C38658 = C47367 * C2371;
    const double C39127 = C4715 * C2371;
    const double C43669 = C43661 * C46998;
    const double C46428 = C46415 + C46427;
    const double C46511 = C46508 + C46509;
    const double C1270 = (C46321 * C46417 + C46507 * C46539) / C46273;
    const double C1406 = C47255 * C1143;
    const double C4916 = C47367 * C1143;
    const double C6123 = C4715 * C1143;
    const double C16118 = C47367 * C1143;
    const double C17309 = C15917 * C1143;
    const double C1405 = C113 * C1133;
    const double C4917 = C4720 * C1133;
    const double C6122 = C4719 * C1133;
    const double C16119 = C15922 * C1133;
    const double C17308 = C15921 * C1133;
    const double C1563 = C113 * C1276;
    const double C5589 = C4720 * C1276;
    const double C6324 = C4719 * C1276;
    const double C16791 = C15922 * C1276;
    const double C17510 = C15921 * C1276;
    const double C2259 = C113 * C1977;
    const double C7184 = C4719 * C1977;
    const double C18354 = C15921 * C1977;
    const double C12007 = C47255 * C1675;
    const double C26824 = C47367 * C1675;
    const double C27293 = C15917 * C1675;
    const double C37806 = C47367 * C1675;
    const double C38275 = C4715 * C1675;
    const double C11536 = C113 * C1280;
    const double C26830 = C15921 * C1280;
    const double C26817 = C15922 * C1280;
    const double C37812 = C4719 * C1280;
    const double C37799 = C4720 * C1280;
    const double C12006 = C113 * C1670;
    const double C26825 = C15922 * C1670;
    const double C27292 = C15921 * C1670;
    const double C37807 = C4720 * C1670;
    const double C38274 = C4719 * C1670;
    const double C28150 = C15922 * C7320;
    const double C39128 = C4720 * C7320;
    const double C43020 = C113 * C7320;
    const double C46597 = C46590 + C46591;
    const double C27689 = C47367 * C6845;
    const double C38667 = C47367 * C6845;
    const double C44027 = C47255 * C6845;
    const double C46559 = C46556 + C46557;
    const double C43666 = C113 * C12384;
    const double C43671 = C43663 * C46998;
    const double C46645 = C46643 + C46644;
    const double C1260 = C46321 * C46640 + C46730 * C46539;
    const double C2364 =
        2 * C46535 * C46730 + C46535 * (C46730 + C46321 * C46463 * C46539);
    const double C46732 = C46728 + C46729;
    const double C1408 = C47255 * C1134;
    const double C4929 = C47367 * C1134;
    const double C16131 = C47367 * C1134;
    const double C1407 = C113 * C1126;
    const double C4928 = C4720 * C1126;
    const double C16130 = C15922 * C1126;
    const double C1565 = C113 * C1263;
    const double C5592 = C4720 * C1263;
    const double C16794 = C15922 * C1263;
    const double C2261 = C113 * C1970;
    const double C1138 =
        (3 * (C46343 + C46321 * C46724 + C46722 * be) +
         C46321 * (2 * C46724 +
                   C46321 * (C46357 + C46321 * (C46321 * C46379 + C46437 * be) +
                             C46321 * C46437 * be) +
                   C46725 * be) +
         (2 * C46722 + C46321 * C46725) * be) /
        C46273;
    const double C1671 =
        (C46535 * (2 * C46724 +
                   C46321 * (C46357 + C46321 * (C46321 * C46379 + C46437 * be) +
                             C46321 * C46437 * be) +
                   C46725 * be)) /
        C46273;
    const double C1128 = 3 * (C46638 + C46423 * C46502) +
                         C46321 * (2 * C46722 + C46321 * C46725);
    const double C1265 = C46638 + C46423 * C46502 + C46725 * C46539;
    const double C1667 = C46535 * (2 * C46722 + C46321 * C46725);
    const double C7318 =
        2 * C46535 * C46725 + C46535 * (C46725 + C46807 * C46539);
    const double C7182 = C4720 * C2363;
    const double C12600 = C113 * C2363;
    const double C18352 = C15922 * C2363;
    const double C46809 = C46321 * C46805;
    const double C6843 =
        (3 * (C46724 + C46805 * C46539) +
         C46535 * (2 * C46535 * C46805 +
                   C46535 * (C46805 + (C46321 * C46322 * C46391 + C46459 * be) *
                                          C46539))) /
        C46273;
    const double C12382 =
        4 * (2 * C46535 * C46423 + C46535 * C46974) +
        C46535 * (3 * C46974 + C46535 * (2 * C46535 * C46437 +
                                         C46535 * (C46437 + C46459 * C46539)));
    const double C46445 = C46421 + C46444;
    const double C46512 = C46426 + C46510;
    const double C46568 = 2 * C46562;
    const double C46566 = be * C46562;
    const double C2368 =
        (2 * C46535 * C46507 + C46535 * (C46507 + C46562 * C46539)) / C46273;
    const double C6844 =
        (3 * (C46507 + C46562 * C46539) +
         C46535 * (2 * C46535 * C46562 +
                   C46535 * (C46562 + C46321 * C46464 * C46539))) /
        C46273;
    const double C46842 = C46426 + C46841;
    const double C12400 = C113 * C1983;
    const double C46797 = C46793 + C46795;
    const double C28146 = C15922 * C7317;
    const double C39124 = C4720 * C7317;
    const double C43018 = C113 * C7317;
    const double C27669 =
        4 * (2 * C46535 * C46788 + C46535 * C46982) +
        C46535 * (3 * C46982 +
                  C46535 * (2 * C46535 * C46847 +
                            C46535 * (C46847 + C46321 * C46455 * C46539)));
    const double C46857 = C46351 + C46855;
    const double C46876 = C46790 + C46875;
    const double C46989 = C46986 + C46988;
    const double C46399 = C46387 + C46397;
    const double C46398 = C46389 + C46396;
    const double C46567 = C46563 + C46564;
    const double C46588 = C46370 + C46587;
    const double C12401 = C47255 * C1990;
    const double C46605 = C46602 + C46603;
    const double C46617 = C46553 + C46616;
    const double C46624 = C46621 + C46623;
    const double C46469 = C46435 + C46467;
    const double C46569 = C46442 + C46565;
    const double C46606 = C46600 + C46604;
    const double C134 = (4 * (2 * C46343 + C46322 * C46355) +
                         C46322 * (3 * C46355 + C46322 * C46375)) /
                        C46273;
    const double C492 =
        (2 * C46343 + C46322 * C46355 + C46375 * C46539) / C46273;
    const double C494 = (C46535 * (3 * C46355 + C46322 * C46375)) / C46273;
    const double C43656 =
        (5 * (3 * C46833 + C46535 * C46886) +
         C46535 * (4 * C46886 +
                   C46535 * (3 * C46884 +
                             C46535 * (2 * C46535 * C46367 +
                                       C46535 * (C46367 + C46391 * C46539))))) /
        C46273;
    const double C5828 = (4 * (2 * C46499 + C46321 * C46505) +
                          C46321 * (3 * C46505 + C46321 * C46560)) /
                         C46273;
    const double C5982 =
        (2 * C46499 + C46321 * C46505 + C46560 * C46539) / C46273;
    const double C6460 = (C46535 * (3 * C46505 + C46321 * C46560)) / C46273;
    const double C43657 =
        (5 * (3 * C46836 + C46535 * C46893) +
         C46535 * (4 * C46893 +
                   C46535 * (3 * C46891 +
                             C46535 * (2 * C46535 * C46435 +
                                       C46535 * (C46435 + C46457 * C46539))))) /
        C46273;
    const double C46470 = C46468 * ae;
    const double C46649 = C46322 * C46468;
    const double C1129 = 3 * (C46640 + C46441 * C46502) +
                         C46321 * (2 * C46730 + C46321 * C46733);
    const double C1266 = C46640 + C46441 * C46502 + C46733 * C46539;
    const double C1668 = C46535 * (2 * C46730 + C46321 * C46733);
    const double C46812 = C46808 + C46810;
    const double C46860 = C46321 * C46858;
    const double C47028 = C47024 - C47027;
    const double C47372 = C47340 / C47014;
    const double C47037 = C47033 - C47036;
    const double C47386 = C47371 / C47018;
    const double C47110 = C47105 - C47109;
    const double C47376 = C47348 / C47014;
    const double C47117 = C47113 - C47116;
    const double C47390 = C47379 / C47018;
    const double C47152 = C47147 - C47151;
    const double C47378 = C47351 / C47014;
    const double C47159 = C47155 - C47158;
    const double C47392 = C47382 / C47018;
    const double C169 = C156 - C157;
    const double C42381 = C10678 * C21520;
    const double C43014 = C11527 - C11526;
    const double C43016 = C11535 - C11534;
    const double C44022 = C12869 - C12868;
    const double C42389 = C42385 + C42386;
    const double C170 = C158 - C159;
    const double C354 = C340 - C341;
    const double C645 = C344 - C345;
    const double C535 = C521 - C522;
    const double C10684 = C522 - C521;
    const double C755 = C525 - C526;
    const double C10946 = C526 - C525;
    const double C939 = C931 - C932;
    const double C11150 = C932 - C931;
    const double C143 =
        (4 * (2 * C46354 + ae * C46355 + C46322 * C46374) +
         ae * (3 * C46355 + C46322 * C46375) +
         C46322 * (3 * C46374 + ae * C46375 +
                   C46322 * (2 * C46370 + ae * C46371 +
                             C46322 * (C46366 + ae * C46322 * C46367 +
                                       C46322 * (ae * C46367 +
                                                 C46322 * std::pow(C46326, 7) *
                                                     bs[7] * C46333))))) /
        C46275;
    const double C503 = (C46340 + ae * C46343 + C46322 * C46354 +
                         C46374 * std::pow(zP - zQ, 2)) /
                        C46275;
    const double C504 =
        ((zP - zQ) * (2 * C46354 + ae * C46355 + C46322 * C46374)) / C46275;
    const double C2144 = C47255 * C1269;
    const double C5090 = C47367 * C1269;
    const double C7043 = C4715 * C1269;
    const double C16292 = C47367 * C1269;
    const double C18213 = C15917 * C1269;
    const double C1562 = C47255 * C1275;
    const double C5584 = C47367 * C1275;
    const double C6321 = C4715 * C1275;
    const double C16786 = C47367 * C1275;
    const double C17507 = C15917 * C1275;
    const double C7045 = C47367 * C1281;
    const double C11539 = C47255 * C1281;
    const double C18215 = C47367 * C1281;
    const double C7183 = C47367 * C2367;
    const double C12601 = C47255 * C2367;
    const double C18353 = C47367 * C2367;
    const double C43921 = C12734 * C21520;
    const double C46798 = C46796 + C46791;
    const double C353 = C334 - C335;
    const double C534 = C515 - C516;
    const double C10683 = C516 - C515;
    const double C10681 = C519 - C520;
    const double C10679 = C520 - C519;
    const double C11149 = C929 - C930;
    const double C11147 = C930 - C929;
    const double C43015 = C11529 - C11528;
    const double C44023 = C12871 - C12870;
    const double C43672 = C43668 + C43669;
    const double C46429 = C46428 + C46425;
    const double C1286 =
        (be * C46417 + C46321 * C46354 + C46511 * std::pow(zP - zQ, 2)) /
        C46275;
    const double C1289 =
        ((zP - zQ) * (C46354 + be * C46507 + C46321 * C46511)) / C46275;
    const double C1292 = (C46354 + be * C46507 + C46321 * C46511 +
                          (C46370 + be * C46321 * C46442 +
                           C46321 * (be * C46442 + C46321 * C46394)) *
                              std::pow(zP - zQ, 2)) /
                         C46275;
    const double C2372 =
        (2 * C46535 * C46511 +
         C46535 * (C46511 + (be * C46442 + C46321 * C46394) * C46539)) /
        C46275;
    const double C2145 = C113 * C1270;
    const double C5095 = C4720 * C1270;
    const double C7046 = C4719 * C1270;
    const double C16297 = C15922 * C1270;
    const double C18216 = C15921 * C1270;
    const double C12737 = C2259 - C2260;
    const double C12735 = C2260 - C2259;
    const double C43017 = C11537 - C11536;
    const double C5831 =
        (4 * (2 * C46503 + be * C46505 + C46321 * C46559) +
         be * (3 * C46505 + C46321 * C46560) +
         C46321 *
             (3 * C46559 + be * C46560 +
              C46321 * (2 * C46553 + be * C46555 +
                        C46321 * (C46366 + be * C46321 * C46435 +
                                  C46321 * (be * C46435 + C46321 * C46390))))) /
        C46275;
    const double C5985 =
        (2 * C46503 + be * C46505 + C46321 * C46559 +
         (2 * C46553 + be * C46555 +
          C46321 * (C46366 + be * C46321 * C46435 +
                    C46321 * (be * C46435 + C46321 * C46390))) *
             C46539) /
        C46275;
    const double C6463 =
        (C46535 *
         (3 * C46559 + be * C46560 +
          C46321 * (2 * C46553 + be * C46555 +
                    C46321 * (C46366 + be * C46321 * C46435 +
                              C46321 * (be * C46435 + C46321 * C46390))))) /
        C46275;
    const double C7323 =
        (2 * C46535 * C46559 +
         C46535 * (C46559 + (C46366 + be * C46321 * C46435 +
                             C46321 * (be * C46435 + C46321 * C46390)) *
                                C46539)) /
        C46275;
    const double C43673 = C43670 + C43671;
    const double C311 =
        (2 * C46343 + C46322 * C46355 +
         C46321 * (C46321 * C46375 + C46645 * be) + C46321 * C46645 * be) /
        C46273;
    const double C313 = (C46321 * (3 * C46355 + C46322 * C46375) +
                         (3 * C46640 + C46322 * C46645) * be) /
                        C46273;
    const double C917 = (C46535 * (C46321 * C46375 + C46645 * be)) / C46273;
    const double C122 = 4 * (2 * C46638 + C46322 * C46640) +
                        C46322 * (3 * C46640 + C46322 * C46645);
    const double C294 = 2 * C46638 + C46322 * C46640 + C46645 * C46502;
    const double C295 = C46321 * (3 * C46640 + C46322 * C46645);
    const double C475 = 2 * C46638 + C46322 * C46640 + C46645 * C46539;
    const double C476 = C46535 * (3 * C46640 + C46322 * C46645);
    const double C909 = C46535 * C46321 * C46645;
    const double C1398 =
        2 * C46321 * C46645 + C46321 * (C46645 + C46468 * C46502);
    const double C1556 = C46535 * (C46645 + C46468 * C46502);
    const double C2138 = C46321 * C46645 + C46321 * C46468 * C46539;
    const double C2252 =
        2 * C46535 * C46645 + C46535 * (C46645 + C46468 * C46539);
    const double C2147 = C113 * C1260;
    const double C5106 = C4720 * C1260;
    const double C16308 = C15922 * C1260;
    const double C1140 =
        (3 * (C46355 + C46321 * C46732 + C46730 * be) +
         C46321 * (2 * C46732 +
                   C46321 * (C46371 + C46321 * (C46321 * C46395 + C46463 * be) +
                             C46321 * C46463 * be) +
                   C46733 * be) +
         (2 * C46730 + C46321 * C46733) * be) /
        C46273;
    const double C1271 =
        (C46321 * C46355 + C46640 * be + C46732 * C46539) / C46273;
    const double C1277 =
        (C46535 * (C46355 + C46321 * C46732 + C46730 * be)) / C46273;
    const double C1283 = (C46355 + C46321 * C46732 + C46730 * be +
                          (C46371 + C46321 * (C46321 * C46395 + C46463 * be) +
                           C46321 * C46463 * be) *
                              C46539) /
                         C46273;
    const double C1673 =
        (C46535 * (2 * C46732 +
                   C46321 * (C46371 + C46321 * (C46321 * C46395 + C46463 * be) +
                             C46321 * C46463 * be) +
                   C46733 * be)) /
        C46273;
    const double C2369 =
        (2 * C46535 * C46732 +
         C46535 * (C46732 + (C46321 * C46395 + C46463 * be) * C46539)) /
        C46273;
    const double C6121 = C47367 * C1138;
    const double C17307 = C47367 * C1138;
    const double C6323 = C47367 * C1671;
    const double C11673 = C47255 * C1671;
    const double C17509 = C47367 * C1671;
    const double C6120 = C4720 * C1128;
    const double C17306 = C15922 * C1128;
    const double C7044 = C4720 * C1265;
    const double C11538 = C113 * C1265;
    const double C18214 = C15922 * C1265;
    const double C6322 = C4720 * C1667;
    const double C11672 = C113 * C1667;
    const double C17508 = C15922 * C1667;
    const double C46811 = C46357 + C46809;
    const double C46446 = C46445 + C46440;
    const double C1146 =
        (3 * (C46354 + be * C46507 + C46321 * C46511) +
         be * (2 * C46507 + C46321 * C46512) +
         C46321 * (2 * C46511 + be * C46512 +
                   C46321 * (C46370 + be * C46321 * C46442 +
                             C46321 * (be * C46442 + C46321 * C46394)))) /
        C46275;
    const double C1676 =
        ((zP - zQ) * (2 * C46511 + be * C46512 +
                      C46321 * (C46370 + be * C46321 * C46442 +
                                C46321 * (be * C46442 + C46321 * C46394)))) /
        C46275;
    const double C1139 = (3 * (C46417 + C46426 * C46502) +
                          C46321 * (2 * C46507 + C46321 * C46512)) /
                         C46273;
    const double C1282 = (C46417 + C46426 * C46502 + C46512 * C46539) / C46273;
    const double C1672 = (C46535 * (2 * C46507 + C46321 * C46512)) / C46273;
    const double C46570 = C46370 + C46566;
    const double C7186 = C4720 * C2368;
    const double C12602 = C113 * C2368;
    const double C18356 = C15922 * C2368;
    const double C12386 =
        (4 * (2 * C46535 * C46426 + C46535 * C46842) +
         C46535 *
             (3 * C46842 + C46535 * (2 * C46535 * C46442 +
                                     C46535 * (C46442 + C46464 * C46539)))) /
        C46273;
    const double C5825 = 4 * (2 * C46714 + C46321 * C46717) +
                         C46321 * (3 * C46717 + C46321 * C46797);
    const double C5979 = 2 * C46714 + C46321 * C46717 + C46797 * C46539;
    const double C6457 = C46535 * (3 * C46717 + C46321 * C46797);
    const double C23347 =
        2 * C46535 * C46797 + C46535 * (C46797 + C46858 * C46539);
    const double C46859 = C46857 + C46852;
    const double C27670 =
        (4 * (2 * C46535 * C46790 + C46535 * C46876) +
         C46535 * (3 * C46876 + C46535 * (2 * C46535 * C46851 +
                                          C46535 * (C46851 + (C46321 * C46391 +
                                                              C46455 * be) *
                                                                 C46539)))) /
        C46273;
    const double C43655 =
        5 * (3 * C46971 + C46535 * C46989) +
        C46535 * (4 * C46989 +
                  C46535 * (3 * C46987 +
                            C46535 * (2 * C46535 * C46434 +
                                      C46535 * (C46434 + C46455 * C46539))));
    const double C46401 = C46322 * C46399;
    const double C1399 =
        (2 * (C46321 * C46375 + C46645 * be) +
         C46321 * (C46375 + C46321 * (C46321 * C46399 + C46468 * be) +
                   C46321 * C46468 * be) +
         (C46645 + C46468 * C46502) * be) /
        C46273;
    const double C1557 =
        (C46535 * (C46375 + C46321 * (C46321 * C46399 + C46468 * be) +
                   C46321 * C46468 * be)) /
        C46273;
    const double C2139 = (C46321 * C46375 + C46645 * be +
                          (C46321 * C46399 + C46468 * be) * C46539) /
                         C46273;
    const double C2253 =
        (2 * C46535 * C46375 + C46535 * (C46375 + C46399 * C46539)) / C46273;
    const double C46400 = C46322 * C46398;
    const double C46516 = C46321 * C46398;
    const double C1988 = (2 * C46535 * C46374 +
                          C46535 * (C46374 + C46398 * std::pow(C46535, 2))) /
                         C46275;
    const double C1991 =
        (3 * (C46374 + C46398 * C46539) +
         C46535 * (2 * C46535 * C46398 +
                   C46535 * (C46398 + (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46539))) /
        C46275;
    const double C46571 = C46321 * C46567;
    const double C6846 =
        (3 * (C46511 + C46567 * C46539) +
         C46535 * (2 * C46535 * C46567 +
                   C46535 * (C46567 + (be * C46464 +
                                       C46321 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46539))) /
        C46275;
    const double C12388 =
        (4 * (2 * C46535 * C46370 + C46535 * C46588) +
         C46535 * (3 * C46588 +
                   C46535 * (2 * C46535 * C46394 +
                             C46535 * (C46394 + (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46539)))) /
        C46275;
    const double C46607 = C46321 * C46605;
    const double C23004 =
        (3 * (C46559 + C46605 * C46539) +
         C46535 * (2 * C46535 * C46605 +
                   C46535 * (C46605 + (C46390 + be * C46321 * C46457 +
                                       C46321 * (be * C46457 +
                                                 C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46539))) /
        C46275;
    const double C27672 =
        (4 * (2 * C46535 * C46553 + C46535 * C46617) +
         C46535 * (3 * C46617 +
                   C46535 * (2 * C46535 * C46599 +
                             C46535 * (C46599 + (be * C46457 +
                                                 C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46539)))) /
        C46275;
    const double C43658 =
        (5 * (3 * C46585 + C46535 * C46624) +
         C46535 * (4 * C46624 +
                   C46535 * (3 * C46622 +
                             C46535 * (2 * C46535 * C46390 +
                                       C46535 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46539))))) /
        C46275;
    const double C46471 = C46469 + C46462;
    const double C46572 = C46321 * C46569;
    const double C7322 =
        (2 * C46535 * C46512 + C46535 * (C46512 + C46569 * C46539)) / C46273;
    const double C46608 = C46321 * C46606;
    const double C23349 =
        (2 * C46535 * C46560 + C46535 * (C46560 + C46606 * C46539)) / C46273;
    const double C163 = C47255 * C134;
    const double C530 = C47255 * C492;
    const double C758 = C47255 * C494;
    const double C26832 = C15922 * C5982;
    const double C37814 = C4720 * C5982;
    const double C43372 = C113 * C5982;
    const double C27294 = C15922 * C6460;
    const double C38276 = C4720 * C6460;
    const double C46650 = C46648 + C46649;
    const double C5826 = 4 * (2 * C46722 + C46321 * C46725) +
                         C46321 * (3 * C46725 + C46321 * C46812);
    const double C5980 = 2 * C46722 + C46321 * C46725 + C46812 * C46539;
    const double C6458 = C46535 * (3 * C46725 + C46321 * C46812);
    const double C46862 = C46850 + C46860;
    const double C47302 = C47028 * C47016;
    const double C47342 = C47307 + C47028;
    const double C47310 = C47037 / C47018;
    const double C47306 = C47037 * C47016;
    const double C636 = C47386 - (C47028 * C47019) / C47014;
    const double C47320 = C47110 * C47104;
    const double C47357 = C47322 + C47110;
    const double C47324 = C47117 / C47018;
    const double C47321 = C47117 * C47104;
    const double C1392 = C47390 - (C47110 * C47106) / C47014;
    const double C47326 = C47152 * C47146;
    const double C47363 = C47328 + C47152;
    const double C47330 = C47159 / C47018;
    const double C47327 = C47159 * C47146;
    const double C2248 = C47392 - (C47152 * C47148) / C47014;
    const double C43022 = C43014 * C21520;
    const double C43024 = C43016 * C21520;
    const double C44028 = C44022 * C21520;
    const double C42383 = C535 * C21520;
    const double C165 = C47255 * C143;
    const double C523 = C47255 * C503;
    const double C5109 = C4715 * C503;
    const double C16311 = C15917 * C503;
    const double C527 = C47255 * C504;
    const double C5385 = C4715 * C504;
    const double C16587 = C15917 * C504;
    const double C12598 = C2143 - C2144;
    const double C12596 = C2144 - C2143;
    const double C11872 = C1561 - C1562;
    const double C11870 = C1562 - C1561;
    const double C5827 =
        (4 * (2 * C46716 + C46321 * C46798 + C46717 * be) +
         C46321 *
             (3 * C46798 +
              C46321 *
                  (2 * C46790 +
                   C46321 * (C46351 + C46321 * (C46321 * C46367 + C46434 * be) +
                             C46321 * C46434 * be) +
                   C46792 * be) +
              C46797 * be) +
         (3 * C46717 + C46321 * C46797) * be) /
        C46273;
    const double C5981 =
        (2 * C46716 + C46321 * C46798 + C46717 * be +
         (2 * C46790 +
          C46321 * (C46351 + C46321 * (C46321 * C46367 + C46434 * be) +
                    C46321 * C46434 * be) +
          C46792 * be) *
             C46539) /
        C46273;
    const double C6459 =
        (C46535 *
         (3 * C46798 +
          C46321 *
              (2 * C46790 +
               C46321 * (C46351 + C46321 * (C46321 * C46367 + C46434 * be) +
                         C46321 * C46434 * be) +
               C46792 * be) +
          C46797 * be)) /
        C46273;
    const double C7319 =
        (2 * C46535 * C46798 +
         C46535 * (C46798 + (C46351 + C46321 * (C46321 * C46367 + C46434 * be) +
                             C46321 * C46434 * be) *
                                C46539)) /
        C46273;
    const double C42382 = C10679 * C46998;
    const double C43023 = C43015 * C46998;
    const double C44029 = C44023 * C46998;
    const double C322 =
        (C46340 + ae * C46343 + C46322 * C46354 + be * C46321 * C46429 +
         C46321 * (be * C46429 + C46321 * C46374)) /
        C46275;
    const double C323 =
        (be * (2 * C46417 + C46322 * C46429 + (C46408 + C46420 * C46347) * ae) +
         C46321 * (2 * C46354 + ae * C46355 + C46322 * C46374)) /
        C46275;
    const double C923 = ((zP - zQ) * (be * C46429 + C46321 * C46374)) / C46275;
    const double C133 = (3 * (C46411 + C46322 * C46417 + C46638 * ae) +
                         C46322 * (2 * C46417 + C46322 * C46429 + C46640 * ae) +
                         (2 * C46638 + C46322 * C46640) * ae) /
                        C46273;
    const double C308 =
        (C46411 + C46322 * C46417 + C46638 * ae + C46429 * C46502) / C46273;
    const double C310 =
        (C46321 * (2 * C46417 + C46322 * C46429 + C46640 * ae)) / C46273;
    const double C489 =
        (C46411 + C46322 * C46417 + C46638 * ae + C46429 * C46539) / C46273;
    const double C491 =
        (C46535 * (2 * C46417 + C46322 * C46429 + C46640 * ae)) / C46273;
    const double C916 = (C46535 * C46321 * C46429) / C46273;
    const double C2146 = C47255 * C1286;
    const double C5094 = C47367 * C1286;
    const double C7047 = C4715 * C1286;
    const double C16296 = C47367 * C1286;
    const double C18217 = C15917 * C1286;
    const double C1564 = C47255 * C1289;
    const double C5588 = C47367 * C1289;
    const double C6325 = C4715 * C1289;
    const double C16790 = C47367 * C1289;
    const double C17511 = C15917 * C1289;
    const double C7049 = C47367 * C1292;
    const double C11541 = C47255 * C1292;
    const double C18219 = C47367 * C1292;
    const double C7187 = C47367 * C2372;
    const double C12603 = C47255 * C2372;
    const double C18357 = C47367 * C2372;
    const double C43922 = C12735 * C46998;
    const double C43025 = C43017 * C46998;
    const double C26833 = C47367 * C5985;
    const double C37815 = C47367 * C5985;
    const double C43373 = C47255 * C5985;
    const double C27295 = C47367 * C6463;
    const double C38277 = C47367 * C6463;
    const double C28151 = C47367 * C7323;
    const double C39129 = C47367 * C7323;
    const double C43021 = C47255 * C7323;
    const double C349 = C47255 * C311;
    const double C5245 = C47367 * C311;
    const double C16447 = C47367 * C311;
    const double C648 = C47255 * C313;
    const double C4751 = C47367 * C313;
    const double C15953 = C47367 * C313;
    const double C936 = C47255 * C917;
    const double C5383 = C47367 * C917;
    const double C16585 = C47367 * C917;
    const double C162 = C113 * C122;
    const double C348 = C113 * C294;
    const double C5244 = C4720 * C294;
    const double C16446 = C15922 * C294;
    const double C647 = C113 * C295;
    const double C4750 = C4720 * C295;
    const double C15952 = C15922 * C295;
    const double C529 = C113 * C475;
    const double C757 = C113 * C476;
    const double C935 = C113 * C909;
    const double C5382 = C4720 * C909;
    const double C16584 = C15922 * C909;
    const double C2148 = C47255 * C1271;
    const double C5107 = C47367 * C1271;
    const double C16309 = C47367 * C1271;
    const double C1566 = C47255 * C1277;
    const double C5593 = C47367 * C1277;
    const double C16795 = C47367 * C1277;
    const double C46813 = C46811 + C46806;
    const double C46447 = C46322 * C46446;
    const double C46452 = 3 * C46446;
    const double C46515 = be * C46446;
    const double C46514 = C46321 * C46446;
    const double C1144 = (2 * (be * C46429 + C46321 * C46374) +
                          be * (C46429 + C46446 * std::pow(C46321, 2)) +
                          C46321 * (C46374 + be * C46321 * C46446 +
                                    C46321 * (be * C46446 + C46321 * C46398))) /
                         C46275;
    const double C1135 =
        (2 * C46321 * C46429 + C46321 * (C46429 + C46446 * C46502)) / C46273;
    const double C1278 = (C46535 * (C46429 + C46446 * C46502)) / C46273;
    const double C1979 =
        (2 * C46535 * C46429 + C46535 * (C46429 + C46446 * C46539)) / C46273;
    const double C6125 = C47367 * C1146;
    const double C17311 = C47367 * C1146;
    const double C6327 = C47367 * C1676;
    const double C11675 = C47255 * C1676;
    const double C17513 = C47367 * C1676;
    const double C6124 = C4720 * C1139;
    const double C17310 = C15922 * C1139;
    const double C7048 = C4720 * C1282;
    const double C11540 = C113 * C1282;
    const double C18218 = C15922 * C1282;
    const double C6326 = C4720 * C1672;
    const double C11674 = C113 * C1672;
    const double C17512 = C15922 * C1672;
    const double C26828 = C15922 * C5979;
    const double C37810 = C4720 * C5979;
    const double C43370 = C113 * C5979;
    const double C27290 = C15922 * C6457;
    const double C38272 = C4720 * C6457;
    const double C46861 = C46321 * C46859;
    const double C23002 =
        (3 * (C46798 + C46859 * C46539) +
         C46535 *
             (2 * C46535 * C46859 +
              C46535 *
                  (C46859 + (C46367 + C46321 * (C46321 * C46391 + C46455 * be) +
                             C46321 * C46455 * be) *
                                C46539))) /
        C46273;
    const double C46403 = C46383 + C46401;
    const double C46402 = C46384 + C46400;
    const double C2264 = C47255 * C1988;
    const double C46573 = C46570 + C46571;
    const double C46609 = C46597 + C46607;
    const double C46472 = C46322 * C46471;
    const double C46517 = C46471 * C46502;
    const double C1985 =
        (3 * (C46429 + C46446 * C46539) +
         C46535 * (2 * C46535 * C46446 + C46535 * (C46446 + C46471 * C46539))) /
        C46273;
    const double C46574 = C46568 + C46572;
    const double C46610 = C46595 + C46608;
    const double C123 = 5 * (3 * C46640 + C46322 * C46645) +
                        C46322 * (4 * C46645 + C46322 * C46650);
    const double C296 = 3 * C46640 + C46322 * C46645 + C46650 * C46502;
    const double C477 = 3 * C46640 + C46322 * C46645 + C46650 * C46539;
    const double C640 = C46321 * (4 * C46645 + C46322 * C46650);
    const double C750 = C46535 * (4 * C46645 + C46322 * C46650);
    const double C910 = C46535 * C46321 * C46650;
    const double C22255 = 5 * (3 * C46717 + C46321 * C46797) +
                          C46321 * (4 * C46797 + C46321 * C46862);
    const double C22369 = 3 * C46717 + C46321 * C46797 + C46862 * C46539;
    const double C22715 = C46535 * (4 * C46797 + C46321 * C46862);
    const double C47338 = C47302 / C47014;
    const double C47373 = C47342 / C47018;
    const double C47374 = C47344 + C47310;
    const double C638 = C47310 - C47035 / C47032;
    const double C47341 = C47306 / C47014;
    const double C47354 = C47320 / C47014;
    const double C47380 = C47357 / C47018;
    const double C47381 = C47358 + C47324;
    const double C1394 = C47324 - C47115 / C47032;
    const double C47356 = C47321 / C47014;
    const double C47360 = C47326 / C47014;
    const double C47383 = C47363 / C47018;
    const double C47384 = C47364 + C47330;
    const double C2250 = C47330 - C47157 / C47032;
    const double C47362 = C47327 / C47014;
    const double C43820 = C12596 * C21520;
    const double C26829 = C47367 * C5981;
    const double C37811 = C47367 * C5981;
    const double C43371 = C47255 * C5981;
    const double C27291 = C47367 * C6459;
    const double C38273 = C47367 * C6459;
    const double C28147 = C47367 * C7319;
    const double C39125 = C47367 * C7319;
    const double C43019 = C47255 * C7319;
    const double C42387 = C42381 + C42382;
    const double C43026 = C43022 + C43023;
    const double C44030 = C44028 + C44029;
    const double C342 = C47255 * C322;
    const double C4931 = C4715 * C322;
    const double C4924 = C47367 * C322;
    const double C16133 = C15917 * C322;
    const double C16126 = C47367 * C322;
    const double C346 = C47255 * C323;
    const double C4746 = C47367 * C323;
    const double C5247 = C4715 * C323;
    const double C15948 = C47367 * C323;
    const double C16449 = C15917 * C323;
    const double C933 = C47255 * C923;
    const double C5102 = C47367 * C923;
    const double C5595 = C4715 * C923;
    const double C16304 = C47367 * C923;
    const double C16797 = C15917 * C923;
    const double C161 = C113 * C133;
    const double C4752 = C4719 * C133;
    const double C15954 = C15921 * C133;
    const double C343 = C113 * C308;
    const double C4930 = C4719 * C308;
    const double C4925 = C4720 * C308;
    const double C16132 = C15921 * C308;
    const double C16127 = C15922 * C308;
    const double C347 = C113 * C310;
    const double C4747 = C4720 * C310;
    const double C5246 = C4719 * C310;
    const double C15949 = C15922 * C310;
    const double C16448 = C15921 * C310;
    const double C524 = C113 * C489;
    const double C5108 = C4719 * C489;
    const double C16310 = C15921 * C489;
    const double C528 = C113 * C491;
    const double C5384 = C4719 * C491;
    const double C16586 = C15921 * C491;
    const double C934 = C113 * C916;
    const double C5103 = C4720 * C916;
    const double C5594 = C4719 * C916;
    const double C16305 = C15922 * C916;
    const double C16796 = C15921 * C916;
    const double C12599 = C2145 - C2146;
    const double C12597 = C2146 - C2145;
    const double C11873 = C1563 - C1564;
    const double C11871 = C1564 - C1563;
    const double C43923 = C43921 + C43922;
    const double C43027 = C43024 + C43025;
    const double C5829 =
        (4 * (2 * C46724 + C46321 * C46813 + C46725 * be) +
         C46321 * (3 * C46813 +
                   C46321 * (2 * C46805 +
                             C46321 * (C46379 +
                                       C46321 * (C46321 * C46322 * C46391 +
                                                 C46459 * be) +
                                       C46321 * C46459 * be) +
                             C46807 * be) +
                   C46812 * be) +
         (3 * C46725 + C46321 * C46812) * be) /
        C46273;
    const double C5983 =
        (2 * C46724 + C46321 * C46813 + C46725 * be +
         (2 * C46805 +
          C46321 * (C46379 + C46321 * (C46321 * C46322 * C46391 + C46459 * be) +
                    C46321 * C46459 * be) +
          C46807 * be) *
             C46539) /
        C46273;
    const double C6461 =
        (C46535 * (3 * C46813 +
                   C46321 * (2 * C46805 +
                             C46321 * (C46379 +
                                       C46321 * (C46321 * C46322 * C46391 +
                                                 C46459 * be) +
                                       C46321 * C46459 * be) +
                             C46807 * be) +
                   C46812 * be)) /
        C46273;
    const double C7321 =
        (2 * C46535 * C46813 +
         C46535 * (C46813 +
                   (C46379 + C46321 * (C46321 * C46322 * C46391 + C46459 * be) +
                    C46321 * C46459 * be) *
                       C46539)) /
        C46273;
    const double C46448 = C46432 + C46447;
    const double C46518 = C46515 + C46516;
    const double C1272 = (C46321 * C46429 + C46514 * C46539) / C46273;
    const double C2370 =
        (2 * C46535 * C46514 + C46535 * (C46514 + C46321 * C46471 * C46539)) /
        C46273;
    const double C1410 = C47255 * C1144;
    const double C4933 = C47367 * C1144;
    const double C16135 = C47367 * C1144;
    const double C1409 = C113 * C1135;
    const double C4932 = C4720 * C1135;
    const double C16134 = C15922 * C1135;
    const double C1567 = C113 * C1278;
    const double C5596 = C4720 * C1278;
    const double C16798 = C15922 * C1278;
    const double C2263 = C113 * C1979;
    const double C46863 = C46844 + C46861;
    const double C136 = (5 * (3 * C46355 + C46322 * C46375) +
                         C46322 * (4 * C46375 + C46322 * C46403)) /
                        C46273;
    const double C315 =
        (3 * C46355 + C46322 * C46375 +
         C46321 * (C46321 * C46403 + C46650 * be) + C46321 * C46650 * be) /
        C46273;
    const double C496 =
        (3 * C46355 + C46322 * C46375 + C46403 * C46539) / C46273;
    const double C641 = (C46321 * (4 * C46375 + C46322 * C46403) +
                         (4 * C46645 + C46322 * C46650) * be) /
                        C46273;
    const double C751 = (C46535 * (4 * C46375 + C46322 * C46403)) / C46273;
    const double C919 = (C46535 * (C46321 * C46403 + C46650 * be)) / C46273;
    const double C144 =
        (5 * (3 * C46374 + ae * C46375 + C46322 * C46402) +
         ae * (4 * C46375 + C46322 * C46403) +
         C46322 *
             (4 * C46402 + ae * C46403 +
              C46322 *
                  (3 * C46398 + ae * C46399 +
                   C46322 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C505 = (2 * C46354 + ae * C46355 + C46322 * C46374 +
                         C46402 * std::pow(zP - zQ, 2)) /
                        C46275;
    const double C506 =
        ((zP - zQ) * (3 * C46374 + ae * C46375 + C46322 * C46402)) / C46275;
    const double C507 =
        (3 * C46374 + ae * C46375 + C46322 * C46402 +
         (3 * C46398 + ae * C46399 +
          C46322 *
              (2 * C46394 + ae * C46395 +
               C46322 * (C46390 + ae * C46322 * C46391 +
                         C46322 * (ae * C46391 + C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             std::pow(zP - zQ, 2)) /
        C46275;
    const double C753 =
        ((zP - zQ) *
         (4 * C46402 + ae * C46403 +
          C46322 * (3 * C46398 + ae * C46399 +
                    C46322 * (2 * C46394 + ae * C46395 +
                              C46322 * (C46390 + ae * C46322 * C46391 +
                                        C46322 * (ae * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46275;
    const double C2255 =
        (2 * C46535 * C46402 +
         C46535 * (C46402 + (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46539)) /
        C46275;
    const double C5986 =
        (2 * C46511 + be * C46512 + C46321 * C46573 +
         (2 * C46567 + be * C46569 +
          C46321 *
              (C46394 + be * C46321 * C46464 +
               C46321 * (be * C46464 +
                         C46321 * (ae * C46391 + C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             C46539) /
        C46275;
    const double C7324 =
        (2 * C46535 * C46573 +
         C46535 * (C46573 + (C46394 + be * C46321 * C46464 +
                             C46321 * (be * C46464 +
                                       C46321 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46539)) /
        C46275;
    const double C22372 =
        (3 * C46559 + be * C46560 + C46321 * C46609 +
         (3 * C46605 + be * C46606 +
          C46321 *
              (2 * C46599 + be * C46601 +
               C46321 * (C46390 + be * C46321 * C46457 +
                         C46321 * (be * C46457 + C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             C46539) /
        C46275;
    const double C23350 =
        (2 * C46535 * C46609 +
         C46535 * (C46609 + (2 * C46599 + be * C46601 +
                             C46321 * (C46390 + be * C46321 * C46457 +
                                       C46321 * (be * C46457 +
                                                 C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46539)) /
        C46275;
    const double C46473 = C46453 + C46472;
    const double C46519 = C46446 + C46517;
    const double C5832 =
        (4 * (2 * C46511 + be * C46512 + C46321 * C46573) +
         be * (3 * C46512 + C46321 * C46574) +
         C46321 *
             (3 * C46573 + be * C46574 +
              C46321 *
                  (2 * C46567 + be * C46569 +
                   C46321 * (C46394 + be * C46321 * C46464 +
                             C46321 * (be * C46464 +
                                       C46321 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C6464 =
        (C46535 *
         (3 * C46573 + be * C46574 +
          C46321 * (2 * C46567 + be * C46569 +
                    C46321 * (C46394 + be * C46321 * C46464 +
                              C46321 * (be * C46464 +
                                        C46321 * (ae * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46275;
    const double C5830 = (4 * (2 * C46507 + C46321 * C46512) +
                          C46321 * (3 * C46512 + C46321 * C46574)) /
                         C46273;
    const double C5984 =
        (2 * C46507 + C46321 * C46512 + C46574 * C46539) / C46273;
    const double C6462 = (C46535 * (3 * C46512 + C46321 * C46574)) / C46273;
    const double C22258 =
        (5 * (3 * C46559 + be * C46560 + C46321 * C46609) +
         be * (4 * C46560 + C46321 * C46610) +
         C46321 *
             (4 * C46609 + be * C46610 +
              C46321 *
                  (3 * C46605 + be * C46606 +
                   C46321 * (2 * C46599 + be * C46601 +
                             C46321 * (C46390 + be * C46321 * C46457 +
                                       C46321 * (be * C46457 +
                                                 C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C22718 =
        (C46535 *
         (4 * C46609 + be * C46610 +
          C46321 * (3 * C46605 + be * C46606 +
                    C46321 * (2 * C46599 + be * C46601 +
                              C46321 * (C46390 + be * C46321 * C46457 +
                                        C46321 * (be * C46457 +
                                                  C46321 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46275;
    const double C22257 = (5 * (3 * C46505 + C46321 * C46560) +
                           C46321 * (4 * C46560 + C46321 * C46610)) /
                          C46273;
    const double C22371 =
        (3 * C46505 + C46321 * C46560 + C46610 * C46539) / C46273;
    const double C22717 = (C46535 * (4 * C46560 + C46321 * C46610)) / C46273;
    const double C47394 = C47338 + C47386;
    const double C637 = C47373 - (C47037 * C47019) / C47014;
    const double C111 = C47374 / C47018 - C47035 / C47345;
    const double C47387 = C47341 + C47373;
    const double C47395 = C47354 + C47390;
    const double C1393 = C47380 - (C47117 * C47106) / C47014;
    const double C1121 = C47381 / C47018 - C47115 / C47345;
    const double C47391 = C47356 + C47380;
    const double C47396 = C47360 + C47392;
    const double C2249 = C47383 - (C47159 * C47148) / C47014;
    const double C1966 = C47384 / C47018 - C47157 / C47345;
    const double C47393 = C47362 + C47383;
    const double C171 = C160 - C161;
    const double C355 = C342 - C343;
    const double C646 = C346 - C347;
    const double C536 = C523 - C524;
    const double C10685 = C524 - C523;
    const double C756 = C527 - C528;
    const double C10947 = C528 - C527;
    const double C940 = C933 - C934;
    const double C11151 = C934 - C933;
    const double C43821 = C12597 * C46998;
    const double C46449 = C46448 + C46443;
    const double C1287 =
        (be * C46429 + C46321 * C46374 + C46518 * std::pow(zP - zQ, 2)) /
        C46275;
    const double C1290 =
        ((zP - zQ) * (C46374 + be * C46514 + C46321 * C46518)) / C46275;
    const double C1293 =
        (C46374 + be * C46514 + C46321 * C46518 +
         (C46398 + be * C46321 * C46471 +
          C46321 *
              (be * C46471 +
               C46321 * (C46390 + ae * C46322 * C46391 +
                         C46322 * (ae * C46391 + C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             std::pow(zP - zQ, 2)) /
        C46275;
    const double C2373 =
        (2 * C46535 * C46518 +
         C46535 * (C46518 + (be * C46471 +
                             C46321 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46539)) /
        C46275;
    const double C2149 = C113 * C1272;
    const double C5110 = C4720 * C1272;
    const double C16312 = C15922 * C1272;
    const double C46864 = C46863 + C46848;
    const double C532 = C47255 * C505;
    const double C760 = C47255 * C506;
    const double C46474 = C46473 + C46465;
    const double C1147 =
        (3 * (C46374 + be * C46514 + C46321 * C46518) +
         be * (2 * C46514 + C46321 * C46519) +
         C46321 *
             (2 * C46518 + be * C46519 +
              C46321 *
                  (C46398 + be * C46321 * C46471 +
                   C46321 * (be * C46471 +
                             C46321 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C1677 =
        ((zP - zQ) *
         (2 * C46518 + be * C46519 +
          C46321 * (C46398 + be * C46321 * C46471 +
                    C46321 * (be * C46471 +
                              C46321 * (C46390 + ae * C46322 * C46391 +
                                        C46322 * (ae * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46275;
    const double C1141 = (3 * (C46429 + C46446 * C46502) +
                          C46321 * (2 * C46514 + C46321 * C46519)) /
                         C46273;
    const double C1284 = (C46429 + C46446 * C46502 + C46519 * C46539) / C46273;
    const double C1674 = (C46535 * (2 * C46514 + C46321 * C46519)) / C46273;
    const double C108 =
        (C47385 + 2 * C47028) / C47018 - (C47394 * C47019) / C47014;
    const double C109 =
        (C47372 + 2 * C47037 + C47394) / C47018 - (C47387 * C47019) / C47014;
    const double C110 = (C47343 + C47034 / C47014 + C47387) / C47018 -
                        (C47374 * C47019) / C47014;
    const double C1118 =
        (C47388 + 2 * C47110) / C47018 - (C47395 * C47106) / C47014;
    const double C1119 =
        (C47376 + 2 * C47117 + C47395) / C47018 - (C47391 * C47106) / C47014;
    const double C1120 = (C47349 + C47114 / C47014 + C47391) / C47018 -
                         (C47381 * C47106) / C47014;
    const double C1963 =
        (C47389 + 2 * C47152) / C47018 - (C47396 * C47148) / C47014;
    const double C1964 =
        (C47378 + 2 * C47159 + C47396) / C47018 - (C47393 * C47148) / C47014;
    const double C1965 = (C47352 + C47156 / C47014 + C47393) / C47018 -
                         (C47384 * C47148) / C47014;
    const double C42384 = C536 * C46998;
    const double C43822 = C43820 + C43821;
    const double C324 =
        (2 * C46354 + ae * C46355 + C46322 * C46374 + be * C46321 * C46449 +
         C46321 * (be * C46449 + C46321 * C46402)) /
        C46275;
    const double C325 =
        (be * (3 * C46429 + C46322 * C46449 +
               (2 * C46423 + C46322 * C46441) * ae) +
         C46321 * (3 * C46374 + ae * C46375 + C46322 * C46402)) /
        C46275;
    const double C924 = ((zP - zQ) * (be * C46449 + C46321 * C46402)) / C46275;
    const double C135 = (4 * (2 * C46417 + C46322 * C46429 + C46640 * ae) +
                         C46322 * (3 * C46429 + C46322 * C46449 + C46645 * ae) +
                         (3 * C46640 + C46322 * C46645) * ae) /
                        C46273;
    const double C312 =
        (2 * C46417 + C46322 * C46429 + C46640 * ae + C46449 * C46502) / C46273;
    const double C314 =
        (C46321 * (3 * C46429 + C46322 * C46449 + C46645 * ae)) / C46273;
    const double C493 =
        (2 * C46417 + C46322 * C46429 + C46640 * ae + C46449 * C46539) / C46273;
    const double C495 =
        (C46535 * (3 * C46429 + C46322 * C46449 + C46645 * ae)) / C46273;
    const double C918 = (C46535 * C46321 * C46449) / C46273;
    const double C2150 = C47255 * C1287;
    const double C5111 = C47367 * C1287;
    const double C16313 = C47367 * C1287;
    const double C1568 = C47255 * C1290;
    const double C5597 = C47367 * C1290;
    const double C16799 = C47367 * C1290;
    const double C22256 =
        (5 * (3 * C46798 + C46321 * C46864 + C46797 * be) +
         C46321 * (4 * C46864 +
                   C46321 * (3 * C46859 +
                             C46321 * (2 * C46851 +
                                       C46321 * (C46367 +
                                                 C46321 * (C46321 * C46391 +
                                                           C46455 * be) +
                                                 C46321 * C46455 * be) +
                                       C46853 * be) +
                             C46858 * be) +
                   C46862 * be) +
         (4 * C46797 + C46321 * C46862) * be) /
        C46273;
    const double C22370 =
        (3 * C46798 + C46321 * C46864 + C46797 * be +
         (3 * C46859 +
          C46321 *
              (2 * C46851 +
               C46321 * (C46367 + C46321 * (C46321 * C46391 + C46455 * be) +
                         C46321 * C46455 * be) +
               C46853 * be) +
          C46858 * be) *
             C46539) /
        C46273;
    const double C22716 =
        (C46535 *
         (4 * C46864 +
          C46321 *
              (3 * C46859 +
               C46321 * (2 * C46851 +
                         C46321 * (C46367 +
                                   C46321 * (C46321 * C46391 + C46455 * be) +
                                   C46321 * C46455 * be) +
                         C46853 * be) +
               C46858 * be) +
          C46862 * be)) /
        C46273;
    const double C23348 =
        (2 * C46535 * C46864 +
         C46535 *
             (C46864 +
              (2 * C46851 +
               C46321 * (C46367 + C46321 * (C46321 * C46391 + C46455 * be) +
                         C46321 * C46455 * be) +
               C46853 * be) *
                  C46539)) /
        C46273;
    const double C46475 = C46322 * C46474;
    const double C1401 =
        (2 * (be * C46449 + C46321 * C46402) + be * (C46449 + C46474 * C46502) +
         C46321 *
             (C46402 + be * C46321 * C46474 +
              C46321 *
                  (be * C46474 +
                   C46321 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C1559 =
        ((zP - zQ) *
         (C46402 + be * C46321 * C46474 +
          C46321 * (be * C46474 +
                    C46321 * (2 * C46394 + ae * C46395 +
                              C46322 * (C46390 + ae * C46322 * C46391 +
                                        C46322 * (ae * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46275;
    const double C2141 =
        (be * C46449 + C46321 * C46402 +
         (be * C46474 +
          C46321 *
              (2 * C46394 + ae * C46395 +
               C46322 * (C46390 + ae * C46322 * C46391 +
                         C46322 * (ae * C46391 + C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             C46539) /
        C46275;
    const double C1400 =
        (2 * C46321 * C46449 + C46321 * (C46449 + C46474 * C46502)) / C46273;
    const double C1558 = (C46535 * (C46449 + C46474 * C46502)) / C46273;
    const double C2140 = (C46321 * C46449 + C46321 * C46474 * C46539) / C46273;
    const double C2254 =
        (2 * C46535 * C46449 + C46535 * (C46449 + C46474 * C46539)) / C46273;
    const double C42388 = C42383 + C42384;
    const double C351 = C47255 * C324;
    const double C5249 = C47367 * C324;
    const double C16451 = C47367 * C324;
    const double C650 = C47255 * C325;
    const double C4755 = C47367 * C325;
    const double C15957 = C47367 * C325;
    const double C938 = C47255 * C924;
    const double C5387 = C47367 * C924;
    const double C16589 = C47367 * C924;
    const double C164 = C113 * C135;
    const double C350 = C113 * C312;
    const double C5248 = C4720 * C312;
    const double C16450 = C15922 * C312;
    const double C649 = C113 * C314;
    const double C4754 = C4720 * C314;
    const double C15956 = C15922 * C314;
    const double C531 = C113 * C493;
    const double C759 = C113 * C495;
    const double C937 = C113 * C918;
    const double C5386 = C4720 * C918;
    const double C16588 = C15922 * C918;
    const double C46476 = C46452 + C46475;
    const double C46477 = C46476 + C46470;
    const double C326 =
        (3 * C46374 + ae * C46375 + C46322 * C46402 + be * C46321 * C46477 +
         C46321 *
             (be * C46477 +
              C46321 *
                  (3 * C46398 + ae * C46399 +
                   C46322 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C643 =
        (be * (4 * C46449 + C46322 * C46477 +
               (3 * C46441 + C46322 * C46468) * ae) +
         C46321 *
             (4 * C46402 + ae * C46403 +
              C46322 *
                  (3 * C46398 + ae * C46399 +
                   C46322 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C925 =
        ((zP - zQ) *
         (be * C46477 +
          C46321 * (3 * C46398 + ae * C46399 +
                    C46322 * (2 * C46394 + ae * C46395 +
                              C46322 * (C46390 + ae * C46322 * C46391 +
                                        C46322 * (ae * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46275;
    const double C137 = (5 * (3 * C46429 + C46322 * C46449 + C46645 * ae) +
                         C46322 * (4 * C46449 + C46322 * C46477 + C46650 * ae) +
                         (4 * C46645 + C46322 * C46650) * ae) /
                        C46273;
    const double C316 =
        (3 * C46429 + C46322 * C46449 + C46645 * ae + C46477 * C46502) / C46273;
    const double C497 =
        (3 * C46429 + C46322 * C46449 + C46645 * ae + C46477 * C46539) / C46273;
    const double C642 =
        (C46321 * (4 * C46449 + C46322 * C46477 + C46650 * ae)) / C46273;
    const double C752 =
        (C46535 * (4 * C46449 + C46322 * C46477 + C46650 * ae)) / C46273;
    const double C920 = (C46535 * C46321 * C46477) / C46273;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47110 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47117 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C2840) *
              C47028 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47110 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C47117 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C2840) *
              C47037 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C47110 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C47117 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47318 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C47110 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47318 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47117 +
           (((C47255 * C303 - C113 * C290) * C114 +
             (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47272 * C47318 +
            ((C113 * C1261 - C47255 * C1273) * C114 +
             (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47272 * C47156) *
               C2840) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47318 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C47110 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47318 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47117 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47272 * C47318 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47255 * C1557 - C113 * C1556) * C116 +
             (C47255 * C1559 - C113 * C1558) * C104) *
                C47272 * C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47395 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47391 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47381 +
           ((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C47069 * C47359) *
              C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47395 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C47391 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47381 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47255 * C1399 - C113 * C1398) * C116 +
            (C47255 * C1401 - C113 * C1400) * C104) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C2472 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47114) *
              C47394 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C2472 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C47114) *
              C47387 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C2472 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C47114) *
              C47374 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C47069 * C2472 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47255 * C641 - C113 * C640) * C116 +
            (C47255 * C643 - C113 * C642) * C104) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47389 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47378 +
            ((C47255 * C484 - C113 * C471) * C114 +
             (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47272 * C47352) *
               C2472 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47389 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47378 +
            ((C113 * C1258 - C47255 * C1267) * C114 +
             (C113 * C1268 - C47255 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47272 * C47352) *
               C47114) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47389 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47378 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47272 * C47352) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47389 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47378 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47255 * C2139 - C113 * C2138) * C116 +
             (C47255 * C2141 - C113 * C2140) * C104) *
                C47272 * C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47318 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C2472 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47318 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47114) *
              C47028 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47318 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47318 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47114) *
              C47037 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47272 * C47318 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47272 * C47156) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47272 * C47318 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47255 * C919 - C113 * C910) * C116 +
             (C47255 * C925 - C113 * C920) * C104) *
                C47272 * C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C2472 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47114) *
              C47394 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C2472 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C47114) *
              C47387 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C2472 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C47114) *
              C47374 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C47069 * C2472 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47255 * C641 - C113 * C640) * C116 +
            (C47255 * C643 - C113 * C642) * C104) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47395 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47391 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47381 +
           ((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C47069 * C47359) *
              C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47395 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C47391 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47381 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47255 * C1399 - C113 * C1398) * C116 +
            (C47255 * C1401 - C113 * C1400) * C104) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C3234 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C47110 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C3234 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47117 +
           (((C47255 * C303 - C113 * C290) * C114 +
             (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47272 * C3234 +
            ((C113 * C1261 - C47255 * C1273) * C114 +
             (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47272 * C47156) *
               C2840) *
              C47303 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C47110 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47117 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47272 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47255 * C1557 - C113 * C1556) * C116 +
             (C47255 * C1559 - C113 * C1558) * C104) *
                C47272 * C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47255 * C124 - C113 * C117) * C114 +
                   (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                   (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                      C47272 * C47152 +
                  ((C113 * C468 - C47255 * C478) * C114 +
                   (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
                   (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                      C47272 * C47159 +
                  ((C47255 * C484 - C113 * C471) * C114 +
                   (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
                   (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                      C47272 * C3742) *
                     C47110 +
                 (((C113 * C287 - C47255 * C297) * C114 +
                   (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
                   (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                      C47272 * C47152 +
                  ((C47255 * C911 - C113 * C906) * C114 +
                   (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                   (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                      C47272 * C47159 +
                  ((C113 * C1258 - C47255 * C1267) * C114 +
                   (C113 * C1268 - C47255 * C1285) * C102 +
                   (C2143 - C2144) * C115 + (C2145 - C2146) * C103 +
                   (C2147 - C2148) * C116 + (C2149 - C2150) * C104) *
                      C47272 * C3742) *
                     C47117 +
                 (((C47255 * C303 - C113 * C290) * C114 +
                   (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                   (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                      C47272 * C47152 +
                  ((C113 * C1261 - C47255 * C1273) * C114 +
                   (C113 * C1274 - C47255 * C1288) * C102 +
                   (C1561 - C1562) * C115 + (C1563 - C1564) * C103 +
                   (C1565 - C1566) * C116 + (C1567 - C1568) * C104) *
                      C47272 * C47159 +
                  ((C47255 * C1279 - C113 * C1264) * C114 +
                   (C47255 * C1291 - C113 * C1280) * C102 +
                   (C47255 * C1281 - C113 * C1265) * C115 +
                   (C47255 * C1292 - C113 * C1282) * C103 +
                   (C47255 * C1283 - C113 * C1266) * C116 +
                   (C47255 * C1293 - C113 * C1284) * C104) *
                      C47272 * C3742) *
                     C2840) *
                C47023) /
               (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C3234 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C47395 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C3234 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C47156) *
              C47391 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C3234 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47272 * C47156) *
              C47381 +
          (((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C3234 +
           ((C47255 * C1669 - C113 * C1666) * C114 +
            (C47255 * C1675 - C113 * C1670) * C102 +
            (C47255 * C1671 - C113 * C1667) * C115 +
            (C47255 * C1676 - C113 * C1672) * C103 +
            (C47255 * C1673 - C113 * C1668) * C116 +
            (C47255 * C1677 - C113 * C1674) * C104) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C3234 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C2472 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C3234 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47114) *
              C47385 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47114) *
              C47372 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47272 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47272 * C47156) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47272 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47255 * C919 - C113 * C910) * C116 +
             (C47255 * C925 - C113 * C920) * C104) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47396 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47393 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47384 +
           ((C113 * C1968 - C47255 * C1974) * C114 +
            (C113 * C1975 - C47255 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47272 * C47365) *
              C2472 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47396 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C47393 +
           ((C113 * C1258 - C47255 * C1267) * C114 +
            (C113 * C1268 - C47255 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C47272 * C47384 +
           ((C47255 * C2365 - C113 * C2362) * C114 +
            (C47255 * C2371 - C113 * C2366) * C102 +
            (C47255 * C2367 - C113 * C2363) * C115 +
            (C47255 * C2372 - C113 * C2368) * C103 +
            (C47255 * C2369 - C113 * C2364) * C116 +
            (C47255 * C2373 - C113 * C2370) * C104) *
               C47272 * C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47152 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47159 +
            ((C47255 * C484 - C113 * C471) * C114 +
             (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47272 * C3742) *
               C2472 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47152 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47159 +
            ((C113 * C1258 - C47255 * C1267) * C114 +
             (C113 * C1268 - C47255 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47272 * C3742) *
               C47114) *
              C47303 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47152 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47159 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47272 * C3742) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47152 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47159 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47255 * C2139 - C113 * C2138) * C116 +
             (C47255 * C2141 - C113 * C2140) * C104) *
                C47272 * C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C3234 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C2472 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C3234 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47114) *
              C47385 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47114) *
              C47372 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47272 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47272 * C47156) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47272 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47255 * C919 - C113 * C910) * C116 +
             (C47255 * C925 - C113 * C920) * C104) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C3234 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C47395 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C3234 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C47156) *
              C47391 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C3234 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47272 * C47156) *
              C47381 +
          (((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C3234 +
           ((C47255 * C1669 - C113 * C1666) * C114 +
            (C47255 * C1675 - C113 * C1670) * C102 +
            (C47255 * C1671 - C113 * C1667) * C115 +
            (C47255 * C1676 - C113 * C1672) * C103 +
            (C47255 * C1673 - C113 * C1668) * C116 +
            (C47255 * C1677 - C113 * C1674) * C104) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C1392 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C1393 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C1394 +
           ((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C47069 * C47359) *
              C47303 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C1392 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C1393 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C1394 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47255 * C1399 - C113 * C1398) * C116 +
            (C47255 * C1401 - C113 * C1400) * C104) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47317 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47114) *
              C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47317 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C47114) *
              C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C47317 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C47114) *
              C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C47069 * C47317 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47255 * C641 - C113 * C640) * C116 +
            (C47255 * C643 - C113 * C642) * C104) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C1788 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C1789 +
            ((C47255 * C484 - C113 * C471) * C114 +
             (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47272 * C47352) *
               C47317 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C1788 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C1789 +
            ((C113 * C1258 - C47255 * C1267) * C114 +
             (C113 * C1268 - C47255 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47272 * C47352) *
               C47114) *
              C47303 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C1788 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C1789 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47272 * C47352) *
               C47317 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C1788 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C1789 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47255 * C2139 - C113 * C2138) * C116 +
             (C47255 * C2141 - C113 * C2140) * C104) *
                C47272 * C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47318 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C1392 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47318 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C47156) *
              C1393 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47318 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47272 * C47156) *
              C1394 +
          (((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C47318 +
           ((C47255 * C1669 - C113 * C1666) * C114 +
            (C47255 * C1675 - C113 * C1670) * C102 +
            (C47255 * C1671 - C113 * C1667) * C115 +
            (C47255 * C1676 - C113 * C1672) * C103 +
            (C47255 * C1673 - C113 * C1668) * C116 +
            (C47255 * C1677 - C113 * C1674) * C104) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47318 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C47317 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47318 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47114) *
              C284 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47318 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C47317 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47318 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47114) *
              C285 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47272 * C47318 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47272 * C47156) *
               C47317 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47272 * C47318 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47255 * C919 - C113 * C910) * C116 +
             (C47255 * C925 - C113 * C920) * C104) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C2248 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C2249 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C2250 +
           ((C113 * C1968 - C47255 * C1974) * C114 +
            (C113 * C1975 - C47255 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47272 * C47365) *
              C47317 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C2248 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C2249 +
           ((C113 * C1258 - C47255 * C1267) * C114 +
            (C113 * C1268 - C47255 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C47272 * C2250 +
           ((C47255 * C2365 - C113 * C2362) * C114 +
            (C47255 * C2371 - C113 * C2366) * C102 +
            (C47255 * C2367 - C113 * C2363) * C115 +
            (C47255 * C2372 - C113 * C2368) * C103 +
            (C47255 * C2369 - C113 * C2364) * C116 +
            (C47255 * C2373 - C113 * C2370) * C104) *
               C47272 * C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C47255 * C124 - C113 * C117) * C114 +
               (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
               (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                  C47272 * C47069 * C47051 * C108 +
              ((C147 - C146) * C114 + (C149 - C148) * C102 +
               (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
               C169 * C104) *
                  C47272 * C47069 * C47051 * C109 +
              (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
               (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                  C47272 * C47069 * C47051 * C110 +
              (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
               (C161 - C160) * C103 + (C162 - C163) * C116 +
               (C164 - C165) * C104) *
                  C47272 * C47069 * C47051 * C111 +
              (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
               (C165 - C164) * C103 + (C47255 * C136 - C113 * C123) * C116 +
               (C47255 * C144 - C113 * C137) * C104) *
                  C47272 * C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C47255 * C124 - C113 * C117) * C114 +
                (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C47272 * C47069 * C47388 +
               ((C113 * C287 - C47255 * C297) * C114 +
                (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C47272 * C47069 * C47376 +
               ((C47255 * C303 - C113 * C290) * C114 +
                (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C47272 * C47069 * C47349) *
                  C284 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C47272 * C47069 * C47388 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 +
                (C344 - C345) * C116 + (C346 - C347) * C104) *
                   C47272 * C47069 * C47376 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C47272 * C47069 * C47349) *
                  C285 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C47272 * C47069 * C47388 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C113 * C295 - C47255 * C313) * C116 +
                (C113 * C314 - C47255 * C325) * C104) *
                   C47272 * C47069 * C47376 +
               (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
                (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
                (C47255 * C326 - C113 * C316) * C104) *
                   C47272 * C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47389 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47378 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C47051 * C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47389 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + (C525 - C526) * C116 +
            (C527 - C528) * C104) *
               C47272 * C47378 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47272 * C47352) *
              C47051 * C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47389 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C113 * C476 - C47255 * C494) * C116 +
            (C113 * C495 - C47255 * C506) * C104) *
               C47272 * C47378 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47255 * C496 - C113 * C477) * C116 +
            (C47255 * C507 - C113 * C497) * C104) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C1050 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C1051 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47349) *
              C47372 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C47069 * C1118 +
          ((C113 * C287 - C47255 * C297) * C114 +
           (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47272 * C47069 * C1119 +
          ((C47255 * C303 - C113 * C290) * C114 +
           (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47272 * C47069 * C1120 +
          ((C113 * C1124 - C47255 * C1130) * C114 +
           (C113 * C1131 - C47255 * C1142) * C102 +
           (C113 * C1125 - C47255 * C1132) * C115 +
           (C113 * C1133 - C47255 * C1143) * C103 +
           (C113 * C1126 - C47255 * C1134) * C116 +
           (C113 * C1135 - C47255 * C1144) * C104) *
              C47272 * C47069 * C1121 +
          ((C47255 * C1136 - C113 * C1127) * C114 +
           (C47255 * C1145 - C113 * C1137) * C102 +
           (C47255 * C1138 - C113 * C1128) * C115 +
           (C47255 * C1146 - C113 * C1139) * C103 +
           (C47255 * C1140 - C113 * C1129) * C116 +
           (C47255 * C1147 - C113 * C1141) * C104) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47389 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47378 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C1050 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47389 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C47378 +
           ((C113 * C1258 - C47255 * C1267) * C114 +
            (C113 * C1268 - C47255 * C1285) * C102 +
            (C113 * C1259 - C47255 * C1269) * C115 +
            (C113 * C1270 - C47255 * C1286) * C103 +
            (C113 * C1260 - C47255 * C1271) * C116 +
            (C113 * C1272 - C47255 * C1287) * C104) *
               C47272 * C47352) *
              C1051 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47389 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 +
            (C113 * C1262 - C47255 * C1275) * C115 +
            (C113 * C1276 - C47255 * C1289) * C103 +
            (C113 * C1263 - C47255 * C1277) * C116 +
            (C113 * C1278 - C47255 * C1290) * C104) *
               C47272 * C47378 +
           ((C47255 * C1279 - C113 * C1264) * C114 +
            (C47255 * C1291 - C113 * C1280) * C102 +
            (C47255 * C1281 - C113 * C1265) * C115 +
            (C47255 * C1292 - C113 * C1282) * C103 +
            (C47255 * C1283 - C113 * C1266) * C116 +
            (C47255 * C1293 - C113 * C1284) * C104) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C1788 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C1789 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C47051 * C47385 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C1788 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C1789 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47272 * C47352) *
              C47051 * C47372 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C1788 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47272 * C1789 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47255 * C496 - C113 * C477) * C116 +
            (C47255 * C507 - C113 * C497) * C104) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C1788 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C1789 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C47388 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C1788 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C1789 +
           ((C113 * C1258 - C47255 * C1267) * C114 +
            (C113 * C1268 - C47255 * C1285) * C102 +
            (C113 * C1259 - C47255 * C1269) * C115 +
            (C113 * C1270 - C47255 * C1286) * C103 +
            (C113 * C1260 - C47255 * C1271) * C116 +
            (C113 * C1272 - C47255 * C1287) * C104) *
               C47272 * C47352) *
              C47376 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C1788 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47272 * C1789 +
           ((C47255 * C1279 - C113 * C1264) * C114 +
            (C47255 * C1291 - C113 * C1280) * C102 +
            (C47255 * C1281 - C113 * C1265) * C115 +
            (C47255 * C1292 - C113 * C1282) * C103 +
            (C47255 * C1283 - C113 * C1266) * C116 +
            (C47255 * C1293 - C113 * C1284) * C104) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C1963 +
          ((C113 * C468 - C47255 * C478) * C114 +
           (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
           (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
              C47272 * C1964 +
          ((C47255 * C484 - C113 * C471) * C114 +
           (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
           (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
              C47272 * C1965 +
          ((C113 * C1968 - C47255 * C1974) * C114 +
           (C113 * C1975 - C47255 * C1986) * C102 +
           (C113 * C1969 - C47255 * C1976) * C115 +
           (C113 * C1977 - C47255 * C1987) * C103 +
           (C113 * C1970 - C47255 * C1978) * C116 +
           (C113 * C1979 - C47255 * C1988) * C104) *
              C47272 * C1966 +
          ((C47255 * C1980 - C113 * C1971) * C114 +
           (C47255 * C1989 - C113 * C1981) * C102 +
           (C47255 * C1982 - C113 * C1972) * C115 +
           (C47255 * C1990 - C113 * C1983) * C103 +
           (C47255 * C1984 - C113 * C1973) * C116 +
           (C47255 * C1991 - C113 * C1985) * C104) *
              C47272 * C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47318 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C1050 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47318 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C1051 +
           (((C47255 * C303 - C113 * C290) * C114 +
             (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47272 * C47318 +
            ((C113 * C1261 - C47255 * C1273) * C114 +
             (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47272 * C47156) *
               C47349) *
              C47303 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47318 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C1050 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47318 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C1051 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47272 * C47318 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47255 * C1557 - C113 * C1556) * C116 +
             (C47255 * C1559 - C113 * C1558) * C104) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47318 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C47051 * C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47318 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C47156) *
              C47051 * C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47318 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47272 * C47156) *
              C47051 * C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C47318 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47255 * C751 - C113 * C750) * C116 +
            (C47255 * C753 - C113 * C752) * C104) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C2248 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C2249 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C2250 +
           ((C113 * C1968 - C47255 * C1974) * C114 +
            (C113 * C1975 - C47255 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47272 * C47365) *
              C47051 * C47303 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C2248 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C2249 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47272 * C2250 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C47255 * C2253 - C113 * C2252) * C116 +
            (C47255 * C2255 - C113 * C2254) * C104) *
               C47272 * C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47388 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47376 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47388 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C47272 * C47069 * C47376 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47349) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C47388 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C47255 * C313) * C116 +
            (C113 * C314 - C47255 * C325) * C104) *
               C47272 * C47069 * C47376 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C47069 * C47051 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C47272 * C47069 * C47051 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C47272 * C47069 * C47051 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C47272 * C47069 * C47051 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C47255 * C136 - C113 * C123) * C116 +
           (C47255 * C144 - C113 * C137) * C104) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C1050 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C1051 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47349) *
              C47372 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C47069 * C1118 +
          ((C113 * C287 - C47255 * C297) * C114 +
           (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47272 * C47069 * C1119 +
          ((C47255 * C303 - C113 * C290) * C114 +
           (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47272 * C47069 * C1120 +
          ((C113 * C1124 - C47255 * C1130) * C114 +
           (C113 * C1131 - C47255 * C1142) * C102 +
           (C113 * C1125 - C47255 * C1132) * C115 +
           (C113 * C1133 - C47255 * C1143) * C103 +
           (C113 * C1126 - C47255 * C1134) * C116 +
           (C113 * C1135 - C47255 * C1144) * C104) *
              C47272 * C47069 * C1121 +
          ((C47255 * C1136 - C113 * C1127) * C114 +
           (C47255 * C1145 - C113 * C1137) * C102 +
           (C47255 * C1138 - C113 * C1128) * C115 +
           (C47255 * C1146 - C113 * C1139) * C103 +
           (C47255 * C1140 - C113 * C1129) * C116 +
           (C47255 * C1147 - C113 * C1141) * C104) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C1788 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C1789 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C47051 * C47385 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C1788 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C1789 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47272 * C47352) *
              C47051 * C47372 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C1788 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47272 * C1789 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47255 * C496 - C113 * C477) * C116 +
            (C47255 * C507 - C113 * C497) * C104) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C1788 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C1789 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C47388 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C1788 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C1789 +
           ((C113 * C1258 - C47255 * C1267) * C114 +
            (C113 * C1268 - C47255 * C1285) * C102 +
            (C113 * C1259 - C47255 * C1269) * C115 +
            (C113 * C1270 - C47255 * C1286) * C103 +
            (C113 * C1260 - C47255 * C1271) * C116 +
            (C113 * C1272 - C47255 * C1287) * C104) *
               C47272 * C47352) *
              C47376 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C1788 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47272 * C1789 +
           ((C47255 * C1279 - C113 * C1264) * C114 +
            (C47255 * C1291 - C113 * C1280) * C102 +
            (C47255 * C1281 - C113 * C1265) * C115 +
            (C47255 * C1292 - C113 * C1282) * C103 +
            (C47255 * C1283 - C113 * C1266) * C116 +
            (C47255 * C1293 - C113 * C1284) * C104) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C3234 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C47317 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C3234 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47114) *
              C47028 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C47317 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47114) *
              C47037 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47272 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47272 * C47156) *
               C47317 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47272 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47255 * C919 - C113 * C910) * C116 +
             (C47255 * C925 - C113 * C920) * C104) *
                C47272 * C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47152 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47159 +
            ((C47255 * C484 - C113 * C471) * C114 +
             (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47272 * C3742) *
               C47317 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47152 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47159 +
            ((C113 * C1258 - C47255 * C1267) * C114 +
             (C113 * C1268 - C47255 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47272 * C3742) *
               C47114) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47152 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47159 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47272 * C3742) *
               C47317 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47152 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47159 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47255 * C2139 - C113 * C2138) * C116 +
             (C47255 * C2141 - C113 * C2140) * C104) *
                C47272 * C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C3234 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C47388 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C3234 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47376 +
           (((C47255 * C303 - C113 * C290) * C114 +
             (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47272 * C3234 +
            ((C113 * C1261 - C47255 * C1273) * C114 +
             (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47272 * C47156) *
               C47349) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C47388 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47376 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47272 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47255 * C1557 - C113 * C1556) * C116 +
             (C47255 * C1559 - C113 * C1558) * C104) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C3234 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C47051 * C47394 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C3234 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C47156) *
              C47051 * C47387 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C3234 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47272 * C47156) *
              C47051 * C47374 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C3234 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47255 * C751 - C113 * C750) * C116 +
            (C47255 * C753 - C113 * C752) * C104) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47396 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47393 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47384 +
           ((C113 * C1968 - C47255 * C1974) * C114 +
            (C113 * C1975 - C47255 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47272 * C47365) *
              C47051 * C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47396 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C47393 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47272 * C47384 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C47255 * C2253 - C113 * C2252) * C116 +
            (C47255 * C2255 - C113 * C2254) * C104) *
               C47272 * C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47152 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47159 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C3742) *
              C47051 * C47028 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47152 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C47159 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47272 * C3742) *
              C47051 * C47037 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47152 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47272 * C47159 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47255 * C496 - C113 * C477) * C116 +
            (C47255 * C507 - C113 * C497) * C104) *
               C47272 * C3742) *
              C47051 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C3234 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C47051 * C47394 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C3234 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C47156) *
              C47051 * C47387 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C3234 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47272 * C47156) *
              C47051 * C47374 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C3234 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47255 * C751 - C113 * C750) * C116 +
            (C47255 * C753 - C113 * C752) * C104) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C3234 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C47388 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C3234 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47376 +
           (((C47255 * C303 - C113 * C290) * C114 +
             (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47272 * C3234 +
            ((C113 * C1261 - C47255 * C1273) * C114 +
             (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47272 * C47156) *
               C47349) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C47388 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47376 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47272 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47255 * C1557 - C113 * C1556) * C116 +
             (C47255 * C1559 - C113 * C1558) * C104) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47317 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47114) *
              C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47317 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C47114) *
              C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C47317 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C47114) *
              C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C47069 * C47317 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47255 * C641 - C113 * C640) * C116 +
            (C47255 * C643 - C113 * C642) * C104) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C1392 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C1393 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C1394 +
           ((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C47069 * C47359) *
              C47303 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C1392 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C1393 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C1394 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47255 * C1399 - C113 * C1398) * C116 +
            (C47255 * C1401 - C113 * C1400) * C104) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47318 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C47317 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47318 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C47114) *
              C284 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47318 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C47317 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47318 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C47114) *
              C285 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47272 * C47318 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47272 * C47156) *
               C47317 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47272 * C47318 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47255 * C919 - C113 * C910) * C116 +
             (C47255 * C925 - C113 * C920) * C104) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47318 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C1392 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47318 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C47156) *
              C1393 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47318 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47272 * C47156) *
              C1394 +
          (((C113 * C1124 - C47255 * C1130) * C114 +
            (C113 * C1131 - C47255 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47272 * C47318 +
           ((C47255 * C1669 - C113 * C1666) * C114 +
            (C47255 * C1675 - C113 * C1670) * C102 +
            (C47255 * C1671 - C113 * C1667) * C115 +
            (C47255 * C1676 - C113 * C1672) * C103 +
            (C47255 * C1673 - C113 * C1668) * C116 +
            (C47255 * C1677 - C113 * C1674) * C104) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47388 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47376 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47388 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C47272 * C47069 * C47376 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47349) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C47388 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C47255 * C313) * C116 +
            (C113 * C314 - C47255 * C325) * C104) *
               C47272 * C47069 * C47376 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C47069 * C47051 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C47272 * C47069 * C47051 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C47272 * C47069 * C47051 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C47272 * C47069 * C47051 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C47255 * C136 - C113 * C123) * C116 +
           (C47255 * C144 - C113 * C137) * C104) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47389 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47378 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C47051 * C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47389 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + (C525 - C526) * C116 +
            (C527 - C528) * C104) *
               C47272 * C47378 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47272 * C47352) *
              C47051 * C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47389 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C113 * C476 - C47255 * C494) * C116 +
            (C113 * C495 - C47255 * C506) * C104) *
               C47272 * C47378 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47255 * C496 - C113 * C477) * C116 +
            (C47255 * C507 - C113 * C497) * C104) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C1050 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C1051 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47349) *
              C47372 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C47069 * C1118 +
          ((C113 * C287 - C47255 * C297) * C114 +
           (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47272 * C47069 * C1119 +
          ((C47255 * C303 - C113 * C290) * C114 +
           (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47272 * C47069 * C1120 +
          ((C113 * C1124 - C47255 * C1130) * C114 +
           (C113 * C1131 - C47255 * C1142) * C102 +
           (C113 * C1125 - C47255 * C1132) * C115 +
           (C113 * C1133 - C47255 * C1143) * C103 +
           (C113 * C1126 - C47255 * C1134) * C116 +
           (C113 * C1135 - C47255 * C1144) * C104) *
              C47272 * C47069 * C1121 +
          ((C47255 * C1136 - C113 * C1127) * C114 +
           (C47255 * C1145 - C113 * C1137) * C102 +
           (C47255 * C1138 - C113 * C1128) * C115 +
           (C47255 * C1146 - C113 * C1139) * C103 +
           (C47255 * C1140 - C113 * C1129) * C116 +
           (C47255 * C1147 - C113 * C1141) * C104) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47389 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47378 +
           ((C47255 * C484 - C113 * C471) * C114 +
            (C47255 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47272 * C47352) *
              C1050 +
          (((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47389 +
           ((C47255 * C911 - C113 * C906) * C114 +
            (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47272 * C47378 +
           ((C113 * C1258 - C47255 * C1267) * C114 +
            (C113 * C1268 - C47255 * C1285) * C102 +
            (C113 * C1259 - C47255 * C1269) * C115 +
            (C113 * C1270 - C47255 * C1286) * C103 +
            (C113 * C1260 - C47255 * C1271) * C116 +
            (C113 * C1272 - C47255 * C1287) * C104) *
               C47272 * C47352) *
              C1051 +
          (((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47389 +
           ((C113 * C1261 - C47255 * C1273) * C114 +
            (C113 * C1274 - C47255 * C1288) * C102 +
            (C113 * C1262 - C47255 * C1275) * C115 +
            (C113 * C1276 - C47255 * C1289) * C103 +
            (C113 * C1263 - C47255 * C1277) * C116 +
            (C113 * C1278 - C47255 * C1290) * C104) *
               C47272 * C47378 +
           ((C47255 * C1279 - C113 * C1264) * C114 +
            (C47255 * C1291 - C113 * C1280) * C102 +
            (C47255 * C1281 - C113 * C1265) * C115 +
            (C47255 * C1292 - C113 * C1282) * C103 +
            (C47255 * C1283 - C113 * C1266) * C116 +
            (C47255 * C1293 - C113 * C1284) * C104) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47318 +
           ((C113 * C468 - C47255 * C478) * C114 +
            (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47272 * C47156) *
              C47051 * C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47318 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47272 * C47156) *
              C47051 * C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47318 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47272 * C47156) *
              C47051 * C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47272 * C47318 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47255 * C751 - C113 * C750) * C116 +
            (C47255 * C753 - C113 * C752) * C104) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C114 +
             (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47272 * C47318 +
            ((C113 * C468 - C47255 * C478) * C114 +
             (C113 * C479 - C47255 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47272 * C47156) *
               C1050 +
           (((C113 * C287 - C47255 * C297) * C114 +
             (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47272 * C47318 +
            ((C47255 * C911 - C113 * C906) * C114 +
             (C47255 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47272 * C47156) *
               C1051 +
           (((C47255 * C303 - C113 * C290) * C114 +
             (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47272 * C47318 +
            ((C113 * C1261 - C47255 * C1273) * C114 +
             (C113 * C1274 - C47255 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47272 * C47156) *
               C47349) *
              C47303 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47272 * C47318 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47272 * C47156) *
               C1050 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47272 * C47318 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47272 * C47156) *
               C1051 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47272 * C47318 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47255 * C1557 - C113 * C1556) * C116 +
             (C47255 * C1559 - C113 * C1558) * C104) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C47069 * C47051 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C47272 * C47069 * C47051 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C47272 * C47069 * C47051 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C47272 * C47069 * C47051 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C47255 * C136 - C113 * C123) * C116 +
           (C47255 * C144 - C113 * C137) * C104) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C47388 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C47376 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C47388 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C47272 * C47069 * C47376 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47349) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C47388 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C47255 * C313) * C116 +
            (C113 * C314 - C47255 * C325) * C104) *
               C47272 * C47069 * C47376 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C114 +
            (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47272 * C47069 * C1050 +
           ((C113 * C287 - C47255 * C297) * C114 +
            (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47272 * C47069 * C1051 +
           ((C47255 * C303 - C113 * C290) * C114 +
            (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47272 * C47069 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47272 * C47069 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47272 * C47069 * C47349) *
              C47372 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47272 * C47069 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47272 * C47069 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47255 * C315 - C113 * C296) * C116 +
            (C47255 * C326 - C113 * C316) * C104) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47255 * C124 - C113 * C117) * C114 +
           (C47255 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47272 * C47069 * C1118 +
          ((C113 * C287 - C47255 * C297) * C114 +
           (C113 * C298 - C47255 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47272 * C47069 * C1119 +
          ((C47255 * C303 - C113 * C290) * C114 +
           (C47255 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47272 * C47069 * C1120 +
          ((C113 * C1124 - C47255 * C1130) * C114 +
           (C113 * C1131 - C47255 * C1142) * C102 +
           (C113 * C1125 - C47255 * C1132) * C115 +
           (C113 * C1133 - C47255 * C1143) * C103 +
           (C113 * C1126 - C47255 * C1134) * C116 +
           (C113 * C1135 - C47255 * C1144) * C104) *
              C47272 * C47069 * C1121 +
          ((C47255 * C1136 - C113 * C1127) * C114 +
           (C47255 * C1145 - C113 * C1137) * C102 +
           (C47255 * C1138 - C113 * C1128) * C115 +
           (C47255 * C1146 - C113 * C1139) * C103 +
           (C47255 * C1140 - C113 * C1129) * C116 +
           (C47255 * C1147 - C113 * C1141) * C104) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47110 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47117 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C2840) *
              C47028 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47110 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47117 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C2840) *
              C47037 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C47110 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C47117 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47318 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47318 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C4721 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C4717 +
             (C4910 - C4911 + C4912 - C4913) * C4722 +
             (C4914 - C4915 + C4916 - C4917) * C47336) *
                C47272 * C47318 +
            ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                 C4721 +
             (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                 C4717 +
             (C6320 - C6321 + C6322 - C6323) * C4722 +
             (C6324 - C6325 + C6326 - C6327) * C47336) *
                C47272 * C47156) *
               C2840) *
              C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47318 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47318 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C4911 - C4910 + C4913 - C4912) * C4721 +
             (C4915 - C4914 + C4917 - C4916) * C4717 +
             (C4926 - C4927 + C4928 - C4929) * C4722 +
             (C4930 - C4931 + C4932 - C4933) * C47336) *
                C47272 * C47318 +
            ((C6321 - C6320 + C6323 - C6322) * C4721 +
             (C6325 - C6324 + C6327 - C6326) * C4717 +
             (C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C4722 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47395 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47391 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47381 +
           ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C47069 * C47359) *
              C2580 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47395 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47391 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47381 +
           ((C6119 - C6118 + C6121 - C6120) * C4721 +
            (C6123 - C6122 + C6125 - C6124) * C4717 +
            (C4715 * C1134 - C4719 * C1126 + C47367 * C1140 - C4720 * C1129) *
                C4722 +
            (C4715 * C1144 - C4719 * C1135 + C47367 * C1147 - C4720 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C2472 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47114) *
              C47394 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C2472 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47114) *
              C47387 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C2472 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C47114) *
              C47374 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C47069 * C2472 +
           ((C5243 - C5242 + C5245 - C5244) * C4721 +
            (C5247 - C5246 + C5249 - C5248) * C4717 +
            (C4715 * C313 - C4719 * C295 + C47367 * C315 - C4720 * C296) *
                C4722 +
            (C4715 * C325 - C4719 * C314 + C47367 * C326 - C4720 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47389 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47378 +
            ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                 C4721 +
             (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                 C4717 +
             (C5088 - C5089 + C5090 - C5091) * C4722 +
             (C5092 - C5093 + C5094 - C5095) * C47336) *
                C47272 * C47352) *
               C2472 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47389 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47378 +
            ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                 C4721 +
             (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                 C4717 +
             (C7042 - C7043 + C7044 - C7045) * C4722 +
             (C7046 - C7047 + C7048 - C7049) * C47336) *
                C47272 * C47352) *
               C47114) *
              C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47389 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47378 +
            ((C5089 - C5088 + C5091 - C5090) * C4721 +
             (C5093 - C5092 + C5095 - C5094) * C4717 +
             (C5104 - C5105 + C5106 - C5107) * C4722 +
             (C5108 - C5109 + C5110 - C5111) * C47336) *
                C47272 * C47352) *
               C2472 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47389 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47378 +
            ((C7043 - C7042 + C7045 - C7044) * C4721 +
             (C7047 - C7046 + C7049 - C7048) * C4717 +
             (C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                 C4722 +
             (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                 C47336) *
                C47272 * C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47318 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47318 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47028 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47318 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47318 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47037 +
          ((((C4733 - C4732 + C4735 - C4734) * C4721 +
             (C4737 - C4736 + C4739 - C4738) * C4717 +
             (C4740 - C4741 + C4742 - C4743) * C4722 +
             (C4744 - C4745 + C4746 - C4747) * C47336) *
                C47272 * C47318 +
            ((C5097 - C5096 + C5099 - C5098) * C4721 +
             (C5101 - C5100 + C5103 - C5102) * C4717 +
             (C5380 - C5381 + C5382 - C5383) * C4722 +
             (C5384 - C5385 + C5386 - C5387) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4919 - C4918 + C4921 - C4920) * C4721 +
             (C4923 - C4922 + C4925 - C4924) * C4717 +
             (C5242 - C5243 + C5244 - C5245) * C4722 +
             (C5246 - C5247 + C5248 - C5249) * C47336) *
                C47272 * C47318 +
            ((C5591 - C5590 + C5593 - C5592) * C4721 +
             (C5595 - C5594 + C5597 - C5596) * C4717 +
             (C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C4722 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C2472 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47114) *
              C47394 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C2472 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47114) *
              C47387 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C2472 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C47114) *
              C47374 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C47069 * C2472 +
           ((C5243 - C5242 + C5245 - C5244) * C4721 +
            (C5247 - C5246 + C5249 - C5248) * C4717 +
            (C4715 * C313 - C4719 * C295 + C47367 * C315 - C4720 * C296) *
                C4722 +
            (C4715 * C325 - C4719 * C314 + C47367 * C326 - C4720 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47395 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47391 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47381 +
           ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C47069 * C47359) *
              C2580 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47395 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47391 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47381 +
           ((C6119 - C6118 + C6121 - C6120) * C4721 +
            (C6123 - C6122 + C6125 - C6124) * C4717 +
            (C4715 * C1134 - C4719 * C1126 + C47367 * C1140 - C4720 * C1129) *
                C4722 +
            (C4715 * C1144 - C4719 * C1135 + C47367 * C1147 - C4720 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C3234 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C3234 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C4721 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C4717 +
             (C4910 - C4911 + C4912 - C4913) * C4722 +
             (C4914 - C4915 + C4916 - C4917) * C47336) *
                C47272 * C3234 +
            ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                 C4721 +
             (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                 C4717 +
             (C6320 - C6321 + C6322 - C6323) * C4722 +
             (C6324 - C6325 + C6326 - C6327) * C47336) *
                C47272 * C47156) *
               C2840) *
              C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C3234 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C3234 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C4911 - C4910 + C4913 - C4912) * C4721 +
             (C4915 - C4914 + C4917 - C4916) * C4717 +
             (C4926 - C4927 + C4928 - C4929) * C4722 +
             (C4930 - C4931 + C4932 - C4933) * C47336) *
                C47272 * C3234 +
            ((C6321 - C6320 + C6323 - C6322) * C4721 +
             (C6325 - C6324 + C6327 - C6326) * C4717 +
             (C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C4722 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47152 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47159 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C3742) *
              C47110 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47152 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47159 +
           ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                C4721 +
            (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                C4717 +
            (C7042 - C7043 + C7044 - C7045) * C4722 +
            (C7046 - C7047 + C7048 - C7049) * C47336) *
               C47272 * C3742) *
              C47117 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47152 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C6320 - C6321 + C6322 - C6323) * C4722 +
            (C6324 - C6325 + C6326 - C6327) * C47336) *
               C47272 * C47159 +
           ((C4715 * C1279 - C4719 * C1264 + C47367 * C5981 - C4720 * C5979) *
                C4721 +
            (C4715 * C1291 - C4719 * C1280 + C47367 * C5985 - C4720 * C5982) *
                C4717 +
            (C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                C4722 +
            (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                C47336) *
               C47272 * C3742) *
              C2840) *
         C47023) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C3234 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C47395 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C3234 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47156) *
              C47391 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C3234 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C6320 - C6321 + C6322 - C6323) * C4722 +
            (C6324 - C6325 + C6326 - C6327) * C47336) *
               C47272 * C47156) *
              C47381 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C3234 +
           ((C4715 * C1669 - C4719 * C1666 + C47367 * C6459 - C4720 * C6457) *
                C4721 +
            (C4715 * C1675 - C4719 * C1670 + C47367 * C6463 - C4720 * C6460) *
                C4717 +
            (C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                C4722 +
            (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C3234 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C3234 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C3234 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C3234 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C4721 +
             (C4737 - C4736 + C4739 - C4738) * C4717 +
             (C4740 - C4741 + C4742 - C4743) * C4722 +
             (C4744 - C4745 + C4746 - C4747) * C47336) *
                C47272 * C3234 +
            ((C5097 - C5096 + C5099 - C5098) * C4721 +
             (C5101 - C5100 + C5103 - C5102) * C4717 +
             (C5380 - C5381 + C5382 - C5383) * C4722 +
             (C5384 - C5385 + C5386 - C5387) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4919 - C4918 + C4921 - C4920) * C4721 +
             (C4923 - C4922 + C4925 - C4924) * C4717 +
             (C5242 - C5243 + C5244 - C5245) * C4722 +
             (C5246 - C5247 + C5248 - C5249) * C47336) *
                C47272 * C3234 +
            ((C5591 - C5590 + C5593 - C5592) * C4721 +
             (C5595 - C5594 + C5597 - C5596) * C4717 +
             (C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C4722 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47396 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47393 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47384 +
           ((C4719 * C1968 - C4715 * C1974 + C4720 * C2362 - C47367 * C2365) *
                C4721 +
            (C4719 * C1975 - C4715 * C1986 + C4720 * C2366 - C47367 * C2371) *
                C4717 +
            (C7180 - C7181 + C7182 - C7183) * C4722 +
            (C7184 - C7185 + C7186 - C7187) * C47336) *
               C47272 * C47365) *
              C2472 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47396 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47393 +
           ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                C4721 +
            (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                C4717 +
            (C7042 - C7043 + C7044 - C7045) * C4722 +
            (C7046 - C7047 + C7048 - C7049) * C47336) *
               C47272 * C47384 +
           ((C4715 * C2365 - C4719 * C2362 + C47367 * C7319 - C4720 * C7317) *
                C4721 +
            (C4715 * C2371 - C4719 * C2366 + C47367 * C7323 - C4720 * C7320) *
                C4717 +
            (C4715 * C2367 - C4719 * C2363 + C47367 * C7321 - C4720 * C7318) *
                C4722 +
            (C4715 * C2372 - C4719 * C2368 + C47367 * C7324 - C4720 * C7322) *
                C47336) *
               C47272 * C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47152 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47159 +
            ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                 C4721 +
             (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                 C4717 +
             (C5088 - C5089 + C5090 - C5091) * C4722 +
             (C5092 - C5093 + C5094 - C5095) * C47336) *
                C47272 * C3742) *
               C2472 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47152 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47159 +
            ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                 C4721 +
             (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                 C4717 +
             (C7042 - C7043 + C7044 - C7045) * C4722 +
             (C7046 - C7047 + C7048 - C7049) * C47336) *
                C47272 * C3742) *
               C47114) *
              C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47152 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47159 +
            ((C5089 - C5088 + C5091 - C5090) * C4721 +
             (C5093 - C5092 + C5095 - C5094) * C4717 +
             (C5104 - C5105 + C5106 - C5107) * C4722 +
             (C5108 - C5109 + C5110 - C5111) * C47336) *
                C47272 * C3742) *
               C2472 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47152 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47159 +
            ((C7043 - C7042 + C7045 - C7044) * C4721 +
             (C7047 - C7046 + C7049 - C7048) * C4717 +
             (C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                 C4722 +
             (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                 C47336) *
                C47272 * C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C3234 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C3234 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C3234 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C3234 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C4721 +
             (C4737 - C4736 + C4739 - C4738) * C4717 +
             (C4740 - C4741 + C4742 - C4743) * C4722 +
             (C4744 - C4745 + C4746 - C4747) * C47336) *
                C47272 * C3234 +
            ((C5097 - C5096 + C5099 - C5098) * C4721 +
             (C5101 - C5100 + C5103 - C5102) * C4717 +
             (C5380 - C5381 + C5382 - C5383) * C4722 +
             (C5384 - C5385 + C5386 - C5387) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C4919 - C4918 + C4921 - C4920) * C4721 +
             (C4923 - C4922 + C4925 - C4924) * C4717 +
             (C5242 - C5243 + C5244 - C5245) * C4722 +
             (C5246 - C5247 + C5248 - C5249) * C47336) *
                C47272 * C3234 +
            ((C5591 - C5590 + C5593 - C5592) * C4721 +
             (C5595 - C5594 + C5597 - C5596) * C4717 +
             (C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C4722 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C3234 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C47395 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C3234 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47156) *
              C47391 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C3234 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C6320 - C6321 + C6322 - C6323) * C4722 +
            (C6324 - C6325 + C6326 - C6327) * C47336) *
               C47272 * C47156) *
              C47381 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C3234 +
           ((C4715 * C1669 - C4719 * C1666 + C47367 * C6459 - C4720 * C6457) *
                C4721 +
            (C4715 * C1675 - C4719 * C1670 + C47367 * C6463 - C4720 * C6460) *
                C4717 +
            (C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                C4722 +
            (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C1392 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C1393 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C1394 +
           ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C47069 * C47359) *
              C47303 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C1392 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C1393 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C1394 +
           ((C6119 - C6118 + C6121 - C6120) * C4721 +
            (C6123 - C6122 + C6125 - C6124) * C4717 +
            (C4715 * C1134 - C4719 * C1126 + C47367 * C1140 - C4720 * C1129) *
                C4722 +
            (C4715 * C1144 - C4719 * C1135 + C47367 * C1147 - C4720 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47317 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47114) *
              C636 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47317 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47114) *
              C637 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C47317 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C47114) *
              C638 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C47069 * C47317 +
           ((C5243 - C5242 + C5245 - C5244) * C4721 +
            (C5247 - C5246 + C5249 - C5248) * C4717 +
            (C4715 * C313 - C4719 * C295 + C47367 * C315 - C4720 * C296) *
                C4722 +
            (C4715 * C325 - C4719 * C314 + C47367 * C326 - C4720 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C1788 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C1789 +
            ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                 C4721 +
             (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                 C4717 +
             (C5088 - C5089 + C5090 - C5091) * C4722 +
             (C5092 - C5093 + C5094 - C5095) * C47336) *
                C47272 * C47352) *
               C47317 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C1788 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C1789 +
            ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                 C4721 +
             (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                 C4717 +
             (C7042 - C7043 + C7044 - C7045) * C4722 +
             (C7046 - C7047 + C7048 - C7049) * C47336) *
                C47272 * C47352) *
               C47114) *
              C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C1788 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C1789 +
            ((C5089 - C5088 + C5091 - C5090) * C4721 +
             (C5093 - C5092 + C5095 - C5094) * C4717 +
             (C5104 - C5105 + C5106 - C5107) * C4722 +
             (C5108 - C5109 + C5110 - C5111) * C47336) *
                C47272 * C47352) *
               C47317 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C1788 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C1789 +
            ((C7043 - C7042 + C7045 - C7044) * C4721 +
             (C7047 - C7046 + C7049 - C7048) * C4717 +
             (C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                 C4722 +
             (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                 C47336) *
                C47272 * C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47318 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C1392 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47318 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47156) *
              C1393 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47318 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C6320 - C6321 + C6322 - C6323) * C4722 +
            (C6324 - C6325 + C6326 - C6327) * C47336) *
               C47272 * C47156) *
              C1394 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C47318 +
           ((C4715 * C1669 - C4719 * C1666 + C47367 * C6459 - C4720 * C6457) *
                C4721 +
            (C4715 * C1675 - C4719 * C1670 + C47367 * C6463 - C4720 * C6460) *
                C4717 +
            (C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                C4722 +
            (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47318 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47318 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47114) *
              C284 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47318 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47318 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47114) *
              C285 +
          ((((C4733 - C4732 + C4735 - C4734) * C4721 +
             (C4737 - C4736 + C4739 - C4738) * C4717 +
             (C4740 - C4741 + C4742 - C4743) * C4722 +
             (C4744 - C4745 + C4746 - C4747) * C47336) *
                C47272 * C47318 +
            ((C5097 - C5096 + C5099 - C5098) * C4721 +
             (C5101 - C5100 + C5103 - C5102) * C4717 +
             (C5380 - C5381 + C5382 - C5383) * C4722 +
             (C5384 - C5385 + C5386 - C5387) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4919 - C4918 + C4921 - C4920) * C4721 +
             (C4923 - C4922 + C4925 - C4924) * C4717 +
             (C5242 - C5243 + C5244 - C5245) * C4722 +
             (C5246 - C5247 + C5248 - C5249) * C47336) *
                C47272 * C47318 +
            ((C5591 - C5590 + C5593 - C5592) * C4721 +
             (C5595 - C5594 + C5597 - C5596) * C4717 +
             (C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C4722 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C2248 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C2249 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C2250 +
           ((C4719 * C1968 - C4715 * C1974 + C4720 * C2362 - C47367 * C2365) *
                C4721 +
            (C4719 * C1975 - C4715 * C1986 + C4720 * C2366 - C47367 * C2371) *
                C4717 +
            (C7180 - C7181 + C7182 - C7183) * C4722 +
            (C7184 - C7185 + C7186 - C7187) * C47336) *
               C47272 * C47365) *
              C47317 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C2248 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C2249 +
           ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                C4721 +
            (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                C4717 +
            (C7042 - C7043 + C7044 - C7045) * C4722 +
            (C7046 - C7047 + C7048 - C7049) * C47336) *
               C47272 * C2250 +
           ((C4715 * C2365 - C4719 * C2362 + C47367 * C7319 - C4720 * C7317) *
                C4721 +
            (C4715 * C2371 - C4719 * C2366 + C47367 * C7323 - C4720 * C7320) *
                C4717 +
            (C4715 * C2367 - C4719 * C2363 + C47367 * C7321 - C4720 * C7318) *
                C4722 +
            (C4715 * C2372 - C4719 * C2368 + C47367 * C7324 - C4720 * C7322) *
                C47336) *
               C47272 * C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                   C4721 +
               (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                   C4717 +
               (C4724 - C4725 + C4726 - C4727) * C4722 +
               (C4728 - C4729 + C4730 - C4731) * C47336) *
                  C47272 * C47069 * C47051 * C108 +
              ((C4725 - C4724 + C4727 - C4726) * C4721 +
               (C4729 - C4728 + C4731 - C4730) * C4717 +
               (C4732 - C4733 + C4734 - C4735) * C4722 +
               (C4736 - C4737 + C4738 - C4739) * C47336) *
                  C47272 * C47069 * C47051 * C109 +
              ((C4733 - C4732 + C4735 - C4734) * C4721 +
               (C4737 - C4736 + C4739 - C4738) * C4717 +
               (C4740 - C4741 + C4742 - C4743) * C4722 +
               (C4744 - C4745 + C4746 - C4747) * C47336) *
                  C47272 * C47069 * C47051 * C110 +
              ((C4741 - C4740 + C4743 - C4742) * C4721 +
               (C4745 - C4744 + C4747 - C4746) * C4717 +
               (C4748 - C4749 + C4750 - C4751) * C4722 +
               (C4752 - C4753 + C4754 - C4755) * C47336) *
                  C47272 * C47069 * C47051 * C111 +
              ((C4749 - C4748 + C4751 - C4750) * C4721 +
               (C4753 - C4752 + C4755 - C4754) * C4717 +
               (C4715 * C134 - C4719 * C122 + C47367 * C641 - C4720 * C640) *
                   C4722 +
               (C4715 * C143 - C4719 * C135 + C47367 * C643 - C4720 * C642) *
                   C47336) *
                  C47272 * C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                    C4721 +
                (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                    C4717 +
                (C4724 - C4725 + C4726 - C4727) * C4722 +
                (C4728 - C4729 + C4730 - C4731) * C47336) *
                   C47272 * C47069 * C47388 +
               ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                    C4721 +
                (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                    C4717 +
                (C4902 - C4903 + C4904 - C4905) * C4722 +
                (C4906 - C4907 + C4908 - C4909) * C47336) *
                   C47272 * C47069 * C47376 +
               ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                    C4721 +
                (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                    C4717 +
                (C4910 - C4911 + C4912 - C4913) * C4722 +
                (C4914 - C4915 + C4916 - C4917) * C47336) *
                   C47272 * C47069 * C47349) *
                  C284 +
              (((C4725 - C4724 + C4727 - C4726) * C4721 +
                (C4729 - C4728 + C4731 - C4730) * C4717 +
                (C4732 - C4733 + C4734 - C4735) * C4722 +
                (C4736 - C4737 + C4738 - C4739) * C47336) *
                   C47272 * C47069 * C47388 +
               ((C4903 - C4902 + C4905 - C4904) * C4721 +
                (C4907 - C4906 + C4909 - C4908) * C4717 +
                (C4918 - C4919 + C4920 - C4921) * C4722 +
                (C4922 - C4923 + C4924 - C4925) * C47336) *
                   C47272 * C47069 * C47376 +
               ((C4911 - C4910 + C4913 - C4912) * C4721 +
                (C4915 - C4914 + C4917 - C4916) * C4717 +
                (C4926 - C4927 + C4928 - C4929) * C4722 +
                (C4930 - C4931 + C4932 - C4933) * C47336) *
                   C47272 * C47069 * C47349) *
                  C285 +
              (((C4733 - C4732 + C4735 - C4734) * C4721 +
                (C4737 - C4736 + C4739 - C4738) * C4717 +
                (C4740 - C4741 + C4742 - C4743) * C4722 +
                (C4744 - C4745 + C4746 - C4747) * C47336) *
                   C47272 * C47069 * C47388 +
               ((C4919 - C4918 + C4921 - C4920) * C4721 +
                (C4923 - C4922 + C4925 - C4924) * C4717 +
                (C4719 * C293 - C4715 * C309 + C4720 * C294 - C47367 * C311) *
                    C4722 +
                (C4719 * C310 - C4715 * C323 + C4720 * C312 - C47367 * C324) *
                    C47336) *
                   C47272 * C47069 * C47376 +
               ((C4927 - C4926 + C4929 - C4928) * C4721 +
                (C4931 - C4930 + C4933 - C4932) * C4717 +
                (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                    C4722 +
                (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                    C47336) *
                   C47272 * C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47389 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47378 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C47051 * C284 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47389 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47378 +
           ((C5089 - C5088 + C5091 - C5090) * C4721 +
            (C5093 - C5092 + C5095 - C5094) * C4717 +
            (C5104 - C5105 + C5106 - C5107) * C4722 +
            (C5108 - C5109 + C5110 - C5111) * C47336) *
               C47272 * C47352) *
              C47051 * C285 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47389 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C4719 * C474 - C4715 * C490 + C4720 * C909 - C47367 * C917) *
                C4722 +
            (C4719 * C491 - C4715 * C504 + C4720 * C918 - C47367 * C924) *
                C47336) *
               C47272 * C47378 +
           ((C5105 - C5104 + C5107 - C5106) * C4721 +
            (C5109 - C5108 + C5111 - C5110) * C4717 +
            (C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                C4722 +
            (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C47069 * C1118 +
          ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
               C4721 +
           (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
               C4717 +
           (C4902 - C4903 + C4904 - C4905) * C4722 +
           (C4906 - C4907 + C4908 - C4909) * C47336) *
              C47272 * C47069 * C1119 +
          ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
               C4721 +
           (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
               C4717 +
           (C4910 - C4911 + C4912 - C4913) * C4722 +
           (C4914 - C4915 + C4916 - C4917) * C47336) *
              C47272 * C47069 * C1120 +
          ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
               C4721 +
           (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
               C4717 +
           (C4719 * C1125 - C4715 * C1132 + C4720 * C1128 - C47367 * C1138) *
               C4722 +
           (C4719 * C1133 - C4715 * C1143 + C4720 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
               C4721 +
           (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
               C4717 +
           (C4715 * C1138 - C4719 * C1128 + C47367 * C5829 - C4720 * C5826) *
               C4722 +
           (C4715 * C1146 - C4719 * C1139 + C47367 * C5832 - C4720 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47389 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47378 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C1050 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47389 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47378 +
           ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                C4721 +
            (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                C4717 +
            (C4719 * C1259 - C4715 * C1269 + C4720 * C1265 - C47367 * C1281) *
                C4722 +
            (C4719 * C1270 - C4715 * C1286 + C4720 * C1282 - C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C1051 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47389 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C4719 * C1262 - C4715 * C1275 + C4720 * C1667 - C47367 * C1671) *
                C4722 +
            (C4719 * C1276 - C4715 * C1289 + C4720 * C1672 - C47367 * C1676) *
                C47336) *
               C47272 * C47378 +
           ((C4715 * C1279 - C4719 * C1264 + C47367 * C5981 - C4720 * C5979) *
                C4721 +
            (C4715 * C1291 - C4719 * C1280 + C47367 * C5985 - C4720 * C5982) *
                C4717 +
            (C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                C4722 +
            (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C1788 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C1789 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C47051 * C47385 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C1788 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C1789 +
           ((C5089 - C5088 + C5091 - C5090) * C4721 +
            (C5093 - C5092 + C5095 - C5094) * C4717 +
            (C5104 - C5105 + C5106 - C5107) * C4722 +
            (C5108 - C5109 + C5110 - C5111) * C47336) *
               C47272 * C47352) *
              C47051 * C47372 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C1788 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C5380 - C5381 + C5382 - C5383) * C4722 +
            (C5384 - C5385 + C5386 - C5387) * C47336) *
               C47272 * C1789 +
           ((C5105 - C5104 + C5107 - C5106) * C4721 +
            (C5109 - C5108 + C5111 - C5110) * C4717 +
            (C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                C4722 +
            (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C1788 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C1789 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C47388 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C1788 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C1789 +
           ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                C4721 +
            (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                C4717 +
            (C4719 * C1259 - C4715 * C1269 + C4720 * C1265 - C47367 * C1281) *
                C4722 +
            (C4719 * C1270 - C4715 * C1286 + C4720 * C1282 - C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C47376 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C1788 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C6320 - C6321 + C6322 - C6323) * C4722 +
            (C6324 - C6325 + C6326 - C6327) * C47336) *
               C47272 * C1789 +
           ((C4715 * C1279 - C4719 * C1264 + C47367 * C5981 - C4720 * C5979) *
                C4721 +
            (C4715 * C1291 - C4719 * C1280 + C47367 * C5985 - C4720 * C5982) *
                C4717 +
            (C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                C4722 +
            (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C1963 +
          ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
               C4721 +
           (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
               C4717 +
           (C5080 - C5081 + C5082 - C5083) * C4722 +
           (C5084 - C5085 + C5086 - C5087) * C47336) *
              C47272 * C1964 +
          ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
               C4721 +
           (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
               C4717 +
           (C5088 - C5089 + C5090 - C5091) * C4722 +
           (C5092 - C5093 + C5094 - C5095) * C47336) *
              C47272 * C1965 +
          ((C4719 * C1968 - C4715 * C1974 + C4720 * C2362 - C47367 * C2365) *
               C4721 +
           (C4719 * C1975 - C4715 * C1986 + C4720 * C2366 - C47367 * C2371) *
               C4717 +
           (C4719 * C1969 - C4715 * C1976 + C4720 * C2363 - C47367 * C2367) *
               C4722 +
           (C4719 * C1977 - C4715 * C1987 + C4720 * C2368 - C47367 * C2372) *
               C47336) *
              C47272 * C1966 +
          ((C4715 * C1980 - C4719 * C1971 + C47367 * C6841 - C4720 * C6839) *
               C4721 +
           (C4715 * C1989 - C4719 * C1981 + C47367 * C6845 - C4720 * C6842) *
               C4717 +
           (C4715 * C1982 - C4719 * C1972 + C47367 * C6843 - C4720 * C6840) *
               C4722 +
           (C4715 * C1990 - C4719 * C1983 + C47367 * C6846 - C4720 * C6844) *
               C47336) *
              C47272 * C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47318 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47318 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C4721 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C4717 +
             (C4910 - C4911 + C4912 - C4913) * C4722 +
             (C4914 - C4915 + C4916 - C4917) * C47336) *
                C47272 * C47318 +
            ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                 C4721 +
             (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                 C4717 +
             (C6320 - C6321 + C6322 - C6323) * C4722 +
             (C6324 - C6325 + C6326 - C6327) * C47336) *
                C47272 * C47156) *
               C47349) *
              C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47318 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47318 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C4911 - C4910 + C4913 - C4912) * C4721 +
             (C4915 - C4914 + C4917 - C4916) * C4717 +
             (C4926 - C4927 + C4928 - C4929) * C4722 +
             (C4930 - C4931 + C4932 - C4933) * C47336) *
                C47272 * C47318 +
            ((C6321 - C6320 + C6323 - C6322) * C4721 +
             (C6325 - C6324 + C6327 - C6326) * C4717 +
             (C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C4722 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47318 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C47051 * C636 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47318 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47156) *
              C47051 * C637 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47318 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C5380 - C5381 + C5382 - C5383) * C4722 +
            (C5384 - C5385 + C5386 - C5387) * C47336) *
               C47272 * C47156) *
              C47051 * C638 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C47318 +
           ((C5381 - C5380 + C5383 - C5382) * C4721 +
            (C5385 - C5384 + C5387 - C5386) * C4717 +
            (C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                C4722 +
            (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C2248 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C2249 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C2250 +
           ((C4719 * C1968 - C4715 * C1974 + C4720 * C2362 - C47367 * C2365) *
                C4721 +
            (C4719 * C1975 - C4715 * C1986 + C4720 * C2366 - C47367 * C2371) *
                C4717 +
            (C7180 - C7181 + C7182 - C7183) * C4722 +
            (C7184 - C7185 + C7186 - C7187) * C47336) *
               C47272 * C47365) *
              C47051 * C47303 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C2248 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C2249 +
           ((C5089 - C5088 + C5091 - C5090) * C4721 +
            (C5093 - C5092 + C5095 - C5094) * C4717 +
            (C5104 - C5105 + C5106 - C5107) * C4722 +
            (C5108 - C5109 + C5110 - C5111) * C47336) *
               C47272 * C2250 +
           ((C7181 - C7180 + C7183 - C7182) * C4721 +
            (C7185 - C7184 + C7187 - C7186) * C4717 +
            (C4715 * C1978 - C4719 * C1970 + C47367 * C2369 - C4720 * C2364) *
                C4722 +
            (C4715 * C1988 - C4719 * C1979 + C47367 * C2373 - C4720 * C2370) *
                C47336) *
               C47272 * C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47376 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47376 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47349) *
              C285 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C4719 * C293 - C4715 * C309 + C4720 * C294 - C47367 * C311) *
                C4722 +
            (C4719 * C310 - C4715 * C323 + C4720 * C312 - C47367 * C324) *
                C47336) *
               C47272 * C47069 * C47376 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C47069 * C47051 * C108 +
          ((C4725 - C4724 + C4727 - C4726) * C4721 +
           (C4729 - C4728 + C4731 - C4730) * C4717 +
           (C4732 - C4733 + C4734 - C4735) * C4722 +
           (C4736 - C4737 + C4738 - C4739) * C47336) *
              C47272 * C47069 * C47051 * C109 +
          ((C4733 - C4732 + C4735 - C4734) * C4721 +
           (C4737 - C4736 + C4739 - C4738) * C4717 +
           (C4740 - C4741 + C4742 - C4743) * C4722 +
           (C4744 - C4745 + C4746 - C4747) * C47336) *
              C47272 * C47069 * C47051 * C110 +
          ((C4741 - C4740 + C4743 - C4742) * C4721 +
           (C4745 - C4744 + C4747 - C4746) * C4717 +
           (C4748 - C4749 + C4750 - C4751) * C4722 +
           (C4752 - C4753 + C4754 - C4755) * C47336) *
              C47272 * C47069 * C47051 * C111 +
          ((C4749 - C4748 + C4751 - C4750) * C4721 +
           (C4753 - C4752 + C4755 - C4754) * C4717 +
           (C4715 * C134 - C4719 * C122 + C47367 * C641 - C4720 * C640) *
               C4722 +
           (C4715 * C143 - C4719 * C135 + C47367 * C643 - C4720 * C642) *
               C47336) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C47069 * C1118 +
          ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
               C4721 +
           (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
               C4717 +
           (C4902 - C4903 + C4904 - C4905) * C4722 +
           (C4906 - C4907 + C4908 - C4909) * C47336) *
              C47272 * C47069 * C1119 +
          ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
               C4721 +
           (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
               C4717 +
           (C4910 - C4911 + C4912 - C4913) * C4722 +
           (C4914 - C4915 + C4916 - C4917) * C47336) *
              C47272 * C47069 * C1120 +
          ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
               C4721 +
           (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
               C4717 +
           (C4719 * C1125 - C4715 * C1132 + C4720 * C1128 - C47367 * C1138) *
               C4722 +
           (C4719 * C1133 - C4715 * C1143 + C4720 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
               C4721 +
           (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
               C4717 +
           (C4715 * C1138 - C4719 * C1128 + C47367 * C5829 - C4720 * C5826) *
               C4722 +
           (C4715 * C1146 - C4719 * C1139 + C47367 * C5832 - C4720 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C1788 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C1789 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C47051 * C47385 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C1788 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C1789 +
           ((C5089 - C5088 + C5091 - C5090) * C4721 +
            (C5093 - C5092 + C5095 - C5094) * C4717 +
            (C5104 - C5105 + C5106 - C5107) * C4722 +
            (C5108 - C5109 + C5110 - C5111) * C47336) *
               C47272 * C47352) *
              C47051 * C47372 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C1788 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C5380 - C5381 + C5382 - C5383) * C4722 +
            (C5384 - C5385 + C5386 - C5387) * C47336) *
               C47272 * C1789 +
           ((C5105 - C5104 + C5107 - C5106) * C4721 +
            (C5109 - C5108 + C5111 - C5110) * C4717 +
            (C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                C4722 +
            (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C1788 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C1789 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C47388 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C1788 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C1789 +
           ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                C4721 +
            (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                C4717 +
            (C4719 * C1259 - C4715 * C1269 + C4720 * C1265 - C47367 * C1281) *
                C4722 +
            (C4719 * C1270 - C4715 * C1286 + C4720 * C1282 - C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C47376 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C1788 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C6320 - C6321 + C6322 - C6323) * C4722 +
            (C6324 - C6325 + C6326 - C6327) * C47336) *
               C47272 * C1789 +
           ((C4715 * C1279 - C4719 * C1264 + C47367 * C5981 - C4720 * C5979) *
                C4721 +
            (C4715 * C1291 - C4719 * C1280 + C47367 * C5985 - C4720 * C5982) *
                C4717 +
            (C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                C4722 +
            (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C3234 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C3234 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47028 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C3234 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C3234 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47037 +
          ((((C4733 - C4732 + C4735 - C4734) * C4721 +
             (C4737 - C4736 + C4739 - C4738) * C4717 +
             (C4740 - C4741 + C4742 - C4743) * C4722 +
             (C4744 - C4745 + C4746 - C4747) * C47336) *
                C47272 * C3234 +
            ((C5097 - C5096 + C5099 - C5098) * C4721 +
             (C5101 - C5100 + C5103 - C5102) * C4717 +
             (C5380 - C5381 + C5382 - C5383) * C4722 +
             (C5384 - C5385 + C5386 - C5387) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4919 - C4918 + C4921 - C4920) * C4721 +
             (C4923 - C4922 + C4925 - C4924) * C4717 +
             (C5242 - C5243 + C5244 - C5245) * C4722 +
             (C5246 - C5247 + C5248 - C5249) * C47336) *
                C47272 * C3234 +
            ((C5591 - C5590 + C5593 - C5592) * C4721 +
             (C5595 - C5594 + C5597 - C5596) * C4717 +
             (C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C4722 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47152 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47159 +
            ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                 C4721 +
             (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                 C4717 +
             (C5088 - C5089 + C5090 - C5091) * C4722 +
             (C5092 - C5093 + C5094 - C5095) * C47336) *
                C47272 * C3742) *
               C47317 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47152 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47159 +
            ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                 C4721 +
             (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                 C4717 +
             (C7042 - C7043 + C7044 - C7045) * C4722 +
             (C7046 - C7047 + C7048 - C7049) * C47336) *
                C47272 * C3742) *
               C47114) *
              C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47152 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47159 +
            ((C5089 - C5088 + C5091 - C5090) * C4721 +
             (C5093 - C5092 + C5095 - C5094) * C4717 +
             (C5104 - C5105 + C5106 - C5107) * C4722 +
             (C5108 - C5109 + C5110 - C5111) * C47336) *
                C47272 * C3742) *
               C47317 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47152 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47159 +
            ((C7043 - C7042 + C7045 - C7044) * C4721 +
             (C7047 - C7046 + C7049 - C7048) * C4717 +
             (C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                 C4722 +
             (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                 C47336) *
                C47272 * C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C3234 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C3234 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C4721 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C4717 +
             (C4910 - C4911 + C4912 - C4913) * C4722 +
             (C4914 - C4915 + C4916 - C4917) * C47336) *
                C47272 * C3234 +
            ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                 C4721 +
             (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                 C4717 +
             (C6320 - C6321 + C6322 - C6323) * C4722 +
             (C6324 - C6325 + C6326 - C6327) * C47336) *
                C47272 * C47156) *
               C47349) *
              C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C3234 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C3234 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C4911 - C4910 + C4913 - C4912) * C4721 +
             (C4915 - C4914 + C4917 - C4916) * C4717 +
             (C4926 - C4927 + C4928 - C4929) * C4722 +
             (C4930 - C4931 + C4932 - C4933) * C47336) *
                C47272 * C3234 +
            ((C6321 - C6320 + C6323 - C6322) * C4721 +
             (C6325 - C6324 + C6327 - C6326) * C4717 +
             (C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C4722 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C3234 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C47051 * C47394 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C3234 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47156) *
              C47051 * C47387 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C3234 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C5380 - C5381 + C5382 - C5383) * C4722 +
            (C5384 - C5385 + C5386 - C5387) * C47336) *
               C47272 * C47156) *
              C47051 * C47374 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C3234 +
           ((C5381 - C5380 + C5383 - C5382) * C4721 +
            (C5385 - C5384 + C5387 - C5386) * C4717 +
            (C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                C4722 +
            (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47396 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47393 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47384 +
           ((C4719 * C1968 - C4715 * C1974 + C4720 * C2362 - C47367 * C2365) *
                C4721 +
            (C4719 * C1975 - C4715 * C1986 + C4720 * C2366 - C47367 * C2371) *
                C4717 +
            (C7180 - C7181 + C7182 - C7183) * C4722 +
            (C7184 - C7185 + C7186 - C7187) * C47336) *
               C47272 * C47365) *
              C47051 * C2580 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47396 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47393 +
           ((C5089 - C5088 + C5091 - C5090) * C4721 +
            (C5093 - C5092 + C5095 - C5094) * C4717 +
            (C5104 - C5105 + C5106 - C5107) * C4722 +
            (C5108 - C5109 + C5110 - C5111) * C47336) *
               C47272 * C47384 +
           ((C7181 - C7180 + C7183 - C7182) * C4721 +
            (C7185 - C7184 + C7187 - C7186) * C4717 +
            (C4715 * C1978 - C4719 * C1970 + C47367 * C2369 - C4720 * C2364) *
                C4722 +
            (C4715 * C1988 - C4719 * C1979 + C47367 * C2373 - C4720 * C2370) *
                C47336) *
               C47272 * C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47152 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47159 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C3742) *
              C47051 * C47028 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47152 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47159 +
           ((C5089 - C5088 + C5091 - C5090) * C4721 +
            (C5093 - C5092 + C5095 - C5094) * C4717 +
            (C5104 - C5105 + C5106 - C5107) * C4722 +
            (C5108 - C5109 + C5110 - C5111) * C47336) *
               C47272 * C3742) *
              C47051 * C47037 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47152 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C5380 - C5381 + C5382 - C5383) * C4722 +
            (C5384 - C5385 + C5386 - C5387) * C47336) *
               C47272 * C47159 +
           ((C5105 - C5104 + C5107 - C5106) * C4721 +
            (C5109 - C5108 + C5111 - C5110) * C4717 +
            (C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                C4722 +
            (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                C47336) *
               C47272 * C3742) *
              C47051 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C3234 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C47051 * C47394 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C3234 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47156) *
              C47051 * C47387 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C3234 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C5380 - C5381 + C5382 - C5383) * C4722 +
            (C5384 - C5385 + C5386 - C5387) * C47336) *
               C47272 * C47156) *
              C47051 * C47374 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C3234 +
           ((C5381 - C5380 + C5383 - C5382) * C4721 +
            (C5385 - C5384 + C5387 - C5386) * C4717 +
            (C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                C4722 +
            (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C3234 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C3234 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C4721 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C4717 +
             (C4910 - C4911 + C4912 - C4913) * C4722 +
             (C4914 - C4915 + C4916 - C4917) * C47336) *
                C47272 * C3234 +
            ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                 C4721 +
             (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                 C4717 +
             (C6320 - C6321 + C6322 - C6323) * C4722 +
             (C6324 - C6325 + C6326 - C6327) * C47336) *
                C47272 * C47156) *
               C47349) *
              C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C3234 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C3234 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C4911 - C4910 + C4913 - C4912) * C4721 +
             (C4915 - C4914 + C4917 - C4916) * C4717 +
             (C4926 - C4927 + C4928 - C4929) * C4722 +
             (C4930 - C4931 + C4932 - C4933) * C47336) *
                C47272 * C3234 +
            ((C6321 - C6320 + C6323 - C6322) * C4721 +
             (C6325 - C6324 + C6327 - C6326) * C4717 +
             (C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C4722 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47317 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47114) *
              C636 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47317 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47114) *
              C637 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C47317 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C47114) *
              C638 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C47069 * C47317 +
           ((C5243 - C5242 + C5245 - C5244) * C4721 +
            (C5247 - C5246 + C5249 - C5248) * C4717 +
            (C4715 * C313 - C4719 * C295 + C47367 * C315 - C4720 * C296) *
                C4722 +
            (C4715 * C325 - C4719 * C314 + C47367 * C326 - C4720 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C1392 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C1393 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C1394 +
           ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C47069 * C47359) *
              C47303 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C1392 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C1393 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C1394 +
           ((C6119 - C6118 + C6121 - C6120) * C4721 +
            (C6123 - C6122 + C6125 - C6124) * C4717 +
            (C4715 * C1134 - C4719 * C1126 + C47367 * C1140 - C4720 * C1129) *
                C4722 +
            (C4715 * C1144 - C4719 * C1135 + C47367 * C1147 - C4720 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47318 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47318 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C47114) *
              C284 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47318 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47318 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C47114) *
              C285 +
          ((((C4733 - C4732 + C4735 - C4734) * C4721 +
             (C4737 - C4736 + C4739 - C4738) * C4717 +
             (C4740 - C4741 + C4742 - C4743) * C4722 +
             (C4744 - C4745 + C4746 - C4747) * C47336) *
                C47272 * C47318 +
            ((C5097 - C5096 + C5099 - C5098) * C4721 +
             (C5101 - C5100 + C5103 - C5102) * C4717 +
             (C5380 - C5381 + C5382 - C5383) * C4722 +
             (C5384 - C5385 + C5386 - C5387) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C4919 - C4918 + C4921 - C4920) * C4721 +
             (C4923 - C4922 + C4925 - C4924) * C4717 +
             (C5242 - C5243 + C5244 - C5245) * C4722 +
             (C5246 - C5247 + C5248 - C5249) * C47336) *
                C47272 * C47318 +
            ((C5591 - C5590 + C5593 - C5592) * C4721 +
             (C5595 - C5594 + C5597 - C5596) * C4717 +
             (C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C4722 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47318 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C1392 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47318 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47156) *
              C1393 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47318 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C6320 - C6321 + C6322 - C6323) * C4722 +
            (C6324 - C6325 + C6326 - C6327) * C47336) *
               C47272 * C47156) *
              C1394 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C4721 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C4717 +
            (C6118 - C6119 + C6120 - C6121) * C4722 +
            (C6122 - C6123 + C6124 - C6125) * C47336) *
               C47272 * C47318 +
           ((C4715 * C1669 - C4719 * C1666 + C47367 * C6459 - C4720 * C6457) *
                C4721 +
            (C4715 * C1675 - C4719 * C1670 + C47367 * C6463 - C4720 * C6460) *
                C4717 +
            (C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                C4722 +
            (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47376 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47376 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47349) *
              C285 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C4719 * C293 - C4715 * C309 + C4720 * C294 - C47367 * C311) *
                C4722 +
            (C4719 * C310 - C4715 * C323 + C4720 * C312 - C47367 * C324) *
                C47336) *
               C47272 * C47069 * C47376 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C47069 * C47051 * C108 +
          ((C4725 - C4724 + C4727 - C4726) * C4721 +
           (C4729 - C4728 + C4731 - C4730) * C4717 +
           (C4732 - C4733 + C4734 - C4735) * C4722 +
           (C4736 - C4737 + C4738 - C4739) * C47336) *
              C47272 * C47069 * C47051 * C109 +
          ((C4733 - C4732 + C4735 - C4734) * C4721 +
           (C4737 - C4736 + C4739 - C4738) * C4717 +
           (C4740 - C4741 + C4742 - C4743) * C4722 +
           (C4744 - C4745 + C4746 - C4747) * C47336) *
              C47272 * C47069 * C47051 * C110 +
          ((C4741 - C4740 + C4743 - C4742) * C4721 +
           (C4745 - C4744 + C4747 - C4746) * C4717 +
           (C4748 - C4749 + C4750 - C4751) * C4722 +
           (C4752 - C4753 + C4754 - C4755) * C47336) *
              C47272 * C47069 * C47051 * C111 +
          ((C4749 - C4748 + C4751 - C4750) * C4721 +
           (C4753 - C4752 + C4755 - C4754) * C4717 +
           (C4715 * C134 - C4719 * C122 + C47367 * C641 - C4720 * C640) *
               C4722 +
           (C4715 * C143 - C4719 * C135 + C47367 * C643 - C4720 * C642) *
               C47336) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47389 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47378 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C47051 * C284 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47389 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47378 +
           ((C5089 - C5088 + C5091 - C5090) * C4721 +
            (C5093 - C5092 + C5095 - C5094) * C4717 +
            (C5104 - C5105 + C5106 - C5107) * C4722 +
            (C5108 - C5109 + C5110 - C5111) * C47336) *
               C47272 * C47352) *
              C47051 * C285 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47389 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C4719 * C474 - C4715 * C490 + C4720 * C909 - C47367 * C917) *
                C4722 +
            (C4719 * C491 - C4715 * C504 + C4720 * C918 - C47367 * C924) *
                C47336) *
               C47272 * C47378 +
           ((C5105 - C5104 + C5107 - C5106) * C4721 +
            (C5109 - C5108 + C5111 - C5110) * C4717 +
            (C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                C4722 +
            (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C47069 * C1118 +
          ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
               C4721 +
           (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
               C4717 +
           (C4902 - C4903 + C4904 - C4905) * C4722 +
           (C4906 - C4907 + C4908 - C4909) * C47336) *
              C47272 * C47069 * C1119 +
          ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
               C4721 +
           (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
               C4717 +
           (C4910 - C4911 + C4912 - C4913) * C4722 +
           (C4914 - C4915 + C4916 - C4917) * C47336) *
              C47272 * C47069 * C1120 +
          ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
               C4721 +
           (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
               C4717 +
           (C4719 * C1125 - C4715 * C1132 + C4720 * C1128 - C47367 * C1138) *
               C4722 +
           (C4719 * C1133 - C4715 * C1143 + C4720 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
               C4721 +
           (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
               C4717 +
           (C4715 * C1138 - C4719 * C1128 + C47367 * C5829 - C4720 * C5826) *
               C4722 +
           (C4715 * C1146 - C4719 * C1139 + C47367 * C5832 - C4720 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47389 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47378 +
           ((C4715 * C484 - C4719 * C471 + C47367 * C1267 - C4720 * C1258) *
                C4721 +
            (C4715 * C501 - C4719 * C485 + C47367 * C1285 - C4720 * C1268) *
                C4717 +
            (C5088 - C5089 + C5090 - C5091) * C4722 +
            (C5092 - C5093 + C5094 - C5095) * C47336) *
               C47272 * C47352) *
              C1050 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47389 +
           ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                C4721 +
            (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                C4717 +
            (C5582 - C5583 + C5584 - C5585) * C4722 +
            (C5586 - C5587 + C5588 - C5589) * C47336) *
               C47272 * C47378 +
           ((C4719 * C1258 - C4715 * C1267 + C4720 * C1264 - C47367 * C1279) *
                C4721 +
            (C4719 * C1268 - C4715 * C1285 + C4720 * C1280 - C47367 * C1291) *
                C4717 +
            (C4719 * C1259 - C4715 * C1269 + C4720 * C1265 - C47367 * C1281) *
                C4722 +
            (C4719 * C1270 - C4715 * C1286 + C4720 * C1282 - C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C1051 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47389 +
           ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                C4721 +
            (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                C4717 +
            (C4719 * C1262 - C4715 * C1275 + C4720 * C1667 - C47367 * C1671) *
                C4722 +
            (C4719 * C1276 - C4715 * C1289 + C4720 * C1672 - C47367 * C1676) *
                C47336) *
               C47272 * C47378 +
           ((C4715 * C1279 - C4719 * C1264 + C47367 * C5981 - C4720 * C5979) *
                C4721 +
            (C4715 * C1291 - C4719 * C1280 + C47367 * C5985 - C4720 * C5982) *
                C4717 +
            (C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                C4722 +
            (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47318 +
           ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                C4721 +
            (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                C4717 +
            (C5080 - C5081 + C5082 - C5083) * C4722 +
            (C5084 - C5085 + C5086 - C5087) * C47336) *
               C47272 * C47156) *
              C47051 * C636 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47318 +
           ((C5081 - C5080 + C5083 - C5082) * C4721 +
            (C5085 - C5084 + C5087 - C5086) * C4717 +
            (C5096 - C5097 + C5098 - C5099) * C4722 +
            (C5100 - C5101 + C5102 - C5103) * C47336) *
               C47272 * C47156) *
              C47051 * C637 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47318 +
           ((C5097 - C5096 + C5099 - C5098) * C4721 +
            (C5101 - C5100 + C5103 - C5102) * C4717 +
            (C5380 - C5381 + C5382 - C5383) * C4722 +
            (C5384 - C5385 + C5386 - C5387) * C47336) *
               C47272 * C47156) *
              C47051 * C638 +
          (((C4741 - C4740 + C4743 - C4742) * C4721 +
            (C4745 - C4744 + C4747 - C4746) * C4717 +
            (C4748 - C4749 + C4750 - C4751) * C4722 +
            (C4752 - C4753 + C4754 - C4755) * C47336) *
               C47272 * C47318 +
           ((C5381 - C5380 + C5383 - C5382) * C4721 +
            (C5385 - C5384 + C5387 - C5386) * C4717 +
            (C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                C4722 +
            (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C4721 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C4717 +
             (C4724 - C4725 + C4726 - C4727) * C4722 +
             (C4728 - C4729 + C4730 - C4731) * C47336) *
                C47272 * C47318 +
            ((C4719 * C468 - C4715 * C478 + C4720 * C906 - C47367 * C911) *
                 C4721 +
             (C4719 * C479 - C4715 * C498 + C4720 * C912 - C47367 * C921) *
                 C4717 +
             (C5080 - C5081 + C5082 - C5083) * C4722 +
             (C5084 - C5085 + C5086 - C5087) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C4721 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C4717 +
             (C4902 - C4903 + C4904 - C4905) * C4722 +
             (C4906 - C4907 + C4908 - C4909) * C47336) *
                C47272 * C47318 +
            ((C4715 * C911 - C4719 * C906 + C47367 * C1273 - C4720 * C1261) *
                 C4721 +
             (C4715 * C921 - C4719 * C912 + C47367 * C1288 - C4720 * C1274) *
                 C4717 +
             (C5582 - C5583 + C5584 - C5585) * C4722 +
             (C5586 - C5587 + C5588 - C5589) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C4721 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C4717 +
             (C4910 - C4911 + C4912 - C4913) * C4722 +
             (C4914 - C4915 + C4916 - C4917) * C47336) *
                C47272 * C47318 +
            ((C4719 * C1261 - C4715 * C1273 + C4720 * C1666 - C47367 * C1669) *
                 C4721 +
             (C4719 * C1274 - C4715 * C1288 + C4720 * C1670 - C47367 * C1675) *
                 C4717 +
             (C6320 - C6321 + C6322 - C6323) * C4722 +
             (C6324 - C6325 + C6326 - C6327) * C47336) *
                C47272 * C47156) *
               C47349) *
              C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C4721 +
             (C4729 - C4728 + C4731 - C4730) * C4717 +
             (C4732 - C4733 + C4734 - C4735) * C4722 +
             (C4736 - C4737 + C4738 - C4739) * C47336) *
                C47272 * C47318 +
            ((C5081 - C5080 + C5083 - C5082) * C4721 +
             (C5085 - C5084 + C5087 - C5086) * C4717 +
             (C5096 - C5097 + C5098 - C5099) * C4722 +
             (C5100 - C5101 + C5102 - C5103) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C4903 - C4902 + C4905 - C4904) * C4721 +
             (C4907 - C4906 + C4909 - C4908) * C4717 +
             (C4918 - C4919 + C4920 - C4921) * C4722 +
             (C4922 - C4923 + C4924 - C4925) * C47336) *
                C47272 * C47318 +
            ((C5583 - C5582 + C5585 - C5584) * C4721 +
             (C5587 - C5586 + C5589 - C5588) * C4717 +
             (C5590 - C5591 + C5592 - C5593) * C4722 +
             (C5594 - C5595 + C5596 - C5597) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C4911 - C4910 + C4913 - C4912) * C4721 +
             (C4915 - C4914 + C4917 - C4916) * C4717 +
             (C4926 - C4927 + C4928 - C4929) * C4722 +
             (C4930 - C4931 + C4932 - C4933) * C47336) *
                C47272 * C47318 +
            ((C6321 - C6320 + C6323 - C6322) * C4721 +
             (C6325 - C6324 + C6327 - C6326) * C4717 +
             (C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C4722 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C47069 * C47051 * C108 +
          ((C4725 - C4724 + C4727 - C4726) * C4721 +
           (C4729 - C4728 + C4731 - C4730) * C4717 +
           (C4732 - C4733 + C4734 - C4735) * C4722 +
           (C4736 - C4737 + C4738 - C4739) * C47336) *
              C47272 * C47069 * C47051 * C109 +
          ((C4733 - C4732 + C4735 - C4734) * C4721 +
           (C4737 - C4736 + C4739 - C4738) * C4717 +
           (C4740 - C4741 + C4742 - C4743) * C4722 +
           (C4744 - C4745 + C4746 - C4747) * C47336) *
              C47272 * C47069 * C47051 * C110 +
          ((C4741 - C4740 + C4743 - C4742) * C4721 +
           (C4745 - C4744 + C4747 - C4746) * C4717 +
           (C4748 - C4749 + C4750 - C4751) * C4722 +
           (C4752 - C4753 + C4754 - C4755) * C47336) *
              C47272 * C47069 * C47051 * C111 +
          ((C4749 - C4748 + C4751 - C4750) * C4721 +
           (C4753 - C4752 + C4755 - C4754) * C4717 +
           (C4715 * C134 - C4719 * C122 + C47367 * C641 - C4720 * C640) *
               C4722 +
           (C4715 * C143 - C4719 * C135 + C47367 * C643 - C4720 * C642) *
               C47336) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C47376 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C47376 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47349) *
              C285 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C47388 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C4719 * C293 - C4715 * C309 + C4720 * C294 - C47367 * C311) *
                C4722 +
            (C4719 * C310 - C4715 * C323 + C4720 * C312 - C47367 * C324) *
                C47336) *
               C47272 * C47069 * C47376 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C4721 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C4717 +
            (C4724 - C4725 + C4726 - C4727) * C4722 +
            (C4728 - C4729 + C4730 - C4731) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C4721 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C4717 +
            (C4902 - C4903 + C4904 - C4905) * C4722 +
            (C4906 - C4907 + C4908 - C4909) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C4721 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C4717 +
            (C4910 - C4911 + C4912 - C4913) * C4722 +
            (C4914 - C4915 + C4916 - C4917) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C4725 - C4724 + C4727 - C4726) * C4721 +
            (C4729 - C4728 + C4731 - C4730) * C4717 +
            (C4732 - C4733 + C4734 - C4735) * C4722 +
            (C4736 - C4737 + C4738 - C4739) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4903 - C4902 + C4905 - C4904) * C4721 +
            (C4907 - C4906 + C4909 - C4908) * C4717 +
            (C4918 - C4919 + C4920 - C4921) * C4722 +
            (C4922 - C4923 + C4924 - C4925) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4911 - C4910 + C4913 - C4912) * C4721 +
            (C4915 - C4914 + C4917 - C4916) * C4717 +
            (C4926 - C4927 + C4928 - C4929) * C4722 +
            (C4930 - C4931 + C4932 - C4933) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C4733 - C4732 + C4735 - C4734) * C4721 +
            (C4737 - C4736 + C4739 - C4738) * C4717 +
            (C4740 - C4741 + C4742 - C4743) * C4722 +
            (C4744 - C4745 + C4746 - C4747) * C47336) *
               C47272 * C47069 * C1050 +
           ((C4919 - C4918 + C4921 - C4920) * C4721 +
            (C4923 - C4922 + C4925 - C4924) * C4717 +
            (C5242 - C5243 + C5244 - C5245) * C4722 +
            (C5246 - C5247 + C5248 - C5249) * C47336) *
               C47272 * C47069 * C1051 +
           ((C4927 - C4926 + C4929 - C4928) * C4721 +
            (C4931 - C4930 + C4933 - C4932) * C4717 +
            (C4715 * C311 - C4719 * C294 + C47367 * C1399 - C4720 * C1398) *
                C4722 +
            (C4715 * C324 - C4719 * C312 + C47367 * C1401 - C4720 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
               C4721 +
           (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
               C4717 +
           (C4724 - C4725 + C4726 - C4727) * C4722 +
           (C4728 - C4729 + C4730 - C4731) * C47336) *
              C47272 * C47069 * C1118 +
          ((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
               C4721 +
           (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
               C4717 +
           (C4902 - C4903 + C4904 - C4905) * C4722 +
           (C4906 - C4907 + C4908 - C4909) * C47336) *
              C47272 * C47069 * C1119 +
          ((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
               C4721 +
           (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
               C4717 +
           (C4910 - C4911 + C4912 - C4913) * C4722 +
           (C4914 - C4915 + C4916 - C4917) * C47336) *
              C47272 * C47069 * C1120 +
          ((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
               C4721 +
           (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
               C4717 +
           (C4719 * C1125 - C4715 * C1132 + C4720 * C1128 - C47367 * C1138) *
               C4722 +
           (C4719 * C1133 - C4715 * C1143 + C4720 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
               C4721 +
           (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
               C4717 +
           (C4715 * C1138 - C4719 * C1128 + C47367 * C5829 - C4720 * C5826) *
               C4722 +
           (C4715 * C1146 - C4719 * C1139 + C47367 * C5832 - C4720 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C47110 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C47117 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C47069 * C2840) *
              C47028 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C47110 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C47117 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C2840) *
              C47037 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C47110 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47117 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C47255 * C303 - C113 * C290) * C4721 +
              (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
              (C338 - C339) * C47336) *
                 C10371 +
             ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
              C11870 * C4722 + C11871 * C47336) *
                 C47369) *
                C47318 +
            (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
              C11872 * C4722 + C11873 * C47336) *
                 C10371 +
             ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
              (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C2580 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C337 - C336) * C4721 + (C339 - C338) * C4717 +
              (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                 C10371 +
             (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C47318 +
            ((C11870 * C4721 + C11871 * C4717 + (C1566 - C1565) * C4722 +
              (C1568 - C1567) * C47336) *
                 C10371 +
             ((C11539 - C11538) * C4721 + (C11541 - C11540) * C4717 +
              (C47255 * C1283 - C113 * C1266) * C4722 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C47395 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C47391 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C47069 * C47381 +
           (((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C12004 - C12005) * C4721 + (C12006 - C12007) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C47069 * C47359) *
              C2580 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C47395 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C47391 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47381 +
           (((C1404 - C1403) * C4721 + (C1406 - C1405) * C4717 +
             (C1408 - C1407) * C4722 + (C1410 - C1409) * C47336) *
                C10371 +
            ((C11673 - C11672) * C4721 + (C11675 - C11674) * C4717 +
             (C47255 * C1673 - C113 * C1668) * C4722 +
             (C47255 * C1677 - C113 * C1674) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C2472 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C47114) *
              C47394 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C2472 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C47114) *
              C47387 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C2472 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47374 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            (C10946 * C4721 + C10947 * C4717 + (C757 - C758) * C4722 +
             (C759 - C760) * C47336) *
                C47369) *
               C47069 * C2472 +
           ((C645 * C4721 + C646 * C4717 + (C648 - C647) * C4722 +
             (C650 - C649) * C47336) *
                C10371 +
            ((C936 - C935) * C4721 + (C938 - C937) * C4717 +
             (C47255 * C919 - C113 * C910) * C4722 +
             (C47255 * C925 - C113 * C920) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47389 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47378 +
            (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
              C10680 * C4722 + C10681 * C47336) *
                 C10371 +
             ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
              C12734 * C4722 + C12735 * C47336) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47389 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47378 +
            (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
              C12598 * C4722 + C12599 * C47336) *
                 C10371 +
             ((C12868 - C12869) * C4721 + (C12870 - C12871) * C4717 +
              (C12600 - C12601) * C4722 + (C12602 - C12603) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C2580 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47389 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47378 +
            ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
              C10685 * C47336) *
                 C10371 +
             (C12736 * C4721 + C12737 * C4717 + (C2261 - C2262) * C4722 +
              (C2263 - C2264) * C47336) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47389 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47378 +
            ((C12596 * C4721 + C12597 * C4717 + (C2148 - C2147) * C4722 +
              (C2150 - C2149) * C47336) *
                 C10371 +
             ((C12601 - C12600) * C4721 + (C12603 - C12602) * C4717 +
              (C47255 * C2369 - C113 * C2364) * C4722 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47028 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47037 +
          ((((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
              (C157 - C156) * C47336) *
                 C10371 +
             (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                 C47369) *
                C47318 +
            ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                 C10371 +
             (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
              (C531 - C532) * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           (((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
              (C347 - C346) * C47336) *
                 C10371 +
             (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
              (C937 - C938) * C47336) *
                 C47369) *
                C47318 +
            ((C939 * C4721 + C940 * C4717 + (C936 - C935) * C4722 +
              (C938 - C937) * C47336) *
                 C10371 +
             ((C2148 - C2147) * C4721 + (C2150 - C2149) * C4717 +
              (C47255 * C2139 - C113 * C2138) * C4722 +
              (C47255 * C2141 - C113 * C2140) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C2472 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C47114) *
              C47394 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C2472 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C47114) *
              C47387 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C2472 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47374 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            (C10946 * C4721 + C10947 * C4717 + (C757 - C758) * C4722 +
             (C759 - C760) * C47336) *
                C47369) *
               C47069 * C2472 +
           ((C645 * C4721 + C646 * C4717 + (C648 - C647) * C4722 +
             (C650 - C649) * C47336) *
                C10371 +
            ((C936 - C935) * C4721 + (C938 - C937) * C4717 +
             (C47255 * C919 - C113 * C910) * C4722 +
             (C47255 * C925 - C113 * C920) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C47395 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C47391 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C47069 * C47381 +
           (((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C12004 - C12005) * C4721 + (C12006 - C12007) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C47069 * C47359) *
              C2580 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C47395 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C47391 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47381 +
           (((C1404 - C1403) * C4721 + (C1406 - C1405) * C4717 +
             (C1408 - C1407) * C4722 + (C1410 - C1409) * C47336) *
                C10371 +
            ((C11673 - C11672) * C4721 + (C11675 - C11674) * C4717 +
             (C47255 * C1673 - C113 * C1668) * C4722 +
             (C47255 * C1677 - C113 * C1674) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C47255 * C303 - C113 * C290) * C4721 +
              (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
              (C338 - C339) * C47336) *
                 C10371 +
             ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
              C11870 * C4722 + C11871 * C47336) *
                 C47369) *
                C3234 +
            (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
              C11872 * C4722 + C11873 * C47336) *
                 C10371 +
             ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
              (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C47303 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C337 - C336) * C4721 + (C339 - C338) * C4717 +
              (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                 C10371 +
             (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C3234 +
            ((C11870 * C4721 + C11871 * C4717 + (C1566 - C1565) * C4722 +
              (C1568 - C1567) * C47336) *
                 C10371 +
             ((C11539 - C11538) * C4721 + (C11541 - C11540) * C4717 +
              (C47255 * C1283 - C113 * C1266) * C4722 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47255 * C124 - C113 * C117) * C4721 +
                     (C47255 * C138 - C113 * C125) * C4717 +
                     (C146 - C147) * C4722 + (C148 - C149) * C47336) *
                        C10371 +
                    ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
                     C10670 * C4722 + C10671 * C47336) *
                        C47369) *
                       C47152 +
                   (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
                     C10672 * C4722 + C10673 * C47336) *
                        C10371 +
                    ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
                     C10678 * C4722 + C10679 * C47336) *
                        C47369) *
                       C47159 +
                   (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
                     C10680 * C4722 + C10681 * C47336) *
                        C10371 +
                    ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
                     C12734 * C4722 + C12735 * C47336) *
                        C47369) *
                       C3742) *
                      C47110 +
                  ((((C113 * C287 - C47255 * C297) * C4721 +
                     (C113 * C298 - C47255 * C317) * C4717 +
                     (C328 - C329) * C4722 + (C330 - C331) * C47336) *
                        C10371 +
                    ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
                     C11146 * C4722 + C11147 * C47336) *
                        C47369) *
                       C47152 +
                   (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
                     C11148 * C4722 + C11149 * C47336) *
                        C10371 +
                    ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
                     C12596 * C4722 + C12597 * C47336) *
                        C47369) *
                       C47159 +
                   (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
                     C12598 * C4722 + C12599 * C47336) *
                        C10371 +
                    ((C12868 - C12869) * C4721 + (C12870 - C12871) * C4717 +
                     (C12600 - C12601) * C4722 + (C12602 - C12603) * C47336) *
                        C47369) *
                       C3742) *
                      C47117 +
                  ((((C47255 * C303 - C113 * C290) * C4721 +
                     (C47255 * C320 - C113 * C304) * C4717 +
                     (C336 - C337) * C4722 + (C338 - C339) * C47336) *
                        C10371 +
                    ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
                     C11870 * C4722 + C11871 * C47336) *
                        C47369) *
                       C47152 +
                   (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
                     C11872 * C4722 + C11873 * C47336) *
                        C10371 +
                    ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
                     (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                        C47369) *
                       C47159 +
                   (((C11535 - C11534) * C4721 + (C11537 - C11536) * C4717 +
                     (C11539 - C11538) * C4722 + (C11541 - C11540) * C47336) *
                        C10371 +
                    ((C47255 * C7319 - C113 * C7317) * C4721 +
                     (C47255 * C7323 - C113 * C7320) * C4717 +
                     (C47255 * C7321 - C113 * C7318) * C4722 +
                     (C47255 * C7324 - C113 * C7322) * C47336) *
                        C47369) *
                       C3742) *
                      C2840) *
                 C47023) /
                (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C3234 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47395 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C3234 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             C12596 * C4722 + C12597 * C47336) *
                C47369) *
               C47156) *
              C47391 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C3234 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             C11872 * C4722 + C11873 * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C47156) *
              C47381 +
          ((((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C12004 - C12005) * C4721 + (C12006 - C12007) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C3234 +
           (((C12005 - C12004) * C4721 + (C12007 - C12006) * C4717 +
             (C11673 - C11672) * C4722 + (C11675 - C11674) * C47336) *
                C10371 +
            ((C47255 * C5981 - C113 * C5979) * C4721 +
             (C47255 * C5985 - C113 * C5982) * C4717 +
             (C47255 * C5983 - C113 * C5980) * C4722 +
             (C47255 * C5986 - C113 * C5984) * C47336) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47385 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47372 +
          ((((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
              (C157 - C156) * C47336) *
                 C10371 +
             (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                 C47369) *
                C3234 +
            ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                 C10371 +
             (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
              (C531 - C532) * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           (((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
              (C347 - C346) * C47336) *
                 C10371 +
             (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
              (C937 - C938) * C47336) *
                 C47369) *
                C3234 +
            ((C939 * C4721 + C940 * C4717 + (C936 - C935) * C4722 +
              (C938 - C937) * C47336) *
                 C10371 +
             ((C2148 - C2147) * C4721 + (C2150 - C2149) * C4717 +
              (C47255 * C2139 - C113 * C2138) * C4722 +
              (C47255 * C2141 - C113 * C2140) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47396 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47393 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
             C12734 * C4722 + C12735 * C47336) *
                C47369) *
               C47384 +
           (((C12391 - C12390) * C4721 + (C12393 - C12392) * C4717 +
             C12736 * C4722 + C12737 * C47336) *
                C10371 +
            ((C12394 - C12395) * C4721 + (C12396 - C12397) * C4717 +
             (C12398 - C12399) * C4722 + (C12400 - C12401) * C47336) *
                C47369) *
               C47365) *
              C2472 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47396 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             C12596 * C4722 + C12597 * C47336) *
                C47369) *
               C47393 +
           (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
             C12598 * C4722 + C12599 * C47336) *
                C10371 +
            ((C12868 - C12869) * C4721 + (C12870 - C12871) * C4717 +
             (C12600 - C12601) * C4722 + (C12602 - C12603) * C47336) *
                C47369) *
               C47384 +
           (((C12869 - C12868) * C4721 + (C12871 - C12870) * C4717 +
             (C12601 - C12600) * C4722 + (C12603 - C12602) * C47336) *
                C10371 +
            ((C47255 * C6841 - C113 * C6839) * C4721 +
             (C47255 * C6845 - C113 * C6842) * C4717 +
             (C47255 * C6843 - C113 * C6840) * C4722 +
             (C47255 * C6846 - C113 * C6844) * C47336) *
                C47369) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47152 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47159 +
            (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
              C10680 * C4722 + C10681 * C47336) *
                 C10371 +
             ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
              C12734 * C4722 + C12735 * C47336) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47152 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47159 +
            (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
              C12598 * C4722 + C12599 * C47336) *
                 C10371 +
             ((C12868 - C12869) * C4721 + (C12870 - C12871) * C4717 +
              (C12600 - C12601) * C4722 + (C12602 - C12603) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C47303 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47152 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47159 +
            ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
              C10685 * C47336) *
                 C10371 +
             (C12736 * C4721 + C12737 * C4717 + (C2261 - C2262) * C4722 +
              (C2263 - C2264) * C47336) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47152 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47159 +
            ((C12596 * C4721 + C12597 * C4717 + (C2148 - C2147) * C4722 +
              (C2150 - C2149) * C47336) *
                 C10371 +
             ((C12601 - C12600) * C4721 + (C12603 - C12602) * C4717 +
              (C47255 * C2369 - C113 * C2364) * C4722 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47385 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47372 +
          ((((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
              (C157 - C156) * C47336) *
                 C10371 +
             (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                 C47369) *
                C3234 +
            ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                 C10371 +
             (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
              (C531 - C532) * C47336) *
                 C47369) *
                C47156) *
               C2472 +
           (((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
              (C347 - C346) * C47336) *
                 C10371 +
             (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
              (C937 - C938) * C47336) *
                 C47369) *
                C3234 +
            ((C939 * C4721 + C940 * C4717 + (C936 - C935) * C4722 +
              (C938 - C937) * C47336) *
                 C10371 +
             ((C2148 - C2147) * C4721 + (C2150 - C2149) * C4717 +
              (C47255 * C2139 - C113 * C2138) * C4722 +
              (C47255 * C2141 - C113 * C2140) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C3234 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47395 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C3234 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             C12596 * C4722 + C12597 * C47336) *
                C47369) *
               C47156) *
              C47391 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C3234 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             C11872 * C4722 + C11873 * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C47156) *
              C47381 +
          ((((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C12004 - C12005) * C4721 + (C12006 - C12007) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C3234 +
           (((C12005 - C12004) * C4721 + (C12007 - C12006) * C4717 +
             (C11673 - C11672) * C4722 + (C11675 - C11674) * C47336) *
                C10371 +
            ((C47255 * C5981 - C113 * C5979) * C4721 +
             (C47255 * C5985 - C113 * C5982) * C4717 +
             (C47255 * C5983 - C113 * C5980) * C4722 +
             (C47255 * C5986 - C113 * C5984) * C47336) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C1392 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C1393 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             (C1562 - C1561) * C4722 + (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C1394 +
           (((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C113 * C1666 - C47255 * C1669) * C4721 +
             (C113 * C1670 - C47255 * C1675) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47303 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C1392 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C1393 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C1394 +
           (((C1404 - C1403) * C4721 + (C1406 - C1405) * C4717 +
             (C1408 - C1407) * C4722 + (C1410 - C1409) * C47336) *
                C10371 +
            ((C11673 - C11672) * C4721 + (C11675 - C11674) * C4717 +
             (C47255 * C1673 - C113 * C1668) * C4722 +
             (C47255 * C1677 - C113 * C1674) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C47317 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C113 * C906 - C47255 * C911) * C4721 +
             (C113 * C912 - C47255 * C921) * C4717 + (C928 - C927) * C4722 +
             (C930 - C929) * C47336) *
                C47369) *
               C47069 * C47114) *
              C636 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C47317 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            ((C927 - C928) * C4721 + (C929 - C930) * C4717 + C939 * C4722 +
             C940 * C47336) *
                C47369) *
               C47069 * C47114) *
              C637 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C47317 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            ((C932 - C931) * C4721 + (C934 - C933) * C4717 +
             (C935 - C936) * C4722 + (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47114) *
              C638 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            ((C526 - C525) * C4721 + (C528 - C527) * C4717 +
             (C757 - C758) * C4722 + (C759 - C760) * C47336) *
                C47369) *
               C47069 * C47317 +
           ((C645 * C4721 + C646 * C4717 + (C648 - C647) * C4722 +
             (C650 - C649) * C47336) *
                C10371 +
            ((C936 - C935) * C4721 + (C938 - C937) * C4717 +
             (C47255 * C919 - C113 * C910) * C4722 +
             (C47255 * C925 - C113 * C920) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C1788 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C1789 +
            (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
              C10680 * C4722 + C10681 * C47336) *
                 C10371 +
             ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
              (C2258 - C2257) * C4722 + (C2260 - C2259) * C47336) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C1788 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C1789 +
            (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
              C12598 * C4722 + C12599 * C47336) *
                 C10371 +
             ((C113 * C2362 - C47255 * C2365) * C4721 +
              (C113 * C2366 - C47255 * C2371) * C4717 +
              (C12600 - C12601) * C4722 + (C12602 - C12603) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C47303 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C1788 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C1789 +
            ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
              C10685 * C47336) *
                 C10371 +
             ((C2257 - C2258) * C4721 + (C2259 - C2260) * C4717 +
              (C2261 - C2262) * C4722 + (C2263 - C2264) * C47336) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C1788 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C1789 +
            ((C12596 * C4721 + C12597 * C4717 + (C2148 - C2147) * C4722 +
              (C2150 - C2149) * C47336) *
                 C10371 +
             ((C12601 - C12600) * C4721 + (C12603 - C12602) * C4717 +
              (C47255 * C2369 - C113 * C2364) * C4722 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47318 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C1392 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47318 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                C47369) *
               C47156) *
              C1393 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C47318 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             C11872 * C4722 + C11873 * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C47156) *
              C1394 +
          ((((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C12004 - C12005) * C4721 + (C12006 - C12007) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C47318 +
           (((C12005 - C12004) * C4721 + (C12007 - C12006) * C4717 +
             (C11673 - C11672) * C4722 + (C11675 - C11674) * C47336) *
                C10371 +
            ((C47255 * C5981 - C113 * C5979) * C4721 +
             (C47255 * C5985 - C113 * C5982) * C4717 +
             (C47255 * C5983 - C113 * C5980) * C4722 +
             (C47255 * C5986 - C113 * C5984) * C47336) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C47255 * C1267 - C113 * C1258) * C4721 +
              (C47255 * C1285 - C113 * C1268) * C4717 +
              (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C284 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             ((C2143 - C2144) * C4721 + (C2145 - C2146) * C4717 +
              (C2147 - C2148) * C4722 + (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C285 +
          ((((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
              (C157 - C156) * C47336) *
                 C10371 +
             (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                 C47369) *
                C47318 +
            ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                 C10371 +
             (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
              (C531 - C532) * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           (((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
              (C347 - C346) * C47336) *
                 C10371 +
             (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
              (C937 - C938) * C47336) *
                 C47369) *
                C47318 +
            ((C939 * C4721 + C940 * C4717 + (C936 - C935) * C4722 +
              (C938 - C937) * C47336) *
                 C10371 +
             ((C2148 - C2147) * C4721 + (C2150 - C2149) * C4717 +
              (C47255 * C2139 - C113 * C2138) * C4722 +
              (C47255 * C2141 - C113 * C2140) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C2248 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C2249 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
             C12734 * C4722 + C12735 * C47336) *
                C47369) *
               C2250 +
           (((C12391 - C12390) * C4721 + (C12393 - C12392) * C4717 +
             C12736 * C4722 + C12737 * C47336) *
                C10371 +
            ((C12394 - C12395) * C4721 + (C12396 - C12397) * C4717 +
             (C12398 - C12399) * C4722 + (C12400 - C12401) * C47336) *
                C47369) *
               C47365) *
              C47317 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C2248 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             C12596 * C4722 + C12597 * C47336) *
                C47369) *
               C2249 +
           (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
             C12598 * C4722 + C12599 * C47336) *
                C10371 +
            ((C12868 - C12869) * C4721 + (C12870 - C12871) * C4717 +
             (C12600 - C12601) * C4722 + (C12602 - C12603) * C47336) *
                C47369) *
               C2250 +
           (((C12869 - C12868) * C4721 + (C12871 - C12870) * C4717 +
             (C12601 - C12600) * C4722 + (C12603 - C12602) * C47336) *
                C10371 +
            ((C47255 * C6841 - C113 * C6839) * C4721 +
             (C47255 * C6845 - C113 * C6842) * C4717 +
             (C47255 * C6843 - C113 * C6840) * C4722 +
             (C47255 * C6846 - C113 * C6844) * C47336) *
                C47369) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47255 * C124 - C113 * C117) * C4721 +
                (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
                (C148 - C149) * C47336) *
                   C10371 +
               ((C47255 * C478 - C113 * C468) * C4721 +
                (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
                (C512 - C511) * C47336) *
                   C47369) *
                  C47069 * C47051 * C108 +
              (((C147 - C146) * C4721 + (C149 - C148) * C4717 +
                (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                   C10371 +
               ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
                C534 * C47336) *
                   C47369) *
                  C47069 * C47051 * C109 +
              ((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
                (C157 - C156) * C47336) *
                   C10371 +
               ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
                C756 * C47336) *
                   C47369) *
                  C47069 * C47051 * C110 +
              ((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
                (C161 - C160) * C47336) *
                   C10371 +
               ((C526 - C525) * C4721 + (C528 - C527) * C4717 +
                (C757 - C758) * C4722 + (C759 - C760) * C47336) *
                   C47369) *
                  C47069 * C47051 * C111 +
              ((C170 * C4721 + C171 * C4717 + (C163 - C162) * C4722 +
                (C165 - C164) * C47336) *
                   C10371 +
               ((C758 - C757) * C4721 + (C760 - C759) * C4717 +
                (C47255 * C751 - C113 * C750) * C4722 +
                (C47255 * C753 - C113 * C752) * C47336) *
                   C47369) *
                  C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47255 * C124 - C113 * C117) * C4721 +
                 (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
                 (C148 - C149) * C47336) *
                    C10371 +
                ((C47255 * C478 - C113 * C468) * C4721 +
                 (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
                 (C512 - C511) * C47336) *
                    C47369) *
                   C47069 * C47388 +
               (((C113 * C287 - C47255 * C297) * C4721 +
                 (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
                 (C330 - C331) * C47336) *
                    C10371 +
                ((C113 * C906 - C47255 * C911) * C4721 +
                 (C113 * C912 - C47255 * C921) * C4717 + (C928 - C927) * C4722 +
                 (C930 - C929) * C47336) *
                    C47369) *
                   C47069 * C47376 +
               (((C47255 * C303 - C113 * C290) * C4721 +
                 (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
                 (C338 - C339) * C47336) *
                    C10371 +
                ((C47255 * C1273 - C113 * C1261) * C4721 +
                 (C47255 * C1288 - C113 * C1274) * C4717 +
                 (C1562 - C1561) * C4722 + (C1564 - C1563) * C47336) *
                    C47369) *
                   C47069 * C47349) *
                  C284 +
              ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
                 (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                    C10371 +
                ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
                 C534 * C47336) *
                    C47369) *
                   C47069 * C47388 +
               (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
                 (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                    C10371 +
                ((C927 - C928) * C4721 + (C929 - C930) * C4717 + C939 * C4722 +
                 C940 * C47336) *
                    C47369) *
                   C47069 * C47376 +
               (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
                 (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                    C10371 +
                ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
                 (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                    C47369) *
                   C47069 * C47349) *
                  C285 +
              (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
                 (C157 - C156) * C47336) *
                    C10371 +
                ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
                 C756 * C47336) *
                    C47369) *
                   C47069 * C47388 +
               ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
                 (C347 - C346) * C47336) *
                    C10371 +
                ((C932 - C931) * C4721 + (C934 - C933) * C4717 +
                 (C935 - C936) * C4722 + (C937 - C938) * C47336) *
                    C47369) *
                   C47069 * C47376 +
               ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
                 (C351 - C350) * C47336) *
                    C10371 +
                ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
                 (C47255 * C1557 - C113 * C1556) * C4722 +
                 (C47255 * C1559 - C113 * C1558) * C47336) *
                    C47369) *
                   C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47389 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47378 +
           ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
             C10685 * C47336) *
                C10371 +
            ((C2257 - C2258) * C4721 + (C2259 - C2260) * C4717 +
             (C2261 - C2262) * C4722 + (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C285 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47389 +
           ((C533 * C4721 + C534 * C4717 + (C526 - C525) * C4722 +
             (C528 - C527) * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C47378 +
           ((C535 * C4721 + C536 * C4717 + (C530 - C529) * C4722 +
             (C532 - C531) * C47336) *
                C10371 +
            ((C2262 - C2261) * C4721 + (C2264 - C2263) * C4717 +
             (C47255 * C2253 - C113 * C2252) * C4722 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C47255 * C1273 - C113 * C1261) * C4721 +
             (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
             (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
            C10670 * C4722 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C4721 +
            (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
            (C330 - C331) * C47336) *
               C10371 +
           ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
            C11146 * C4722 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C4721 +
            (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
            (C338 - C339) * C47336) *
               C10371 +
           ((C47255 * C1273 - C113 * C1261) * C4721 +
            (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
            (C1564 - C1563) * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C4721 +
            (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
            (C1405 - C1406) * C47336) *
               C10371 +
           ((C113 * C1666 - C47255 * C1669) * C4721 +
            (C113 * C1670 - C47255 * C1675) * C4717 +
            (C113 * C1667 - C47255 * C1671) * C4722 +
            (C113 * C1672 - C47255 * C1676) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C4721 +
            (C47255 * C1145 - C113 * C1137) * C4717 +
            (C47255 * C1138 - C113 * C1128) * C4722 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C10371 +
           ((C47255 * C6459 - C113 * C6457) * C4721 +
            (C47255 * C6463 - C113 * C6460) * C4717 +
            (C47255 * C6461 - C113 * C6458) * C4722 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C1050 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47389 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                C47369) *
               C47378 +
           (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
             (C2143 - C2144) * C4722 + (C2145 - C2146) * C47336) *
                C10371 +
            ((C113 * C2362 - C47255 * C2365) * C4721 +
             (C113 * C2366 - C47255 * C2371) * C4717 +
             (C113 * C2363 - C47255 * C2367) * C4722 +
             (C113 * C2368 - C47255 * C2372) * C47336) *
                C47369) *
               C47352) *
              C1051 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             (C1562 - C1561) * C4722 + (C1564 - C1563) * C47336) *
                C47369) *
               C47389 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             (C1561 - C1562) * C4722 + (C1563 - C1564) * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C47378 +
           (((C11535 - C11534) * C4721 + (C11537 - C11536) * C4717 +
             (C11539 - C11538) * C4722 + (C11541 - C11540) * C47336) *
                C10371 +
            ((C47255 * C7319 - C113 * C7317) * C4721 +
             (C47255 * C7323 - C113 * C7320) * C4717 +
             (C47255 * C7321 - C113 * C7318) * C4722 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C1788 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C1789 +
           ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
             C10685 * C47336) *
                C10371 +
            ((C2257 - C2258) * C4721 + (C2259 - C2260) * C4717 +
             (C2261 - C2262) * C4722 + (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C1788 +
           ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C1789 +
           ((C535 * C4721 + C536 * C4717 + (C530 - C529) * C4722 +
             (C532 - C531) * C47336) *
                C10371 +
            ((C2262 - C2261) * C4721 + (C2264 - C2263) * C4717 +
             (C47255 * C2253 - C113 * C2252) * C4722 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C47388 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C1788 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                C47369) *
               C1789 +
           (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
             (C2143 - C2144) * C4722 + (C2145 - C2146) * C47336) *
                C10371 +
            ((C113 * C2362 - C47255 * C2365) * C4721 +
             (C113 * C2366 - C47255 * C2371) * C4717 +
             (C113 * C2363 - C47255 * C2367) * C4722 +
             (C113 * C2368 - C47255 * C2372) * C47336) *
                C47369) *
               C47352) *
              C47376 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C1788 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             C11872 * C4722 + C11873 * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C1789 +
           (((C11535 - C11534) * C4721 + (C11537 - C11536) * C4717 +
             (C11539 - C11538) * C4722 + (C11541 - C11540) * C47336) *
                C10371 +
            ((C47255 * C7319 - C113 * C7317) * C4721 +
             (C47255 * C7323 - C113 * C7320) * C4717 +
             (C47255 * C7321 - C113 * C7318) * C4722 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
            C10670 * C4722 + C10671 * C47336) *
               C47369) *
              C1963 +
          (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
            C10672 * C4722 + C10673 * C47336) *
               C10371 +
           ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
            C10678 * C4722 + C10679 * C47336) *
               C47369) *
              C1964 +
          (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
            C10680 * C4722 + C10681 * C47336) *
               C10371 +
           ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
            (C2258 - C2257) * C4722 + (C2260 - C2259) * C47336) *
               C47369) *
              C1965 +
          (((C12391 - C12390) * C4721 + (C12393 - C12392) * C4717 +
            (C2257 - C2258) * C4722 + (C2259 - C2260) * C47336) *
               C10371 +
           ((C12394 - C12395) * C4721 + (C12396 - C12397) * C4717 +
            (C12398 - C12399) * C4722 + (C12400 - C12401) * C47336) *
               C47369) *
              C1966 +
          (((C12395 - C12394) * C4721 + (C12397 - C12396) * C4717 +
            (C12399 - C12398) * C4722 + (C12401 - C12400) * C47336) *
               C10371 +
           ((C47255 * C12383 - C113 * C12381) * C4721 +
            (C47255 * C12387 - C113 * C12384) * C4717 +
            (C47255 * C12385 - C113 * C12382) * C4722 +
            (C47255 * C12388 - C113 * C12386) * C47336) *
               C47369) *
              C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C47255 * C303 - C113 * C290) * C4721 +
              (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
              (C338 - C339) * C47336) *
                 C10371 +
             ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
              C11870 * C4722 + C11871 * C47336) *
                 C47369) *
                C47318 +
            (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
              C11872 * C4722 + C11873 * C47336) *
                 C10371 +
             ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
              (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             ((C2143 - C2144) * C4721 + (C2145 - C2146) * C4717 +
              (C2147 - C2148) * C4722 + (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C337 - C336) * C4721 + (C339 - C338) * C4717 +
              (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                 C10371 +
             (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C47318 +
            ((C11870 * C4721 + C11871 * C4717 + (C1566 - C1565) * C4722 +
              (C1568 - C1567) * C47336) *
                 C10371 +
             ((C11539 - C11538) * C4721 + (C11541 - C11540) * C4717 +
              (C47255 * C1283 - C113 * C1266) * C4722 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47318 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47318 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C637 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47318 +
           ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C638 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            (C10946 * C4721 + C10947 * C4717 + (C757 - C758) * C4722 +
             (C759 - C760) * C47336) *
                C47369) *
               C47318 +
           ((C755 * C4721 + C756 * C4717 + (C758 - C757) * C4722 +
             (C760 - C759) * C47336) *
                C10371 +
            ((C530 - C529) * C4721 + (C532 - C531) * C4717 +
             (C47255 * C496 - C113 * C477) * C4722 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C2248 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C2249 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
             C12734 * C4722 + C12735 * C47336) *
                C47369) *
               C2250 +
           (((C12391 - C12390) * C4721 + (C12393 - C12392) * C4717 +
             C12736 * C4722 + C12737 * C47336) *
                C10371 +
            ((C12394 - C12395) * C4721 + (C12396 - C12397) * C4717 +
             (C12398 - C12399) * C4722 + (C12400 - C12401) * C47336) *
                C47369) *
               C47365) *
              C47051 * C47303 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C2248 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C2249 +
           ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
             C10685 * C47336) *
                C10371 +
            (C12736 * C4721 + C12737 * C4717 + (C2261 - C2262) * C4722 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C2250 +
           ((C12734 * C4721 + C12735 * C4717 + (C2262 - C2261) * C4722 +
             (C2264 - C2263) * C47336) *
                C10371 +
            ((C12399 - C12398) * C4721 + (C12401 - C12400) * C4717 +
             (C47255 * C1984 - C113 * C1973) * C4722 +
             (C47255 * C1991 - C113 * C1985) * C47336) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C47255 * C478 - C113 * C468) * C4721 +
             (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
             (C512 - C511) * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C113 * C906 - C47255 * C911) * C4721 +
             (C113 * C912 - C47255 * C921) * C4717 + (C928 - C927) * C4722 +
             (C930 - C929) * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C47255 * C1273 - C113 * C1261) * C4721 +
             (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
             (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
             C534 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            ((C927 - C928) * C4721 + (C929 - C930) * C4717 + C939 * C4722 +
             C940 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C285 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
             C756 * C47336) *
                C47369) *
               C47069 * C47388 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            ((C932 - C931) * C4721 + (C934 - C933) * C4717 +
             (C935 - C936) * C4722 + (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47376 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C47255 * C478 - C113 * C468) * C4721 +
            (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
            (C512 - C511) * C47336) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C4721 + (C149 - C148) * C4717 +
            (C151 - C150) * C4722 + (C153 - C152) * C47336) *
               C10371 +
           ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
            C534 * C47336) *
               C47369) *
              C47069 * C47051 * C109 +
          ((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
            (C157 - C156) * C47336) *
               C10371 +
           ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
            C756 * C47336) *
               C47369) *
              C47069 * C47051 * C110 +
          ((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
            (C161 - C160) * C47336) *
               C10371 +
           ((C526 - C525) * C4721 + (C528 - C527) * C4717 +
            (C757 - C758) * C4722 + (C759 - C760) * C47336) *
               C47369) *
              C47069 * C47051 * C111 +
          ((C170 * C4721 + C171 * C4717 + (C163 - C162) * C4722 +
            (C165 - C164) * C47336) *
               C10371 +
           ((C758 - C757) * C4721 + (C760 - C759) * C4717 +
            (C47255 * C751 - C113 * C750) * C4722 +
            (C47255 * C753 - C113 * C752) * C47336) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C47255 * C1273 - C113 * C1261) * C4721 +
             (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
             (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
            C10670 * C4722 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C4721 +
            (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
            (C330 - C331) * C47336) *
               C10371 +
           ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
            C11146 * C4722 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C4721 +
            (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
            (C338 - C339) * C47336) *
               C10371 +
           ((C47255 * C1273 - C113 * C1261) * C4721 +
            (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
            (C1564 - C1563) * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C4721 +
            (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
            (C1405 - C1406) * C47336) *
               C10371 +
           ((C113 * C1666 - C47255 * C1669) * C4721 +
            (C113 * C1670 - C47255 * C1675) * C4717 +
            (C113 * C1667 - C47255 * C1671) * C4722 +
            (C113 * C1672 - C47255 * C1676) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C4721 +
            (C47255 * C1145 - C113 * C1137) * C4717 +
            (C47255 * C1138 - C113 * C1128) * C4722 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C10371 +
           ((C47255 * C6459 - C113 * C6457) * C4721 +
            (C47255 * C6463 - C113 * C6460) * C4717 +
            (C47255 * C6461 - C113 * C6458) * C4722 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C1788 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C1789 +
           ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
             C10685 * C47336) *
                C10371 +
            ((C2257 - C2258) * C4721 + (C2259 - C2260) * C4717 +
             (C2261 - C2262) * C4722 + (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C1788 +
           ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C1789 +
           ((C535 * C4721 + C536 * C4717 + (C530 - C529) * C4722 +
             (C532 - C531) * C47336) *
                C10371 +
            ((C2262 - C2261) * C4721 + (C2264 - C2263) * C4717 +
             (C47255 * C2253 - C113 * C2252) * C4722 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C47388 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C1788 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                C47369) *
               C1789 +
           (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
             (C2143 - C2144) * C4722 + (C2145 - C2146) * C47336) *
                C10371 +
            ((C113 * C2362 - C47255 * C2365) * C4721 +
             (C113 * C2366 - C47255 * C2371) * C4717 +
             (C113 * C2363 - C47255 * C2367) * C4722 +
             (C113 * C2368 - C47255 * C2372) * C47336) *
                C47369) *
               C47352) *
              C47376 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C1788 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             C11872 * C4722 + C11873 * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C1789 +
           (((C11535 - C11534) * C4721 + (C11537 - C11536) * C4717 +
             (C11539 - C11538) * C4722 + (C11541 - C11540) * C47336) *
                C10371 +
            ((C47255 * C7319 - C113 * C7317) * C4721 +
             (C47255 * C7323 - C113 * C7320) * C4717 +
             (C47255 * C7321 - C113 * C7318) * C4722 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47028 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47037 +
          ((((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
              (C157 - C156) * C47336) *
                 C10371 +
             (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                 C47369) *
                C3234 +
            ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                 C10371 +
             (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
              (C531 - C532) * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           (((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
              (C347 - C346) * C47336) *
                 C10371 +
             (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
              (C937 - C938) * C47336) *
                 C47369) *
                C3234 +
            ((C939 * C4721 + C940 * C4717 + (C936 - C935) * C4722 +
              (C938 - C937) * C47336) *
                 C10371 +
             ((C2148 - C2147) * C4721 + (C2150 - C2149) * C4717 +
              (C47255 * C2139 - C113 * C2138) * C4722 +
              (C47255 * C2141 - C113 * C2140) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47152 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47159 +
            (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
              C10680 * C4722 + C10681 * C47336) *
                 C10371 +
             ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
              C12734 * C4722 + C12735 * C47336) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47152 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47159 +
            (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
              C12598 * C4722 + C12599 * C47336) *
                 C10371 +
             ((C12868 - C12869) * C4721 + (C12870 - C12871) * C4717 +
              (C12600 - C12601) * C4722 + (C12602 - C12603) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C2580 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47152 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47159 +
            ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
              C10685 * C47336) *
                 C10371 +
             (C12736 * C4721 + C12737 * C4717 + (C2261 - C2262) * C4722 +
              (C2263 - C2264) * C47336) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47152 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47159 +
            ((C12596 * C4721 + C12597 * C4717 + (C2148 - C2147) * C4722 +
              (C2150 - C2149) * C47336) *
                 C10371 +
             ((C12601 - C12600) * C4721 + (C12603 - C12602) * C4717 +
              (C47255 * C2369 - C113 * C2364) * C4722 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C47255 * C303 - C113 * C290) * C4721 +
              (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
              (C338 - C339) * C47336) *
                 C10371 +
             ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
              C11870 * C4722 + C11871 * C47336) *
                 C47369) *
                C3234 +
            (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
              C11872 * C4722 + C11873 * C47336) *
                 C10371 +
             ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
              (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C337 - C336) * C4721 + (C339 - C338) * C4717 +
              (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                 C10371 +
             (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C3234 +
            ((C11870 * C4721 + C11871 * C4717 + (C1566 - C1565) * C4722 +
              (C1568 - C1567) * C47336) *
                 C10371 +
             ((C11539 - C11538) * C4721 + (C11541 - C11540) * C4717 +
              (C47255 * C1283 - C113 * C1266) * C4722 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C3234 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C3234 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C3234 +
           ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            (C10946 * C4721 + C10947 * C4717 + (C757 - C758) * C4722 +
             (C759 - C760) * C47336) *
                C47369) *
               C3234 +
           ((C755 * C4721 + C756 * C4717 + (C758 - C757) * C4722 +
             (C760 - C759) * C47336) *
                C10371 +
            ((C530 - C529) * C4721 + (C532 - C531) * C4717 +
             (C47255 * C496 - C113 * C477) * C4722 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47396 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47393 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
             C12734 * C4722 + C12735 * C47336) *
                C47369) *
               C47384 +
           (((C12391 - C12390) * C4721 + (C12393 - C12392) * C4717 +
             C12736 * C4722 + C12737 * C47336) *
                C10371 +
            ((C12394 - C12395) * C4721 + (C12396 - C12397) * C4717 +
             (C12398 - C12399) * C4722 + (C12400 - C12401) * C47336) *
                C47369) *
               C47365) *
              C47051 * C2580 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47396 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47393 +
           ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
             C10685 * C47336) *
                C10371 +
            (C12736 * C4721 + C12737 * C4717 + (C2261 - C2262) * C4722 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C47384 +
           ((C12734 * C4721 + C12735 * C4717 + (C2262 - C2261) * C4722 +
             (C2264 - C2263) * C47336) *
                C10371 +
            ((C12399 - C12398) * C4721 + (C12401 - C12400) * C4717 +
             (C47255 * C1984 - C113 * C1973) * C4722 +
             (C47255 * C1991 - C113 * C1985) * C47336) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47152 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47159 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C12390 - C12391) * C4721 + (C12392 - C12393) * C4717 +
             C12734 * C4722 + C12735 * C47336) *
                C47369) *
               C3742) *
              C47051 * C47028 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47152 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47159 +
           ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
             C10685 * C47336) *
                C10371 +
            (C12736 * C4721 + C12737 * C4717 + (C2261 - C2262) * C4722 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C3742) *
              C47051 * C47037 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47152 +
           ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C47159 +
           ((C535 * C4721 + C536 * C4717 + (C530 - C529) * C4722 +
             (C532 - C531) * C47336) *
                C10371 +
            ((C2262 - C2261) * C4721 + (C2264 - C2263) * C4717 +
             (C47255 * C2253 - C113 * C2252) * C4722 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C3742) *
              C47051 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C3234 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C3234 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C3234 +
           ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            (C10946 * C4721 + C10947 * C4717 + (C757 - C758) * C4722 +
             (C759 - C760) * C47336) *
                C47369) *
               C3234 +
           ((C755 * C4721 + C756 * C4717 + (C758 - C757) * C4722 +
             (C760 - C759) * C47336) *
                C10371 +
            ((C530 - C529) * C4721 + (C532 - C531) * C4717 +
             (C47255 * C496 - C113 * C477) * C4722 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              C12596 * C4722 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C47255 * C303 - C113 * C290) * C4721 +
              (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
              (C338 - C339) * C47336) *
                 C10371 +
             ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
              C11870 * C4722 + C11871 * C47336) *
                 C47369) *
                C3234 +
            (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
              C11872 * C4722 + C11873 * C47336) *
                 C10371 +
             ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
              (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             (C12598 * C4721 + C12599 * C4717 + (C2147 - C2148) * C4722 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C337 - C336) * C4721 + (C339 - C338) * C4717 +
              (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                 C10371 +
             (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C3234 +
            ((C11870 * C4721 + C11871 * C4717 + (C1566 - C1565) * C4722 +
              (C1568 - C1567) * C47336) *
                 C10371 +
             ((C11539 - C11538) * C4721 + (C11541 - C11540) * C4717 +
              (C47255 * C1283 - C113 * C1266) * C4722 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C47317 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C113 * C906 - C47255 * C911) * C4721 +
             (C113 * C912 - C47255 * C921) * C4717 + (C928 - C927) * C4722 +
             (C930 - C929) * C47336) *
                C47369) *
               C47069 * C47114) *
              C636 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C47317 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            ((C927 - C928) * C4721 + (C929 - C930) * C4717 + C939 * C4722 +
             C940 * C47336) *
                C47369) *
               C47069 * C47114) *
              C637 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C47317 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            ((C932 - C931) * C4721 + (C934 - C933) * C4717 +
             (C935 - C936) * C4722 + (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47114) *
              C638 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            ((C526 - C525) * C4721 + (C528 - C527) * C4717 +
             (C757 - C758) * C4722 + (C759 - C760) * C47336) *
                C47369) *
               C47069 * C47317 +
           ((C645 * C4721 + C646 * C4717 + (C648 - C647) * C4722 +
             (C650 - C649) * C47336) *
                C10371 +
            ((C936 - C935) * C4721 + (C938 - C937) * C4717 +
             (C47255 * C919 - C113 * C910) * C4722 +
             (C47255 * C925 - C113 * C920) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C1392 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C1393 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             (C1562 - C1561) * C4722 + (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C1394 +
           (((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C113 * C1666 - C47255 * C1669) * C4721 +
             (C113 * C1670 - C47255 * C1675) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47303 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C1392 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C1393 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C1394 +
           (((C1404 - C1403) * C4721 + (C1406 - C1405) * C4717 +
             (C1408 - C1407) * C4722 + (C1410 - C1409) * C47336) *
                C10371 +
            ((C11673 - C11672) * C4721 + (C11675 - C11674) * C4717 +
             (C47255 * C1673 - C113 * C1668) * C4722 +
             (C47255 * C1677 - C113 * C1674) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C47255 * C1267 - C113 * C1258) * C4721 +
              (C47255 * C1285 - C113 * C1268) * C4717 +
              (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C284 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             ((C2143 - C2144) * C4721 + (C2145 - C2146) * C4717 +
              (C2147 - C2148) * C4722 + (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C285 +
          ((((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
              (C157 - C156) * C47336) *
                 C10371 +
             (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                 C47369) *
                C47318 +
            ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                 C10371 +
             (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
              (C531 - C532) * C47336) *
                 C47369) *
                C47156) *
               C47317 +
           (((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
              (C347 - C346) * C47336) *
                 C10371 +
             (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
              (C937 - C938) * C47336) *
                 C47369) *
                C47318 +
            ((C939 * C4721 + C940 * C4717 + (C936 - C935) * C4722 +
              (C938 - C937) * C47336) *
                 C10371 +
             ((C2148 - C2147) * C4721 + (C2150 - C2149) * C4717 +
              (C47255 * C2139 - C113 * C2138) * C4722 +
              (C47255 * C2141 - C113 * C2140) * C47336) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47318 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C1392 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47318 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                C47369) *
               C47156) *
              C1393 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             C11870 * C4722 + C11871 * C47336) *
                C47369) *
               C47318 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             C11872 * C4722 + C11873 * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C47156) *
              C1394 +
          ((((C113 * C1124 - C47255 * C1130) * C4721 +
             (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
             (C1405 - C1406) * C47336) *
                C10371 +
            ((C12004 - C12005) * C4721 + (C12006 - C12007) * C4717 +
             (C11672 - C11673) * C4722 + (C11674 - C11675) * C47336) *
                C47369) *
               C47318 +
           (((C12005 - C12004) * C4721 + (C12007 - C12006) * C4717 +
             (C11673 - C11672) * C4722 + (C11675 - C11674) * C47336) *
                C10371 +
            ((C47255 * C5981 - C113 * C5979) * C4721 +
             (C47255 * C5985 - C113 * C5982) * C4717 +
             (C47255 * C5983 - C113 * C5980) * C4722 +
             (C47255 * C5986 - C113 * C5984) * C47336) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C47255 * C478 - C113 * C468) * C4721 +
             (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
             (C512 - C511) * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C113 * C906 - C47255 * C911) * C4721 +
             (C113 * C912 - C47255 * C921) * C4717 + (C928 - C927) * C4722 +
             (C930 - C929) * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C47255 * C1273 - C113 * C1261) * C4721 +
             (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
             (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
             C534 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            ((C927 - C928) * C4721 + (C929 - C930) * C4717 + C939 * C4722 +
             C940 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C285 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
             C756 * C47336) *
                C47369) *
               C47069 * C47388 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            ((C932 - C931) * C4721 + (C934 - C933) * C4717 +
             (C935 - C936) * C4722 + (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47376 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C47255 * C478 - C113 * C468) * C4721 +
            (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
            (C512 - C511) * C47336) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C4721 + (C149 - C148) * C4717 +
            (C151 - C150) * C4722 + (C153 - C152) * C47336) *
               C10371 +
           ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
            C534 * C47336) *
               C47369) *
              C47069 * C47051 * C109 +
          ((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
            (C157 - C156) * C47336) *
               C10371 +
           ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
            C756 * C47336) *
               C47369) *
              C47069 * C47051 * C110 +
          ((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
            (C161 - C160) * C47336) *
               C10371 +
           ((C526 - C525) * C4721 + (C528 - C527) * C4717 +
            (C757 - C758) * C4722 + (C759 - C760) * C47336) *
               C47369) *
              C47069 * C47051 * C111 +
          ((C170 * C4721 + C171 * C4717 + (C163 - C162) * C4722 +
            (C165 - C164) * C47336) *
               C10371 +
           ((C758 - C757) * C4721 + (C760 - C759) * C4717 +
            (C47255 * C751 - C113 * C750) * C4722 +
            (C47255 * C753 - C113 * C752) * C47336) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47389 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47378 +
           ((C10678 * C4721 + C10679 * C4717 + C10684 * C4722 +
             C10685 * C47336) *
                C10371 +
            ((C2257 - C2258) * C4721 + (C2259 - C2260) * C4717 +
             (C2261 - C2262) * C4722 + (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C285 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47389 +
           ((C533 * C4721 + C534 * C4717 + (C526 - C525) * C4722 +
             (C528 - C527) * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C47378 +
           ((C535 * C4721 + C536 * C4717 + (C530 - C529) * C4722 +
             (C532 - C531) * C47336) *
                C10371 +
            ((C2262 - C2261) * C4721 + (C2264 - C2263) * C4717 +
             (C47255 * C2253 - C113 * C2252) * C4722 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C47255 * C1273 - C113 * C1261) * C4721 +
             (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
             (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
            C10670 * C4722 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C4721 +
            (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
            (C330 - C331) * C47336) *
               C10371 +
           ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
            C11146 * C4722 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C4721 +
            (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
            (C338 - C339) * C47336) *
               C10371 +
           ((C47255 * C1273 - C113 * C1261) * C4721 +
            (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
            (C1564 - C1563) * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C4721 +
            (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
            (C1405 - C1406) * C47336) *
               C10371 +
           ((C113 * C1666 - C47255 * C1669) * C4721 +
            (C113 * C1670 - C47255 * C1675) * C4717 +
            (C113 * C1667 - C47255 * C1671) * C4722 +
            (C113 * C1672 - C47255 * C1676) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C4721 +
            (C47255 * C1145 - C113 * C1137) * C4717 +
            (C47255 * C1138 - C113 * C1128) * C4722 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C10371 +
           ((C47255 * C6459 - C113 * C6457) * C4721 +
            (C47255 * C6463 - C113 * C6460) * C4717 +
            (C47255 * C6461 - C113 * C6458) * C4722 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C4721 + (C10677 - C10676) * C4717 +
             C10680 * C4722 + C10681 * C47336) *
                C10371 +
            ((C47255 * C1974 - C113 * C1968) * C4721 +
             (C47255 * C1986 - C113 * C1975) * C4717 + (C2258 - C2257) * C4722 +
             (C2260 - C2259) * C47336) *
                C47369) *
               C47352) *
              C1050 +
          ((((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47389 +
           (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
             C11148 * C4722 + C11149 * C47336) *
                C10371 +
            ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
             (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                C47369) *
               C47378 +
           (((C11527 - C11526) * C4721 + (C11529 - C11528) * C4717 +
             (C2143 - C2144) * C4722 + (C2145 - C2146) * C47336) *
                C10371 +
            ((C113 * C2362 - C47255 * C2365) * C4721 +
             (C113 * C2366 - C47255 * C2371) * C4717 +
             (C113 * C2363 - C47255 * C2367) * C4722 +
             (C113 * C2368 - C47255 * C2372) * C47336) *
                C47369) *
               C47352) *
              C1051 +
          ((((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
             (C1562 - C1561) * C4722 + (C1564 - C1563) * C47336) *
                C47369) *
               C47389 +
           (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
             (C1561 - C1562) * C4722 + (C1563 - C1564) * C47336) *
                C10371 +
            ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
             (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                C47369) *
               C47378 +
           (((C11535 - C11534) * C4721 + (C11537 - C11536) * C4717 +
             (C11539 - C11538) * C4722 + (C11541 - C11540) * C47336) *
                C10371 +
            ((C47255 * C7319 - C113 * C7317) * C4721 +
             (C47255 * C7323 - C113 * C7320) * C4717 +
             (C47255 * C7321 - C113 * C7318) * C4722 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47318 +
           (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
             C10672 * C4722 + C10673 * C47336) *
                C10371 +
            ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
             C10678 * C4722 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47318 +
           ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
             C10683 * C47336) *
                C10371 +
            (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C637 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47318 +
           ((C533 * C4721 + C534 * C4717 + C10946 * C4722 + C10947 * C47336) *
                C10371 +
            (C10684 * C4721 + C10685 * C4717 + (C529 - C530) * C4722 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C638 +
          (((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
             (C161 - C160) * C47336) *
                C10371 +
            (C10946 * C4721 + C10947 * C4717 + (C757 - C758) * C4722 +
             (C759 - C760) * C47336) *
                C47369) *
               C47318 +
           ((C755 * C4721 + C756 * C4717 + (C758 - C757) * C4722 +
             (C760 - C759) * C47336) *
                C10371 +
            ((C530 - C529) * C4721 + (C532 - C531) * C4717 +
             (C47255 * C496 - C113 * C477) * C4722 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C4721 +
              (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
              (C148 - C149) * C47336) *
                 C10371 +
             ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
              C10670 * C4722 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C4721 + (C10669 - C10668) * C4717 +
              C10672 * C4722 + C10673 * C47336) *
                 C10371 +
             ((C10674 - C10675) * C4721 + (C10676 - C10677) * C4717 +
              C10678 * C4722 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C113 * C287 - C47255 * C297) * C4721 +
              (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
              (C330 - C331) * C47336) *
                 C10371 +
             ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
              C11146 * C4722 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C4721 + (C11145 - C11144) * C4717 +
              C11148 * C4722 + C11149 * C47336) *
                 C10371 +
             ((C11526 - C11527) * C4721 + (C11528 - C11529) * C4717 +
              (C2144 - C2143) * C4722 + (C2146 - C2145) * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C47255 * C303 - C113 * C290) * C4721 +
              (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
              (C338 - C339) * C47336) *
                 C10371 +
             ((C11530 - C11531) * C4721 + (C11532 - C11533) * C4717 +
              C11870 * C4722 + C11871 * C47336) *
                 C47369) *
                C47318 +
            (((C11531 - C11530) * C4721 + (C11533 - C11532) * C4717 +
              C11872 * C4722 + C11873 * C47336) *
                 C10371 +
             ((C11534 - C11535) * C4721 + (C11536 - C11537) * C4717 +
              (C11538 - C11539) * C4722 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
              (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                 C10371 +
             (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C4721 + C10671 * C4717 + C10682 * C4722 +
              C10683 * C47336) *
                 C10371 +
             (C10680 * C4721 + C10681 * C4717 + C535 * C4722 + C536 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C329 - C328) * C4721 + (C331 - C330) * C4717 +
              (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                 C10371 +
             (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C4721 + C11147 * C4717 + C11150 * C4722 +
              C11151 * C47336) *
                 C10371 +
             ((C2143 - C2144) * C4721 + (C2145 - C2146) * C4717 +
              (C2147 - C2148) * C4722 + (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C337 - C336) * C4721 + (C339 - C338) * C4717 +
              (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                 C10371 +
             (C11872 * C4721 + C11873 * C4717 + (C1565 - C1566) * C4722 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C47318 +
            ((C11870 * C4721 + C11871 * C4717 + (C1566 - C1565) * C4722 +
              (C1568 - C1567) * C47336) *
                 C10371 +
             ((C11539 - C11538) * C4721 + (C11541 - C11540) * C4717 +
              (C47255 * C1283 - C113 * C1266) * C4722 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C47255 * C478 - C113 * C468) * C4721 +
            (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
            (C512 - C511) * C47336) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C4721 + (C149 - C148) * C4717 +
            (C151 - C150) * C4722 + (C153 - C152) * C47336) *
               C10371 +
           ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
            C534 * C47336) *
               C47369) *
              C47069 * C47051 * C109 +
          ((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
            (C157 - C156) * C47336) *
               C10371 +
           ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
            C756 * C47336) *
               C47369) *
              C47069 * C47051 * C110 +
          ((C168 * C4721 + C169 * C4717 + (C159 - C158) * C4722 +
            (C161 - C160) * C47336) *
               C10371 +
           ((C526 - C525) * C4721 + (C528 - C527) * C4717 +
            (C757 - C758) * C4722 + (C759 - C760) * C47336) *
               C47369) *
              C47069 * C47051 * C111 +
          ((C170 * C4721 + C171 * C4717 + (C163 - C162) * C4722 +
            (C165 - C164) * C47336) *
               C10371 +
           ((C758 - C757) * C4721 + (C760 - C759) * C4717 +
            (C47255 * C751 - C113 * C750) * C4722 +
            (C47255 * C753 - C113 * C752) * C47336) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C47255 * C478 - C113 * C468) * C4721 +
             (C47255 * C498 - C113 * C479) * C4717 + (C510 - C509) * C4722 +
             (C512 - C511) * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C113 * C906 - C47255 * C911) * C4721 +
             (C113 * C912 - C47255 * C921) * C4717 + (C928 - C927) * C4722 +
             (C930 - C929) * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C47255 * C1273 - C113 * C1261) * C4721 +
             (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
             (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            ((C509 - C510) * C4721 + (C511 - C512) * C4717 + C533 * C4722 +
             C534 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            ((C927 - C928) * C4721 + (C929 - C930) * C4717 + C939 * C4722 +
             C940 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C285 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            ((C514 - C513) * C4721 + (C516 - C515) * C4717 + C755 * C4722 +
             C756 * C47336) *
                C47369) *
               C47069 * C47388 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            ((C932 - C931) * C4721 + (C934 - C933) * C4717 +
             (C935 - C936) * C4722 + (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47376 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C4721 +
             (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
             (C148 - C149) * C47336) *
                C10371 +
            ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
             C10670 * C4722 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C4721 +
             (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
             (C330 - C331) * C47336) *
                C10371 +
            ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
             C11146 * C4722 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C4721 +
             (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
             (C338 - C339) * C47336) *
                C10371 +
            ((C47255 * C1273 - C113 * C1261) * C4721 +
             (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
             (C1564 - C1563) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C4721 + (C149 - C148) * C4717 +
             (C151 - C150) * C4722 + (C153 - C152) * C47336) *
                C10371 +
            (C10672 * C4721 + C10673 * C4717 + C533 * C4722 + C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C4721 + (C331 - C330) * C4717 +
             (C333 - C332) * C4722 + (C335 - C334) * C47336) *
                C10371 +
            (C11148 * C4721 + C11149 * C4717 + C939 * C4722 + C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C4721 + (C339 - C338) * C4717 +
             (C341 - C340) * C4722 + (C343 - C342) * C47336) *
                C10371 +
            ((C1561 - C1562) * C4721 + (C1563 - C1564) * C4717 +
             (C1565 - C1566) * C4722 + (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C4721 + C167 * C4717 + (C155 - C154) * C4722 +
             (C157 - C156) * C47336) *
                C10371 +
            (C10682 * C4721 + C10683 * C4717 + C755 * C4722 + C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C4721 + C353 * C4717 + (C345 - C344) * C4722 +
             (C347 - C346) * C47336) *
                C10371 +
            (C11150 * C4721 + C11151 * C4717 + (C935 - C936) * C4722 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C4721 + C355 * C4717 + (C349 - C348) * C4722 +
             (C351 - C350) * C47336) *
                C10371 +
            ((C1566 - C1565) * C4721 + (C1568 - C1567) * C4717 +
             (C47255 * C1557 - C113 * C1556) * C4722 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C4721 +
            (C47255 * C138 - C113 * C125) * C4717 + (C146 - C147) * C4722 +
            (C148 - C149) * C47336) *
               C10371 +
           ((C10666 - C10667) * C4721 + (C10668 - C10669) * C4717 +
            C10670 * C4722 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C4721 +
            (C113 * C298 - C47255 * C317) * C4717 + (C328 - C329) * C4722 +
            (C330 - C331) * C47336) *
               C10371 +
           ((C11142 - C11143) * C4721 + (C11144 - C11145) * C4717 +
            C11146 * C4722 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C4721 +
            (C47255 * C320 - C113 * C304) * C4717 + (C336 - C337) * C4722 +
            (C338 - C339) * C47336) *
               C10371 +
           ((C47255 * C1273 - C113 * C1261) * C4721 +
            (C47255 * C1288 - C113 * C1274) * C4717 + (C1562 - C1561) * C4722 +
            (C1564 - C1563) * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C4721 +
            (C113 * C1131 - C47255 * C1142) * C4717 + (C1403 - C1404) * C4722 +
            (C1405 - C1406) * C47336) *
               C10371 +
           ((C113 * C1666 - C47255 * C1669) * C4721 +
            (C113 * C1670 - C47255 * C1675) * C4717 +
            (C113 * C1667 - C47255 * C1671) * C4722 +
            (C113 * C1672 - C47255 * C1676) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C4721 +
            (C47255 * C1145 - C113 * C1137) * C4717 +
            (C47255 * C1138 - C113 * C1128) * C4722 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C10371 +
           ((C47255 * C6459 - C113 * C6457) * C4721 +
            (C47255 * C6463 - C113 * C6460) * C4717 +
            (C47255 * C6461 - C113 * C6458) * C4722 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47110 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47117 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C2840) *
              C47028 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47110 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47117 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C2840) *
              C47037 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C47110 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C47117 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47318 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47318 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C15923 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C15919 +
             (C16112 - C16113 + C16114 - C16115) * C15924 +
             (C16116 - C16117 + C16118 - C16119) * C47336) *
                C47272 * C47318 +
            ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
              C47367 * C1669) *
                 C15923 +
             (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
              C47367 * C1675) *
                 C15919 +
             (C17506 - C17507 + C17508 - C17509) * C15924 +
             (C17510 - C17511 + C17512 - C17513) * C47336) *
                C47272 * C47156) *
               C2840) *
              C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47318 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47318 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C16113 - C16112 + C16115 - C16114) * C15923 +
             (C16117 - C16116 + C16119 - C16118) * C15919 +
             (C16128 - C16129 + C16130 - C16131) * C15924 +
             (C16132 - C16133 + C16134 - C16135) * C47336) *
                C47272 * C47318 +
            ((C17507 - C17506 + C17509 - C17508) * C15923 +
             (C17511 - C17510 + C17513 - C17512) * C15919 +
             (C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C15924 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47395 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47391 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47381 +
           ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C47069 * C47359) *
              C2580 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47395 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47391 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47381 +
           ((C17305 - C17304 + C17307 - C17306) * C15923 +
            (C17309 - C17308 + C17311 - C17310) * C15919 +
            (C15917 * C1134 - C15921 * C1126 + C47367 * C1140 -
             C15922 * C1129) *
                C15924 +
            (C15917 * C1144 - C15921 * C1135 + C47367 * C1147 -
             C15922 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C2472 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47114) *
              C47394 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C2472 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47114) *
              C47387 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C2472 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C47114) *
              C47374 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C47069 * C2472 +
           ((C16445 - C16444 + C16447 - C16446) * C15923 +
            (C16449 - C16448 + C16451 - C16450) * C15919 +
            (C15917 * C313 - C15921 * C295 + C47367 * C315 - C15922 * C296) *
                C15924 +
            (C15917 * C325 - C15921 * C314 + C47367 * C326 - C15922 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47389 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47378 +
            ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                 C15923 +
             (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                 C15919 +
             (C16290 - C16291 + C16292 - C16293) * C15924 +
             (C16294 - C16295 + C16296 - C16297) * C47336) *
                C47272 * C47352) *
               C2472 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47389 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47378 +
            ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
              C47367 * C1279) *
                 C15923 +
             (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
              C47367 * C1291) *
                 C15919 +
             (C18212 - C18213 + C18214 - C18215) * C15924 +
             (C18216 - C18217 + C18218 - C18219) * C47336) *
                C47272 * C47352) *
               C47114) *
              C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47389 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47378 +
            ((C16291 - C16290 + C16293 - C16292) * C15923 +
             (C16295 - C16294 + C16297 - C16296) * C15919 +
             (C16306 - C16307 + C16308 - C16309) * C15924 +
             (C16310 - C16311 + C16312 - C16313) * C47336) *
                C47272 * C47352) *
               C2472 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47389 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47378 +
            ((C18213 - C18212 + C18215 - C18214) * C15923 +
             (C18217 - C18216 + C18219 - C18218) * C15919 +
             (C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
              C15922 * C1266) *
                 C15924 +
             (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
              C15922 * C1284) *
                 C47336) *
                C47272 * C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47318 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47318 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47028 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47318 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47318 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47037 +
          ((((C15935 - C15934 + C15937 - C15936) * C15923 +
             (C15939 - C15938 + C15941 - C15940) * C15919 +
             (C15942 - C15943 + C15944 - C15945) * C15924 +
             (C15946 - C15947 + C15948 - C15949) * C47336) *
                C47272 * C47318 +
            ((C16299 - C16298 + C16301 - C16300) * C15923 +
             (C16303 - C16302 + C16305 - C16304) * C15919 +
             (C16582 - C16583 + C16584 - C16585) * C15924 +
             (C16586 - C16587 + C16588 - C16589) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C16121 - C16120 + C16123 - C16122) * C15923 +
             (C16125 - C16124 + C16127 - C16126) * C15919 +
             (C16444 - C16445 + C16446 - C16447) * C15924 +
             (C16448 - C16449 + C16450 - C16451) * C47336) *
                C47272 * C47318 +
            ((C16793 - C16792 + C16795 - C16794) * C15923 +
             (C16797 - C16796 + C16799 - C16798) * C15919 +
             (C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C15924 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C2472 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47114) *
              C47394 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C2472 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47114) *
              C47387 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C2472 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C47114) *
              C47374 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C47069 * C2472 +
           ((C16445 - C16444 + C16447 - C16446) * C15923 +
            (C16449 - C16448 + C16451 - C16450) * C15919 +
            (C15917 * C313 - C15921 * C295 + C47367 * C315 - C15922 * C296) *
                C15924 +
            (C15917 * C325 - C15921 * C314 + C47367 * C326 - C15922 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47395 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47391 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47381 +
           ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C47069 * C47359) *
              C2580 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47395 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47391 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47381 +
           ((C17305 - C17304 + C17307 - C17306) * C15923 +
            (C17309 - C17308 + C17311 - C17310) * C15919 +
            (C15917 * C1134 - C15921 * C1126 + C47367 * C1140 -
             C15922 * C1129) *
                C15924 +
            (C15917 * C1144 - C15921 * C1135 + C47367 * C1147 -
             C15922 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C3234 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C3234 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C15923 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C15919 +
             (C16112 - C16113 + C16114 - C16115) * C15924 +
             (C16116 - C16117 + C16118 - C16119) * C47336) *
                C47272 * C3234 +
            ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
              C47367 * C1669) *
                 C15923 +
             (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
              C47367 * C1675) *
                 C15919 +
             (C17506 - C17507 + C17508 - C17509) * C15924 +
             (C17510 - C17511 + C17512 - C17513) * C47336) *
                C47272 * C47156) *
               C2840) *
              C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C3234 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C47110 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C3234 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47117 +
           (((C16113 - C16112 + C16115 - C16114) * C15923 +
             (C16117 - C16116 + C16119 - C16118) * C15919 +
             (C16128 - C16129 + C16130 - C16131) * C15924 +
             (C16132 - C16133 + C16134 - C16135) * C47336) *
                C47272 * C3234 +
            ((C17507 - C17506 + C17509 - C17508) * C15923 +
             (C17511 - C17510 + C17513 - C17512) * C15919 +
             (C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C15924 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47152 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47159 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C3742) *
              C47110 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47152 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47159 +
           ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
             C47367 * C1279) *
                C15923 +
            (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
             C47367 * C1291) *
                C15919 +
            (C18212 - C18213 + C18214 - C18215) * C15924 +
            (C18216 - C18217 + C18218 - C18219) * C47336) *
               C47272 * C3742) *
              C47117 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47152 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C17506 - C17507 + C17508 - C17509) * C15924 +
            (C17510 - C17511 + C17512 - C17513) * C47336) *
               C47272 * C47159 +
           ((C15917 * C1279 - C15921 * C1264 + C47367 * C5981 -
             C15922 * C5979) *
                C15923 +
            (C15917 * C1291 - C15921 * C1280 + C47367 * C5985 -
             C15922 * C5982) *
                C15919 +
            (C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
             C15922 * C5980) *
                C15924 +
            (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
             C15922 * C5984) *
                C47336) *
               C47272 * C3742) *
              C2840) *
         C47023) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C3234 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C47395 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C3234 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47156) *
              C47391 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C3234 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C17506 - C17507 + C17508 - C17509) * C15924 +
            (C17510 - C17511 + C17512 - C17513) * C47336) *
               C47272 * C47156) *
              C47381 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C3234 +
           ((C15917 * C1669 - C15921 * C1666 + C47367 * C6459 -
             C15922 * C6457) *
                C15923 +
            (C15917 * C1675 - C15921 * C1670 + C47367 * C6463 -
             C15922 * C6460) *
                C15919 +
            (C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
             C15922 * C6458) *
                C15924 +
            (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
             C15922 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C3234 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C3234 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C3234 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C3234 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C15923 +
             (C15939 - C15938 + C15941 - C15940) * C15919 +
             (C15942 - C15943 + C15944 - C15945) * C15924 +
             (C15946 - C15947 + C15948 - C15949) * C47336) *
                C47272 * C3234 +
            ((C16299 - C16298 + C16301 - C16300) * C15923 +
             (C16303 - C16302 + C16305 - C16304) * C15919 +
             (C16582 - C16583 + C16584 - C16585) * C15924 +
             (C16586 - C16587 + C16588 - C16589) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C16121 - C16120 + C16123 - C16122) * C15923 +
             (C16125 - C16124 + C16127 - C16126) * C15919 +
             (C16444 - C16445 + C16446 - C16447) * C15924 +
             (C16448 - C16449 + C16450 - C16451) * C47336) *
                C47272 * C3234 +
            ((C16793 - C16792 + C16795 - C16794) * C15923 +
             (C16797 - C16796 + C16799 - C16798) * C15919 +
             (C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C15924 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47396 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47393 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47384 +
           ((C15921 * C1968 - C15917 * C1974 + C15922 * C2362 -
             C47367 * C2365) *
                C15923 +
            (C15921 * C1975 - C15917 * C1986 + C15922 * C2366 -
             C47367 * C2371) *
                C15919 +
            (C18350 - C18351 + C18352 - C18353) * C15924 +
            (C18354 - C18355 + C18356 - C18357) * C47336) *
               C47272 * C47365) *
              C2472 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47396 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47393 +
           ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
             C47367 * C1279) *
                C15923 +
            (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
             C47367 * C1291) *
                C15919 +
            (C18212 - C18213 + C18214 - C18215) * C15924 +
            (C18216 - C18217 + C18218 - C18219) * C47336) *
               C47272 * C47384 +
           ((C15917 * C2365 - C15921 * C2362 + C47367 * C7319 -
             C15922 * C7317) *
                C15923 +
            (C15917 * C2371 - C15921 * C2366 + C47367 * C7323 -
             C15922 * C7320) *
                C15919 +
            (C15917 * C2367 - C15921 * C2363 + C47367 * C7321 -
             C15922 * C7318) *
                C15924 +
            (C15917 * C2372 - C15921 * C2368 + C47367 * C7324 -
             C15922 * C7322) *
                C47336) *
               C47272 * C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47152 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47159 +
            ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                 C15923 +
             (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                 C15919 +
             (C16290 - C16291 + C16292 - C16293) * C15924 +
             (C16294 - C16295 + C16296 - C16297) * C47336) *
                C47272 * C3742) *
               C2472 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47152 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47159 +
            ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
              C47367 * C1279) *
                 C15923 +
             (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
              C47367 * C1291) *
                 C15919 +
             (C18212 - C18213 + C18214 - C18215) * C15924 +
             (C18216 - C18217 + C18218 - C18219) * C47336) *
                C47272 * C3742) *
               C47114) *
              C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47152 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47159 +
            ((C16291 - C16290 + C16293 - C16292) * C15923 +
             (C16295 - C16294 + C16297 - C16296) * C15919 +
             (C16306 - C16307 + C16308 - C16309) * C15924 +
             (C16310 - C16311 + C16312 - C16313) * C47336) *
                C47272 * C3742) *
               C2472 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47152 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47159 +
            ((C18213 - C18212 + C18215 - C18214) * C15923 +
             (C18217 - C18216 + C18219 - C18218) * C15919 +
             (C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
              C15922 * C1266) *
                 C15924 +
             (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
              C15922 * C1284) *
                 C47336) *
                C47272 * C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C3234 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C3234 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C3234 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C3234 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C15923 +
             (C15939 - C15938 + C15941 - C15940) * C15919 +
             (C15942 - C15943 + C15944 - C15945) * C15924 +
             (C15946 - C15947 + C15948 - C15949) * C47336) *
                C47272 * C3234 +
            ((C16299 - C16298 + C16301 - C16300) * C15923 +
             (C16303 - C16302 + C16305 - C16304) * C15919 +
             (C16582 - C16583 + C16584 - C16585) * C15924 +
             (C16586 - C16587 + C16588 - C16589) * C47336) *
                C47272 * C47156) *
               C2472 +
           (((C16121 - C16120 + C16123 - C16122) * C15923 +
             (C16125 - C16124 + C16127 - C16126) * C15919 +
             (C16444 - C16445 + C16446 - C16447) * C15924 +
             (C16448 - C16449 + C16450 - C16451) * C47336) *
                C47272 * C3234 +
            ((C16793 - C16792 + C16795 - C16794) * C15923 +
             (C16797 - C16796 + C16799 - C16798) * C15919 +
             (C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C15924 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C3234 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C47395 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C3234 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47156) *
              C47391 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C3234 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C17506 - C17507 + C17508 - C17509) * C15924 +
            (C17510 - C17511 + C17512 - C17513) * C47336) *
               C47272 * C47156) *
              C47381 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C3234 +
           ((C15917 * C1669 - C15921 * C1666 + C47367 * C6459 -
             C15922 * C6457) *
                C15923 +
            (C15917 * C1675 - C15921 * C1670 + C47367 * C6463 -
             C15922 * C6460) *
                C15919 +
            (C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
             C15922 * C6458) *
                C15924 +
            (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
             C15922 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C1392 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C1393 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C1394 +
           ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C47069 * C47359) *
              C47303 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C1392 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C1393 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C1394 +
           ((C17305 - C17304 + C17307 - C17306) * C15923 +
            (C17309 - C17308 + C17311 - C17310) * C15919 +
            (C15917 * C1134 - C15921 * C1126 + C47367 * C1140 -
             C15922 * C1129) *
                C15924 +
            (C15917 * C1144 - C15921 * C1135 + C47367 * C1147 -
             C15922 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47317 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47114) *
              C636 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47317 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47114) *
              C637 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C47317 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C47114) *
              C638 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C47069 * C47317 +
           ((C16445 - C16444 + C16447 - C16446) * C15923 +
            (C16449 - C16448 + C16451 - C16450) * C15919 +
            (C15917 * C313 - C15921 * C295 + C47367 * C315 - C15922 * C296) *
                C15924 +
            (C15917 * C325 - C15921 * C314 + C47367 * C326 - C15922 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C1788 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C1789 +
            ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                 C15923 +
             (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                 C15919 +
             (C16290 - C16291 + C16292 - C16293) * C15924 +
             (C16294 - C16295 + C16296 - C16297) * C47336) *
                C47272 * C47352) *
               C47317 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C1788 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C1789 +
            ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
              C47367 * C1279) *
                 C15923 +
             (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
              C47367 * C1291) *
                 C15919 +
             (C18212 - C18213 + C18214 - C18215) * C15924 +
             (C18216 - C18217 + C18218 - C18219) * C47336) *
                C47272 * C47352) *
               C47114) *
              C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C1788 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C1789 +
            ((C16291 - C16290 + C16293 - C16292) * C15923 +
             (C16295 - C16294 + C16297 - C16296) * C15919 +
             (C16306 - C16307 + C16308 - C16309) * C15924 +
             (C16310 - C16311 + C16312 - C16313) * C47336) *
                C47272 * C47352) *
               C47317 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C1788 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C1789 +
            ((C18213 - C18212 + C18215 - C18214) * C15923 +
             (C18217 - C18216 + C18219 - C18218) * C15919 +
             (C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
              C15922 * C1266) *
                 C15924 +
             (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
              C15922 * C1284) *
                 C47336) *
                C47272 * C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47318 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C1392 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47318 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47156) *
              C1393 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47318 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C17506 - C17507 + C17508 - C17509) * C15924 +
            (C17510 - C17511 + C17512 - C17513) * C47336) *
               C47272 * C47156) *
              C1394 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C47318 +
           ((C15917 * C1669 - C15921 * C1666 + C47367 * C6459 -
             C15922 * C6457) *
                C15923 +
            (C15917 * C1675 - C15921 * C1670 + C47367 * C6463 -
             C15922 * C6460) *
                C15919 +
            (C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
             C15922 * C6458) *
                C15924 +
            (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
             C15922 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47318 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47318 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47114) *
              C284 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47318 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47318 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47114) *
              C285 +
          ((((C15935 - C15934 + C15937 - C15936) * C15923 +
             (C15939 - C15938 + C15941 - C15940) * C15919 +
             (C15942 - C15943 + C15944 - C15945) * C15924 +
             (C15946 - C15947 + C15948 - C15949) * C47336) *
                C47272 * C47318 +
            ((C16299 - C16298 + C16301 - C16300) * C15923 +
             (C16303 - C16302 + C16305 - C16304) * C15919 +
             (C16582 - C16583 + C16584 - C16585) * C15924 +
             (C16586 - C16587 + C16588 - C16589) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C16121 - C16120 + C16123 - C16122) * C15923 +
             (C16125 - C16124 + C16127 - C16126) * C15919 +
             (C16444 - C16445 + C16446 - C16447) * C15924 +
             (C16448 - C16449 + C16450 - C16451) * C47336) *
                C47272 * C47318 +
            ((C16793 - C16792 + C16795 - C16794) * C15923 +
             (C16797 - C16796 + C16799 - C16798) * C15919 +
             (C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C15924 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C2248 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C2249 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C2250 +
           ((C15921 * C1968 - C15917 * C1974 + C15922 * C2362 -
             C47367 * C2365) *
                C15923 +
            (C15921 * C1975 - C15917 * C1986 + C15922 * C2366 -
             C47367 * C2371) *
                C15919 +
            (C18350 - C18351 + C18352 - C18353) * C15924 +
            (C18354 - C18355 + C18356 - C18357) * C47336) *
               C47272 * C47365) *
              C47317 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C2248 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C2249 +
           ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
             C47367 * C1279) *
                C15923 +
            (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
             C47367 * C1291) *
                C15919 +
            (C18212 - C18213 + C18214 - C18215) * C15924 +
            (C18216 - C18217 + C18218 - C18219) * C47336) *
               C47272 * C2250 +
           ((C15917 * C2365 - C15921 * C2362 + C47367 * C7319 -
             C15922 * C7317) *
                C15923 +
            (C15917 * C2371 - C15921 * C2366 + C47367 * C7323 -
             C15922 * C7320) *
                C15919 +
            (C15917 * C2367 - C15921 * C2363 + C47367 * C7321 -
             C15922 * C7318) *
                C15924 +
            (C15917 * C2372 - C15921 * C2368 + C47367 * C7324 -
             C15922 * C7322) *
                C47336) *
               C47272 * C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                   C15923 +
               (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                   C15919 +
               (C15926 - C15927 + C15928 - C15929) * C15924 +
               (C15930 - C15931 + C15932 - C15933) * C47336) *
                  C47272 * C47069 * C47051 * C108 +
              ((C15927 - C15926 + C15929 - C15928) * C15923 +
               (C15931 - C15930 + C15933 - C15932) * C15919 +
               (C15934 - C15935 + C15936 - C15937) * C15924 +
               (C15938 - C15939 + C15940 - C15941) * C47336) *
                  C47272 * C47069 * C47051 * C109 +
              ((C15935 - C15934 + C15937 - C15936) * C15923 +
               (C15939 - C15938 + C15941 - C15940) * C15919 +
               (C15942 - C15943 + C15944 - C15945) * C15924 +
               (C15946 - C15947 + C15948 - C15949) * C47336) *
                  C47272 * C47069 * C47051 * C110 +
              ((C15943 - C15942 + C15945 - C15944) * C15923 +
               (C15947 - C15946 + C15949 - C15948) * C15919 +
               (C15950 - C15951 + C15952 - C15953) * C15924 +
               (C15954 - C15955 + C15956 - C15957) * C47336) *
                  C47272 * C47069 * C47051 * C111 +
              ((C15951 - C15950 + C15953 - C15952) * C15923 +
               (C15955 - C15954 + C15957 - C15956) * C15919 +
               (C15917 * C134 - C15921 * C122 + C47367 * C641 - C15922 * C640) *
                   C15924 +
               (C15917 * C143 - C15921 * C135 + C47367 * C643 - C15922 * C642) *
                   C47336) *
                  C47272 * C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C124 - C15921 * C117 + C47367 * C297 -
                 C15922 * C287) *
                    C15923 +
                (C15917 * C138 - C15921 * C125 + C47367 * C317 -
                 C15922 * C298) *
                    C15919 +
                (C15926 - C15927 + C15928 - C15929) * C15924 +
                (C15930 - C15931 + C15932 - C15933) * C47336) *
                   C47272 * C47069 * C47388 +
               ((C15921 * C287 - C15917 * C297 + C15922 * C290 -
                 C47367 * C303) *
                    C15923 +
                (C15921 * C298 - C15917 * C317 + C15922 * C304 -
                 C47367 * C320) *
                    C15919 +
                (C16104 - C16105 + C16106 - C16107) * C15924 +
                (C16108 - C16109 + C16110 - C16111) * C47336) *
                   C47272 * C47069 * C47376 +
               ((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
                 C15922 * C1124) *
                    C15923 +
                (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
                 C15922 * C1131) *
                    C15919 +
                (C16112 - C16113 + C16114 - C16115) * C15924 +
                (C16116 - C16117 + C16118 - C16119) * C47336) *
                   C47272 * C47069 * C47349) *
                  C284 +
              (((C15927 - C15926 + C15929 - C15928) * C15923 +
                (C15931 - C15930 + C15933 - C15932) * C15919 +
                (C15934 - C15935 + C15936 - C15937) * C15924 +
                (C15938 - C15939 + C15940 - C15941) * C47336) *
                   C47272 * C47069 * C47388 +
               ((C16105 - C16104 + C16107 - C16106) * C15923 +
                (C16109 - C16108 + C16111 - C16110) * C15919 +
                (C16120 - C16121 + C16122 - C16123) * C15924 +
                (C16124 - C16125 + C16126 - C16127) * C47336) *
                   C47272 * C47069 * C47376 +
               ((C16113 - C16112 + C16115 - C16114) * C15923 +
                (C16117 - C16116 + C16119 - C16118) * C15919 +
                (C16128 - C16129 + C16130 - C16131) * C15924 +
                (C16132 - C16133 + C16134 - C16135) * C47336) *
                   C47272 * C47069 * C47349) *
                  C285 +
              (((C15935 - C15934 + C15937 - C15936) * C15923 +
                (C15939 - C15938 + C15941 - C15940) * C15919 +
                (C15942 - C15943 + C15944 - C15945) * C15924 +
                (C15946 - C15947 + C15948 - C15949) * C47336) *
                   C47272 * C47069 * C47388 +
               ((C16121 - C16120 + C16123 - C16122) * C15923 +
                (C16125 - C16124 + C16127 - C16126) * C15919 +
                (C15921 * C293 - C15917 * C309 + C15922 * C294 -
                 C47367 * C311) *
                    C15924 +
                (C15921 * C310 - C15917 * C323 + C15922 * C312 -
                 C47367 * C324) *
                    C47336) *
                   C47272 * C47069 * C47376 +
               ((C16129 - C16128 + C16131 - C16130) * C15923 +
                (C16133 - C16132 + C16135 - C16134) * C15919 +
                (C15917 * C311 - C15921 * C294 + C47367 * C1399 -
                 C15922 * C1398) *
                    C15924 +
                (C15917 * C324 - C15921 * C312 + C47367 * C1401 -
                 C15922 * C1400) *
                    C47336) *
                   C47272 * C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47389 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47378 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C47051 * C284 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47389 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47378 +
           ((C16291 - C16290 + C16293 - C16292) * C15923 +
            (C16295 - C16294 + C16297 - C16296) * C15919 +
            (C16306 - C16307 + C16308 - C16309) * C15924 +
            (C16310 - C16311 + C16312 - C16313) * C47336) *
               C47272 * C47352) *
              C47051 * C285 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47389 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C15921 * C474 - C15917 * C490 + C15922 * C909 - C47367 * C917) *
                C15924 +
            (C15921 * C491 - C15917 * C504 + C15922 * C918 - C47367 * C924) *
                C47336) *
               C47272 * C47378 +
           ((C16307 - C16306 + C16309 - C16308) * C15923 +
            (C16311 - C16310 + C16313 - C16312) * C15919 +
            (C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                C15924 +
            (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C1050 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C1051 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C47069 * C1118 +
          ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
               C15923 +
           (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
               C15919 +
           (C16104 - C16105 + C16106 - C16107) * C15924 +
           (C16108 - C16109 + C16110 - C16111) * C47336) *
              C47272 * C47069 * C1119 +
          ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
               C15923 +
           (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
               C15919 +
           (C16112 - C16113 + C16114 - C16115) * C15924 +
           (C16116 - C16117 + C16118 - C16119) * C47336) *
              C47272 * C47069 * C1120 +
          ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 - C47367 * C1136) *
               C15923 +
           (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 - C47367 * C1145) *
               C15919 +
           (C15921 * C1125 - C15917 * C1132 + C15922 * C1128 - C47367 * C1138) *
               C15924 +
           (C15921 * C1133 - C15917 * C1143 + C15922 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 - C15922 * C5825) *
               C15923 +
           (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 - C15922 * C5828) *
               C15919 +
           (C15917 * C1138 - C15921 * C1128 + C47367 * C5829 - C15922 * C5826) *
               C15924 +
           (C15917 * C1146 - C15921 * C1139 + C47367 * C5832 - C15922 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47389 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47378 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C1050 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47389 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47378 +
           ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
             C47367 * C1279) *
                C15923 +
            (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
             C47367 * C1291) *
                C15919 +
            (C15921 * C1259 - C15917 * C1269 + C15922 * C1265 -
             C47367 * C1281) *
                C15924 +
            (C15921 * C1270 - C15917 * C1286 + C15922 * C1282 -
             C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C1051 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47389 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C15921 * C1262 - C15917 * C1275 + C15922 * C1667 -
             C47367 * C1671) *
                C15924 +
            (C15921 * C1276 - C15917 * C1289 + C15922 * C1672 -
             C47367 * C1676) *
                C47336) *
               C47272 * C47378 +
           ((C15917 * C1279 - C15921 * C1264 + C47367 * C5981 -
             C15922 * C5979) *
                C15923 +
            (C15917 * C1291 - C15921 * C1280 + C47367 * C5985 -
             C15922 * C5982) *
                C15919 +
            (C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
             C15922 * C5980) *
                C15924 +
            (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
             C15922 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C1788 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C1789 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C47051 * C47385 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C1788 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C1789 +
           ((C16291 - C16290 + C16293 - C16292) * C15923 +
            (C16295 - C16294 + C16297 - C16296) * C15919 +
            (C16306 - C16307 + C16308 - C16309) * C15924 +
            (C16310 - C16311 + C16312 - C16313) * C47336) *
               C47272 * C47352) *
              C47051 * C47372 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C1788 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C16582 - C16583 + C16584 - C16585) * C15924 +
            (C16586 - C16587 + C16588 - C16589) * C47336) *
               C47272 * C1789 +
           ((C16307 - C16306 + C16309 - C16308) * C15923 +
            (C16311 - C16310 + C16313 - C16312) * C15919 +
            (C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                C15924 +
            (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C1788 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C1789 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C47388 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C1788 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C1789 +
           ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
             C47367 * C1279) *
                C15923 +
            (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
             C47367 * C1291) *
                C15919 +
            (C15921 * C1259 - C15917 * C1269 + C15922 * C1265 -
             C47367 * C1281) *
                C15924 +
            (C15921 * C1270 - C15917 * C1286 + C15922 * C1282 -
             C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C47376 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C1788 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C17506 - C17507 + C17508 - C17509) * C15924 +
            (C17510 - C17511 + C17512 - C17513) * C47336) *
               C47272 * C1789 +
           ((C15917 * C1279 - C15921 * C1264 + C47367 * C5981 -
             C15922 * C5979) *
                C15923 +
            (C15917 * C1291 - C15921 * C1280 + C47367 * C5985 -
             C15922 * C5982) *
                C15919 +
            (C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
             C15922 * C5980) *
                C15924 +
            (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
             C15922 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C1963 +
          ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
               C15923 +
           (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
               C15919 +
           (C16282 - C16283 + C16284 - C16285) * C15924 +
           (C16286 - C16287 + C16288 - C16289) * C47336) *
              C47272 * C1964 +
          ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
               C15923 +
           (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
               C15919 +
           (C16290 - C16291 + C16292 - C16293) * C15924 +
           (C16294 - C16295 + C16296 - C16297) * C47336) *
              C47272 * C1965 +
          ((C15921 * C1968 - C15917 * C1974 + C15922 * C2362 - C47367 * C2365) *
               C15923 +
           (C15921 * C1975 - C15917 * C1986 + C15922 * C2366 - C47367 * C2371) *
               C15919 +
           (C15921 * C1969 - C15917 * C1976 + C15922 * C2363 - C47367 * C2367) *
               C15924 +
           (C15921 * C1977 - C15917 * C1987 + C15922 * C2368 - C47367 * C2372) *
               C47336) *
              C47272 * C1966 +
          ((C15917 * C1980 - C15921 * C1971 + C47367 * C6841 - C15922 * C6839) *
               C15923 +
           (C15917 * C1989 - C15921 * C1981 + C47367 * C6845 - C15922 * C6842) *
               C15919 +
           (C15917 * C1982 - C15921 * C1972 + C47367 * C6843 - C15922 * C6840) *
               C15924 +
           (C15917 * C1990 - C15921 * C1983 + C47367 * C6846 - C15922 * C6844) *
               C47336) *
              C47272 * C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47318 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47318 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C15923 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C15919 +
             (C16112 - C16113 + C16114 - C16115) * C15924 +
             (C16116 - C16117 + C16118 - C16119) * C47336) *
                C47272 * C47318 +
            ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
              C47367 * C1669) *
                 C15923 +
             (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
              C47367 * C1675) *
                 C15919 +
             (C17506 - C17507 + C17508 - C17509) * C15924 +
             (C17510 - C17511 + C17512 - C17513) * C47336) *
                C47272 * C47156) *
               C47349) *
              C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47318 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47318 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C16113 - C16112 + C16115 - C16114) * C15923 +
             (C16117 - C16116 + C16119 - C16118) * C15919 +
             (C16128 - C16129 + C16130 - C16131) * C15924 +
             (C16132 - C16133 + C16134 - C16135) * C47336) *
                C47272 * C47318 +
            ((C17507 - C17506 + C17509 - C17508) * C15923 +
             (C17511 - C17510 + C17513 - C17512) * C15919 +
             (C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C15924 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47318 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C47051 * C636 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47318 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47156) *
              C47051 * C637 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47318 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C16582 - C16583 + C16584 - C16585) * C15924 +
            (C16586 - C16587 + C16588 - C16589) * C47336) *
               C47272 * C47156) *
              C47051 * C638 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C47318 +
           ((C16583 - C16582 + C16585 - C16584) * C15923 +
            (C16587 - C16586 + C16589 - C16588) * C15919 +
            (C15917 * C494 - C15921 * C476 + C47367 * C919 - C15922 * C910) *
                C15924 +
            (C15917 * C506 - C15921 * C495 + C47367 * C925 - C15922 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C2248 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C2249 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C2250 +
           ((C15921 * C1968 - C15917 * C1974 + C15922 * C2362 -
             C47367 * C2365) *
                C15923 +
            (C15921 * C1975 - C15917 * C1986 + C15922 * C2366 -
             C47367 * C2371) *
                C15919 +
            (C18350 - C18351 + C18352 - C18353) * C15924 +
            (C18354 - C18355 + C18356 - C18357) * C47336) *
               C47272 * C47365) *
              C47051 * C47303 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C2248 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C2249 +
           ((C16291 - C16290 + C16293 - C16292) * C15923 +
            (C16295 - C16294 + C16297 - C16296) * C15919 +
            (C16306 - C16307 + C16308 - C16309) * C15924 +
            (C16310 - C16311 + C16312 - C16313) * C47336) *
               C47272 * C2250 +
           ((C18351 - C18350 + C18353 - C18352) * C15923 +
            (C18355 - C18354 + C18357 - C18356) * C15919 +
            (C15917 * C1978 - C15921 * C1970 + C47367 * C2369 -
             C15922 * C2364) *
                C15924 +
            (C15917 * C1988 - C15921 * C1979 + C47367 * C2373 -
             C15922 * C2370) *
                C47336) *
               C47272 * C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47388 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47376 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47388 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47376 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47349) *
              C285 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C47388 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C15921 * C293 - C15917 * C309 + C15922 * C294 - C47367 * C311) *
                C15924 +
            (C15921 * C310 - C15917 * C323 + C15922 * C312 - C47367 * C324) *
                C47336) *
               C47272 * C47069 * C47376 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C47069 * C47051 * C108 +
          ((C15927 - C15926 + C15929 - C15928) * C15923 +
           (C15931 - C15930 + C15933 - C15932) * C15919 +
           (C15934 - C15935 + C15936 - C15937) * C15924 +
           (C15938 - C15939 + C15940 - C15941) * C47336) *
              C47272 * C47069 * C47051 * C109 +
          ((C15935 - C15934 + C15937 - C15936) * C15923 +
           (C15939 - C15938 + C15941 - C15940) * C15919 +
           (C15942 - C15943 + C15944 - C15945) * C15924 +
           (C15946 - C15947 + C15948 - C15949) * C47336) *
              C47272 * C47069 * C47051 * C110 +
          ((C15943 - C15942 + C15945 - C15944) * C15923 +
           (C15947 - C15946 + C15949 - C15948) * C15919 +
           (C15950 - C15951 + C15952 - C15953) * C15924 +
           (C15954 - C15955 + C15956 - C15957) * C47336) *
              C47272 * C47069 * C47051 * C111 +
          ((C15951 - C15950 + C15953 - C15952) * C15923 +
           (C15955 - C15954 + C15957 - C15956) * C15919 +
           (C15917 * C134 - C15921 * C122 + C47367 * C641 - C15922 * C640) *
               C15924 +
           (C15917 * C143 - C15921 * C135 + C47367 * C643 - C15922 * C642) *
               C47336) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C1050 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C1051 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C47069 * C1118 +
          ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
               C15923 +
           (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
               C15919 +
           (C16104 - C16105 + C16106 - C16107) * C15924 +
           (C16108 - C16109 + C16110 - C16111) * C47336) *
              C47272 * C47069 * C1119 +
          ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
               C15923 +
           (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
               C15919 +
           (C16112 - C16113 + C16114 - C16115) * C15924 +
           (C16116 - C16117 + C16118 - C16119) * C47336) *
              C47272 * C47069 * C1120 +
          ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 - C47367 * C1136) *
               C15923 +
           (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 - C47367 * C1145) *
               C15919 +
           (C15921 * C1125 - C15917 * C1132 + C15922 * C1128 - C47367 * C1138) *
               C15924 +
           (C15921 * C1133 - C15917 * C1143 + C15922 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 - C15922 * C5825) *
               C15923 +
           (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 - C15922 * C5828) *
               C15919 +
           (C15917 * C1138 - C15921 * C1128 + C47367 * C5829 - C15922 * C5826) *
               C15924 +
           (C15917 * C1146 - C15921 * C1139 + C47367 * C5832 - C15922 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C1788 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C1789 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C47051 * C47385 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C1788 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C1789 +
           ((C16291 - C16290 + C16293 - C16292) * C15923 +
            (C16295 - C16294 + C16297 - C16296) * C15919 +
            (C16306 - C16307 + C16308 - C16309) * C15924 +
            (C16310 - C16311 + C16312 - C16313) * C47336) *
               C47272 * C47352) *
              C47051 * C47372 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C1788 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C16582 - C16583 + C16584 - C16585) * C15924 +
            (C16586 - C16587 + C16588 - C16589) * C47336) *
               C47272 * C1789 +
           ((C16307 - C16306 + C16309 - C16308) * C15923 +
            (C16311 - C16310 + C16313 - C16312) * C15919 +
            (C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                C15924 +
            (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C1788 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C1789 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C47388 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C1788 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C1789 +
           ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
             C47367 * C1279) *
                C15923 +
            (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
             C47367 * C1291) *
                C15919 +
            (C15921 * C1259 - C15917 * C1269 + C15922 * C1265 -
             C47367 * C1281) *
                C15924 +
            (C15921 * C1270 - C15917 * C1286 + C15922 * C1282 -
             C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C47376 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C1788 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C17506 - C17507 + C17508 - C17509) * C15924 +
            (C17510 - C17511 + C17512 - C17513) * C47336) *
               C47272 * C1789 +
           ((C15917 * C1279 - C15921 * C1264 + C47367 * C5981 -
             C15922 * C5979) *
                C15923 +
            (C15917 * C1291 - C15921 * C1280 + C47367 * C5985 -
             C15922 * C5982) *
                C15919 +
            (C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
             C15922 * C5980) *
                C15924 +
            (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
             C15922 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C3234 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C3234 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47028 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C3234 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C3234 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47114) *
              C47037 +
          ((((C15935 - C15934 + C15937 - C15936) * C15923 +
             (C15939 - C15938 + C15941 - C15940) * C15919 +
             (C15942 - C15943 + C15944 - C15945) * C15924 +
             (C15946 - C15947 + C15948 - C15949) * C47336) *
                C47272 * C3234 +
            ((C16299 - C16298 + C16301 - C16300) * C15923 +
             (C16303 - C16302 + C16305 - C16304) * C15919 +
             (C16582 - C16583 + C16584 - C16585) * C15924 +
             (C16586 - C16587 + C16588 - C16589) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C16121 - C16120 + C16123 - C16122) * C15923 +
             (C16125 - C16124 + C16127 - C16126) * C15919 +
             (C16444 - C16445 + C16446 - C16447) * C15924 +
             (C16448 - C16449 + C16450 - C16451) * C47336) *
                C47272 * C3234 +
            ((C16793 - C16792 + C16795 - C16794) * C15923 +
             (C16797 - C16796 + C16799 - C16798) * C15919 +
             (C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C15924 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47152 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47159 +
            ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                 C15923 +
             (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                 C15919 +
             (C16290 - C16291 + C16292 - C16293) * C15924 +
             (C16294 - C16295 + C16296 - C16297) * C47336) *
                C47272 * C3742) *
               C47317 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47152 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47159 +
            ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
              C47367 * C1279) *
                 C15923 +
             (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
              C47367 * C1291) *
                 C15919 +
             (C18212 - C18213 + C18214 - C18215) * C15924 +
             (C18216 - C18217 + C18218 - C18219) * C47336) *
                C47272 * C3742) *
               C47114) *
              C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47152 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47159 +
            ((C16291 - C16290 + C16293 - C16292) * C15923 +
             (C16295 - C16294 + C16297 - C16296) * C15919 +
             (C16306 - C16307 + C16308 - C16309) * C15924 +
             (C16310 - C16311 + C16312 - C16313) * C47336) *
                C47272 * C3742) *
               C47317 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47152 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47159 +
            ((C18213 - C18212 + C18215 - C18214) * C15923 +
             (C18217 - C18216 + C18219 - C18218) * C15919 +
             (C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
              C15922 * C1266) *
                 C15924 +
             (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
              C15922 * C1284) *
                 C47336) *
                C47272 * C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C3234 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C3234 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C15923 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C15919 +
             (C16112 - C16113 + C16114 - C16115) * C15924 +
             (C16116 - C16117 + C16118 - C16119) * C47336) *
                C47272 * C3234 +
            ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
              C47367 * C1669) *
                 C15923 +
             (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
              C47367 * C1675) *
                 C15919 +
             (C17506 - C17507 + C17508 - C17509) * C15924 +
             (C17510 - C17511 + C17512 - C17513) * C47336) *
                C47272 * C47156) *
               C47349) *
              C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C3234 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C3234 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C16113 - C16112 + C16115 - C16114) * C15923 +
             (C16117 - C16116 + C16119 - C16118) * C15919 +
             (C16128 - C16129 + C16130 - C16131) * C15924 +
             (C16132 - C16133 + C16134 - C16135) * C47336) *
                C47272 * C3234 +
            ((C17507 - C17506 + C17509 - C17508) * C15923 +
             (C17511 - C17510 + C17513 - C17512) * C15919 +
             (C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C15924 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C3234 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C47051 * C47394 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C3234 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47156) *
              C47051 * C47387 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C3234 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C16582 - C16583 + C16584 - C16585) * C15924 +
            (C16586 - C16587 + C16588 - C16589) * C47336) *
               C47272 * C47156) *
              C47051 * C47374 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C3234 +
           ((C16583 - C16582 + C16585 - C16584) * C15923 +
            (C16587 - C16586 + C16589 - C16588) * C15919 +
            (C15917 * C494 - C15921 * C476 + C47367 * C919 - C15922 * C910) *
                C15924 +
            (C15917 * C506 - C15921 * C495 + C47367 * C925 - C15922 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47396 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47393 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47384 +
           ((C15921 * C1968 - C15917 * C1974 + C15922 * C2362 -
             C47367 * C2365) *
                C15923 +
            (C15921 * C1975 - C15917 * C1986 + C15922 * C2366 -
             C47367 * C2371) *
                C15919 +
            (C18350 - C18351 + C18352 - C18353) * C15924 +
            (C18354 - C18355 + C18356 - C18357) * C47336) *
               C47272 * C47365) *
              C47051 * C2580 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47396 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47393 +
           ((C16291 - C16290 + C16293 - C16292) * C15923 +
            (C16295 - C16294 + C16297 - C16296) * C15919 +
            (C16306 - C16307 + C16308 - C16309) * C15924 +
            (C16310 - C16311 + C16312 - C16313) * C47336) *
               C47272 * C47384 +
           ((C18351 - C18350 + C18353 - C18352) * C15923 +
            (C18355 - C18354 + C18357 - C18356) * C15919 +
            (C15917 * C1978 - C15921 * C1970 + C47367 * C2369 -
             C15922 * C2364) *
                C15924 +
            (C15917 * C1988 - C15921 * C1979 + C47367 * C2373 -
             C15922 * C2370) *
                C47336) *
               C47272 * C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47152 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47159 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C3742) *
              C47051 * C47028 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47152 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47159 +
           ((C16291 - C16290 + C16293 - C16292) * C15923 +
            (C16295 - C16294 + C16297 - C16296) * C15919 +
            (C16306 - C16307 + C16308 - C16309) * C15924 +
            (C16310 - C16311 + C16312 - C16313) * C47336) *
               C47272 * C3742) *
              C47051 * C47037 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47152 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C16582 - C16583 + C16584 - C16585) * C15924 +
            (C16586 - C16587 + C16588 - C16589) * C47336) *
               C47272 * C47159 +
           ((C16307 - C16306 + C16309 - C16308) * C15923 +
            (C16311 - C16310 + C16313 - C16312) * C15919 +
            (C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                C15924 +
            (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                C47336) *
               C47272 * C3742) *
              C47051 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C3234 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C47051 * C47394 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C3234 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47156) *
              C47051 * C47387 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C3234 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C16582 - C16583 + C16584 - C16585) * C15924 +
            (C16586 - C16587 + C16588 - C16589) * C47336) *
               C47272 * C47156) *
              C47051 * C47374 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C3234 +
           ((C16583 - C16582 + C16585 - C16584) * C15923 +
            (C16587 - C16586 + C16589 - C16588) * C15919 +
            (C15917 * C494 - C15921 * C476 + C47367 * C919 - C15922 * C910) *
                C15924 +
            (C15917 * C506 - C15921 * C495 + C47367 * C925 - C15922 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C3234 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C3234 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C15923 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C15919 +
             (C16112 - C16113 + C16114 - C16115) * C15924 +
             (C16116 - C16117 + C16118 - C16119) * C47336) *
                C47272 * C3234 +
            ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
              C47367 * C1669) *
                 C15923 +
             (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
              C47367 * C1675) *
                 C15919 +
             (C17506 - C17507 + C17508 - C17509) * C15924 +
             (C17510 - C17511 + C17512 - C17513) * C47336) *
                C47272 * C47156) *
               C47349) *
              C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C3234 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C47388 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C3234 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47376 +
           (((C16113 - C16112 + C16115 - C16114) * C15923 +
             (C16117 - C16116 + C16119 - C16118) * C15919 +
             (C16128 - C16129 + C16130 - C16131) * C15924 +
             (C16132 - C16133 + C16134 - C16135) * C47336) *
                C47272 * C3234 +
            ((C17507 - C17506 + C17509 - C17508) * C15923 +
             (C17511 - C17510 + C17513 - C17512) * C15919 +
             (C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C15924 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47317 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47114) *
              C636 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47317 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47114) *
              C637 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C47317 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C47114) *
              C638 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C47069 * C47317 +
           ((C16445 - C16444 + C16447 - C16446) * C15923 +
            (C16449 - C16448 + C16451 - C16450) * C15919 +
            (C15917 * C313 - C15921 * C295 + C47367 * C315 - C15922 * C296) *
                C15924 +
            (C15917 * C325 - C15921 * C314 + C47367 * C326 - C15922 * C316) *
                C47336) *
               C47272 * C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C1392 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C1393 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C1394 +
           ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C47069 * C47359) *
              C47303 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C1392 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C1393 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C1394 +
           ((C17305 - C17304 + C17307 - C17306) * C15923 +
            (C17309 - C17308 + C17311 - C17310) * C15919 +
            (C15917 * C1134 - C15921 * C1126 + C47367 * C1140 -
             C15922 * C1129) *
                C15924 +
            (C15917 * C1144 - C15921 * C1135 + C47367 * C1147 -
             C15922 * C1141) *
                C47336) *
               C47272 * C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47318 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47318 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C47114) *
              C284 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47318 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47318 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C47114) *
              C285 +
          ((((C15935 - C15934 + C15937 - C15936) * C15923 +
             (C15939 - C15938 + C15941 - C15940) * C15919 +
             (C15942 - C15943 + C15944 - C15945) * C15924 +
             (C15946 - C15947 + C15948 - C15949) * C47336) *
                C47272 * C47318 +
            ((C16299 - C16298 + C16301 - C16300) * C15923 +
             (C16303 - C16302 + C16305 - C16304) * C15919 +
             (C16582 - C16583 + C16584 - C16585) * C15924 +
             (C16586 - C16587 + C16588 - C16589) * C47336) *
                C47272 * C47156) *
               C47317 +
           (((C16121 - C16120 + C16123 - C16122) * C15923 +
             (C16125 - C16124 + C16127 - C16126) * C15919 +
             (C16444 - C16445 + C16446 - C16447) * C15924 +
             (C16448 - C16449 + C16450 - C16451) * C47336) *
                C47272 * C47318 +
            ((C16793 - C16792 + C16795 - C16794) * C15923 +
             (C16797 - C16796 + C16799 - C16798) * C15919 +
             (C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C15924 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C47336) *
                C47272 * C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47318 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C1392 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47318 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47156) *
              C1393 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47318 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C17506 - C17507 + C17508 - C17509) * C15924 +
            (C17510 - C17511 + C17512 - C17513) * C47336) *
               C47272 * C47156) *
              C1394 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C15923 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C15919 +
            (C17304 - C17305 + C17306 - C17307) * C15924 +
            (C17308 - C17309 + C17310 - C17311) * C47336) *
               C47272 * C47318 +
           ((C15917 * C1669 - C15921 * C1666 + C47367 * C6459 -
             C15922 * C6457) *
                C15923 +
            (C15917 * C1675 - C15921 * C1670 + C47367 * C6463 -
             C15922 * C6460) *
                C15919 +
            (C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
             C15922 * C6458) *
                C15924 +
            (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
             C15922 * C6462) *
                C47336) *
               C47272 * C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47388 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47376 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47388 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47376 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47349) *
              C285 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C47388 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C15921 * C293 - C15917 * C309 + C15922 * C294 - C47367 * C311) *
                C15924 +
            (C15921 * C310 - C15917 * C323 + C15922 * C312 - C47367 * C324) *
                C47336) *
               C47272 * C47069 * C47376 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C47069 * C47051 * C108 +
          ((C15927 - C15926 + C15929 - C15928) * C15923 +
           (C15931 - C15930 + C15933 - C15932) * C15919 +
           (C15934 - C15935 + C15936 - C15937) * C15924 +
           (C15938 - C15939 + C15940 - C15941) * C47336) *
              C47272 * C47069 * C47051 * C109 +
          ((C15935 - C15934 + C15937 - C15936) * C15923 +
           (C15939 - C15938 + C15941 - C15940) * C15919 +
           (C15942 - C15943 + C15944 - C15945) * C15924 +
           (C15946 - C15947 + C15948 - C15949) * C47336) *
              C47272 * C47069 * C47051 * C110 +
          ((C15943 - C15942 + C15945 - C15944) * C15923 +
           (C15947 - C15946 + C15949 - C15948) * C15919 +
           (C15950 - C15951 + C15952 - C15953) * C15924 +
           (C15954 - C15955 + C15956 - C15957) * C47336) *
              C47272 * C47069 * C47051 * C111 +
          ((C15951 - C15950 + C15953 - C15952) * C15923 +
           (C15955 - C15954 + C15957 - C15956) * C15919 +
           (C15917 * C134 - C15921 * C122 + C47367 * C641 - C15922 * C640) *
               C15924 +
           (C15917 * C143 - C15921 * C135 + C47367 * C643 - C15922 * C642) *
               C47336) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47389 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47378 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C47051 * C284 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47389 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47378 +
           ((C16291 - C16290 + C16293 - C16292) * C15923 +
            (C16295 - C16294 + C16297 - C16296) * C15919 +
            (C16306 - C16307 + C16308 - C16309) * C15924 +
            (C16310 - C16311 + C16312 - C16313) * C47336) *
               C47272 * C47352) *
              C47051 * C285 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47389 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C15921 * C474 - C15917 * C490 + C15922 * C909 - C47367 * C917) *
                C15924 +
            (C15921 * C491 - C15917 * C504 + C15922 * C918 - C47367 * C924) *
                C47336) *
               C47272 * C47378 +
           ((C16307 - C16306 + C16309 - C16308) * C15923 +
            (C16311 - C16310 + C16313 - C16312) * C15919 +
            (C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                C15924 +
            (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                C47336) *
               C47272 * C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C1050 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C1051 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C47069 * C1118 +
          ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
               C15923 +
           (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
               C15919 +
           (C16104 - C16105 + C16106 - C16107) * C15924 +
           (C16108 - C16109 + C16110 - C16111) * C47336) *
              C47272 * C47069 * C1119 +
          ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
               C15923 +
           (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
               C15919 +
           (C16112 - C16113 + C16114 - C16115) * C15924 +
           (C16116 - C16117 + C16118 - C16119) * C47336) *
              C47272 * C47069 * C1120 +
          ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 - C47367 * C1136) *
               C15923 +
           (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 - C47367 * C1145) *
               C15919 +
           (C15921 * C1125 - C15917 * C1132 + C15922 * C1128 - C47367 * C1138) *
               C15924 +
           (C15921 * C1133 - C15917 * C1143 + C15922 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 - C15922 * C5825) *
               C15923 +
           (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 - C15922 * C5828) *
               C15919 +
           (C15917 * C1138 - C15921 * C1128 + C47367 * C5829 - C15922 * C5826) *
               C15924 +
           (C15917 * C1146 - C15921 * C1139 + C47367 * C5832 - C15922 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47389 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47378 +
           ((C15917 * C484 - C15921 * C471 + C47367 * C1267 - C15922 * C1258) *
                C15923 +
            (C15917 * C501 - C15921 * C485 + C47367 * C1285 - C15922 * C1268) *
                C15919 +
            (C16290 - C16291 + C16292 - C16293) * C15924 +
            (C16294 - C16295 + C16296 - C16297) * C47336) *
               C47272 * C47352) *
              C1050 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47389 +
           ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                C15923 +
            (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                C15919 +
            (C16784 - C16785 + C16786 - C16787) * C15924 +
            (C16788 - C16789 + C16790 - C16791) * C47336) *
               C47272 * C47378 +
           ((C15921 * C1258 - C15917 * C1267 + C15922 * C1264 -
             C47367 * C1279) *
                C15923 +
            (C15921 * C1268 - C15917 * C1285 + C15922 * C1280 -
             C47367 * C1291) *
                C15919 +
            (C15921 * C1259 - C15917 * C1269 + C15922 * C1265 -
             C47367 * C1281) *
                C15924 +
            (C15921 * C1270 - C15917 * C1286 + C15922 * C1282 -
             C47367 * C1292) *
                C47336) *
               C47272 * C47352) *
              C1051 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47389 +
           ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
             C47367 * C1669) *
                C15923 +
            (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
             C47367 * C1675) *
                C15919 +
            (C15921 * C1262 - C15917 * C1275 + C15922 * C1667 -
             C47367 * C1671) *
                C15924 +
            (C15921 * C1276 - C15917 * C1289 + C15922 * C1672 -
             C47367 * C1676) *
                C47336) *
               C47272 * C47378 +
           ((C15917 * C1279 - C15921 * C1264 + C47367 * C5981 -
             C15922 * C5979) *
                C15923 +
            (C15917 * C1291 - C15921 * C1280 + C47367 * C5985 -
             C15922 * C5982) *
                C15919 +
            (C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
             C15922 * C5980) *
                C15924 +
            (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
             C15922 * C5984) *
                C47336) *
               C47272 * C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47318 +
           ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                C15923 +
            (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                C15919 +
            (C16282 - C16283 + C16284 - C16285) * C15924 +
            (C16286 - C16287 + C16288 - C16289) * C47336) *
               C47272 * C47156) *
              C47051 * C636 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47318 +
           ((C16283 - C16282 + C16285 - C16284) * C15923 +
            (C16287 - C16286 + C16289 - C16288) * C15919 +
            (C16298 - C16299 + C16300 - C16301) * C15924 +
            (C16302 - C16303 + C16304 - C16305) * C47336) *
               C47272 * C47156) *
              C47051 * C637 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47318 +
           ((C16299 - C16298 + C16301 - C16300) * C15923 +
            (C16303 - C16302 + C16305 - C16304) * C15919 +
            (C16582 - C16583 + C16584 - C16585) * C15924 +
            (C16586 - C16587 + C16588 - C16589) * C47336) *
               C47272 * C47156) *
              C47051 * C638 +
          (((C15943 - C15942 + C15945 - C15944) * C15923 +
            (C15947 - C15946 + C15949 - C15948) * C15919 +
            (C15950 - C15951 + C15952 - C15953) * C15924 +
            (C15954 - C15955 + C15956 - C15957) * C47336) *
               C47272 * C47318 +
           ((C16583 - C16582 + C16585 - C16584) * C15923 +
            (C16587 - C16586 + C16589 - C16588) * C15919 +
            (C15917 * C494 - C15921 * C476 + C47367 * C919 - C15922 * C910) *
                C15924 +
            (C15917 * C506 - C15921 * C495 + C47367 * C925 - C15922 * C920) *
                C47336) *
               C47272 * C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C15923 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C15919 +
             (C15926 - C15927 + C15928 - C15929) * C15924 +
             (C15930 - C15931 + C15932 - C15933) * C47336) *
                C47272 * C47318 +
            ((C15921 * C468 - C15917 * C478 + C15922 * C906 - C47367 * C911) *
                 C15923 +
             (C15921 * C479 - C15917 * C498 + C15922 * C912 - C47367 * C921) *
                 C15919 +
             (C16282 - C16283 + C16284 - C16285) * C15924 +
             (C16286 - C16287 + C16288 - C16289) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C15923 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C15919 +
             (C16104 - C16105 + C16106 - C16107) * C15924 +
             (C16108 - C16109 + C16110 - C16111) * C47336) *
                C47272 * C47318 +
            ((C15917 * C911 - C15921 * C906 + C47367 * C1273 - C15922 * C1261) *
                 C15923 +
             (C15917 * C921 - C15921 * C912 + C47367 * C1288 - C15922 * C1274) *
                 C15919 +
             (C16784 - C16785 + C16786 - C16787) * C15924 +
             (C16788 - C16789 + C16790 - C16791) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C15923 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C15919 +
             (C16112 - C16113 + C16114 - C16115) * C15924 +
             (C16116 - C16117 + C16118 - C16119) * C47336) *
                C47272 * C47318 +
            ((C15921 * C1261 - C15917 * C1273 + C15922 * C1666 -
              C47367 * C1669) *
                 C15923 +
             (C15921 * C1274 - C15917 * C1288 + C15922 * C1670 -
              C47367 * C1675) *
                 C15919 +
             (C17506 - C17507 + C17508 - C17509) * C15924 +
             (C17510 - C17511 + C17512 - C17513) * C47336) *
                C47272 * C47156) *
               C47349) *
              C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C15923 +
             (C15931 - C15930 + C15933 - C15932) * C15919 +
             (C15934 - C15935 + C15936 - C15937) * C15924 +
             (C15938 - C15939 + C15940 - C15941) * C47336) *
                C47272 * C47318 +
            ((C16283 - C16282 + C16285 - C16284) * C15923 +
             (C16287 - C16286 + C16289 - C16288) * C15919 +
             (C16298 - C16299 + C16300 - C16301) * C15924 +
             (C16302 - C16303 + C16304 - C16305) * C47336) *
                C47272 * C47156) *
               C1050 +
           (((C16105 - C16104 + C16107 - C16106) * C15923 +
             (C16109 - C16108 + C16111 - C16110) * C15919 +
             (C16120 - C16121 + C16122 - C16123) * C15924 +
             (C16124 - C16125 + C16126 - C16127) * C47336) *
                C47272 * C47318 +
            ((C16785 - C16784 + C16787 - C16786) * C15923 +
             (C16789 - C16788 + C16791 - C16790) * C15919 +
             (C16792 - C16793 + C16794 - C16795) * C15924 +
             (C16796 - C16797 + C16798 - C16799) * C47336) *
                C47272 * C47156) *
               C1051 +
           (((C16113 - C16112 + C16115 - C16114) * C15923 +
             (C16117 - C16116 + C16119 - C16118) * C15919 +
             (C16128 - C16129 + C16130 - C16131) * C15924 +
             (C16132 - C16133 + C16134 - C16135) * C47336) *
                C47272 * C47318 +
            ((C17507 - C17506 + C17509 - C17508) * C15923 +
             (C17511 - C17510 + C17513 - C17512) * C15919 +
             (C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C15924 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C47336) *
                C47272 * C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C47069 * C47051 * C108 +
          ((C15927 - C15926 + C15929 - C15928) * C15923 +
           (C15931 - C15930 + C15933 - C15932) * C15919 +
           (C15934 - C15935 + C15936 - C15937) * C15924 +
           (C15938 - C15939 + C15940 - C15941) * C47336) *
              C47272 * C47069 * C47051 * C109 +
          ((C15935 - C15934 + C15937 - C15936) * C15923 +
           (C15939 - C15938 + C15941 - C15940) * C15919 +
           (C15942 - C15943 + C15944 - C15945) * C15924 +
           (C15946 - C15947 + C15948 - C15949) * C47336) *
              C47272 * C47069 * C47051 * C110 +
          ((C15943 - C15942 + C15945 - C15944) * C15923 +
           (C15947 - C15946 + C15949 - C15948) * C15919 +
           (C15950 - C15951 + C15952 - C15953) * C15924 +
           (C15954 - C15955 + C15956 - C15957) * C47336) *
              C47272 * C47069 * C47051 * C111 +
          ((C15951 - C15950 + C15953 - C15952) * C15923 +
           (C15955 - C15954 + C15957 - C15956) * C15919 +
           (C15917 * C134 - C15921 * C122 + C47367 * C641 - C15922 * C640) *
               C15924 +
           (C15917 * C143 - C15921 * C135 + C47367 * C643 - C15922 * C642) *
               C47336) *
              C47272 * C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C47388 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C47376 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47349) *
              C284 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C47388 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C47376 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47349) *
              C285 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C47388 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C15921 * C293 - C15917 * C309 + C15922 * C294 - C47367 * C311) *
                C15924 +
            (C15921 * C310 - C15917 * C323 + C15922 * C312 - C47367 * C324) *
                C47336) *
               C47272 * C47069 * C47376 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C15923 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C15919 +
            (C15926 - C15927 + C15928 - C15929) * C15924 +
            (C15930 - C15931 + C15932 - C15933) * C47336) *
               C47272 * C47069 * C1050 +
           ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C15923 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C15919 +
            (C16104 - C16105 + C16106 - C16107) * C15924 +
            (C16108 - C16109 + C16110 - C16111) * C47336) *
               C47272 * C47069 * C1051 +
           ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C15923 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C15919 +
            (C16112 - C16113 + C16114 - C16115) * C15924 +
            (C16116 - C16117 + C16118 - C16119) * C47336) *
               C47272 * C47069 * C47349) *
              C47385 +
          (((C15927 - C15926 + C15929 - C15928) * C15923 +
            (C15931 - C15930 + C15933 - C15932) * C15919 +
            (C15934 - C15935 + C15936 - C15937) * C15924 +
            (C15938 - C15939 + C15940 - C15941) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16105 - C16104 + C16107 - C16106) * C15923 +
            (C16109 - C16108 + C16111 - C16110) * C15919 +
            (C16120 - C16121 + C16122 - C16123) * C15924 +
            (C16124 - C16125 + C16126 - C16127) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16113 - C16112 + C16115 - C16114) * C15923 +
            (C16117 - C16116 + C16119 - C16118) * C15919 +
            (C16128 - C16129 + C16130 - C16131) * C15924 +
            (C16132 - C16133 + C16134 - C16135) * C47336) *
               C47272 * C47069 * C47349) *
              C47372 +
          (((C15935 - C15934 + C15937 - C15936) * C15923 +
            (C15939 - C15938 + C15941 - C15940) * C15919 +
            (C15942 - C15943 + C15944 - C15945) * C15924 +
            (C15946 - C15947 + C15948 - C15949) * C47336) *
               C47272 * C47069 * C1050 +
           ((C16121 - C16120 + C16123 - C16122) * C15923 +
            (C16125 - C16124 + C16127 - C16126) * C15919 +
            (C16444 - C16445 + C16446 - C16447) * C15924 +
            (C16448 - C16449 + C16450 - C16451) * C47336) *
               C47272 * C47069 * C1051 +
           ((C16129 - C16128 + C16131 - C16130) * C15923 +
            (C16133 - C16132 + C16135 - C16134) * C15919 +
            (C15917 * C311 - C15921 * C294 + C47367 * C1399 - C15922 * C1398) *
                C15924 +
            (C15917 * C324 - C15921 * C312 + C47367 * C1401 - C15922 * C1400) *
                C47336) *
               C47272 * C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
               C15923 +
           (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
               C15919 +
           (C15926 - C15927 + C15928 - C15929) * C15924 +
           (C15930 - C15931 + C15932 - C15933) * C47336) *
              C47272 * C47069 * C1118 +
          ((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
               C15923 +
           (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
               C15919 +
           (C16104 - C16105 + C16106 - C16107) * C15924 +
           (C16108 - C16109 + C16110 - C16111) * C47336) *
              C47272 * C47069 * C1119 +
          ((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
               C15923 +
           (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
               C15919 +
           (C16112 - C16113 + C16114 - C16115) * C15924 +
           (C16116 - C16117 + C16118 - C16119) * C47336) *
              C47272 * C47069 * C1120 +
          ((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 - C47367 * C1136) *
               C15923 +
           (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 - C47367 * C1145) *
               C15919 +
           (C15921 * C1125 - C15917 * C1132 + C15922 * C1128 - C47367 * C1138) *
               C15924 +
           (C15921 * C1133 - C15917 * C1143 + C15922 * C1139 - C47367 * C1146) *
               C47336) *
              C47272 * C47069 * C1121 +
          ((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 - C15922 * C5825) *
               C15923 +
           (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 - C15922 * C5828) *
               C15919 +
           (C15917 * C1138 - C15921 * C1128 + C47367 * C5829 - C15922 * C5826) *
               C15924 +
           (C15917 * C1146 - C15921 * C1139 + C47367 * C5832 - C15922 * C5830) *
               C47336) *
              C47272 * C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47110 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47117 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C2840) *
                       C47028 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47110 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47117 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C2840) *
                       C47037 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C47110 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47117 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C2840) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C47110 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47117 +
                    (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                       C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                          C21520 +
                      (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                       C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                       C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                          C21520 +
                      (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                       C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                          C46998) *
                         C47272 * C47156) *
                        C2840) *
                       C2580 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C47110 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47117 +
                    (((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                       C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                          C21520 +
                      (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                       C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C1275 - C21517 * C1262 + C21514 * C1671 -
                       C21518 * C1667 + C21515 * C6461 - C21519 * C6458) *
                          C21520 +
                      (C21513 * C1289 - C21517 * C1276 + C21514 * C1676 -
                       C21518 * C1672 + C21515 * C6464 - C21519 * C6462) *
                          C46998) *
                         C47272 * C47156) *
                        C2840) *
                       C47034)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47395 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47391 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47381 +
                    ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C2580 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47395 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47391 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47381 +
                    ((C21513 * C1132 - C21517 * C1125 + C21514 * C1138 -
                      C21518 * C1128 + C21515 * C5829 - C21519 * C5826) *
                         C21520 +
                     (C21513 * C1143 - C21517 * C1133 + C21514 * C1146 -
                      C21518 * C1139 + C21515 * C5832 - C21519 * C5830) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C47034)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47394 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47387 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47374 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21513 * C309 - C21517 * C293 + C21514 * C311 -
                      C21518 * C294 + C21515 * C1399 - C21519 * C1398) *
                         C21520 +
                     (C21513 * C323 - C21517 * C310 + C21514 * C324 -
                      C21518 * C312 + C21515 * C1401 - C21519 * C1400) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47353)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47389 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47378 +
                     ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                       C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                          C21520 +
                      (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                       C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                          C46998) *
                         C47272 * C47352) *
                        C2472 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47389 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47378 +
                     ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                       C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                          C21520 +
                      (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                       C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                          C46998) *
                         C47272 * C47352) *
                        C47114) *
                       C2580 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47389 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47378 +
                     ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                       C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                          C21520 +
                      (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                       C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                          C46998) *
                         C47272 * C47352) *
                        C2472 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47389 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47378 +
                     ((C21513 * C1269 - C21517 * C1259 + C21514 * C1281 -
                       C21518 * C1265 + C21515 * C5983 - C21519 * C5980) *
                          C21520 +
                      (C21513 * C1286 - C21517 * C1270 + C21514 * C1292 -
                       C21518 * C1282 + C21515 * C5986 - C21519 * C5984) *
                          C46998) *
                         C47272 * C47352) *
                        C47114) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47028 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47037 +
                   ((((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                       C21518 * C289 + C21515 * C307 - C21519 * C292) *
                          C21520 +
                      (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                       C21518 * C302 + C21515 * C322 - C21519 * C308) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                       C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                          C21520 +
                      (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                       C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                       C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                          C21520 +
                      (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                       C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C915 - C21517 * C908 + C21514 * C1277 -
                       C21518 * C1263 + C21515 * C1673 - C21519 * C1668) *
                          C21520 +
                      (C21513 * C923 - C21517 * C916 + C21514 * C1290 -
                       C21518 * C1278 + C21515 * C1677 - C21519 * C1674) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47394 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47387 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47374 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C47069 * C2472 +
                    ((C21513 * C309 - C21517 * C293 + C21514 * C311 -
                      C21518 * C294 + C21515 * C1399 - C21519 * C1398) *
                         C21520 +
                     (C21513 * C323 - C21517 * C310 + C21514 * C324 -
                      C21518 * C312 + C21515 * C1401 - C21519 * C1400) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47353)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47395 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47391 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47381 +
                    ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C2580 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47395 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47391 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47381 +
                    ((C21513 * C1132 - C21517 * C1125 + C21514 * C1138 -
                      C21518 * C1128 + C21515 * C5829 - C21519 * C5826) *
                         C21520 +
                     (C21513 * C1143 - C21517 * C1133 + C21514 * C1146 -
                      C21518 * C1139 + C21515 * C5832 - C21519 * C5830) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C47110 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47117 +
                    (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                       C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                          C21520 +
                      (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                       C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                       C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                          C21520 +
                      (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                       C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                          C46998) *
                         C47272 * C47156) *
                        C2840) *
                       C47303 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C47110 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47117 +
                    (((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                       C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                          C21520 +
                      (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                       C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C1275 - C21517 * C1262 + C21514 * C1671 -
                       C21518 * C1667 + C21515 * C6461 - C21519 * C6458) *
                          C21520 +
                      (C21513 * C1289 - C21517 * C1276 + C21514 * C1676 -
                       C21518 * C1672 + C21515 * C6464 - C21519 * C6462) *
                          C46998) *
                         C47272 * C47156) *
                        C2840) *
                       C47034)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47152 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47159 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C3742) *
                       C47110 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47152 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47159 +
                    ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                      C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                         C21520 +
                     (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                      C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                         C46998) *
                        C47272 * C3742) *
                       C47117 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47152 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C47159 +
                    ((C21513 * C1279 - C21517 * C1264 + C21514 * C5981 -
                      C21518 * C5979 + C21515 * C22370 - C21519 * C22369) *
                         C21520 +
                     (C21513 * C1291 - C21517 * C1280 + C21514 * C5985 -
                      C21518 * C5982 + C21515 * C22372 - C21519 * C22371) *
                         C46998) *
                        C47272 * C3742) *
                       C2840) *
                  C47023) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C47395 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47156) *
                       C47391 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C47156) *
                       C47381 +
                   (((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C1669 - C21517 * C1666 + C21514 * C6459 -
                      C21518 * C6457 + C21515 * C22716 - C21519 * C22715) *
                         C21520 +
                     (C21513 * C1675 - C21517 * C1670 + C21514 * C6463 -
                      C21518 * C6460 + C21515 * C22718 - C21519 * C22717) *
                         C46998) *
                        C47272 * C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47385 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47372 +
                   ((((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                       C21518 * C289 + C21515 * C307 - C21519 * C292) *
                          C21520 +
                      (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                       C21518 * C302 + C21515 * C322 - C21519 * C308) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                       C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                          C21520 +
                      (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                       C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                       C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                          C21520 +
                      (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                       C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C915 - C21517 * C908 + C21514 * C1277 -
                       C21518 * C1263 + C21515 * C1673 - C21519 * C1668) *
                          C21520 +
                      (C21513 * C923 - C21517 * C916 + C21514 * C1290 -
                       C21518 * C1278 + C21515 * C1677 - C21519 * C1674) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47396 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47393 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47384 +
                    ((C21517 * C1968 - C21513 * C1974 + C21518 * C2362 -
                      C21514 * C2365 + C21519 * C7317 - C21515 * C7319) *
                         C21520 +
                     (C21517 * C1975 - C21513 * C1986 + C21518 * C2366 -
                      C21514 * C2371 + C21519 * C7320 - C21515 * C7323) *
                         C46998) *
                        C47272 * C47365) *
                       C2472 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47396 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47393 +
                    ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                      C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                         C21520 +
                     (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                      C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                         C46998) *
                        C47272 * C47384 +
                    ((C21513 * C2365 - C21517 * C2362 + C21514 * C7319 -
                      C21518 * C7317 + C21515 * C23348 - C21519 * C23347) *
                         C21520 +
                     (C21513 * C2371 - C21517 * C2366 + C21514 * C7323 -
                      C21518 * C7320 + C21515 * C23350 - C21519 * C23349) *
                         C46998) *
                        C47272 * C47365) *
                       C47114) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                       C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                          C21520 +
                      (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                       C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                          C46998) *
                         C47272 * C3742) *
                        C2472 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                       C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                          C21520 +
                      (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                       C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                          C46998) *
                         C47272 * C3742) *
                        C47114) *
                       C47303 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                       C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                          C21520 +
                      (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                       C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                          C46998) *
                         C47272 * C3742) *
                        C2472 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21513 * C1269 - C21517 * C1259 + C21514 * C1281 -
                       C21518 * C1265 + C21515 * C5983 - C21519 * C5980) *
                          C21520 +
                      (C21513 * C1286 - C21517 * C1270 + C21514 * C1292 -
                       C21518 * C1282 + C21515 * C5986 - C21519 * C5984) *
                          C46998) *
                         C47272 * C3742) *
                        C47114) *
                       C47034)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47385 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47372 +
                   ((((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                       C21518 * C289 + C21515 * C307 - C21519 * C292) *
                          C21520 +
                      (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                       C21518 * C302 + C21515 * C322 - C21519 * C308) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                       C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                          C21520 +
                      (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                       C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                          C46998) *
                         C47272 * C47156) *
                        C2472 +
                    (((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                       C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                          C21520 +
                      (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                       C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C915 - C21517 * C908 + C21514 * C1277 -
                       C21518 * C1263 + C21515 * C1673 - C21519 * C1668) *
                          C21520 +
                      (C21513 * C923 - C21517 * C916 + C21514 * C1290 -
                       C21518 * C1278 + C21515 * C1677 - C21519 * C1674) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C47395 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47156) *
                       C47391 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C47156) *
                       C47381 +
                   (((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C1669 - C21517 * C1666 + C21514 * C6459 -
                      C21518 * C6457 + C21515 * C22716 - C21519 * C22715) *
                         C21520 +
                     (C21513 * C1675 - C21517 * C1670 + C21514 * C6463 -
                      C21518 * C6460 + C21515 * C22718 - C21519 * C22717) *
                         C46998) *
                        C47272 * C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C1392 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C1393 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C1394 +
                    ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C47303 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C1392 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C1393 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C1394 +
                    ((C21513 * C1132 - C21517 * C1125 + C21514 * C1138 -
                      C21518 * C1128 + C21515 * C5829 - C21519 * C5826) *
                         C21520 +
                     (C21513 * C1143 - C21517 * C1133 + C21514 * C1146 -
                      C21518 * C1139 + C21515 * C5832 - C21519 * C5830) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C47034)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C636 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C637 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C638 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21513 * C309 - C21517 * C293 + C21514 * C311 -
                      C21518 * C294 + C21515 * C1399 - C21519 * C1398) *
                         C21520 +
                     (C21513 * C323 - C21517 * C310 + C21514 * C324 -
                      C21518 * C312 + C21515 * C1401 - C21519 * C1400) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47353)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C1788 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C1789 +
                     ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                       C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                          C21520 +
                      (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                       C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                          C46998) *
                         C47272 * C47352) *
                        C47317 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C1788 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C1789 +
                     ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                       C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                          C21520 +
                      (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                       C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                          C46998) *
                         C47272 * C47352) *
                        C47114) *
                       C47303 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C1788 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C1789 +
                     ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                       C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                          C21520 +
                      (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                       C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                          C46998) *
                         C47272 * C47352) *
                        C47317 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C1788 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C1789 +
                     ((C21513 * C1269 - C21517 * C1259 + C21514 * C1281 -
                       C21518 * C1265 + C21515 * C5983 - C21519 * C5980) *
                          C21520 +
                      (C21513 * C1286 - C21517 * C1270 + C21514 * C1292 -
                       C21518 * C1282 + C21515 * C5986 - C21519 * C5984) *
                          C46998) *
                         C47272 * C47352) *
                        C47114) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C1392 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47156) *
                       C1393 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C47156) *
                       C1394 +
                   (((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C1669 - C21517 * C1666 + C21514 * C6459 -
                      C21518 * C6457 + C21515 * C22716 - C21519 * C22715) *
                         C21520 +
                     (C21513 * C1675 - C21517 * C1670 + C21514 * C6463 -
                      C21518 * C6460 + C21515 * C22718 - C21519 * C22717) *
                         C46998) *
                        C47272 * C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C284 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C285 +
                   ((((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                       C21518 * C289 + C21515 * C307 - C21519 * C292) *
                          C21520 +
                      (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                       C21518 * C302 + C21515 * C322 - C21519 * C308) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                       C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                          C21520 +
                      (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                       C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                       C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                          C21520 +
                      (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                       C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C915 - C21517 * C908 + C21514 * C1277 -
                       C21518 * C1263 + C21515 * C1673 - C21519 * C1668) *
                          C21520 +
                      (C21513 * C923 - C21517 * C916 + C21514 * C1290 -
                       C21518 * C1278 + C21515 * C1677 - C21519 * C1674) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C2248 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C2249 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C2250 +
                    ((C21517 * C1968 - C21513 * C1974 + C21518 * C2362 -
                      C21514 * C2365 + C21519 * C7317 - C21515 * C7319) *
                         C21520 +
                     (C21517 * C1975 - C21513 * C1986 + C21518 * C2366 -
                      C21514 * C2371 + C21519 * C7320 - C21515 * C7323) *
                         C46998) *
                        C47272 * C47365) *
                       C47317 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C2248 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C2249 +
                    ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                      C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                         C21520 +
                     (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                      C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                         C46998) *
                        C47272 * C2250 +
                    ((C21513 * C2365 - C21517 * C2362 + C21514 * C7319 -
                      C21518 * C7317 + C21515 * C23348 - C21519 * C23347) *
                         C21520 +
                     (C21513 * C2371 - C21517 * C2366 + C21514 * C7323 -
                      C21518 * C7320 + C21515 * C23350 - C21519 * C23349) *
                         C46998) *
                        C47272 * C47365) *
                       C47114) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                         C21518 * C287 + C21515 * C303 - C21519 * C290) *
                            C21520 +
                        (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                         C21518 * C298 + C21515 * C320 - C21519 * C304) *
                            C46998) *
                           C47272 * C47069 * C47051 * C108 +
                       ((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                         C21514 * C299 + C21519 * C291 - C21515 * C305) *
                            C21520 +
                        (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                         C21514 * C318 + C21519 * C306 - C21515 * C321) *
                            C46998) *
                           C47272 * C47069 * C47051 * C109 +
                       ((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                         C21518 * C289 + C21515 * C307 - C21519 * C292) *
                            C21520 +
                        (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                         C21518 * C302 + C21515 * C322 - C21519 * C308) *
                            C46998) *
                           C47272 * C47069 * C47051 * C110 +
                       ((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                         C21514 * C309 + C21519 * C294 - C21515 * C311) *
                            C21520 +
                        (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                         C21514 * C323 + C21519 * C312 - C21515 * C324) *
                            C46998) *
                           C47272 * C47069 * C47051 * C111 +
                       ((C21513 * C132 - C21517 * C121 + C21514 * C313 -
                         C21518 * C295 + C21515 * C315 - C21519 * C296) *
                            C21520 +
                        (C21513 * C142 - C21517 * C133 + C21514 * C325 -
                         C21518 * C314 + C21515 * C326 - C21519 * C316) *
                            C46998) *
                           C47272 * C47069 * C47051 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                          C21518 * C287 + C21515 * C303 - C21519 * C290) *
                             C21520 +
                         (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                          C21518 * C298 + C21515 * C320 - C21519 * C304) *
                             C46998) *
                            C47272 * C47069 * C47388 +
                        ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                          C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                             C21520 +
                         (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                          C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                             C46998) *
                            C47272 * C47069 * C47376 +
                        ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                          C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                             C21520 +
                         (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                          C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                             C46998) *
                            C47272 * C47069 * C47349) *
                           C284 +
                       (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                          C21514 * C299 + C21519 * C291 - C21515 * C305) *
                             C21520 +
                         (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                          C21514 * C318 + C21519 * C306 - C21515 * C321) *
                             C46998) *
                            C47272 * C47069 * C47388 +
                        ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                          C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                             C21520 +
                         (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                          C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                             C46998) *
                            C47272 * C47069 * C47376 +
                        ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                          C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                             C21520 +
                         (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                          C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                             C46998) *
                            C47272 * C47069 * C47349) *
                           C285 +
                       (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                          C21518 * C289 + C21515 * C307 - C21519 * C292) *
                             C21520 +
                         (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                          C21518 * C302 + C21515 * C322 - C21519 * C308) *
                             C46998) *
                            C47272 * C47069 * C47388 +
                        ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                          C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                             C21520 +
                         (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                          C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                             C46998) *
                            C47272 * C47069 * C47376 +
                        ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                          C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                             C21520 +
                         (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                          C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                             C46998) *
                            C47272 * C47069 * C47349) *
                           C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C284 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                      C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                         C21520 +
                     (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                      C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C285 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C488 - C21517 * C473 + C21514 * C1271 -
                      C21518 * C1260 + C21515 * C1283 - C21519 * C1266) *
                         C21520 +
                     (C21513 * C503 - C21517 * C489 + C21514 * C1287 -
                      C21518 * C1272 + C21515 * C1293 - C21519 * C1284) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47385 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47372 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C47069 * C1118 +
                   ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                     C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                        C21520 +
                    (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                     C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                        C46998) *
                       C47272 * C47069 * C1119 +
                   ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                     C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                        C21520 +
                    (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                     C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                        C46998) *
                       C47272 * C47069 * C1120 +
                   ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                     C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                        C21520 +
                    (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                     C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                        C46998) *
                       C47272 * C47069 * C1121 +
                   ((C21513 * C1136 - C21517 * C1127 + C21514 * C5827 -
                     C21518 * C5825 + C21515 * C22256 - C21519 * C22255) *
                        C21520 +
                    (C21513 * C1145 - C21517 * C1137 + C21514 * C5831 -
                     C21518 * C5828 + C21515 * C22258 - C21519 * C22257) *
                        C46998) *
                       C47272 * C47069 * C1122) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C1050 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                      C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                         C21520 +
                     (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                      C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                         C46998) *
                        C47272 * C47352) *
                       C1051 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C1279 - C21517 * C1264 + C21514 * C5981 -
                      C21518 * C5979 + C21515 * C22370 - C21519 * C22369) *
                         C21520 +
                     (C21513 * C1291 - C21517 * C1280 + C21514 * C5985 -
                      C21518 * C5982 + C21515 * C22372 - C21519 * C22371) *
                         C46998) *
                        C47272 * C47352) *
                       C47349) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47385 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                      C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                         C21520 +
                     (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                      C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47372 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C488 - C21517 * C473 + C21514 * C1271 -
                      C21518 * C1260 + C21515 * C1283 - C21519 * C1266) *
                         C21520 +
                     (C21513 * C503 - C21517 * C489 + C21514 * C1287 -
                      C21518 * C1272 + C21515 * C1293 - C21519 * C1284) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C47388 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                      C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                         C21520 +
                     (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                      C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                         C46998) *
                        C47272 * C47352) *
                       C47376 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C1279 - C21517 * C1264 + C21514 * C5981 -
                      C21518 * C5979 + C21515 * C22370 - C21519 * C22369) *
                         C21520 +
                     (C21513 * C1291 - C21517 * C1280 + C21514 * C5985 -
                      C21518 * C5982 + C21515 * C22372 - C21519 * C22371) *
                         C46998) *
                        C47272 * C47352) *
                       C47349) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C1963 +
                   ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                     C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                        C21520 +
                    (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                     C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                        C46998) *
                       C47272 * C1964 +
                   ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                     C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                        C21520 +
                    (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                     C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                        C46998) *
                       C47272 * C1965 +
                   ((C21517 * C1968 - C21513 * C1974 + C21518 * C2362 -
                     C21514 * C2365 + C21519 * C7317 - C21515 * C7319) *
                        C21520 +
                    (C21517 * C1975 - C21513 * C1986 + C21518 * C2366 -
                     C21514 * C2371 + C21519 * C7320 - C21515 * C7323) *
                        C46998) *
                       C47272 * C1966 +
                   ((C21513 * C1980 - C21517 * C1971 + C21514 * C6841 -
                     C21518 * C6839 + C21515 * C23002 - C21519 * C23001) *
                        C21520 +
                    (C21513 * C1989 - C21517 * C1981 + C21514 * C6845 -
                     C21518 * C6842 + C21515 * C23004 - C21519 * C23003) *
                        C46998) *
                       C47272 * C1967) *
                  C47051 * C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C1050 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C1051 +
                    (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                       C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                          C21520 +
                      (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                       C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                       C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                          C21520 +
                      (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                       C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C47303 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C1050 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C1051 +
                    (((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                       C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                          C21520 +
                      (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                       C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C1275 - C21517 * C1262 + C21514 * C1671 -
                       C21518 * C1667 + C21515 * C6461 - C21519 * C6458) *
                          C21520 +
                      (C21513 * C1289 - C21517 * C1276 + C21514 * C1676 -
                       C21518 * C1672 + C21515 * C6464 - C21519 * C6462) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C47034)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C636 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C637 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C638 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C490 - C21517 * C474 + C21514 * C917 -
                      C21518 * C909 + C21515 * C1557 - C21519 * C1556) *
                         C21520 +
                     (C21513 * C504 - C21517 * C491 + C21514 * C924 -
                      C21518 * C918 + C21515 * C1559 - C21519 * C1558) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47353)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C2248 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C2249 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C2250 +
                    ((C21517 * C1968 - C21513 * C1974 + C21518 * C2362 -
                      C21514 * C2365 + C21519 * C7317 - C21515 * C7319) *
                         C21520 +
                     (C21517 * C1975 - C21513 * C1986 + C21518 * C2366 -
                      C21514 * C2371 + C21519 * C7320 - C21515 * C7323) *
                         C46998) *
                        C47272 * C47365) *
                       C47051 * C47303 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C2248 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C2249 +
                    ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                      C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                         C21520 +
                     (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                      C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                         C46998) *
                        C47272 * C2250 +
                    ((C21513 * C1976 - C21517 * C1969 + C21514 * C2367 -
                      C21518 * C2363 + C21515 * C7321 - C21519 * C7318) *
                         C21520 +
                     (C21513 * C1987 - C21517 * C1977 + C21514 * C2372 -
                      C21518 * C2368 + C21515 * C7324 - C21519 * C7322) *
                         C46998) *
                        C47272 * C47365) *
                       C47051 * C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C284 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C285 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C47069 * C47051 * C108 +
                   ((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                     C21514 * C299 + C21519 * C291 - C21515 * C305) *
                        C21520 +
                    (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                     C21514 * C318 + C21519 * C306 - C21515 * C321) *
                        C46998) *
                       C47272 * C47069 * C47051 * C109 +
                   ((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                     C21518 * C289 + C21515 * C307 - C21519 * C292) *
                        C21520 +
                    (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                     C21518 * C302 + C21515 * C322 - C21519 * C308) *
                        C46998) *
                       C47272 * C47069 * C47051 * C110 +
                   ((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                     C21514 * C309 + C21519 * C294 - C21515 * C311) *
                        C21520 +
                    (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                     C21514 * C323 + C21519 * C312 - C21515 * C324) *
                        C46998) *
                       C47272 * C47069 * C47051 * C111 +
                   ((C21513 * C132 - C21517 * C121 + C21514 * C313 -
                     C21518 * C295 + C21515 * C315 - C21519 * C296) *
                        C21520 +
                    (C21513 * C142 - C21517 * C133 + C21514 * C325 -
                     C21518 * C314 + C21515 * C326 - C21519 * C316) *
                        C46998) *
                       C47272 * C47069 * C47051 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47385 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47372 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C47069 * C1118 +
                   ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                     C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                        C21520 +
                    (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                     C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                        C46998) *
                       C47272 * C47069 * C1119 +
                   ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                     C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                        C21520 +
                    (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                     C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                        C46998) *
                       C47272 * C47069 * C1120 +
                   ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                     C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                        C21520 +
                    (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                     C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                        C46998) *
                       C47272 * C47069 * C1121 +
                   ((C21513 * C1136 - C21517 * C1127 + C21514 * C5827 -
                     C21518 * C5825 + C21515 * C22256 - C21519 * C22255) *
                        C21520 +
                    (C21513 * C1145 - C21517 * C1137 + C21514 * C5831 -
                     C21518 * C5828 + C21515 * C22258 - C21519 * C22257) *
                        C46998) *
                       C47272 * C47069 * C1122) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47385 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                      C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                         C21520 +
                     (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                      C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47372 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C488 - C21517 * C473 + C21514 * C1271 -
                      C21518 * C1260 + C21515 * C1283 - C21519 * C1266) *
                         C21520 +
                     (C21513 * C503 - C21517 * C489 + C21514 * C1287 -
                      C21518 * C1272 + C21515 * C1293 - C21519 * C1284) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C47388 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                      C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                         C21520 +
                     (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                      C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                         C46998) *
                        C47272 * C47352) *
                       C47376 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C1788 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C1789 +
                    ((C21513 * C1279 - C21517 * C1264 + C21514 * C5981 -
                      C21518 * C5979 + C21515 * C22370 - C21519 * C22369) *
                         C21520 +
                     (C21513 * C1291 - C21517 * C1280 + C21514 * C5985 -
                      C21518 * C5982 + C21515 * C22372 - C21519 * C22371) *
                         C46998) *
                        C47272 * C47352) *
                       C47349) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47028 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47037 +
                   ((((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                       C21518 * C289 + C21515 * C307 - C21519 * C292) *
                          C21520 +
                      (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                       C21518 * C302 + C21515 * C322 - C21519 * C308) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                       C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                          C21520 +
                      (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                       C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                       C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                          C21520 +
                      (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                       C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C915 - C21517 * C908 + C21514 * C1277 -
                       C21518 * C1263 + C21515 * C1673 - C21519 * C1668) *
                          C21520 +
                      (C21513 * C923 - C21517 * C916 + C21514 * C1290 -
                       C21518 * C1278 + C21515 * C1677 - C21519 * C1674) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                       C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                          C21520 +
                      (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                       C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                          C46998) *
                         C47272 * C3742) *
                        C47317 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                       C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                          C21520 +
                      (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                       C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                          C46998) *
                         C47272 * C3742) *
                        C47114) *
                       C2580 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                       C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                          C21520 +
                      (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                       C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                          C46998) *
                         C47272 * C3742) *
                        C47317 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47152 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47159 +
                     ((C21513 * C1269 - C21517 * C1259 + C21514 * C1281 -
                       C21518 * C1265 + C21515 * C5983 - C21519 * C5980) *
                          C21520 +
                      (C21513 * C1286 - C21517 * C1270 + C21514 * C1292 -
                       C21518 * C1282 + C21515 * C5986 - C21519 * C5984) *
                          C46998) *
                         C47272 * C3742) *
                        C47114) *
                       C47034)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C47388 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47376 +
                    (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                       C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                          C21520 +
                      (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                       C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                       C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                          C21520 +
                      (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                       C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C2580 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C47388 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47376 +
                    (((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                       C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                          C21520 +
                      (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                       C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C1275 - C21517 * C1262 + C21514 * C1671 -
                       C21518 * C1667 + C21515 * C6461 - C21519 * C6458) *
                          C21520 +
                      (C21513 * C1289 - C21517 * C1276 + C21514 * C1676 -
                       C21518 * C1672 + C21515 * C6464 - C21519 * C6462) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C47034)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47394 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47387 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47374 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C490 - C21517 * C474 + C21514 * C917 -
                      C21518 * C909 + C21515 * C1557 - C21519 * C1556) *
                         C21520 +
                     (C21513 * C504 - C21517 * C491 + C21514 * C924 -
                      C21518 * C918 + C21515 * C1559 - C21519 * C1558) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47353)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47396 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47393 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47384 +
                    ((C21517 * C1968 - C21513 * C1974 + C21518 * C2362 -
                      C21514 * C2365 + C21519 * C7317 - C21515 * C7319) *
                         C21520 +
                     (C21517 * C1975 - C21513 * C1986 + C21518 * C2366 -
                      C21514 * C2371 + C21519 * C7320 - C21515 * C7323) *
                         C46998) *
                        C47272 * C47365) *
                       C47051 * C2580 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47396 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47393 +
                    ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                      C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                         C21520 +
                     (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                      C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                         C46998) *
                        C47272 * C47384 +
                    ((C21513 * C1976 - C21517 * C1969 + C21514 * C2367 -
                      C21518 * C2363 + C21515 * C7321 - C21519 * C7318) *
                         C21520 +
                     (C21513 * C1987 - C21517 * C1977 + C21514 * C2372 -
                      C21518 * C2368 + C21515 * C7324 - C21519 * C7322) *
                         C46998) *
                        C47272 * C47365) *
                       C47051 * C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47152 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47159 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C3742) *
                       C47051 * C47028 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47152 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47159 +
                    ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                      C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                         C21520 +
                     (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                      C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                         C46998) *
                        C47272 * C3742) *
                       C47051 * C47037 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47152 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C47159 +
                    ((C21513 * C488 - C21517 * C473 + C21514 * C1271 -
                      C21518 * C1260 + C21515 * C1283 - C21519 * C1266) *
                         C21520 +
                     (C21513 * C503 - C21517 * C489 + C21514 * C1287 -
                      C21518 * C1272 + C21515 * C1293 - C21519 * C1284) *
                         C46998) *
                        C47272 * C3742) *
                       C47051 * C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47394 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47387 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47374 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C3234 +
                    ((C21513 * C490 - C21517 * C474 + C21514 * C917 -
                      C21518 * C909 + C21515 * C1557 - C21519 * C1556) *
                         C21520 +
                     (C21513 * C504 - C21517 * C491 + C21514 * C924 -
                      C21518 * C918 + C21515 * C1559 - C21519 * C1558) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47353)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C47388 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47376 +
                    (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                       C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                          C21520 +
                      (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                       C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                       C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                          C21520 +
                      (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                       C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C2580 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C47388 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47376 +
                    (((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                       C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                          C21520 +
                      (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                       C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                          C46998) *
                         C47272 * C3234 +
                     ((C21513 * C1275 - C21517 * C1262 + C21514 * C1671 -
                       C21518 * C1667 + C21515 * C6461 - C21519 * C6458) *
                          C21520 +
                      (C21513 * C1289 - C21517 * C1276 + C21514 * C1676 -
                       C21518 * C1672 + C21515 * C6464 - C21519 * C6462) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C636 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C637 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C638 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C47069 * C47317 +
                    ((C21513 * C309 - C21517 * C293 + C21514 * C311 -
                      C21518 * C294 + C21515 * C1399 - C21519 * C1398) *
                         C21520 +
                     (C21513 * C323 - C21517 * C310 + C21514 * C324 -
                      C21518 * C312 + C21515 * C1401 - C21519 * C1400) *
                         C46998) *
                        C47272 * C47069 * C47114) *
                       C47353)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C1392 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C1393 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C1394 +
                    ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C47303 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C1392 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C1393 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C1394 +
                    ((C21513 * C1132 - C21517 * C1125 + C21514 * C1138 -
                      C21518 * C1128 + C21515 * C5829 - C21519 * C5826) *
                         C21520 +
                     (C21513 * C1143 - C21517 * C1133 + C21514 * C1146 -
                      C21518 * C1139 + C21515 * C5832 - C21519 * C5830) *
                         C46998) *
                        C47272 * C47069 * C47359) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C284 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C285 +
                   ((((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                       C21518 * C289 + C21515 * C307 - C21519 * C292) *
                          C21520 +
                      (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                       C21518 * C302 + C21515 * C322 - C21519 * C308) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                       C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                          C21520 +
                      (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                       C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                          C46998) *
                         C47272 * C47156) *
                        C47317 +
                    (((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                       C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                          C21520 +
                      (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                       C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C915 - C21517 * C908 + C21514 * C1277 -
                       C21518 * C1263 + C21515 * C1673 - C21519 * C1668) *
                          C21520 +
                      (C21513 * C923 - C21517 * C916 + C21514 * C1290 -
                       C21518 * C1278 + C21515 * C1677 - C21519 * C1674) *
                          C46998) *
                         C47272 * C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C1392 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47156) *
                       C1393 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C47156) *
                       C1394 +
                   (((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                      C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                         C21520 +
                     (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                      C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C1669 - C21517 * C1666 + C21514 * C6459 -
                      C21518 * C6457 + C21515 * C22716 - C21519 * C22715) *
                         C21520 +
                     (C21513 * C1675 - C21517 * C1670 + C21514 * C6463 -
                      C21518 * C6460 + C21515 * C22718 - C21519 * C22717) *
                         C46998) *
                        C47272 * C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C284 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C285 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C47069 * C47051 * C108 +
                   ((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                     C21514 * C299 + C21519 * C291 - C21515 * C305) *
                        C21520 +
                    (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                     C21514 * C318 + C21519 * C306 - C21515 * C321) *
                        C46998) *
                       C47272 * C47069 * C47051 * C109 +
                   ((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                     C21518 * C289 + C21515 * C307 - C21519 * C292) *
                        C21520 +
                    (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                     C21518 * C302 + C21515 * C322 - C21519 * C308) *
                        C46998) *
                       C47272 * C47069 * C47051 * C110 +
                   ((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                     C21514 * C309 + C21519 * C294 - C21515 * C311) *
                        C21520 +
                    (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                     C21514 * C323 + C21519 * C312 - C21515 * C324) *
                        C46998) *
                       C47272 * C47069 * C47051 * C111 +
                   ((C21513 * C132 - C21517 * C121 + C21514 * C313 -
                     C21518 * C295 + C21515 * C315 - C21519 * C296) *
                        C21520 +
                    (C21513 * C142 - C21517 * C133 + C21514 * C325 -
                     C21518 * C314 + C21515 * C326 - C21519 * C316) *
                        C46998) *
                       C47272 * C47069 * C47051 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C284 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21517 * C472 - C21513 * C486 + C21518 * C1259 -
                      C21514 * C1269 + C21519 * C1265 - C21515 * C1281) *
                         C21520 +
                     (C21517 * C487 - C21513 * C502 + C21518 * C1270 -
                      C21514 * C1286 + C21519 * C1282 - C21515 * C1292) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C285 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C488 - C21517 * C473 + C21514 * C1271 -
                      C21518 * C1260 + C21515 * C1283 - C21519 * C1266) *
                         C21520 +
                     (C21513 * C503 - C21517 * C489 + C21514 * C1287 -
                      C21518 * C1272 + C21515 * C1293 - C21519 * C1284) *
                         C46998) *
                        C47272 * C47352) *
                       C47051 * C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47385 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47372 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C47069 * C1118 +
                   ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                     C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                        C21520 +
                    (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                     C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                        C46998) *
                       C47272 * C47069 * C1119 +
                   ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                     C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                        C21520 +
                    (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                     C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                        C46998) *
                       C47272 * C47069 * C1120 +
                   ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                     C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                        C21520 +
                    (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                     C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                        C46998) *
                       C47272 * C47069 * C1121 +
                   ((C21513 * C1136 - C21517 * C1127 + C21514 * C5827 -
                     C21518 * C5825 + C21515 * C22256 - C21519 * C22255) *
                        C21520 +
                    (C21513 * C1145 - C21517 * C1137 + C21514 * C5831 -
                     C21518 * C5828 + C21515 * C22258 - C21519 * C22257) *
                        C46998) *
                       C47272 * C47069 * C1122) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C484 - C21517 * C471 + C21514 * C1267 -
                      C21518 * C1258 + C21515 * C1279 - C21519 * C1264) *
                         C21520 +
                     (C21513 * C501 - C21517 * C485 + C21514 * C1285 -
                      C21518 * C1268 + C21515 * C1291 - C21519 * C1280) *
                         C46998) *
                        C47272 * C47352) *
                       C1050 +
                   (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                      C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                         C21520 +
                     (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                      C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21517 * C1258 - C21513 * C1267 + C21518 * C1264 -
                      C21514 * C1279 + C21519 * C5979 - C21515 * C5981) *
                         C21520 +
                     (C21517 * C1268 - C21513 * C1285 + C21518 * C1280 -
                      C21514 * C1291 + C21519 * C5982 - C21515 * C5985) *
                         C46998) *
                        C47272 * C47352) *
                       C1051 +
                   (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47389 +
                    ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                      C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                         C21520 +
                     (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                      C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                         C46998) *
                        C47272 * C47378 +
                    ((C21513 * C1279 - C21517 * C1264 + C21514 * C5981 -
                      C21518 * C5979 + C21515 * C22370 - C21519 * C22369) *
                         C21520 +
                     (C21513 * C1291 - C21517 * C1280 + C21514 * C5985 -
                      C21518 * C5982 + C21515 * C22372 - C21519 * C22371) *
                         C46998) *
                        C47272 * C47352) *
                       C47349) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                      C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                         C21520 +
                     (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                      C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C636 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                      C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                         C21520 +
                     (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                      C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C637 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21517 * C470 - C21513 * C482 + C21518 * C908 -
                      C21514 * C915 + C21519 * C1263 - C21515 * C1277) *
                         C21520 +
                     (C21517 * C483 - C21513 * C500 + C21518 * C916 -
                      C21514 * C923 + C21519 * C1278 - C21515 * C1290) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C638 +
                   (((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                      C21514 * C309 + C21519 * C294 - C21515 * C311) *
                         C21520 +
                     (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                      C21514 * C323 + C21519 * C312 - C21515 * C324) *
                         C46998) *
                        C47272 * C47318 +
                    ((C21513 * C490 - C21517 * C474 + C21514 * C917 -
                      C21518 * C909 + C21515 * C1557 - C21519 * C1556) *
                         C21520 +
                     (C21513 * C504 - C21517 * C491 + C21514 * C924 -
                      C21518 * C918 + C21515 * C1559 - C21519 * C1558) *
                         C46998) *
                        C47272 * C47156) *
                       C47051 * C47353)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                       C21518 * C287 + C21515 * C303 - C21519 * C290) *
                          C21520 +
                      (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                       C21518 * C298 + C21515 * C320 - C21519 * C304) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C468 - C21513 * C478 + C21518 * C906 -
                       C21514 * C911 + C21519 * C1261 - C21515 * C1273) *
                          C21520 +
                      (C21517 * C479 - C21513 * C498 + C21518 * C912 -
                       C21514 * C921 + C21519 * C1274 - C21515 * C1288) *
                          C46998) *
                         C47272 * C47156) *
                        C1050 +
                    (((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                       C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                          C21520 +
                      (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                       C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C911 - C21517 * C906 + C21514 * C1273 -
                       C21518 * C1261 + C21515 * C1669 - C21519 * C1666) *
                          C21520 +
                      (C21513 * C921 - C21517 * C912 + C21514 * C1288 -
                       C21518 * C1274 + C21515 * C1675 - C21519 * C1670) *
                          C46998) *
                         C47272 * C47156) *
                        C1051 +
                    (((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                       C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                          C21520 +
                      (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                       C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C1261 - C21513 * C1273 + C21518 * C1666 -
                       C21514 * C1669 + C21519 * C6457 - C21515 * C6459) *
                          C21520 +
                      (C21517 * C1274 - C21513 * C1288 + C21518 * C1670 -
                       C21514 * C1675 + C21519 * C6460 - C21515 * C6463) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C47303 +
                   ((((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                       C21514 * C299 + C21519 * C291 - C21515 * C305) *
                          C21520 +
                      (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                       C21514 * C318 + C21519 * C306 - C21515 * C321) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C480 - C21517 * C469 + C21514 * C913 -
                       C21518 * C907 + C21515 * C1275 - C21519 * C1262) *
                          C21520 +
                      (C21513 * C499 - C21517 * C481 + C21514 * C922 -
                       C21518 * C914 + C21515 * C1289 - C21519 * C1276) *
                          C46998) *
                         C47272 * C47156) *
                        C1050 +
                    (((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                       C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                          C21520 +
                      (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                       C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21517 * C907 - C21513 * C913 + C21518 * C1262 -
                       C21514 * C1275 + C21519 * C1667 - C21515 * C1671) *
                          C21520 +
                      (C21517 * C914 - C21513 * C922 + C21518 * C1276 -
                       C21514 * C1289 + C21519 * C1672 - C21515 * C1676) *
                          C46998) *
                         C47272 * C47156) *
                        C1051 +
                    (((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                       C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                          C21520 +
                      (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                       C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                          C46998) *
                         C47272 * C47318 +
                     ((C21513 * C1275 - C21517 * C1262 + C21514 * C1671 -
                       C21518 * C1667 + C21515 * C6461 - C21519 * C6458) *
                          C21520 +
                      (C21513 * C1289 - C21517 * C1276 + C21514 * C1676 -
                       C21518 * C1672 + C21515 * C6464 - C21519 * C6462) *
                          C46998) *
                         C47272 * C47156) *
                        C47349) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C47069 * C47051 * C108 +
                   ((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                     C21514 * C299 + C21519 * C291 - C21515 * C305) *
                        C21520 +
                    (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                     C21514 * C318 + C21519 * C306 - C21515 * C321) *
                        C46998) *
                       C47272 * C47069 * C47051 * C109 +
                   ((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                     C21518 * C289 + C21515 * C307 - C21519 * C292) *
                        C21520 +
                    (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                     C21518 * C302 + C21515 * C322 - C21519 * C308) *
                        C46998) *
                       C47272 * C47069 * C47051 * C110 +
                   ((C21517 * C120 - C21513 * C130 + C21518 * C293 -
                     C21514 * C309 + C21519 * C294 - C21515 * C311) *
                        C21520 +
                    (C21517 * C131 - C21513 * C141 + C21518 * C310 -
                     C21514 * C323 + C21519 * C312 - C21515 * C324) *
                        C46998) *
                       C47272 * C47069 * C47051 * C111 +
                   ((C21513 * C132 - C21517 * C121 + C21514 * C313 -
                     C21518 * C295 + C21515 * C315 - C21519 * C296) *
                        C21520 +
                    (C21513 * C142 - C21517 * C133 + C21514 * C325 -
                     C21518 * C314 + C21515 * C326 - C21519 * C316) *
                        C46998) *
                       C47272 * C47069 * C47051 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C284 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C285 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C47388 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C47376 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                      C21518 * C287 + C21515 * C303 - C21519 * C290) *
                         C21520 +
                     (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                      C21518 * C298 + C21515 * C320 - C21519 * C304) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                      C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                         C21520 +
                     (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                      C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                      C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                         C21520 +
                     (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                      C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47385 +
                   (((C21517 * C118 - C21513 * C126 + C21518 * C288 -
                      C21514 * C299 + C21519 * C291 - C21515 * C305) *
                         C21520 +
                     (C21517 * C127 - C21513 * C139 + C21518 * C300 -
                      C21514 * C318 + C21519 * C306 - C21515 * C321) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21513 * C299 - C21517 * C288 + C21514 * C305 -
                      C21518 * C291 + C21515 * C1132 - C21519 * C1125) *
                         C21520 +
                     (C21513 * C318 - C21517 * C300 + C21514 * C321 -
                      C21518 * C306 + C21515 * C1143 - C21519 * C1133) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21517 * C291 - C21513 * C305 + C21518 * C1125 -
                      C21514 * C1132 + C21519 * C1128 - C21515 * C1138) *
                         C21520 +
                     (C21517 * C306 - C21513 * C321 + C21518 * C1133 -
                      C21514 * C1143 + C21519 * C1139 - C21515 * C1146) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47372 +
                   (((C21513 * C128 - C21517 * C119 + C21514 * C301 -
                      C21518 * C289 + C21515 * C307 - C21519 * C292) *
                         C21520 +
                     (C21513 * C140 - C21517 * C129 + C21514 * C319 -
                      C21518 * C302 + C21515 * C322 - C21519 * C308) *
                         C46998) *
                        C47272 * C47069 * C1050 +
                    ((C21517 * C289 - C21513 * C301 + C21518 * C292 -
                      C21514 * C307 + C21519 * C1126 - C21515 * C1134) *
                         C21520 +
                     (C21517 * C302 - C21513 * C319 + C21518 * C308 -
                      C21514 * C322 + C21519 * C1135 - C21515 * C1144) *
                         C46998) *
                        C47272 * C47069 * C1051 +
                    ((C21513 * C307 - C21517 * C292 + C21514 * C1134 -
                      C21518 * C1126 + C21515 * C1140 - C21519 * C1129) *
                         C21520 +
                     (C21513 * C322 - C21517 * C308 + C21514 * C1144 -
                      C21518 * C1135 + C21515 * C1147 - C21519 * C1141) *
                         C46998) *
                        C47272 * C47069 * C47349) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21513 * C124 - C21517 * C117 + C21514 * C297 -
                     C21518 * C287 + C21515 * C303 - C21519 * C290) *
                        C21520 +
                    (C21513 * C138 - C21517 * C125 + C21514 * C317 -
                     C21518 * C298 + C21515 * C320 - C21519 * C304) *
                        C46998) *
                       C47272 * C47069 * C1118 +
                   ((C21517 * C287 - C21513 * C297 + C21518 * C290 -
                     C21514 * C303 + C21519 * C1124 - C21515 * C1130) *
                        C21520 +
                    (C21517 * C298 - C21513 * C317 + C21518 * C304 -
                     C21514 * C320 + C21519 * C1131 - C21515 * C1142) *
                        C46998) *
                       C47272 * C47069 * C1119 +
                   ((C21513 * C303 - C21517 * C290 + C21514 * C1130 -
                     C21518 * C1124 + C21515 * C1136 - C21519 * C1127) *
                        C21520 +
                    (C21513 * C320 - C21517 * C304 + C21514 * C1142 -
                     C21518 * C1131 + C21515 * C1145 - C21519 * C1137) *
                        C46998) *
                       C47272 * C47069 * C1120 +
                   ((C21517 * C1124 - C21513 * C1130 + C21518 * C1127 -
                     C21514 * C1136 + C21519 * C5825 - C21515 * C5827) *
                        C21520 +
                    (C21517 * C1131 - C21513 * C1142 + C21518 * C1137 -
                     C21514 * C1145 + C21519 * C5828 - C21515 * C5831) *
                        C46998) *
                       C47272 * C47069 * C1121 +
                   ((C21513 * C1136 - C21517 * C1127 + C21514 * C5827 -
                     C21518 * C5825 + C21515 * C22256 - C21519 * C22255) *
                        C21520 +
                    (C21513 * C1145 - C21517 * C1137 + C21514 * C5831 -
                     C21518 * C5828 + C21515 * C22258 - C21519 * C22257) *
                        C46998) *
                       C47272 * C47069 * C1122) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C47110 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C47117 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47069 * C2840) *
              C47028 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47110 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47117 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C2840) *
              C47037 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C47110 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47117 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47318 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47318 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
               C15922 * C1124) *
                  C21520 +
              (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
               C15922 * C1131) *
                  C46998) *
                 C10371 +
             ((C26818 - C26819 + C26820 - C26821) * C21520 +
              (C26822 - C26823 + C26824 - C26825) * C46998) *
                 C47369) *
                C47318 +
            (((C26819 - C26818 + C26821 - C26820) * C21520 +
              (C26823 - C26822 + C26825 - C26824) * C46998) *
                 C10371 +
             ((C26826 - C26827 + C26828 - C26829) * C21520 +
              (C26830 - C26831 + C26832 - C26833) * C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C2580 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47318 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47318 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C16113 - C16112 + C16115 - C16114) * C21520 +
              (C16117 - C16116 + C16119 - C16118) * C46998) *
                 C10371 +
             ((C17506 - C17507 + C17508 - C17509) * C21520 +
              (C17510 - C17511 + C17512 - C17513) * C46998) *
                 C47369) *
                C47318 +
            (((C17507 - C17506 + C17509 - C17508) * C21520 +
              (C17511 - C17510 + C17513 - C17512) * C46998) *
                 C10371 +
             ((C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
               C15922 * C5980) *
                  C21520 +
              (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
               C15922 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C27288 - C27289 + C27290 - C27291) * C21520 +
             (C27292 - C27293 + C27294 - C27295) * C46998) *
                C47369) *
               C47069 * C47359) *
              C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C17305 - C17304 + C17307 - C17306) * C21520 +
             (C17309 - C17308 + C17311 - C17310) * C46998) *
                C10371 +
            ((C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
              C15922 * C6458) *
                 C21520 +
             (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
              C15922 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47394 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47387 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47374 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C16445 - C16444 + C16447 - C16446) * C21520 +
             (C16449 - C16448 + C16451 - C16450) * C46998) *
                C10371 +
            ((C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C21520 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47389 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47378 +
            (((C25967 - C25966 + C25969 - C25968) * C21520 +
              (C25971 - C25970 + C25973 - C25972) * C46998) *
                 C10371 +
             ((C27674 - C27675 + C27676 - C27677) * C21520 +
              (C27678 - C27679 + C27680 - C27681) * C46998) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47389 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47378 +
            (((C26811 - C26810 + C26813 - C26812) * C21520 +
              (C26815 - C26814 + C26817 - C26816) * C46998) *
                 C10371 +
             ((C28144 - C28145 + C28146 - C28147) * C21520 +
              (C28148 - C28149 + C28150 - C28151) * C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C2580 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47389 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47378 +
            (((C16291 - C16290 + C16293 - C16292) * C21520 +
              (C16295 - C16294 + C16297 - C16296) * C46998) *
                 C10371 +
             ((C18350 - C18351 + C18352 - C18353) * C21520 +
              (C18354 - C18355 + C18356 - C18357) * C46998) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47389 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47378 +
            (((C18213 - C18212 + C18215 - C18214) * C21520 +
              (C18217 - C18216 + C18219 - C18218) * C46998) *
                 C10371 +
             ((C15917 * C2367 - C15921 * C2363 + C47367 * C7321 -
               C15922 * C7318) *
                  C21520 +
              (C15917 * C2372 - C15921 * C2368 + C47367 * C7324 -
               C15922 * C7322) *
                  C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47318 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47318 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47028 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47318 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47318 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47037 +
          (((((C15935 - C15934 + C15937 - C15936) * C21520 +
              (C15939 - C15938 + C15941 - C15940) * C46998) *
                 C10371 +
             ((C16298 - C16299 + C16300 - C16301) * C21520 +
              (C16302 - C16303 + C16304 - C16305) * C46998) *
                 C47369) *
                C47318 +
            (((C16299 - C16298 + C16301 - C16300) * C21520 +
              (C16303 - C16302 + C16305 - C16304) * C46998) *
                 C10371 +
             ((C16306 - C16307 + C16308 - C16309) * C21520 +
              (C16310 - C16311 + C16312 - C16313) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C16121 - C16120 + C16123 - C16122) * C21520 +
              (C16125 - C16124 + C16127 - C16126) * C46998) *
                 C10371 +
             ((C16792 - C16793 + C16794 - C16795) * C21520 +
              (C16796 - C16797 + C16798 - C16799) * C46998) *
                 C47369) *
                C47318 +
            (((C16793 - C16792 + C16795 - C16794) * C21520 +
              (C16797 - C16796 + C16799 - C16798) * C46998) *
                 C10371 +
             ((C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
               C15922 * C1266) *
                  C21520 +
              (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
               C15922 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47394 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47387 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47374 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C16445 - C16444 + C16447 - C16446) * C21520 +
             (C16449 - C16448 + C16451 - C16450) * C46998) *
                C10371 +
            ((C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C21520 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C27288 - C27289 + C27290 - C27291) * C21520 +
             (C27292 - C27293 + C27294 - C27295) * C46998) *
                C47369) *
               C47069 * C47359) *
              C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C17305 - C17304 + C17307 - C17306) * C21520 +
             (C17309 - C17308 + C17311 - C17310) * C46998) *
                C10371 +
            ((C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
              C15922 * C6458) *
                 C21520 +
             (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
              C15922 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C3234 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C3234 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
               C15922 * C1124) *
                  C21520 +
              (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
               C15922 * C1131) *
                  C46998) *
                 C10371 +
             ((C26818 - C26819 + C26820 - C26821) * C21520 +
              (C26822 - C26823 + C26824 - C26825) * C46998) *
                 C47369) *
                C3234 +
            (((C26819 - C26818 + C26821 - C26820) * C21520 +
              (C26823 - C26822 + C26825 - C26824) * C46998) *
                 C10371 +
             ((C26826 - C26827 + C26828 - C26829) * C21520 +
              (C26830 - C26831 + C26832 - C26833) * C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C47303 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C3234 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C3234 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C16113 - C16112 + C16115 - C16114) * C21520 +
              (C16117 - C16116 + C16119 - C16118) * C46998) *
                 C10371 +
             ((C17506 - C17507 + C17508 - C17509) * C21520 +
              (C17510 - C17511 + C17512 - C17513) * C46998) *
                 C47369) *
                C3234 +
            (((C17507 - C17506 + C17509 - C17508) * C21520 +
              (C17511 - C17510 + C17513 - C17512) * C46998) *
                 C10371 +
             ((C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
               C15922 * C5980) *
                  C21520 +
              (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
               C15922 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47152 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47159 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C27674 - C27675 + C27676 - C27677) * C21520 +
             (C27678 - C27679 + C27680 - C27681) * C46998) *
                C47369) *
               C3742) *
              C47110 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47152 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47159 +
           (((C26811 - C26810 + C26813 - C26812) * C21520 +
             (C26815 - C26814 + C26817 - C26816) * C46998) *
                C10371 +
            ((C28144 - C28145 + C28146 - C28147) * C21520 +
             (C28148 - C28149 + C28150 - C28151) * C46998) *
                C47369) *
               C3742) *
              C47117 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47152 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C47159 +
           (((C26827 - C26826 + C26829 - C26828) * C21520 +
             (C26831 - C26830 + C26833 - C26832) * C46998) *
                C10371 +
            ((C15917 * C7319 - C15921 * C7317 + C47367 * C23348 -
              C15922 * C23347) *
                 C21520 +
             (C15917 * C7323 - C15921 * C7320 + C47367 * C23350 -
              C15922 * C23349) *
                 C46998) *
                C47369) *
               C3742) *
              C2840) *
         C47023) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C3234 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C47395 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C3234 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47156) *
              C47391 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C3234 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C47156) *
              C47381 +
          ((((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C27288 - C27289 + C27290 - C27291) * C21520 +
             (C27292 - C27293 + C27294 - C27295) * C46998) *
                C47369) *
               C3234 +
           (((C27289 - C27288 + C27291 - C27290) * C21520 +
             (C27293 - C27292 + C27295 - C27294) * C46998) *
                C10371 +
            ((C15917 * C5981 - C15921 * C5979 + C47367 * C22370 -
              C15922 * C22369) *
                 C21520 +
             (C15917 * C5985 - C15921 * C5982 + C47367 * C22372 -
              C15922 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C3234 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C3234 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47385 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C3234 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C3234 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47372 +
          (((((C15935 - C15934 + C15937 - C15936) * C21520 +
              (C15939 - C15938 + C15941 - C15940) * C46998) *
                 C10371 +
             ((C16298 - C16299 + C16300 - C16301) * C21520 +
              (C16302 - C16303 + C16304 - C16305) * C46998) *
                 C47369) *
                C3234 +
            (((C16299 - C16298 + C16301 - C16300) * C21520 +
              (C16303 - C16302 + C16305 - C16304) * C46998) *
                 C10371 +
             ((C16306 - C16307 + C16308 - C16309) * C21520 +
              (C16310 - C16311 + C16312 - C16313) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C16121 - C16120 + C16123 - C16122) * C21520 +
              (C16125 - C16124 + C16127 - C16126) * C46998) *
                 C10371 +
             ((C16792 - C16793 + C16794 - C16795) * C21520 +
              (C16796 - C16797 + C16798 - C16799) * C46998) *
                 C47369) *
                C3234 +
            (((C16793 - C16792 + C16795 - C16794) * C21520 +
              (C16797 - C16796 + C16799 - C16798) * C46998) *
                 C10371 +
             ((C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
               C15922 * C1266) *
                  C21520 +
              (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
               C15922 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47396 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47393 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C27674 - C27675 + C27676 - C27677) * C21520 +
             (C27678 - C27679 + C27680 - C27681) * C46998) *
                C47369) *
               C47384 +
           (((C27675 - C27674 + C27677 - C27676) * C21520 +
             (C27679 - C27678 + C27681 - C27680) * C46998) *
                C10371 +
            ((C27682 - C27683 + C27684 - C27685) * C21520 +
             (C27686 - C27687 + C27688 - C27689) * C46998) *
                C47369) *
               C47365) *
              C2472 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47396 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47393 +
           (((C26811 - C26810 + C26813 - C26812) * C21520 +
             (C26815 - C26814 + C26817 - C26816) * C46998) *
                C10371 +
            ((C28144 - C28145 + C28146 - C28147) * C21520 +
             (C28148 - C28149 + C28150 - C28151) * C46998) *
                C47369) *
               C47384 +
           (((C28145 - C28144 + C28147 - C28146) * C21520 +
             (C28149 - C28148 + C28151 - C28150) * C46998) *
                C10371 +
            ((C15917 * C6841 - C15921 * C6839 + C47367 * C23002 -
              C15922 * C23001) *
                 C21520 +
             (C15917 * C6845 - C15921 * C6842 + C47367 * C23004 -
              C15922 * C23003) *
                 C46998) *
                C47369) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47152 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47159 +
            (((C25967 - C25966 + C25969 - C25968) * C21520 +
              (C25971 - C25970 + C25973 - C25972) * C46998) *
                 C10371 +
             ((C27674 - C27675 + C27676 - C27677) * C21520 +
              (C27678 - C27679 + C27680 - C27681) * C46998) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47152 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47159 +
            (((C26811 - C26810 + C26813 - C26812) * C21520 +
              (C26815 - C26814 + C26817 - C26816) * C46998) *
                 C10371 +
             ((C28144 - C28145 + C28146 - C28147) * C21520 +
              (C28148 - C28149 + C28150 - C28151) * C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C47303 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47152 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47159 +
            (((C16291 - C16290 + C16293 - C16292) * C21520 +
              (C16295 - C16294 + C16297 - C16296) * C46998) *
                 C10371 +
             ((C18350 - C18351 + C18352 - C18353) * C21520 +
              (C18354 - C18355 + C18356 - C18357) * C46998) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47152 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47159 +
            (((C18213 - C18212 + C18215 - C18214) * C21520 +
              (C18217 - C18216 + C18219 - C18218) * C46998) *
                 C10371 +
             ((C15917 * C2367 - C15921 * C2363 + C47367 * C7321 -
               C15922 * C7318) *
                  C21520 +
              (C15917 * C2372 - C15921 * C2368 + C47367 * C7324 -
               C15922 * C7322) *
                  C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C3234 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C3234 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47385 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C3234 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C3234 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47372 +
          (((((C15935 - C15934 + C15937 - C15936) * C21520 +
              (C15939 - C15938 + C15941 - C15940) * C46998) *
                 C10371 +
             ((C16298 - C16299 + C16300 - C16301) * C21520 +
              (C16302 - C16303 + C16304 - C16305) * C46998) *
                 C47369) *
                C3234 +
            (((C16299 - C16298 + C16301 - C16300) * C21520 +
              (C16303 - C16302 + C16305 - C16304) * C46998) *
                 C10371 +
             ((C16306 - C16307 + C16308 - C16309) * C21520 +
              (C16310 - C16311 + C16312 - C16313) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C16121 - C16120 + C16123 - C16122) * C21520 +
              (C16125 - C16124 + C16127 - C16126) * C46998) *
                 C10371 +
             ((C16792 - C16793 + C16794 - C16795) * C21520 +
              (C16796 - C16797 + C16798 - C16799) * C46998) *
                 C47369) *
                C3234 +
            (((C16793 - C16792 + C16795 - C16794) * C21520 +
              (C16797 - C16796 + C16799 - C16798) * C46998) *
                 C10371 +
             ((C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
               C15922 * C1266) *
                  C21520 +
              (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
               C15922 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C3234 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C47395 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C3234 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47156) *
              C47391 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C3234 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C47156) *
              C47381 +
          ((((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C27288 - C27289 + C27290 - C27291) * C21520 +
             (C27292 - C27293 + C27294 - C27295) * C46998) *
                C47369) *
               C3234 +
           (((C27289 - C27288 + C27291 - C27290) * C21520 +
             (C27293 - C27292 + C27295 - C27294) * C46998) *
                C10371 +
            ((C15917 * C5981 - C15921 * C5979 + C47367 * C22370 -
              C15922 * C22369) *
                 C21520 +
             (C15917 * C5985 - C15921 * C5982 + C47367 * C22372 -
              C15922 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C15921 * C1666 - C15917 * C1669 + C15922 * C6457 -
              C47367 * C6459) *
                 C21520 +
             (C15921 * C1670 - C15917 * C1675 + C15922 * C6460 -
              C47367 * C6463) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C17305 - C17304 + C17307 - C17306) * C21520 +
             (C17309 - C17308 + C17311 - C17310) * C46998) *
                C10371 +
            ((C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
              C15922 * C6458) *
                 C21520 +
             (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
              C15922 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C15921 * C906 - C15917 * C911 + C15922 * C1261 - C47367 * C1273) *
                 C21520 +
             (C15921 * C912 - C15917 * C921 + C15922 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C636 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47114) *
              C637 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47114) *
              C638 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C16445 - C16444 + C16447 - C16446) * C21520 +
             (C16449 - C16448 + C16451 - C16450) * C46998) *
                C10371 +
            ((C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C21520 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C1788 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C1789 +
            (((C25967 - C25966 + C25969 - C25968) * C21520 +
              (C25971 - C25970 + C25973 - C25972) * C46998) *
                 C10371 +
             ((C27674 - C27675 + C27676 - C27677) * C21520 +
              (C27678 - C27679 + C27680 - C27681) * C46998) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C1788 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C1789 +
            (((C26811 - C26810 + C26813 - C26812) * C21520 +
              (C26815 - C26814 + C26817 - C26816) * C46998) *
                 C10371 +
             ((C15921 * C2362 - C15917 * C2365 + C15922 * C7317 -
               C47367 * C7319) *
                  C21520 +
              (C15921 * C2366 - C15917 * C2371 + C15922 * C7320 -
               C47367 * C7323) *
                  C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C47303 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C1788 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C1789 +
            (((C16291 - C16290 + C16293 - C16292) * C21520 +
              (C16295 - C16294 + C16297 - C16296) * C46998) *
                 C10371 +
             ((C18350 - C18351 + C18352 - C18353) * C21520 +
              (C18354 - C18355 + C18356 - C18357) * C46998) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C1788 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C1789 +
            (((C18213 - C18212 + C18215 - C18214) * C21520 +
              (C18217 - C18216 + C18219 - C18218) * C46998) *
                 C10371 +
             ((C15917 * C2367 - C15921 * C2363 + C47367 * C7321 -
               C15922 * C7318) *
                  C21520 +
              (C15917 * C2372 - C15921 * C2368 + C47367 * C7324 -
               C15922 * C7322) *
                  C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47318 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C1392 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47318 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47156) *
              C1393 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47318 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C47156) *
              C1394 +
          ((((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C27288 - C27289 + C27290 - C27291) * C21520 +
             (C27292 - C27293 + C27294 - C27295) * C46998) *
                C47369) *
               C47318 +
           (((C27289 - C27288 + C27291 - C27290) * C21520 +
             (C27293 - C27292 + C27295 - C27294) * C46998) *
                C10371 +
            ((C15917 * C5981 - C15921 * C5979 + C47367 * C22370 -
              C15922 * C22369) *
                 C21520 +
             (C15917 * C5985 - C15921 * C5982 + C47367 * C22372 -
              C15922 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47318 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47318 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C15917 * C1267 - C15921 * C1258 + C47367 * C1279 -
               C15922 * C1264) *
                  C21520 +
              (C15917 * C1285 - C15921 * C1268 + C47367 * C1291 -
               C15922 * C1280) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C284 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47318 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47318 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C285 +
          (((((C15935 - C15934 + C15937 - C15936) * C21520 +
              (C15939 - C15938 + C15941 - C15940) * C46998) *
                 C10371 +
             ((C16298 - C16299 + C16300 - C16301) * C21520 +
              (C16302 - C16303 + C16304 - C16305) * C46998) *
                 C47369) *
                C47318 +
            (((C16299 - C16298 + C16301 - C16300) * C21520 +
              (C16303 - C16302 + C16305 - C16304) * C46998) *
                 C10371 +
             ((C16306 - C16307 + C16308 - C16309) * C21520 +
              (C16310 - C16311 + C16312 - C16313) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C16121 - C16120 + C16123 - C16122) * C21520 +
              (C16125 - C16124 + C16127 - C16126) * C46998) *
                 C10371 +
             ((C16792 - C16793 + C16794 - C16795) * C21520 +
              (C16796 - C16797 + C16798 - C16799) * C46998) *
                 C47369) *
                C47318 +
            (((C16793 - C16792 + C16795 - C16794) * C21520 +
              (C16797 - C16796 + C16799 - C16798) * C46998) *
                 C10371 +
             ((C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
               C15922 * C1266) *
                  C21520 +
              (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
               C15922 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C2248 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C2249 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C27674 - C27675 + C27676 - C27677) * C21520 +
             (C27678 - C27679 + C27680 - C27681) * C46998) *
                C47369) *
               C2250 +
           (((C27675 - C27674 + C27677 - C27676) * C21520 +
             (C27679 - C27678 + C27681 - C27680) * C46998) *
                C10371 +
            ((C27682 - C27683 + C27684 - C27685) * C21520 +
             (C27686 - C27687 + C27688 - C27689) * C46998) *
                C47369) *
               C47365) *
              C47317 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C2248 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C2249 +
           (((C26811 - C26810 + C26813 - C26812) * C21520 +
             (C26815 - C26814 + C26817 - C26816) * C46998) *
                C10371 +
            ((C28144 - C28145 + C28146 - C28147) * C21520 +
             (C28148 - C28149 + C28150 - C28151) * C46998) *
                C47369) *
               C2250 +
           (((C28145 - C28144 + C28147 - C28146) * C21520 +
             (C28149 - C28148 + C28151 - C28150) * C46998) *
                C10371 +
            ((C15917 * C6841 - C15921 * C6839 + C47367 * C23002 -
              C15922 * C23001) *
                 C21520 +
             (C15917 * C6845 - C15921 * C6842 + C47367 * C23004 -
              C15922 * C23003) *
                 C46998) *
                C47369) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C124 - C15921 * C117 + C47367 * C297 -
                 C15922 * C287) *
                    C21520 +
                (C15917 * C138 - C15921 * C125 + C47367 * C317 -
                 C15922 * C298) *
                    C46998) *
                   C10371 +
               ((C15917 * C478 - C15921 * C468 + C47367 * C911 -
                 C15922 * C906) *
                    C21520 +
                (C15917 * C498 - C15921 * C479 + C47367 * C921 -
                 C15922 * C912) *
                    C46998) *
                   C47369) *
                  C47069 * C47051 * C108 +
              (((C15927 - C15926 + C15929 - C15928) * C21520 +
                (C15931 - C15930 + C15933 - C15932) * C46998) *
                   C10371 +
               ((C16282 - C16283 + C16284 - C16285) * C21520 +
                (C16286 - C16287 + C16288 - C16289) * C46998) *
                   C47369) *
                  C47069 * C47051 * C109 +
              (((C15935 - C15934 + C15937 - C15936) * C21520 +
                (C15939 - C15938 + C15941 - C15940) * C46998) *
                   C10371 +
               ((C16298 - C16299 + C16300 - C16301) * C21520 +
                (C16302 - C16303 + C16304 - C16305) * C46998) *
                   C47369) *
                  C47069 * C47051 * C110 +
              (((C15943 - C15942 + C15945 - C15944) * C21520 +
                (C15947 - C15946 + C15949 - C15948) * C46998) *
                   C10371 +
               ((C16582 - C16583 + C16584 - C16585) * C21520 +
                (C16586 - C16587 + C16588 - C16589) * C46998) *
                   C47369) *
                  C47069 * C47051 * C111 +
              (((C15951 - C15950 + C15953 - C15952) * C21520 +
                (C15955 - C15954 + C15957 - C15956) * C46998) *
                   C10371 +
               ((C15917 * C494 - C15921 * C476 + C47367 * C919 -
                 C15922 * C910) *
                    C21520 +
                (C15917 * C506 - C15921 * C495 + C47367 * C925 -
                 C15922 * C920) *
                    C46998) *
                   C47369) *
                  C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15917 * C124 - C15921 * C117 + C47367 * C297 -
                  C15922 * C287) *
                     C21520 +
                 (C15917 * C138 - C15921 * C125 + C47367 * C317 -
                  C15922 * C298) *
                     C46998) *
                    C10371 +
                ((C15917 * C478 - C15921 * C468 + C47367 * C911 -
                  C15922 * C906) *
                     C21520 +
                 (C15917 * C498 - C15921 * C479 + C47367 * C921 -
                  C15922 * C912) *
                     C46998) *
                    C47369) *
                   C47069 * C47388 +
               (((C15921 * C287 - C15917 * C297 + C15922 * C290 -
                  C47367 * C303) *
                     C21520 +
                 (C15921 * C298 - C15917 * C317 + C15922 * C304 -
                  C47367 * C320) *
                     C46998) *
                    C10371 +
                ((C15921 * C906 - C15917 * C911 + C15922 * C1261 -
                  C47367 * C1273) *
                     C21520 +
                 (C15921 * C912 - C15917 * C921 + C15922 * C1274 -
                  C47367 * C1288) *
                     C46998) *
                    C47369) *
                   C47069 * C47376 +
               (((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
                  C15922 * C1124) *
                     C21520 +
                 (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
                  C15922 * C1131) *
                     C46998) *
                    C10371 +
                ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
                  C15922 * C1666) *
                     C21520 +
                 (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
                  C15922 * C1670) *
                     C46998) *
                    C47369) *
                   C47069 * C47349) *
                  C284 +
              ((((C15927 - C15926 + C15929 - C15928) * C21520 +
                 (C15931 - C15930 + C15933 - C15932) * C46998) *
                    C10371 +
                ((C16282 - C16283 + C16284 - C16285) * C21520 +
                 (C16286 - C16287 + C16288 - C16289) * C46998) *
                    C47369) *
                   C47069 * C47388 +
               (((C16105 - C16104 + C16107 - C16106) * C21520 +
                 (C16109 - C16108 + C16111 - C16110) * C46998) *
                    C10371 +
                ((C16784 - C16785 + C16786 - C16787) * C21520 +
                 (C16788 - C16789 + C16790 - C16791) * C46998) *
                    C47369) *
                   C47069 * C47376 +
               (((C16113 - C16112 + C16115 - C16114) * C21520 +
                 (C16117 - C16116 + C16119 - C16118) * C46998) *
                    C10371 +
                ((C17506 - C17507 + C17508 - C17509) * C21520 +
                 (C17510 - C17511 + C17512 - C17513) * C46998) *
                    C47369) *
                   C47069 * C47349) *
                  C285 +
              ((((C15935 - C15934 + C15937 - C15936) * C21520 +
                 (C15939 - C15938 + C15941 - C15940) * C46998) *
                    C10371 +
                ((C16298 - C16299 + C16300 - C16301) * C21520 +
                 (C16302 - C16303 + C16304 - C16305) * C46998) *
                    C47369) *
                   C47069 * C47388 +
               (((C16121 - C16120 + C16123 - C16122) * C21520 +
                 (C16125 - C16124 + C16127 - C16126) * C46998) *
                    C10371 +
                ((C16792 - C16793 + C16794 - C16795) * C21520 +
                 (C16796 - C16797 + C16798 - C16799) * C46998) *
                    C47369) *
                   C47069 * C47376 +
               (((C16129 - C16128 + C16131 - C16130) * C21520 +
                 (C16133 - C16132 + C16135 - C16134) * C46998) *
                    C10371 +
                ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
                  C15922 * C1668) *
                     C21520 +
                 (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
                  C15922 * C1674) *
                     C46998) *
                    C47369) *
                   C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47389 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47378 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47389 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47378 +
           (((C16291 - C16290 + C16293 - C16292) * C21520 +
             (C16295 - C16294 + C16297 - C16296) * C46998) *
                C10371 +
            ((C18350 - C18351 + C18352 - C18353) * C21520 +
             (C18354 - C18355 + C18356 - C18357) * C46998) *
                C47369) *
               C47352) *
              C47051 * C285 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47389 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C47378 +
           (((C16307 - C16306 + C16309 - C16308) * C21520 +
             (C16311 - C16310 + C16313 - C16312) * C46998) *
                C10371 +
            ((C15917 * C1978 - C15921 * C1970 + C47367 * C2369 -
              C15922 * C2364) *
                 C21520 +
             (C15917 * C1988 - C15921 * C1979 + C47367 * C2373 -
              C15922 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
              C15922 * C1666) *
                 C21520 +
             (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
              C15922 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C25958 - C25959 + C25960 - C25961) * C21520 +
            (C25962 - C25963 + C25964 - C25965) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C21520 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C46998) *
               C10371 +
           ((C26428 - C26429 + C26430 - C26431) * C21520 +
            (C26432 - C26433 + C26434 - C26435) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C21520 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C46998) *
               C10371 +
           ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
             C15922 * C1666) *
                C21520 +
            (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
             C15922 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C21520 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C46998) *
               C10371 +
           ((C15921 * C1666 - C15917 * C1669 + C15922 * C6457 -
             C47367 * C6459) *
                C21520 +
            (C15921 * C1670 - C15917 * C1675 + C15922 * C6460 -
             C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 -
             C15922 * C5825) *
                C21520 +
            (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 -
             C15922 * C5828) *
                C46998) *
               C10371 +
           ((C15917 * C6459 - C15921 * C6457 + C47367 * C22716 -
             C15922 * C22715) *
                C21520 +
            (C15917 * C6463 - C15921 * C6460 + C47367 * C22718 -
             C15922 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47389 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47378 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C1050 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47389 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47378 +
           (((C26811 - C26810 + C26813 - C26812) * C21520 +
             (C26815 - C26814 + C26817 - C26816) * C46998) *
                C10371 +
            ((C15921 * C2362 - C15917 * C2365 + C15922 * C7317 -
              C47367 * C7319) *
                 C21520 +
             (C15921 * C2366 - C15917 * C2371 + C15922 * C7320 -
              C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C1051 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47389 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C47378 +
           (((C26827 - C26826 + C26829 - C26828) * C21520 +
             (C26831 - C26830 + C26833 - C26832) * C46998) *
                C10371 +
            ((C15917 * C7319 - C15921 * C7317 + C47367 * C23348 -
              C15922 * C23347) *
                 C21520 +
             (C15917 * C7323 - C15921 * C7320 + C47367 * C23350 -
              C15922 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C1788 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C1789 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C1788 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C1789 +
           (((C16291 - C16290 + C16293 - C16292) * C21520 +
             (C16295 - C16294 + C16297 - C16296) * C46998) *
                C10371 +
            ((C18350 - C18351 + C18352 - C18353) * C21520 +
             (C18354 - C18355 + C18356 - C18357) * C46998) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C1788 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C1789 +
           (((C16307 - C16306 + C16309 - C16308) * C21520 +
             (C16311 - C16310 + C16313 - C16312) * C46998) *
                C10371 +
            ((C15917 * C1978 - C15921 * C1970 + C47367 * C2369 -
              C15922 * C2364) *
                 C21520 +
             (C15917 * C1988 - C15921 * C1979 + C47367 * C2373 -
              C15922 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C1788 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C1789 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47388 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C1788 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C1789 +
           (((C26811 - C26810 + C26813 - C26812) * C21520 +
             (C26815 - C26814 + C26817 - C26816) * C46998) *
                C10371 +
            ((C15921 * C2362 - C15917 * C2365 + C15922 * C7317 -
              C47367 * C7319) *
                 C21520 +
             (C15921 * C2366 - C15917 * C2371 + C15922 * C7320 -
              C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C47376 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C1788 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C1789 +
           (((C26827 - C26826 + C26829 - C26828) * C21520 +
             (C26831 - C26830 + C26833 - C26832) * C46998) *
                C10371 +
            ((C15917 * C7319 - C15921 * C7317 + C47367 * C23348 -
              C15922 * C23347) *
                 C21520 +
             (C15917 * C7323 - C15921 * C7320 + C47367 * C23350 -
              C15922 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C25958 - C25959 + C25960 - C25961) * C21520 +
            (C25962 - C25963 + C25964 - C25965) * C46998) *
               C47369) *
              C1963 +
          (((C25959 - C25958 + C25961 - C25960) * C21520 +
            (C25963 - C25962 + C25965 - C25964) * C46998) *
               C10371 +
           ((C25966 - C25967 + C25968 - C25969) * C21520 +
            (C25970 - C25971 + C25972 - C25973) * C46998) *
               C47369) *
              C1964 +
          (((C25967 - C25966 + C25969 - C25968) * C21520 +
            (C25971 - C25970 + C25973 - C25972) * C46998) *
               C10371 +
           ((C27674 - C27675 + C27676 - C27677) * C21520 +
            (C27678 - C27679 + C27680 - C27681) * C46998) *
               C47369) *
              C1965 +
          (((C27675 - C27674 + C27677 - C27676) * C21520 +
            (C27679 - C27678 + C27681 - C27680) * C46998) *
               C10371 +
           ((C27682 - C27683 + C27684 - C27685) * C21520 +
            (C27686 - C27687 + C27688 - C27689) * C46998) *
               C47369) *
              C1966 +
          (((C27683 - C27682 + C27685 - C27684) * C21520 +
            (C27687 - C27686 + C27689 - C27688) * C46998) *
               C10371 +
           ((C15917 * C12383 - C15921 * C12381 + C47367 * C27670 -
             C15922 * C27669) *
                C21520 +
            (C15917 * C12387 - C15921 * C12384 + C47367 * C27672 -
             C15922 * C27671) *
                C46998) *
               C47369) *
              C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47318 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47318 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
               C15922 * C1124) *
                  C21520 +
              (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
               C15922 * C1131) *
                  C46998) *
                 C10371 +
             ((C26818 - C26819 + C26820 - C26821) * C21520 +
              (C26822 - C26823 + C26824 - C26825) * C46998) *
                 C47369) *
                C47318 +
            (((C26819 - C26818 + C26821 - C26820) * C21520 +
              (C26823 - C26822 + C26825 - C26824) * C46998) *
                 C10371 +
             ((C26826 - C26827 + C26828 - C26829) * C21520 +
              (C26830 - C26831 + C26832 - C26833) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47318 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47318 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C16113 - C16112 + C16115 - C16114) * C21520 +
              (C16117 - C16116 + C16119 - C16118) * C46998) *
                 C10371 +
             ((C17506 - C17507 + C17508 - C17509) * C21520 +
              (C17510 - C17511 + C17512 - C17513) * C46998) *
                 C47369) *
                C47318 +
            (((C17507 - C17506 + C17509 - C17508) * C21520 +
              (C17511 - C17510 + C17513 - C17512) * C46998) *
                 C10371 +
             ((C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
               C15922 * C5980) *
                  C21520 +
              (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
               C15922 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47318 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47318 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47156) *
              C47051 * C637 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47318 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C47156) *
              C47051 * C638 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C47318 +
           (((C16583 - C16582 + C16585 - C16584) * C21520 +
             (C16587 - C16586 + C16589 - C16588) * C46998) *
                C10371 +
            ((C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                 C21520 +
             (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C2248 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C2249 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C27674 - C27675 + C27676 - C27677) * C21520 +
             (C27678 - C27679 + C27680 - C27681) * C46998) *
                C47369) *
               C2250 +
           (((C27675 - C27674 + C27677 - C27676) * C21520 +
             (C27679 - C27678 + C27681 - C27680) * C46998) *
                C10371 +
            ((C27682 - C27683 + C27684 - C27685) * C21520 +
             (C27686 - C27687 + C27688 - C27689) * C46998) *
                C47369) *
               C47365) *
              C47051 * C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C2248 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C2249 +
           (((C16291 - C16290 + C16293 - C16292) * C21520 +
             (C16295 - C16294 + C16297 - C16296) * C46998) *
                C10371 +
            ((C18350 - C18351 + C18352 - C18353) * C21520 +
             (C18354 - C18355 + C18356 - C18357) * C46998) *
                C47369) *
               C2250 +
           (((C18351 - C18350 + C18353 - C18352) * C21520 +
             (C18355 - C18354 + C18357 - C18356) * C46998) *
                C10371 +
            ((C15917 * C1982 - C15921 * C1972 + C47367 * C6843 -
              C15922 * C6840) *
                 C21520 +
             (C15917 * C1990 - C15921 * C1983 + C47367 * C6846 -
              C15922 * C6844) *
                 C46998) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C15917 * C478 - C15921 * C468 + C47367 * C911 - C15922 * C906) *
                 C21520 +
             (C15917 * C498 - C15921 * C479 + C47367 * C921 - C15922 * C912) *
                 C46998) *
                C47369) *
               C47069 * C47388 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C15921 * C906 - C15917 * C911 + C15922 * C1261 - C47367 * C1273) *
                 C21520 +
             (C15921 * C912 - C15917 * C921 + C15922 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47376 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
              C15922 * C1666) *
                 C21520 +
             (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
              C15922 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47349) *
              C285 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C15917 * C478 - C15921 * C468 + C47367 * C911 - C15922 * C906) *
                C21520 +
            (C15917 * C498 - C15921 * C479 + C47367 * C921 - C15922 * C912) *
                C46998) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C15927 - C15926 + C15929 - C15928) * C21520 +
            (C15931 - C15930 + C15933 - C15932) * C46998) *
               C10371 +
           ((C16282 - C16283 + C16284 - C16285) * C21520 +
            (C16286 - C16287 + C16288 - C16289) * C46998) *
               C47369) *
              C47069 * C47051 * C109 +
          (((C15935 - C15934 + C15937 - C15936) * C21520 +
            (C15939 - C15938 + C15941 - C15940) * C46998) *
               C10371 +
           ((C16298 - C16299 + C16300 - C16301) * C21520 +
            (C16302 - C16303 + C16304 - C16305) * C46998) *
               C47369) *
              C47069 * C47051 * C110 +
          (((C15943 - C15942 + C15945 - C15944) * C21520 +
            (C15947 - C15946 + C15949 - C15948) * C46998) *
               C10371 +
           ((C16582 - C16583 + C16584 - C16585) * C21520 +
            (C16586 - C16587 + C16588 - C16589) * C46998) *
               C47369) *
              C47069 * C47051 * C111 +
          (((C15951 - C15950 + C15953 - C15952) * C21520 +
            (C15955 - C15954 + C15957 - C15956) * C46998) *
               C10371 +
           ((C15917 * C494 - C15921 * C476 + C47367 * C919 - C15922 * C910) *
                C21520 +
            (C15917 * C506 - C15921 * C495 + C47367 * C925 - C15922 * C920) *
                C46998) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
              C15922 * C1666) *
                 C21520 +
             (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
              C15922 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C25958 - C25959 + C25960 - C25961) * C21520 +
            (C25962 - C25963 + C25964 - C25965) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C21520 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C46998) *
               C10371 +
           ((C26428 - C26429 + C26430 - C26431) * C21520 +
            (C26432 - C26433 + C26434 - C26435) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C21520 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C46998) *
               C10371 +
           ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
             C15922 * C1666) *
                C21520 +
            (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
             C15922 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C21520 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C46998) *
               C10371 +
           ((C15921 * C1666 - C15917 * C1669 + C15922 * C6457 -
             C47367 * C6459) *
                C21520 +
            (C15921 * C1670 - C15917 * C1675 + C15922 * C6460 -
             C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 -
             C15922 * C5825) *
                C21520 +
            (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 -
             C15922 * C5828) *
                C46998) *
               C10371 +
           ((C15917 * C6459 - C15921 * C6457 + C47367 * C22716 -
             C15922 * C22715) *
                C21520 +
            (C15917 * C6463 - C15921 * C6460 + C47367 * C22718 -
             C15922 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C1788 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C1789 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C1788 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C1789 +
           (((C16291 - C16290 + C16293 - C16292) * C21520 +
             (C16295 - C16294 + C16297 - C16296) * C46998) *
                C10371 +
            ((C18350 - C18351 + C18352 - C18353) * C21520 +
             (C18354 - C18355 + C18356 - C18357) * C46998) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C1788 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C1789 +
           (((C16307 - C16306 + C16309 - C16308) * C21520 +
             (C16311 - C16310 + C16313 - C16312) * C46998) *
                C10371 +
            ((C15917 * C1978 - C15921 * C1970 + C47367 * C2369 -
              C15922 * C2364) *
                 C21520 +
             (C15917 * C1988 - C15921 * C1979 + C47367 * C2373 -
              C15922 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C1788 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C1789 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47388 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C1788 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C1789 +
           (((C26811 - C26810 + C26813 - C26812) * C21520 +
             (C26815 - C26814 + C26817 - C26816) * C46998) *
                C10371 +
            ((C15921 * C2362 - C15917 * C2365 + C15922 * C7317 -
              C47367 * C7319) *
                 C21520 +
             (C15921 * C2366 - C15917 * C2371 + C15922 * C7320 -
              C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C47376 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C1788 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C1789 +
           (((C26827 - C26826 + C26829 - C26828) * C21520 +
             (C26831 - C26830 + C26833 - C26832) * C46998) *
                C10371 +
            ((C15917 * C7319 - C15921 * C7317 + C47367 * C23348 -
              C15922 * C23347) *
                 C21520 +
             (C15917 * C7323 - C15921 * C7320 + C47367 * C23350 -
              C15922 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C3234 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C3234 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47028 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C3234 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C3234 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47037 +
          (((((C15935 - C15934 + C15937 - C15936) * C21520 +
              (C15939 - C15938 + C15941 - C15940) * C46998) *
                 C10371 +
             ((C16298 - C16299 + C16300 - C16301) * C21520 +
              (C16302 - C16303 + C16304 - C16305) * C46998) *
                 C47369) *
                C3234 +
            (((C16299 - C16298 + C16301 - C16300) * C21520 +
              (C16303 - C16302 + C16305 - C16304) * C46998) *
                 C10371 +
             ((C16306 - C16307 + C16308 - C16309) * C21520 +
              (C16310 - C16311 + C16312 - C16313) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C16121 - C16120 + C16123 - C16122) * C21520 +
              (C16125 - C16124 + C16127 - C16126) * C46998) *
                 C10371 +
             ((C16792 - C16793 + C16794 - C16795) * C21520 +
              (C16796 - C16797 + C16798 - C16799) * C46998) *
                 C47369) *
                C3234 +
            (((C16793 - C16792 + C16795 - C16794) * C21520 +
              (C16797 - C16796 + C16799 - C16798) * C46998) *
                 C10371 +
             ((C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
               C15922 * C1266) *
                  C21520 +
              (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
               C15922 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47152 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47159 +
            (((C25967 - C25966 + C25969 - C25968) * C21520 +
              (C25971 - C25970 + C25973 - C25972) * C46998) *
                 C10371 +
             ((C27674 - C27675 + C27676 - C27677) * C21520 +
              (C27678 - C27679 + C27680 - C27681) * C46998) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47152 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47159 +
            (((C26811 - C26810 + C26813 - C26812) * C21520 +
              (C26815 - C26814 + C26817 - C26816) * C46998) *
                 C10371 +
             ((C28144 - C28145 + C28146 - C28147) * C21520 +
              (C28148 - C28149 + C28150 - C28151) * C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C2580 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47152 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47159 +
            (((C16291 - C16290 + C16293 - C16292) * C21520 +
              (C16295 - C16294 + C16297 - C16296) * C46998) *
                 C10371 +
             ((C18350 - C18351 + C18352 - C18353) * C21520 +
              (C18354 - C18355 + C18356 - C18357) * C46998) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47152 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47159 +
            (((C18213 - C18212 + C18215 - C18214) * C21520 +
              (C18217 - C18216 + C18219 - C18218) * C46998) *
                 C10371 +
             ((C15917 * C2367 - C15921 * C2363 + C47367 * C7321 -
               C15922 * C7318) *
                  C21520 +
              (C15917 * C2372 - C15921 * C2368 + C47367 * C7324 -
               C15922 * C7322) *
                  C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C3234 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C3234 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
               C15922 * C1124) *
                  C21520 +
              (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
               C15922 * C1131) *
                  C46998) *
                 C10371 +
             ((C26818 - C26819 + C26820 - C26821) * C21520 +
              (C26822 - C26823 + C26824 - C26825) * C46998) *
                 C47369) *
                C3234 +
            (((C26819 - C26818 + C26821 - C26820) * C21520 +
              (C26823 - C26822 + C26825 - C26824) * C46998) *
                 C10371 +
             ((C26826 - C26827 + C26828 - C26829) * C21520 +
              (C26830 - C26831 + C26832 - C26833) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C3234 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C3234 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C16113 - C16112 + C16115 - C16114) * C21520 +
              (C16117 - C16116 + C16119 - C16118) * C46998) *
                 C10371 +
             ((C17506 - C17507 + C17508 - C17509) * C21520 +
              (C17510 - C17511 + C17512 - C17513) * C46998) *
                 C47369) *
                C3234 +
            (((C17507 - C17506 + C17509 - C17508) * C21520 +
              (C17511 - C17510 + C17513 - C17512) * C46998) *
                 C10371 +
             ((C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
               C15922 * C5980) *
                  C21520 +
              (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
               C15922 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C3234 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C3234 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C3234 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C3234 +
           (((C16583 - C16582 + C16585 - C16584) * C21520 +
             (C16587 - C16586 + C16589 - C16588) * C46998) *
                C10371 +
            ((C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                 C21520 +
             (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47396 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47393 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C27674 - C27675 + C27676 - C27677) * C21520 +
             (C27678 - C27679 + C27680 - C27681) * C46998) *
                C47369) *
               C47384 +
           (((C27675 - C27674 + C27677 - C27676) * C21520 +
             (C27679 - C27678 + C27681 - C27680) * C46998) *
                C10371 +
            ((C27682 - C27683 + C27684 - C27685) * C21520 +
             (C27686 - C27687 + C27688 - C27689) * C46998) *
                C47369) *
               C47365) *
              C47051 * C2580 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47396 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47393 +
           (((C16291 - C16290 + C16293 - C16292) * C21520 +
             (C16295 - C16294 + C16297 - C16296) * C46998) *
                C10371 +
            ((C18350 - C18351 + C18352 - C18353) * C21520 +
             (C18354 - C18355 + C18356 - C18357) * C46998) *
                C47369) *
               C47384 +
           (((C18351 - C18350 + C18353 - C18352) * C21520 +
             (C18355 - C18354 + C18357 - C18356) * C46998) *
                C10371 +
            ((C15917 * C1982 - C15921 * C1972 + C47367 * C6843 -
              C15922 * C6840) *
                 C21520 +
             (C15917 * C1990 - C15921 * C1983 + C47367 * C6846 -
              C15922 * C6844) *
                 C46998) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47152 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47159 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C27674 - C27675 + C27676 - C27677) * C21520 +
             (C27678 - C27679 + C27680 - C27681) * C46998) *
                C47369) *
               C3742) *
              C47051 * C47028 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47152 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47159 +
           (((C16291 - C16290 + C16293 - C16292) * C21520 +
             (C16295 - C16294 + C16297 - C16296) * C46998) *
                C10371 +
            ((C18350 - C18351 + C18352 - C18353) * C21520 +
             (C18354 - C18355 + C18356 - C18357) * C46998) *
                C47369) *
               C3742) *
              C47051 * C47037 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47152 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C47159 +
           (((C16307 - C16306 + C16309 - C16308) * C21520 +
             (C16311 - C16310 + C16313 - C16312) * C46998) *
                C10371 +
            ((C15917 * C1978 - C15921 * C1970 + C47367 * C2369 -
              C15922 * C2364) *
                 C21520 +
             (C15917 * C1988 - C15921 * C1979 + C47367 * C2373 -
              C15922 * C2370) *
                 C46998) *
                C47369) *
               C3742) *
              C47051 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C3234 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C3234 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C3234 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C3234 +
           (((C16583 - C16582 + C16585 - C16584) * C21520 +
             (C16587 - C16586 + C16589 - C16588) * C46998) *
                C10371 +
            ((C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                 C21520 +
             (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C3234 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C3234 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
               C15922 * C1124) *
                  C21520 +
              (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
               C15922 * C1131) *
                  C46998) *
                 C10371 +
             ((C26818 - C26819 + C26820 - C26821) * C21520 +
              (C26822 - C26823 + C26824 - C26825) * C46998) *
                 C47369) *
                C3234 +
            (((C26819 - C26818 + C26821 - C26820) * C21520 +
              (C26823 - C26822 + C26825 - C26824) * C46998) *
                 C10371 +
             ((C26826 - C26827 + C26828 - C26829) * C21520 +
              (C26830 - C26831 + C26832 - C26833) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C3234 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C3234 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C16113 - C16112 + C16115 - C16114) * C21520 +
              (C16117 - C16116 + C16119 - C16118) * C46998) *
                 C10371 +
             ((C17506 - C17507 + C17508 - C17509) * C21520 +
              (C17510 - C17511 + C17512 - C17513) * C46998) *
                 C47369) *
                C3234 +
            (((C17507 - C17506 + C17509 - C17508) * C21520 +
              (C17511 - C17510 + C17513 - C17512) * C46998) *
                 C10371 +
             ((C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
               C15922 * C5980) *
                  C21520 +
              (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
               C15922 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C15921 * C906 - C15917 * C911 + C15922 * C1261 - C47367 * C1273) *
                 C21520 +
             (C15921 * C912 - C15917 * C921 + C15922 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C636 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47114) *
              C637 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47114) *
              C638 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C16445 - C16444 + C16447 - C16446) * C21520 +
             (C16449 - C16448 + C16451 - C16450) * C46998) *
                C10371 +
            ((C15917 * C917 - C15921 * C909 + C47367 * C1557 - C15922 * C1556) *
                 C21520 +
             (C15917 * C924 - C15921 * C918 + C47367 * C1559 - C15922 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C15921 * C1666 - C15917 * C1669 + C15922 * C6457 -
              C47367 * C6459) *
                 C21520 +
             (C15921 * C1670 - C15917 * C1675 + C15922 * C6460 -
              C47367 * C6463) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47303 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C17305 - C17304 + C17307 - C17306) * C21520 +
             (C17309 - C17308 + C17311 - C17310) * C46998) *
                C10371 +
            ((C15917 * C1671 - C15921 * C1667 + C47367 * C6461 -
              C15922 * C6458) *
                 C21520 +
             (C15917 * C1676 - C15921 * C1672 + C47367 * C6464 -
              C15922 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47318 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47318 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C15917 * C1267 - C15921 * C1258 + C47367 * C1279 -
               C15922 * C1264) *
                  C21520 +
              (C15917 * C1285 - C15921 * C1268 + C47367 * C1291 -
               C15922 * C1280) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C284 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47318 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47318 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C285 +
          (((((C15935 - C15934 + C15937 - C15936) * C21520 +
              (C15939 - C15938 + C15941 - C15940) * C46998) *
                 C10371 +
             ((C16298 - C16299 + C16300 - C16301) * C21520 +
              (C16302 - C16303 + C16304 - C16305) * C46998) *
                 C47369) *
                C47318 +
            (((C16299 - C16298 + C16301 - C16300) * C21520 +
              (C16303 - C16302 + C16305 - C16304) * C46998) *
                 C10371 +
             ((C16306 - C16307 + C16308 - C16309) * C21520 +
              (C16310 - C16311 + C16312 - C16313) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C16121 - C16120 + C16123 - C16122) * C21520 +
              (C16125 - C16124 + C16127 - C16126) * C46998) *
                 C10371 +
             ((C16792 - C16793 + C16794 - C16795) * C21520 +
              (C16796 - C16797 + C16798 - C16799) * C46998) *
                 C47369) *
                C47318 +
            (((C16793 - C16792 + C16795 - C16794) * C21520 +
              (C16797 - C16796 + C16799 - C16798) * C46998) *
                 C10371 +
             ((C15917 * C1271 - C15921 * C1260 + C47367 * C1283 -
               C15922 * C1266) *
                  C21520 +
              (C15917 * C1287 - C15921 * C1272 + C47367 * C1293 -
               C15922 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47318 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C1392 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47318 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47156) *
              C1393 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47318 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C47156) *
              C1394 +
          ((((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
              C47367 * C1136) *
                 C21520 +
             (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
              C47367 * C1145) *
                 C46998) *
                C10371 +
            ((C27288 - C27289 + C27290 - C27291) * C21520 +
             (C27292 - C27293 + C27294 - C27295) * C46998) *
                C47369) *
               C47318 +
           (((C27289 - C27288 + C27291 - C27290) * C21520 +
             (C27293 - C27292 + C27295 - C27294) * C46998) *
                C10371 +
            ((C15917 * C5981 - C15921 * C5979 + C47367 * C22370 -
              C15922 * C22369) *
                 C21520 +
             (C15917 * C5985 - C15921 * C5982 + C47367 * C22372 -
              C15922 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C15917 * C478 - C15921 * C468 + C47367 * C911 - C15922 * C906) *
                 C21520 +
             (C15917 * C498 - C15921 * C479 + C47367 * C921 - C15922 * C912) *
                 C46998) *
                C47369) *
               C47069 * C47388 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C15921 * C906 - C15917 * C911 + C15922 * C1261 - C47367 * C1273) *
                 C21520 +
             (C15921 * C912 - C15917 * C921 + C15922 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47376 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
              C15922 * C1666) *
                 C21520 +
             (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
              C15922 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47349) *
              C285 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C15917 * C478 - C15921 * C468 + C47367 * C911 - C15922 * C906) *
                C21520 +
            (C15917 * C498 - C15921 * C479 + C47367 * C921 - C15922 * C912) *
                C46998) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C15927 - C15926 + C15929 - C15928) * C21520 +
            (C15931 - C15930 + C15933 - C15932) * C46998) *
               C10371 +
           ((C16282 - C16283 + C16284 - C16285) * C21520 +
            (C16286 - C16287 + C16288 - C16289) * C46998) *
               C47369) *
              C47069 * C47051 * C109 +
          (((C15935 - C15934 + C15937 - C15936) * C21520 +
            (C15939 - C15938 + C15941 - C15940) * C46998) *
               C10371 +
           ((C16298 - C16299 + C16300 - C16301) * C21520 +
            (C16302 - C16303 + C16304 - C16305) * C46998) *
               C47369) *
              C47069 * C47051 * C110 +
          (((C15943 - C15942 + C15945 - C15944) * C21520 +
            (C15947 - C15946 + C15949 - C15948) * C46998) *
               C10371 +
           ((C16582 - C16583 + C16584 - C16585) * C21520 +
            (C16586 - C16587 + C16588 - C16589) * C46998) *
               C47369) *
              C47069 * C47051 * C111 +
          (((C15951 - C15950 + C15953 - C15952) * C21520 +
            (C15955 - C15954 + C15957 - C15956) * C46998) *
               C10371 +
           ((C15917 * C494 - C15921 * C476 + C47367 * C919 - C15922 * C910) *
                C21520 +
            (C15917 * C506 - C15921 * C495 + C47367 * C925 - C15922 * C920) *
                C46998) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47389 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47378 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47389 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47378 +
           (((C16291 - C16290 + C16293 - C16292) * C21520 +
             (C16295 - C16294 + C16297 - C16296) * C46998) *
                C10371 +
            ((C18350 - C18351 + C18352 - C18353) * C21520 +
             (C18354 - C18355 + C18356 - C18357) * C46998) *
                C47369) *
               C47352) *
              C47051 * C285 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47389 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C47378 +
           (((C16307 - C16306 + C16309 - C16308) * C21520 +
             (C16311 - C16310 + C16313 - C16312) * C46998) *
                C10371 +
            ((C15917 * C1978 - C15921 * C1970 + C47367 * C2369 -
              C15922 * C2364) *
                 C21520 +
             (C15917 * C1988 - C15921 * C1979 + C47367 * C2373 -
              C15922 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
              C15922 * C1666) *
                 C21520 +
             (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
              C15922 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C25958 - C25959 + C25960 - C25961) * C21520 +
            (C25962 - C25963 + C25964 - C25965) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C21520 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C46998) *
               C10371 +
           ((C26428 - C26429 + C26430 - C26431) * C21520 +
            (C26432 - C26433 + C26434 - C26435) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C21520 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C46998) *
               C10371 +
           ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
             C15922 * C1666) *
                C21520 +
            (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
             C15922 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C21520 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C46998) *
               C10371 +
           ((C15921 * C1666 - C15917 * C1669 + C15922 * C6457 -
             C47367 * C6459) *
                C21520 +
            (C15921 * C1670 - C15917 * C1675 + C15922 * C6460 -
             C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 -
             C15922 * C5825) *
                C21520 +
            (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 -
             C15922 * C5828) *
                C46998) *
               C10371 +
           ((C15917 * C6459 - C15921 * C6457 + C47367 * C22716 -
             C15922 * C22715) *
                C21520 +
            (C15917 * C6463 - C15921 * C6460 + C47367 * C22718 -
             C15922 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47389 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47378 +
           (((C25967 - C25966 + C25969 - C25968) * C21520 +
             (C25971 - C25970 + C25973 - C25972) * C46998) *
                C10371 +
            ((C15917 * C1974 - C15921 * C1968 + C47367 * C2365 -
              C15922 * C2362) *
                 C21520 +
             (C15917 * C1986 - C15921 * C1975 + C47367 * C2371 -
              C15922 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C1050 +
          ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47389 +
           (((C26429 - C26428 + C26431 - C26430) * C21520 +
             (C26433 - C26432 + C26435 - C26434) * C46998) *
                C10371 +
            ((C26810 - C26811 + C26812 - C26813) * C21520 +
             (C26814 - C26815 + C26816 - C26817) * C46998) *
                C47369) *
               C47378 +
           (((C26811 - C26810 + C26813 - C26812) * C21520 +
             (C26815 - C26814 + C26817 - C26816) * C46998) *
                C10371 +
            ((C15921 * C2362 - C15917 * C2365 + C15922 * C7317 -
              C47367 * C7319) *
                 C21520 +
             (C15921 * C2366 - C15917 * C2371 + C15922 * C7320 -
              C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C1051 +
          ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C26818 - C26819 + C26820 - C26821) * C21520 +
             (C26822 - C26823 + C26824 - C26825) * C46998) *
                C47369) *
               C47389 +
           (((C26819 - C26818 + C26821 - C26820) * C21520 +
             (C26823 - C26822 + C26825 - C26824) * C46998) *
                C10371 +
            ((C26826 - C26827 + C26828 - C26829) * C21520 +
             (C26830 - C26831 + C26832 - C26833) * C46998) *
                C47369) *
               C47378 +
           (((C26827 - C26826 + C26829 - C26828) * C21520 +
             (C26831 - C26830 + C26833 - C26832) * C46998) *
                C10371 +
            ((C15917 * C7319 - C15921 * C7317 + C47367 * C23348 -
              C15922 * C23347) *
                 C21520 +
             (C15917 * C7323 - C15921 * C7320 + C47367 * C23350 -
              C15922 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47318 +
           (((C25959 - C25958 + C25961 - C25960) * C21520 +
             (C25963 - C25962 + C25965 - C25964) * C46998) *
                C10371 +
            ((C25966 - C25967 + C25968 - C25969) * C21520 +
             (C25970 - C25971 + C25972 - C25973) * C46998) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47318 +
           (((C16283 - C16282 + C16285 - C16284) * C21520 +
             (C16287 - C16286 + C16289 - C16288) * C46998) *
                C10371 +
            ((C16290 - C16291 + C16292 - C16293) * C21520 +
             (C16294 - C16295 + C16296 - C16297) * C46998) *
                C47369) *
               C47156) *
              C47051 * C637 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47318 +
           (((C16299 - C16298 + C16301 - C16300) * C21520 +
             (C16303 - C16302 + C16305 - C16304) * C46998) *
                C10371 +
            ((C16306 - C16307 + C16308 - C16309) * C21520 +
             (C16310 - C16311 + C16312 - C16313) * C46998) *
                C47369) *
               C47156) *
              C47051 * C638 +
          ((((C15943 - C15942 + C15945 - C15944) * C21520 +
             (C15947 - C15946 + C15949 - C15948) * C46998) *
                C10371 +
            ((C16582 - C16583 + C16584 - C16585) * C21520 +
             (C16586 - C16587 + C16588 - C16589) * C46998) *
                C47369) *
               C47318 +
           (((C16583 - C16582 + C16585 - C16584) * C21520 +
             (C16587 - C16586 + C16589 - C16588) * C46998) *
                C10371 +
            ((C15917 * C492 - C15921 * C475 + C47367 * C2139 - C15922 * C2138) *
                 C21520 +
             (C15917 * C505 - C15921 * C493 + C47367 * C2141 - C15922 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                  C21520 +
              (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                  C46998) *
                 C10371 +
             ((C25958 - C25959 + C25960 - C25961) * C21520 +
              (C25962 - C25963 + C25964 - C25965) * C46998) *
                 C47369) *
                C47318 +
            (((C25959 - C25958 + C25961 - C25960) * C21520 +
              (C25963 - C25962 + C25965 - C25964) * C46998) *
                 C10371 +
             ((C25966 - C25967 + C25968 - C25969) * C21520 +
              (C25970 - C25971 + C25972 - C25973) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                  C21520 +
              (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                  C46998) *
                 C10371 +
             ((C26428 - C26429 + C26430 - C26431) * C21520 +
              (C26432 - C26433 + C26434 - C26435) * C46998) *
                 C47369) *
                C47318 +
            (((C26429 - C26428 + C26431 - C26430) * C21520 +
              (C26433 - C26432 + C26435 - C26434) * C46998) *
                 C10371 +
             ((C26810 - C26811 + C26812 - C26813) * C21520 +
              (C26814 - C26815 + C26816 - C26817) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C15917 * C303 - C15921 * C290 + C47367 * C1130 -
               C15922 * C1124) *
                  C21520 +
              (C15917 * C320 - C15921 * C304 + C47367 * C1142 -
               C15922 * C1131) *
                  C46998) *
                 C10371 +
             ((C26818 - C26819 + C26820 - C26821) * C21520 +
              (C26822 - C26823 + C26824 - C26825) * C46998) *
                 C47369) *
                C47318 +
            (((C26819 - C26818 + C26821 - C26820) * C21520 +
              (C26823 - C26822 + C26825 - C26824) * C46998) *
                 C10371 +
             ((C26826 - C26827 + C26828 - C26829) * C21520 +
              (C26830 - C26831 + C26832 - C26833) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C15927 - C15926 + C15929 - C15928) * C21520 +
              (C15931 - C15930 + C15933 - C15932) * C46998) *
                 C10371 +
             ((C16282 - C16283 + C16284 - C16285) * C21520 +
              (C16286 - C16287 + C16288 - C16289) * C46998) *
                 C47369) *
                C47318 +
            (((C16283 - C16282 + C16285 - C16284) * C21520 +
              (C16287 - C16286 + C16289 - C16288) * C46998) *
                 C10371 +
             ((C16290 - C16291 + C16292 - C16293) * C21520 +
              (C16294 - C16295 + C16296 - C16297) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C16105 - C16104 + C16107 - C16106) * C21520 +
              (C16109 - C16108 + C16111 - C16110) * C46998) *
                 C10371 +
             ((C16784 - C16785 + C16786 - C16787) * C21520 +
              (C16788 - C16789 + C16790 - C16791) * C46998) *
                 C47369) *
                C47318 +
            (((C16785 - C16784 + C16787 - C16786) * C21520 +
              (C16789 - C16788 + C16791 - C16790) * C46998) *
                 C10371 +
             ((C18212 - C18213 + C18214 - C18215) * C21520 +
              (C18216 - C18217 + C18218 - C18219) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C16113 - C16112 + C16115 - C16114) * C21520 +
              (C16117 - C16116 + C16119 - C16118) * C46998) *
                 C10371 +
             ((C17506 - C17507 + C17508 - C17509) * C21520 +
              (C17510 - C17511 + C17512 - C17513) * C46998) *
                 C47369) *
                C47318 +
            (((C17507 - C17506 + C17509 - C17508) * C21520 +
              (C17511 - C17510 + C17513 - C17512) * C46998) *
                 C10371 +
             ((C15917 * C1281 - C15921 * C1265 + C47367 * C5983 -
               C15922 * C5980) *
                  C21520 +
              (C15917 * C1292 - C15921 * C1282 + C47367 * C5986 -
               C15922 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C15917 * C478 - C15921 * C468 + C47367 * C911 - C15922 * C906) *
                C21520 +
            (C15917 * C498 - C15921 * C479 + C47367 * C921 - C15922 * C912) *
                C46998) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C15927 - C15926 + C15929 - C15928) * C21520 +
            (C15931 - C15930 + C15933 - C15932) * C46998) *
               C10371 +
           ((C16282 - C16283 + C16284 - C16285) * C21520 +
            (C16286 - C16287 + C16288 - C16289) * C46998) *
               C47369) *
              C47069 * C47051 * C109 +
          (((C15935 - C15934 + C15937 - C15936) * C21520 +
            (C15939 - C15938 + C15941 - C15940) * C46998) *
               C10371 +
           ((C16298 - C16299 + C16300 - C16301) * C21520 +
            (C16302 - C16303 + C16304 - C16305) * C46998) *
               C47369) *
              C47069 * C47051 * C110 +
          (((C15943 - C15942 + C15945 - C15944) * C21520 +
            (C15947 - C15946 + C15949 - C15948) * C46998) *
               C10371 +
           ((C16582 - C16583 + C16584 - C16585) * C21520 +
            (C16586 - C16587 + C16588 - C16589) * C46998) *
               C47369) *
              C47069 * C47051 * C111 +
          (((C15951 - C15950 + C15953 - C15952) * C21520 +
            (C15955 - C15954 + C15957 - C15956) * C46998) *
               C10371 +
           ((C15917 * C494 - C15921 * C476 + C47367 * C919 - C15922 * C910) *
                C21520 +
            (C15917 * C506 - C15921 * C495 + C47367 * C925 - C15922 * C920) *
                C46998) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C15917 * C478 - C15921 * C468 + C47367 * C911 - C15922 * C906) *
                 C21520 +
             (C15917 * C498 - C15921 * C479 + C47367 * C921 - C15922 * C912) *
                 C46998) *
                C47369) *
               C47069 * C47388 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C15921 * C906 - C15917 * C911 + C15922 * C1261 - C47367 * C1273) *
                 C21520 +
             (C15921 * C912 - C15917 * C921 + C15922 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47376 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
              C15922 * C1666) *
                 C21520 +
             (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
              C15922 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47349) *
              C285 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                 C21520 +
             (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                 C46998) *
                C10371 +
            ((C25958 - C25959 + C25960 - C25961) * C21520 +
             (C25962 - C25963 + C25964 - C25965) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                 C21520 +
             (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                 C46998) *
                C10371 +
            ((C26428 - C26429 + C26430 - C26431) * C21520 +
             (C26432 - C26433 + C26434 - C26435) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                 C21520 +
             (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                 C46998) *
                C10371 +
            ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
              C15922 * C1666) *
                 C21520 +
             (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
              C15922 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C15927 - C15926 + C15929 - C15928) * C21520 +
             (C15931 - C15930 + C15933 - C15932) * C46998) *
                C10371 +
            ((C16282 - C16283 + C16284 - C16285) * C21520 +
             (C16286 - C16287 + C16288 - C16289) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16105 - C16104 + C16107 - C16106) * C21520 +
             (C16109 - C16108 + C16111 - C16110) * C46998) *
                C10371 +
            ((C16784 - C16785 + C16786 - C16787) * C21520 +
             (C16788 - C16789 + C16790 - C16791) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16113 - C16112 + C16115 - C16114) * C21520 +
             (C16117 - C16116 + C16119 - C16118) * C46998) *
                C10371 +
            ((C17506 - C17507 + C17508 - C17509) * C21520 +
             (C17510 - C17511 + C17512 - C17513) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C15935 - C15934 + C15937 - C15936) * C21520 +
             (C15939 - C15938 + C15941 - C15940) * C46998) *
                C10371 +
            ((C16298 - C16299 + C16300 - C16301) * C21520 +
             (C16302 - C16303 + C16304 - C16305) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C16121 - C16120 + C16123 - C16122) * C21520 +
             (C16125 - C16124 + C16127 - C16126) * C46998) *
                C10371 +
            ((C16792 - C16793 + C16794 - C16795) * C21520 +
             (C16796 - C16797 + C16798 - C16799) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C16129 - C16128 + C16131 - C16130) * C21520 +
             (C16133 - C16132 + C16135 - C16134) * C46998) *
                C10371 +
            ((C15917 * C1277 - C15921 * C1263 + C47367 * C1673 -
              C15922 * C1668) *
                 C21520 +
             (C15917 * C1290 - C15921 * C1278 + C47367 * C1677 -
              C15922 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C124 - C15921 * C117 + C47367 * C297 - C15922 * C287) *
                C21520 +
            (C15917 * C138 - C15921 * C125 + C47367 * C317 - C15922 * C298) *
                C46998) *
               C10371 +
           ((C25958 - C25959 + C25960 - C25961) * C21520 +
            (C25962 - C25963 + C25964 - C25965) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C15921 * C287 - C15917 * C297 + C15922 * C290 - C47367 * C303) *
                C21520 +
            (C15921 * C298 - C15917 * C317 + C15922 * C304 - C47367 * C320) *
                C46998) *
               C10371 +
           ((C26428 - C26429 + C26430 - C26431) * C21520 +
            (C26432 - C26433 + C26434 - C26435) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C15917 * C303 - C15921 * C290 + C47367 * C1130 - C15922 * C1124) *
                C21520 +
            (C15917 * C320 - C15921 * C304 + C47367 * C1142 - C15922 * C1131) *
                C46998) *
               C10371 +
           ((C15917 * C1273 - C15921 * C1261 + C47367 * C1669 -
             C15922 * C1666) *
                C21520 +
            (C15917 * C1288 - C15921 * C1274 + C47367 * C1675 -
             C15922 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C15921 * C1124 - C15917 * C1130 + C15922 * C1127 -
             C47367 * C1136) *
                C21520 +
            (C15921 * C1131 - C15917 * C1142 + C15922 * C1137 -
             C47367 * C1145) *
                C46998) *
               C10371 +
           ((C15921 * C1666 - C15917 * C1669 + C15922 * C6457 -
             C47367 * C6459) *
                C21520 +
            (C15921 * C1670 - C15917 * C1675 + C15922 * C6460 -
             C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C15917 * C1136 - C15921 * C1127 + C47367 * C5827 -
             C15922 * C5825) *
                C21520 +
            (C15917 * C1145 - C15921 * C1137 + C47367 * C5831 -
             C15922 * C5828) *
                C46998) *
               C10371 +
           ((C15917 * C6459 - C15921 * C6457 + C47367 * C22716 -
             C15922 * C22715) *
                C21520 +
            (C15917 * C6463 - C15921 * C6460 + C47367 * C22718 -
             C15922 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[150] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47069 * C47110 +
                    (((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47069 * C47117 +
                    (((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C47069 * C2840) *
                       C47028 +
                   ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                      (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                         C31197 +
                     (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                      C534 * C47336) *
                         C47369) *
                        C47069 * C47110 +
                    (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                      (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                         C31197 +
                     (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                      C940 * C47336) *
                         C47369) *
                        C47069 * C47117 +
                    (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
                      (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                         C31197 +
                     (C11872 * C15923 + C11873 * C15919 +
                      (C1565 - C1566) * C15924 + (C1567 - C1568) * C47336) *
                         C47369) *
                        C47069 * C2840) *
                       C47037 +
                   (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                      (C157 - C156) * C47336) *
                         C31197 +
                     (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                      C756 * C47336) *
                         C47369) *
                        C47069 * C47110 +
                    ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                      (C347 - C346) * C47336) *
                         C31197 +
                     (C11150 * C15923 + C11151 * C15919 +
                      (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                         C47369) *
                        C47069 * C47117 +
                    ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
                      (C351 - C350) * C47336) *
                         C31197 +
                     ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
                      (C47255 * C1557 - C113 * C1556) * C15924 +
                      (C47255 * C1559 - C113 * C1558) * C47336) *
                         C47369) *
                        C47069 * C2840) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C47255 * C303 - C113 * C290) * C15923 +
              (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
              (C338 - C339) * C47336) *
                 C31197 +
             ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
              C11870 * C15924 + C11871 * C47336) *
                 C47369) *
                C47318 +
            (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
              C11872 * C15924 + C11873 * C47336) *
                 C31197 +
             ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
              (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C2580 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C337 - C336) * C15923 + (C339 - C338) * C15919 +
              (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                 C31197 +
             (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C47318 +
            ((C11870 * C15923 + C11871 * C15919 + (C1566 - C1565) * C15924 +
              (C1568 - C1567) * C47336) *
                 C31197 +
             ((C11539 - C11538) * C15923 + (C11541 - C11540) * C15919 +
              (C47255 * C1283 - C113 * C1266) * C15924 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C47395 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C47391 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47381 +
           (((C113 * C1124 - C47255 * C1130) * C15923 +
             (C113 * C1131 - C47255 * C1142) * C15919 +
             (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                C31197 +
            ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
             (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                C47369) *
               C47069 * C47359) *
              C2580 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C47395 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C47391 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47381 +
           (((C1404 - C1403) * C15923 + (C1406 - C1405) * C15919 +
             (C1408 - C1407) * C15924 + (C1410 - C1409) * C47336) *
                C31197 +
            ((C11673 - C11672) * C15923 + (C11675 - C11674) * C15919 +
             (C47255 * C1673 - C113 * C1668) * C15924 +
             (C47255 * C1677 - C113 * C1674) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C2472 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C47114) *
              C47394 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C2472 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C47114) *
              C47387 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C2472 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47374 +
          (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
             (C161 - C160) * C47336) *
                C31197 +
            (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
             (C759 - C760) * C47336) *
                C47369) *
               C47069 * C2472 +
           ((C645 * C15923 + C646 * C15919 + (C648 - C647) * C15924 +
             (C650 - C649) * C47336) *
                C31197 +
            ((C936 - C935) * C15923 + (C938 - C937) * C15919 +
             (C47255 * C919 - C113 * C910) * C15924 +
             (C47255 * C925 - C113 * C920) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C47389 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47378 +
            (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
              C10680 * C15924 + C10681 * C47336) *
                 C31197 +
             ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
              C12734 * C15924 + C12735 * C47336) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C47389 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47378 +
            (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
              C12598 * C15924 + C12599 * C47336) *
                 C31197 +
             ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
              (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C2580 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C47389 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47378 +
            ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
              C10685 * C47336) *
                 C31197 +
             (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
              (C2263 - C2264) * C47336) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C47389 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47378 +
            ((C12596 * C15923 + C12597 * C15919 + (C2148 - C2147) * C15924 +
              (C2150 - C2149) * C47336) *
                 C31197 +
             ((C12601 - C12600) * C15923 + (C12603 - C12602) * C15919 +
              (C47255 * C2369 - C113 * C2364) * C15924 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47255 * C124 - C113 * C117) * C15923 +
                       (C47255 * C138 - C113 * C125) * C15919 +
                       (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                          C31197 +
                      ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                       C10670 * C15924 + C10671 * C47336) *
                          C47369) *
                         C47318 +
                     (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                       C10672 * C15924 + C10673 * C47336) *
                          C31197 +
                      ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                       C10678 * C15924 + C10679 * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    ((((C113 * C287 - C47255 * C297) * C15923 +
                       (C113 * C298 - C47255 * C317) * C15919 +
                       (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                          C31197 +
                      ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                       C11146 * C15924 + C11147 * C47336) *
                          C47369) *
                         C47318 +
                     (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                       C11148 * C15924 + C11149 * C47336) *
                          C31197 +
                      ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                       C12596 * C15924 + C12597 * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47028 +
                   (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                       (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                          C31197 +
                      (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                       C534 * C47336) *
                          C47369) *
                         C47318 +
                     ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
                       C10683 * C47336) *
                          C31197 +
                      (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
                       C536 * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                       (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                          C31197 +
                      (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                       C940 * C47336) *
                          C47369) *
                         C47318 +
                     ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
                       C11151 * C47336) *
                          C31197 +
                      (C12598 * C15923 + C12599 * C15919 +
                       (C2147 - C2148) * C15924 + (C2149 - C2150) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47037 +
                   ((((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                       (C157 - C156) * C47336) *
                          C31197 +
                      (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                       C756 * C47336) *
                          C47369) *
                         C47318 +
                     ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
                       C10947 * C47336) *
                          C31197 +
                      (C10684 * C15923 + C10685 * C15919 +
                       (C529 - C530) * C15924 + (C531 - C532) * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    (((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                       (C347 - C346) * C47336) *
                          C31197 +
                      (C11150 * C15923 + C11151 * C15919 +
                       (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                          C47369) *
                         C47318 +
                     ((C939 * C15923 + C940 * C15919 + (C936 - C935) * C15924 +
                       (C938 - C937) * C47336) *
                          C31197 +
                      ((C2148 - C2147) * C15923 + (C2150 - C2149) * C15919 +
                       (C47255 * C2139 - C113 * C2138) * C15924 +
                       (C47255 * C2141 - C113 * C2140) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[154] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47069 * C2472 +
                    (((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C47394 +
                   ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                      (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                         C31197 +
                     (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                      C534 * C47336) *
                         C47369) *
                        C47069 * C2472 +
                    (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                      (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                         C31197 +
                     (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                      C940 * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C47387 +
                   (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                      (C157 - C156) * C47336) *
                         C31197 +
                     (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                      C756 * C47336) *
                         C47369) *
                        C47069 * C2472 +
                    ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                      (C347 - C346) * C47336) *
                         C31197 +
                     (C11150 * C15923 + C11151 * C15919 +
                      (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C47374 +
                   (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
                      (C161 - C160) * C47336) *
                         C31197 +
                     (C10946 * C15923 + C10947 * C15919 +
                      (C757 - C758) * C15924 + (C759 - C760) * C47336) *
                         C47369) *
                        C47069 * C2472 +
                    ((C645 * C15923 + C646 * C15919 + (C648 - C647) * C15924 +
                      (C650 - C649) * C47336) *
                         C31197 +
                     ((C936 - C935) * C15923 + (C938 - C937) * C15919 +
                      (C47255 * C919 - C113 * C910) * C15924 +
                      (C47255 * C925 - C113 * C920) * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C47353)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47069 * C47395 +
                    (((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47069 * C47391 +
                    (((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C47069 * C47381 +
                    (((C113 * C1124 - C47255 * C1130) * C15923 +
                      (C113 * C1131 - C47255 * C1142) * C15919 +
                      (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                         C31197 +
                     ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
                      (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                         C47369) *
                        C47069 * C47359) *
                       C2580 +
                   ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                      (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                         C31197 +
                     (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                      C534 * C47336) *
                         C47369) *
                        C47069 * C47395 +
                    (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                      (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                         C31197 +
                     (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                      C940 * C47336) *
                         C47369) *
                        C47069 * C47391 +
                    (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
                      (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                         C31197 +
                     (C11872 * C15923 + C11873 * C15919 +
                      (C1565 - C1566) * C15924 + (C1567 - C1568) * C47336) *
                         C47369) *
                        C47069 * C47381 +
                    (((C1404 - C1403) * C15923 + (C1406 - C1405) * C15919 +
                      (C1408 - C1407) * C15924 + (C1410 - C1409) * C47336) *
                         C31197 +
                     ((C11673 - C11672) * C15923 + (C11675 - C11674) * C15919 +
                      (C47255 * C1673 - C113 * C1668) * C15924 +
                      (C47255 * C1677 - C113 * C1674) * C47336) *
                         C47369) *
                        C47069 * C47359) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C47255 * C303 - C113 * C290) * C15923 +
              (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
              (C338 - C339) * C47336) *
                 C31197 +
             ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
              C11870 * C15924 + C11871 * C47336) *
                 C47369) *
                C3234 +
            (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
              C11872 * C15924 + C11873 * C47336) *
                 C31197 +
             ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
              (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C47303 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C337 - C336) * C15923 + (C339 - C338) * C15919 +
              (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                 C31197 +
             (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C3234 +
            ((C11870 * C15923 + C11871 * C15919 + (C1566 - C1565) * C15924 +
              (C1568 - C1567) * C47336) *
                 C31197 +
             ((C11539 - C11538) * C15923 + (C11541 - C11540) * C15919 +
              (C47255 * C1283 - C113 * C1266) * C15924 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47152 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C47159 +
                    (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
                      C10680 * C15924 + C10681 * C47336) *
                         C31197 +
                     ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
                      C12734 * C15924 + C12735 * C47336) *
                         C47369) *
                        C3742) *
                       C47110 +
                   ((((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47152 +
                    (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                      C11148 * C15924 + C11149 * C47336) *
                         C31197 +
                     ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                      C12596 * C15924 + C12597 * C47336) *
                         C47369) *
                        C47159 +
                    (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
                      C12598 * C15924 + C12599 * C47336) *
                         C31197 +
                     ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
                      (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                         C47369) *
                        C3742) *
                       C47117 +
                   ((((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C47152 +
                    (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
                      C11872 * C15924 + C11873 * C47336) *
                         C31197 +
                     ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
                      (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                         C47369) *
                        C47159 +
                    (((C11535 - C11534) * C15923 + (C11537 - C11536) * C15919 +
                      (C11539 - C11538) * C15924 + (C11541 - C11540) * C47336) *
                         C31197 +
                     ((C47255 * C7319 - C113 * C7317) * C15923 +
                      (C47255 * C7323 - C113 * C7320) * C15919 +
                      (C47255 * C7321 - C113 * C7318) * C15924 +
                      (C47255 * C7324 - C113 * C7322) * C47336) *
                         C47369) *
                        C3742) *
                       C2840) *
                  C47023) /
                 (p * q * std::sqrt(p + q));
    d2ee[157] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C3234 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C47156) *
                       C47395 +
                   ((((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C3234 +
                    (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                      C11148 * C15924 + C11149 * C47336) *
                         C31197 +
                     ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                      C12596 * C15924 + C12597 * C47336) *
                         C47369) *
                        C47156) *
                       C47391 +
                   ((((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C3234 +
                    (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
                      C11872 * C15924 + C11873 * C47336) *
                         C31197 +
                     ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
                      (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                         C47369) *
                        C47156) *
                       C47381 +
                   ((((C113 * C1124 - C47255 * C1130) * C15923 +
                      (C113 * C1131 - C47255 * C1142) * C15919 +
                      (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                         C31197 +
                     ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
                      (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                         C47369) *
                        C3234 +
                    (((C12005 - C12004) * C15923 + (C12007 - C12006) * C15919 +
                      (C11673 - C11672) * C15924 + (C11675 - C11674) * C47336) *
                         C31197 +
                     ((C47255 * C5981 - C113 * C5979) * C15923 +
                      (C47255 * C5985 - C113 * C5982) * C15919 +
                      (C47255 * C5983 - C113 * C5980) * C15924 +
                      (C47255 * C5986 - C113 * C5984) * C47336) *
                         C47369) *
                        C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47255 * C124 - C113 * C117) * C15923 +
                       (C47255 * C138 - C113 * C125) * C15919 +
                       (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                          C31197 +
                      ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                       C10670 * C15924 + C10671 * C47336) *
                          C47369) *
                         C3234 +
                     (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                       C10672 * C15924 + C10673 * C47336) *
                          C31197 +
                      ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                       C10678 * C15924 + C10679 * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    ((((C113 * C287 - C47255 * C297) * C15923 +
                       (C113 * C298 - C47255 * C317) * C15919 +
                       (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                          C31197 +
                      ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                       C11146 * C15924 + C11147 * C47336) *
                          C47369) *
                         C3234 +
                     (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                       C11148 * C15924 + C11149 * C47336) *
                          C31197 +
                      ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                       C12596 * C15924 + C12597 * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47385 +
                   (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                       (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                          C31197 +
                      (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                       C534 * C47336) *
                          C47369) *
                         C3234 +
                     ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
                       C10683 * C47336) *
                          C31197 +
                      (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
                       C536 * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                       (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                          C31197 +
                      (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                       C940 * C47336) *
                          C47369) *
                         C3234 +
                     ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
                       C11151 * C47336) *
                          C31197 +
                      (C12598 * C15923 + C12599 * C15919 +
                       (C2147 - C2148) * C15924 + (C2149 - C2150) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47372 +
                   ((((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                       (C157 - C156) * C47336) *
                          C31197 +
                      (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                       C756 * C47336) *
                          C47369) *
                         C3234 +
                     ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
                       C10947 * C47336) *
                          C31197 +
                      (C10684 * C15923 + C10685 * C15919 +
                       (C529 - C530) * C15924 + (C531 - C532) * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    (((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                       (C347 - C346) * C47336) *
                          C31197 +
                      (C11150 * C15923 + C11151 * C15919 +
                       (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                          C47369) *
                         C3234 +
                     ((C939 * C15923 + C940 * C15919 + (C936 - C935) * C15924 +
                       (C938 - C937) * C47336) *
                          C31197 +
                      ((C2148 - C2147) * C15923 + (C2150 - C2149) * C15919 +
                       (C47255 * C2139 - C113 * C2138) * C15924 +
                       (C47255 * C2141 - C113 * C2140) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47396 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C47393 +
                    (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
                      C10680 * C15924 + C10681 * C47336) *
                         C31197 +
                     ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
                      C12734 * C15924 + C12735 * C47336) *
                         C47369) *
                        C47384 +
                    (((C12391 - C12390) * C15923 + (C12393 - C12392) * C15919 +
                      C12736 * C15924 + C12737 * C47336) *
                         C31197 +
                     ((C12394 - C12395) * C15923 + (C12396 - C12397) * C15919 +
                      (C12398 - C12399) * C15924 + (C12400 - C12401) * C47336) *
                         C47369) *
                        C47365) *
                       C2472 +
                   ((((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47396 +
                    (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                      C11148 * C15924 + C11149 * C47336) *
                         C31197 +
                     ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                      C12596 * C15924 + C12597 * C47336) *
                         C47369) *
                        C47393 +
                    (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
                      C12598 * C15924 + C12599 * C47336) *
                         C31197 +
                     ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
                      (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                         C47369) *
                        C47384 +
                    (((C12869 - C12868) * C15923 + (C12871 - C12870) * C15919 +
                      (C12601 - C12600) * C15924 + (C12603 - C12602) * C47336) *
                         C31197 +
                     ((C47255 * C6841 - C113 * C6839) * C15923 +
                      (C47255 * C6845 - C113 * C6842) * C15919 +
                      (C47255 * C6843 - C113 * C6840) * C15924 +
                      (C47255 * C6846 - C113 * C6844) * C47336) *
                         C47369) *
                        C47365) *
                       C47114) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C47152 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47159 +
            (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
              C10680 * C15924 + C10681 * C47336) *
                 C31197 +
             ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
              C12734 * C15924 + C12735 * C47336) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C47152 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47159 +
            (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
              C12598 * C15924 + C12599 * C47336) *
                 C31197 +
             ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
              (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C47303 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C47152 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47159 +
            ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
              C10685 * C47336) *
                 C31197 +
             (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
              (C2263 - C2264) * C47336) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C47152 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47159 +
            ((C12596 * C15923 + C12597 * C15919 + (C2148 - C2147) * C15924 +
              (C2150 - C2149) * C47336) *
                 C31197 +
             ((C12601 - C12600) * C15923 + (C12603 - C12602) * C15919 +
              (C47255 * C2369 - C113 * C2364) * C15924 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47255 * C124 - C113 * C117) * C15923 +
                       (C47255 * C138 - C113 * C125) * C15919 +
                       (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                          C31197 +
                      ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                       C10670 * C15924 + C10671 * C47336) *
                          C47369) *
                         C3234 +
                     (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                       C10672 * C15924 + C10673 * C47336) *
                          C31197 +
                      ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                       C10678 * C15924 + C10679 * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    ((((C113 * C287 - C47255 * C297) * C15923 +
                       (C113 * C298 - C47255 * C317) * C15919 +
                       (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                          C31197 +
                      ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                       C11146 * C15924 + C11147 * C47336) *
                          C47369) *
                         C3234 +
                     (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                       C11148 * C15924 + C11149 * C47336) *
                          C31197 +
                      ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                       C12596 * C15924 + C12597 * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47385 +
                   (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                       (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                          C31197 +
                      (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                       C534 * C47336) *
                          C47369) *
                         C3234 +
                     ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
                       C10683 * C47336) *
                          C31197 +
                      (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
                       C536 * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                       (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                          C31197 +
                      (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                       C940 * C47336) *
                          C47369) *
                         C3234 +
                     ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
                       C11151 * C47336) *
                          C31197 +
                      (C12598 * C15923 + C12599 * C15919 +
                       (C2147 - C2148) * C15924 + (C2149 - C2150) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47372 +
                   ((((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                       (C157 - C156) * C47336) *
                          C31197 +
                      (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                       C756 * C47336) *
                          C47369) *
                         C3234 +
                     ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
                       C10947 * C47336) *
                          C31197 +
                      (C10684 * C15923 + C10685 * C15919 +
                       (C529 - C530) * C15924 + (C531 - C532) * C47336) *
                          C47369) *
                         C47156) *
                        C2472 +
                    (((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                       (C347 - C346) * C47336) *
                          C31197 +
                      (C11150 * C15923 + C11151 * C15919 +
                       (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                          C47369) *
                         C3234 +
                     ((C939 * C15923 + C940 * C15919 + (C936 - C935) * C15924 +
                       (C938 - C937) * C47336) *
                          C31197 +
                      ((C2148 - C2147) * C15923 + (C2150 - C2149) * C15919 +
                       (C47255 * C2139 - C113 * C2138) * C15924 +
                       (C47255 * C2141 - C113 * C2140) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C3234 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C47156) *
                       C47395 +
                   ((((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C3234 +
                    (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                      C11148 * C15924 + C11149 * C47336) *
                         C31197 +
                     ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                      C12596 * C15924 + C12597 * C47336) *
                         C47369) *
                        C47156) *
                       C47391 +
                   ((((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C3234 +
                    (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
                      C11872 * C15924 + C11873 * C47336) *
                         C31197 +
                     ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
                      (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                         C47369) *
                        C47156) *
                       C47381 +
                   ((((C113 * C1124 - C47255 * C1130) * C15923 +
                      (C113 * C1131 - C47255 * C1142) * C15919 +
                      (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                         C31197 +
                     ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
                      (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                         C47369) *
                        C3234 +
                    (((C12005 - C12004) * C15923 + (C12007 - C12006) * C15919 +
                      (C11673 - C11672) * C15924 + (C11675 - C11674) * C47336) *
                         C31197 +
                     ((C47255 * C5981 - C113 * C5979) * C15923 +
                      (C47255 * C5985 - C113 * C5982) * C15919 +
                      (C47255 * C5983 - C113 * C5980) * C15924 +
                      (C47255 * C5986 - C113 * C5984) * C47336) *
                         C47369) *
                        C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C1392 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C1393 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C1394 +
           (((C113 * C1124 - C47255 * C1130) * C15923 +
             (C113 * C1131 - C47255 * C1142) * C15919 +
             (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                C31197 +
            ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
             (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47303 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C1392 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C1393 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C1394 +
           (((C1404 - C1403) * C15923 + (C1406 - C1405) * C15919 +
             (C1408 - C1407) * C15924 + (C1410 - C1409) * C47336) *
                C31197 +
            ((C11673 - C11672) * C15923 + (C11675 - C11674) * C15919 +
             (C47255 * C1673 - C113 * C1668) * C15924 +
             (C47255 * C1677 - C113 * C1674) * C47336) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C47317 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C47114) *
              C636 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C47317 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C47114) *
              C637 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C47317 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47114) *
              C638 +
          (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
             (C161 - C160) * C47336) *
                C31197 +
            (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
             (C759 - C760) * C47336) *
                C47369) *
               C47069 * C47317 +
           ((C645 * C15923 + C646 * C15919 + (C648 - C647) * C15924 +
             (C650 - C649) * C47336) *
                C31197 +
            ((C936 - C935) * C15923 + (C938 - C937) * C15919 +
             (C47255 * C919 - C113 * C910) * C15924 +
             (C47255 * C925 - C113 * C920) * C47336) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C1788 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C1789 +
            (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
              C10680 * C15924 + C10681 * C47336) *
                 C31197 +
             ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
              C12734 * C15924 + C12735 * C47336) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C1788 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C1789 +
            (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
              C12598 * C15924 + C12599 * C47336) *
                 C31197 +
             ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
              (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C47303 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C1788 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C1789 +
            ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
              C10685 * C47336) *
                 C31197 +
             (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
              (C2263 - C2264) * C47336) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C1788 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C1789 +
            ((C12596 * C15923 + C12597 * C15919 + (C2148 - C2147) * C15924 +
              (C2150 - C2149) * C47336) *
                 C31197 +
             ((C12601 - C12600) * C15923 + (C12603 - C12602) * C15919 +
              (C47255 * C2369 - C113 * C2364) * C15924 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47318 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C47156) *
                       C1392 +
                   ((((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47318 +
                    (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                      C11148 * C15924 + C11149 * C47336) *
                         C31197 +
                     ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                      C12596 * C15924 + C12597 * C47336) *
                         C47369) *
                        C47156) *
                       C1393 +
                   ((((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C47318 +
                    (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
                      C11872 * C15924 + C11873 * C47336) *
                         C31197 +
                     ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
                      (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                         C47369) *
                        C47156) *
                       C1394 +
                   ((((C113 * C1124 - C47255 * C1130) * C15923 +
                      (C113 * C1131 - C47255 * C1142) * C15919 +
                      (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                         C31197 +
                     ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
                      (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                         C47369) *
                        C47318 +
                    (((C12005 - C12004) * C15923 + (C12007 - C12006) * C15919 +
                      (C11673 - C11672) * C15924 + (C11675 - C11674) * C47336) *
                         C31197 +
                     ((C47255 * C5981 - C113 * C5979) * C15923 +
                      (C47255 * C5985 - C113 * C5982) * C15919 +
                      (C47255 * C5983 - C113 * C5980) * C15924 +
                      (C47255 * C5986 - C113 * C5984) * C47336) *
                         C47369) *
                        C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47255 * C124 - C113 * C117) * C15923 +
                       (C47255 * C138 - C113 * C125) * C15919 +
                       (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                          C31197 +
                      ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                       C10670 * C15924 + C10671 * C47336) *
                          C47369) *
                         C47318 +
                     (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                       C10672 * C15924 + C10673 * C47336) *
                          C31197 +
                      ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                       C10678 * C15924 + C10679 * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    ((((C113 * C287 - C47255 * C297) * C15923 +
                       (C113 * C298 - C47255 * C317) * C15919 +
                       (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                          C31197 +
                      ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                       C11146 * C15924 + C11147 * C47336) *
                          C47369) *
                         C47318 +
                     (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                       C11148 * C15924 + C11149 * C47336) *
                          C31197 +
                      ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                       C12596 * C15924 + C12597 * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C284 +
                   (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                       (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                          C31197 +
                      (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                       C534 * C47336) *
                          C47369) *
                         C47318 +
                     ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
                       C10683 * C47336) *
                          C31197 +
                      (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
                       C536 * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                       (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                          C31197 +
                      (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                       C940 * C47336) *
                          C47369) *
                         C47318 +
                     ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
                       C11151 * C47336) *
                          C31197 +
                      (C12598 * C15923 + C12599 * C15919 +
                       (C2147 - C2148) * C15924 + (C2149 - C2150) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C285 +
                   ((((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                       (C157 - C156) * C47336) *
                          C31197 +
                      (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                       C756 * C47336) *
                          C47369) *
                         C47318 +
                     ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
                       C10947 * C47336) *
                          C31197 +
                      (C10684 * C15923 + C10685 * C15919 +
                       (C529 - C530) * C15924 + (C531 - C532) * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    (((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                       (C347 - C346) * C47336) *
                          C31197 +
                      (C11150 * C15923 + C11151 * C15919 +
                       (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                          C47369) *
                         C47318 +
                     ((C939 * C15923 + C940 * C15919 + (C936 - C935) * C15924 +
                       (C938 - C937) * C47336) *
                          C31197 +
                      ((C2148 - C2147) * C15923 + (C2150 - C2149) * C15919 +
                       (C47255 * C2139 - C113 * C2138) * C15924 +
                       (C47255 * C2141 - C113 * C2140) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C2248 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C2249 +
                    (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
                      C10680 * C15924 + C10681 * C47336) *
                         C31197 +
                     ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
                      C12734 * C15924 + C12735 * C47336) *
                         C47369) *
                        C2250 +
                    (((C12391 - C12390) * C15923 + (C12393 - C12392) * C15919 +
                      C12736 * C15924 + C12737 * C47336) *
                         C31197 +
                     ((C12394 - C12395) * C15923 + (C12396 - C12397) * C15919 +
                      (C12398 - C12399) * C15924 + (C12400 - C12401) * C47336) *
                         C47369) *
                        C47365) *
                       C47317 +
                   ((((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C2248 +
                    (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                      C11148 * C15924 + C11149 * C47336) *
                         C31197 +
                     ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                      C12596 * C15924 + C12597 * C47336) *
                         C47369) *
                        C2249 +
                    (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
                      C12598 * C15924 + C12599 * C47336) *
                         C31197 +
                     ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
                      (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                         C47369) *
                        C2250 +
                    (((C12869 - C12868) * C15923 + (C12871 - C12870) * C15919 +
                      (C12601 - C12600) * C15924 + (C12603 - C12602) * C47336) *
                         C31197 +
                     ((C47255 * C6841 - C113 * C6839) * C15923 +
                      (C47255 * C6845 - C113 * C6842) * C15919 +
                      (C47255 * C6843 - C113 * C6840) * C15924 +
                      (C47255 * C6846 - C113 * C6844) * C47336) *
                         C47369) *
                        C47365) *
                       C47114) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47255 * C124 - C113 * C117) * C15923 +
                (C47255 * C138 - C113 * C125) * C15919 +
                (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                   C31197 +
               ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                C10670 * C15924 + C10671 * C47336) *
                   C47369) *
                  C47069 * C47051 * C108 +
              (((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                   C31197 +
               (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                C534 * C47336) *
                   C47369) *
                  C47069 * C47051 * C109 +
              ((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                (C157 - C156) * C47336) *
                   C31197 +
               (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                C756 * C47336) *
                   C47369) *
                  C47069 * C47051 * C110 +
              ((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
                (C161 - C160) * C47336) *
                   C31197 +
               (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
                (C759 - C760) * C47336) *
                   C47369) *
                  C47069 * C47051 * C111 +
              ((C170 * C15923 + C171 * C15919 + (C163 - C162) * C15924 +
                (C165 - C164) * C47336) *
                   C31197 +
               ((C758 - C757) * C15923 + (C760 - C759) * C15919 +
                (C47255 * C751 - C113 * C750) * C15924 +
                (C47255 * C753 - C113 * C752) * C47336) *
                   C47369) *
                  C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47255 * C124 - C113 * C117) * C15923 +
                 (C47255 * C138 - C113 * C125) * C15919 +
                 (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                    C31197 +
                ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                 C10670 * C15924 + C10671 * C47336) *
                    C47369) *
                   C47069 * C47388 +
               (((C113 * C287 - C47255 * C297) * C15923 +
                 (C113 * C298 - C47255 * C317) * C15919 +
                 (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                    C31197 +
                ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                 C11146 * C15924 + C11147 * C47336) *
                    C47369) *
                   C47069 * C47376 +
               (((C47255 * C303 - C113 * C290) * C15923 +
                 (C47255 * C320 - C113 * C304) * C15919 +
                 (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                    C31197 +
                ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                 C11870 * C15924 + C11871 * C47336) *
                    C47369) *
                   C47069 * C47349) *
                  C284 +
              ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                 (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                    C31197 +
                (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                 C534 * C47336) *
                    C47369) *
                   C47069 * C47388 +
               (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                 (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                    C31197 +
                (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                 C940 * C47336) *
                    C47369) *
                   C47069 * C47376 +
               (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
                 (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                    C31197 +
                (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
                 (C1567 - C1568) * C47336) *
                    C47369) *
                   C47069 * C47349) *
                  C285 +
              (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                 (C157 - C156) * C47336) *
                    C31197 +
                (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                 C756 * C47336) *
                    C47369) *
                   C47069 * C47388 +
               ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                 (C347 - C346) * C47336) *
                    C31197 +
                (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
                 (C937 - C938) * C47336) *
                    C47369) *
                   C47069 * C47376 +
               ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
                 (C351 - C350) * C47336) *
                    C31197 +
                ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
                 (C47255 * C1557 - C113 * C1556) * C15924 +
                 (C47255 * C1559 - C113 * C1558) * C47336) *
                    C47369) *
                   C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47389 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C47378 +
           ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
             C10685 * C47336) *
                C31197 +
            (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C285 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47389 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C47378 +
           ((C535 * C15923 + C536 * C15919 + (C530 - C529) * C15924 +
             (C532 - C531) * C47336) *
                C31197 +
            ((C2262 - C2261) * C15923 + (C2264 - C2263) * C15919 +
             (C47255 * C2253 - C113 * C2252) * C15924 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
             (C351 - C350) * C47336) *
                C31197 +
            ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
             (C47255 * C1557 - C113 * C1556) * C15924 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C15923 +
            (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
            (C330 - C331) * C47336) *
               C31197 +
           ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
            C11146 * C15924 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C15923 +
            (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
            (C338 - C339) * C47336) *
               C31197 +
           ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
            C11870 * C15924 + C11871 * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C15923 +
            (C113 * C1131 - C47255 * C1142) * C15919 +
            (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
               C31197 +
           ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
            (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C15923 +
            (C47255 * C1145 - C113 * C1137) * C15919 +
            (C47255 * C1138 - C113 * C1128) * C15924 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C31197 +
           ((C47255 * C6459 - C113 * C6457) * C15923 +
            (C47255 * C6463 - C113 * C6460) * C15919 +
            (C47255 * C6461 - C113 * C6458) * C15924 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C1050 +
          ((((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47389 +
           (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
             C11148 * C15924 + C11149 * C47336) *
                C31197 +
            ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
             C12596 * C15924 + C12597 * C47336) *
                C47369) *
               C47378 +
           (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
             C12598 * C15924 + C12599 * C47336) *
                C31197 +
            ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
             (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                C47369) *
               C47352) *
              C1051 +
          ((((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47389 +
           (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
             C11872 * C15924 + C11873 * C47336) *
                C31197 +
            ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
             (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                C47369) *
               C47378 +
           (((C11535 - C11534) * C15923 + (C11537 - C11536) * C15919 +
             (C11539 - C11538) * C15924 + (C11541 - C11540) * C47336) *
                C31197 +
            ((C47255 * C7319 - C113 * C7317) * C15923 +
             (C47255 * C7323 - C113 * C7320) * C15919 +
             (C47255 * C7321 - C113 * C7318) * C15924 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C1788 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C1789 +
           ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
             C10685 * C47336) *
                C31197 +
            (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C1788 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C1789 +
           ((C535 * C15923 + C536 * C15919 + (C530 - C529) * C15924 +
             (C532 - C531) * C47336) *
                C31197 +
            ((C2262 - C2261) * C15923 + (C2264 - C2263) * C15919 +
             (C47255 * C2253 - C113 * C2252) * C15924 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C47388 +
          ((((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C1788 +
           (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
             C11148 * C15924 + C11149 * C47336) *
                C31197 +
            ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
             C12596 * C15924 + C12597 * C47336) *
                C47369) *
               C1789 +
           (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
             C12598 * C15924 + C12599 * C47336) *
                C31197 +
            ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
             (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                C47369) *
               C47352) *
              C47376 +
          ((((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C1788 +
           (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
             C11872 * C15924 + C11873 * C47336) *
                C31197 +
            ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
             (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                C47369) *
               C1789 +
           (((C11535 - C11534) * C15923 + (C11537 - C11536) * C15919 +
             (C11539 - C11538) * C15924 + (C11541 - C11540) * C47336) *
                C31197 +
            ((C47255 * C7319 - C113 * C7317) * C15923 +
             (C47255 * C7323 - C113 * C7320) * C15919 +
             (C47255 * C7321 - C113 * C7318) * C15924 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C1963 +
          (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
            C10672 * C15924 + C10673 * C47336) *
               C31197 +
           ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
            C10678 * C15924 + C10679 * C47336) *
               C47369) *
              C1964 +
          (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
            C10680 * C15924 + C10681 * C47336) *
               C31197 +
           ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
            C12734 * C15924 + C12735 * C47336) *
               C47369) *
              C1965 +
          (((C12391 - C12390) * C15923 + (C12393 - C12392) * C15919 +
            C12736 * C15924 + C12737 * C47336) *
               C31197 +
           ((C12394 - C12395) * C15923 + (C12396 - C12397) * C15919 +
            (C12398 - C12399) * C15924 + (C12400 - C12401) * C47336) *
               C47369) *
              C1966 +
          (((C12395 - C12394) * C15923 + (C12397 - C12396) * C15919 +
            (C12399 - C12398) * C15924 + (C12401 - C12400) * C47336) *
               C31197 +
           ((C47255 * C12383 - C113 * C12381) * C15923 +
            (C47255 * C12387 - C113 * C12384) * C15919 +
            (C47255 * C12385 - C113 * C12382) * C15924 +
            (C47255 * C12388 - C113 * C12386) * C47336) *
               C47369) *
              C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C47255 * C303 - C113 * C290) * C15923 +
              (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
              (C338 - C339) * C47336) *
                 C31197 +
             ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
              C11870 * C15924 + C11871 * C47336) *
                 C47369) *
                C47318 +
            (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
              C11872 * C15924 + C11873 * C47336) *
                 C31197 +
             ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
              (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C337 - C336) * C15923 + (C339 - C338) * C15919 +
              (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                 C31197 +
             (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C47318 +
            ((C11870 * C15923 + C11871 * C15919 + (C1566 - C1565) * C15924 +
              (C1568 - C1567) * C47336) *
                 C31197 +
             ((C11539 - C11538) * C15923 + (C11541 - C11540) * C15919 +
              (C47255 * C1283 - C113 * C1266) * C15924 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47318 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47318 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C637 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47318 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C638 +
          (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
             (C161 - C160) * C47336) *
                C31197 +
            (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
             (C759 - C760) * C47336) *
                C47369) *
               C47318 +
           ((C755 * C15923 + C756 * C15919 + (C758 - C757) * C15924 +
             (C760 - C759) * C47336) *
                C31197 +
            ((C530 - C529) * C15923 + (C532 - C531) * C15919 +
             (C47255 * C496 - C113 * C477) * C15924 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C2248 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C2249 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C2250 +
           (((C12391 - C12390) * C15923 + (C12393 - C12392) * C15919 +
             C12736 * C15924 + C12737 * C47336) *
                C31197 +
            ((C12394 - C12395) * C15923 + (C12396 - C12397) * C15919 +
             (C12398 - C12399) * C15924 + (C12400 - C12401) * C47336) *
                C47369) *
               C47365) *
              C47051 * C47303 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C2248 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C2249 +
           ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
             C10685 * C47336) *
                C31197 +
            (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C2250 +
           ((C12734 * C15923 + C12735 * C15919 + (C2262 - C2261) * C15924 +
             (C2264 - C2263) * C47336) *
                C31197 +
            ((C12399 - C12398) * C15923 + (C12401 - C12400) * C15919 +
             (C47255 * C1984 - C113 * C1973) * C15924 +
             (C47255 * C1991 - C113 * C1985) * C47336) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C285 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C47388 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47376 +
           ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
             (C351 - C350) * C47336) *
                C31197 +
            ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
             (C47255 * C1557 - C113 * C1556) * C15924 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C15923 + (C149 - C148) * C15919 +
            (C151 - C150) * C15924 + (C153 - C152) * C47336) *
               C31197 +
           (C10672 * C15923 + C10673 * C15919 + C533 * C15924 + C534 * C47336) *
               C47369) *
              C47069 * C47051 * C109 +
          ((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
            (C157 - C156) * C47336) *
               C31197 +
           (C10682 * C15923 + C10683 * C15919 + C755 * C15924 + C756 * C47336) *
               C47369) *
              C47069 * C47051 * C110 +
          ((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
            (C161 - C160) * C47336) *
               C31197 +
           (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
            (C759 - C760) * C47336) *
               C47369) *
              C47069 * C47051 * C111 +
          ((C170 * C15923 + C171 * C15919 + (C163 - C162) * C15924 +
            (C165 - C164) * C47336) *
               C31197 +
           ((C758 - C757) * C15923 + (C760 - C759) * C15919 +
            (C47255 * C751 - C113 * C750) * C15924 +
            (C47255 * C753 - C113 * C752) * C47336) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
             (C351 - C350) * C47336) *
                C31197 +
            ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
             (C47255 * C1557 - C113 * C1556) * C15924 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C15923 +
            (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
            (C330 - C331) * C47336) *
               C31197 +
           ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
            C11146 * C15924 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C15923 +
            (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
            (C338 - C339) * C47336) *
               C31197 +
           ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
            C11870 * C15924 + C11871 * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C15923 +
            (C113 * C1131 - C47255 * C1142) * C15919 +
            (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
               C31197 +
           ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
            (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C15923 +
            (C47255 * C1145 - C113 * C1137) * C15919 +
            (C47255 * C1138 - C113 * C1128) * C15924 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C31197 +
           ((C47255 * C6459 - C113 * C6457) * C15923 +
            (C47255 * C6463 - C113 * C6460) * C15919 +
            (C47255 * C6461 - C113 * C6458) * C15924 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C1788 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C1789 +
           ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
             C10685 * C47336) *
                C31197 +
            (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C1788 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C1789 +
           ((C535 * C15923 + C536 * C15919 + (C530 - C529) * C15924 +
             (C532 - C531) * C47336) *
                C31197 +
            ((C2262 - C2261) * C15923 + (C2264 - C2263) * C15919 +
             (C47255 * C2253 - C113 * C2252) * C15924 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C1788 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C1789 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C47388 +
          ((((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C1788 +
           (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
             C11148 * C15924 + C11149 * C47336) *
                C31197 +
            ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
             C12596 * C15924 + C12597 * C47336) *
                C47369) *
               C1789 +
           (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
             C12598 * C15924 + C12599 * C47336) *
                C31197 +
            ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
             (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                C47369) *
               C47352) *
              C47376 +
          ((((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C1788 +
           (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
             C11872 * C15924 + C11873 * C47336) *
                C31197 +
            ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
             (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                C47369) *
               C1789 +
           (((C11535 - C11534) * C15923 + (C11537 - C11536) * C15919 +
             (C11539 - C11538) * C15924 + (C11541 - C11540) * C47336) *
                C31197 +
            ((C47255 * C7319 - C113 * C7317) * C15923 +
             (C47255 * C7323 - C113 * C7320) * C15919 +
             (C47255 * C7321 - C113 * C7318) * C15924 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47255 * C124 - C113 * C117) * C15923 +
                       (C47255 * C138 - C113 * C125) * C15919 +
                       (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                          C31197 +
                      ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                       C10670 * C15924 + C10671 * C47336) *
                          C47369) *
                         C3234 +
                     (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                       C10672 * C15924 + C10673 * C47336) *
                          C31197 +
                      ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                       C10678 * C15924 + C10679 * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    ((((C113 * C287 - C47255 * C297) * C15923 +
                       (C113 * C298 - C47255 * C317) * C15919 +
                       (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                          C31197 +
                      ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                       C11146 * C15924 + C11147 * C47336) *
                          C47369) *
                         C3234 +
                     (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                       C11148 * C15924 + C11149 * C47336) *
                          C31197 +
                      ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                       C12596 * C15924 + C12597 * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47028 +
                   (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                       (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                          C31197 +
                      (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                       C534 * C47336) *
                          C47369) *
                         C3234 +
                     ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
                       C10683 * C47336) *
                          C31197 +
                      (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
                       C536 * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                       (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                          C31197 +
                      (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                       C940 * C47336) *
                          C47369) *
                         C3234 +
                     ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
                       C11151 * C47336) *
                          C31197 +
                      (C12598 * C15923 + C12599 * C15919 +
                       (C2147 - C2148) * C15924 + (C2149 - C2150) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47037 +
                   ((((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                       (C157 - C156) * C47336) *
                          C31197 +
                      (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                       C756 * C47336) *
                          C47369) *
                         C3234 +
                     ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
                       C10947 * C47336) *
                          C31197 +
                      (C10684 * C15923 + C10685 * C15919 +
                       (C529 - C530) * C15924 + (C531 - C532) * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    (((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                       (C347 - C346) * C47336) *
                          C31197 +
                      (C11150 * C15923 + C11151 * C15919 +
                       (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                          C47369) *
                         C3234 +
                     ((C939 * C15923 + C940 * C15919 + (C936 - C935) * C15924 +
                       (C938 - C937) * C47336) *
                          C31197 +
                      ((C2148 - C2147) * C15923 + (C2150 - C2149) * C15919 +
                       (C47255 * C2139 - C113 * C2138) * C15924 +
                       (C47255 * C2141 - C113 * C2140) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C47152 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47159 +
            (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
              C10680 * C15924 + C10681 * C47336) *
                 C31197 +
             ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
              C12734 * C15924 + C12735 * C47336) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C47152 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47159 +
            (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
              C12598 * C15924 + C12599 * C47336) *
                 C31197 +
             ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
              (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C2580 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C47152 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47159 +
            ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
              C10685 * C47336) *
                 C31197 +
             (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
              (C2263 - C2264) * C47336) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C47152 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47159 +
            ((C12596 * C15923 + C12597 * C15919 + (C2148 - C2147) * C15924 +
              (C2150 - C2149) * C47336) *
                 C31197 +
             ((C12601 - C12600) * C15923 + (C12603 - C12602) * C15919 +
              (C47255 * C2369 - C113 * C2364) * C15924 +
              (C47255 * C2373 - C113 * C2370) * C47336) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C47255 * C303 - C113 * C290) * C15923 +
              (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
              (C338 - C339) * C47336) *
                 C31197 +
             ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
              C11870 * C15924 + C11871 * C47336) *
                 C47369) *
                C3234 +
            (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
              C11872 * C15924 + C11873 * C47336) *
                 C31197 +
             ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
              (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C337 - C336) * C15923 + (C339 - C338) * C15919 +
              (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                 C31197 +
             (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C3234 +
            ((C11870 * C15923 + C11871 * C15919 + (C1566 - C1565) * C15924 +
              (C1568 - C1567) * C47336) *
                 C31197 +
             ((C11539 - C11538) * C15923 + (C11541 - C11540) * C15919 +
              (C47255 * C1283 - C113 * C1266) * C15924 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C3234 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C3234 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C3234 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
             (C161 - C160) * C47336) *
                C31197 +
            (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
             (C759 - C760) * C47336) *
                C47369) *
               C3234 +
           ((C755 * C15923 + C756 * C15919 + (C758 - C757) * C15924 +
             (C760 - C759) * C47336) *
                C31197 +
            ((C530 - C529) * C15923 + (C532 - C531) * C15919 +
             (C47255 * C496 - C113 * C477) * C15924 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47396 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47393 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47384 +
           (((C12391 - C12390) * C15923 + (C12393 - C12392) * C15919 +
             C12736 * C15924 + C12737 * C47336) *
                C31197 +
            ((C12394 - C12395) * C15923 + (C12396 - C12397) * C15919 +
             (C12398 - C12399) * C15924 + (C12400 - C12401) * C47336) *
                C47369) *
               C47365) *
              C47051 * C2580 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47396 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C47393 +
           ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
             C10685 * C47336) *
                C31197 +
            (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C47384 +
           ((C12734 * C15923 + C12735 * C15919 + (C2262 - C2261) * C15924 +
             (C2264 - C2263) * C47336) *
                C31197 +
            ((C12399 - C12398) * C15923 + (C12401 - C12400) * C15919 +
             (C47255 * C1984 - C113 * C1973) * C15924 +
             (C47255 * C1991 - C113 * C1985) * C47336) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47152 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C47159 +
                    (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
                      C10680 * C15924 + C10681 * C47336) *
                         C31197 +
                     ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
                      C12734 * C15924 + C12735 * C47336) *
                         C47369) *
                        C3742) *
                       C47051 * C47028 +
                   ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                      (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                         C31197 +
                     (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                      C534 * C47336) *
                         C47369) *
                        C47152 +
                    ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
                      C10683 * C47336) *
                         C31197 +
                     (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
                      C536 * C47336) *
                         C47369) *
                        C47159 +
                    ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
                      C10685 * C47336) *
                         C31197 +
                     (C12736 * C15923 + C12737 * C15919 +
                      (C2261 - C2262) * C15924 + (C2263 - C2264) * C47336) *
                         C47369) *
                        C3742) *
                       C47051 * C47037 +
                   (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                      (C157 - C156) * C47336) *
                         C31197 +
                     (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                      C756 * C47336) *
                         C47369) *
                        C47152 +
                    ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
                      C10947 * C47336) *
                         C31197 +
                     (C10684 * C15923 + C10685 * C15919 +
                      (C529 - C530) * C15924 + (C531 - C532) * C47336) *
                         C47369) *
                        C47159 +
                    ((C535 * C15923 + C536 * C15919 + (C530 - C529) * C15924 +
                      (C532 - C531) * C47336) *
                         C31197 +
                     ((C2262 - C2261) * C15923 + (C2264 - C2263) * C15919 +
                      (C47255 * C2253 - C113 * C2252) * C15924 +
                      (C47255 * C2255 - C113 * C2254) * C47336) *
                         C47369) *
                        C3742) *
                       C47051 * C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C3234 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C3234 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C3234 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
             (C161 - C160) * C47336) *
                C31197 +
            (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
             (C759 - C760) * C47336) *
                C47369) *
               C3234 +
           ((C755 * C15923 + C756 * C15919 + (C758 - C757) * C15924 +
             (C760 - C759) * C47336) *
                C31197 +
            ((C530 - C529) * C15923 + (C532 - C531) * C15919 +
             (C47255 * C496 - C113 * C477) * C15924 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C3234 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C3234 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C47255 * C303 - C113 * C290) * C15923 +
              (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
              (C338 - C339) * C47336) *
                 C31197 +
             ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
              C11870 * C15924 + C11871 * C47336) *
                 C47369) *
                C3234 +
            (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
              C11872 * C15924 + C11873 * C47336) *
                 C31197 +
             ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
              (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C3234 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C3234 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C337 - C336) * C15923 + (C339 - C338) * C15919 +
              (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                 C31197 +
             (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C3234 +
            ((C11870 * C15923 + C11871 * C15919 + (C1566 - C1565) * C15924 +
              (C1568 - C1567) * C47336) *
                 C31197 +
             ((C11539 - C11538) * C15923 + (C11541 - C11540) * C15919 +
              (C47255 * C1283 - C113 * C1266) * C15924 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47069 * C47317 +
                    (((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C636 +
                   ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                      (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                         C31197 +
                     (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                      C534 * C47336) *
                         C47369) *
                        C47069 * C47317 +
                    (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                      (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                         C31197 +
                     (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                      C940 * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C637 +
                   (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                      (C157 - C156) * C47336) *
                         C31197 +
                     (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                      C756 * C47336) *
                         C47369) *
                        C47069 * C47317 +
                    ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                      (C347 - C346) * C47336) *
                         C31197 +
                     (C11150 * C15923 + C11151 * C15919 +
                      (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C638 +
                   (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
                      (C161 - C160) * C47336) *
                         C31197 +
                     (C10946 * C15923 + C10947 * C15919 +
                      (C757 - C758) * C15924 + (C759 - C760) * C47336) *
                         C47369) *
                        C47069 * C47317 +
                    ((C645 * C15923 + C646 * C15919 + (C648 - C647) * C15924 +
                      (C650 - C649) * C47336) *
                         C31197 +
                     ((C936 - C935) * C15923 + (C938 - C937) * C15919 +
                      (C47255 * C919 - C113 * C910) * C15924 +
                      (C47255 * C925 - C113 * C920) * C47336) *
                         C47369) *
                        C47069 * C47114) *
                       C47353)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47069 * C1392 +
                    (((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47069 * C1393 +
                    (((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C47069 * C1394 +
                    (((C113 * C1124 - C47255 * C1130) * C15923 +
                      (C113 * C1131 - C47255 * C1142) * C15919 +
                      (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                         C31197 +
                     ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
                      (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                         C47369) *
                        C47069 * C47359) *
                       C47303 +
                   ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                      (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                         C31197 +
                     (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                      C534 * C47336) *
                         C47369) *
                        C47069 * C1392 +
                    (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                      (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                         C31197 +
                     (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                      C940 * C47336) *
                         C47369) *
                        C47069 * C1393 +
                    (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
                      (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                         C31197 +
                     (C11872 * C15923 + C11873 * C15919 +
                      (C1565 - C1566) * C15924 + (C1567 - C1568) * C47336) *
                         C47369) *
                        C47069 * C1394 +
                    (((C1404 - C1403) * C15923 + (C1406 - C1405) * C15919 +
                      (C1408 - C1407) * C15924 + (C1410 - C1409) * C47336) *
                         C31197 +
                     ((C11673 - C11672) * C15923 + (C11675 - C11674) * C15919 +
                      (C47255 * C1673 - C113 * C1668) * C15924 +
                      (C47255 * C1677 - C113 * C1674) * C47336) *
                         C47369) *
                        C47069 * C47359) *
                       C47034)) /
                     (p * q * std::sqrt(p + q));
    d2ee[171] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47255 * C124 - C113 * C117) * C15923 +
                       (C47255 * C138 - C113 * C125) * C15919 +
                       (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                          C31197 +
                      ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                       C10670 * C15924 + C10671 * C47336) *
                          C47369) *
                         C47318 +
                     (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                       C10672 * C15924 + C10673 * C47336) *
                          C31197 +
                      ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                       C10678 * C15924 + C10679 * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    ((((C113 * C287 - C47255 * C297) * C15923 +
                       (C113 * C298 - C47255 * C317) * C15919 +
                       (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                          C31197 +
                      ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                       C11146 * C15924 + C11147 * C47336) *
                          C47369) *
                         C47318 +
                     (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                       C11148 * C15924 + C11149 * C47336) *
                          C31197 +
                      ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                       C12596 * C15924 + C12597 * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C284 +
                   (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
                       (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                          C31197 +
                      (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
                       C534 * C47336) *
                          C47369) *
                         C47318 +
                     ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
                       C10683 * C47336) *
                          C31197 +
                      (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
                       C536 * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
                       (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                          C31197 +
                      (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
                       C940 * C47336) *
                          C47369) *
                         C47318 +
                     ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
                       C11151 * C47336) *
                          C31197 +
                      (C12598 * C15923 + C12599 * C15919 +
                       (C2147 - C2148) * C15924 + (C2149 - C2150) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C285 +
                   ((((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
                       (C157 - C156) * C47336) *
                          C31197 +
                      (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
                       C756 * C47336) *
                          C47369) *
                         C47318 +
                     ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
                       C10947 * C47336) *
                          C31197 +
                      (C10684 * C15923 + C10685 * C15919 +
                       (C529 - C530) * C15924 + (C531 - C532) * C47336) *
                          C47369) *
                         C47156) *
                        C47317 +
                    (((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
                       (C347 - C346) * C47336) *
                          C31197 +
                      (C11150 * C15923 + C11151 * C15919 +
                       (C935 - C936) * C15924 + (C937 - C938) * C47336) *
                          C47369) *
                         C47318 +
                     ((C939 * C15923 + C940 * C15919 + (C936 - C935) * C15924 +
                       (C938 - C937) * C47336) *
                          C31197 +
                      ((C2148 - C2147) * C15923 + (C2150 - C2149) * C15919 +
                       (C47255 * C2139 - C113 * C2138) * C15924 +
                       (C47255 * C2141 - C113 * C2140) * C47336) *
                          C47369) *
                         C47156) *
                        C47114) *
                       C47343)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47255 * C124 - C113 * C117) * C15923 +
                      (C47255 * C138 - C113 * C125) * C15919 +
                      (C146 - C147) * C15924 + (C148 - C149) * C47336) *
                         C31197 +
                     ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
                      C10670 * C15924 + C10671 * C47336) *
                         C47369) *
                        C47318 +
                    (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
                      C10672 * C15924 + C10673 * C47336) *
                         C31197 +
                     ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
                      C10678 * C15924 + C10679 * C47336) *
                         C47369) *
                        C47156) *
                       C1392 +
                   ((((C113 * C287 - C47255 * C297) * C15923 +
                      (C113 * C298 - C47255 * C317) * C15919 +
                      (C328 - C329) * C15924 + (C330 - C331) * C47336) *
                         C31197 +
                     ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
                      C11146 * C15924 + C11147 * C47336) *
                         C47369) *
                        C47318 +
                    (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
                      C11148 * C15924 + C11149 * C47336) *
                         C31197 +
                     ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
                      C12596 * C15924 + C12597 * C47336) *
                         C47369) *
                        C47156) *
                       C1393 +
                   ((((C47255 * C303 - C113 * C290) * C15923 +
                      (C47255 * C320 - C113 * C304) * C15919 +
                      (C336 - C337) * C15924 + (C338 - C339) * C47336) *
                         C31197 +
                     ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
                      C11870 * C15924 + C11871 * C47336) *
                         C47369) *
                        C47318 +
                    (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
                      C11872 * C15924 + C11873 * C47336) *
                         C31197 +
                     ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
                      (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                         C47369) *
                        C47156) *
                       C1394 +
                   ((((C113 * C1124 - C47255 * C1130) * C15923 +
                      (C113 * C1131 - C47255 * C1142) * C15919 +
                      (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
                         C31197 +
                     ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
                      (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
                         C47369) *
                        C47318 +
                    (((C12005 - C12004) * C15923 + (C12007 - C12006) * C15919 +
                      (C11673 - C11672) * C15924 + (C11675 - C11674) * C47336) *
                         C31197 +
                     ((C47255 * C5981 - C113 * C5979) * C15923 +
                      (C47255 * C5985 - C113 * C5982) * C15919 +
                      (C47255 * C5983 - C113 * C5980) * C15924 +
                      (C47255 * C5986 - C113 * C5984) * C47336) *
                         C47369) *
                        C47156) *
                       C47359) *
                  C47023) /
                     (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C285 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C47388 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47376 +
           ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
             (C351 - C350) * C47336) *
                C31197 +
            ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
             (C47255 * C1557 - C113 * C1556) * C15924 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C15923 + (C149 - C148) * C15919 +
            (C151 - C150) * C15924 + (C153 - C152) * C47336) *
               C31197 +
           (C10672 * C15923 + C10673 * C15919 + C533 * C15924 + C534 * C47336) *
               C47369) *
              C47069 * C47051 * C109 +
          ((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
            (C157 - C156) * C47336) *
               C31197 +
           (C10682 * C15923 + C10683 * C15919 + C755 * C15924 + C756 * C47336) *
               C47369) *
              C47069 * C47051 * C110 +
          ((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
            (C161 - C160) * C47336) *
               C31197 +
           (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
            (C759 - C760) * C47336) *
               C47369) *
              C47069 * C47051 * C111 +
          ((C170 * C15923 + C171 * C15919 + (C163 - C162) * C15924 +
            (C165 - C164) * C47336) *
               C31197 +
           ((C758 - C757) * C15923 + (C760 - C759) * C15919 +
            (C47255 * C751 - C113 * C750) * C15924 +
            (C47255 * C753 - C113 * C752) * C47336) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47389 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C47378 +
           ((C10678 * C15923 + C10679 * C15919 + C10684 * C15924 +
             C10685 * C47336) *
                C31197 +
            (C12736 * C15923 + C12737 * C15919 + (C2261 - C2262) * C15924 +
             (C2263 - C2264) * C47336) *
                C47369) *
               C47352) *
              C47051 * C285 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47389 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C47378 +
           ((C535 * C15923 + C536 * C15919 + (C530 - C529) * C15924 +
             (C532 - C531) * C47336) *
                C31197 +
            ((C2262 - C2261) * C15923 + (C2264 - C2263) * C15919 +
             (C47255 * C2253 - C113 * C2252) * C15924 +
             (C47255 * C2255 - C113 * C2254) * C47336) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
             (C351 - C350) * C47336) *
                C31197 +
            ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
             (C47255 * C1557 - C113 * C1556) * C15924 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C15923 +
            (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
            (C330 - C331) * C47336) *
               C31197 +
           ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
            C11146 * C15924 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C15923 +
            (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
            (C338 - C339) * C47336) *
               C31197 +
           ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
            C11870 * C15924 + C11871 * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C15923 +
            (C113 * C1131 - C47255 * C1142) * C15919 +
            (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
               C31197 +
           ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
            (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C15923 +
            (C47255 * C1145 - C113 * C1137) * C15919 +
            (C47255 * C1138 - C113 * C1128) * C15924 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C31197 +
           ((C47255 * C6459 - C113 * C6457) * C15923 +
            (C47255 * C6463 - C113 * C6460) * C15919 +
            (C47255 * C6461 - C113 * C6458) * C15924 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47389 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47378 +
           (((C10675 - C10674) * C15923 + (C10677 - C10676) * C15919 +
             C10680 * C15924 + C10681 * C47336) *
                C31197 +
            ((C12390 - C12391) * C15923 + (C12392 - C12393) * C15919 +
             C12734 * C15924 + C12735 * C47336) *
                C47369) *
               C47352) *
              C1050 +
          ((((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47389 +
           (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
             C11148 * C15924 + C11149 * C47336) *
                C31197 +
            ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
             C12596 * C15924 + C12597 * C47336) *
                C47369) *
               C47378 +
           (((C11527 - C11526) * C15923 + (C11529 - C11528) * C15919 +
             C12598 * C15924 + C12599 * C47336) *
                C31197 +
            ((C12868 - C12869) * C15923 + (C12870 - C12871) * C15919 +
             (C12600 - C12601) * C15924 + (C12602 - C12603) * C47336) *
                C47369) *
               C47352) *
              C1051 +
          ((((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47389 +
           (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
             C11872 * C15924 + C11873 * C47336) *
                C31197 +
            ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
             (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                C47369) *
               C47378 +
           (((C11535 - C11534) * C15923 + (C11537 - C11536) * C15919 +
             (C11539 - C11538) * C15924 + (C11541 - C11540) * C47336) *
                C31197 +
            ((C47255 * C7319 - C113 * C7317) * C15923 +
             (C47255 * C7323 - C113 * C7320) * C15919 +
             (C47255 * C7321 - C113 * C7318) * C15924 +
             (C47255 * C7324 - C113 * C7322) * C47336) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47318 +
           (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
             C10672 * C15924 + C10673 * C47336) *
                C31197 +
            ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
             C10678 * C15924 + C10679 * C47336) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47318 +
           ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
             C10683 * C47336) *
                C31197 +
            (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
             C536 * C47336) *
                C47369) *
               C47156) *
              C47051 * C637 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47318 +
           ((C533 * C15923 + C534 * C15919 + C10946 * C15924 +
             C10947 * C47336) *
                C31197 +
            (C10684 * C15923 + C10685 * C15919 + (C529 - C530) * C15924 +
             (C531 - C532) * C47336) *
                C47369) *
               C47156) *
              C47051 * C638 +
          (((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
             (C161 - C160) * C47336) *
                C31197 +
            (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
             (C759 - C760) * C47336) *
                C47369) *
               C47318 +
           ((C755 * C15923 + C756 * C15919 + (C758 - C757) * C15924 +
             (C760 - C759) * C47336) *
                C31197 +
            ((C530 - C529) * C15923 + (C532 - C531) * C15919 +
             (C47255 * C496 - C113 * C477) * C15924 +
             (C47255 * C507 - C113 * C497) * C47336) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C15923 +
              (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
              (C148 - C149) * C47336) *
                 C31197 +
             ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
              C10670 * C15924 + C10671 * C47336) *
                 C47369) *
                C47318 +
            (((C10667 - C10666) * C15923 + (C10669 - C10668) * C15919 +
              C10672 * C15924 + C10673 * C47336) *
                 C31197 +
             ((C10674 - C10675) * C15923 + (C10676 - C10677) * C15919 +
              C10678 * C15924 + C10679 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C113 * C287 - C47255 * C297) * C15923 +
              (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
              (C330 - C331) * C47336) *
                 C31197 +
             ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
              C11146 * C15924 + C11147 * C47336) *
                 C47369) *
                C47318 +
            (((C11143 - C11142) * C15923 + (C11145 - C11144) * C15919 +
              C11148 * C15924 + C11149 * C47336) *
                 C31197 +
             ((C11526 - C11527) * C15923 + (C11528 - C11529) * C15919 +
              C12596 * C15924 + C12597 * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C47255 * C303 - C113 * C290) * C15923 +
              (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
              (C338 - C339) * C47336) *
                 C31197 +
             ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
              C11870 * C15924 + C11871 * C47336) *
                 C47369) *
                C47318 +
            (((C11531 - C11530) * C15923 + (C11533 - C11532) * C15919 +
              C11872 * C15924 + C11873 * C47336) *
                 C31197 +
             ((C11534 - C11535) * C15923 + (C11536 - C11537) * C15919 +
              (C11538 - C11539) * C15924 + (C11540 - C11541) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
              (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                 C31197 +
             (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
              C534 * C47336) *
                 C47369) *
                C47318 +
            ((C10670 * C15923 + C10671 * C15919 + C10682 * C15924 +
              C10683 * C47336) *
                 C31197 +
             (C10680 * C15923 + C10681 * C15919 + C535 * C15924 +
              C536 * C47336) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C329 - C328) * C15923 + (C331 - C330) * C15919 +
              (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                 C31197 +
             (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
              C940 * C47336) *
                 C47369) *
                C47318 +
            ((C11146 * C15923 + C11147 * C15919 + C11150 * C15924 +
              C11151 * C47336) *
                 C31197 +
             (C12598 * C15923 + C12599 * C15919 + (C2147 - C2148) * C15924 +
              (C2149 - C2150) * C47336) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C337 - C336) * C15923 + (C339 - C338) * C15919 +
              (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                 C31197 +
             (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
              (C1567 - C1568) * C47336) *
                 C47369) *
                C47318 +
            ((C11870 * C15923 + C11871 * C15919 + (C1566 - C1565) * C15924 +
              (C1568 - C1567) * C47336) *
                 C31197 +
             ((C11539 - C11538) * C15923 + (C11541 - C11540) * C15919 +
              (C47255 * C1283 - C113 * C1266) * C15924 +
              (C47255 * C1293 - C113 * C1284) * C47336) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C15923 + (C149 - C148) * C15919 +
            (C151 - C150) * C15924 + (C153 - C152) * C47336) *
               C31197 +
           (C10672 * C15923 + C10673 * C15919 + C533 * C15924 + C534 * C47336) *
               C47369) *
              C47069 * C47051 * C109 +
          ((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
            (C157 - C156) * C47336) *
               C31197 +
           (C10682 * C15923 + C10683 * C15919 + C755 * C15924 + C756 * C47336) *
               C47369) *
              C47069 * C47051 * C110 +
          ((C168 * C15923 + C169 * C15919 + (C159 - C158) * C15924 +
            (C161 - C160) * C47336) *
               C31197 +
           (C10946 * C15923 + C10947 * C15919 + (C757 - C758) * C15924 +
            (C759 - C760) * C47336) *
               C47369) *
              C47069 * C47051 * C111 +
          ((C170 * C15923 + C171 * C15919 + (C163 - C162) * C15924 +
            (C165 - C164) * C47336) *
               C31197 +
           ((C758 - C757) * C15923 + (C760 - C759) * C15919 +
            (C47255 * C751 - C113 * C750) * C15924 +
            (C47255 * C753 - C113 * C752) * C47336) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C47388 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C47376 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C285 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C47388 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C47376 +
           ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
             (C351 - C350) * C47336) *
                C31197 +
            ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
             (C47255 * C1557 - C113 * C1556) * C15924 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C15923 +
             (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
             (C148 - C149) * C47336) *
                C31197 +
            ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
             C10670 * C15924 + C10671 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C15923 +
             (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
             (C330 - C331) * C47336) *
                C31197 +
            ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
             C11146 * C15924 + C11147 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C15923 +
             (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
             (C338 - C339) * C47336) *
                C31197 +
            ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
             C11870 * C15924 + C11871 * C47336) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C15923 + (C149 - C148) * C15919 +
             (C151 - C150) * C15924 + (C153 - C152) * C47336) *
                C31197 +
            (C10672 * C15923 + C10673 * C15919 + C533 * C15924 +
             C534 * C47336) *
                C47369) *
               C47069 * C1050 +
           (((C329 - C328) * C15923 + (C331 - C330) * C15919 +
             (C333 - C332) * C15924 + (C335 - C334) * C47336) *
                C31197 +
            (C11148 * C15923 + C11149 * C15919 + C939 * C15924 +
             C940 * C47336) *
                C47369) *
               C47069 * C1051 +
           (((C337 - C336) * C15923 + (C339 - C338) * C15919 +
             (C341 - C340) * C15924 + (C343 - C342) * C47336) *
                C31197 +
            (C11872 * C15923 + C11873 * C15919 + (C1565 - C1566) * C15924 +
             (C1567 - C1568) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C15923 + C167 * C15919 + (C155 - C154) * C15924 +
             (C157 - C156) * C47336) *
                C31197 +
            (C10682 * C15923 + C10683 * C15919 + C755 * C15924 +
             C756 * C47336) *
                C47369) *
               C47069 * C1050 +
           ((C352 * C15923 + C353 * C15919 + (C345 - C344) * C15924 +
             (C347 - C346) * C47336) *
                C31197 +
            (C11150 * C15923 + C11151 * C15919 + (C935 - C936) * C15924 +
             (C937 - C938) * C47336) *
                C47369) *
               C47069 * C1051 +
           ((C354 * C15923 + C355 * C15919 + (C349 - C348) * C15924 +
             (C351 - C350) * C47336) *
                C31197 +
            ((C1566 - C1565) * C15923 + (C1568 - C1567) * C15919 +
             (C47255 * C1557 - C113 * C1556) * C15924 +
             (C47255 * C1559 - C113 * C1558) * C47336) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C15923 +
            (C47255 * C138 - C113 * C125) * C15919 + (C146 - C147) * C15924 +
            (C148 - C149) * C47336) *
               C31197 +
           ((C10666 - C10667) * C15923 + (C10668 - C10669) * C15919 +
            C10670 * C15924 + C10671 * C47336) *
               C47369) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C15923 +
            (C113 * C298 - C47255 * C317) * C15919 + (C328 - C329) * C15924 +
            (C330 - C331) * C47336) *
               C31197 +
           ((C11142 - C11143) * C15923 + (C11144 - C11145) * C15919 +
            C11146 * C15924 + C11147 * C47336) *
               C47369) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C15923 +
            (C47255 * C320 - C113 * C304) * C15919 + (C336 - C337) * C15924 +
            (C338 - C339) * C47336) *
               C31197 +
           ((C11530 - C11531) * C15923 + (C11532 - C11533) * C15919 +
            C11870 * C15924 + C11871 * C47336) *
               C47369) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C15923 +
            (C113 * C1131 - C47255 * C1142) * C15919 +
            (C1403 - C1404) * C15924 + (C1405 - C1406) * C47336) *
               C31197 +
           ((C12004 - C12005) * C15923 + (C12006 - C12007) * C15919 +
            (C11672 - C11673) * C15924 + (C11674 - C11675) * C47336) *
               C47369) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C15923 +
            (C47255 * C1145 - C113 * C1137) * C15919 +
            (C47255 * C1138 - C113 * C1128) * C15924 +
            (C47255 * C1146 - C113 * C1139) * C47336) *
               C31197 +
           ((C47255 * C6459 - C113 * C6457) * C15923 +
            (C47255 * C6463 - C113 * C6460) * C15919 +
            (C47255 * C6461 - C113 * C6458) * C15924 +
            (C47255 * C6464 - C113 * C6462) * C47336) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C47110 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C47117 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47069 * C2840) *
              C47028 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47110 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47117 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C2840) *
              C47037 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C47110 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47117 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47318 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47318 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                  C21520 +
              (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                  C46998) *
                 C31197 +
             ((C37800 - C37801 + C37802 - C37803) * C21520 +
              (C37804 - C37805 + C37806 - C37807) * C46998) *
                 C47369) *
                C47318 +
            (((C37801 - C37800 + C37803 - C37802) * C21520 +
              (C37805 - C37804 + C37807 - C37806) * C46998) *
                 C31197 +
             ((C37808 - C37809 + C37810 - C37811) * C21520 +
              (C37812 - C37813 + C37814 - C37815) * C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C2580 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47318 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47318 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C4911 - C4910 + C4913 - C4912) * C21520 +
              (C4915 - C4914 + C4917 - C4916) * C46998) *
                 C31197 +
             ((C6320 - C6321 + C6322 - C6323) * C21520 +
              (C6324 - C6325 + C6326 - C6327) * C46998) *
                 C47369) *
                C47318 +
            (((C6321 - C6320 + C6323 - C6322) * C21520 +
              (C6325 - C6324 + C6327 - C6326) * C46998) *
                 C31197 +
             ((C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                  C21520 +
              (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C38270 - C38271 + C38272 - C38273) * C21520 +
             (C38274 - C38275 + C38276 - C38277) * C46998) *
                C47369) *
               C47069 * C47359) *
              C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C6119 - C6118 + C6121 - C6120) * C21520 +
             (C6123 - C6122 + C6125 - C6124) * C46998) *
                C31197 +
            ((C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                 C21520 +
             (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47394 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47387 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47374 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C5243 - C5242 + C5245 - C5244) * C21520 +
             (C5247 - C5246 + C5249 - C5248) * C46998) *
                C31197 +
            ((C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C21520 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47389 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47378 +
            (((C36949 - C36948 + C36951 - C36950) * C21520 +
              (C36953 - C36952 + C36955 - C36954) * C46998) *
                 C31197 +
             ((C38652 - C38653 + C38654 - C38655) * C21520 +
              (C38656 - C38657 + C38658 - C38659) * C46998) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47389 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47378 +
            (((C37793 - C37792 + C37795 - C37794) * C21520 +
              (C37797 - C37796 + C37799 - C37798) * C46998) *
                 C31197 +
             ((C39122 - C39123 + C39124 - C39125) * C21520 +
              (C39126 - C39127 + C39128 - C39129) * C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C2580 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47389 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47378 +
            (((C5089 - C5088 + C5091 - C5090) * C21520 +
              (C5093 - C5092 + C5095 - C5094) * C46998) *
                 C31197 +
             ((C7180 - C7181 + C7182 - C7183) * C21520 +
              (C7184 - C7185 + C7186 - C7187) * C46998) *
                 C47369) *
                C47352) *
               C2472 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47389 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47378 +
            (((C7043 - C7042 + C7045 - C7044) * C21520 +
              (C7047 - C7046 + C7049 - C7048) * C46998) *
                 C31197 +
             ((C4715 * C2367 - C4719 * C2363 + C47367 * C7321 - C4720 * C7318) *
                  C21520 +
              (C4715 * C2372 - C4719 * C2368 + C47367 * C7324 - C4720 * C7322) *
                  C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47318 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47318 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47028 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47318 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47318 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47037 +
          (((((C4733 - C4732 + C4735 - C4734) * C21520 +
              (C4737 - C4736 + C4739 - C4738) * C46998) *
                 C31197 +
             ((C5096 - C5097 + C5098 - C5099) * C21520 +
              (C5100 - C5101 + C5102 - C5103) * C46998) *
                 C47369) *
                C47318 +
            (((C5097 - C5096 + C5099 - C5098) * C21520 +
              (C5101 - C5100 + C5103 - C5102) * C46998) *
                 C31197 +
             ((C5104 - C5105 + C5106 - C5107) * C21520 +
              (C5108 - C5109 + C5110 - C5111) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4919 - C4918 + C4921 - C4920) * C21520 +
              (C4923 - C4922 + C4925 - C4924) * C46998) *
                 C31197 +
             ((C5590 - C5591 + C5592 - C5593) * C21520 +
              (C5594 - C5595 + C5596 - C5597) * C46998) *
                 C47369) *
                C47318 +
            (((C5591 - C5590 + C5593 - C5592) * C21520 +
              (C5595 - C5594 + C5597 - C5596) * C46998) *
                 C31197 +
             ((C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                  C21520 +
              (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47394 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47387 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47114) *
              C47374 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C47069 * C2472 +
           (((C5243 - C5242 + C5245 - C5244) * C21520 +
             (C5247 - C5246 + C5249 - C5248) * C46998) *
                C31197 +
            ((C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C21520 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C38270 - C38271 + C38272 - C38273) * C21520 +
             (C38274 - C38275 + C38276 - C38277) * C46998) *
                C47369) *
               C47069 * C47359) *
              C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47395 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47391 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47381 +
           (((C6119 - C6118 + C6121 - C6120) * C21520 +
             (C6123 - C6122 + C6125 - C6124) * C46998) *
                C31197 +
            ((C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                 C21520 +
             (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C3234 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C3234 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                  C21520 +
              (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                  C46998) *
                 C31197 +
             ((C37800 - C37801 + C37802 - C37803) * C21520 +
              (C37804 - C37805 + C37806 - C37807) * C46998) *
                 C47369) *
                C3234 +
            (((C37801 - C37800 + C37803 - C37802) * C21520 +
              (C37805 - C37804 + C37807 - C37806) * C46998) *
                 C31197 +
             ((C37808 - C37809 + C37810 - C37811) * C21520 +
              (C37812 - C37813 + C37814 - C37815) * C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C47303 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C3234 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C47110 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C3234 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47117 +
           ((((C4911 - C4910 + C4913 - C4912) * C21520 +
              (C4915 - C4914 + C4917 - C4916) * C46998) *
                 C31197 +
             ((C6320 - C6321 + C6322 - C6323) * C21520 +
              (C6324 - C6325 + C6326 - C6327) * C46998) *
                 C47369) *
                C3234 +
            (((C6321 - C6320 + C6323 - C6322) * C21520 +
              (C6325 - C6324 + C6327 - C6326) * C46998) *
                 C31197 +
             ((C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                  C21520 +
              (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47152 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47159 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C38652 - C38653 + C38654 - C38655) * C21520 +
             (C38656 - C38657 + C38658 - C38659) * C46998) *
                C47369) *
               C3742) *
              C47110 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47152 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47159 +
           (((C37793 - C37792 + C37795 - C37794) * C21520 +
             (C37797 - C37796 + C37799 - C37798) * C46998) *
                C31197 +
            ((C39122 - C39123 + C39124 - C39125) * C21520 +
             (C39126 - C39127 + C39128 - C39129) * C46998) *
                C47369) *
               C3742) *
              C47117 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47152 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C47159 +
           (((C37809 - C37808 + C37811 - C37810) * C21520 +
             (C37813 - C37812 + C37815 - C37814) * C46998) *
                C31197 +
            ((C4715 * C7319 - C4719 * C7317 + C47367 * C23348 -
              C4720 * C23347) *
                 C21520 +
             (C4715 * C7323 - C4719 * C7320 + C47367 * C23350 -
              C4720 * C23349) *
                 C46998) *
                C47369) *
               C3742) *
              C2840) *
         C47023) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C3234 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C47395 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C3234 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47156) *
              C47391 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C3234 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C47156) *
              C47381 +
          ((((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C38270 - C38271 + C38272 - C38273) * C21520 +
             (C38274 - C38275 + C38276 - C38277) * C46998) *
                C47369) *
               C3234 +
           (((C38271 - C38270 + C38273 - C38272) * C21520 +
             (C38275 - C38274 + C38277 - C38276) * C46998) *
                C31197 +
            ((C4715 * C5981 - C4719 * C5979 + C47367 * C22370 -
              C4720 * C22369) *
                 C21520 +
             (C4715 * C5985 - C4719 * C5982 + C47367 * C22372 -
              C4720 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C3234 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C3234 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47385 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C3234 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C3234 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47372 +
          (((((C4733 - C4732 + C4735 - C4734) * C21520 +
              (C4737 - C4736 + C4739 - C4738) * C46998) *
                 C31197 +
             ((C5096 - C5097 + C5098 - C5099) * C21520 +
              (C5100 - C5101 + C5102 - C5103) * C46998) *
                 C47369) *
                C3234 +
            (((C5097 - C5096 + C5099 - C5098) * C21520 +
              (C5101 - C5100 + C5103 - C5102) * C46998) *
                 C31197 +
             ((C5104 - C5105 + C5106 - C5107) * C21520 +
              (C5108 - C5109 + C5110 - C5111) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4919 - C4918 + C4921 - C4920) * C21520 +
              (C4923 - C4922 + C4925 - C4924) * C46998) *
                 C31197 +
             ((C5590 - C5591 + C5592 - C5593) * C21520 +
              (C5594 - C5595 + C5596 - C5597) * C46998) *
                 C47369) *
                C3234 +
            (((C5591 - C5590 + C5593 - C5592) * C21520 +
              (C5595 - C5594 + C5597 - C5596) * C46998) *
                 C31197 +
             ((C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                  C21520 +
              (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47396 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47393 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C38652 - C38653 + C38654 - C38655) * C21520 +
             (C38656 - C38657 + C38658 - C38659) * C46998) *
                C47369) *
               C47384 +
           (((C38653 - C38652 + C38655 - C38654) * C21520 +
             (C38657 - C38656 + C38659 - C38658) * C46998) *
                C31197 +
            ((C38660 - C38661 + C38662 - C38663) * C21520 +
             (C38664 - C38665 + C38666 - C38667) * C46998) *
                C47369) *
               C47365) *
              C2472 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47396 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47393 +
           (((C37793 - C37792 + C37795 - C37794) * C21520 +
             (C37797 - C37796 + C37799 - C37798) * C46998) *
                C31197 +
            ((C39122 - C39123 + C39124 - C39125) * C21520 +
             (C39126 - C39127 + C39128 - C39129) * C46998) *
                C47369) *
               C47384 +
           (((C39123 - C39122 + C39125 - C39124) * C21520 +
             (C39127 - C39126 + C39129 - C39128) * C46998) *
                C31197 +
            ((C4715 * C6841 - C4719 * C6839 + C47367 * C23002 -
              C4720 * C23001) *
                 C21520 +
             (C4715 * C6845 - C4719 * C6842 + C47367 * C23004 -
              C4720 * C23003) *
                 C46998) *
                C47369) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47152 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47159 +
            (((C36949 - C36948 + C36951 - C36950) * C21520 +
              (C36953 - C36952 + C36955 - C36954) * C46998) *
                 C31197 +
             ((C38652 - C38653 + C38654 - C38655) * C21520 +
              (C38656 - C38657 + C38658 - C38659) * C46998) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47152 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47159 +
            (((C37793 - C37792 + C37795 - C37794) * C21520 +
              (C37797 - C37796 + C37799 - C37798) * C46998) *
                 C31197 +
             ((C39122 - C39123 + C39124 - C39125) * C21520 +
              (C39126 - C39127 + C39128 - C39129) * C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C47303 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47152 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47159 +
            (((C5089 - C5088 + C5091 - C5090) * C21520 +
              (C5093 - C5092 + C5095 - C5094) * C46998) *
                 C31197 +
             ((C7180 - C7181 + C7182 - C7183) * C21520 +
              (C7184 - C7185 + C7186 - C7187) * C46998) *
                 C47369) *
                C3742) *
               C2472 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47152 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47159 +
            (((C7043 - C7042 + C7045 - C7044) * C21520 +
              (C7047 - C7046 + C7049 - C7048) * C46998) *
                 C31197 +
             ((C4715 * C2367 - C4719 * C2363 + C47367 * C7321 - C4720 * C7318) *
                  C21520 +
              (C4715 * C2372 - C4719 * C2368 + C47367 * C7324 - C4720 * C7322) *
                  C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C3234 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C3234 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47385 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C3234 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C3234 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47372 +
          (((((C4733 - C4732 + C4735 - C4734) * C21520 +
              (C4737 - C4736 + C4739 - C4738) * C46998) *
                 C31197 +
             ((C5096 - C5097 + C5098 - C5099) * C21520 +
              (C5100 - C5101 + C5102 - C5103) * C46998) *
                 C47369) *
                C3234 +
            (((C5097 - C5096 + C5099 - C5098) * C21520 +
              (C5101 - C5100 + C5103 - C5102) * C46998) *
                 C31197 +
             ((C5104 - C5105 + C5106 - C5107) * C21520 +
              (C5108 - C5109 + C5110 - C5111) * C46998) *
                 C47369) *
                C47156) *
               C2472 +
           ((((C4919 - C4918 + C4921 - C4920) * C21520 +
              (C4923 - C4922 + C4925 - C4924) * C46998) *
                 C31197 +
             ((C5590 - C5591 + C5592 - C5593) * C21520 +
              (C5594 - C5595 + C5596 - C5597) * C46998) *
                 C47369) *
                C3234 +
            (((C5591 - C5590 + C5593 - C5592) * C21520 +
              (C5595 - C5594 + C5597 - C5596) * C46998) *
                 C31197 +
             ((C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                  C21520 +
              (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C3234 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C47395 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C3234 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47156) *
              C47391 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C3234 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C47156) *
              C47381 +
          ((((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C38270 - C38271 + C38272 - C38273) * C21520 +
             (C38274 - C38275 + C38276 - C38277) * C46998) *
                C47369) *
               C3234 +
           (((C38271 - C38270 + C38273 - C38272) * C21520 +
             (C38275 - C38274 + C38277 - C38276) * C46998) *
                C31197 +
            ((C4715 * C5981 - C4719 * C5979 + C47367 * C22370 -
              C4720 * C22369) *
                 C21520 +
             (C4715 * C5985 - C4719 * C5982 + C47367 * C22372 -
              C4720 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C4719 * C1666 - C4715 * C1669 + C4720 * C6457 - C47367 * C6459) *
                 C21520 +
             (C4719 * C1670 - C4715 * C1675 + C4720 * C6460 - C47367 * C6463) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C6119 - C6118 + C6121 - C6120) * C21520 +
             (C6123 - C6122 + C6125 - C6124) * C46998) *
                C31197 +
            ((C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                 C21520 +
             (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C4719 * C906 - C4715 * C911 + C4720 * C1261 - C47367 * C1273) *
                 C21520 +
             (C4719 * C912 - C4715 * C921 + C4720 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C636 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47114) *
              C637 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47114) *
              C638 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C5243 - C5242 + C5245 - C5244) * C21520 +
             (C5247 - C5246 + C5249 - C5248) * C46998) *
                C31197 +
            ((C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C21520 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C1788 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C1789 +
            (((C36949 - C36948 + C36951 - C36950) * C21520 +
              (C36953 - C36952 + C36955 - C36954) * C46998) *
                 C31197 +
             ((C38652 - C38653 + C38654 - C38655) * C21520 +
              (C38656 - C38657 + C38658 - C38659) * C46998) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C1788 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C1789 +
            (((C37793 - C37792 + C37795 - C37794) * C21520 +
              (C37797 - C37796 + C37799 - C37798) * C46998) *
                 C31197 +
             ((C4719 * C2362 - C4715 * C2365 + C4720 * C7317 - C47367 * C7319) *
                  C21520 +
              (C4719 * C2366 - C4715 * C2371 + C4720 * C7320 - C47367 * C7323) *
                  C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C47303 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C1788 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C1789 +
            (((C5089 - C5088 + C5091 - C5090) * C21520 +
              (C5093 - C5092 + C5095 - C5094) * C46998) *
                 C31197 +
             ((C7180 - C7181 + C7182 - C7183) * C21520 +
              (C7184 - C7185 + C7186 - C7187) * C46998) *
                 C47369) *
                C47352) *
               C47317 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C1788 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C1789 +
            (((C7043 - C7042 + C7045 - C7044) * C21520 +
              (C7047 - C7046 + C7049 - C7048) * C46998) *
                 C31197 +
             ((C4715 * C2367 - C4719 * C2363 + C47367 * C7321 - C4720 * C7318) *
                  C21520 +
              (C4715 * C2372 - C4719 * C2368 + C47367 * C7324 - C4720 * C7322) *
                  C46998) *
                 C47369) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47318 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C1392 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47318 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47156) *
              C1393 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47318 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C47156) *
              C1394 +
          ((((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C38270 - C38271 + C38272 - C38273) * C21520 +
             (C38274 - C38275 + C38276 - C38277) * C46998) *
                C47369) *
               C47318 +
           (((C38271 - C38270 + C38273 - C38272) * C21520 +
             (C38275 - C38274 + C38277 - C38276) * C46998) *
                C31197 +
            ((C4715 * C5981 - C4719 * C5979 + C47367 * C22370 -
              C4720 * C22369) *
                 C21520 +
             (C4715 * C5985 - C4719 * C5982 + C47367 * C22372 -
              C4720 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47318 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47318 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C4715 * C1267 - C4719 * C1258 + C47367 * C1279 - C4720 * C1264) *
                  C21520 +
              (C4715 * C1285 - C4719 * C1268 + C47367 * C1291 - C4720 * C1280) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C284 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47318 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47318 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C285 +
          (((((C4733 - C4732 + C4735 - C4734) * C21520 +
              (C4737 - C4736 + C4739 - C4738) * C46998) *
                 C31197 +
             ((C5096 - C5097 + C5098 - C5099) * C21520 +
              (C5100 - C5101 + C5102 - C5103) * C46998) *
                 C47369) *
                C47318 +
            (((C5097 - C5096 + C5099 - C5098) * C21520 +
              (C5101 - C5100 + C5103 - C5102) * C46998) *
                 C31197 +
             ((C5104 - C5105 + C5106 - C5107) * C21520 +
              (C5108 - C5109 + C5110 - C5111) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4919 - C4918 + C4921 - C4920) * C21520 +
              (C4923 - C4922 + C4925 - C4924) * C46998) *
                 C31197 +
             ((C5590 - C5591 + C5592 - C5593) * C21520 +
              (C5594 - C5595 + C5596 - C5597) * C46998) *
                 C47369) *
                C47318 +
            (((C5591 - C5590 + C5593 - C5592) * C21520 +
              (C5595 - C5594 + C5597 - C5596) * C46998) *
                 C31197 +
             ((C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                  C21520 +
              (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C2248 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C2249 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C38652 - C38653 + C38654 - C38655) * C21520 +
             (C38656 - C38657 + C38658 - C38659) * C46998) *
                C47369) *
               C2250 +
           (((C38653 - C38652 + C38655 - C38654) * C21520 +
             (C38657 - C38656 + C38659 - C38658) * C46998) *
                C31197 +
            ((C38660 - C38661 + C38662 - C38663) * C21520 +
             (C38664 - C38665 + C38666 - C38667) * C46998) *
                C47369) *
               C47365) *
              C47317 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C2248 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C2249 +
           (((C37793 - C37792 + C37795 - C37794) * C21520 +
             (C37797 - C37796 + C37799 - C37798) * C46998) *
                C31197 +
            ((C39122 - C39123 + C39124 - C39125) * C21520 +
             (C39126 - C39127 + C39128 - C39129) * C46998) *
                C47369) *
               C2250 +
           (((C39123 - C39122 + C39125 - C39124) * C21520 +
             (C39127 - C39126 + C39129 - C39128) * C46998) *
                C31197 +
            ((C4715 * C6841 - C4719 * C6839 + C47367 * C23002 -
              C4720 * C23001) *
                 C21520 +
             (C4715 * C6845 - C4719 * C6842 + C47367 * C23004 -
              C4720 * C23003) *
                 C46998) *
                C47369) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                    C21520 +
                (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                    C46998) *
                   C31197 +
               ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                    C21520 +
                (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                    C46998) *
                   C47369) *
                  C47069 * C47051 * C108 +
              (((C4725 - C4724 + C4727 - C4726) * C21520 +
                (C4729 - C4728 + C4731 - C4730) * C46998) *
                   C31197 +
               ((C5080 - C5081 + C5082 - C5083) * C21520 +
                (C5084 - C5085 + C5086 - C5087) * C46998) *
                   C47369) *
                  C47069 * C47051 * C109 +
              (((C4733 - C4732 + C4735 - C4734) * C21520 +
                (C4737 - C4736 + C4739 - C4738) * C46998) *
                   C31197 +
               ((C5096 - C5097 + C5098 - C5099) * C21520 +
                (C5100 - C5101 + C5102 - C5103) * C46998) *
                   C47369) *
                  C47069 * C47051 * C110 +
              (((C4741 - C4740 + C4743 - C4742) * C21520 +
                (C4745 - C4744 + C4747 - C4746) * C46998) *
                   C31197 +
               ((C5380 - C5381 + C5382 - C5383) * C21520 +
                (C5384 - C5385 + C5386 - C5387) * C46998) *
                   C47369) *
                  C47069 * C47051 * C111 +
              (((C4749 - C4748 + C4751 - C4750) * C21520 +
                (C4753 - C4752 + C4755 - C4754) * C46998) *
                   C31197 +
               ((C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                    C21520 +
                (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                    C46998) *
                   C47369) *
                  C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                     C21520 +
                 (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                     C46998) *
                    C31197 +
                ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                     C21520 +
                 (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                     C46998) *
                    C47369) *
                   C47069 * C47388 +
               (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                     C21520 +
                 (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                     C46998) *
                    C31197 +
                ((C4719 * C906 - C4715 * C911 + C4720 * C1261 -
                  C47367 * C1273) *
                     C21520 +
                 (C4719 * C912 - C4715 * C921 + C4720 * C1274 -
                  C47367 * C1288) *
                     C46998) *
                    C47369) *
                   C47069 * C47376 +
               (((C4715 * C303 - C4719 * C290 + C47367 * C1130 -
                  C4720 * C1124) *
                     C21520 +
                 (C4715 * C320 - C4719 * C304 + C47367 * C1142 -
                  C4720 * C1131) *
                     C46998) *
                    C31197 +
                ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 -
                  C4720 * C1666) *
                     C21520 +
                 (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 -
                  C4720 * C1670) *
                     C46998) *
                    C47369) *
                   C47069 * C47349) *
                  C284 +
              ((((C4725 - C4724 + C4727 - C4726) * C21520 +
                 (C4729 - C4728 + C4731 - C4730) * C46998) *
                    C31197 +
                ((C5080 - C5081 + C5082 - C5083) * C21520 +
                 (C5084 - C5085 + C5086 - C5087) * C46998) *
                    C47369) *
                   C47069 * C47388 +
               (((C4903 - C4902 + C4905 - C4904) * C21520 +
                 (C4907 - C4906 + C4909 - C4908) * C46998) *
                    C31197 +
                ((C5582 - C5583 + C5584 - C5585) * C21520 +
                 (C5586 - C5587 + C5588 - C5589) * C46998) *
                    C47369) *
                   C47069 * C47376 +
               (((C4911 - C4910 + C4913 - C4912) * C21520 +
                 (C4915 - C4914 + C4917 - C4916) * C46998) *
                    C31197 +
                ((C6320 - C6321 + C6322 - C6323) * C21520 +
                 (C6324 - C6325 + C6326 - C6327) * C46998) *
                    C47369) *
                   C47069 * C47349) *
                  C285 +
              ((((C4733 - C4732 + C4735 - C4734) * C21520 +
                 (C4737 - C4736 + C4739 - C4738) * C46998) *
                    C31197 +
                ((C5096 - C5097 + C5098 - C5099) * C21520 +
                 (C5100 - C5101 + C5102 - C5103) * C46998) *
                    C47369) *
                   C47069 * C47388 +
               (((C4919 - C4918 + C4921 - C4920) * C21520 +
                 (C4923 - C4922 + C4925 - C4924) * C46998) *
                    C31197 +
                ((C5590 - C5591 + C5592 - C5593) * C21520 +
                 (C5594 - C5595 + C5596 - C5597) * C46998) *
                    C47369) *
                   C47069 * C47376 +
               (((C4927 - C4926 + C4929 - C4928) * C21520 +
                 (C4931 - C4930 + C4933 - C4932) * C46998) *
                    C31197 +
                ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 -
                  C4720 * C1668) *
                     C21520 +
                 (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 -
                  C4720 * C1674) *
                     C46998) *
                    C47369) *
                   C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47389 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47378 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47389 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47378 +
           (((C5089 - C5088 + C5091 - C5090) * C21520 +
             (C5093 - C5092 + C5095 - C5094) * C46998) *
                C31197 +
            ((C7180 - C7181 + C7182 - C7183) * C21520 +
             (C7184 - C7185 + C7186 - C7187) * C46998) *
                C47369) *
               C47352) *
              C47051 * C285 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47389 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C47378 +
           (((C5105 - C5104 + C5107 - C5106) * C21520 +
             (C5109 - C5108 + C5111 - C5110) * C46998) *
                C31197 +
            ((C4715 * C1978 - C4719 * C1970 + C47367 * C2369 - C4720 * C2364) *
                 C21520 +
             (C4715 * C1988 - C4719 * C1979 + C47367 * C2373 - C4720 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                 C21520 +
             (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C36940 - C36941 + C36942 - C36943) * C21520 +
            (C36944 - C36945 + C36946 - C36947) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C21520 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C46998) *
               C31197 +
           ((C37410 - C37411 + C37412 - C37413) * C21520 +
            (C37414 - C37415 + C37416 - C37417) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C21520 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C46998) *
               C31197 +
           ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                C21520 +
            (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C21520 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C46998) *
               C31197 +
           ((C4719 * C1666 - C4715 * C1669 + C4720 * C6457 - C47367 * C6459) *
                C21520 +
            (C4719 * C1670 - C4715 * C1675 + C4720 * C6460 - C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
                C21520 +
            (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
                C46998) *
               C31197 +
           ((C4715 * C6459 - C4719 * C6457 + C47367 * C22716 - C4720 * C22715) *
                C21520 +
            (C4715 * C6463 - C4719 * C6460 + C47367 * C22718 - C4720 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47389 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47378 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C1050 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47389 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47378 +
           (((C37793 - C37792 + C37795 - C37794) * C21520 +
             (C37797 - C37796 + C37799 - C37798) * C46998) *
                C31197 +
            ((C4719 * C2362 - C4715 * C2365 + C4720 * C7317 - C47367 * C7319) *
                 C21520 +
             (C4719 * C2366 - C4715 * C2371 + C4720 * C7320 - C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C1051 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47389 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C47378 +
           (((C37809 - C37808 + C37811 - C37810) * C21520 +
             (C37813 - C37812 + C37815 - C37814) * C46998) *
                C31197 +
            ((C4715 * C7319 - C4719 * C7317 + C47367 * C23348 -
              C4720 * C23347) *
                 C21520 +
             (C4715 * C7323 - C4719 * C7320 + C47367 * C23350 -
              C4720 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C1788 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C1789 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C1788 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C1789 +
           (((C5089 - C5088 + C5091 - C5090) * C21520 +
             (C5093 - C5092 + C5095 - C5094) * C46998) *
                C31197 +
            ((C7180 - C7181 + C7182 - C7183) * C21520 +
             (C7184 - C7185 + C7186 - C7187) * C46998) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C1788 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C1789 +
           (((C5105 - C5104 + C5107 - C5106) * C21520 +
             (C5109 - C5108 + C5111 - C5110) * C46998) *
                C31197 +
            ((C4715 * C1978 - C4719 * C1970 + C47367 * C2369 - C4720 * C2364) *
                 C21520 +
             (C4715 * C1988 - C4719 * C1979 + C47367 * C2373 - C4720 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C1788 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C1789 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47388 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C1788 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C1789 +
           (((C37793 - C37792 + C37795 - C37794) * C21520 +
             (C37797 - C37796 + C37799 - C37798) * C46998) *
                C31197 +
            ((C4719 * C2362 - C4715 * C2365 + C4720 * C7317 - C47367 * C7319) *
                 C21520 +
             (C4719 * C2366 - C4715 * C2371 + C4720 * C7320 - C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C47376 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C1788 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C1789 +
           (((C37809 - C37808 + C37811 - C37810) * C21520 +
             (C37813 - C37812 + C37815 - C37814) * C46998) *
                C31197 +
            ((C4715 * C7319 - C4719 * C7317 + C47367 * C23348 -
              C4720 * C23347) *
                 C21520 +
             (C4715 * C7323 - C4719 * C7320 + C47367 * C23350 -
              C4720 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C36940 - C36941 + C36942 - C36943) * C21520 +
            (C36944 - C36945 + C36946 - C36947) * C46998) *
               C47369) *
              C1963 +
          (((C36941 - C36940 + C36943 - C36942) * C21520 +
            (C36945 - C36944 + C36947 - C36946) * C46998) *
               C31197 +
           ((C36948 - C36949 + C36950 - C36951) * C21520 +
            (C36952 - C36953 + C36954 - C36955) * C46998) *
               C47369) *
              C1964 +
          (((C36949 - C36948 + C36951 - C36950) * C21520 +
            (C36953 - C36952 + C36955 - C36954) * C46998) *
               C31197 +
           ((C38652 - C38653 + C38654 - C38655) * C21520 +
            (C38656 - C38657 + C38658 - C38659) * C46998) *
               C47369) *
              C1965 +
          (((C38653 - C38652 + C38655 - C38654) * C21520 +
            (C38657 - C38656 + C38659 - C38658) * C46998) *
               C31197 +
           ((C38660 - C38661 + C38662 - C38663) * C21520 +
            (C38664 - C38665 + C38666 - C38667) * C46998) *
               C47369) *
              C1966 +
          (((C38661 - C38660 + C38663 - C38662) * C21520 +
            (C38665 - C38664 + C38667 - C38666) * C46998) *
               C31197 +
           ((C4715 * C12383 - C4719 * C12381 + C47367 * C27670 -
             C4720 * C27669) *
                C21520 +
            (C4715 * C12387 - C4719 * C12384 + C47367 * C27672 -
             C4720 * C27671) *
                C46998) *
               C47369) *
              C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47318 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47318 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                  C21520 +
              (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                  C46998) *
                 C31197 +
             ((C37800 - C37801 + C37802 - C37803) * C21520 +
              (C37804 - C37805 + C37806 - C37807) * C46998) *
                 C47369) *
                C47318 +
            (((C37801 - C37800 + C37803 - C37802) * C21520 +
              (C37805 - C37804 + C37807 - C37806) * C46998) *
                 C31197 +
             ((C37808 - C37809 + C37810 - C37811) * C21520 +
              (C37812 - C37813 + C37814 - C37815) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47318 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47318 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C4911 - C4910 + C4913 - C4912) * C21520 +
              (C4915 - C4914 + C4917 - C4916) * C46998) *
                 C31197 +
             ((C6320 - C6321 + C6322 - C6323) * C21520 +
              (C6324 - C6325 + C6326 - C6327) * C46998) *
                 C47369) *
                C47318 +
            (((C6321 - C6320 + C6323 - C6322) * C21520 +
              (C6325 - C6324 + C6327 - C6326) * C46998) *
                 C31197 +
             ((C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                  C21520 +
              (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47318 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47318 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47156) *
              C47051 * C637 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47318 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C47156) *
              C47051 * C638 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C47318 +
           (((C5381 - C5380 + C5383 - C5382) * C21520 +
             (C5385 - C5384 + C5387 - C5386) * C46998) *
                C31197 +
            ((C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                 C21520 +
             (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C2248 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C2249 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C38652 - C38653 + C38654 - C38655) * C21520 +
             (C38656 - C38657 + C38658 - C38659) * C46998) *
                C47369) *
               C2250 +
           (((C38653 - C38652 + C38655 - C38654) * C21520 +
             (C38657 - C38656 + C38659 - C38658) * C46998) *
                C31197 +
            ((C38660 - C38661 + C38662 - C38663) * C21520 +
             (C38664 - C38665 + C38666 - C38667) * C46998) *
                C47369) *
               C47365) *
              C47051 * C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C2248 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C2249 +
           (((C5089 - C5088 + C5091 - C5090) * C21520 +
             (C5093 - C5092 + C5095 - C5094) * C46998) *
                C31197 +
            ((C7180 - C7181 + C7182 - C7183) * C21520 +
             (C7184 - C7185 + C7186 - C7187) * C46998) *
                C47369) *
               C2250 +
           (((C7181 - C7180 + C7183 - C7182) * C21520 +
             (C7185 - C7184 + C7187 - C7186) * C46998) *
                C31197 +
            ((C4715 * C1982 - C4719 * C1972 + C47367 * C6843 - C4720 * C6840) *
                 C21520 +
             (C4715 * C1990 - C4719 * C1983 + C47367 * C6846 - C4720 * C6844) *
                 C46998) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                 C21520 +
             (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                 C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C4719 * C906 - C4715 * C911 + C4720 * C1261 - C47367 * C1273) *
                 C21520 +
             (C4719 * C912 - C4715 * C921 + C4720 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                 C21520 +
             (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47349) *
              C285 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                C21520 +
            (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                C46998) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C4725 - C4724 + C4727 - C4726) * C21520 +
            (C4729 - C4728 + C4731 - C4730) * C46998) *
               C31197 +
           ((C5080 - C5081 + C5082 - C5083) * C21520 +
            (C5084 - C5085 + C5086 - C5087) * C46998) *
               C47369) *
              C47069 * C47051 * C109 +
          (((C4733 - C4732 + C4735 - C4734) * C21520 +
            (C4737 - C4736 + C4739 - C4738) * C46998) *
               C31197 +
           ((C5096 - C5097 + C5098 - C5099) * C21520 +
            (C5100 - C5101 + C5102 - C5103) * C46998) *
               C47369) *
              C47069 * C47051 * C110 +
          (((C4741 - C4740 + C4743 - C4742) * C21520 +
            (C4745 - C4744 + C4747 - C4746) * C46998) *
               C31197 +
           ((C5380 - C5381 + C5382 - C5383) * C21520 +
            (C5384 - C5385 + C5386 - C5387) * C46998) *
               C47369) *
              C47069 * C47051 * C111 +
          (((C4749 - C4748 + C4751 - C4750) * C21520 +
            (C4753 - C4752 + C4755 - C4754) * C46998) *
               C31197 +
           ((C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                C21520 +
            (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                C46998) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                 C21520 +
             (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C36940 - C36941 + C36942 - C36943) * C21520 +
            (C36944 - C36945 + C36946 - C36947) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C21520 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C46998) *
               C31197 +
           ((C37410 - C37411 + C37412 - C37413) * C21520 +
            (C37414 - C37415 + C37416 - C37417) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C21520 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C46998) *
               C31197 +
           ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                C21520 +
            (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C21520 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C46998) *
               C31197 +
           ((C4719 * C1666 - C4715 * C1669 + C4720 * C6457 - C47367 * C6459) *
                C21520 +
            (C4719 * C1670 - C4715 * C1675 + C4720 * C6460 - C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
                C21520 +
            (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
                C46998) *
               C31197 +
           ((C4715 * C6459 - C4719 * C6457 + C47367 * C22716 - C4720 * C22715) *
                C21520 +
            (C4715 * C6463 - C4719 * C6460 + C47367 * C22718 - C4720 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C1788 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C1789 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C1788 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C1789 +
           (((C5089 - C5088 + C5091 - C5090) * C21520 +
             (C5093 - C5092 + C5095 - C5094) * C46998) *
                C31197 +
            ((C7180 - C7181 + C7182 - C7183) * C21520 +
             (C7184 - C7185 + C7186 - C7187) * C46998) *
                C47369) *
               C47352) *
              C47051 * C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C1788 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C1789 +
           (((C5105 - C5104 + C5107 - C5106) * C21520 +
             (C5109 - C5108 + C5111 - C5110) * C46998) *
                C31197 +
            ((C4715 * C1978 - C4719 * C1970 + C47367 * C2369 - C4720 * C2364) *
                 C21520 +
             (C4715 * C1988 - C4719 * C1979 + C47367 * C2373 - C4720 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C1788 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C1789 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47388 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C1788 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C1789 +
           (((C37793 - C37792 + C37795 - C37794) * C21520 +
             (C37797 - C37796 + C37799 - C37798) * C46998) *
                C31197 +
            ((C4719 * C2362 - C4715 * C2365 + C4720 * C7317 - C47367 * C7319) *
                 C21520 +
             (C4719 * C2366 - C4715 * C2371 + C4720 * C7320 - C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C47376 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C1788 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C1789 +
           (((C37809 - C37808 + C37811 - C37810) * C21520 +
             (C37813 - C37812 + C37815 - C37814) * C46998) *
                C31197 +
            ((C4715 * C7319 - C4719 * C7317 + C47367 * C23348 -
              C4720 * C23347) *
                 C21520 +
             (C4715 * C7323 - C4719 * C7320 + C47367 * C23350 -
              C4720 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C3234 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C3234 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47028 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C3234 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C3234 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47037 +
          (((((C4733 - C4732 + C4735 - C4734) * C21520 +
              (C4737 - C4736 + C4739 - C4738) * C46998) *
                 C31197 +
             ((C5096 - C5097 + C5098 - C5099) * C21520 +
              (C5100 - C5101 + C5102 - C5103) * C46998) *
                 C47369) *
                C3234 +
            (((C5097 - C5096 + C5099 - C5098) * C21520 +
              (C5101 - C5100 + C5103 - C5102) * C46998) *
                 C31197 +
             ((C5104 - C5105 + C5106 - C5107) * C21520 +
              (C5108 - C5109 + C5110 - C5111) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4919 - C4918 + C4921 - C4920) * C21520 +
              (C4923 - C4922 + C4925 - C4924) * C46998) *
                 C31197 +
             ((C5590 - C5591 + C5592 - C5593) * C21520 +
              (C5594 - C5595 + C5596 - C5597) * C46998) *
                 C47369) *
                C3234 +
            (((C5591 - C5590 + C5593 - C5592) * C21520 +
              (C5595 - C5594 + C5597 - C5596) * C46998) *
                 C31197 +
             ((C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                  C21520 +
              (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47152 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47159 +
            (((C36949 - C36948 + C36951 - C36950) * C21520 +
              (C36953 - C36952 + C36955 - C36954) * C46998) *
                 C31197 +
             ((C38652 - C38653 + C38654 - C38655) * C21520 +
              (C38656 - C38657 + C38658 - C38659) * C46998) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47152 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47159 +
            (((C37793 - C37792 + C37795 - C37794) * C21520 +
              (C37797 - C37796 + C37799 - C37798) * C46998) *
                 C31197 +
             ((C39122 - C39123 + C39124 - C39125) * C21520 +
              (C39126 - C39127 + C39128 - C39129) * C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C2580 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47152 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47159 +
            (((C5089 - C5088 + C5091 - C5090) * C21520 +
              (C5093 - C5092 + C5095 - C5094) * C46998) *
                 C31197 +
             ((C7180 - C7181 + C7182 - C7183) * C21520 +
              (C7184 - C7185 + C7186 - C7187) * C46998) *
                 C47369) *
                C3742) *
               C47317 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47152 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47159 +
            (((C7043 - C7042 + C7045 - C7044) * C21520 +
              (C7047 - C7046 + C7049 - C7048) * C46998) *
                 C31197 +
             ((C4715 * C2367 - C4719 * C2363 + C47367 * C7321 - C4720 * C7318) *
                  C21520 +
              (C4715 * C2372 - C4719 * C2368 + C47367 * C7324 - C4720 * C7322) *
                  C46998) *
                 C47369) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C3234 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C3234 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                  C21520 +
              (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                  C46998) *
                 C31197 +
             ((C37800 - C37801 + C37802 - C37803) * C21520 +
              (C37804 - C37805 + C37806 - C37807) * C46998) *
                 C47369) *
                C3234 +
            (((C37801 - C37800 + C37803 - C37802) * C21520 +
              (C37805 - C37804 + C37807 - C37806) * C46998) *
                 C31197 +
             ((C37808 - C37809 + C37810 - C37811) * C21520 +
              (C37812 - C37813 + C37814 - C37815) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C3234 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C3234 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C4911 - C4910 + C4913 - C4912) * C21520 +
              (C4915 - C4914 + C4917 - C4916) * C46998) *
                 C31197 +
             ((C6320 - C6321 + C6322 - C6323) * C21520 +
              (C6324 - C6325 + C6326 - C6327) * C46998) *
                 C47369) *
                C3234 +
            (((C6321 - C6320 + C6323 - C6322) * C21520 +
              (C6325 - C6324 + C6327 - C6326) * C46998) *
                 C31197 +
             ((C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                  C21520 +
              (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C3234 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C3234 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C3234 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C3234 +
           (((C5381 - C5380 + C5383 - C5382) * C21520 +
             (C5385 - C5384 + C5387 - C5386) * C46998) *
                C31197 +
            ((C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                 C21520 +
             (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47396 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47393 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C38652 - C38653 + C38654 - C38655) * C21520 +
             (C38656 - C38657 + C38658 - C38659) * C46998) *
                C47369) *
               C47384 +
           (((C38653 - C38652 + C38655 - C38654) * C21520 +
             (C38657 - C38656 + C38659 - C38658) * C46998) *
                C31197 +
            ((C38660 - C38661 + C38662 - C38663) * C21520 +
             (C38664 - C38665 + C38666 - C38667) * C46998) *
                C47369) *
               C47365) *
              C47051 * C2580 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47396 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47393 +
           (((C5089 - C5088 + C5091 - C5090) * C21520 +
             (C5093 - C5092 + C5095 - C5094) * C46998) *
                C31197 +
            ((C7180 - C7181 + C7182 - C7183) * C21520 +
             (C7184 - C7185 + C7186 - C7187) * C46998) *
                C47369) *
               C47384 +
           (((C7181 - C7180 + C7183 - C7182) * C21520 +
             (C7185 - C7184 + C7187 - C7186) * C46998) *
                C31197 +
            ((C4715 * C1982 - C4719 * C1972 + C47367 * C6843 - C4720 * C6840) *
                 C21520 +
             (C4715 * C1990 - C4719 * C1983 + C47367 * C6846 - C4720 * C6844) *
                 C46998) *
                C47369) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47152 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47159 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C38652 - C38653 + C38654 - C38655) * C21520 +
             (C38656 - C38657 + C38658 - C38659) * C46998) *
                C47369) *
               C3742) *
              C47051 * C47028 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47152 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47159 +
           (((C5089 - C5088 + C5091 - C5090) * C21520 +
             (C5093 - C5092 + C5095 - C5094) * C46998) *
                C31197 +
            ((C7180 - C7181 + C7182 - C7183) * C21520 +
             (C7184 - C7185 + C7186 - C7187) * C46998) *
                C47369) *
               C3742) *
              C47051 * C47037 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47152 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C47159 +
           (((C5105 - C5104 + C5107 - C5106) * C21520 +
             (C5109 - C5108 + C5111 - C5110) * C46998) *
                C31197 +
            ((C4715 * C1978 - C4719 * C1970 + C47367 * C2369 - C4720 * C2364) *
                 C21520 +
             (C4715 * C1988 - C4719 * C1979 + C47367 * C2373 - C4720 * C2370) *
                 C46998) *
                C47369) *
               C3742) *
              C47051 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C3234 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47394 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C3234 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47387 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C3234 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C47156) *
              C47051 * C47374 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C3234 +
           (((C5381 - C5380 + C5383 - C5382) * C21520 +
             (C5385 - C5384 + C5387 - C5386) * C46998) *
                C31197 +
            ((C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                 C21520 +
             (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C3234 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C3234 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                  C21520 +
              (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                  C46998) *
                 C31197 +
             ((C37800 - C37801 + C37802 - C37803) * C21520 +
              (C37804 - C37805 + C37806 - C37807) * C46998) *
                 C47369) *
                C3234 +
            (((C37801 - C37800 + C37803 - C37802) * C21520 +
              (C37805 - C37804 + C37807 - C37806) * C46998) *
                 C31197 +
             ((C37808 - C37809 + C37810 - C37811) * C21520 +
              (C37812 - C37813 + C37814 - C37815) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C2580 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C3234 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C47388 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C3234 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47376 +
           ((((C4911 - C4910 + C4913 - C4912) * C21520 +
              (C4915 - C4914 + C4917 - C4916) * C46998) *
                 C31197 +
             ((C6320 - C6321 + C6322 - C6323) * C21520 +
              (C6324 - C6325 + C6326 - C6327) * C46998) *
                 C47369) *
                C3234 +
            (((C6321 - C6320 + C6323 - C6322) * C21520 +
              (C6325 - C6324 + C6327 - C6326) * C46998) *
                 C31197 +
             ((C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                  C21520 +
              (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C4719 * C906 - C4715 * C911 + C4720 * C1261 - C47367 * C1273) *
                 C21520 +
             (C4719 * C912 - C4715 * C921 + C4720 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C636 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47114) *
              C637 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47114) *
              C638 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C47069 * C47317 +
           (((C5243 - C5242 + C5245 - C5244) * C21520 +
             (C5247 - C5246 + C5249 - C5248) * C46998) *
                C31197 +
            ((C4715 * C917 - C4719 * C909 + C47367 * C1557 - C4720 * C1556) *
                 C21520 +
             (C4715 * C924 - C4719 * C918 + C47367 * C1559 - C4720 * C1558) *
                 C46998) *
                C47369) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C4719 * C1666 - C4715 * C1669 + C4720 * C6457 - C47367 * C6459) *
                 C21520 +
             (C4719 * C1670 - C4715 * C1675 + C4720 * C6460 - C47367 * C6463) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47303 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C1392 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C1393 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C1394 +
           (((C6119 - C6118 + C6121 - C6120) * C21520 +
             (C6123 - C6122 + C6125 - C6124) * C46998) *
                C31197 +
            ((C4715 * C1671 - C4719 * C1667 + C47367 * C6461 - C4720 * C6458) *
                 C21520 +
             (C4715 * C1676 - C4719 * C1672 + C47367 * C6464 - C4720 * C6462) *
                 C46998) *
                C47369) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47318 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47318 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C4715 * C1267 - C4719 * C1258 + C47367 * C1279 - C4720 * C1264) *
                  C21520 +
              (C4715 * C1285 - C4719 * C1268 + C47367 * C1291 - C4720 * C1280) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C284 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47318 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47318 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C285 +
          (((((C4733 - C4732 + C4735 - C4734) * C21520 +
              (C4737 - C4736 + C4739 - C4738) * C46998) *
                 C31197 +
             ((C5096 - C5097 + C5098 - C5099) * C21520 +
              (C5100 - C5101 + C5102 - C5103) * C46998) *
                 C47369) *
                C47318 +
            (((C5097 - C5096 + C5099 - C5098) * C21520 +
              (C5101 - C5100 + C5103 - C5102) * C46998) *
                 C31197 +
             ((C5104 - C5105 + C5106 - C5107) * C21520 +
              (C5108 - C5109 + C5110 - C5111) * C46998) *
                 C47369) *
                C47156) *
               C47317 +
           ((((C4919 - C4918 + C4921 - C4920) * C21520 +
              (C4923 - C4922 + C4925 - C4924) * C46998) *
                 C31197 +
             ((C5590 - C5591 + C5592 - C5593) * C21520 +
              (C5594 - C5595 + C5596 - C5597) * C46998) *
                 C47369) *
                C47318 +
            (((C5591 - C5590 + C5593 - C5592) * C21520 +
              (C5595 - C5594 + C5597 - C5596) * C46998) *
                 C31197 +
             ((C4715 * C1271 - C4719 * C1260 + C47367 * C1283 - C4720 * C1266) *
                  C21520 +
              (C4715 * C1287 - C4719 * C1272 + C47367 * C1293 - C4720 * C1284) *
                  C46998) *
                 C47369) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47318 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C1392 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47318 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47156) *
              C1393 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47318 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C47156) *
              C1394 +
          ((((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                 C21520 +
             (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                 C46998) *
                C31197 +
            ((C38270 - C38271 + C38272 - C38273) * C21520 +
             (C38274 - C38275 + C38276 - C38277) * C46998) *
                C47369) *
               C47318 +
           (((C38271 - C38270 + C38273 - C38272) * C21520 +
             (C38275 - C38274 + C38277 - C38276) * C46998) *
                C31197 +
            ((C4715 * C5981 - C4719 * C5979 + C47367 * C22370 -
              C4720 * C22369) *
                 C21520 +
             (C4715 * C5985 - C4719 * C5982 + C47367 * C22372 -
              C4720 * C22371) *
                 C46998) *
                C47369) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                 C21520 +
             (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                 C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C4719 * C906 - C4715 * C911 + C4720 * C1261 - C47367 * C1273) *
                 C21520 +
             (C4719 * C912 - C4715 * C921 + C4720 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                 C21520 +
             (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47349) *
              C285 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                C21520 +
            (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                C46998) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C4725 - C4724 + C4727 - C4726) * C21520 +
            (C4729 - C4728 + C4731 - C4730) * C46998) *
               C31197 +
           ((C5080 - C5081 + C5082 - C5083) * C21520 +
            (C5084 - C5085 + C5086 - C5087) * C46998) *
               C47369) *
              C47069 * C47051 * C109 +
          (((C4733 - C4732 + C4735 - C4734) * C21520 +
            (C4737 - C4736 + C4739 - C4738) * C46998) *
               C31197 +
           ((C5096 - C5097 + C5098 - C5099) * C21520 +
            (C5100 - C5101 + C5102 - C5103) * C46998) *
               C47369) *
              C47069 * C47051 * C110 +
          (((C4741 - C4740 + C4743 - C4742) * C21520 +
            (C4745 - C4744 + C4747 - C4746) * C46998) *
               C31197 +
           ((C5380 - C5381 + C5382 - C5383) * C21520 +
            (C5384 - C5385 + C5386 - C5387) * C46998) *
               C47369) *
              C47069 * C47051 * C111 +
          (((C4749 - C4748 + C4751 - C4750) * C21520 +
            (C4753 - C4752 + C4755 - C4754) * C46998) *
               C31197 +
           ((C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                C21520 +
            (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                C46998) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47389 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47378 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C284 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47389 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47378 +
           (((C5089 - C5088 + C5091 - C5090) * C21520 +
             (C5093 - C5092 + C5095 - C5094) * C46998) *
                C31197 +
            ((C7180 - C7181 + C7182 - C7183) * C21520 +
             (C7184 - C7185 + C7186 - C7187) * C46998) *
                C47369) *
               C47352) *
              C47051 * C285 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47389 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C47378 +
           (((C5105 - C5104 + C5107 - C5106) * C21520 +
             (C5109 - C5108 + C5111 - C5110) * C46998) *
                C31197 +
            ((C4715 * C1978 - C4719 * C1970 + C47367 * C2369 - C4720 * C2364) *
                 C21520 +
             (C4715 * C1988 - C4719 * C1979 + C47367 * C2373 - C4720 * C2370) *
                 C46998) *
                C47369) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                 C21520 +
             (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C36940 - C36941 + C36942 - C36943) * C21520 +
            (C36944 - C36945 + C36946 - C36947) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C21520 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C46998) *
               C31197 +
           ((C37410 - C37411 + C37412 - C37413) * C21520 +
            (C37414 - C37415 + C37416 - C37417) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C21520 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C46998) *
               C31197 +
           ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                C21520 +
            (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C21520 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C46998) *
               C31197 +
           ((C4719 * C1666 - C4715 * C1669 + C4720 * C6457 - C47367 * C6459) *
                C21520 +
            (C4719 * C1670 - C4715 * C1675 + C4720 * C6460 - C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
                C21520 +
            (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
                C46998) *
               C31197 +
           ((C4715 * C6459 - C4719 * C6457 + C47367 * C22716 - C4720 * C22715) *
                C21520 +
            (C4715 * C6463 - C4719 * C6460 + C47367 * C22718 - C4720 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47389 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47378 +
           (((C36949 - C36948 + C36951 - C36950) * C21520 +
             (C36953 - C36952 + C36955 - C36954) * C46998) *
                C31197 +
            ((C4715 * C1974 - C4719 * C1968 + C47367 * C2365 - C4720 * C2362) *
                 C21520 +
             (C4715 * C1986 - C4719 * C1975 + C47367 * C2371 - C4720 * C2366) *
                 C46998) *
                C47369) *
               C47352) *
              C1050 +
          ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47389 +
           (((C37411 - C37410 + C37413 - C37412) * C21520 +
             (C37415 - C37414 + C37417 - C37416) * C46998) *
                C31197 +
            ((C37792 - C37793 + C37794 - C37795) * C21520 +
             (C37796 - C37797 + C37798 - C37799) * C46998) *
                C47369) *
               C47378 +
           (((C37793 - C37792 + C37795 - C37794) * C21520 +
             (C37797 - C37796 + C37799 - C37798) * C46998) *
                C31197 +
            ((C4719 * C2362 - C4715 * C2365 + C4720 * C7317 - C47367 * C7319) *
                 C21520 +
             (C4719 * C2366 - C4715 * C2371 + C4720 * C7320 - C47367 * C7323) *
                 C46998) *
                C47369) *
               C47352) *
              C1051 +
          ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C37800 - C37801 + C37802 - C37803) * C21520 +
             (C37804 - C37805 + C37806 - C37807) * C46998) *
                C47369) *
               C47389 +
           (((C37801 - C37800 + C37803 - C37802) * C21520 +
             (C37805 - C37804 + C37807 - C37806) * C46998) *
                C31197 +
            ((C37808 - C37809 + C37810 - C37811) * C21520 +
             (C37812 - C37813 + C37814 - C37815) * C46998) *
                C47369) *
               C47378 +
           (((C37809 - C37808 + C37811 - C37810) * C21520 +
             (C37813 - C37812 + C37815 - C37814) * C46998) *
                C31197 +
            ((C4715 * C7319 - C4719 * C7317 + C47367 * C23348 -
              C4720 * C23347) *
                 C21520 +
             (C4715 * C7323 - C4719 * C7320 + C47367 * C23350 -
              C4720 * C23349) *
                 C46998) *
                C47369) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47318 +
           (((C36941 - C36940 + C36943 - C36942) * C21520 +
             (C36945 - C36944 + C36947 - C36946) * C46998) *
                C31197 +
            ((C36948 - C36949 + C36950 - C36951) * C21520 +
             (C36952 - C36953 + C36954 - C36955) * C46998) *
                C47369) *
               C47156) *
              C47051 * C636 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47318 +
           (((C5081 - C5080 + C5083 - C5082) * C21520 +
             (C5085 - C5084 + C5087 - C5086) * C46998) *
                C31197 +
            ((C5088 - C5089 + C5090 - C5091) * C21520 +
             (C5092 - C5093 + C5094 - C5095) * C46998) *
                C47369) *
               C47156) *
              C47051 * C637 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47318 +
           (((C5097 - C5096 + C5099 - C5098) * C21520 +
             (C5101 - C5100 + C5103 - C5102) * C46998) *
                C31197 +
            ((C5104 - C5105 + C5106 - C5107) * C21520 +
             (C5108 - C5109 + C5110 - C5111) * C46998) *
                C47369) *
               C47156) *
              C47051 * C638 +
          ((((C4741 - C4740 + C4743 - C4742) * C21520 +
             (C4745 - C4744 + C4747 - C4746) * C46998) *
                C31197 +
            ((C5380 - C5381 + C5382 - C5383) * C21520 +
             (C5384 - C5385 + C5386 - C5387) * C46998) *
                C47369) *
               C47318 +
           (((C5381 - C5380 + C5383 - C5382) * C21520 +
             (C5385 - C5384 + C5387 - C5386) * C46998) *
                C31197 +
            ((C4715 * C492 - C4719 * C475 + C47367 * C2139 - C4720 * C2138) *
                 C21520 +
             (C4715 * C505 - C4719 * C493 + C47367 * C2141 - C4720 * C2140) *
                 C46998) *
                C47369) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                  C21520 +
              (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                  C46998) *
                 C31197 +
             ((C36940 - C36941 + C36942 - C36943) * C21520 +
              (C36944 - C36945 + C36946 - C36947) * C46998) *
                 C47369) *
                C47318 +
            (((C36941 - C36940 + C36943 - C36942) * C21520 +
              (C36945 - C36944 + C36947 - C36946) * C46998) *
                 C31197 +
             ((C36948 - C36949 + C36950 - C36951) * C21520 +
              (C36952 - C36953 + C36954 - C36955) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                  C21520 +
              (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                  C46998) *
                 C31197 +
             ((C37410 - C37411 + C37412 - C37413) * C21520 +
              (C37414 - C37415 + C37416 - C37417) * C46998) *
                 C47369) *
                C47318 +
            (((C37411 - C37410 + C37413 - C37412) * C21520 +
              (C37415 - C37414 + C37417 - C37416) * C46998) *
                 C31197 +
             ((C37792 - C37793 + C37794 - C37795) * C21520 +
              (C37796 - C37797 + C37798 - C37799) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                  C21520 +
              (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                  C46998) *
                 C31197 +
             ((C37800 - C37801 + C37802 - C37803) * C21520 +
              (C37804 - C37805 + C37806 - C37807) * C46998) *
                 C47369) *
                C47318 +
            (((C37801 - C37800 + C37803 - C37802) * C21520 +
              (C37805 - C37804 + C37807 - C37806) * C46998) *
                 C31197 +
             ((C37808 - C37809 + C37810 - C37811) * C21520 +
              (C37812 - C37813 + C37814 - C37815) * C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47303 +
          (((((C4725 - C4724 + C4727 - C4726) * C21520 +
              (C4729 - C4728 + C4731 - C4730) * C46998) *
                 C31197 +
             ((C5080 - C5081 + C5082 - C5083) * C21520 +
              (C5084 - C5085 + C5086 - C5087) * C46998) *
                 C47369) *
                C47318 +
            (((C5081 - C5080 + C5083 - C5082) * C21520 +
              (C5085 - C5084 + C5087 - C5086) * C46998) *
                 C31197 +
             ((C5088 - C5089 + C5090 - C5091) * C21520 +
              (C5092 - C5093 + C5094 - C5095) * C46998) *
                 C47369) *
                C47156) *
               C1050 +
           ((((C4903 - C4902 + C4905 - C4904) * C21520 +
              (C4907 - C4906 + C4909 - C4908) * C46998) *
                 C31197 +
             ((C5582 - C5583 + C5584 - C5585) * C21520 +
              (C5586 - C5587 + C5588 - C5589) * C46998) *
                 C47369) *
                C47318 +
            (((C5583 - C5582 + C5585 - C5584) * C21520 +
              (C5587 - C5586 + C5589 - C5588) * C46998) *
                 C31197 +
             ((C7042 - C7043 + C7044 - C7045) * C21520 +
              (C7046 - C7047 + C7048 - C7049) * C46998) *
                 C47369) *
                C47156) *
               C1051 +
           ((((C4911 - C4910 + C4913 - C4912) * C21520 +
              (C4915 - C4914 + C4917 - C4916) * C46998) *
                 C31197 +
             ((C6320 - C6321 + C6322 - C6323) * C21520 +
              (C6324 - C6325 + C6326 - C6327) * C46998) *
                 C47369) *
                C47318 +
            (((C6321 - C6320 + C6323 - C6322) * C21520 +
              (C6325 - C6324 + C6327 - C6326) * C46998) *
                 C31197 +
             ((C4715 * C1281 - C4719 * C1265 + C47367 * C5983 - C4720 * C5980) *
                  C21520 +
              (C4715 * C1292 - C4719 * C1282 + C47367 * C5986 - C4720 * C5984) *
                  C46998) *
                 C47369) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                C21520 +
            (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                C46998) *
               C47369) *
              C47069 * C47051 * C108 +
          (((C4725 - C4724 + C4727 - C4726) * C21520 +
            (C4729 - C4728 + C4731 - C4730) * C46998) *
               C31197 +
           ((C5080 - C5081 + C5082 - C5083) * C21520 +
            (C5084 - C5085 + C5086 - C5087) * C46998) *
               C47369) *
              C47069 * C47051 * C109 +
          (((C4733 - C4732 + C4735 - C4734) * C21520 +
            (C4737 - C4736 + C4739 - C4738) * C46998) *
               C31197 +
           ((C5096 - C5097 + C5098 - C5099) * C21520 +
            (C5100 - C5101 + C5102 - C5103) * C46998) *
               C47369) *
              C47069 * C47051 * C110 +
          (((C4741 - C4740 + C4743 - C4742) * C21520 +
            (C4745 - C4744 + C4747 - C4746) * C46998) *
               C31197 +
           ((C5380 - C5381 + C5382 - C5383) * C21520 +
            (C5384 - C5385 + C5386 - C5387) * C46998) *
               C47369) *
              C47069 * C47051 * C111 +
          (((C4749 - C4748 + C4751 - C4750) * C21520 +
            (C4753 - C4752 + C4755 - C4754) * C46998) *
               C31197 +
           ((C4715 * C494 - C4719 * C476 + C47367 * C919 - C4720 * C910) *
                C21520 +
            (C4715 * C506 - C4719 * C495 + C47367 * C925 - C4720 * C920) *
                C46998) *
               C47369) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C4715 * C478 - C4719 * C468 + C47367 * C911 - C4720 * C906) *
                 C21520 +
             (C4715 * C498 - C4719 * C479 + C47367 * C921 - C4720 * C912) *
                 C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C4719 * C906 - C4715 * C911 + C4720 * C1261 - C47367 * C1273) *
                 C21520 +
             (C4719 * C912 - C4715 * C921 + C4720 * C1274 - C47367 * C1288) *
                 C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                 C21520 +
             (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C284 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47349) *
              C285 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C47388 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C47376 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                 C21520 +
             (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                 C46998) *
                C31197 +
            ((C36940 - C36941 + C36942 - C36943) * C21520 +
             (C36944 - C36945 + C36946 - C36947) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                 C21520 +
             (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                 C46998) *
                C31197 +
            ((C37410 - C37411 + C37412 - C37413) * C21520 +
             (C37414 - C37415 + C37416 - C37417) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                 C21520 +
             (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                 C46998) *
                C31197 +
            ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                 C21520 +
             (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47385 +
          ((((C4725 - C4724 + C4727 - C4726) * C21520 +
             (C4729 - C4728 + C4731 - C4730) * C46998) *
                C31197 +
            ((C5080 - C5081 + C5082 - C5083) * C21520 +
             (C5084 - C5085 + C5086 - C5087) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4903 - C4902 + C4905 - C4904) * C21520 +
             (C4907 - C4906 + C4909 - C4908) * C46998) *
                C31197 +
            ((C5582 - C5583 + C5584 - C5585) * C21520 +
             (C5586 - C5587 + C5588 - C5589) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4911 - C4910 + C4913 - C4912) * C21520 +
             (C4915 - C4914 + C4917 - C4916) * C46998) *
                C31197 +
            ((C6320 - C6321 + C6322 - C6323) * C21520 +
             (C6324 - C6325 + C6326 - C6327) * C46998) *
                C47369) *
               C47069 * C47349) *
              C47372 +
          ((((C4733 - C4732 + C4735 - C4734) * C21520 +
             (C4737 - C4736 + C4739 - C4738) * C46998) *
                C31197 +
            ((C5096 - C5097 + C5098 - C5099) * C21520 +
             (C5100 - C5101 + C5102 - C5103) * C46998) *
                C47369) *
               C47069 * C1050 +
           (((C4919 - C4918 + C4921 - C4920) * C21520 +
             (C4923 - C4922 + C4925 - C4924) * C46998) *
                C31197 +
            ((C5590 - C5591 + C5592 - C5593) * C21520 +
             (C5594 - C5595 + C5596 - C5597) * C46998) *
                C47369) *
               C47069 * C1051 +
           (((C4927 - C4926 + C4929 - C4928) * C21520 +
             (C4931 - C4930 + C4933 - C4932) * C46998) *
                C31197 +
            ((C4715 * C1277 - C4719 * C1263 + C47367 * C1673 - C4720 * C1668) *
                 C21520 +
             (C4715 * C1290 - C4719 * C1278 + C47367 * C1677 - C4720 * C1674) *
                 C46998) *
                C47369) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4715 * C124 - C4719 * C117 + C47367 * C297 - C4720 * C287) *
                C21520 +
            (C4715 * C138 - C4719 * C125 + C47367 * C317 - C4720 * C298) *
                C46998) *
               C31197 +
           ((C36940 - C36941 + C36942 - C36943) * C21520 +
            (C36944 - C36945 + C36946 - C36947) * C46998) *
               C47369) *
              C47069 * C1118 +
          (((C4719 * C287 - C4715 * C297 + C4720 * C290 - C47367 * C303) *
                C21520 +
            (C4719 * C298 - C4715 * C317 + C4720 * C304 - C47367 * C320) *
                C46998) *
               C31197 +
           ((C37410 - C37411 + C37412 - C37413) * C21520 +
            (C37414 - C37415 + C37416 - C37417) * C46998) *
               C47369) *
              C47069 * C1119 +
          (((C4715 * C303 - C4719 * C290 + C47367 * C1130 - C4720 * C1124) *
                C21520 +
            (C4715 * C320 - C4719 * C304 + C47367 * C1142 - C4720 * C1131) *
                C46998) *
               C31197 +
           ((C4715 * C1273 - C4719 * C1261 + C47367 * C1669 - C4720 * C1666) *
                C21520 +
            (C4715 * C1288 - C4719 * C1274 + C47367 * C1675 - C4720 * C1670) *
                C46998) *
               C47369) *
              C47069 * C1120 +
          (((C4719 * C1124 - C4715 * C1130 + C4720 * C1127 - C47367 * C1136) *
                C21520 +
            (C4719 * C1131 - C4715 * C1142 + C4720 * C1137 - C47367 * C1145) *
                C46998) *
               C31197 +
           ((C4719 * C1666 - C4715 * C1669 + C4720 * C6457 - C47367 * C6459) *
                C21520 +
            (C4719 * C1670 - C4715 * C1675 + C4720 * C6460 - C47367 * C6463) *
                C46998) *
               C47369) *
              C47069 * C1121 +
          (((C4715 * C1136 - C4719 * C1127 + C47367 * C5827 - C4720 * C5825) *
                C21520 +
            (C4715 * C1145 - C4719 * C1137 + C47367 * C5831 - C4720 * C5828) *
                C46998) *
               C31197 +
           ((C4715 * C6459 - C4719 * C6457 + C47367 * C22716 - C4720 * C22715) *
                C21520 +
            (C4715 * C6463 - C4719 * C6460 + C47367 * C22718 - C4720 * C22717) *
                C46998) *
               C47369) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C47110 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47069 * C47117 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47069 * C2840) *
              C47028 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C47110 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
               C47069 * C47117 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C2840) *
              C47037 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C47110 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47117 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47318 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C47110 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C47318 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47117 +
           ((((C47255 * C303 - C113 * C290) * C21520 +
              (C47255 * C320 - C113 * C304) * C46998) *
                 C42155 +
             ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) *
                 C42156 +
             C43027 * C42157) *
                C47318 +
            (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) *
                 C42155 +
             ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) *
                 C42156 +
             ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                 C42157) *
                C47156) *
               C2840) *
              C2580 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47318 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C47110 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C47318 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47117 +
           ((((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
             (C11872 * C21520 + C11873 * C46998) * C42156 +
             ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                 C42157) *
                C47318 +
            ((C11870 * C21520 + C11871 * C46998) * C42155 +
             ((C11539 - C11538) * C21520 + (C11541 - C11540) * C46998) *
                 C42156 +
             ((C47255 * C7321 - C113 * C7318) * C21520 +
              (C47255 * C7324 - C113 * C7322) * C46998) *
                 C42157) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C47395 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47069 * C47391 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47069 * C47381 +
           (((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C43370 - C43371) * C21520 + (C43372 - C43373) * C46998) *
                C42157) *
               C47069 * C47359) *
              C2580 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C47395 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
               C47069 * C47391 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47381 +
           (((C1404 - C1403) * C21520 + (C1406 - C1405) * C46998) * C42155 +
            ((C11673 - C11672) * C21520 + (C11675 - C11674) * C46998) * C42156 +
            ((C47255 * C5983 - C113 * C5980) * C21520 +
             (C47255 * C5986 - C113 * C5984) * C46998) *
                C42157) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C2472 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47069 * C47114) *
              C47394 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C2472 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
               C47069 * C47114) *
              C47387 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C2472 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47114) *
              C47374 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C47069 * C2472 +
           ((C645 * C21520 + C646 * C46998) * C42155 +
            ((C936 - C935) * C21520 + (C938 - C937) * C46998) * C42156 +
            ((C47255 * C2139 - C113 * C2138) * C21520 +
             (C47255 * C2141 - C113 * C2140) * C46998) *
                C42157) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47389 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47378 +
            (C42389 * C42155 +
             ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) *
                 C42156 +
             C43673 * C42157) *
                C47352) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C47389 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47378 +
            (C43026 * C42155 +
             ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) *
                 C42156 +
             ((C44024 - C44025) * C21520 + (C44026 - C44027) * C46998) *
                 C42157) *
                C47352) *
               C47114) *
              C2580 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47389 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47378 +
            (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
             ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                 C42157) *
                C47352) *
               C2472 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C47389 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47378 +
            (C43822 * C42155 +
             ((C12601 - C12600) * C21520 + (C12603 - C12602) * C46998) *
                 C42156 +
             ((C47255 * C6843 - C113 * C6840) * C21520 +
              (C47255 * C6846 - C113 * C6844) * C46998) *
                 C42157) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47318 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C47318 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47114) *
              C47028 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47318 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C2472 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C47318 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47037 +
          ((((C166 * C21520 + C167 * C46998) * C42155 +
             (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
                C47318 +
            ((C533 * C21520 + C534 * C46998) * C42155 +
             (C10684 * C21520 + C10685 * C46998) * C42156 +
             ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
                C47156) *
               C2472 +
           (((C352 * C21520 + C353 * C46998) * C42155 +
             (C11150 * C21520 + C11151 * C46998) * C42156 +
             ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
                C47318 +
            ((C939 * C21520 + C940 * C46998) * C42155 +
             ((C2148 - C2147) * C21520 + (C2150 - C2149) * C46998) * C42156 +
             ((C47255 * C2369 - C113 * C2364) * C21520 +
              (C47255 * C2373 - C113 * C2370) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C2472 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47069 * C47114) *
              C47394 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C2472 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
               C47069 * C47114) *
              C47387 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C2472 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47114) *
              C47374 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C47069 * C2472 +
           ((C645 * C21520 + C646 * C46998) * C42155 +
            ((C936 - C935) * C21520 + (C938 - C937) * C46998) * C42156 +
            ((C47255 * C2139 - C113 * C2138) * C21520 +
             (C47255 * C2141 - C113 * C2140) * C46998) *
                C42157) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C47395 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47069 * C47391 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47069 * C47381 +
           (((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C43370 - C43371) * C21520 + (C43372 - C43373) * C46998) *
                C42157) *
               C47069 * C47359) *
              C2580 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C47395 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
               C47069 * C47391 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47381 +
           (((C1404 - C1403) * C21520 + (C1406 - C1405) * C46998) * C42155 +
            ((C11673 - C11672) * C21520 + (C11675 - C11674) * C46998) * C42156 +
            ((C47255 * C5983 - C113 * C5980) * C21520 +
             (C47255 * C5986 - C113 * C5984) * C46998) *
                C42157) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C3234 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C47110 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C3234 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47117 +
           ((((C47255 * C303 - C113 * C290) * C21520 +
              (C47255 * C320 - C113 * C304) * C46998) *
                 C42155 +
             ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) *
                 C42156 +
             C43027 * C42157) *
                C3234 +
            (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) *
                 C42155 +
             ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) *
                 C42156 +
             ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                 C42157) *
                C47156) *
               C2840) *
              C47303 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C3234 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C47110 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C3234 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47117 +
           ((((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
             (C11872 * C21520 + C11873 * C46998) * C42156 +
             ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                 C42157) *
                C3234 +
            ((C11870 * C21520 + C11871 * C46998) * C42155 +
             ((C11539 - C11538) * C21520 + (C11541 - C11540) * C46998) *
                 C42156 +
             ((C47255 * C7321 - C113 * C7318) * C21520 +
              (C47255 * C7324 - C113 * C7322) * C46998) *
                 C42157) *
                C47156) *
               C2840) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47152 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47159 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            C43673 * C42157) *
               C3742) *
              C47110 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47152 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            C44030 * C42157) *
               C47159 +
           (C43026 * C42155 +
            ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) * C42156 +
            ((C44024 - C44025) * C21520 + (C44026 - C44027) * C46998) *
                C42157) *
               C3742) *
              C47117 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47152 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C47159 +
           (C43027 * C42155 +
            ((C43019 - C43018) * C21520 + (C43021 - C43020) * C46998) * C42156 +
            ((C47255 * C23002 - C113 * C23001) * C21520 +
             (C47255 * C23004 - C113 * C23003) * C46998) *
                C42157) *
               C3742) *
              C2840) *
         C47023) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C3234 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47156) *
              C47395 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C3234 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            C44030 * C42157) *
               C47156) *
              C47391 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C3234 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C47156) *
              C47381 +
          ((((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C43370 - C43371) * C21520 + (C43372 - C43373) * C46998) *
                C42157) *
               C3234 +
           (((C12005 - C12004) * C21520 + (C12007 - C12006) * C46998) * C42155 +
            ((C43371 - C43370) * C21520 + (C43373 - C43372) * C46998) * C42156 +
            ((C47255 * C23348 - C113 * C23347) * C21520 +
             (C47255 * C23350 - C113 * C23349) * C46998) *
                C42157) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C3234 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C3234 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47114) *
              C47385 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C3234 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C2472 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C3234 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47372 +
          ((((C166 * C21520 + C167 * C46998) * C42155 +
             (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
                C3234 +
            ((C533 * C21520 + C534 * C46998) * C42155 +
             (C10684 * C21520 + C10685 * C46998) * C42156 +
             ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
                C47156) *
               C2472 +
           (((C352 * C21520 + C353 * C46998) * C42155 +
             (C11150 * C21520 + C11151 * C46998) * C42156 +
             ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
                C3234 +
            ((C939 * C21520 + C940 * C46998) * C42155 +
             ((C2148 - C2147) * C21520 + (C2150 - C2149) * C46998) * C42156 +
             ((C47255 * C2369 - C113 * C2364) * C21520 +
              (C47255 * C2373 - C113 * C2370) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47396 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47393 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            C43673 * C42157) *
               C47384 +
           (C43672 * C42155 +
            ((C12394 - C12395) * C21520 + (C12396 - C12397) * C46998) * C42156 +
            ((C43664 - C43665) * C21520 + (C43666 - C43667) * C46998) *
                C42157) *
               C47365) *
              C2472 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47396 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            C44030 * C42157) *
               C47393 +
           (C43026 * C42155 +
            ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) * C42156 +
            ((C44024 - C44025) * C21520 + (C44026 - C44027) * C46998) *
                C42157) *
               C47384 +
           (C44030 * C42155 +
            ((C44025 - C44024) * C21520 + (C44027 - C44026) * C46998) * C42156 +
            ((C47255 * C27670 - C113 * C27669) * C21520 +
             (C47255 * C27672 - C113 * C27671) * C46998) *
                C42157) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47152 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47159 +
            (C42389 * C42155 +
             ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) *
                 C42156 +
             C43673 * C42157) *
                C3742) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C47152 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47159 +
            (C43026 * C42155 +
             ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) *
                 C42156 +
             ((C44024 - C44025) * C21520 + (C44026 - C44027) * C46998) *
                 C42157) *
                C3742) *
               C47114) *
              C47303 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47152 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47159 +
            (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
             ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                 C42157) *
                C3742) *
               C2472 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C47152 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47159 +
            (C43822 * C42155 +
             ((C12601 - C12600) * C21520 + (C12603 - C12602) * C46998) *
                 C42156 +
             ((C47255 * C6843 - C113 * C6840) * C21520 +
              (C47255 * C6846 - C113 * C6844) * C46998) *
                 C42157) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C3234 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C2472 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C3234 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47114) *
              C47385 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C3234 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C2472 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C3234 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47372 +
          ((((C166 * C21520 + C167 * C46998) * C42155 +
             (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
                C3234 +
            ((C533 * C21520 + C534 * C46998) * C42155 +
             (C10684 * C21520 + C10685 * C46998) * C42156 +
             ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
                C47156) *
               C2472 +
           (((C352 * C21520 + C353 * C46998) * C42155 +
             (C11150 * C21520 + C11151 * C46998) * C42156 +
             ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
                C3234 +
            ((C939 * C21520 + C940 * C46998) * C42155 +
             ((C2148 - C2147) * C21520 + (C2150 - C2149) * C46998) * C42156 +
             ((C47255 * C2369 - C113 * C2364) * C21520 +
              (C47255 * C2373 - C113 * C2370) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C3234 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47156) *
              C47395 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C3234 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            C44030 * C42157) *
               C47156) *
              C47391 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C3234 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C47156) *
              C47381 +
          ((((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C43370 - C43371) * C21520 + (C43372 - C43373) * C46998) *
                C42157) *
               C3234 +
           (((C12005 - C12004) * C21520 + (C12007 - C12006) * C46998) * C42155 +
            ((C43371 - C43370) * C21520 + (C43373 - C43372) * C46998) * C42156 +
            ((C47255 * C23348 - C113 * C23347) * C21520 +
             (C47255 * C23350 - C113 * C23349) * C46998) *
                C42157) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C1392 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47069 * C1393 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47069 * C1394 +
           (((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C113 * C5979 - C47255 * C5981) * C21520 +
             (C113 * C5982 - C47255 * C5985) * C46998) *
                C42157) *
               C47069 * C47359) *
              C47303 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C1392 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C1393 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C1394 +
           (((C1404 - C1403) * C21520 + (C1406 - C1405) * C46998) * C42155 +
            ((C11673 - C11672) * C21520 + (C11675 - C11674) * C46998) * C42156 +
            ((C47255 * C5983 - C113 * C5980) * C21520 +
             (C47255 * C5986 - C113 * C5984) * C46998) *
                C42157) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C47317 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C47114) *
              C636 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C47317 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C47114) *
              C637 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C47317 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47114) *
              C638 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C47069 * C47317 +
           ((C645 * C21520 + C646 * C46998) * C42155 +
            ((C936 - C935) * C21520 + (C938 - C937) * C46998) * C42156 +
            ((C47255 * C2139 - C113 * C2138) * C21520 +
             (C47255 * C2141 - C113 * C2140) * C46998) *
                C42157) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C1788 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C1789 +
            (C42389 * C42155 +
             ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) *
                 C42156 +
             C43673 * C42157) *
                C47352) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C1788 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                 C42157) *
                C1789 +
            (C43026 * C42155 +
             ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) *
                 C42156 +
             ((C113 * C6839 - C47255 * C6841) * C21520 +
              (C113 * C6842 - C47255 * C6845) * C46998) *
                 C42157) *
                C47352) *
               C47114) *
              C47303 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C1788 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 +
             (C12734 * C21520 + C12735 * C46998) * C42157) *
                C1789 +
            (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
             ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                 C42157) *
                C47352) *
               C47317 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C1788 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C1789 +
            (C43822 * C42155 +
             ((C12601 - C12600) * C21520 + (C12603 - C12602) * C46998) *
                 C42156 +
             ((C47255 * C6843 - C113 * C6840) * C21520 +
              (C47255 * C6846 - C113 * C6844) * C46998) *
                 C42157) *
                C47352) *
               C47114) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47318 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47156) *
              C1392 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47318 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                C42157) *
               C47156) *
              C1393 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47318 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C47156) *
              C1394 +
          ((((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C43370 - C43371) * C21520 + (C43372 - C43373) * C46998) *
                C42157) *
               C47318 +
           (((C12005 - C12004) * C21520 + (C12007 - C12006) * C46998) * C42155 +
            ((C43371 - C43370) * C21520 + (C43373 - C43372) * C46998) * C42156 +
            ((C47255 * C23348 - C113 * C23347) * C21520 +
             (C47255 * C23350 - C113 * C23349) * C46998) *
                C42157) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47318 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                 C42157) *
                C47156) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                 C42157) *
                C47318 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C284 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47318 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 +
             (C12734 * C21520 + C12735 * C46998) * C42157) *
                C47156) *
               C47317 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 +
             (C12596 * C21520 + C12597 * C46998) * C42157) *
                C47318 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C285 +
          ((((C166 * C21520 + C167 * C46998) * C42155 +
             (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
                C47318 +
            ((C533 * C21520 + C534 * C46998) * C42155 +
             (C10684 * C21520 + C10685 * C46998) * C42156 +
             ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
                C47156) *
               C47317 +
           (((C352 * C21520 + C353 * C46998) * C42155 +
             (C11150 * C21520 + C11151 * C46998) * C42156 +
             ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
                C47318 +
            ((C939 * C21520 + C940 * C46998) * C42155 +
             ((C2148 - C2147) * C21520 + (C2150 - C2149) * C46998) * C42156 +
             ((C47255 * C2369 - C113 * C2364) * C21520 +
              (C47255 * C2373 - C113 * C2370) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C2248 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C2249 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            C43673 * C42157) *
               C2250 +
           (C43672 * C42155 +
            ((C12394 - C12395) * C21520 + (C12396 - C12397) * C46998) * C42156 +
            ((C43664 - C43665) * C21520 + (C43666 - C43667) * C46998) *
                C42157) *
               C47365) *
              C47317 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C2248 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            C44030 * C42157) *
               C2249 +
           (C43026 * C42155 +
            ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) * C42156 +
            ((C44024 - C44025) * C21520 + (C44026 - C44027) * C46998) *
                C42157) *
               C2250 +
           (C44030 * C42155 +
            ((C44025 - C44024) * C21520 + (C44027 - C44026) * C46998) * C42156 +
            ((C47255 * C27670 - C113 * C27669) * C21520 +
             (C47255 * C27672 - C113 * C27671) * C46998) *
                C42157) *
               C47365) *
              C47114) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47255 * C124 - C113 * C117) * C21520 +
                (C47255 * C138 - C113 * C125) * C46998) *
                   C42155 +
               ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                   C42156 +
               ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) *
                   C42157) *
                  C47069 * C47051 * C108 +
              (((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
               (C10672 * C21520 + C10673 * C46998) * C42156 +
               (C10678 * C21520 + C10679 * C46998) * C42157) *
                  C47069 * C47051 * C109 +
              ((C166 * C21520 + C167 * C46998) * C42155 +
               (C10682 * C21520 + C10683 * C46998) * C42156 +
               (C535 * C21520 + C536 * C46998) * C42157) *
                  C47069 * C47051 * C110 +
              ((C168 * C21520 + C169 * C46998) * C42155 +
               (C10946 * C21520 + C10947 * C46998) * C42156 +
               ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
                  C47069 * C47051 * C111 +
              ((C170 * C21520 + C171 * C46998) * C42155 +
               ((C758 - C757) * C21520 + (C760 - C759) * C46998) * C42156 +
               ((C47255 * C496 - C113 * C477) * C21520 +
                (C47255 * C507 - C113 * C497) * C46998) *
                   C42157) *
                  C47069 * C47051 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47255 * C124 - C113 * C117) * C21520 +
                 (C47255 * C138 - C113 * C125) * C46998) *
                    C42155 +
                ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                    C42156 +
                ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) *
                    C42157) *
                   C47069 * C47388 +
               (((C113 * C287 - C47255 * C297) * C21520 +
                 (C113 * C298 - C47255 * C317) * C46998) *
                    C42155 +
                ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                    C42156 +
                ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                    C42157) *
                   C47069 * C47376 +
               (((C47255 * C303 - C113 * C290) * C21520 +
                 (C47255 * C320 - C113 * C304) * C46998) *
                    C42155 +
                ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) *
                    C42156 +
                ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                    C42157) *
                   C47069 * C47349) *
                  C284 +
              ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
                (C10672 * C21520 + C10673 * C46998) * C42156 +
                (C10678 * C21520 + C10679 * C46998) * C42157) *
                   C47069 * C47388 +
               (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
                (C11148 * C21520 + C11149 * C46998) * C42156 +
                (C12596 * C21520 + C12597 * C46998) * C42157) *
                   C47069 * C47376 +
               (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
                (C11872 * C21520 + C11873 * C46998) * C42156 +
                ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                    C42157) *
                   C47069 * C47349) *
                  C285 +
              (((C166 * C21520 + C167 * C46998) * C42155 +
                (C10682 * C21520 + C10683 * C46998) * C42156 +
                (C535 * C21520 + C536 * C46998) * C42157) *
                   C47069 * C47388 +
               ((C352 * C21520 + C353 * C46998) * C42155 +
                (C11150 * C21520 + C11151 * C46998) * C42156 +
                ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) *
                    C42157) *
                   C47069 * C47376 +
               ((C354 * C21520 + C355 * C46998) * C42155 +
                ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
                ((C47255 * C1283 - C113 * C1266) * C21520 +
                 (C47255 * C1293 - C113 * C1284) * C46998) *
                    C42157) *
                   C47069 * C47349) *
                  C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47389 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47378 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C47051 * C284 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47389 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 +
            (C12734 * C21520 + C12735 * C46998) * C42157) *
               C47378 +
           (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
            ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                C42157) *
               C47352) *
              C47051 * C285 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47389 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C47378 +
           (C42388 * C42155 +
            ((C2262 - C2261) * C21520 + (C2264 - C2263) * C46998) * C42156 +
            ((C47255 * C1984 - C113 * C1973) * C21520 +
             (C47255 * C1991 - C113 * C1985) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C1050 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C1051 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C1050 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C1051 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           C42389 * C42157) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C21520 +
            (C113 * C298 - C47255 * C317) * C46998) *
               C42155 +
           ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
           ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) * C42157) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C21520 +
            (C47255 * C320 - C113 * C304) * C46998) *
               C42155 +
           ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
           ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) * C42157) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C21520 +
            (C113 * C1131 - C47255 * C1142) * C46998) *
               C42155 +
           ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
           ((C113 * C5979 - C47255 * C5981) * C21520 +
            (C113 * C5982 - C47255 * C5985) * C46998) *
               C42157) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C21520 +
            (C47255 * C1145 - C113 * C1137) * C46998) *
               C42155 +
           ((C47255 * C6459 - C113 * C6457) * C21520 +
            (C47255 * C6463 - C113 * C6460) * C46998) *
               C42156 +
           ((C47255 * C22370 - C113 * C22369) * C21520 +
            (C47255 * C22372 - C113 * C22371) * C46998) *
               C42157) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47389 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47378 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C1050 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47389 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                C42157) *
               C47378 +
           (C43026 * C42155 +
            ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) * C42156 +
            ((C113 * C6839 - C47255 * C6841) * C21520 +
             (C113 * C6842 - C47255 * C6845) * C46998) *
                C42157) *
               C47352) *
              C1051 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47389 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C47378 +
           (C43027 * C42155 +
            ((C43019 - C43018) * C21520 + (C43021 - C43020) * C46998) * C42156 +
            ((C47255 * C23002 - C113 * C23001) * C21520 +
             (C47255 * C23004 - C113 * C23003) * C46998) *
                C42157) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C1788 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C1789 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47385 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C1788 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 +
            (C12734 * C21520 + C12735 * C46998) * C42157) *
               C1789 +
           (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
            ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47372 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C1788 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C1789 +
           (C42388 * C42155 +
            ((C2262 - C2261) * C21520 + (C2264 - C2263) * C46998) * C42156 +
            ((C47255 * C1984 - C113 * C1973) * C21520 +
             (C47255 * C1991 - C113 * C1985) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C1788 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C1789 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C47388 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C1788 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                C42157) *
               C1789 +
           (C43026 * C42155 +
            ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) * C42156 +
            ((C113 * C6839 - C47255 * C6841) * C21520 +
             (C113 * C6842 - C47255 * C6845) * C46998) *
                C42157) *
               C47352) *
              C47376 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C1788 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C1789 +
           (C43027 * C42155 +
            ((C43019 - C43018) * C21520 + (C43021 - C43020) * C46998) * C42156 +
            ((C47255 * C23002 - C113 * C23001) * C21520 +
             (C47255 * C23004 - C113 * C23003) * C46998) *
                C42157) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           C42389 * C42157) *
              C1963 +
          (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
           ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
           C43672 * C42157) *
              C1964 +
          (C42389 * C42155 +
           ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
           C43673 * C42157) *
              C1965 +
          (C43672 * C42155 +
           ((C12394 - C12395) * C21520 + (C12396 - C12397) * C46998) * C42156 +
           ((C43664 - C43665) * C21520 + (C43666 - C43667) * C46998) * C42157) *
              C1966 +
          (C43673 * C42155 +
           ((C43665 - C43664) * C21520 + (C43667 - C43666) * C46998) * C42156 +
           ((C47255 * C43656 - C113 * C43655) * C21520 +
            (C47255 * C43658 - C113 * C43657) * C46998) *
               C42157) *
              C1967) *
         C47051 * C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47318 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                 C42157) *
                C47156) *
               C1050 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C47318 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                 C42157) *
                C47156) *
               C1051 +
           ((((C47255 * C303 - C113 * C290) * C21520 +
              (C47255 * C320 - C113 * C304) * C46998) *
                 C42155 +
             ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) *
                 C42156 +
             C43027 * C42157) *
                C47318 +
            (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) *
                 C42155 +
             ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) *
                 C42156 +
             ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C47303 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47318 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 +
             (C12734 * C21520 + C12735 * C46998) * C42157) *
                C47156) *
               C1050 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 +
             (C12596 * C21520 + C12597 * C46998) * C42157) *
                C47318 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C1051 +
           ((((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
             (C11872 * C21520 + C11873 * C46998) * C42156 +
             ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                 C42157) *
                C47318 +
            ((C11870 * C21520 + C11871 * C46998) * C42155 +
             ((C11539 - C11538) * C21520 + (C11541 - C11540) * C46998) *
                 C42156 +
             ((C47255 * C7321 - C113 * C7318) * C21520 +
              (C47255 * C7324 - C113 * C7322) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47318 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47156) *
              C47051 * C636 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47318 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 +
            (C12734 * C21520 + C12735 * C46998) * C42157) *
               C47156) *
              C47051 * C637 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47318 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C47156) *
              C47051 * C638 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C47318 +
           ((C755 * C21520 + C756 * C46998) * C42155 +
            ((C530 - C529) * C21520 + (C532 - C531) * C46998) * C42156 +
            ((C47255 * C2253 - C113 * C2252) * C21520 +
             (C47255 * C2255 - C113 * C2254) * C46998) *
                C42157) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C2248 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C2249 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            C43673 * C42157) *
               C2250 +
           (C43672 * C42155 +
            ((C12394 - C12395) * C21520 + (C12396 - C12397) * C46998) * C42156 +
            ((C43664 - C43665) * C21520 + (C43666 - C43667) * C46998) *
                C42157) *
               C47365) *
              C47051 * C47303 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C2248 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
               C2249 +
           (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
            ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                C42157) *
               C2250 +
           (C43923 * C42155 +
            ((C12399 - C12398) * C21520 + (C12401 - C12400) * C46998) * C42156 +
            ((C47255 * C12385 - C113 * C12382) * C21520 +
             (C47255 * C12388 - C113 * C12386) * C46998) *
                C42157) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) *
                C42157) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                C42157) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 +
            (C10678 * C21520 + C10679 * C46998) * C42157) *
               C47069 * C47388 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C47376 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47349) *
              C285 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 +
            (C535 * C21520 + C536 * C46998) * C42157) *
               C47069 * C47388 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47376 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) * C42157) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
           (C10672 * C21520 + C10673 * C46998) * C42156 +
           (C10678 * C21520 + C10679 * C46998) * C42157) *
              C47069 * C47051 * C109 +
          ((C166 * C21520 + C167 * C46998) * C42155 +
           (C10682 * C21520 + C10683 * C46998) * C42156 +
           (C535 * C21520 + C536 * C46998) * C42157) *
              C47069 * C47051 * C110 +
          ((C168 * C21520 + C169 * C46998) * C42155 +
           (C10946 * C21520 + C10947 * C46998) * C42156 +
           ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
              C47069 * C47051 * C111 +
          ((C170 * C21520 + C171 * C46998) * C42155 +
           ((C758 - C757) * C21520 + (C760 - C759) * C46998) * C42156 +
           ((C47255 * C496 - C113 * C477) * C21520 +
            (C47255 * C507 - C113 * C497) * C46998) *
               C42157) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C1050 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C1051 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C1050 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C1051 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           C42389 * C42157) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C21520 +
            (C113 * C298 - C47255 * C317) * C46998) *
               C42155 +
           ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
           ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) * C42157) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C21520 +
            (C47255 * C320 - C113 * C304) * C46998) *
               C42155 +
           ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
           ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) * C42157) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C21520 +
            (C113 * C1131 - C47255 * C1142) * C46998) *
               C42155 +
           ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
           ((C113 * C5979 - C47255 * C5981) * C21520 +
            (C113 * C5982 - C47255 * C5985) * C46998) *
               C42157) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C21520 +
            (C47255 * C1145 - C113 * C1137) * C46998) *
               C42155 +
           ((C47255 * C6459 - C113 * C6457) * C21520 +
            (C47255 * C6463 - C113 * C6460) * C46998) *
               C42156 +
           ((C47255 * C22370 - C113 * C22369) * C21520 +
            (C47255 * C22372 - C113 * C22371) * C46998) *
               C42157) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C1788 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C1789 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47385 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C1788 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 +
            (C12734 * C21520 + C12735 * C46998) * C42157) *
               C1789 +
           (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
            ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47372 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C1788 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C1789 +
           (C42388 * C42155 +
            ((C2262 - C2261) * C21520 + (C2264 - C2263) * C46998) * C42156 +
            ((C47255 * C1984 - C113 * C1973) * C21520 +
             (C47255 * C1991 - C113 * C1985) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C1788 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C1789 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C47388 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C1788 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                C42157) *
               C1789 +
           (C43026 * C42155 +
            ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) * C42156 +
            ((C113 * C6839 - C47255 * C6841) * C21520 +
             (C113 * C6842 - C47255 * C6845) * C46998) *
                C42157) *
               C47352) *
              C47376 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C1788 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C1789 +
           (C43027 * C42155 +
            ((C43019 - C43018) * C21520 + (C43021 - C43020) * C46998) * C42156 +
            ((C47255 * C23002 - C113 * C23001) * C21520 +
             (C47255 * C23004 - C113 * C23003) * C46998) *
                C42157) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C3234 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C3234 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47114) *
              C47028 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C3234 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C47317 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C3234 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47037 +
          ((((C166 * C21520 + C167 * C46998) * C42155 +
             (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
                C3234 +
            ((C533 * C21520 + C534 * C46998) * C42155 +
             (C10684 * C21520 + C10685 * C46998) * C42156 +
             ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
                C47156) *
               C47317 +
           (((C352 * C21520 + C353 * C46998) * C42155 +
             (C11150 * C21520 + C11151 * C46998) * C42156 +
             ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
                C3234 +
            ((C939 * C21520 + C940 * C46998) * C42155 +
             ((C2148 - C2147) * C21520 + (C2150 - C2149) * C46998) * C42156 +
             ((C47255 * C2369 - C113 * C2364) * C21520 +
              (C47255 * C2373 - C113 * C2370) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47152 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47159 +
            (C42389 * C42155 +
             ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) *
                 C42156 +
             C43673 * C42157) *
                C3742) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C47152 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47159 +
            (C43026 * C42155 +
             ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) *
                 C42156 +
             ((C44024 - C44025) * C21520 + (C44026 - C44027) * C46998) *
                 C42157) *
                C3742) *
               C47114) *
              C2580 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47152 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47159 +
            (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
             ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                 C42157) *
                C3742) *
               C47317 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C47152 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47159 +
            (C43822 * C42155 +
             ((C12601 - C12600) * C21520 + (C12603 - C12602) * C46998) *
                 C42156 +
             ((C47255 * C6843 - C113 * C6840) * C21520 +
              (C47255 * C6846 - C113 * C6844) * C46998) *
                 C42157) *
                C3742) *
               C47114) *
              C47034)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C3234 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C47388 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C3234 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47376 +
           ((((C47255 * C303 - C113 * C290) * C21520 +
              (C47255 * C320 - C113 * C304) * C46998) *
                 C42155 +
             ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) *
                 C42156 +
             C43027 * C42157) *
                C3234 +
            (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) *
                 C42155 +
             ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) *
                 C42156 +
             ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C2580 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C3234 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C47388 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C3234 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47376 +
           ((((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
             (C11872 * C21520 + C11873 * C46998) * C42156 +
             ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                 C42157) *
                C3234 +
            ((C11870 * C21520 + C11871 * C46998) * C42155 +
             ((C11539 - C11538) * C21520 + (C11541 - C11540) * C46998) *
                 C42156 +
             ((C47255 * C7321 - C113 * C7318) * C21520 +
              (C47255 * C7324 - C113 * C7322) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C3234 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47156) *
              C47051 * C47394 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C3234 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
               C47156) *
              C47051 * C47387 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C3234 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C47156) *
              C47051 * C47374 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C3234 +
           ((C755 * C21520 + C756 * C46998) * C42155 +
            ((C530 - C529) * C21520 + (C532 - C531) * C46998) * C42156 +
            ((C47255 * C2253 - C113 * C2252) * C21520 +
             (C47255 * C2255 - C113 * C2254) * C46998) *
                C42157) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47396 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47393 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            C43673 * C42157) *
               C47384 +
           (C43672 * C42155 +
            ((C12394 - C12395) * C21520 + (C12396 - C12397) * C46998) * C42156 +
            ((C43664 - C43665) * C21520 + (C43666 - C43667) * C46998) *
                C42157) *
               C47365) *
              C47051 * C2580 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47396 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
               C47393 +
           (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
            ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                C42157) *
               C47384 +
           (C43923 * C42155 +
            ((C12399 - C12398) * C21520 + (C12401 - C12400) * C46998) * C42156 +
            ((C47255 * C12385 - C113 * C12382) * C21520 +
             (C47255 * C12388 - C113 * C12386) * C46998) *
                C42157) *
               C47365) *
              C47051 * C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47152 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47159 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            C43673 * C42157) *
               C3742) *
              C47051 * C47028 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47152 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
               C47159 +
           (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
            ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                C42157) *
               C3742) *
              C47051 * C47037 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47152 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C47159 +
           (C42388 * C42155 +
            ((C2262 - C2261) * C21520 + (C2264 - C2263) * C46998) * C42156 +
            ((C47255 * C1984 - C113 * C1973) * C21520 +
             (C47255 * C1991 - C113 * C1985) * C46998) *
                C42157) *
               C3742) *
              C47051 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C3234 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            C43672 * C42157) *
               C47156) *
              C47051 * C47394 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C3234 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
               C47156) *
              C47051 * C47387 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C3234 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C47156) *
              C47051 * C47374 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C3234 +
           ((C755 * C21520 + C756 * C46998) * C42155 +
            ((C530 - C529) * C21520 + (C532 - C531) * C46998) * C42156 +
            ((C47255 * C2253 - C113 * C2252) * C21520 +
             (C47255 * C2255 - C113 * C2254) * C46998) *
                C42157) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C3234 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             C43672 * C42157) *
                C47156) *
               C47388 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C3234 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             C44030 * C42157) *
                C47156) *
               C47376 +
           ((((C47255 * C303 - C113 * C290) * C21520 +
              (C47255 * C320 - C113 * C304) * C46998) *
                 C42155 +
             ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) *
                 C42156 +
             C43027 * C42157) *
                C3234 +
            (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) *
                 C42155 +
             ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) *
                 C42156 +
             ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C2580 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C3234 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 + C43923 * C42157) *
                C47156) *
               C47388 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 + C43822 * C42157) *
                C3234 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47376 +
           ((((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
             (C11872 * C21520 + C11873 * C46998) * C42156 +
             ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                 C42157) *
                C3234 +
            ((C11870 * C21520 + C11871 * C46998) * C42155 +
             ((C11539 - C11538) * C21520 + (C11541 - C11540) * C46998) *
                 C42156 +
             ((C47255 * C7321 - C113 * C7318) * C21520 +
              (C47255 * C7324 - C113 * C7322) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C47317 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C47114) *
              C636 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C47317 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C47114) *
              C637 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C47317 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47114) *
              C638 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C47069 * C47317 +
           ((C645 * C21520 + C646 * C46998) * C42155 +
            ((C936 - C935) * C21520 + (C938 - C937) * C46998) * C42156 +
            ((C47255 * C2139 - C113 * C2138) * C21520 +
             (C47255 * C2141 - C113 * C2140) * C46998) *
                C42157) *
               C47069 * C47114) *
              C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C1392 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47069 * C1393 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47069 * C1394 +
           (((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C113 * C5979 - C47255 * C5981) * C21520 +
             (C113 * C5982 - C47255 * C5985) * C46998) *
                C42157) *
               C47069 * C47359) *
              C47303 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C1392 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C1393 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C1394 +
           (((C1404 - C1403) * C21520 + (C1406 - C1405) * C46998) * C42155 +
            ((C11673 - C11672) * C21520 + (C11675 - C11674) * C46998) * C42156 +
            ((C47255 * C5983 - C113 * C5980) * C21520 +
             (C47255 * C5986 - C113 * C5984) * C46998) *
                C42157) *
               C47069 * C47359) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47318 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                 C42157) *
                C47156) *
               C47317 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                 C42157) *
                C47318 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C284 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47318 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 +
             (C12734 * C21520 + C12735 * C46998) * C42157) *
                C47156) *
               C47317 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 +
             (C12596 * C21520 + C12597 * C46998) * C42157) *
                C47318 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C285 +
          ((((C166 * C21520 + C167 * C46998) * C42155 +
             (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
                C47318 +
            ((C533 * C21520 + C534 * C46998) * C42155 +
             (C10684 * C21520 + C10685 * C46998) * C42156 +
             ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
                C47156) *
               C47317 +
           (((C352 * C21520 + C353 * C46998) * C42155 +
             (C11150 * C21520 + C11151 * C46998) * C42156 +
             ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
                C47318 +
            ((C939 * C21520 + C940 * C46998) * C42155 +
             ((C2148 - C2147) * C21520 + (C2150 - C2149) * C46998) * C42156 +
             ((C47255 * C2369 - C113 * C2364) * C21520 +
              (C47255 * C2373 - C113 * C2370) * C46998) *
                 C42157) *
                C47156) *
               C47114) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47318 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47156) *
              C1392 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47318 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                C42157) *
               C47156) *
              C1393 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47318 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C47156) *
              C1394 +
          ((((C113 * C1124 - C47255 * C1130) * C21520 +
             (C113 * C1131 - C47255 * C1142) * C46998) *
                C42155 +
            ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
            ((C43370 - C43371) * C21520 + (C43372 - C43373) * C46998) *
                C42157) *
               C47318 +
           (((C12005 - C12004) * C21520 + (C12007 - C12006) * C46998) * C42155 +
            ((C43371 - C43370) * C21520 + (C43373 - C43372) * C46998) * C42156 +
            ((C47255 * C23348 - C113 * C23347) * C21520 +
             (C47255 * C23350 - C113 * C23349) * C46998) *
                C42157) *
               C47156) *
              C47359) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) *
                C42157) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                C42157) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 +
            (C10678 * C21520 + C10679 * C46998) * C42157) *
               C47069 * C47388 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C47376 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47349) *
              C285 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 +
            (C535 * C21520 + C536 * C46998) * C42157) *
               C47069 * C47388 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47376 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) * C42157) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
           (C10672 * C21520 + C10673 * C46998) * C42156 +
           (C10678 * C21520 + C10679 * C46998) * C42157) *
              C47069 * C47051 * C109 +
          ((C166 * C21520 + C167 * C46998) * C42155 +
           (C10682 * C21520 + C10683 * C46998) * C42156 +
           (C535 * C21520 + C536 * C46998) * C42157) *
              C47069 * C47051 * C110 +
          ((C168 * C21520 + C169 * C46998) * C42155 +
           (C10946 * C21520 + C10947 * C46998) * C42156 +
           ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
              C47069 * C47051 * C111 +
          ((C170 * C21520 + C171 * C46998) * C42155 +
           ((C758 - C757) * C21520 + (C760 - C759) * C46998) * C42156 +
           ((C47255 * C496 - C113 * C477) * C21520 +
            (C47255 * C507 - C113 * C497) * C46998) *
               C42157) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47389 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47378 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C47051 * C284 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47389 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 +
            (C12734 * C21520 + C12735 * C46998) * C42157) *
               C47378 +
           (C42387 * C42155 + (C12736 * C21520 + C12737 * C46998) * C42156 +
            ((C12398 - C12399) * C21520 + (C12400 - C12401) * C46998) *
                C42157) *
               C47352) *
              C47051 * C285 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47389 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C47378 +
           (C42388 * C42155 +
            ((C2262 - C2261) * C21520 + (C2264 - C2263) * C46998) * C42156 +
            ((C47255 * C1984 - C113 * C1973) * C21520 +
             (C47255 * C1991 - C113 * C1985) * C46998) *
                C42157) *
               C47352) *
              C47051 * C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C1050 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C1051 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C1050 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C1051 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           C42389 * C42157) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C21520 +
            (C113 * C298 - C47255 * C317) * C46998) *
               C42155 +
           ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
           ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) * C42157) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C21520 +
            (C47255 * C320 - C113 * C304) * C46998) *
               C42155 +
           ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
           ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) * C42157) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C21520 +
            (C113 * C1131 - C47255 * C1142) * C46998) *
               C42155 +
           ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
           ((C113 * C5979 - C47255 * C5981) * C21520 +
            (C113 * C5982 - C47255 * C5985) * C46998) *
               C42157) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C21520 +
            (C47255 * C1145 - C113 * C1137) * C46998) *
               C42155 +
           ((C47255 * C6459 - C113 * C6457) * C21520 +
            (C47255 * C6463 - C113 * C6460) * C46998) *
               C42156 +
           ((C47255 * C22370 - C113 * C22369) * C21520 +
            (C47255 * C22372 - C113 * C22371) * C46998) *
               C42157) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47389 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47378 +
           (C42389 * C42155 +
            ((C12390 - C12391) * C21520 + (C12392 - C12393) * C46998) * C42156 +
            ((C12395 - C12394) * C21520 + (C12397 - C12396) * C46998) *
                C42157) *
               C47352) *
              C1050 +
          ((((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            C43026 * C42157) *
               C47389 +
           (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) * C42155 +
            ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) * C42156 +
            ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                C42157) *
               C47378 +
           (C43026 * C42155 +
            ((C12868 - C12869) * C21520 + (C12870 - C12871) * C46998) * C42156 +
            ((C113 * C6839 - C47255 * C6841) * C21520 +
             (C113 * C6842 - C47255 * C6845) * C46998) *
                C42157) *
               C47352) *
              C1051 +
          ((((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            C43027 * C42157) *
               C47389 +
           (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) * C42155 +
            ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) * C42156 +
            ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                C42157) *
               C47378 +
           (C43027 * C42155 +
            ((C43019 - C43018) * C21520 + (C43021 - C43020) * C46998) * C42156 +
            ((C47255 * C23002 - C113 * C23001) * C21520 +
             (C47255 * C23004 - C113 * C23003) * C46998) *
                C42157) *
               C47352) *
              C47349) *
         C47023) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47318 +
           (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) * C42155 +
            ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) * C42156 +
            ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                C42157) *
               C47156) *
              C47051 * C636 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47318 +
           ((C10670 * C21520 + C10671 * C46998) * C42155 +
            (C10680 * C21520 + C10681 * C46998) * C42156 +
            (C12734 * C21520 + C12735 * C46998) * C42157) *
               C47156) *
              C47051 * C637 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47318 +
           ((C533 * C21520 + C534 * C46998) * C42155 +
            (C10684 * C21520 + C10685 * C46998) * C42156 +
            ((C2261 - C2262) * C21520 + (C2263 - C2264) * C46998) * C42157) *
               C47156) *
              C47051 * C638 +
          (((C168 * C21520 + C169 * C46998) * C42155 +
            (C10946 * C21520 + C10947 * C46998) * C42156 +
            ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
               C47318 +
           ((C755 * C21520 + C756 * C46998) * C42155 +
            ((C530 - C529) * C21520 + (C532 - C531) * C46998) * C42156 +
            ((C47255 * C2253 - C113 * C2252) * C21520 +
             (C47255 * C2255 - C113 * C2254) * C46998) *
                C42157) *
               C47156) *
              C47051 * C47353)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47255 * C124 - C113 * C117) * C21520 +
              (C47255 * C138 - C113 * C125) * C46998) *
                 C42155 +
             ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) *
                 C42156 +
             C42389 * C42157) *
                C47318 +
            (((C10667 - C10666) * C21520 + (C10669 - C10668) * C46998) *
                 C42155 +
             ((C10674 - C10675) * C21520 + (C10676 - C10677) * C46998) *
                 C42156 +
             ((C12391 - C12390) * C21520 + (C12393 - C12392) * C46998) *
                 C42157) *
                C47156) *
               C1050 +
           ((((C113 * C287 - C47255 * C297) * C21520 +
              (C113 * C298 - C47255 * C317) * C46998) *
                 C42155 +
             ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) *
                 C42156 +
             C43026 * C42157) *
                C47318 +
            (((C11143 - C11142) * C21520 + (C11145 - C11144) * C46998) *
                 C42155 +
             ((C11526 - C11527) * C21520 + (C11528 - C11529) * C46998) *
                 C42156 +
             ((C12869 - C12868) * C21520 + (C12871 - C12870) * C46998) *
                 C42157) *
                C47156) *
               C1051 +
           ((((C47255 * C303 - C113 * C290) * C21520 +
              (C47255 * C320 - C113 * C304) * C46998) *
                 C42155 +
             ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) *
                 C42156 +
             C43027 * C42157) *
                C47318 +
            (((C11531 - C11530) * C21520 + (C11533 - C11532) * C46998) *
                 C42155 +
             ((C11534 - C11535) * C21520 + (C11536 - C11537) * C46998) *
                 C42156 +
             ((C43018 - C43019) * C21520 + (C43020 - C43021) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C47303 +
          (((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
             (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
                C47318 +
            ((C10670 * C21520 + C10671 * C46998) * C42155 +
             (C10680 * C21520 + C10681 * C46998) * C42156 +
             (C12734 * C21520 + C12735 * C46998) * C42157) *
                C47156) *
               C1050 +
           ((((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
             (C11148 * C21520 + C11149 * C46998) * C42156 +
             (C12596 * C21520 + C12597 * C46998) * C42157) *
                C47318 +
            ((C11146 * C21520 + C11147 * C46998) * C42155 +
             (C12598 * C21520 + C12599 * C46998) * C42156 +
             ((C12600 - C12601) * C21520 + (C12602 - C12603) * C46998) *
                 C42157) *
                C47156) *
               C1051 +
           ((((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
             (C11872 * C21520 + C11873 * C46998) * C42156 +
             ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                 C42157) *
                C47318 +
            ((C11870 * C21520 + C11871 * C46998) * C42155 +
             ((C11539 - C11538) * C21520 + (C11541 - C11540) * C46998) *
                 C42156 +
             ((C47255 * C7321 - C113 * C7318) * C21520 +
              (C47255 * C7324 - C113 * C7322) * C46998) *
                 C42157) *
                C47156) *
               C47349) *
              C47034)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) * C42157) *
              C47069 * C47051 * C108 +
          (((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
           (C10672 * C21520 + C10673 * C46998) * C42156 +
           (C10678 * C21520 + C10679 * C46998) * C42157) *
              C47069 * C47051 * C109 +
          ((C166 * C21520 + C167 * C46998) * C42155 +
           (C10682 * C21520 + C10683 * C46998) * C42156 +
           (C535 * C21520 + C536 * C46998) * C42157) *
              C47069 * C47051 * C110 +
          ((C168 * C21520 + C169 * C46998) * C42155 +
           (C10946 * C21520 + C10947 * C46998) * C42156 +
           ((C529 - C530) * C21520 + (C531 - C532) * C46998) * C42157) *
              C47069 * C47051 * C111 +
          ((C170 * C21520 + C171 * C46998) * C42155 +
           ((C758 - C757) * C21520 + (C760 - C759) * C46998) * C42156 +
           ((C47255 * C496 - C113 * C477) * C21520 +
            (C47255 * C507 - C113 * C497) * C46998) *
               C42157) *
              C47069 * C47051 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            ((C10675 - C10674) * C21520 + (C10677 - C10676) * C46998) *
                C42157) *
               C47069 * C47388 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C47376 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                C42157) *
               C47069 * C47349) *
              C284 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 +
            (C10678 * C21520 + C10679 * C46998) * C42157) *
               C47069 * C47388 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C47376 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47349) *
              C285 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 +
            (C535 * C21520 + C536 * C46998) * C42157) *
               C47069 * C47388 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C47376 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47255 * C124 - C113 * C117) * C21520 +
             (C47255 * C138 - C113 * C125) * C46998) *
                C42155 +
            ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
            C42389 * C42157) *
               C47069 * C1050 +
           (((C113 * C287 - C47255 * C297) * C21520 +
             (C113 * C298 - C47255 * C317) * C46998) *
                C42155 +
            ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
            ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) *
                C42157) *
               C47069 * C1051 +
           (((C47255 * C303 - C113 * C290) * C21520 +
             (C47255 * C320 - C113 * C304) * C46998) *
                C42155 +
            ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
            ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47385 +
          ((((C147 - C146) * C21520 + (C149 - C148) * C46998) * C42155 +
            (C10672 * C21520 + C10673 * C46998) * C42156 + C42387 * C42157) *
               C47069 * C1050 +
           (((C329 - C328) * C21520 + (C331 - C330) * C46998) * C42155 +
            (C11148 * C21520 + C11149 * C46998) * C42156 +
            (C12596 * C21520 + C12597 * C46998) * C42157) *
               C47069 * C1051 +
           (((C337 - C336) * C21520 + (C339 - C338) * C46998) * C42155 +
            (C11872 * C21520 + C11873 * C46998) * C42156 +
            ((C11538 - C11539) * C21520 + (C11540 - C11541) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47372 +
          (((C166 * C21520 + C167 * C46998) * C42155 +
            (C10682 * C21520 + C10683 * C46998) * C42156 + C42388 * C42157) *
               C47069 * C1050 +
           ((C352 * C21520 + C353 * C46998) * C42155 +
            (C11150 * C21520 + C11151 * C46998) * C42156 +
            ((C2147 - C2148) * C21520 + (C2149 - C2150) * C46998) * C42157) *
               C47069 * C1051 +
           ((C354 * C21520 + C355 * C46998) * C42155 +
            ((C1566 - C1565) * C21520 + (C1568 - C1567) * C46998) * C42156 +
            ((C47255 * C1283 - C113 * C1266) * C21520 +
             (C47255 * C1293 - C113 * C1284) * C46998) *
                C42157) *
               C47069 * C47349) *
              C47343)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47255 * C124 - C113 * C117) * C21520 +
            (C47255 * C138 - C113 * C125) * C46998) *
               C42155 +
           ((C10666 - C10667) * C21520 + (C10668 - C10669) * C46998) * C42156 +
           C42389 * C42157) *
              C47069 * C1118 +
          (((C113 * C287 - C47255 * C297) * C21520 +
            (C113 * C298 - C47255 * C317) * C46998) *
               C42155 +
           ((C11142 - C11143) * C21520 + (C11144 - C11145) * C46998) * C42156 +
           ((C11527 - C11526) * C21520 + (C11529 - C11528) * C46998) * C42157) *
              C47069 * C1119 +
          (((C47255 * C303 - C113 * C290) * C21520 +
            (C47255 * C320 - C113 * C304) * C46998) *
               C42155 +
           ((C11530 - C11531) * C21520 + (C11532 - C11533) * C46998) * C42156 +
           ((C11535 - C11534) * C21520 + (C11537 - C11536) * C46998) * C42157) *
              C47069 * C1120 +
          (((C113 * C1124 - C47255 * C1130) * C21520 +
            (C113 * C1131 - C47255 * C1142) * C46998) *
               C42155 +
           ((C12004 - C12005) * C21520 + (C12006 - C12007) * C46998) * C42156 +
           ((C113 * C5979 - C47255 * C5981) * C21520 +
            (C113 * C5982 - C47255 * C5985) * C46998) *
               C42157) *
              C47069 * C1121 +
          (((C47255 * C1136 - C113 * C1127) * C21520 +
            (C47255 * C1145 - C113 * C1137) * C46998) *
               C42155 +
           ((C47255 * C6459 - C113 * C6457) * C21520 +
            (C47255 * C6463 - C113 * C6460) * C46998) *
               C42156 +
           ((C47255 * C22370 - C113 * C22369) * C21520 +
            (C47255 * C22372 - C113 * C22371) * C46998) *
               C42157) *
              C47069 * C1122) *
         C47023) /
            (p * q * std::sqrt(p + q));
}
